[comment] [EOL] [comment] [EOL] [comment] [EOL] import os [EOL] abspath = os . path . abspath ( __file__ ) [EOL] os . chdir ( os . path . dirname ( abspath ) ) [EOL] exec ( compile ( open ( [string] , [string] ) . read ( ) , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from __future__ import print_function [EOL] import os [EOL] import progressbar [EOL] try : [EOL] from urllib . request import urlopen [EOL] except ImportError : [EOL] from urllib2 import urlopen [EOL] [EOL] UnicodeXMLURL = [string] [EOL] InlineAxisOperatorsURL = [string] [EOL] [EOL] def downloadWithProgressBar ( url , outputDirectory = [string] , forceDownload = False ) : [EOL] [EOL] baseName = os . path . basename ( url ) [EOL] fileName = os . path . join ( outputDirectory , baseName ) [EOL] [EOL] if not forceDownload and os . path . exists ( fileName ) : [EOL] return fileName [EOL] [EOL] request = urlopen ( url ) [EOL] totalSize = int ( request . info ( ) . getheader ( [string] ) . strip ( ) ) [EOL] bar = progressbar . ProgressBar ( maxval = totalSize ) . start ( ) [EOL] [EOL] chunkSize = [number] * [number] [EOL] downloaded = [number] [EOL] print ( [string] % url ) [EOL] os . umask ( [number] ) [EOL] with open ( fileName , [string] ) as fp : [EOL] while True : [EOL] chunk = request . read ( chunkSize ) [EOL] downloaded += len ( chunk ) [EOL] bar . update ( downloaded ) [EOL] if not chunk : break [EOL] fp . write ( chunk ) [EOL] bar . finish ( ) [EOL] [EOL] return fileName [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] [EOL] readonly_template = [string] [EOL] [EOL] readwrite_template = [string] [EOL] [EOL] members_readonly = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] members_readwrite = [ [string] , [string] , [string] , ] [EOL] [EOL] def transform ( m ) : [EOL] return m [ [number] ] . upper ( ) + m [ [number] : ] [EOL] [EOL] tests = [ ( members_readonly , readonly_template ) , ( members_readwrite , readwrite_template ) , ] [EOL] [EOL] for ( members , template ) in tests : [EOL] for method in members : [EOL] path = [string] . format ( here = here , method = method ) [EOL] test = template . format ( method = method , interface = transform ( method ) ) [EOL] with open ( path , [string] ) as f : [EOL] f . write ( test . encode ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] response . headers . set ( [string] , [string] ) ; [EOL] response . headers . set ( [string] , [string] ) ; [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [string] if request . POST [ [string] ] . file . read ( ) == [string] else [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] import sys [EOL] [comment] [EOL] wdpath = os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] sys . path . insert ( [number] , wdpath ) [EOL] from tests . conftest import * [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from tests . support . inline import inline [EOL] [EOL] def test_load ( session ) : [EOL] inline ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] [docstring] [EOL] header = request . GET . first ( [string] ) [EOL] [EOL] response . headers . set ( [string] , header ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] status = int ( request . GET [ [string] ] ) [EOL] module = [string] [EOL] return status , [ ( [string] , [string] ) ] , module [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import io [EOL] import typing [EOL] import string [EOL] from string import Template [EOL] import os [EOL] import sys [EOL] [EOL] template = Template ( [string] ) [EOL] [EOL] placeholders = [ [string] , [string] , [string] ] [EOL] placeholderHeightAttrs = [ [string] , [string] , [string] ] [EOL] placeholderHeightAttrsDescriptions = [ [string] , [string] , [string] ] [EOL] [EOL] try : [EOL] os . makedirs ( [string] ) [EOL] except OSError : [EOL] pass [EOL] [EOL] for placeholder in placeholders : [EOL] for i , placeholderHeightAttr in enumerate ( placeholderHeightAttrs ) : [EOL] testContent = template . substitute ( placeholder = placeholder , placeholderHeightAttr = placeholderHeightAttr , generator = sys . argv [ [number] ] ) [EOL] filename = [string] % ( placeholder , placeholderHeightAttrsDescriptions [ i ] ) [EOL] f = open ( filename , [string] ) [EOL] f . write ( testContent ) [EOL] f . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] body = [string] [EOL] return [number] , headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] body = [string] [EOL] return [number] , headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] body = [string] [EOL] return [number] , headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import random [EOL] import time [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] def main ( request , response ) : [EOL] inlineOrExternal = request . GET . first ( [string] , [string] ) [EOL] hasBlockingStylesheet = request . GET . first ( [string] , [string] ) == [string] [EOL] result = request . GET . first ( [string] , [string] ) [EOL] type = [string] if request . GET . first ( [string] , [string] ) == [string] else [string] [EOL] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . write_status_headers ( ) [EOL] [EOL] [comment] [EOL] body = [string] [EOL] [EOL] if hasBlockingStylesheet : [EOL] body += [string] % random . random ( ) [EOL] [EOL] body += [string] [EOL] [EOL] if inlineOrExternal == [string] or inlineOrExternal == [string] or inlineOrExternal == [string] : [EOL] body += [string] [EOL] [EOL] [comment] [EOL] body += [string] * [number] [EOL] [EOL] response . writer . write ( [string] % len ( body ) ) [EOL] response . writer . write ( body ) [EOL] response . writer . write ( [string] ) [EOL] response . writer . flush ( ) [EOL] [EOL] body = [string] [EOL] [EOL] if inlineOrExternal == [string] : [EOL] time . sleep ( [number] ) [EOL] body += [string] % type [EOL] if result == [string] : [EOL] body += [string] [EOL] [EOL] body += [string] [EOL] elif inlineOrExternal == [string] : [EOL] time . sleep ( [number] ) [EOL] body += [string] % ( type , isomorphic_decode ( result ) , random . random ( ) ) [EOL] elif inlineOrExternal == [string] : [EOL] time . sleep ( [number] ) [EOL] body += [string] % ( type , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] body += [string] * [number] [EOL] [EOL] response . writer . write ( [string] % len ( body ) ) [EOL] response . writer . write ( body ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] response . writer . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] delay = float ( request . GET . first ( [string] , [number] ) ) [EOL] time . sleep ( delay / [number] ) [EOL] [EOL] return [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] referrer = request . headers . get ( [string] , [string] ) [EOL] response_headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] return ( [number] , response_headers , [string] + referrer + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , request . headers . get ( [string] ) ) , ( [string] , [string] ) ] [EOL] identifier = request . GET . first ( [string] ) [EOL] cookie_name = request . GET . first ( [string] ) [EOL] cookie = request . cookies . first ( cookie_name , None ) [EOL] if identifier is None or cookie_name is None : [EOL] return headers , [string] [EOL] [EOL] if cookie is None : [EOL] result = [string] [EOL] elif cookie . value == [string] : [EOL] result = [string] [EOL] else : [EOL] result = [string] + cookie . value [EOL] [EOL] return headers , [string] + identifier + [string] + result + [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , request . GET . first ( [string] ) ) [EOL] response . content = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from time import sleep [EOL] def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] delay = int ( request . GET [ [string] ] ) [EOL] sleep ( delay ) [EOL] [EOL] if [string] in request . GET : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] try : [EOL] count = int ( request . server . stash . take ( request . GET [ [string] ] ) ) [EOL] except : [EOL] count = [number] [EOL] if [string] in request . GET : [EOL] return str ( count ) [EOL] request . server . stash . put ( request . GET [ [string] ] , str ( count + [number] ) ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] * [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] time . sleep ( [number] ) [EOL] return [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import base64 [EOL] def main ( req , res ) : [EOL] return [number] , [ ( [string] , [string] ) ] , base64 . decodestring ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] def main ( request , response ) : [EOL] bytes = bytearray ( request . raw_input . read ( ) ) [EOL] bytes_string = [string] . join ( [string] % b for b in bytes ) [EOL] return ( [ ( [string] , [string] ) ] , bytes_string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
thirty_two_megabytes = [number] * [number] * [number] [EOL] chunk = [string] * [number] * [number] [EOL] chunk_length = len ( chunk ) [EOL] [EOL] def main ( request , response ) : [EOL] def content ( ) : [EOL] bytes_sent = [number] [EOL] while bytes_sent < thirty_two_megabytes : [EOL] yield chunk [EOL] bytes_sent += chunk_length [EOL] [EOL] return [ ( [string] , [string] ) ] , content ( ) [EOL]	$builtins.int$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from base64 import decodestring [EOL] import time [EOL] [EOL] png_response = decodestring ( [string] ) [EOL] [EOL] def main ( request , response ) : [EOL] time . sleep ( [number] ) [EOL] return [number] , [ ] , png_response [EOL]	0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0
def main ( request , response ) : [EOL] time = request . url_parts . query if request . url_parts . query else [string] [EOL] return [number] , [ [ [string] , [string] ] ] , [string] % time [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] time = isomorphic_encode ( request . url_parts . query ) if request . url_parts . query else [string] [EOL] return [number] , [ ( [string] , time ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] key = request . GET . first ( [string] ) [EOL] if request . method == [string] : [EOL] value = request . GET . first ( [string] ) [EOL] request . server . stash . take ( key ) [EOL] request . server . stash . put ( key , value ) [EOL] return [string] [EOL] else : [EOL] value = request . server . stash . take ( key ) [EOL] if value is not None : [EOL] return value [EOL] else : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] location = request . GET . first ( [string] ) [EOL] response . status = [number] [EOL] response . headers . set ( [string] , location ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [comment] [EOL] response . content = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] def main ( request , response ) : [EOL] type = request . GET [ [string] ] [EOL] if request . GET [ [string] ] == [string] : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] return [ ( [string] , [string] ) ] , type [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] script = [string] [EOL] [EOL] def main ( request , response ) : [EOL] type = request . GET [ [string] ] [EOL] if request . GET [ [string] ] == [string] : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] return [ ( [string] , [string] ) ] , script % type [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] script = [string] [EOL] [EOL] def main ( request , response ) : [EOL] type = request . GET [ [string] ] [EOL] if request . GET [ [string] ] == [string] : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] return [ ( [string] , [string] ) ] , script % type [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] def main ( request , response ) : [EOL] type = request . GET [ [string] ] [EOL] if request . GET [ [string] ] == [string] : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] return [ ( [string] , [string] ) ] , type [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] script = [string] [EOL] [EOL] def main ( request , response ) : [EOL] type = request . GET [ [string] ] [EOL] if request . GET [ [string] ] == [string] : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] return [ ( [string] , [string] ) ] , script % type [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] [EOL] def main ( request , response ) : [EOL] key = request . GET [ [string] ] [EOL] action = request . GET [ [string] ] [EOL] if action == [string] : [EOL] [comment] [EOL] q = re . search ( [string] , request . url_parts . query ) . groups ( ) [ [number] ] [EOL] request . server . stash . put ( key , q ) [EOL] return [ ( [string] , [string] ) ] , [string] % q [EOL] else : [EOL] q = request . server . stash . take ( key ) [EOL] if q != None : [EOL] return [ ( [string] , [string] ) ] , q [EOL] return [ ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] % ( request . GET [ [string] ] ) ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable [EOL] import typing [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] id = request . GET [ [string] ] [EOL] mode = request . GET [ [string] ] [EOL] fallback_url = [string] [EOL] if mode == [string] : [EOL] fallback_url = [string] [EOL] manifest = [string] % ( isomorphic_decode ( mode ) , fallback_url , isomorphic_decode ( id ) ) [EOL] return [ ( [string] , [string] % request . GET [ [string] ] ) ] , manifest . encode ( [string] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from gentestutils import genTestUtils [EOL] [EOL] genTestUtils ( [string] , [string] , [string] , [string] , False ) [EOL] genTestUtils ( [string] , [string] , [string] , [string] , True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , List , Match [EOL] import typing [EOL] import html5lib [EOL] import html5lib . treebuilders . dom [EOL] import re [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def extract ( ) : [EOL] parser = html5lib . html5parser . HTMLParser ( tree = html5lib . getTreeBuilder ( [string] ) ) [EOL] doc = parser . parse ( open ( [string] , [string] ) , transport_encoding = [string] ) [EOL] [EOL] head = doc . getElementsByTagName ( [string] ) [ [number] ] [EOL] for n in head . childNodes : [EOL] if n . tagName == [string] : [EOL] head . removeChild ( n ) [EOL] [EOL] header = doc . getElementsByTagName ( [string] ) [ [number] ] [EOL] [comment] [EOL] thecanvas = [ n for n in doc . getElementsByTagName ( [string] ) if n . getAttribute ( [string] ) == [string] ] [ [number] ] [EOL] [EOL] [comment] [EOL] copy = doc . createElement ( [string] ) [EOL] copy . setAttribute ( [string] , [string] ) [EOL] copy . appendChild ( doc . createTextNode ( [string] ) ) [EOL] header . appendChild ( copy ) [EOL] [EOL] keep = [ header , thecanvas ] [EOL] node = thecanvas . nextSibling [EOL] while node . nodeName != [string] : [EOL] keep . append ( node ) [EOL] node = node . nextSibling [EOL] p = thecanvas . parentNode [EOL] for n in p . childNodes [ : ] : [EOL] if n not in keep : [EOL] p . removeChild ( n ) [EOL] [EOL] for n in header . childNodes [ [number] : - [number] ] : [EOL] header . removeChild ( n ) [EOL] [EOL] def make_absolute ( url ) : [EOL] match = re . match ( [string] , url ) [EOL] if match : [EOL] return url [EOL] elif url [ [number] ] == [string] : [EOL] return [string] + url [EOL] else : [EOL] return [string] + url [EOL] [EOL] [comment] [EOL] for e in doc . getElementsByTagName ( [string] ) : [EOL] e . setAttribute ( [string] , make_absolute ( e . getAttribute ( [string] ) ) ) [EOL] for e in doc . getElementsByTagName ( [string] ) : [EOL] e . setAttribute ( [string] , make_absolute ( e . getAttribute ( [string] ) ) ) [EOL] for e in doc . getElementsByTagName ( [string] ) : [EOL] e . setAttribute ( [string] , make_absolute ( e . getAttribute ( [string] ) ) ) [EOL] for e in doc . getElementsByTagName ( [string] ) : [EOL] e . setAttribute ( [string] , make_absolute ( e . getAttribute ( [string] ) ) ) [EOL] [EOL] [comment] [EOL] doc . documentElement . setAttribute ( [string] , [string] ) [EOL] doc . removeChild ( doc . firstChild ) [comment] [EOL] [EOL] open ( [string] , [string] ) . write ( doc . toxml ( encoding = [string] ) ) [EOL] [EOL] extract ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Any , List , Dict [EOL] import codecs [EOL] import typing [EOL] from __future__ import print_function [EOL] [EOL] import re [EOL] import codecs [EOL] import time [EOL] import os [EOL] import shutil [EOL] import sys [EOL] import xml . dom . minidom [EOL] from xml . dom . minidom import Node [EOL] [EOL] try : [EOL] import cairocffi as cairo [EOL] except ImportError : [EOL] import cairo [EOL] [EOL] try : [EOL] import syck as yaml [comment] [EOL] except ImportError : [EOL] import yaml [EOL] [EOL] def genTestUtils ( TESTOUTPUTDIR , IMAGEOUTPUTDIR , TEMPLATEFILE , NAME2DIRFILE , ISOFFSCREENCANVAS ) : [EOL] [EOL] MISCOUTPUTDIR = [string] [EOL] SPECOUTPUTDIR = [string] [EOL] [EOL] SPECOUTPUTPATH = [string] [comment] [EOL] [EOL] def simpleEscapeJS ( str ) : [EOL] return str . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] def escapeJS ( str ) : [EOL] str = simpleEscapeJS ( str ) [EOL] str = re . sub ( [string] , [string] , str ) [comment] [EOL] return str [EOL] [EOL] def escapeHTML ( str ) : [EOL] return str . replace ( [string] , [string] ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] def expand_nonfinite ( method , argstr , tail ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] args = [ ] [EOL] for arg in argstr . split ( [string] ) : [EOL] a = re . match ( [string] , arg ) . group ( [number] ) [EOL] args . append ( a . split ( [string] ) ) [EOL] calls = [ ] [EOL] [comment] [EOL] call = [ args [ j ] [ [number] ] for j in range ( len ( args ) ) ] [EOL] [comment] [EOL] for i in range ( len ( args ) ) : [EOL] for a in args [ i ] [ [number] : ] : [EOL] c2 = call [ : ] [EOL] c2 [ i ] = a [EOL] calls . append ( c2 ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def f ( c , start , depth ) : [EOL] for i in range ( start , len ( args ) ) : [EOL] if len ( args [ i ] ) > [number] : [EOL] a = args [ i ] [ [number] ] [EOL] c2 = c [ : ] [EOL] c2 [ i ] = a [EOL] if depth > [number] : calls . append ( c2 ) [EOL] f ( c2 , i + [number] , depth + [number] ) [EOL] f ( call , [number] , [number] ) [EOL] [EOL] return [string] . join ( [string] % ( method , [string] . join ( c ) , tail ) for c in calls ) [EOL] [EOL] [comment] [EOL] if len ( sys . argv ) > [number] and sys . argv [ [number] ] == [string] : [EOL] import doctest [EOL] doctest . testmod ( ) [EOL] sys . exit ( ) [EOL] [EOL] templates = yaml . load ( open ( TEMPLATEFILE , [string] ) . read ( ) ) [EOL] name_mapping = yaml . load ( open ( NAME2DIRFILE , [string] ) . read ( ) ) [EOL] [EOL] SPECFILE = [string] [EOL] spec_assertions = [ ] [EOL] for s in yaml . load ( open ( SPECFILE , [string] ) . read ( ) ) [ [string] ] : [EOL] if [string] in s : [EOL] eval ( compile ( s [ [string] ] , [string] , [string] ) , { } , { [string] : spec_assertions } ) [EOL] else : [EOL] spec_assertions . append ( s ) [EOL] [EOL] tests = [ ] [EOL] test_yaml_directory = [string] [EOL] if ISOFFSCREENCANVAS : [EOL] test_yaml_directory = [string] [EOL] TESTSFILES = [ os . path . join ( test_yaml_directory , f ) for f in os . listdir ( test_yaml_directory ) if f . endswith ( [string] ) ] [EOL] for t in sum ( [ yaml . load ( open ( f , [string] ) . read ( ) ) for f in TESTSFILES ] , [ ] ) : [EOL] if [string] in t : [EOL] continue [EOL] if [string] in t : [EOL] eval ( compile ( t [ [string] ] , [string] , [string] ) , { } , { [string] : tests } ) [EOL] else : [EOL] tests . append ( t ) [EOL] [EOL] category_names = [ ] [EOL] category_contents_direct = { } [EOL] category_contents_all = { } [EOL] [EOL] spec_ids = { } [EOL] for t in spec_assertions : spec_ids [ t [ [string] ] ] = True [EOL] spec_refs = { } [EOL] [EOL] def backref_html ( name ) : [EOL] backrefs = [ ] [EOL] c = [string] [EOL] for p in name . split ( [string] ) [ : - [number] ] : [EOL] c += [string] + p [EOL] backrefs . append ( [string] % ( c , p ) ) [EOL] backrefs . append ( name . split ( [string] ) [ - [number] ] ) [EOL] return [string] . join ( backrefs ) [EOL] [EOL] def make_flat_image ( filename , w , h , r , g , b , a ) : [EOL] if os . path . exists ( [string] % ( IMAGEOUTPUTDIR , filename ) ) : [EOL] return filename [EOL] surface = cairo . ImageSurface ( cairo . FORMAT_ARGB32 , w , h ) [EOL] cr = cairo . Context ( surface ) [EOL] cr . set_source_rgba ( r , g , b , a ) [EOL] cr . rectangle ( [number] , [number] , w , h ) [EOL] cr . fill ( ) [EOL] surface . write_to_png ( [string] % ( IMAGEOUTPUTDIR , filename ) ) [EOL] return filename [EOL] [EOL] [comment] [EOL] testdirs = [ TESTOUTPUTDIR , IMAGEOUTPUTDIR , MISCOUTPUTDIR ] [EOL] for map_dir in set ( name_mapping . values ( ) ) : [EOL] testdirs . append ( [string] % ( TESTOUTPUTDIR , map_dir ) ) [EOL] for d in testdirs : [EOL] try : os . mkdir ( d ) [EOL] except : pass [comment] [EOL] [EOL] used_images = { } [EOL] [EOL] def map_name ( name ) : [EOL] mapped_name = None [EOL] for mn in sorted ( name_mapping . keys ( ) , key = len , reverse = True ) : [EOL] if name . startswith ( mn ) : [EOL] mapped_name = [string] % ( name_mapping [ mn ] , name ) [EOL] break [EOL] if not mapped_name : [EOL] print ( [string] % name ) [EOL] if [string] in test : [EOL] mapped_name += [string] [EOL] return mapped_name [EOL] [EOL] def expand_test_code ( code ) : [EOL] code = re . sub ( [string] , lambda m : expand_nonfinite ( m . group ( [number] ) , m . group ( [number] ) , m . group ( [number] ) ) , code ) [comment] [EOL] [EOL] if ISOFFSCREENCANVAS : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] else : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] if ISOFFSCREENCANVAS : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] else : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] if ISOFFSCREENCANVAS : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] else : [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] code = re . sub ( [string] , lambda m : [string] % ( m . group ( [number] ) , m . group ( [number] ) , escapeJS ( m . group ( [number] ) ) , escapeJS ( m . group ( [number] ) ) ) , code ) [EOL] [EOL] code = re . sub ( [string] , lambda m : [string] % ( m . group ( [number] ) , m . group ( [number] ) , escapeJS ( m . group ( [number] ) ) , escapeJS ( m . group ( [number] ) ) ) , code ) [EOL] [EOL] code = re . sub ( [string] , lambda m : [string] % ( m . group ( [number] ) , m . group ( [number] ) ) , code ) [EOL] [EOL] code = re . sub ( [string] , lambda m : [string] % ( m . group ( [number] ) , escapeJS ( m . group ( [number] ) ) ) , code ) [EOL] [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] code = re . sub ( [string] , [string] , code ) [EOL] [EOL] assert ( [string] not in code ) [EOL] [EOL] return code [EOL] [EOL] used_tests = { } [EOL] for i in range ( len ( tests ) ) : [EOL] test = tests [ i ] [EOL] [EOL] name = test [ [string] ] [EOL] print ( [string] % name , [string] * [number] , [string] ) [EOL] [EOL] if name in used_tests : [EOL] print ( [string] % name ) [EOL] used_tests [ name ] = [number] [EOL] [EOL] mapped_name = map_name ( name ) [EOL] if not mapped_name : [EOL] if ISOFFSCREENCANVAS : [EOL] continue [EOL] else : [EOL] mapped_name = name [EOL] [EOL] [EOL] cat_total = [string] [EOL] for cat_part in [ [string] ] + name . split ( [string] ) [ : - [number] ] : [EOL] cat_total += cat_part + [string] [EOL] if not cat_total in category_names : category_names . append ( cat_total ) [EOL] category_contents_all . setdefault ( cat_total , [ ] ) . append ( name ) [EOL] category_contents_direct . setdefault ( cat_total , [ ] ) . append ( name ) [EOL] [EOL] for ref in test . get ( [string] , [ ] ) : [EOL] if ref not in spec_ids : [EOL] print ( [string] % ( name , ref ) ) [EOL] spec_refs . setdefault ( ref , [ ] ) . append ( name ) [EOL] [EOL] if not test . get ( [string] , [ ] ) : [EOL] print ( [string] % name ) [EOL] [EOL] if test . get ( [string] , [string] ) == [string] and re . search ( [string] , test [ [string] ] ) : [EOL] print ( [string] % name ) [EOL] [EOL] code = expand_test_code ( test [ [string] ] ) [EOL] [EOL] expectation_html = [string] [EOL] if [string] in test and test [ [string] ] is not None : [EOL] expected = test [ [string] ] [EOL] expected_img = None [EOL] if expected == [string] : [EOL] expected_img = [string] [EOL] elif expected == [string] : [EOL] expected_img = [string] [EOL] else : [EOL] if [string] in expected : [EOL] print ( [string] % name ) [EOL] expected = re . sub ( [string] , [string] , expected ) [EOL] [EOL] if mapped_name . endswith ( [string] ) : [EOL] png_name = mapped_name [ : - len ( [string] ) ] [EOL] else : [EOL] png_name = mapped_name [EOL] expected += [string] % ( IMAGEOUTPUTDIR , png_name ) [EOL] eval ( compile ( expected , [string] % test [ [string] ] , [string] ) , { } , { [string] : cairo } ) [EOL] expected_img = [string] % name [EOL] [EOL] if expected_img : [EOL] expectation_html = ( [string] + [string] % (expected_img) ) [EOL] [EOL] canvas = test . get ( [string] , [string] ) [EOL] [EOL] prev = tests [ i - [number] ] [ [string] ] if i != [number] else [string] [EOL] next = tests [ i + [number] ] [ [string] ] if i != len ( tests ) - [number] else [string] [EOL] [EOL] name_wrapped = name . replace ( [string] , [string] ) [EOL] [EOL] refs = [string] . join ( [string] % ( SPECOUTPUTPATH , n , n ) for n in test . get ( [string] , [ ] ) ) [EOL] [EOL] notes = [string] % test [ [string] ] if [string] in test else [string] [EOL] [EOL] timeout = [string] % test [ [string] ] if [string] in test else [string] [EOL] [EOL] scripts = [string] [EOL] for s in test . get ( [string] , [ ] ) : [EOL] scripts += [string] % (s) [EOL] [EOL] variants = test . get ( [string] , { } ) [EOL] script_variants = [ ( v , [string] % (s) ) for ( v , s ) in variants . items ( ) ] [EOL] if not script_variants : [EOL] script_variants = [ ( [string] , [string] ) ] [EOL] [EOL] images = [string] [EOL] for i in test . get ( [string] , [ ] ) : [EOL] id = i . split ( [string] ) [ - [number] ] [EOL] if [string] not in i : [EOL] used_images [ i ] = [number] [EOL] i = [string] % i [EOL] images += [string] % ( i , id ) [EOL] for i in test . get ( [string] , [ ] ) : [EOL] id = i . split ( [string] ) [ - [number] ] [EOL] if [string] not in i : [EOL] used_images [ i ] = [number] [EOL] i = [string] % i [EOL] images += [string] % ( i , id ) [EOL] images = images . replace ( [string] , [string] ) [EOL] [EOL] fonts = [string] [EOL] fonthack = [string] [EOL] for i in test . get ( [string] , [ ] ) : [EOL] fonts += [string] % ( i , i ) [EOL] [comment] [EOL] if test . get ( [string] , [number] ) : [EOL] fonthack += [string] % i [EOL] if fonts : [EOL] fonts = [string] % fonts [EOL] [EOL] fallback = test . get ( [string] , [string] ) [EOL] [EOL] desc = test . get ( [string] , [string] ) [EOL] escaped_desc = simpleEscapeJS ( desc ) [EOL] [EOL] for ( variant , extra_script ) in script_variants : [EOL] name_variant = [string] if not variant else [string] + variant [EOL] [EOL] template_params = { [string] : name + name_variant , [string] : name_wrapped , [string] : backref_html ( name ) , [string] : mapped_name , [string] : desc , [string] : escaped_desc , [string] : prev , [string] : next , [string] : refs , [string] : notes , [string] : images , [string] : fonts , [string] : fonthack , [string] : timeout , [string] : canvas , [string] : expectation_html , [string] : code , [string] : scripts + extra_script , [string] : fallback } [EOL] [EOL] f = codecs . open ( [string] % ( TESTOUTPUTDIR , mapped_name , name_variant ) , [string] , [string] ) [EOL] f . write ( templates [ [string] ] % template_params ) [EOL] if ISOFFSCREENCANVAS : [EOL] f = codecs . open ( [string] % ( TESTOUTPUTDIR , mapped_name , name_variant ) , [string] , [string] ) [EOL] f . write ( templates [ [string] ] % template_params ) [EOL] [EOL] print ( ) [EOL] [EOL] [EOL] def getNodeText ( node ) : [EOL] t , offsets = [string] , [ ] [EOL] [EOL] [comment] [EOL] if node . nodeType == node . ELEMENT_NODE and [string] in node . getAttribute ( [string] ) . split ( [string] ) : [EOL] return t , offsets [EOL] [EOL] if node . nodeType == node . TEXT_NODE : [EOL] val = node . nodeValue [EOL] val = val . replace ( unichr ( [number] ) , [string] ) [comment] [EOL] t += val [EOL] offsets += [ ( node , len ( node . nodeValue ) ) ] [EOL] for n in node . childNodes : [EOL] child_t , child_offsets = getNodeText ( n ) [EOL] t += child_t [EOL] offsets += child_offsets [EOL] return t , offsets [EOL] [EOL] def htmlSerializer ( element ) : [EOL] element . normalize ( ) [EOL] rv = [ ] [EOL] specialtext = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] empty = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def serializeElement ( element ) : [EOL] if element . nodeType == Node . DOCUMENT_TYPE_NODE : [EOL] rv . append ( [string] % element . name ) [EOL] elif element . nodeType == Node . DOCUMENT_NODE : [EOL] for child in element . childNodes : [EOL] serializeElement ( child ) [EOL] elif element . nodeType == Node . COMMENT_NODE : [EOL] rv . append ( [string] % element . nodeValue ) [EOL] elif element . nodeType == Node . TEXT_NODE : [EOL] unescaped = False [EOL] n = element . parentNode [EOL] while n is not None : [EOL] if n . nodeName in specialtext : [EOL] unescaped = True [EOL] break [EOL] n = n . parentNode [EOL] if unescaped : [EOL] rv . append ( element . nodeValue ) [EOL] else : [EOL] rv . append ( escapeHTML ( element . nodeValue ) ) [EOL] else : [EOL] rv . append ( [string] % element . nodeName ) [EOL] if element . hasAttributes ( ) : [EOL] for name , value in element . attributes . items ( ) : [EOL] rv . append ( [string] % ( name , escapeHTML ( value ) ) ) [EOL] rv . append ( [string] ) [EOL] if element . nodeName not in empty : [EOL] for child in element . childNodes : [EOL] serializeElement ( child ) [EOL] rv . append ( [string] % element . nodeName ) [EOL] serializeElement ( element ) [EOL] return [string] + [string] . join ( rv ) [EOL]	
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] [EOL] for value in request . GET . get_list ( [string] ) : [EOL] headers . append ( ( [string] , value ) ) [EOL] [EOL] return ( [number] , headers , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import json [EOL] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if request . method == [string] : [EOL] return [string] [EOL] [EOL] uuidMap = { [string] : [string] , [string] : [string] } [EOL] key = [number] [EOL] if [string] in request . GET : [EOL] key = uuidMap [ request . GET [ [string] ] ] [EOL] [EOL] if [string] in request . GET : [EOL] key = request . GET [ [string] ] [EOL] [EOL] if key == [number] : [EOL] response . status = [number] [EOL] return [string] [EOL] [EOL] path = [string] . join ( request . url_parts . path . split ( [string] ) [ : - [number] ] ) + [string] [EOL] if request . method == [string] : [EOL] reports = request . server . stash . take ( key , path ) or [ ] [EOL] for report in json . loads ( request . body ) : [EOL] reports . append ( report ) [EOL] request . server . stash . put ( key , reports , path ) [EOL] return [string] [EOL] [EOL] if request . method == [string] : [EOL] response . headers . set ( [string] , [string] ) [EOL] return json . dumps ( request . server . stash . take ( key , path ) or [ ] ) [EOL] [EOL] response . status = [number] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] if request . method == [string] : [comment] [EOL] return [string] [EOL] [EOL] uuid = request . GET [ [string] ] [EOL] stash = request . server . stash ; [EOL] with stash . lock : [EOL] queue = stash . take ( uuid ) [EOL] if queue is None : [EOL] queue = [ ] [EOL] [EOL] if request . method == [string] : [EOL] queue . append ( request . body ) [EOL] ret = [string] [EOL] else : [EOL] if len ( queue ) == [number] : [EOL] ret = [string] [EOL] else : [EOL] ret = queue . pop ( [number] ) [EOL] stash . put ( uuid , queue ) [EOL] return ret ; [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import json [EOL] [EOL] RESPONSE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def main ( request , response ) : [EOL] types = [ key for key in request . GET . keys ( ) ] [EOL] header = [string] . join ( [string] + type + [string] for type in types ) [EOL] return ( [ ( [string] , header ) , ( [string] , [string] ) ] , RESPONSE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] from typing import Tuple , Literal [EOL] import typing_extensions [EOL] import io [EOL] import typing [EOL] from __future__ import print_function [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] THIS_NAME = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FILES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] EXTENSIONS = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] def __main__ ( ) : [EOL] if len ( sys . argv ) > [number] : [EOL] print ( [string] ) [EOL] return [EOL] [EOL] if not os . access ( THIS_NAME , os . F_OK ) : [EOL] print ( [string] + THIS_NAME + [string] ) [EOL] return [EOL] [EOL] for name in os . listdir ( [string] ) : [EOL] if name == THIS_NAME : [EOL] continue [EOL] os . remove ( name ) [EOL] [EOL] manifest = open ( [string] , [string] ) [EOL] [EOL] for name , contents in FILES : [EOL] for extension in EXTENSIONS : [EOL] f = open ( name + [string] + extension , [string] ) [EOL] f . write ( contents ) [EOL] f . close ( ) [EOL] manifest . write ( [string] + name + [string] + extension + [string] ) [EOL] [EOL] manifest . close ( ) [EOL] [EOL] __main__ ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
class Client ( object ) : [EOL] def __init__ ( self , session_token ) : [EOL] self . session_token = session_token [EOL] [EOL] def send_message ( self , message ) : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . client import Client [EOL] [EOL] [EOL] class HttpPollingClient ( Client ) : [EOL] def __init__ ( self , session_token , event ) : [EOL] super ( HttpPollingClient , self ) . __init__ ( session_token ) [EOL] self . event = event [EOL] [EOL] def send_message ( self , message ) : [EOL] self . message = message [EOL] self . event . set ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class PermissionDeniedException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
class DuplicateException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
class NotFoundException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
class InvalidDataException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any , Dict [EOL] import typing [EOL] from __future__ import with_statement [EOL] from __future__ import absolute_import [EOL] from __future__ import unicode_literals [EOL] import os [EOL] from io import open [EOL] [EOL] [EOL] class StaticHandler ( object ) : [EOL] def __init__ ( self , web_root , http_port , https_port ) : [EOL] self . static_dir = os . path . join ( os . getcwd ( ) , [string] ) [EOL] self . _web_root = web_root [EOL] self . _http_port = http_port [EOL] self . _https_port = https_port [EOL] [EOL] def handle_request ( self , request , response ) : [EOL] file_path = request . request_path [EOL] [EOL] if self . _web_root is not None : [EOL] file_path = file_path [ len ( self . _web_root ) : ] [EOL] [EOL] if file_path == [string] or file_path == [string] or file_path == [string] : [EOL] file_path = [string] [EOL] [EOL] file_path = file_path . split ( [string] ) [ [number] ] [EOL] file_path = os . path . join ( self . static_dir , file_path ) [EOL] [EOL] headers = [ ] [EOL] [EOL] content_types = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] headers . append ( ( [string] , content_types [ file_path . split ( [string] ) [ - [number] ] ] ) ) [EOL] [EOL] data = None [EOL] with open ( file_path , [string] ) as file : [EOL] data = file . read ( ) [EOL] [EOL] if file_path . split ( [string] ) [ - [number] ] == [string] : [EOL] data = data . decode ( [string] ) [EOL] data = data . replace ( [string] , str ( self . _web_root ) ) [EOL] data = data . replace ( [string] , str ( self . _http_port ) ) [EOL] data = data . replace ( [string] , str ( self . _https_port ) ) [EOL] [EOL] response . content = data [EOL] response . headers = headers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Any , List , Dict [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import unicode_literals [EOL] import json [EOL] try : [EOL] from urllib . parse import urlunsplit [EOL] except ImportError : [EOL] from urlparse import urlunsplit [EOL] [EOL] from . api_handler import ApiHandler [EOL] from . . . utils . serializer import serialize_session [EOL] from . . . data . session import PAUSED , COMPLETED , ABORTED , PENDING , RUNNING [EOL] [EOL] DEFAULT_LAST_COMPLETED_TESTS_COUNT = [number] [EOL] DEFAULT_LAST_COMPLETED_TESTS_STATUS = [ [string] ] [EOL] [EOL] [EOL] class TestsApiHandler ( ApiHandler ) : [EOL] def __init__ ( self , wpt_port , wpt_ssl_port , tests_manager , sessions_manager , hostname , web_root , test_loader ) : [EOL] super ( TestsApiHandler , self ) . __init__ ( web_root ) [EOL] self . _tests_manager = tests_manager [EOL] self . _sessions_manager = sessions_manager [EOL] self . _wpt_port = wpt_port [EOL] self . _wpt_ssl_port = wpt_ssl_port [EOL] self . _hostname = hostname [EOL] self . _web_root = web_root [EOL] self . _test_loader = test_loader [EOL] [EOL] def read_tests ( self , response ) : [EOL] tests = self . _tests_manager . read_tests ( ) [EOL] self . send_json ( tests , response ) [EOL] [EOL] def read_session_tests ( self , request , response ) : [EOL] uri_parts = self . parse_uri ( request ) [EOL] token = uri_parts [ [number] ] [EOL] session = self . _sessions_manager . read_session ( token ) [EOL] [EOL] if session is None : [EOL] response . status = [number] [EOL] return [EOL] [EOL] data = serialize_session ( session ) [EOL] tests = { [string] : token , [string] : data [ [string] ] , [string] : data [ [string] ] } [EOL] self . send_json ( tests , response ) [EOL] [EOL] def read_next_test ( self , request , response ) : [EOL] try : [EOL] uri_parts = self . parse_uri ( request ) [EOL] token = uri_parts [ [number] ] [EOL] [EOL] hostname = self . _hostname [EOL] [EOL] session = self . _sessions_manager . read_session ( token ) [EOL] if session is None : [EOL] response . status = [number] [EOL] return [EOL] [EOL] if session . status == PAUSED : [EOL] url = self . _generate_wave_url ( hostname = hostname , uri = [string] , token = token ) [EOL] self . send_json ( { [string] : url } , response ) [EOL] return [EOL] if session . status == COMPLETED or session . status == ABORTED : [EOL] url = self . _generate_wave_url ( hostname = hostname , uri = [string] , token = token ) [EOL] self . send_json ( { [string] : url } , response ) [EOL] return [EOL] if session . status == PENDING : [EOL] url = self . _generate_wave_url ( hostname = hostname , uri = [string] , token = token ) [EOL] self . send_json ( { [string] : url } , response ) [EOL] return [EOL] [EOL] test = self . _tests_manager . next_test ( session ) [EOL] [EOL] if test is None : [EOL] if session . status != RUNNING : [EOL] return [EOL] url = self . _generate_wave_url ( hostname = hostname , uri = [string] , token = token ) [EOL] self . send_json ( { [string] : url } , response ) [EOL] self . _sessions_manager . complete_session ( token ) [EOL] return [EOL] [EOL] test_timeout = self . _tests_manager . get_test_timeout ( test = test , session = session ) [EOL] url = self . _generate_test_url ( test = test , token = token , test_timeout = test_timeout , hostname = hostname ) [EOL] [EOL] self . send_json ( { [string] : url } , response ) [EOL] except Exception : [EOL] self . handle_exception ( [string] ) [EOL] response . status = [number] [EOL] [EOL] def read_last_completed ( self , request , response ) : [EOL] try : [EOL] uri_parts = self . parse_uri ( request ) [EOL] token = uri_parts [ [number] ] [EOL] query = self . parse_query_parameters ( request ) [EOL] count = None [EOL] if [string] in query : [EOL] count = query [ [string] ] [EOL] else : [EOL] count = DEFAULT_LAST_COMPLETED_TESTS_COUNT [EOL] [EOL] status = None [EOL] if [string] in query : [EOL] status = query [ [string] ] . split ( [string] ) [EOL] else : [EOL] status = DEFAULT_LAST_COMPLETED_TESTS_STATUS [EOL] [EOL] completed_tests = self . _tests_manager . read_last_completed_tests ( token , count ) [EOL] tests = { } [EOL] for one_status in status : [EOL] one_status = one_status . lower ( ) [EOL] if one_status == [string] : [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] continue [EOL] if one_status == [string] : [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] continue [EOL] if one_status == [string] : [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] continue [EOL] if one_status == [string] : [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] tests [ [string] ] = completed_tests [ [string] ] [EOL] break [EOL] self . send_json ( data = tests , response = response ) [EOL] except Exception : [EOL] self . handle_exception ( [string] ) [EOL] response . status = [number] [EOL] [EOL] def read_malfunctioning ( self , request , response ) : [EOL] try : [EOL] uri_parts = self . parse_uri ( request ) [EOL] token = uri_parts [ [number] ] [EOL] tm = self . _tests_manager [EOL] malfunctioning_tests = tm . read_malfunctioning_tests ( token ) [EOL] [EOL] self . send_json ( data = malfunctioning_tests , response = response ) [EOL] except Exception : [EOL] self . handle_exception ( [string] ) [EOL] response . status = [number] [EOL] [EOL] def update_malfunctioning ( self , request , response ) : [EOL] try : [EOL] uri_parts = self . parse_uri ( request ) [EOL] token = uri_parts [ [number] ] [EOL] [EOL] data = None [EOL] body = request . body . decode ( [string] ) [EOL] if body != [string] : [EOL] data = json . loads ( body ) [EOL] [EOL] self . _tests_manager . update_malfunctioning_tests ( token , data ) [EOL] except Exception : [EOL] self . handle_exception ( [string] ) [EOL] response . status = [number] [EOL] [EOL] def read_available_apis ( self , request , response ) : [EOL] try : [EOL] apis = self . _test_loader . get_apis ( ) [EOL] self . send_json ( apis , response ) [EOL] except Exception : [EOL] self . handle_exception ( [string] ) [EOL] response . status = [number] [EOL] [EOL] def handle_request ( self , request , response ) : [EOL] method = request . method [EOL] uri_parts = self . parse_uri ( request ) [EOL] [EOL] [comment] [EOL] if len ( uri_parts ) == [number] : [EOL] if method == [string] : [EOL] self . read_tests ( response ) [EOL] return [EOL] [EOL] [comment] [EOL] if len ( uri_parts ) == [number] : [EOL] if method == [string] : [EOL] if uri_parts [ [number] ] == [string] : [EOL] self . read_available_apis ( request , response ) [EOL] return [EOL] self . read_session_tests ( request , response ) [EOL] return [EOL] [EOL] [comment] [EOL] if len ( uri_parts ) == [number] : [EOL] function = uri_parts [ [number] ] [EOL] if method == [string] : [EOL] if function == [string] : [EOL] self . read_next_test ( request , response ) [EOL] return [EOL] if function == [string] : [EOL] self . read_last_completed ( request , response ) [EOL] return [EOL] if function == [string] : [EOL] self . read_malfunctioning ( request , response ) [EOL] return [EOL] if method == [string] : [EOL] if function == [string] : [EOL] self . update_malfunctioning ( request , response ) [EOL] return [EOL] [EOL] response . status = [number] [EOL] [EOL] def _generate_wave_url ( self , hostname , uri , token ) : [EOL] if self . _web_root is not None : [EOL] uri = self . _web_root + uri [EOL] [EOL] return self . _generate_url ( hostname = hostname , uri = uri , port = self . _wpt_port , query = [string] + token ) [EOL] [EOL] def _generate_test_url ( self , hostname , test , token , test_timeout ) : [EOL] protocol = [string] [EOL] port = self . _wpt_port [EOL] [EOL] if [string] in test : [EOL] protocol = [string] [EOL] port = self . _wpt_ssl_port [EOL] [EOL] query = [string] . format ( token , test_timeout , self . _wpt_ssl_port , self . _web_root ) [EOL] [EOL] return self . _generate_url ( protocol = protocol , hostname = hostname , port = port , uri = test , query = query ) [EOL] [EOL] def _generate_url ( self , hostname , port = None , uri = None , query = None , protocol = None ) : [EOL] if port is None : [EOL] port = [number] [EOL] if uri is None : [EOL] uri = [string] [EOL] if query is None : [EOL] query = [string] [EOL] if protocol is None : [EOL] protocol = [string] [EOL] return urlunsplit ( [ protocol , [string] . format ( hostname , port ) , uri , query , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0
from typing import List , Union , Type , Tuple , Any [EOL] import types [EOL] import typing [EOL] import logging [EOL] from __future__ import absolute_import [EOL] from __future__ import unicode_literals [EOL] import json [EOL] import sys [EOL] import traceback [EOL] import logging [EOL] try : [EOL] from urllib . parse import parse_qsl [EOL] except ImportError : [EOL] from urlparse import parse_qsl [EOL] [EOL] global logger [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class ApiHandler ( object ) : [EOL] def __init__ ( self , web_root ) : [EOL] self . _web_root = web_root [EOL] [EOL] def set_headers ( self , response , headers ) : [EOL] if not isinstance ( response . headers , list ) : [EOL] response . headers = [ ] [EOL] for header in headers : [EOL] response . headers . append ( header ) [EOL] [EOL] def send_json ( self , data , response , status = None ) : [EOL] if status is None : [EOL] status = [number] [EOL] json_string = json . dumps ( data , indent = [number] ) [EOL] response . content = json_string [EOL] self . set_headers ( response , [ ( [string] , [string] ) ] ) [EOL] response . status = status [EOL] [EOL] def send_file ( self , blob , file_name , response ) : [EOL] self . set_headers ( response , [ ( [string] , [string] + file_name ) ] ) [EOL] response . content = blob [EOL] [EOL] def send_zip ( self , data , file_name , response ) : [EOL] response . headers = [ ( [string] , [string] ) ] [EOL] self . send_file ( data , file_name , response ) [EOL] [EOL] def parse_uri ( self , request ) : [EOL] path = request . url_parts . path [EOL] if self . _web_root is not None : [EOL] path = path [ len ( self . _web_root ) : ] [EOL] [EOL] uri_parts = list ( filter ( None , path . split ( [string] ) ) ) [EOL] return uri_parts [EOL] [EOL] def parse_query_parameters ( self , request ) : [EOL] return dict ( parse_qsl ( request . url_parts . query ) ) [EOL] [EOL] def handle_exception ( self , message ) : [EOL] info = sys . exc_info ( ) [EOL] traceback . print_tb ( info [ [number] ] ) [EOL] logger . error ( [string] . format ( message , info [ [number] ] . __name__ , info [ [number] ] . args [ [number] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Pattern , List , Set [EOL] import typing [EOL] import argparse [EOL] import requests [EOL] import subprocess [EOL] import logging [EOL] import argparse [EOL] import logging [EOL] import os [EOL] import re [EOL] import subprocess [EOL] import sys [EOL] [EOL] from six import iteritems [EOL] [EOL] here = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] wpt_root = os . path . abspath ( os . path . join ( here , os . pardir , os . pardir ) ) [EOL] [EOL] logger = logging . getLogger ( ) [EOL] [EOL] [EOL] def build ( tag = [string] , * args , ** kwargs ) : [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , tag , here ] ) [EOL] [EOL] [EOL] def parser_push ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] return parser [EOL] [EOL] [EOL] def walk_yaml ( root , target ) : [EOL] rv = [ ] [EOL] if isinstance ( root , list ) : [EOL] for value in root : [EOL] if isinstance ( value , ( dict , list ) ) : [EOL] rv . extend ( walk_yaml ( value , target ) ) [EOL] elif isinstance ( root , dict ) : [EOL] for key , value in iteritems ( root ) : [EOL] if isinstance ( value , ( dict , list ) ) : [EOL] rv . extend ( walk_yaml ( value , target ) ) [EOL] elif key == target : [EOL] rv . append ( value ) [EOL] return rv [EOL] [EOL] [EOL] def read_image_name ( ) : [EOL] import yaml [EOL] with open ( os . path . join ( wpt_root , [string] ) ) as f : [EOL] taskcluster_data = yaml . safe_load ( f ) [EOL] taskcluster_values = set ( walk_yaml ( taskcluster_data , [string] ) ) [EOL] with open ( os . path . join ( wpt_root , [string] , [string] , [string] , [string] , [string] ) ) as f : [EOL] test_data = yaml . safe_load ( f ) [EOL] tests_value = test_data [ [string] ] [ [string] ] [ [string] ] [EOL] return taskcluster_values , tests_value [EOL] [EOL] [EOL] def lookup_tag ( tag ) : [EOL] import requests [EOL] org , repo_version = tag . split ( [string] , [number] ) [EOL] repo , version = repo_version . rsplit ( [string] , [number] ) [EOL] resp = requests . get ( [string] % ( org , repo , version ) ) [EOL] if resp . status_code == [number] : [EOL] return True [EOL] if resp . status_code == [number] : [EOL] return False [EOL] resp . raise_for_status ( ) [EOL] [EOL] [EOL] def push ( venv , tag = None , force = False , * args , ** kwargs ) : [EOL] taskcluster_tags , tests_tag = read_image_name ( ) [EOL] [EOL] taskcluster_tag = taskcluster_tags . pop ( ) [EOL] [EOL] error_log = logger . warning if force else logger . error [EOL] if len ( taskcluster_tags ) != [number] or tests_tag != taskcluster_tag : [EOL] error_log ( [string] [string] ) [EOL] if not force : [EOL] sys . exit ( [number] ) [EOL] if tag is not None and tag != taskcluster_tag : [EOL] error_log ( [string] [string] ) [EOL] if not force : [EOL] sys . exit ( [number] ) [EOL] if tag is None : [EOL] logger . info ( [string] % taskcluster_tag ) [EOL] tag = taskcluster_tag [EOL] [EOL] tag_re = re . compile ( [string] ) [EOL] if not tag_re . match ( tag ) : [EOL] error_log ( [string] ) [EOL] if not force : [EOL] sys . exit ( [number] ) [EOL] [EOL] if lookup_tag ( tag ) : [EOL] [comment] [EOL] logger . critical ( [string] % tag ) [EOL] sys . exit ( [number] ) [EOL] [EOL] build ( tag ) [EOL] subprocess . check_call ( [ [string] , [string] , tag ] ) [EOL] [EOL] [EOL] def parser_run ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] [string] [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] return parser [EOL] [EOL] [EOL] def run ( * args , ** kwargs ) : [EOL] if kwargs [ [string] ] : [EOL] build ( ) [EOL] [EOL] args = [ [string] , [string] ] [EOL] args . extend ( [ [string] , [string] % os . path . join ( wpt_root , [string] , [string] , [string] ) ] ) [EOL] if kwargs [ [string] ] : [EOL] args . append ( [string] ) [EOL] if kwargs [ [string] ] : [EOL] args . extend ( [ [string] , [string] % kwargs [ [string] ] ] ) [EOL] else : [EOL] args . extend ( [ [string] , [string] % wpt_root ] ) [EOL] args . extend ( [ [string] , [string] ] ) [EOL] [EOL] proc = subprocess . Popen ( args ) [EOL] proc . wait ( ) [EOL] return proc . returncode [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import typing [EOL] from tools . wpt import markdown [EOL] [EOL] def test_format_comment_title ( ) : [EOL] assert [string] == markdown . format_comment_title ( [string] ) [EOL] assert [string] == markdown . format_comment_title ( [string] ) [EOL] [EOL] def test_markdown_adjust ( ) : [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] assert [string] == markdown . markdown_adjust ( [string] ) [EOL] [EOL] result = [string] [EOL] def log ( text ) : [EOL] global result [EOL] result += text [EOL] [EOL] def test_table ( ) : [EOL] global result [EOL] headings = [ [string] , [string] ] [EOL] data = [ [ [string] , [string] ] ] [EOL] markdown . table ( headings , data , log ) [EOL] assert ( [string] [string] [string] ) == result [EOL] [EOL] result = [string] [EOL] data . append ( [ [string] , [string] ] ) [EOL] markdown . table ( headings , data , log ) [EOL] assert ( [string] [string] [string] [string] ) == result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
from typing import Any , Type [EOL] import threading [EOL] import typing [EOL] import tools [EOL] try : [EOL] from importlib import reload [EOL] except ImportError : [EOL] pass [EOL] import json [EOL] import os [EOL] try : [EOL] [comment] [EOL] import Queue as queue [comment] [EOL] except ImportError : [EOL] import queue [EOL] import sys [EOL] import tempfile [EOL] import threading [EOL] [EOL] import pytest [EOL] [EOL] from . import serve [EOL] from wptserve import logger [EOL] [EOL] [EOL] class ServerProcSpy ( serve . ServerProc ) : [EOL] instances = None [EOL] [EOL] def start ( self , * args , ** kwargs ) : [EOL] result = super ( ServerProcSpy , self ) . start ( * args , ** kwargs ) [EOL] [EOL] if ServerProcSpy . instances is not None : [EOL] ServerProcSpy . instances . put ( self ) [EOL] [EOL] return result [EOL] [EOL] serve . ServerProc = ServerProcSpy [EOL] [EOL] @ pytest . fixture ( ) def server_subprocesses ( ) : [EOL] ServerProcSpy . instances = queue . Queue ( ) [EOL] yield ServerProcSpy . instances [EOL] ServerProcSpy . instances = None [EOL] [EOL] @ pytest . fixture ( ) def tempfile_name ( ) : [EOL] fd , name = tempfile . mkstemp ( ) [EOL] yield name [EOL] os . close ( fd ) [EOL] os . remove ( name ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . version_info >= ( [number] , [number] ) and sys . platform == [string] , reason = [string] ) def test_subprocess_exit ( server_subprocesses , tempfile_name ) : [EOL] timeout = [number] [EOL] [EOL] def target ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with open ( tempfile_name , [string] ) as handle : [EOL] json . dump ( { [string] : False , [string] : False } , handle ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] reload ( logger ) [EOL] [EOL] serve . run ( config_path = tempfile_name ) [EOL] [EOL] thread = threading . Thread ( target = target ) [EOL] [EOL] thread . start ( ) [EOL] [EOL] server_subprocesses . get ( True , timeout ) [EOL] subprocess = server_subprocesses . get ( True , timeout ) [EOL] subprocess . kill ( ) [EOL] [EOL] thread . join ( timeout ) [EOL] [EOL] assert not thread . is_alive ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import argparse [EOL] import argparse [EOL] import logging [EOL] import os [EOL] [EOL] import taskcluster [EOL] [EOL] [EOL] logging . basicConfig ( ) [EOL] logger = logging . getLogger ( ) [EOL] [EOL] [EOL] def check_task_statuses ( task_ids ) : [EOL] [docstring] [EOL] [EOL] queue = taskcluster . Queue ( { [string] : os . environ [ [string] ] } ) [EOL] success = True [EOL] for task in task_ids : [EOL] status = queue . status ( task ) [EOL] state = status [ [string] ] [ [string] ] [EOL] if state == [string] or state == [string] : [EOL] logger . error ( [string] . format ( task , state ) ) [EOL] success = False [EOL] elif state != [string] : [EOL] logger . error ( [string] . format ( task , state ) ) [EOL] success = False [EOL] if success : [EOL] logger . info ( [string] ) [EOL] return [number] if success else [number] [EOL] [EOL] [EOL] def get_parser ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , nargs = [string] , help = [string] ) [EOL] return parser [EOL] [EOL] [EOL] def run ( venv , ** kwargs ) : [EOL] return check_task_statuses ( kwargs [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Iterator , OrderedDict , Pattern , Any , Dict [EOL] import typing [EOL] import collections [EOL] import json [EOL] import os [EOL] import re [EOL] from collections import OrderedDict [EOL] from copy import deepcopy [EOL] [EOL] import six [EOL] import yaml [EOL] from six import iteritems [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] [EOL] [EOL] def first ( iterable ) : [EOL] [comment] [EOL] if not hasattr ( iterable , [string] ) : [EOL] if hasattr ( iterable , [string] ) : [EOL] iterable = iter ( iterable ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] return next ( iterable ) [EOL] [EOL] [EOL] def load_task_file ( path ) : [EOL] with open ( path ) as f : [EOL] return yaml . safe_load ( f ) [EOL] [EOL] [EOL] def update_recursive ( data , update_data ) : [EOL] for key , value in iteritems ( update_data ) : [EOL] if key not in data : [EOL] data [ key ] = value [EOL] else : [EOL] initial_value = data [ key ] [EOL] if isinstance ( value , dict ) : [EOL] if not isinstance ( initial_value , dict ) : [EOL] raise ValueError ( [string] [string] % key ) [EOL] update_recursive ( initial_value , value ) [EOL] elif isinstance ( value , list ) : [EOL] if not isinstance ( initial_value , list ) : [EOL] raise ValueError ( [string] [string] % key ) [EOL] initial_value . extend ( value ) [EOL] else : [EOL] data [ key ] = value [EOL] [EOL] [EOL] def resolve_use ( task_data , templates ) : [EOL] rv = { } [EOL] if [string] in task_data : [EOL] for template_name in task_data [ [string] ] : [EOL] update_recursive ( rv , deepcopy ( templates [ template_name ] ) ) [EOL] update_recursive ( rv , task_data ) [EOL] rv . pop ( [string] , None ) [EOL] return rv [EOL] [EOL] [EOL] def resolve_name ( task_data , default_name ) : [EOL] if [string] not in task_data : [EOL] task_data [ [string] ] = default_name [EOL] return task_data [EOL] [EOL] [EOL] def resolve_chunks ( task_data ) : [EOL] if [string] not in task_data : [EOL] return [ task_data ] [EOL] rv = [ ] [EOL] total_chunks = task_data [ [string] ] [EOL] for i in range ( [number] , total_chunks + [number] ) : [EOL] chunk_data = deepcopy ( task_data ) [EOL] chunk_data [ [string] ] = { [string] : i , [string] : total_chunks } [EOL] rv . append ( chunk_data ) [EOL] return rv [EOL] [EOL] [EOL] def replace_vars ( input_string , variables ) : [EOL] [comment] [EOL] variable_re = re . compile ( [string] ) [EOL] [EOL] def replacer ( m ) : [EOL] var = m . group ( [number] ) . split ( [string] ) [EOL] repl = variables [EOL] for part in var : [EOL] try : [EOL] repl = repl [ part ] [EOL] except Exception : [EOL] [comment] [EOL] return m . group ( [number] ) [EOL] return str ( repl ) [EOL] [EOL] return variable_re . sub ( replacer , input_string ) [EOL] [EOL] [EOL] def sub_variables ( data , variables ) : [EOL] if isinstance ( data , six . string_types ) : [EOL] return replace_vars ( data , variables ) [EOL] if isinstance ( data , list ) : [EOL] return [ sub_variables ( item , variables ) for item in data ] [EOL] if isinstance ( data , dict ) : [EOL] return { key : sub_variables ( value , variables ) for key , value in iteritems ( data ) } [EOL] return data [EOL] [EOL] [EOL] def substitute_variables ( task ) : [EOL] variables = { [string] : task . get ( [string] , { } ) , [string] : task . get ( [string] , { } ) } [EOL] [EOL] return sub_variables ( task , variables ) [EOL] [EOL] [EOL] def expand_maps ( task ) : [EOL] name = first ( task . keys ( ) ) [EOL] if name != [string] : [EOL] return [ task ] [EOL] [EOL] map_data = task [ [string] ] [EOL] if set ( map_data . keys ( ) ) != set ( [ [string] , [string] ] ) : [EOL] raise ValueError ( [string] [string] % ( [string] if not map_data . keys ( ) [EOL] else [string] . join ( map_data . keys ( ) ) ) ) [EOL] rv = [ ] [EOL] for for_data in map_data [ [string] ] : [EOL] do_items = map_data [ [string] ] [EOL] if not isinstance ( do_items , list ) : [EOL] do_items = expand_maps ( do_items ) [EOL] for do_data in do_items : [EOL] task_data = deepcopy ( for_data ) [EOL] if len ( do_data . keys ( ) ) != [number] : [EOL] raise ValueError ( [string] [string] ) [EOL] name = first ( do_data . keys ( ) ) [EOL] update_recursive ( task_data , deepcopy ( do_data [ name ] ) ) [EOL] rv . append ( { name : task_data } ) [EOL] return rv [EOL] [EOL] [EOL] def load_tasks ( tasks_data ) : [EOL] map_resolved_tasks = OrderedDict ( ) [EOL] tasks = [ ] [EOL] [EOL] for task in tasks_data [ [string] ] : [EOL] if len ( task . keys ( ) ) != [number] : [EOL] raise ValueError ( [string] ) [EOL] for task in expand_maps ( task ) : [EOL] if len ( task . keys ( ) ) != [number] : [EOL] raise ValueError ( [string] ) [EOL] name = first ( task . keys ( ) ) [EOL] data = task [ name ] [EOL] new_name = sub_variables ( name , { [string] : data . get ( [string] , { } ) } ) [EOL] if new_name in map_resolved_tasks : [EOL] raise ValueError ( [string] % new_name ) [EOL] map_resolved_tasks [ new_name ] = substitute_variables ( data ) [EOL] [EOL] for task_default_name , data in iteritems ( map_resolved_tasks ) : [EOL] task = resolve_use ( data , tasks_data [ [string] ] ) [EOL] task = resolve_name ( task , task_default_name ) [EOL] tasks . extend ( resolve_chunks ( task ) ) [EOL] [EOL] tasks = [ substitute_variables ( task_data ) for task_data in tasks ] [EOL] return OrderedDict ( [ ( t [ [string] ] , t ) for t in tasks ] ) [EOL] [EOL] [EOL] def load_tasks_from_path ( path ) : [EOL] return load_tasks ( load_task_file ( path ) ) [EOL] [EOL] [EOL] def run ( venv , ** kwargs ) : [EOL] print ( json . dumps ( load_tasks_from_path ( os . path . join ( here , [string] , [string] ) ) , indent = [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import argparse [EOL] import typing [EOL] import logging [EOL] import requests [EOL] import argparse [EOL] import os [EOL] import logging [EOL] [EOL] import requests [EOL] [EOL] import github [EOL] [EOL] [EOL] logging . basicConfig ( ) [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TASKCLUSTER_ROOT_URL = [string] [EOL] [EOL] [EOL] def get_parser ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , action = [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , default = [string] , help = [string] [string] [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , default = [string] , help = [string] ) [EOL] return parser [EOL] [EOL] [EOL] def get_json ( url , key = None ) : [EOL] resp = requests . get ( url ) [EOL] resp . raise_for_status ( ) [EOL] data = resp . json ( ) [EOL] if key : [EOL] data = data [ key ] [EOL] return data [EOL] [EOL] [EOL] def get ( url , dest , name ) : [EOL] resp = requests . get ( url ) [EOL] resp . raise_for_status ( ) [EOL] path = os . path . join ( dest , name ) [EOL] with open ( path , [string] ) as f : [EOL] f . write ( resp . content ) [EOL] return path [EOL] [EOL] [EOL] def run ( * args , ** kwargs ) : [EOL] if not os . path . exists ( kwargs [ [string] ] ) : [EOL] os . mkdir ( kwargs [ [string] ] ) [EOL] [EOL] if kwargs [ [string] ] : [EOL] with open ( kwargs [ [string] ] ) as f : [EOL] gh = github . Github ( f . read ( ) . strip ( ) ) [EOL] else : [EOL] gh = github . Github ( ) [EOL] [EOL] repo = gh . get_repo ( kwargs [ [string] ] ) [EOL] commit = repo . get_commit ( kwargs [ [string] ] ) [EOL] statuses = commit . get_statuses ( ) [EOL] taskgroups = set ( ) [EOL] [EOL] for status in statuses : [EOL] if not status . context . startswith ( [string] ) : [EOL] continue [EOL] if status . state == [string] : [EOL] continue [EOL] taskgroup_id = status . target_url . rsplit ( [string] , [number] ) [ [number] ] [EOL] taskgroups . add ( taskgroup_id ) [EOL] [EOL] if not taskgroups : [EOL] logger . error ( [string] % kwargs [ [string] ] ) [EOL] return [number] [EOL] [EOL] for taskgroup in taskgroups : [EOL] if TASKCLUSTER_ROOT_URL == [string] : [EOL] [comment] [EOL] taskgroup_url = [string] [EOL] artifacts_list_url = [string] [EOL] else : [EOL] taskgroup_url = TASKCLUSTER_ROOT_URL + [string] [EOL] artifacts_list_url = TASKCLUSTER_ROOT_URL + [string] [EOL] tasks = get_json ( taskgroup_url % taskgroup , [string] ) [EOL] for task in tasks : [EOL] task_id = task [ [string] ] [ [string] ] [EOL] url = artifacts_list_url % ( task_id , ) [EOL] for artifact in get_json ( url , [string] ) : [EOL] if artifact [ [string] ] . endswith ( kwargs [ [string] ] ) : [EOL] filename = [string] % ( task [ [string] ] [ [string] ] [ [string] ] , task_id , kwargs [ [string] ] ) [EOL] path = get ( [string] % ( url , artifact [ [string] ] ) , kwargs [ [string] ] , filename ) [EOL] logger . info ( path ) [EOL] [EOL] [EOL] def main ( ) : [EOL] kwargs = get_parser ( ) . parse_args ( ) [EOL] [EOL] run ( None , vars ( kwargs ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import mock [EOL] import typing [EOL] import tools [EOL] import mock [EOL] from six import binary_type [EOL] [EOL] from wptserve . request import Request , RequestHeaders , MultiDict [EOL] [EOL] [EOL] class MockHTTPMessage ( dict ) : [EOL] [docstring] [EOL] def __getitem__ ( self , key ) : [EOL] assert isinstance ( key , str ) [EOL] values = dict . __getitem__ ( self , key . lower ( ) ) [EOL] assert isinstance ( values , list ) [EOL] return values [ [number] ] [EOL] [EOL] def get ( self , key , default = None ) : [EOL] try : [EOL] return self [ key ] [EOL] except KeyError : [EOL] return default [EOL] [EOL] def getallmatchingheaders ( self , key ) : [EOL] values = dict . __getitem__ ( self , key . lower ( ) ) [EOL] return [ [string] . format ( key , v ) for v in values ] [EOL] [EOL] [EOL] def test_request_headers_get ( ) : [EOL] raw_headers = MockHTTPMessage ( { [string] : [ [string] ] , [string] : [ [string] , [string] ] , } ) [EOL] headers = RequestHeaders ( raw_headers ) [EOL] assert headers [ [string] ] == [string] [EOL] assert headers [ [string] ] == [string] [EOL] assert headers . get ( [string] ) == [string] [EOL] [EOL] [EOL] def test_request_headers_encoding ( ) : [EOL] raw_headers = MockHTTPMessage ( { [string] : [ [string] ] , [string] : [ [string] , [string] ] , } ) [EOL] headers = RequestHeaders ( raw_headers ) [EOL] assert isinstance ( headers [ [string] ] , binary_type ) [EOL] assert isinstance ( headers [ [string] ] , binary_type ) [EOL] assert isinstance ( headers . get_list ( [string] ) [ [number] ] , binary_type ) [EOL] [EOL] [EOL] def test_request_url_from_server_address ( ) : [EOL] request_handler = mock . Mock ( ) [EOL] request_handler . server . scheme = [string] [EOL] request_handler . server . server_address = ( [string] , [string] ) [EOL] request_handler . path = [string] [EOL] request_handler . headers = MockHTTPMessage ( ) [EOL] [EOL] request = Request ( request_handler ) [EOL] assert request . url == [string] [EOL] assert isinstance ( request . url , str ) [EOL] [EOL] [EOL] def test_request_url_from_host_header ( ) : [EOL] request_handler = mock . Mock ( ) [EOL] request_handler . server . scheme = [string] [EOL] request_handler . server . server_address = ( [string] , [string] ) [EOL] request_handler . path = [string] [EOL] request_handler . headers = MockHTTPMessage ( { [string] : [ [string] ] } ) [EOL] [EOL] request = Request ( request_handler ) [EOL] assert request . url == [string] [EOL] assert isinstance ( request . url , str ) [EOL] [EOL] [EOL] def test_multidict ( ) : [EOL] m = MultiDict ( ) [EOL] m [ [string] ] = [string] [EOL] m [ [string] ] = [string] [EOL] m . add ( [string] , [string] ) [EOL] m . add ( [string] , [string] ) [EOL] [EOL] assert m [ [string] ] == [string] [EOL] assert m . get ( [string] ) == [string] [EOL] assert m [ [string] ] == [string] [EOL] assert m . get ( [string] ) == [string] [EOL] assert m [ [string] ] == [string] [EOL] assert m . get ( [string] ) == [string] [EOL] [EOL] assert m . first ( [string] ) == [string] [EOL] assert m . last ( [string] ) == [string] [EOL] assert m . get_list ( [string] ) == [ [string] , [string] ] [EOL] assert m . get_list ( [string] ) == [ ] [EOL] [EOL] assert m . get ( [string] ) is None [EOL] try : [EOL] m [ [string] ] [EOL] assert False , [string] [EOL] except KeyError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Tuple , Any , Literal [EOL] import typing_extensions [EOL] import mock [EOL] import typing [EOL] import mock [EOL] from six import BytesIO [EOL] [EOL] from wptserve . response import Response [EOL] [EOL] [EOL] def test_response_status ( ) : [EOL] cases = [ [number] , ( [number] , [string] ) , ( [number] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] for case in cases : [EOL] handler = mock . Mock ( ) [EOL] handler . wfile = BytesIO ( ) [EOL] request = mock . Mock ( ) [EOL] request . protocol_version = [string] [EOL] response = Response ( handler , request ) [EOL] [EOL] response . status = case [EOL] expected = case if isinstance ( case , tuple ) else ( case , None ) [EOL] if expected [ [number] ] == [string] : [EOL] expected = ( [number] , expected [ [number] ] ) [EOL] assert response . status == expected [EOL] response . writer . write_status ( * response . status ) [EOL] assert handler . wfile . getvalue ( ) == [string] [EOL] [EOL] [EOL] def test_response_status_not_string ( ) : [EOL] [comment] [EOL] handler = mock . Mock ( ) [EOL] request = mock . Mock ( ) [EOL] response = Response ( handler , request ) [EOL] response . status = ( [number] , [number] ) [EOL] assert response . status == ( [number] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Type , Tuple , Any , Optional , Literal , Dict [EOL] import typing_extensions [EOL] import typing [EOL] import tools [EOL] from __future__ import print_function [EOL] [EOL] import base64 [EOL] import logging [EOL] import os [EOL] import pytest [EOL] import unittest [EOL] [EOL] from six . moves . urllib . parse import urlencode , urlunsplit [EOL] from six . moves . urllib . request import Request as BaseRequest [EOL] from six . moves . urllib . request import urlopen [EOL] from six import binary_type , iteritems , PY3 [EOL] [EOL] from hyper import HTTP20Connection , tls [EOL] import ssl [EOL] from localpaths import repo_root [EOL] [EOL] wptserve = pytest . importorskip ( [string] ) [EOL] [EOL] logging . basicConfig ( ) [EOL] [EOL] wptserve . logger . set_logger ( logging . getLogger ( ) ) [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] doc_root = os . path . join ( here , [string] ) [EOL] [EOL] [EOL] class Request ( BaseRequest ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] BaseRequest . __init__ ( self , * args , ** kwargs ) [EOL] self . method = [string] [EOL] [EOL] def get_method ( self ) : [EOL] return self . method [EOL] [EOL] def add_data ( self , data ) : [EOL] if hasattr ( data , [string] ) : [EOL] data = urlencode ( data ) . encode ( [string] ) [EOL] [EOL] assert isinstance ( data , binary_type ) [EOL] [EOL] if hasattr ( BaseRequest , [string] ) : [EOL] BaseRequest . add_data ( self , data ) [EOL] else : [EOL] self . data = data [EOL] [EOL] self . add_header ( [string] , str ( len ( data ) ) ) [EOL] [EOL] [EOL] class TestUsingServer ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . server = wptserve . server . WebTestHttpd ( host = [string] , port = [number] , use_ssl = False , certificate = None , doc_root = doc_root ) [EOL] self . server . start ( False ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . server . stop ( ) [EOL] [EOL] def abs_url ( self , path , query = None ) : [EOL] return urlunsplit ( ( [string] , [string] % ( self . server . host , self . server . port ) , path , query , None ) ) [EOL] [EOL] def request ( self , path , query = None , method = [string] , headers = None , body = None , auth = None ) : [EOL] req = Request ( self . abs_url ( path , query ) ) [EOL] req . method = method [EOL] if headers is None : [EOL] headers = { } [EOL] [EOL] for name , value in iteritems ( headers ) : [EOL] req . add_header ( name , value ) [EOL] [EOL] if body is not None : [EOL] req . add_data ( body ) [EOL] [EOL] if auth is not None : [EOL] req . add_header ( [string] , [string] % base64 . b64encode ( [string] % auth ) ) [EOL] [EOL] return urlopen ( req ) [EOL] [EOL] def assert_multiple_headers ( self , resp , name , values ) : [EOL] if PY3 : [EOL] assert resp . info ( ) . get_all ( name ) == values [EOL] else : [EOL] assert resp . info ( ) [ name ] == [string] . join ( values ) [EOL] [EOL] @ pytest . mark . skipif ( not wptserve . utils . http2_compatible ( ) , reason = [string] ) class TestUsingH2Server : [EOL] def setup_method ( self , test_method ) : [EOL] self . server = wptserve . server . WebTestHttpd ( host = [string] , port = [number] , use_ssl = True , doc_root = doc_root , key_file = os . path . join ( repo_root , [string] , [string] , [string] ) , certificate = os . path . join ( repo_root , [string] , [string] , [string] ) , handler_cls = wptserve . server . Http2WebTestRequestHandler , http2 = True ) [EOL] self . server . start ( False ) [EOL] [EOL] context = tls . init_context ( ) [EOL] context . check_hostname = False [EOL] context . verify_mode = ssl . CERT_NONE [EOL] context . set_alpn_protocols ( [ [string] ] ) [EOL] self . conn = HTTP20Connection ( [string] % ( self . server . host , self . server . port ) , enable_push = True , secure = True , ssl_context = context ) [EOL] self . conn . connect ( ) [EOL] [EOL] def teardown_method ( self , test_method ) : [EOL] self . server . stop ( ) [EOL] [EOL] [EOL] class TestWrapperHandlerUsingServer ( TestUsingServer ) : [EOL] [docstring] [EOL] dummy_js_files = { } [EOL] [EOL] def gen_js_file ( self , filename , empty = True , content = [string] ) : [EOL] self . remove_js_file ( filename ) [EOL] [EOL] with open ( filename , [string] ) as fp : [EOL] if not empty : [EOL] fp . write ( content ) [EOL] [EOL] def remove_js_file ( self , filename ) : [EOL] if os . path . exists ( filename ) : [EOL] os . remove ( filename ) [EOL] [EOL] def setUp ( self ) : [EOL] super ( TestWrapperHandlerUsingServer , self ) . setUp ( ) [EOL] [EOL] for filename , content in self . dummy_js_files . items ( ) : [EOL] filepath = os . path . join ( doc_root , filename ) [EOL] if content == [string] : [EOL] self . gen_js_file ( filepath ) [EOL] else : [EOL] self . gen_js_file ( filepath , False , content ) [EOL] [EOL] def run_wrapper_test ( self , req_file , header_data , wrapper_handler ) : [EOL] route = ( [string] , req_file , wrapper_handler ( ) ) [EOL] self . server . router . register ( * route ) [EOL] [EOL] resp = self . request ( route [ [number] ] ) [EOL] self . assertEqual ( [number] , resp . getcode ( ) ) [EOL] self . assertEqual ( header_data , resp . info ( ) [ [string] ] ) [EOL] [EOL] with open ( os . path . join ( doc_root , req_file ) , [string] ) as fp : [EOL] self . assertEqual ( fp . read ( ) , resp . read ( ) ) [EOL] [EOL] def tearDown ( self ) : [EOL] super ( TestWrapperHandlerUsingServer , self ) . tearDown ( ) [EOL] [EOL] for filename , _ in self . dummy_js_files . items ( ) : [EOL] filepath = os . path . join ( doc_root , filename ) [EOL] self . remove_js_file ( filepath ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Tuple , Any , List , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import os [EOL] import unittest [EOL] import json [EOL] from io import BytesIO [EOL] [EOL] import pytest [EOL] from six import create_bound_method , PY3 [EOL] from six . moves . http_client import BadStatusLine [EOL] [EOL] wptserve = pytest . importorskip ( [string] ) [EOL] from . base import TestUsingServer , TestUsingH2Server , doc_root [EOL] from h2 . exceptions import ProtocolError [EOL] [EOL] def send_body_as_header ( self ) : [EOL] if self . _response . add_required_headers : [EOL] self . write_default_headers ( ) [EOL] [EOL] self . write ( [string] ) [EOL] self . _headers_complete = True [EOL] [EOL] class TestResponse ( TestUsingServer ) : [EOL] def test_head_without_body ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . end_headers = create_bound_method ( send_body_as_header , response . writer ) [EOL] return [ ( [string] , [string] ) ] , [string] [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] , method = [string] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] [EOL] def test_head_with_body ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . send_body_for_head_request = True [EOL] response . writer . end_headers = create_bound_method ( send_body_as_header , response . writer ) [EOL] return [ ( [string] , [string] ) ] , [string] [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] , method = [string] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] self . assertEqual ( [string] , resp . info ( ) [ [string] ] ) [EOL] [EOL] def test_write_content_no_status_no_header ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . read ( ) == resp_content [EOL] assert resp . info ( ) [ [string] ] == str ( len ( resp_content ) ) [EOL] assert [string] in resp . info ( ) [EOL] assert [string] in resp . info ( ) [EOL] [EOL] def test_write_content_no_headers ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_status ( [number] ) [EOL] response . writer . write_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . read ( ) == resp_content [EOL] assert resp . info ( ) [ [string] ] == str ( len ( resp_content ) ) [EOL] assert [string] in resp . info ( ) [EOL] assert [string] in resp . info ( ) [EOL] [EOL] def test_write_content_no_status ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . write_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . read ( ) == resp_content [EOL] assert sorted ( [ x . lower ( ) for x in resp . info ( ) . keys ( ) ] ) == sorted ( [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] def test_write_content_no_status_no_required_headers ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . add_required_headers = False [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . write_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . read ( ) == resp_content [EOL] assert resp . info ( ) . items ( ) == [ ( [string] , [string] ) ] [EOL] [EOL] def test_write_content_no_status_no_headers_no_required_headers ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . add_required_headers = False [EOL] response . writer . write_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . read ( ) == resp_content [EOL] assert resp . info ( ) . items ( ) == [ ] [EOL] [EOL] def test_write_raw_content ( self ) : [EOL] resp_content = [string] [string] [string] [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . info ( ) [ [string] ] == [string] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] def test_write_raw_content_file ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] with open ( os . path . join ( doc_root , [string] ) , [string] ) as infile : [EOL] response . writer . write_raw_content ( infile ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . getcode ( ) == [number] [EOL] assert resp . info ( ) [ [string] ] == [string] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] def test_write_raw_none ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] with pytest . raises ( ValueError ) : [EOL] response . writer . write_raw_content ( None ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . request ( route [ [number] ] ) [EOL] [EOL] def test_write_raw_contents_invalid_http ( self ) : [EOL] resp_content = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_content ( resp_content ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] [EOL] try : [EOL] resp = self . request ( route [ [number] ] ) [EOL] assert resp . read ( ) == resp_content [EOL] except BadStatusLine as e : [EOL] [comment] [EOL] assert PY3 [EOL] assert str ( e ) == resp_content . decode ( [string] ) [EOL] [EOL] class TestH2Response ( TestUsingH2Server ) : [EOL] def test_write_without_ending_stream ( self ) : [EOL] data = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] response . writer . write_headers ( headers , [number] ) [EOL] response . writer . write_data_frame ( data , False ) [EOL] [EOL] [comment] [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert [ x for x in resp . headers . items ( ) ] == [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] assert resp . read ( ) == data [EOL] [EOL] def test_push ( self ) : [EOL] data = [string] [EOL] push_data = [string] [EOL] [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] response . writer . write_headers ( headers , [number] ) [EOL] [EOL] promise_headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] % ( self . server . host , self . server . port ) ) ] [EOL] push_headers = [ ( [string] , [string] ) , ( [string] , str ( len ( push_data ) ) ) , ( [string] , [string] ) , ] [EOL] [EOL] response . writer . write_push ( promise_headers , push_stream_id = [number] , status = [number] , response_headers = push_headers , response_data = push_data ) [EOL] response . writer . write_data_frame ( data , True ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert [ x for x in resp . headers . items ( ) ] == [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] assert resp . read ( ) == data [EOL] [EOL] push_promise = next ( self . conn . get_pushes ( ) ) [EOL] push = push_promise . get_response ( ) [EOL] assert push_promise . path == [string] [EOL] assert push . status == [number] [EOL] assert push . read ( ) == push_data [EOL] [EOL] def test_set_error ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . set_error ( [number] , message = [string] ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert json . loads ( resp . read ( ) ) == json . loads ( [string] ) [EOL] [EOL] def test_file_like_response ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] content = BytesIO ( [string] ) [EOL] response . content = content [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] def test_list_response ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . content = [ [string] , [string] ] [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] def test_content_longer_than_frame_size ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] size = response . writer . get_max_payload_size ( ) [EOL] content = [string] * ( size + [number] ) [EOL] return [ ( [string] , size ) ] , content [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] payload_size = int ( resp . headers [ [string] ] [ [number] ] ) [EOL] assert payload_size [EOL] assert resp . read ( ) == [string] * ( payload_size + [number] ) [EOL] [EOL] def test_encode ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . encoding = [string] [EOL] t = response . writer . encode ( [string] ) [EOL] assert t == [string] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] response . writer . encode ( None ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] self . conn . get_response ( ) [EOL] [EOL] def test_raw_header_frame ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_header_frame ( [ ( [string] , [string] ) , ( [string] , [string] ) ] , end_headers = True ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert resp . headers [ [string] ] [ [number] ] == [string] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] def test_raw_header_frame_invalid ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_header_frame ( [ ( [string] , [string] ) , ( [string] , [string] ) ] , end_headers = True ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] with pytest . raises ( ProtocolError ) : [EOL] [comment] [EOL] self . conn . get_response ( ) [EOL] [EOL] def test_raw_data_frame ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_data_frame ( data = [string] , end_stream = True ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] sid = self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] [EOL] assert self . conn . streams [ sid ] . _read ( ) == [string] [EOL] [EOL] def test_raw_header_continuation_frame ( self ) : [EOL] @ wptserve . handlers . handler def handler ( request , response ) : [EOL] response . writer . write_raw_header_frame ( [ ( [string] , [string] ) ] ) [EOL] [EOL] response . writer . write_raw_continuation_frame ( [ ( [string] , [string] ) ] , end_headers = True ) [EOL] [EOL] route = ( [string] , [string] , handler ) [EOL] self . server . router . register ( * route ) [EOL] self . conn . request ( route [ [number] ] , route [ [number] ] ) [EOL] resp = self . conn . get_response ( ) [EOL] [EOL] assert resp . status == [number] [EOL] assert resp . headers [ [string] ] [ [number] ] == [string] [EOL] assert resp . read ( ) == [string] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def handle_data ( frame , request , response ) : [EOL] response . content = frame . data [ : : - [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] def mian ( request , response ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def handle_headers ( frame , request , response ) : [EOL] response . status = [number] [EOL] response . headers . update ( [ ( [string] , [string] ) ] ) [EOL] [EOL] def handle_data ( frame , request , response ) : [EOL] response . content = frame . data [ : : - [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def handle_headers ( frame , request , response ) : [EOL] response . status = [number] [EOL] response . headers . update ( [ ( [string] , [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import example_module [EOL] [EOL] [EOL] def main ( request , response ) : [EOL] return example_module . module_function ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def module_function ( ) : [EOL] return [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . server import WebTestHttpd , WebTestServer , Router [comment] [EOL] from . request import Request [comment] [EOL] from . response import Response [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , Dict [EOL] import typing [EOL] import socket [EOL] import socket [EOL] import sys [EOL] [EOL] from six import binary_type , text_type [EOL] [EOL] [EOL] def isomorphic_decode ( s ) : [EOL] [docstring] [EOL] if isinstance ( s , text_type ) : [EOL] return s [EOL] [EOL] if isinstance ( s , binary_type ) : [EOL] return s . decode ( [string] ) [EOL] [EOL] raise TypeError ( [string] % s ) [EOL] [EOL] [EOL] def isomorphic_encode ( s ) : [EOL] [docstring] [EOL] if isinstance ( s , binary_type ) : [EOL] return s [EOL] [EOL] if isinstance ( s , text_type ) : [EOL] return s . encode ( [string] ) [EOL] [EOL] raise TypeError ( [string] % s ) [EOL] [EOL] [EOL] def invert_dict ( dict ) : [EOL] rv = { } [EOL] for key , values in dict . items ( ) : [EOL] for value in values : [EOL] if value in rv : [EOL] raise ValueError [EOL] rv [ value ] = key [EOL] return rv [EOL] [EOL] [EOL] class HTTPException ( Exception ) : [EOL] def __init__ ( self , code , message = [string] ) : [EOL] self . code = code [EOL] self . message = message [EOL] [EOL] [EOL] def _open_socket ( host , port ) : [EOL] sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) [EOL] if port != [number] : [EOL] sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , [number] ) [EOL] sock . bind ( ( host , port ) ) [EOL] sock . listen ( [number] ) [EOL] return sock [EOL] [EOL] [EOL] def is_bad_port ( port ) : [EOL] [docstring] [EOL] return port in [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] [EOL] def get_port ( host = [string] ) : [EOL] host = host or [string] [EOL] port = [number] [EOL] while True : [EOL] free_socket = _open_socket ( host , [number] ) [EOL] port = free_socket . getsockname ( ) [ [number] ] [EOL] free_socket . close ( ) [EOL] if not is_bad_port ( port ) : [EOL] break [EOL] return port [EOL] [EOL] def http2_compatible ( ) : [EOL] [comment] [EOL] import ssl [EOL] ssl_v = ssl . OPENSSL_VERSION_INFO [EOL] return ( ( sys . version_info [ [number] ] == [number] and sys . version_info [ [number] ] == [number] and sys . version_info [ [number] ] >= [number] ) and ( ssl_v [ [number] ] == [number] and ( ssl_v [ [number] ] == [number] or ( ssl_v [ [number] ] == [number] and ssl_v [ [number] ] >= [number] ) ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] from . import utils [EOL] [EOL] content_types = utils . invert_dict ( { [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] ] , } ) [EOL] [EOL] response_codes = { [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , } [EOL] [EOL] h2_headers = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Tuple , Any , Literal , Dict [EOL] import datetime [EOL] import typing_extensions [EOL] import typing [EOL] import functools [EOL] import os [EOL] import random [EOL] import shutil [EOL] import subprocess [EOL] import tempfile [EOL] from datetime import datetime , timedelta [EOL] [EOL] from six import iteritems , PY2 [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CERT_EXPIRY_BUFFER = dict ( hours = [number] ) [EOL] [EOL] [EOL] def _ensure_str ( s , encoding ) : [EOL] [docstring] [EOL] if isinstance ( s , str ) : [EOL] return s [EOL] [EOL] if PY2 : [EOL] return s . encode ( encoding ) [EOL] else : [EOL] return s . decode ( encoding ) [EOL] [EOL] [EOL] class OpenSSL ( object ) : [EOL] def __init__ ( self , logger , binary , base_path , conf_path , hosts , duration , base_conf_path = None ) : [EOL] [docstring] [EOL] [EOL] self . base_path = base_path [EOL] self . binary = binary [EOL] self . conf_path = conf_path [EOL] self . base_conf_path = base_conf_path [EOL] self . logger = logger [EOL] self . proc = None [EOL] self . cmd = [ ] [EOL] self . hosts = hosts [EOL] self . duration = duration [EOL] [EOL] def __enter__ ( self ) : [EOL] with open ( self . conf_path , [string] ) as f : [EOL] f . write ( get_config ( self . base_path , self . hosts , self . duration ) ) [EOL] return self [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] os . unlink ( self . conf_path ) [EOL] [EOL] def log ( self , line ) : [EOL] if hasattr ( self . logger , [string] ) : [EOL] self . logger . process_output ( self . proc . pid if self . proc is not None else None , line . decode ( [string] , [string] ) , command = [string] . join ( self . cmd ) ) [EOL] else : [EOL] self . logger . debug ( line ) [EOL] [EOL] def __call__ ( self , cmd , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . cmd = [ self . binary , cmd ] [EOL] if cmd != [string] : [EOL] self . cmd += [ [string] , self . conf_path ] [EOL] self . cmd += list ( args ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] env = { } [EOL] for k , v in iteritems ( os . environ ) : [EOL] env [ _ensure_str ( k , [string] ) ] = _ensure_str ( v , [string] ) [EOL] [EOL] if self . base_conf_path is not None : [EOL] env [ [string] ] = _ensure_str ( self . base_conf_path , [string] ) [EOL] [EOL] self . proc = subprocess . Popen ( self . cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT , env = env ) [EOL] stdout , stderr = self . proc . communicate ( ) [EOL] self . log ( stdout ) [EOL] if self . proc . returncode != [number] : [EOL] raise subprocess . CalledProcessError ( self . proc . returncode , self . cmd , output = stdout ) [EOL] [EOL] self . cmd = [ ] [EOL] self . proc = None [EOL] return stdout [EOL] [EOL] [EOL] def make_subject ( common_name , country = None , state = None , locality = None , organization = None , organization_unit = None ) : [EOL] args = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] rv = [ ] [EOL] [EOL] for var , key in args : [EOL] value = locals ( ) [ var ] [EOL] if value is not None : [EOL] rv . append ( [string] % ( key , value . replace ( [string] , [string] ) ) ) [EOL] [EOL] return [string] . join ( rv ) [EOL] [EOL] def make_alt_names ( hosts ) : [EOL] return [string] . join ( [string] % host for host in hosts ) [EOL] [EOL] def make_name_constraints ( hosts ) : [EOL] return [string] . join ( [string] % host for host in hosts ) [EOL] [EOL] def get_config ( root_dir , hosts , duration = [number] ) : [EOL] if hosts is None : [EOL] san_line = [string] [EOL] constraints_line = [string] [EOL] else : [EOL] san_line = [string] % make_alt_names ( hosts ) [EOL] constraints_line = [string] + make_name_constraints ( hosts ) [EOL] [EOL] if os . path . sep == [string] : [EOL] [comment] [EOL] [comment] [EOL] root_dir = root_dir . replace ( [string] , [string] ) [EOL] [EOL] rv = [string] % { [string] : root_dir , [string] : san_line , [string] : duration , [string] : constraints_line , [string] : os . path . sep . replace ( [string] , [string] ) } [EOL] [EOL] return rv [EOL] [EOL] class OpenSSLEnvironment ( object ) : [EOL] ssl_enabled = True [EOL] [EOL] def __init__ ( self , logger , openssl_binary = [string] , base_path = None , password = [string] , force_regenerate = False , duration = [number] , base_conf_path = None ) : [EOL] [docstring] [EOL] self . logger = logger [EOL] [EOL] self . temporary = False [EOL] if base_path is None : [EOL] base_path = tempfile . mkdtemp ( ) [EOL] self . temporary = True [EOL] [EOL] self . base_path = os . path . abspath ( base_path ) [EOL] self . password = password [EOL] self . force_regenerate = force_regenerate [EOL] self . duration = duration [EOL] self . base_conf_path = base_conf_path [EOL] [EOL] self . path = None [EOL] self . binary = openssl_binary [EOL] self . openssl = None [EOL] [EOL] self . _ca_cert_path = None [EOL] self . _ca_key_path = None [EOL] self . host_certificates = { } [EOL] [EOL] def __enter__ ( self ) : [EOL] if not os . path . exists ( self . base_path ) : [EOL] os . makedirs ( self . base_path ) [EOL] [EOL] path = functools . partial ( os . path . join , self . base_path ) [EOL] [EOL] with open ( path ( [string] ) , [string] ) : [EOL] pass [EOL] with open ( path ( [string] ) , [string] ) as f : [EOL] serial = [string] % random . randint ( [number] , [number] ) [EOL] if len ( serial ) % [number] : [EOL] serial = [string] + serial [EOL] f . write ( serial ) [EOL] [EOL] self . path = path [EOL] [EOL] return self [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] if self . temporary : [EOL] shutil . rmtree ( self . base_path ) [EOL] [EOL] def _config_openssl ( self , hosts ) : [EOL] conf_path = self . path ( [string] ) [EOL] return OpenSSL ( self . logger , self . binary , self . base_path , conf_path , hosts , self . duration , self . base_conf_path ) [EOL] [EOL] def ca_cert_path ( self , hosts ) : [EOL] [docstring] [EOL] if self . _ca_cert_path is None and not self . force_regenerate : [EOL] self . _load_ca_cert ( ) [EOL] if self . _ca_cert_path is None : [EOL] self . _generate_ca ( hosts ) [EOL] return self . _ca_cert_path [EOL] [EOL] def _load_ca_cert ( self ) : [EOL] key_path = self . path ( [string] ) [EOL] cert_path = self . path ( [string] ) [EOL] [EOL] if self . check_key_cert ( key_path , cert_path , None ) : [EOL] self . logger . info ( [string] ) [EOL] self . _ca_key_path , self . _ca_cert_path = key_path , cert_path [EOL] [EOL] def check_key_cert ( self , key_path , cert_path , hosts ) : [EOL] [docstring] [EOL] if not os . path . exists ( key_path ) or not os . path . exists ( cert_path ) : [EOL] return False [EOL] [EOL] with self . _config_openssl ( hosts ) as openssl : [EOL] end_date_str = openssl ( [string] , [string] , [string] , [string] , cert_path ) . split ( [string] , [number] ) [ [number] ] . strip ( ) [EOL] [comment] [EOL] end_date = datetime . strptime ( end_date_str , [string] ) [EOL] time_buffer = timedelta ( ** CERT_EXPIRY_BUFFER ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if end_date < datetime . utcnow ( ) + time_buffer : [EOL] return False [EOL] [EOL] [comment] [EOL] return True [EOL] [EOL] def _generate_ca ( self , hosts ) : [EOL] path = self . path [EOL] self . logger . info ( [string] % self . base_path ) [EOL] [EOL] key_path = path ( [string] ) [EOL] req_path = path ( [string] ) [EOL] cert_path = path ( [string] ) [EOL] [EOL] with self . _config_openssl ( hosts ) as openssl : [EOL] openssl ( [string] , [string] , [string] , [string] , [string] , [string] , key_path , [string] , req_path , [string] , make_subject ( [string] ) , [string] , [string] % self . password ) [EOL] [EOL] openssl ( [string] , [string] , [string] , [string] , key_path , [string] , [string] % self . password , [string] , [string] , [string] , [string] , [string] , req_path , [string] , cert_path ) [EOL] [EOL] os . unlink ( req_path ) [EOL] [EOL] self . _ca_key_path , self . _ca_cert_path = key_path , cert_path [EOL] [EOL] def host_cert_path ( self , hosts ) : [EOL] [docstring] [EOL] hosts = tuple ( sorted ( hosts , key = lambda x : len ( x ) ) ) [EOL] if hosts not in self . host_certificates : [EOL] if not self . force_regenerate : [EOL] key_cert = self . _load_host_cert ( hosts ) [EOL] else : [EOL] key_cert = None [EOL] if key_cert is None : [EOL] key , cert = self . _generate_host_cert ( hosts ) [EOL] else : [EOL] key , cert = key_cert [EOL] self . host_certificates [ hosts ] = key , cert [EOL] [EOL] return self . host_certificates [ hosts ] [EOL] [EOL] def _load_host_cert ( self , hosts ) : [EOL] host = hosts [ [number] ] [EOL] key_path = self . path ( [string] % host ) [EOL] cert_path = self . path ( [string] % host ) [EOL] [EOL] [comment] [EOL] if self . check_key_cert ( key_path , cert_path , hosts ) : [EOL] self . logger . info ( [string] ) [EOL] return key_path , cert_path [EOL] [EOL] def _generate_host_cert ( self , hosts ) : [EOL] host = hosts [ [number] ] [EOL] if not self . force_regenerate : [EOL] self . _load_ca_cert ( ) [EOL] if self . _ca_key_path is None : [EOL] self . _generate_ca ( hosts ) [EOL] ca_key_path = self . _ca_key_path [EOL] [EOL] assert os . path . exists ( ca_key_path ) [EOL] [EOL] path = self . path [EOL] [EOL] req_path = path ( [string] ) [EOL] cert_path = path ( [string] % host ) [EOL] key_path = path ( [string] % host ) [EOL] [EOL] self . logger . info ( [string] ) [EOL] [EOL] with self . _config_openssl ( hosts ) as openssl : [EOL] openssl ( [string] , [string] , [string] , [string] , [string] , key_path , [string] , ca_key_path , [string] , [string] , req_path ) [EOL] [EOL] openssl ( [string] , [string] , [string] , req_path , [string] , [string] % self . password , [string] , make_subject ( host ) , [string] , cert_path ) [EOL] [EOL] os . unlink ( req_path ) [EOL] [EOL] return key_path , cert_path [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $datetime.datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 0 0 0 $datetime.datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0
class NoSSLEnvironment ( object ) : [EOL] ssl_enabled = False [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def host_cert_path ( self , hosts ) : [EOL] return None , None [EOL] [EOL] def ca_cert_path ( self , hosts ) : [EOL] return None [EOL]	0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import json [EOL] [EOL] import webdriver [EOL] [EOL] from six import iteritems [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] class Encoder ( json . JSONEncoder ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . pop ( [string] ) [EOL] super ( Encoder , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def default ( self , obj ) : [EOL] if isinstance ( obj , ( list , tuple ) ) : [EOL] return [ self . default ( x ) for x in obj ] [EOL] elif isinstance ( obj , webdriver . Element ) : [EOL] return { webdriver . Element . identifier : obj . id } [EOL] elif isinstance ( obj , webdriver . Frame ) : [EOL] return { webdriver . Frame . identifier : obj . id } [EOL] elif isinstance ( obj , webdriver . Window ) : [EOL] return { webdriver . Frame . identifier : obj . id } [EOL] return super ( Encoder , self ) . default ( obj ) [EOL] [EOL] [EOL] class Decoder ( json . JSONDecoder ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . session = kwargs . pop ( [string] ) [EOL] super ( Decoder , self ) . __init__ ( object_hook = self . object_hook , * args , ** kwargs ) [EOL] [EOL] def object_hook ( self , payload ) : [EOL] if isinstance ( payload , ( list , tuple ) ) : [EOL] return [ self . object_hook ( x ) for x in payload ] [EOL] elif isinstance ( payload , dict ) and webdriver . Element . identifier in payload : [EOL] return webdriver . Element . from_json ( payload , self . session ) [EOL] elif isinstance ( payload , dict ) and webdriver . Frame . identifier in payload : [EOL] return webdriver . Frame . from_json ( payload , self . session ) [EOL] elif isinstance ( payload , dict ) and webdriver . Window . identifier in payload : [EOL] return webdriver . Window . from_json ( payload , self . session ) [EOL] elif isinstance ( payload , dict ) : [EOL] return { k : self . object_hook ( v ) for k , v in iteritems ( payload ) } [EOL] return payload [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import ValuesView , Set , Any , Dict [EOL] import typing [EOL] import time [EOL] import threading [EOL] from six . moves . queue import Queue [EOL] [EOL] [docstring] [EOL] [EOL] class NullInstrument ( object ) : [EOL] def set ( self , stack ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def pause ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] return [EOL] [EOL] [EOL] class InstrumentWriter ( object ) : [EOL] def __init__ ( self , queue ) : [EOL] self . queue = queue [EOL] [EOL] def set ( self , stack ) : [EOL] stack . insert ( [number] , threading . current_thread ( ) . name ) [EOL] stack = self . _check_stack ( stack ) [EOL] self . queue . put ( ( [string] , threading . current_thread ( ) . ident , time . time ( ) , stack ) ) [EOL] [EOL] def pause ( self ) : [EOL] self . queue . put ( ( [string] , threading . current_thread ( ) . ident , time . time ( ) , None ) ) [EOL] [EOL] def _check_stack ( self , stack ) : [EOL] assert isinstance ( stack , ( tuple , list ) ) [EOL] return [ item . replace ( [string] , [string] ) for item in stack ] [EOL] [EOL] [EOL] class Instrument ( object ) : [EOL] def __init__ ( self , file_path ) : [EOL] [docstring] [EOL] self . path = file_path [EOL] self . queue = None [EOL] self . current = None [EOL] self . start_time = None [EOL] self . thread = None [EOL] [EOL] def __enter__ ( self ) : [EOL] assert self . thread is None [EOL] assert self . queue is None [EOL] self . queue = Queue ( ) [EOL] self . thread = threading . Thread ( target = self . run ) [EOL] self . thread . start ( ) [EOL] return InstrumentWriter ( self . queue ) [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] self . queue . put ( ( [string] , None , time . time ( ) , None ) ) [EOL] self . thread . join ( ) [EOL] self . thread = None [EOL] self . queue = None [EOL] [EOL] def run ( self ) : [EOL] known_commands = { [string] , [string] , [string] } [EOL] with open ( self . path , [string] ) as f : [EOL] thread_data = { } [EOL] while True : [EOL] command , thread , time_stamp , stack = self . queue . get ( ) [EOL] assert command in known_commands [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] items = [ ] [EOL] if command == [string] : [EOL] items = thread_data . values ( ) [EOL] elif thread in thread_data : [EOL] items . append ( thread_data . pop ( thread ) ) [EOL] for output_stack , start_time in items : [EOL] f . write ( [string] % ( [string] . join ( output_stack ) , int ( [number] * ( time_stamp - start_time ) ) ) ) [EOL] [EOL] if command == [string] : [EOL] thread_data [ thread ] = ( stack , time_stamp ) [EOL] elif command == [string] : [EOL] break [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.ValuesView[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.ValuesView[typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.ValuesView[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ValuesView[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] def expected_path ( metadata_path , test_path ) : [EOL] [docstring] [EOL] args = list ( test_path . split ( [string] ) ) [EOL] args [ - [number] ] += [string] [EOL] return os . path . join ( metadata_path , * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import _importlib_modulespec [EOL] import tools [EOL] import importlib [EOL] import imp [EOL] from six import iteritems [EOL] [EOL] from . browsers import product_list [EOL] [EOL] [EOL] def products_enabled ( config ) : [EOL] names = config . get ( [string] , { } ) . keys ( ) [EOL] if not names : [EOL] return product_list [EOL] else : [EOL] return names [EOL] [EOL] [EOL] def product_module ( config , product ) : [EOL] if product not in products_enabled ( config ) : [EOL] raise ValueError ( [string] % product ) [EOL] [EOL] path = config . get ( [string] , { } ) . get ( product , None ) [EOL] if path : [EOL] module = imp . load_source ( [string] + product , path ) [EOL] else : [EOL] module = importlib . import_module ( [string] + product ) [EOL] [EOL] if not hasattr ( module , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return module [EOL] [EOL] [EOL] class Product ( object ) : [EOL] def __init__ ( self , config , product ) : [EOL] module = product_module ( config , product ) [EOL] data = module . __wptrunner__ [EOL] self . name = product [EOL] self . check_args = getattr ( module , data [ [string] ] ) [EOL] self . browser_cls = getattr ( module , data [ [string] ] ) [EOL] self . get_browser_kwargs = getattr ( module , data [ [string] ] ) [EOL] self . get_executor_kwargs = getattr ( module , data [ [string] ] ) [EOL] self . env_options = getattr ( module , data [ [string] ] ) ( ) [EOL] self . get_env_extras = getattr ( module , data [ [string] ] ) [EOL] self . run_info_extras = ( getattr ( module , data [ [string] ] ) [EOL] if [string] in data else lambda ** kwargs : { } ) [EOL] self . get_timeout_multiplier = getattr ( module , data [ [string] ] ) [EOL] [EOL] self . executor_classes = { } [EOL] for test_type , cls_name in iteritems ( data [ [string] ] ) : [EOL] cls = getattr ( module , cls_name ) [EOL] self . executor_classes [ test_type ] = cls [EOL] [EOL] [EOL] def load_product ( config , product , load_cls = False ) : [EOL] rv = Product ( config , product ) [EOL] if not load_cls : [EOL] return ( rv . check_args , rv . browser_cls , rv . get_browser_kwargs , rv . executor_classes , rv . get_executor_kwargs , rv . env_options , rv . get_env_extras , rv . run_info_extras ) [EOL] return rv [EOL] [EOL] [EOL] def load_product_update ( config , product ) : [EOL] [docstring] [EOL] [EOL] module = product_module ( config , product ) [EOL] data = module . __wptrunner__ [EOL] [EOL] update_properties = ( getattr ( module , data [ [string] ] ) ( ) [EOL] if [string] in data else { } ) [EOL] [EOL] return update_properties [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import OrderedDict , List , Any , Dict [EOL] import configparser [EOL] import typing [EOL] import collections [EOL] from six . moves . configparser import SafeConfigParser [EOL] import os [EOL] import sys [EOL] from collections import OrderedDict [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] [EOL] class ConfigDict ( dict ) : [EOL] def __init__ ( self , base_path , * args , ** kwargs ) : [EOL] self . base_path = base_path [EOL] dict . __init__ ( self , * args , ** kwargs ) [EOL] [EOL] def get_path ( self , key , default = None ) : [EOL] if key not in self : [EOL] return default [EOL] path = self [ key ] [EOL] os . path . expanduser ( path ) [EOL] return os . path . abspath ( os . path . join ( self . base_path , path ) ) [EOL] [EOL] def read ( config_path ) : [EOL] config_path = os . path . abspath ( config_path ) [EOL] config_root = os . path . dirname ( config_path ) [EOL] parser = SafeConfigParser ( ) [EOL] success = parser . read ( config_path ) [EOL] assert config_path in success , success [EOL] [EOL] subns = { [string] : os . path . abspath ( os . path . curdir ) } [EOL] [EOL] rv = OrderedDict ( ) [EOL] for section in parser . sections ( ) : [EOL] rv [ section ] = ConfigDict ( config_root ) [EOL] for key in parser . options ( section ) : [EOL] rv [ section ] [ key ] = parser . get ( section , key , raw = False , vars = subns ) [EOL] [EOL] return rv [EOL] [EOL] def path ( argv = None ) : [EOL] if argv is None : [EOL] argv = [ ] [EOL] path = None [EOL] [EOL] for i , arg in enumerate ( argv ) : [EOL] if arg == [string] : [EOL] if i + [number] < len ( argv ) : [EOL] path = argv [ i + [number] ] [EOL] elif arg . startswith ( [string] ) : [EOL] path = arg . split ( [string] , [number] ) [ [number] ] [EOL] if path is not None : [EOL] break [EOL] [EOL] if path is None : [EOL] if os . path . exists ( [string] ) : [EOL] path = os . path . abspath ( [string] ) [EOL] else : [EOL] path = os . path . join ( here , [string] , [string] ) [EOL] [EOL] return os . path . abspath ( path ) [EOL] [EOL] def load ( ) : [EOL] return read ( path ( sys . argv ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Union , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import urllib [EOL] import tools [EOL] [docstring] [EOL] import glob [EOL] import os [EOL] from six import iteritems [EOL] from six . moves . urllib . parse import urlparse , urlsplit [EOL] [EOL] from . wptmanifest . node import DataNode [EOL] from . wptmanifest . backends import conditional [EOL] from . wptmanifest . backends . conditional import ManifestItem [EOL] [EOL] [EOL] class IncludeManifest ( ManifestItem ) : [EOL] def __init__ ( self , node ) : [EOL] [docstring] [EOL] ManifestItem . __init__ ( self , node ) [EOL] self . child_map = { } [EOL] [EOL] @ classmethod def create ( cls ) : [EOL] [docstring] [EOL] node = DataNode ( None ) [EOL] return cls ( node ) [EOL] [EOL] def set_defaults ( self ) : [EOL] if not self . has_key ( [string] ) : [EOL] self . set ( [string] , [string] ) [EOL] [EOL] def append ( self , child ) : [EOL] ManifestItem . append ( self , child ) [EOL] self . child_map [ child . name ] = child [EOL] assert len ( self . child_map ) == len ( self . children ) [EOL] [EOL] def include ( self , test ) : [EOL] [docstring] [EOL] path_components = self . _get_components ( test . url ) [EOL] return self . _include ( test , path_components ) [EOL] [EOL] def _include ( self , test , path_components ) : [EOL] if path_components : [EOL] next_path_part = path_components . pop ( ) [EOL] if next_path_part in self . child_map : [EOL] return self . child_map [ next_path_part ] . _include ( test , path_components ) [EOL] [EOL] node = self [EOL] while node : [EOL] try : [EOL] skip_value = self . get ( [string] , { [string] : test . item_type } ) . lower ( ) [EOL] assert skip_value in ( [string] , [string] ) [EOL] return skip_value != [string] [EOL] except KeyError : [EOL] if node . parent is not None : [EOL] node = node . parent [EOL] else : [EOL] [comment] [EOL] return True [EOL] [EOL] def _get_components ( self , url ) : [EOL] rv = [ ] [EOL] url_parts = urlsplit ( url ) [EOL] variant = [string] [EOL] if url_parts . query : [EOL] variant += [string] + url_parts . query [EOL] if url_parts . fragment : [EOL] variant += [string] + url_parts . fragment [EOL] if variant : [EOL] rv . append ( variant ) [EOL] rv . extend ( [ item for item in reversed ( url_parts . path . split ( [string] ) ) if item ] ) [EOL] return rv [EOL] [EOL] def _add_rule ( self , test_manifests , url , direction ) : [EOL] maybe_path = os . path . join ( os . path . abspath ( os . curdir ) , url ) [EOL] rest , last = os . path . split ( maybe_path ) [EOL] fragment = query = None [EOL] if [string] in last : [EOL] last , fragment = last . rsplit ( [string] , [number] ) [EOL] if [string] in last : [EOL] last , query = last . rsplit ( [string] , [number] ) [EOL] [EOL] maybe_path = os . path . join ( rest , last ) [EOL] paths = glob . glob ( maybe_path ) [EOL] [EOL] if paths : [EOL] urls = [ ] [EOL] for path in paths : [EOL] for manifest , data in iteritems ( test_manifests ) : [EOL] found = False [EOL] rel_path = os . path . relpath ( path , data [ [string] ] ) [EOL] iterator = manifest . iterpath if os . path . isfile ( path ) else manifest . iterdir [EOL] for test in iterator ( rel_path ) : [EOL] if not hasattr ( test , [string] ) : [EOL] continue [EOL] url = test . url [EOL] if query or fragment : [EOL] parsed = urlparse ( url ) [EOL] if ( ( query and query != parsed . query ) or ( fragment and fragment != parsed . fragment ) ) : [EOL] continue [EOL] urls . append ( url ) [EOL] found = True [EOL] if found : [EOL] break [EOL] else : [EOL] urls = [ url ] [EOL] [EOL] assert direction in ( [string] , [string] ) [EOL] [EOL] for url in urls : [EOL] components = self . _get_components ( url ) [EOL] [EOL] node = self [EOL] while components : [EOL] component = components . pop ( ) [EOL] if component not in node . child_map : [EOL] new_node = IncludeManifest ( DataNode ( component ) ) [EOL] node . append ( new_node ) [EOL] new_node . set ( [string] , node . get ( [string] , { } ) ) [EOL] [EOL] node = node . child_map [ component ] [EOL] [EOL] skip = False if direction == [string] else True [EOL] node . set ( [string] , str ( skip ) ) [EOL] [EOL] def add_include ( self , test_manifests , url_prefix ) : [EOL] [docstring] [EOL] return self . _add_rule ( test_manifests , url_prefix , [string] ) [EOL] [EOL] def add_exclude ( self , test_manifests , url_prefix ) : [EOL] [docstring] [EOL] return self . _add_rule ( test_manifests , url_prefix , [string] ) [EOL] [EOL] [EOL] def get_manifest ( manifest_path ) : [EOL] with open ( manifest_path , [string] ) as f : [EOL] return conditional . compile ( f , data_cls_getter = lambda x , y : IncludeManifest ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 $builtins.str$ 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 $builtins.str$ 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $urllib.parse.SplitResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $tools.wptrunner.wptrunner.manifestinclude.IncludeManifest$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $tools.wptrunner.wptrunner.manifestinclude.IncludeManifest$ 0 0 $tools.wptrunner.wptrunner.manifestinclude.IncludeManifest$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , DefaultDict , Any , Set , Dict [EOL] import typing [EOL] import tools [EOL] from math import log [EOL] from collections import defaultdict [EOL] from six import iteritems , itervalues [EOL] [EOL] class Node ( object ) : [EOL] def __init__ ( self , prop , value ) : [EOL] self . prop = prop [EOL] self . value = value [EOL] self . parent = None [EOL] [EOL] self . children = set ( ) [EOL] [EOL] [comment] [EOL] self . run_info = set ( ) [EOL] self . result_values = defaultdict ( int ) [EOL] [EOL] def add ( self , node ) : [EOL] self . children . add ( node ) [EOL] node . parent = self [EOL] [EOL] def __iter__ ( self ) : [EOL] yield self [EOL] for node in self . children : [EOL] for item in node : [EOL] yield item [EOL] [EOL] def __len__ ( self ) : [EOL] return [number] + sum ( len ( item ) for item in self . children ) [EOL] [EOL] [EOL] def entropy ( results ) : [EOL] [docstring] [EOL] [EOL] result_counts = defaultdict ( int ) [EOL] total = float ( len ( results ) ) [EOL] for values in itervalues ( results ) : [EOL] [comment] [EOL] [comment] [EOL] for value in values : [EOL] result_counts [ value ] += [number] [EOL] [EOL] entropy_sum = [number] [EOL] [EOL] for count in itervalues ( result_counts ) : [EOL] prop = float ( count ) / total [EOL] entropy_sum -= prop * log ( prop , [number] ) [EOL] [EOL] return entropy_sum [EOL] [EOL] [EOL] def split_results ( prop , results ) : [EOL] [docstring] [EOL] by_prop = defaultdict ( dict ) [EOL] for run_info , value in iteritems ( results ) : [EOL] by_prop [ run_info [ prop ] ] [ run_info ] = value [EOL] [EOL] return by_prop [EOL] [EOL] [EOL] def build_tree ( properties , dependent_props , results , tree = None ) : [EOL] [docstring] [EOL] [EOL] if tree is None : [EOL] tree = Node ( None , None ) [EOL] [EOL] prop_index = { prop : i for i , prop in enumerate ( properties ) } [EOL] [EOL] all_results = defaultdict ( int ) [EOL] for result_values in itervalues ( results ) : [EOL] for result_value , count in iteritems ( result_values ) : [EOL] all_results [ result_value ] += count [EOL] [EOL] [comment] [EOL] if not properties or len ( all_results ) == [number] : [EOL] for value , count in iteritems ( all_results ) : [EOL] tree . result_values [ value ] += count [EOL] tree . run_info |= set ( results . keys ( ) ) [EOL] return tree [EOL] [EOL] results_partitions = [ ] [EOL] remove_properties = set ( ) [EOL] for prop in properties : [EOL] result_sets = split_results ( prop , results ) [EOL] if len ( result_sets ) == [number] : [EOL] [comment] [EOL] [comment] [EOL] remove_properties . add ( prop ) [EOL] continue [EOL] new_entropy = [number] [EOL] results_sets_entropy = [ ] [EOL] for prop_value , result_set in iteritems ( result_sets ) : [EOL] results_sets_entropy . append ( ( entropy ( result_set ) , prop_value , result_set ) ) [EOL] new_entropy += ( float ( len ( result_set ) ) / len ( results ) ) * results_sets_entropy [ - [number] ] [ [number] ] [EOL] [EOL] results_partitions . append ( ( new_entropy , prop , results_sets_entropy ) ) [EOL] [EOL] [comment] [EOL] if not results_partitions : [EOL] for value , count in iteritems ( all_results ) : [EOL] tree . result_values [ value ] += count [EOL] tree . run_info |= set ( results . keys ( ) ) [EOL] return tree [EOL] [EOL] [comment] [EOL] results_partitions . sort ( key = lambda x : ( x [ [number] ] , prop_index [ x [ [number] ] ] ) ) [EOL] _ , best_prop , sub_results = results_partitions [ [number] ] [EOL] [EOL] [comment] [EOL] new_props = properties [ : prop_index [ best_prop ] ] + properties [ prop_index [ best_prop ] + [number] : ] [EOL] new_props . extend ( dependent_props . get ( best_prop , [ ] ) ) [EOL] if remove_properties : [EOL] new_props = [ item for item in new_props if item not in remove_properties ] [EOL] [EOL] for _ , prop_value , results_sets in sub_results : [EOL] node = Node ( best_prop , prop_value ) [EOL] tree . add ( node ) [EOL] build_tree ( new_props , dependent_props , results_sets , node ) [EOL] return tree [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Union , Type , Any , Dict [EOL] import typing [EOL] import tools [EOL] import os [EOL] import traceback [EOL] [EOL] from six . moves . urllib . parse import urljoin [EOL] [EOL] from . base import WdspecProtocol , WdspecExecutor , get_pages [EOL] from . executorwebdriver import WebDriverProtocol , WebDriverRefTestExecutor , WebDriverRun [EOL] from . protocol import PrintProtocolPart [EOL] from . . webdriver_server import ChromeDriverServer [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] [EOL] [EOL] class ChromeDriverPrintProtocolPart ( PrintProtocolPart ) : [EOL] def setup ( self ) : [EOL] self . webdriver = self . parent . webdriver [EOL] self . runner_handle = None [EOL] [EOL] def load_runner ( self ) : [EOL] url = urljoin ( self . parent . executor . server_url ( [string] ) , [string] ) [EOL] self . logger . debug ( [string] % url ) [EOL] try : [EOL] self . webdriver . url = url [EOL] except Exception as e : [EOL] self . logger . critical ( [string] [string] [string] [string] % ( url , traceback . format_exc ( e ) ) ) [EOL] raise [EOL] self . runner_handle = self . webdriver . window_handle [EOL] [EOL] def render_as_pdf ( self , width , height ) : [EOL] margin = [number] [EOL] body = { [string] : [string] , [string] : { [string] : width / [number] , [string] : height / [number] , [string] : margin , [string] : margin , [string] : margin , [string] : margin , [string] : False , [string] : True , } } [EOL] return self . webdriver . send_session_command ( [string] , [string] , body = body ) [ [string] ] [EOL] [EOL] def pdf_to_png ( self , pdf_base64 , ranges ) : [EOL] handle = self . webdriver . window_handle [EOL] self . webdriver . window_handle = self . runner_handle [EOL] try : [EOL] rv = self . webdriver . execute_async_script ( [string] % pdf_base64 ) [EOL] page_numbers = get_pages ( ranges , len ( rv ) ) [EOL] rv = [ item for i , item in enumerate ( rv ) if i + [number] in page_numbers ] [EOL] return rv [EOL] finally : [EOL] self . webdriver . window_handle = handle [EOL] [EOL] [EOL] class ChromeDriverProtocol ( WebDriverProtocol ) : [EOL] implements = WebDriverProtocol . implements + [ ChromeDriverPrintProtocolPart ] [EOL] [EOL] [EOL] class ChromeDriverPrintRefTestExecutor ( WebDriverRefTestExecutor ) : [EOL] protocol_cls = ChromeDriverProtocol [EOL] [EOL] def setup ( self , runner ) : [EOL] super ( ChromeDriverPrintRefTestExecutor , self ) . setup ( runner ) [EOL] self . protocol . pdf_print . load_runner ( ) [EOL] self . has_window = False [EOL] with open ( os . path . join ( here , [string] ) ) as f : [EOL] self . script = f . read ( ) [EOL] [EOL] def screenshot ( self , test , viewport_size , dpi , page_ranges ) : [EOL] [comment] [EOL] assert dpi is None [EOL] [EOL] if not self . has_window : [EOL] self . protocol . base . execute_script ( self . script ) [EOL] self . protocol . base . set_window ( self . protocol . webdriver . handles [ - [number] ] ) [EOL] self . has_window = True [EOL] [EOL] self . viewport_size = viewport_size [EOL] self . page_ranges = page_ranges . get ( test . url ) [EOL] timeout = self . timeout_multiplier * test . timeout if self . debug_info is None else None [EOL] [EOL] test_url = self . test_url ( test ) [EOL] [EOL] return WebDriverRun ( self . logger , self . _render , self . protocol , test_url , timeout , self . extra_timeout ) . run ( ) [EOL] [EOL] def _render ( self , protocol , url , timeout ) : [EOL] protocol . webdriver . url = url [EOL] [EOL] protocol . base . execute_script ( self . wait_script , asynchronous = True ) [EOL] [EOL] pdf = protocol . pdf_print . render_as_pdf ( * self . viewport_size ) [EOL] screenshots = protocol . pdf_print . pdf_to_png ( pdf , self . page_ranges ) [EOL] for i , screenshot in enumerate ( screenshots ) : [EOL] [comment] [EOL] if screenshot . startswith ( [string] ) : [EOL] screenshots [ i ] = screenshot . split ( [string] , [number] ) [ [number] ] [EOL] [EOL] return screenshots [EOL] [EOL] [EOL] class ChromeDriverWdspecProtocol ( WdspecProtocol ) : [EOL] server_cls = ChromeDriverServer [EOL] [EOL] [EOL] class ChromeDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = ChromeDriverWdspecProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorchrome.ChromeDriverProtocol]$ 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorchrome.ChromeDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorchrome.ChromeDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorchrome.ChromeDriverWdspecProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorchrome.ChromeDriverWdspecProtocol]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import WebKitDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class WebKitDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = WebKitDriverServer [EOL] [EOL] [EOL] class WebKitDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = WebKitDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorwebkit.WebKitDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorwebkit.WebKitDriverProtocol]$ 0 0 0
[comment] [EOL] from . base import ( executor_kwargs , testharness_result_converter , reftest_result_converter , TestExecutor ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import EdgeChromiumDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class EdgeChromiumDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = EdgeChromiumDriverServer [EOL] [EOL] [EOL] class EdgeChromiumDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = EdgeChromiumDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoredgechromium.EdgeChromiumDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoredgechromium.EdgeChromiumDriverProtocol]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import OperaDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class OperaDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = OperaDriverServer [EOL] [EOL] [EOL] class OperaDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = OperaDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoropera.OperaDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoropera.OperaDriverProtocol]$ 0 0 0
from typing import List , Type , Tuple , Any , Dict [EOL] import typing [EOL] import tools [EOL] from __future__ import print_function [EOL] import base64 [EOL] import json [EOL] import os [EOL] import subprocess [EOL] import tempfile [EOL] import threading [EOL] import traceback [EOL] import uuid [EOL] from six import ensure_str , iteritems [EOL] [EOL] from mozprocess import ProcessHandler [EOL] [EOL] from tools . serve . serve import make_hosts_file [EOL] [EOL] from . base import ( ConnectionlessProtocol , RefTestImplementation , crashtest_result_converter , testharness_result_converter , reftest_result_converter , TimedRunner , WdspecExecutor , WdspecProtocol ) [EOL] from . process import ProcessTestExecutor [EOL] from . . browsers . base import browser_command [EOL] from . . process import cast_env [EOL] from . . webdriver_server import ServoDriverServer [EOL] [EOL] [EOL] pytestrunner = None [EOL] webdriver = None [EOL] [EOL] [EOL] def write_hosts_file ( config ) : [EOL] hosts_fd , hosts_path = tempfile . mkstemp ( ) [EOL] with os . fdopen ( hosts_fd , [string] ) as f : [EOL] f . write ( make_hosts_file ( config , [string] ) ) [EOL] return hosts_path [EOL] [EOL] [EOL] def build_servo_command ( test , test_url_func , browser , binary , pause_after_test , debug_info , extra_args = None , debug_opts = [string] ) : [EOL] args = [ [string] , [string] , [string] , [string] , test_url_func ( test ) , ] [EOL] if debug_opts : [EOL] args += [ [string] , debug_opts ] [EOL] for stylesheet in browser . user_stylesheets : [EOL] args += [ [string] , stylesheet ] [EOL] for pref , value in iteritems ( test . environment . get ( [string] , { } ) ) : [EOL] args += [ [string] , [string] % ( pref , value ) ] [EOL] if browser . ca_certificate_path : [EOL] args += [ [string] , browser . ca_certificate_path ] [EOL] if extra_args : [EOL] args += extra_args [EOL] args += browser . binary_args [EOL] debug_args , command = browser_command ( binary , args , debug_info ) [EOL] if pause_after_test : [EOL] command . remove ( [string] ) [EOL] return debug_args + command [EOL] [EOL] [EOL] [EOL] class ServoTestharnessExecutor ( ProcessTestExecutor ) : [EOL] convert_result = testharness_result_converter [EOL] [EOL] def __init__ ( self , logger , browser , server_config , timeout_multiplier = [number] , debug_info = None , pause_after_test = False , ** kwargs ) : [EOL] ProcessTestExecutor . __init__ ( self , logger , browser , server_config , timeout_multiplier = timeout_multiplier , debug_info = debug_info ) [EOL] self . pause_after_test = pause_after_test [EOL] self . result_data = None [EOL] self . result_flag = None [EOL] self . protocol = ConnectionlessProtocol ( self , browser ) [EOL] self . hosts_path = write_hosts_file ( server_config ) [EOL] [EOL] def teardown ( self ) : [EOL] try : [EOL] os . unlink ( self . hosts_path ) [EOL] except OSError : [EOL] pass [EOL] ProcessTestExecutor . teardown ( self ) [EOL] [EOL] def do_test ( self , test ) : [EOL] self . result_data = None [EOL] self . result_flag = threading . Event ( ) [EOL] [EOL] self . command = build_servo_command ( test , self . test_url , self . browser , self . binary , self . pause_after_test , self . debug_info ) [EOL] [EOL] env = os . environ . copy ( ) [EOL] env [ [string] ] = self . hosts_path [EOL] env [ [string] ] = [string] [EOL] [EOL] [EOL] if not self . interactive : [EOL] self . proc = ProcessHandler ( self . command , processOutputLine = [ self . on_output ] , onFinish = self . on_finish , env = cast_env ( env ) , storeOutput = False ) [EOL] self . proc . run ( ) [EOL] else : [EOL] self . proc = subprocess . Popen ( self . command , env = cast_env ( env ) ) [EOL] [EOL] try : [EOL] timeout = test . timeout * self . timeout_multiplier [EOL] [EOL] [comment] [EOL] if not self . interactive and not self . pause_after_test : [EOL] wait_timeout = timeout + [number] [EOL] self . result_flag . wait ( wait_timeout ) [EOL] else : [EOL] wait_timeout = None [EOL] self . proc . wait ( ) [EOL] [EOL] proc_is_running = True [EOL] [EOL] if self . result_flag . is_set ( ) : [EOL] if self . result_data is not None : [EOL] result = self . convert_result ( test , self . result_data ) [EOL] else : [EOL] self . proc . wait ( ) [EOL] result = ( test . result_cls ( [string] , None ) , [ ] ) [EOL] proc_is_running = False [EOL] else : [EOL] result = ( test . result_cls ( [string] , None ) , [ ] ) [EOL] [EOL] [EOL] if proc_is_running : [EOL] if self . pause_after_test : [EOL] self . logger . info ( [string] ) [EOL] self . proc . wait ( ) [EOL] else : [EOL] self . proc . kill ( ) [EOL] except : [comment] [EOL] self . proc . kill ( ) [EOL] raise [EOL] [EOL] return result [EOL] [EOL] def on_output ( self , line ) : [EOL] prefix = [string] [EOL] line = line . decode ( [string] , [string] ) [EOL] if line . startswith ( prefix ) : [EOL] self . result_data = json . loads ( line [ len ( prefix ) : ] ) [EOL] self . result_flag . set ( ) [EOL] else : [EOL] if self . interactive : [EOL] print ( line ) [EOL] else : [EOL] self . logger . process_output ( self . proc . pid , line , [string] . join ( self . command ) ) [EOL] [EOL] def on_finish ( self ) : [EOL] self . result_flag . set ( ) [EOL] [EOL] [EOL] class TempFilename ( object ) : [EOL] def __init__ ( self , directory ) : [EOL] self . directory = directory [EOL] self . path = None [EOL] [EOL] def __enter__ ( self ) : [EOL] self . path = os . path . join ( self . directory , str ( uuid . uuid4 ( ) ) ) [EOL] return self . path [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] try : [EOL] os . unlink ( self . path ) [EOL] except OSError : [EOL] pass [EOL] [EOL] [EOL] class ServoRefTestExecutor ( ProcessTestExecutor ) : [EOL] convert_result = reftest_result_converter [EOL] [EOL] def __init__ ( self , logger , browser , server_config , binary = None , timeout_multiplier = [number] , screenshot_cache = None , debug_info = None , pause_after_test = False , ** kwargs ) : [EOL] ProcessTestExecutor . __init__ ( self , logger , browser , server_config , timeout_multiplier = timeout_multiplier , debug_info = debug_info ) [EOL] [EOL] self . protocol = ConnectionlessProtocol ( self , browser ) [EOL] self . screenshot_cache = screenshot_cache [EOL] self . implementation = RefTestImplementation ( self ) [EOL] self . tempdir = tempfile . mkdtemp ( ) [EOL] self . hosts_path = write_hosts_file ( server_config ) [EOL] [EOL] def reset ( self ) : [EOL] self . implementation . reset ( ) [EOL] [EOL] def teardown ( self ) : [EOL] try : [EOL] os . unlink ( self . hosts_path ) [EOL] except OSError : [EOL] pass [EOL] os . rmdir ( self . tempdir ) [EOL] ProcessTestExecutor . teardown ( self ) [EOL] [EOL] def screenshot ( self , test , viewport_size , dpi , page_ranges ) : [EOL] with TempFilename ( self . tempdir ) as output_path : [EOL] extra_args = [ [string] , [string] % output_path , [string] , viewport_size or [string] ] [EOL] debug_opts = [string] [EOL] [EOL] if dpi : [EOL] extra_args += [ [string] , dpi ] [EOL] [EOL] self . command = build_servo_command ( test , self . test_url , self . browser , self . binary , False , self . debug_info , extra_args , debug_opts ) [EOL] [EOL] env = os . environ . copy ( ) [EOL] env [ [string] ] = self . hosts_path [EOL] env [ [string] ] = [string] [EOL] [EOL] if not self . interactive : [EOL] self . proc = ProcessHandler ( self . command , processOutputLine = [ self . on_output ] , env = cast_env ( env ) ) [EOL] [EOL] [EOL] try : [EOL] self . proc . run ( ) [EOL] timeout = test . timeout * self . timeout_multiplier + [number] [EOL] rv = self . proc . wait ( timeout = timeout ) [EOL] except KeyboardInterrupt : [EOL] self . proc . kill ( ) [EOL] raise [EOL] else : [EOL] self . proc = subprocess . Popen ( self . command , env = cast_env ( env ) ) [EOL] try : [EOL] rv = self . proc . wait ( ) [EOL] except KeyboardInterrupt : [EOL] self . proc . kill ( ) [EOL] raise [EOL] [EOL] if rv is None : [EOL] self . proc . kill ( ) [EOL] return False , ( [string] , None ) [EOL] [EOL] if rv != [number] or not os . path . exists ( output_path ) : [EOL] return False , ( [string] , None ) [EOL] [EOL] with open ( output_path , [string] ) as f : [EOL] [comment] [EOL] data = f . read ( ) [EOL] return True , [ ensure_str ( base64 . b64encode ( data ) ) ] [EOL] [EOL] def do_test ( self , test ) : [EOL] result = self . implementation . run_test ( test ) [EOL] [EOL] return self . convert_result ( test , result ) [EOL] [EOL] def on_output ( self , line ) : [EOL] line = line . decode ( [string] , [string] ) [EOL] if self . interactive : [EOL] print ( line ) [EOL] else : [EOL] self . logger . process_output ( self . proc . pid , line , [string] . join ( self . command ) ) [EOL] [EOL] [EOL] class ServoDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = ServoDriverServer [EOL] [EOL] [EOL] class ServoWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = ServoDriverProtocol [EOL] [EOL] [EOL] class ServoTimedRunner ( TimedRunner ) : [EOL] def run_func ( self ) : [EOL] try : [EOL] self . result = True , self . func ( self . protocol , self . url , self . timeout ) [EOL] except Exception as e : [EOL] message = getattr ( e , [string] , [string] ) [EOL] if message : [EOL] message += [string] [EOL] message += traceback . format_exc ( e ) [EOL] self . result = False , ( [string] , message ) [EOL] finally : [EOL] self . result_flag . set ( ) [EOL] [EOL] def set_timeout ( self ) : [EOL] pass [EOL] [EOL] [EOL] class ServoCrashtestExecutor ( ProcessTestExecutor ) : [EOL] convert_result = crashtest_result_converter [EOL] [EOL] def __init__ ( self , logger , browser , server_config , binary = None , timeout_multiplier = [number] , screenshot_cache = None , debug_info = None , pause_after_test = False , ** kwargs ) : [EOL] ProcessTestExecutor . __init__ ( self , logger , browser , server_config , timeout_multiplier = timeout_multiplier , debug_info = debug_info ) [EOL] [EOL] self . pause_after_test = pause_after_test [EOL] self . protocol = ConnectionlessProtocol ( self , browser ) [EOL] self . tempdir = tempfile . mkdtemp ( ) [EOL] self . hosts_path = write_hosts_file ( server_config ) [EOL] [EOL] def do_test ( self , test ) : [EOL] timeout = ( test . timeout * self . timeout_multiplier if self . debug_info is None [EOL] else None ) [EOL] [EOL] test_url = self . test_url ( test ) [EOL] [comment] [EOL] [comment] [EOL] self . test = test [EOL] success , data = ServoTimedRunner ( self . logger , self . do_crashtest , self . protocol , test_url , timeout , self . extra_timeout ) . run ( ) [EOL] [comment] [EOL] self . proc . kill ( ) [EOL] [EOL] if success : [EOL] return self . convert_result ( test , data ) [EOL] [EOL] return ( test . result_cls ( * data ) , [ ] ) [EOL] [EOL] def do_crashtest ( self , protocol , url , timeout ) : [EOL] env = os . environ . copy ( ) [EOL] env [ [string] ] = self . hosts_path [EOL] env [ [string] ] = [string] [EOL] [EOL] command = build_servo_command ( self . test , self . test_url , self . browser , self . binary , False , self . debug_info , extra_args = [ [string] ] ) [EOL] [EOL] if not self . interactive : [EOL] self . proc = ProcessHandler ( command , env = cast_env ( env ) , storeOutput = False ) [EOL] self . proc . run ( ) [EOL] else : [EOL] self . proc = subprocess . Popen ( command , env = cast_env ( env ) ) [EOL] [EOL] self . proc . wait ( ) [EOL] [EOL] if self . proc . poll ( ) >= [number] : [EOL] return { [string] : [string] , [string] : None } [EOL] [EOL] return { [string] : [string] , [string] : None } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorservo.ServoTestharnessExecutor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorservo.ServoRefTestExecutor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorservo.ServoDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorservo.ServoDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorservo.ServoCrashtestExecutor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import EdgeDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class EdgeDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = EdgeDriverServer [EOL] [EOL] [EOL] class EdgeDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = EdgeDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoredge.EdgeDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executoredge.EdgeDriverProtocol]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import InternetExplorerDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class InternetExplorerDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = InternetExplorerDriverServer [EOL] [EOL] [EOL] class InternetExplorerDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = InternetExplorerDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorinternetexplorer.InternetExplorerDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorinternetexplorer.InternetExplorerDriverProtocol]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import tools [EOL] from . . webdriver_server import SafariDriverServer [EOL] from . base import WdspecExecutor , WdspecProtocol [EOL] [EOL] [EOL] class SafariDriverProtocol ( WdspecProtocol ) : [EOL] server_cls = SafariDriverServer [EOL] [EOL] [EOL] class SafariDriverWdspecExecutor ( WdspecExecutor ) : [EOL] protocol_cls = SafariDriverProtocol [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorsafari.SafariDriverProtocol]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.wptrunner.wptrunner.executors.executorsafari.SafariDriverProtocol]$ 0 0 0
from . runner import run [comment] [EOL]	0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] WPT_FINGERPRINT = [string] [EOL] [EOL] [comment] [EOL] SXG_WPT_FINGERPRINT = [string] [EOL] [EOL] IGNORE_CERTIFICATE_ERRORS_SPKI_LIST = [ WPT_FINGERPRINT , SXG_WPT_FINGERPRINT ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0
from typing import Any , Type [EOL] import typing [EOL] import tools [EOL] exit_unclean = object ( ) [EOL] exit_clean = object ( ) [EOL] [EOL] [EOL] class Step ( object ) : [EOL] provides = [ ] [EOL] [EOL] def __init__ ( self , logger ) : [EOL] self . logger = logger [EOL] [EOL] def run ( self , step_index , state ) : [EOL] [docstring] [EOL] [EOL] name = self . __class__ . __name__ [EOL] [EOL] try : [EOL] stored_step = state . steps [ step_index ] [EOL] except IndexError : [EOL] stored_step = None [EOL] [EOL] if stored_step == name : [EOL] self . restore ( state ) [EOL] elif stored_step is None : [EOL] self . create ( state ) [EOL] assert set ( self . provides ) . issubset ( set ( state . keys ( ) ) ) [EOL] state . steps = state . steps + [ name ] [EOL] else : [EOL] raise ValueError ( [string] % ( name , stored_step ) ) [EOL] [EOL] def create ( self , data ) : [EOL] raise NotImplementedError [EOL] [EOL] def restore ( self , state ) : [EOL] self . logger . debug ( [string] % ( self . __class__ . __name__ , ) ) [EOL] for key in self . provides : [EOL] assert key in state [EOL] [EOL] [EOL] class StepRunner ( object ) : [EOL] steps = [ ] [EOL] [EOL] def __init__ ( self , logger , state ) : [EOL] [docstring] [EOL] self . state = state [EOL] self . logger = logger [EOL] if [string] not in state : [EOL] state . steps = [ ] [EOL] [EOL] def run ( self ) : [EOL] rv = None [EOL] for step_index , step in enumerate ( self . steps ) : [EOL] self . logger . debug ( [string] % step . __name__ ) [EOL] rv = step ( self . logger ) . run ( step_index , self . state ) [EOL] if rv in ( exit_clean , exit_unclean ) : [EOL] break [EOL] [EOL] return rv [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from . serializer import serialize [EOL] from . parser import parse [EOL] from . backends . static import compile as compile_static [EOL] from . backends . conditional import compile as compile_condition [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Set , Dict [EOL] import typing [EOL] import tools [EOL] from __future__ import unicode_literals [EOL] from six import ensure_text [EOL] [EOL] from . node import NodeVisitor , ValueNode , ListNode , BinaryExpressionNode [EOL] from . parser import atoms , precedence [EOL] [EOL] atom_names = { v : [string] % k for ( k , v ) in atoms . items ( ) } [EOL] [EOL] named_escapes = { [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL] [EOL] def escape ( string , extras = [string] ) : [EOL] [comment] [EOL] rv = [string] [EOL] for c in string : [EOL] if c in named_escapes : [EOL] rv += c . encode ( [string] ) . decode ( ) [EOL] elif c == [string] : [EOL] rv += [string] [EOL] elif c < [string] : [EOL] rv += [string] % ord ( c ) [EOL] elif c in extras : [EOL] rv += [string] + c [EOL] else : [EOL] rv += c [EOL] return ensure_text ( rv ) [EOL] [EOL] [EOL] class ManifestSerializer ( NodeVisitor ) : [EOL] def __init__ ( self , skip_empty_data = False ) : [EOL] self . skip_empty_data = skip_empty_data [EOL] [EOL] def serialize ( self , root ) : [EOL] self . indent = [number] [EOL] rv = [string] . join ( self . visit ( root ) ) [EOL] if not rv : [EOL] return rv [EOL] if rv [ - [number] ] != [string] : [EOL] rv = rv + [string] [EOL] return rv [EOL] [EOL] def visit_DataNode ( self , node ) : [EOL] rv = [ ] [EOL] if not self . skip_empty_data or node . children : [EOL] if node . data : [EOL] rv . append ( [string] % escape ( node . data , extras = [string] ) ) [EOL] indent = self . indent * [string] [EOL] else : [EOL] indent = [string] [EOL] [EOL] for child in node . children : [EOL] rv . extend ( [string] % ( indent if item else [string] , item ) for item in self . visit ( child ) ) [EOL] [EOL] if node . parent : [EOL] rv . append ( [string] ) [EOL] [EOL] return rv [EOL] [EOL] def visit_KeyValueNode ( self , node ) : [EOL] rv = [ escape ( node . data , [string] ) + [string] ] [EOL] indent = [string] * self . indent [EOL] [EOL] if len ( node . children ) == [number] and isinstance ( node . children [ [number] ] , ( ValueNode , ListNode ) ) : [EOL] rv [ [number] ] += [string] % self . visit ( node . children [ [number] ] ) [ [number] ] [EOL] else : [EOL] for child in node . children : [EOL] rv . append ( indent + self . visit ( child ) [ [number] ] ) [EOL] [EOL] return rv [EOL] [EOL] def visit_ListNode ( self , node ) : [EOL] rv = [ [string] ] [EOL] rv . extend ( [string] . join ( self . visit ( child ) [ [number] ] for child in node . children ) ) [EOL] rv . append ( [string] ) [EOL] return [ [string] . join ( rv ) ] [EOL] [EOL] def visit_ValueNode ( self , node ) : [EOL] data = ensure_text ( node . data ) [EOL] if ( [string] in data or data . startswith ( [string] ) or ( isinstance ( node . parent , ListNode ) and ( [string] in data or [string] in data ) ) ) : [EOL] if [string] in data : [EOL] quote = [string] [EOL] else : [EOL] quote = [string] [EOL] else : [EOL] quote = [string] [EOL] return [ quote + escape ( data , extras = quote ) + quote ] [EOL] [EOL] def visit_AtomNode ( self , node ) : [EOL] return [ atom_names [ node . data ] ] [EOL] [EOL] def visit_ConditionalNode ( self , node ) : [EOL] return [ [string] % tuple ( self . visit ( item ) [ [number] ] for item in node . children ) ] [EOL] [EOL] def visit_StringNode ( self , node ) : [EOL] rv = [ [string] % escape ( node . data , extras = [string] ) ] [EOL] for child in node . children : [EOL] rv [ [number] ] += self . visit ( child ) [ [number] ] [EOL] return rv [EOL] [EOL] def visit_NumberNode ( self , node ) : [EOL] return [ ensure_text ( node . data ) ] [EOL] [EOL] def visit_VariableNode ( self , node ) : [EOL] rv = escape ( node . data ) [EOL] for child in node . children : [EOL] rv += self . visit ( child ) [EOL] return [ rv ] [EOL] [EOL] def visit_IndexNode ( self , node ) : [EOL] assert len ( node . children ) == [number] [EOL] return [ [string] % self . visit ( node . children [ [number] ] ) [ [number] ] ] [EOL] [EOL] def visit_UnaryExpressionNode ( self , node ) : [EOL] children = [ ] [EOL] for child in node . children : [EOL] child_str = self . visit ( child ) [ [number] ] [EOL] if isinstance ( child , BinaryExpressionNode ) : [EOL] child_str = [string] % child_str [EOL] children . append ( child_str ) [EOL] return [ [string] . join ( children ) ] [EOL] [EOL] def visit_BinaryExpressionNode ( self , node ) : [EOL] assert len ( node . children ) == [number] [EOL] children = [ ] [EOL] for child_index in [ [number] , [number] , [number] ] : [EOL] child = node . children [ child_index ] [EOL] child_str = self . visit ( child ) [ [number] ] [EOL] if ( isinstance ( child , BinaryExpressionNode ) and precedence ( node . children [ [number] ] ) < precedence ( child . children [ [number] ] ) ) : [EOL] child_str = [string] % child_str [EOL] children . append ( child_str ) [EOL] return [ [string] . join ( children ) ] [EOL] [EOL] def visit_UnaryOperatorNode ( self , node ) : [EOL] return [ ensure_text ( node . data ) ] [EOL] [EOL] def visit_BinaryOperatorNode ( self , node ) : [EOL] return [ ensure_text ( node . data ) ] [EOL] [EOL] [EOL] def serialize ( tree , * args , ** kwargs ) : [EOL] s = ManifestSerializer ( * args , ** kwargs ) [EOL] return s . serialize ( tree ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] [EOL] from . . import parser [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class TestExpression ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . parser = parser . Parser ( ) [EOL] [EOL] def parse ( self , input_str ) : [EOL] return self . parser . parse ( input_str ) [EOL] [EOL] def compare ( self , input_text , expected ) : [EOL] actual = self . parse ( input_text ) [EOL] self . match ( expected , actual ) [EOL] [EOL] def match ( self , expected_node , actual_node ) : [EOL] self . assertEqual ( expected_node [ [number] ] , actual_node . __class__ . __name__ ) [EOL] self . assertEqual ( expected_node [ [number] ] , actual_node . data ) [EOL] self . assertEqual ( len ( expected_node [ [number] ] ) , len ( actual_node . children ) ) [EOL] for expected_child , actual_child in zip ( expected_node [ [number] ] , actual_node . children ) : [EOL] self . match ( expected_child , actual_child ) [EOL] [EOL] def test_expr_0 ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , [string] , [ ] ] , ] ] ] ] ] ] ) [EOL] [EOL] def test_expr_1 ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , [string] , [ ] ] , ] ] ] ] ] ] ) [EOL] [EOL] def test_expr_2 ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , ] ] ] ] ] ] ) [EOL] [EOL] def test_expr_3 ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , [string] , [ ] ] , ] ] ] ] ] ] ) [EOL] [EOL] def test_atom_0 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . parse ( [string] ) [EOL] [EOL] def test_atom_1 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . parse ( [string] ) [EOL] [EOL] def test_list_expr ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , None , [ [ [string] , [string] , [ ] ] ] ] , ] ] , [ [string] , None , [ [ [string] , [string] , [ ] ] ] ] ] ] ] ] ) [EOL] [EOL] def test_list_heading ( self ) : [EOL] self . compare ( [string] , [ [string] , None , [ [ [string] , [string] , [ [ [string] , None , [ [ [string] , None , [ [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] , [ [string] , [string] , [ ] ] ] ] , [ [string] , None , [ [ [string] , [string] , [ ] ] ] ] , ] ] ] ] , [ [string] , [string] , [ ] ] ] ] ) [EOL] [EOL] def test_if_1 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . parse ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import unittest [EOL] [EOL] from . . backends import static [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class TestStatic ( unittest . TestCase ) : [EOL] def compile ( self , input_text , input_data ) : [EOL] return static . compile ( input_text , input_data ) [EOL] [EOL] def test_get_0 ( self ) : [EOL] data = [string] [EOL] [EOL] manifest = self . compile ( data , { [string] : [number] } ) [EOL] [EOL] self . assertEqual ( manifest . get ( [string] ) , [string] ) [EOL] children = list ( item for item in manifest . iterchildren ( ) ) [EOL] self . assertEqual ( len ( children ) , [number] ) [EOL] section = children [ [number] ] [EOL] self . assertEqual ( section . name , [string] ) [EOL] [EOL] self . assertEqual ( section . get ( [string] ) , [string] ) [EOL] self . assertEqual ( section . get ( [string] ) , [string] ) [EOL] [EOL] def test_get_1 ( self ) : [EOL] data = [string] [EOL] manifest = self . compile ( data , { [string] : [number] } ) [EOL] [EOL] children = list ( item for item in manifest . iterchildren ( ) ) [EOL] section = children [ [number] ] [EOL] self . assertEqual ( section . get ( [string] ) , [string] ) [EOL] [EOL] def test_get_3 ( self ) : [EOL] data = [string] [EOL] manifest = self . compile ( data , { [string] : [string] } ) [EOL] self . assertEqual ( manifest . get ( [string] ) , [string] ) [EOL] [EOL] manifest = self . compile ( data , { [string] : [string] } ) [EOL] self . assertEqual ( manifest . get ( [string] ) , [string] ) [EOL] [EOL] def test_get_4 ( self ) : [EOL] data = [string] [EOL] manifest = self . compile ( data , { [string] : True } ) [EOL] self . assertEqual ( manifest . get ( [string] ) , [string] ) [EOL] [EOL] manifest = self . compile ( data , { [string] : False } ) [EOL] self . assertEqual ( manifest . get ( [string] ) , [string] ) [EOL] [EOL] def test_api ( self ) : [EOL] data = [string] [EOL] manifest = self . compile ( data , { [string] : [number] } ) [EOL] [EOL] self . assertFalse ( manifest . is_empty ) [EOL] self . assertEqual ( manifest . root , manifest ) [EOL] self . assertTrue ( manifest . has_key ( [string] ) ) [EOL] self . assertFalse ( manifest . has_key ( [string] ) ) [EOL] [EOL] self . assertEqual ( set ( manifest . iterkeys ( ) ) , { [string] , [string] } ) [EOL] self . assertEqual ( set ( manifest . itervalues ( ) ) , { [string] , [string] } ) [EOL] [EOL] def test_is_empty_1 ( self ) : [EOL] data = [string] [EOL] manifest = self . compile ( data , { } ) [EOL] [EOL] self . assertTrue ( manifest . is_empty ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import unittest [EOL] [EOL] from . . import parser [EOL] from . . parser import token_types [EOL] [EOL] class TokenizerTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tokenizer = parser . Tokenizer ( ) [EOL] [EOL] def tokenize ( self , input_str ) : [EOL] rv = [ ] [EOL] for item in self . tokenizer . tokenize ( input_str ) : [EOL] rv . append ( item ) [EOL] if item [ [number] ] == token_types . eof : [EOL] break [EOL] return rv [EOL] [EOL] def compare ( self , input_text , expected ) : [EOL] expected = expected + [ ( token_types . eof , None ) ] [EOL] actual = self . tokenize ( input_text ) [EOL] self . assertEqual ( actual , expected ) [EOL] [EOL] def test_heading_0 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_heading_1 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_heading_2 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_heading_3 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_heading_4 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_heading_5 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_heading_6 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . paren , [string] ) , ( token_types . string , [string] ) , ( token_types . paren , [string] ) ] ) [EOL] [EOL] def test_key_0 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_1 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_2 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_3 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_4 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_5 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_6 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_7 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_8 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_9 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_key_10 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_11 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_12 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_13 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_key_14 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_list_0 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . list_start , [string] ) , ( token_types . list_end , [string] ) ] ) [EOL] [EOL] def test_list_1 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . list_start , [string] ) , ( token_types . string , [string] ) , ( token_types . string , [string] ) , ( token_types . list_end , [string] ) ] ) [EOL] [EOL] def test_list_2 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . list_start , [string] ) , ( token_types . string , [string] ) , ( token_types . string , [string] ) , ( token_types . list_end , [string] ) ] ) [EOL] [EOL] def test_list_3 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . list_start , [string] ) , ( token_types . string , [string] ) , ( token_types . string , [string] ) , ( token_types . list_end , [string] ) ] ) [EOL] [EOL] def test_list_4 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_list_5 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_list_6 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . list_start , [string] ) , ( token_types . string , [string] ) , ( token_types . string , [string] ) , ( token_types . list_end , [string] ) ] ) [EOL] [EOL] def test_expr_0 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_1 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_2 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_3 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_4 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_5 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . paren , [string] ) , ( token_types . ident , [string] ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . paren , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_6 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] def test_expr_7 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_expr_8 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_expr_9 ( self ) : [EOL] with self . assertRaises ( parser . ParseError ) : [EOL] self . tokenize ( [string] ) [EOL] [EOL] def test_expr_10 ( self ) : [EOL] self . compare ( [string] , [ ( token_types . string , [string] ) , ( token_types . separator , [string] ) , ( token_types . group_start , None ) , ( token_types . ident , [string] ) , ( token_types . number , [string] ) , ( token_types . separator , [string] ) , ( token_types . string , [string] ) ] ) [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any
	0
from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] import setuptools [EOL] import pkg_resources [EOL] from setuptools import setup [EOL] [EOL] classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] + [ ( [string] % x ) for x in [string] . split ( ) ] [EOL] [EOL] with open ( [string] ) as fd : [EOL] long_description = fd . read ( ) [EOL] [EOL] [EOL] def get_environment_marker_support_level ( ) : [EOL] [docstring] [EOL] try : [EOL] version = pkg_resources . parse_version ( setuptools . __version__ ) [EOL] if version >= pkg_resources . parse_version ( [string] ) : [EOL] return [number] [EOL] if version >= pkg_resources . parse_version ( [string] ) : [EOL] return [number] [EOL] except Exception as exc : [EOL] sys . stderr . write ( [string] % exc ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return [number] [EOL] [EOL] [EOL] def main ( ) : [EOL] extras_require = { } [EOL] install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [comment] [EOL] [comment] [EOL] if [string] not in os . environ : [EOL] install_requires . append ( [string] ) [EOL] environment_marker_support_level = get_environment_marker_support_level ( ) [EOL] if environment_marker_support_level >= [number] : [EOL] install_requires . append ( [string] ) [EOL] install_requires . append ( [string] ) [EOL] elif environment_marker_support_level == [number] : [EOL] extras_require [ [string] ] = [ [string] ] [EOL] extras_require [ [string] ] = [ [string] ] [EOL] else : [EOL] if sys . platform == [string] : [EOL] install_requires . append ( [string] ) [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] install_requires . append ( [string] ) [EOL] [EOL] setup ( name = [string] , description = [string] , long_description = long_description , use_scm_version = { [string] : [string] } , url = [string] , project_urls = { [string] : [string] , [string] : [string] , } , license = [string] , platforms = [ [string] , [string] , [string] , [string] , [string] ] , author = ( [string] [string] ) , entry_points = { [string] : [ [string] , [string] ] } , classifiers = classifiers , keywords = [string] , setup_requires = [ [string] ] , package_dir = { [string] : [string] } , python_requires = [string] , install_requires = install_requires , extras_require = extras_require , packages = [ [string] , [string] , [string] , [string] , [string] , ] , py_modules = [ [string] ] , zip_safe = False , ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] collect_ignore = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_function ( ) : [EOL] pass [EOL] [EOL] [EOL] class TestClass ( object ) : [EOL] [EOL] def test_method ( self ) : [EOL] pass [EOL] [EOL] def test_anothermethod ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] collect_ignore = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL]	0 0
def test_quick ( setup ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
def test_something ( setup ) : [EOL] assert setup . timecostly == [number] [EOL] [EOL] [EOL] def test_something_more ( setup ) : [EOL] assert setup . timecostly == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import py [EOL] [EOL] mydir = py . path . local ( __file__ ) . dirpath ( ) [EOL] [EOL] [EOL] def pytest_runtest_setup ( item ) : [EOL] if isinstance ( item , pytest . Function ) : [EOL] if not item . fspath . relto ( mydir ) : [EOL] return [EOL] mod = item . getparent ( pytest . Module ) . obj [EOL] if hasattr ( mod , [string] ) : [EOL] print ( [string] % ( mod . hello , ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] hello = [string] [EOL] [EOL] def test_func ( ) : [EOL] pass [EOL]	0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
def test_exception_syntax ( ) : [EOL] try : [EOL] [number] / [number] [EOL] except ZeroDivisionError as e : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Type [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] from __future__ import absolute_import , division , print_function [EOL] import collections [EOL] import sys [EOL] [EOL] import pluggy [EOL] import _pytest . _code [EOL] import py [EOL] import pytest [EOL] from _pytest . main import EXIT_NOTESTSCOLLECTED [EOL] from _pytest . terminal import TerminalReporter , repr_pythonversion , getreportopt [EOL] from _pytest . terminal import build_summary_stats_line , _plugin_nameversions [EOL] [EOL] [EOL] DistInfo = collections . namedtuple ( [string] , [ [string] , [string] ] ) [EOL] [EOL] [EOL] class Option ( object ) : [EOL] [EOL] def __init__ ( self , verbose = False , fulltrace = False ) : [EOL] self . verbose = verbose [EOL] self . fulltrace = fulltrace [EOL] [EOL] @ property def args ( self ) : [EOL] values = [ ] [EOL] if self . verbose : [EOL] values . append ( [string] ) [EOL] if self . fulltrace : [EOL] values . append ( [string] ) [EOL] return values [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ Option ( verbose = False ) , Option ( verbose = True ) , Option ( verbose = - [number] ) , Option ( fulltrace = True ) , ] , ids = [ [string] , [string] , [string] , [string] ] , ) def option ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ DistInfo ( project_name = [string] , version = [number] ) ] , [ [string] ] ) , ( [ DistInfo ( project_name = [string] , version = [number] ) ] , [ [string] ] ) , ( [ DistInfo ( project_name = [string] , version = [number] ) , DistInfo ( project_name = [string] , version = [number] ) , ] , [ [string] ] , ) , ] , ids = [ [string] , [string] , [string] ] , ) def test_plugin_nameversion ( input , expected ) : [EOL] pluginlist = [ ( None , x ) for x in input ] [EOL] result = _plugin_nameversions ( pluginlist ) [EOL] assert result == expected [EOL] [EOL] [EOL] class TestTerminal ( object ) : [EOL] [EOL] def test_pass_skip_fail ( self , testdir , option ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( * option . args ) [EOL] if option . verbose : [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] else : [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_internalerror ( self , testdir , linecomp ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] rep = TerminalReporter ( modcol . config , file = linecomp . stringio ) [EOL] excinfo = pytest . raises ( ValueError , [string] ) [EOL] rep . pytest_internalerror ( excinfo . getrepr ( ) ) [EOL] linecomp . assert_contains_lines ( [ [string] ] ) [EOL] [EOL] def test_writeline ( self , testdir , linecomp ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] rep = TerminalReporter ( modcol . config , file = linecomp . stringio ) [EOL] rep . write_fspath_result ( modcol . nodeid , [string] ) [EOL] rep . write_line ( [string] ) [EOL] lines = linecomp . stringio . getvalue ( ) . split ( [string] ) [EOL] assert not lines [ [number] ] [EOL] assert lines [ [number] ] . endswith ( modcol . name + [string] ) [EOL] assert lines [ [number] ] == [string] [EOL] [EOL] def test_show_runtest_logstart ( self , testdir , linecomp ) : [EOL] item = testdir . getitem ( [string] ) [EOL] tr = TerminalReporter ( item . config , file = linecomp . stringio ) [EOL] item . config . pluginmanager . register ( tr ) [EOL] location = item . reportinfo ( ) [EOL] tr . config . hook . pytest_runtest_logstart ( nodeid = item . nodeid , location = location , fspath = str ( item . fspath ) ) [EOL] linecomp . assert_contains_lines ( [ [string] ] ) [EOL] [EOL] def test_runtest_location_shown_before_test_starts ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] child = testdir . spawn_pytest ( [string] ) [EOL] child . expect ( [string] ) [EOL] child . sendeof ( ) [EOL] child . kill ( [number] ) [EOL] [EOL] def test_itemreport_subclasses_show_subclassed_file ( self , testdir ) : [EOL] testdir . makepyfile ( test_p1 = [string] ) [EOL] p2 = testdir . makepyfile ( test_p2 = [string] ) [EOL] result = testdir . runpytest ( p2 ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] result = testdir . runpytest ( [string] , p2 ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_itemreport_directclasses_not_shown_as_subclasses ( self , testdir ) : [EOL] a = testdir . mkpydir ( [string] ) [EOL] a . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] def test_keyboard_interrupt ( self , testdir , option ) : [EOL] testdir . makepyfile ( [string] ) [EOL] [EOL] result = testdir . runpytest ( * option . args , no_reraise_ctrlc = True ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] if option . fulltrace : [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] else : [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_keyboard_in_sessionstart ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] [EOL] result = testdir . runpytest ( no_reraise_ctrlc = True ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_collect_single_item ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_rewrite ( self , testdir , monkeypatch ) : [EOL] config = testdir . parseconfig ( ) [EOL] f = py . io . TextIO ( ) [EOL] monkeypatch . setattr ( f , [string] , lambda * args : True ) [EOL] tr = TerminalReporter ( config , f ) [EOL] tr . _tw . fullwidth = [number] [EOL] tr . write ( [string] ) [EOL] tr . rewrite ( [string] , erase = True ) [EOL] assert f . getvalue ( ) == [string] + [string] + [string] + ( [number] * [string] ) [EOL] [EOL] [EOL] class TestCollectonly ( object ) : [EOL] [EOL] def test_collectonly_basic ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_collectonly_skipped_module ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_collectonly_failed_module ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_collectonly_fatal ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_collectonly_simple ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , p ) [EOL] [comment] [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] def test_collectonly_error ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , p ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( _pytest . _code . Source ( [string] ) . strip ( ) ) [EOL] [EOL] def test_collectonly_missing_path ( self , testdir ) : [EOL] [docstring] [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_collectonly_quiet ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_collectonly_more_quiet ( self , testdir ) : [EOL] testdir . makepyfile ( test_fun = [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_repr_python_version ( monkeypatch ) : [EOL] try : [EOL] monkeypatch . setattr ( sys , [string] , ( [number] , [number] , [number] , [string] , [number] ) ) [EOL] assert repr_pythonversion ( ) == [string] [EOL] sys . version_info = x = ( [number] , [number] ) [EOL] assert repr_pythonversion ( ) == str ( x ) [EOL] finally : [EOL] monkeypatch . undo ( ) [comment] [EOL] [EOL] [EOL] class TestFixtureReporting ( object ) : [EOL] [EOL] def test_setup_fixture_error ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL] assert result . ret != [number] [EOL] [EOL] def test_teardown_fixture_error ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] def test_teardown_fixture_error_and_test_failure ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] def test_setup_teardown_output_and_test_failure ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] class TestTerminalFunctional ( object ) : [EOL] [EOL] def test_deselected ( self , testdir ) : [EOL] testpath = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , testpath ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_show_deselected_items_using_markexpr_before_test_execution ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_no_skip_summary_if_failure ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . stdout . str ( ) . find ( [string] ) == - [number] [EOL] assert result . ret == [number] [EOL] [EOL] def test_passes ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] old = p1 . dirpath ( ) . chdir ( ) [EOL] try : [EOL] result = testdir . runpytest ( ) [EOL] finally : [EOL] old . chdir ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_header_trailer_info ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] verinfo = [string] . join ( map ( str , sys . version_info [ : [number] ] ) ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] % ( sys . platform , verinfo , pytest . __version__ , py . __version__ , pluggy . __version__ , ) , [string] , [string] , ] ) [EOL] if pytest . config . pluginmanager . list_plugin_distinfo ( ) : [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_showlocals ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p1 , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , ] ) [EOL] [EOL] def test_verbose_reporting ( self , testdir , pytestconfig ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p1 , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] assert result . ret == [number] [EOL] [EOL] if not pytestconfig . pluginmanager . get_plugin ( [string] ) : [EOL] pytest . skip ( [string] ) [EOL] [EOL] result = testdir . runpytest ( p1 , [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_quiet_reporting ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p1 , [string] ) [EOL] s = result . stdout . str ( ) [EOL] assert [string] not in s [EOL] assert p1 . basename not in s [EOL] assert [string] not in s [EOL] assert [string] in s [EOL] [EOL] def test_more_quiet_reporting ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p1 , [string] ) [EOL] s = result . stdout . str ( ) [EOL] assert [string] not in s [EOL] assert p1 . basename not in s [EOL] assert [string] not in s [EOL] assert [string] not in s [EOL] [EOL] def test_report_collectionfinish_hook ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_fail_extra_reporting ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_fail_reporting_on_pass ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_pass_extra_reporting ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_pass_reporting_on_fail ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_pass_output_reporting ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_color_yes ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] in result . stdout . str ( ) [EOL] assert [string] in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_color_no ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] in result . stdout . str ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_color_yes_collection_on_non_atty ( testdir , verbose ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] args = [ [string] ] [EOL] if verbose : [EOL] args . append ( [string] ) [EOL] result = testdir . runpytest ( * args ) [EOL] assert [string] in result . stdout . str ( ) [EOL] assert [string] in result . stdout . str ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] if verbose : [EOL] assert [string] in result . stdout . str ( ) [EOL] assert [string] in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_getreportopt ( ) : [EOL] [EOL] class Config ( object ) : [EOL] [EOL] class Option ( object ) : [EOL] reportchars = [string] [EOL] disable_warnings = True [EOL] [EOL] option = Option ( ) [EOL] [EOL] config = Config ( ) [EOL] [EOL] config . option . reportchars = [string] [EOL] assert getreportopt ( config ) == [string] [EOL] [EOL] config . option . reportchars = [string] [EOL] assert getreportopt ( config ) == [string] [EOL] [EOL] config . option . reportchars = [string] [EOL] config . option . disable_warnings = False [EOL] assert getreportopt ( config ) == [string] [EOL] [EOL] config . option . reportchars = [string] [EOL] config . option . disable_warnings = False [EOL] assert getreportopt ( config ) == [string] [EOL] [EOL] [EOL] def test_terminalreporter_reportopt_addopts ( testdir ) : [EOL] testdir . makeini ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_tbstyle_short ( testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] s = result . stdout . str ( ) [EOL] assert [string] not in s [EOL] assert [string] not in s [EOL] result . stdout . fnmatch_lines ( [ [string] % p . basename , [string] , [string] ] ) [EOL] result = testdir . runpytest ( ) [EOL] s = result . stdout . str ( ) [EOL] assert [string] in s [EOL] assert [string] in s [EOL] [EOL] [EOL] def test_traceconfig ( testdir , monkeypatch ) : [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] [EOL] [EOL] class TestGenericReporting ( object ) : [EOL] [docstring] [EOL] [EOL] def test_collect_fail ( self , testdir , option ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( * option . args ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_maxfailures ( self , testdir , option ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , * option . args ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_tb_option ( self , testdir , option ) : [EOL] testdir . makepyfile ( [string] ) [EOL] for tbopt in [ [string] , [string] , [string] ] : [EOL] print ( [string] % tbopt ) [EOL] result = testdir . runpytest ( [string] % tbopt ) [EOL] s = result . stdout . str ( ) [EOL] if tbopt == [string] : [EOL] assert [string] in s [EOL] else : [EOL] assert [string] not in s [EOL] if tbopt != [string] : [EOL] assert [string] in s [EOL] assert [string] in s [EOL] else : [EOL] assert [string] not in s [EOL] assert [string] not in s [EOL] assert [string] not in s [EOL] [EOL] def test_tb_crashline ( self , testdir , option ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] bn = p . basename [EOL] result . stdout . fnmatch_lines ( [ [string] % bn , [string] % bn ] ) [EOL] s = result . stdout . str ( ) [EOL] assert [string] not in s [EOL] [EOL] def test_pytest_report_header ( self , testdir , option ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . mkdir ( [string] ) . join ( [string] ) . write ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , str ( testdir . tmpdir ) ] ) [EOL] [EOL] def test_show_capture ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] stdout = testdir . runpytest ( [string] , [string] ) . stdout . str ( ) [EOL] assert [string] not in stdout [EOL] assert [string] in stdout [EOL] assert [string] not in stdout [EOL] [EOL] stdout = testdir . runpytest ( [string] , [string] ) . stdout . str ( ) [EOL] assert [string] not in stdout [EOL] assert [string] in stdout [EOL] assert [string] not in stdout [EOL] [EOL] stdout = testdir . runpytest ( [string] , [string] ) . stdout . str ( ) [EOL] assert [string] not in stdout [EOL] assert [string] not in stdout [EOL] assert [string] in stdout [EOL] [EOL] stdout = testdir . runpytest ( [string] , [string] ) . stdout . str ( ) [EOL] assert [string] not in stdout [EOL] assert [string] not in stdout [EOL] assert [string] not in stdout [EOL] [EOL] [EOL] @ pytest . mark . xfail ( [string] ) def test_fdopen_kept_alive_issue124 ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_tbstyle_native_setup_error ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_terminal_summary ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] [EOL] def test_terminal_summary_warnings_are_displayed ( testdir ) : [EOL] [docstring] [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , [number] , [number] , [number] , [number] ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { } ) , ( [string] , [string] , { [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , ) } ) , ( [string] , [string] , { [string] : ( [number] , [number] ) , [string] : ( [number] , ) , [string] : ( [number] , [number] , [number] ) } , ) , ( [string] , [string] , { [string] : ( [number] , ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] , [number] ) , [string] : ( [number] , [number] ) , } , ) , ] , ) def test_summary_stats ( exp_line , exp_color , stats_arg ) : [EOL] print ( [string] % stats_arg ) [EOL] print ( [string] % ( exp_line , exp_color ) ) [EOL] ( line , color ) = build_summary_stats_line ( stats_arg ) [EOL] print ( [string] % ( line , color ) ) [EOL] assert line == exp_line [EOL] assert color == exp_color [EOL] [EOL] [EOL] def test_no_trailing_whitespace_after_inifile_word ( testdir ) : [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] in result . stdout . str ( ) [EOL] [EOL] testdir . makeini ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert [string] in result . stdout . str ( ) [EOL] [EOL] [EOL] class TestProgress ( object ) : [EOL] [EOL] @ pytest . fixture def many_tests_files ( self , testdir ) : [EOL] testdir . makepyfile ( test_bar = [string] , test_foo = [string] , test_foobar = [string] , ) [EOL] [EOL] def test_zero_tests_collected ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makeconftest ( [string] ) [EOL] output = testdir . runpytest ( ) [EOL] assert [string] not in output . stdout . str ( ) [EOL] output . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_normal ( self , many_tests_files , testdir ) : [EOL] output = testdir . runpytest ( ) [EOL] output . stdout . re_match_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] def test_verbose ( self , many_tests_files , testdir ) : [EOL] output = testdir . runpytest ( [string] ) [EOL] output . stdout . re_match_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] def test_xdist_normal ( self , many_tests_files , testdir ) : [EOL] pytest . importorskip ( [string] ) [EOL] output = testdir . runpytest ( [string] ) [EOL] output . stdout . re_match_lines ( [ [string] ] ) [EOL] [EOL] def test_xdist_verbose ( self , many_tests_files , testdir ) : [EOL] pytest . importorskip ( [string] ) [EOL] output = testdir . runpytest ( [string] , [string] ) [EOL] output . stdout . re_match_lines_random ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] def test_capture_no ( self , many_tests_files , testdir ) : [EOL] output = testdir . runpytest ( [string] ) [EOL] output . stdout . re_match_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] output = testdir . runpytest ( [string] ) [EOL] assert [string] not in output . stdout . str ( ) [EOL] [EOL] [EOL] class TestProgressWithTeardown ( object ) : [EOL] [docstring] [EOL] [EOL] @ pytest . fixture def contest_with_teardown_fixture ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] [EOL] @ pytest . fixture def many_files ( self , testdir , contest_with_teardown_fixture ) : [EOL] testdir . makepyfile ( test_bar = [string] , test_foo = [string] , ) [EOL] [EOL] def test_teardown_simple ( self , testdir , contest_with_teardown_fixture ) : [EOL] testdir . makepyfile ( [string] ) [EOL] output = testdir . runpytest ( ) [EOL] output . stdout . re_match_lines ( [ [string] ] ) [EOL] [EOL] def test_teardown_with_test_also_failing ( self , testdir , contest_with_teardown_fixture ) : [EOL] testdir . makepyfile ( [string] ) [EOL] output = testdir . runpytest ( ) [EOL] output . stdout . re_match_lines ( [ [string] ] ) [EOL] [EOL] def test_teardown_many ( self , testdir , many_files ) : [EOL] output = testdir . runpytest ( ) [EOL] output . stdout . re_match_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_teardown_many_verbose ( self , testdir , many_files ) : [EOL] output = testdir . runpytest ( [string] ) [EOL] output . stdout . re_match_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] def test_xdist_normal ( self , many_files , testdir ) : [EOL] pytest . importorskip ( [string] ) [EOL] output = testdir . runpytest ( [string] ) [EOL] output . stdout . re_match_lines ( [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.test_terminal.DistInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.test_terminal.DistInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.test_terminal.DistInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.test_terminal.DistInfo]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.test_terminal.DistInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Tuple , Any , Literal , Dict [EOL] import typing_extensions [EOL] import typing [EOL] import tools [EOL] from __future__ import absolute_import , division , print_function [EOL] import sys [EOL] import textwrap [EOL] import pytest [EOL] [EOL] import _pytest . _code [EOL] from _pytest . config . findpaths import getcfg , get_common_ancestor , determine_setup [EOL] from _pytest . config import _iter_rewritable_modules [EOL] from _pytest . main import EXIT_NOTESTSCOLLECTED [EOL] [EOL] [EOL] class TestParseIni ( object ) : [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_getcfg_and_config ( self , testdir , tmpdir , section , filename ) : [EOL] sub = tmpdir . mkdir ( [string] ) [EOL] sub . chdir ( ) [EOL] tmpdir . join ( filename ) . write ( _pytest . _code . Source ( [string] . format ( section = section ) ) ) [EOL] rootdir , inifile , cfg = getcfg ( [ sub ] ) [EOL] assert cfg [ [string] ] == [string] [EOL] config = testdir . parseconfigure ( sub ) [EOL] assert config . inicfg [ [string] ] == [string] [EOL] [EOL] def test_getcfg_empty_path ( self ) : [EOL] [docstring] [EOL] getcfg ( [ [string] ] ) [EOL] [EOL] def test_append_parse_args ( self , testdir , tmpdir , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] tmpdir . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] config = testdir . parseconfig ( tmpdir ) [EOL] assert config . option . color == [string] [EOL] assert config . option . reportchars == [string] [EOL] assert config . option . tbstyle == [string] [EOL] assert config . option . verbose [EOL] [EOL] def test_tox_ini_wrong_version ( self , testdir ) : [EOL] testdir . makefile ( [string] , tox = [string] , ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret != [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , ) def test_ini_names ( self , testdir , name , section ) : [EOL] testdir . tmpdir . join ( name ) . write ( textwrap . dedent ( [string] . format ( section = section ) ) ) [EOL] config = testdir . parseconfig ( ) [EOL] assert config . getini ( [string] ) == [string] [EOL] [EOL] def test_toxini_before_lower_pytestini ( self , testdir ) : [EOL] sub = testdir . tmpdir . mkdir ( [string] ) [EOL] sub . join ( [string] ) . write ( textwrap . dedent ( [string] ) ) [EOL] testdir . tmpdir . join ( [string] ) . write ( textwrap . dedent ( [string] ) ) [EOL] config = testdir . parseconfigure ( sub ) [EOL] assert config . getini ( [string] ) == [string] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) def test_confcutdir ( self , testdir ) : [EOL] sub = testdir . mkdir ( [string] ) [EOL] sub . chdir ( ) [EOL] testdir . makeini ( [string] ) [EOL] result = testdir . inline_run ( [string] ) [EOL] assert result . ret == [number] [EOL] [EOL] [EOL] class TestConfigCmdlineParsing ( object ) : [EOL] [EOL] def test_parsing_again_fails ( self , testdir ) : [EOL] config = testdir . parseconfig ( ) [EOL] pytest . raises ( AssertionError , lambda : config . parse ( [ ] ) ) [EOL] [EOL] def test_explicitly_specified_config_file_is_loaded ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] testdir . makefile ( [string] , custom = [string] , ) [EOL] config = testdir . parseconfig ( [string] , [string] ) [EOL] assert config . getini ( [string] ) == [string] [EOL] [EOL] testdir . makefile ( [string] , custom_tool_pytest_section = [string] , ) [EOL] config = testdir . parseconfig ( [string] , [string] ) [EOL] assert config . getini ( [string] ) == [string] [EOL] [EOL] def test_absolute_win32_path ( self , testdir ) : [EOL] temp_cfg_file = testdir . makefile ( [string] , custom = [string] , ) [EOL] from os . path import normpath [EOL] [EOL] temp_cfg_file = normpath ( str ( temp_cfg_file ) ) [EOL] ret = pytest . main ( [string] + temp_cfg_file ) [EOL] assert ret == _pytest . main . EXIT_OK [EOL] [EOL] [EOL] class TestConfigAPI ( object ) : [EOL] [EOL] def test_config_trace ( self , testdir ) : [EOL] config = testdir . parseconfig ( ) [EOL] values = [ ] [EOL] config . trace . root . setwriter ( values . append ) [EOL] config . trace ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values [ [number] ] == [string] [EOL] [EOL] def test_config_getoption ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] config = testdir . parseconfig ( [string] ) [EOL] for x in ( [string] , [string] , [string] ) : [EOL] assert config . getoption ( x ) == [string] [EOL] pytest . raises ( ValueError , [string] ) [EOL] [EOL] @ pytest . mark . skipif ( [string] ) def test_config_getoption_unicode ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] config = testdir . parseconfig ( [string] ) [EOL] assert config . getoption ( [string] ) == [string] [EOL] [EOL] def test_config_getvalueorskip ( self , testdir ) : [EOL] config = testdir . parseconfig ( ) [EOL] pytest . raises ( pytest . skip . Exception , [string] ) [EOL] verbose = config . getvalueorskip ( [string] ) [EOL] assert verbose == config . option . verbose [EOL] [EOL] def test_config_getvalueorskip_None ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] with pytest . raises ( pytest . skip . Exception ) : [EOL] config . getvalueorskip ( [string] ) [EOL] [EOL] def test_getoption ( self , testdir ) : [EOL] config = testdir . parseconfig ( ) [EOL] with pytest . raises ( ValueError ) : [EOL] config . getvalue ( [string] ) [EOL] assert config . getoption ( [string] , [number] ) == [number] [EOL] [EOL] def test_getconftest_pathlist ( self , testdir , tmpdir ) : [EOL] somepath = tmpdir . join ( [string] , [string] , [string] ) [EOL] p = tmpdir . join ( [string] ) [EOL] p . write ( [string] % str ( somepath ) ) [EOL] config = testdir . parseconfigure ( p ) [EOL] assert config . _getconftest_pathlist ( [string] , path = tmpdir ) is None [EOL] pl = config . _getconftest_pathlist ( [string] , path = tmpdir ) [EOL] print ( pl ) [EOL] assert len ( pl ) == [number] [EOL] assert pl [ [number] ] == tmpdir [EOL] assert pl [ [number] ] == somepath [EOL] [EOL] def test_addini ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] val = config . getini ( [string] ) [EOL] assert val == [string] [EOL] pytest . raises ( ValueError , config . getini , [string] ) [EOL] [EOL] def test_addini_pathlist ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] p = testdir . makeini ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values [ [number] ] == p . dirpath ( [string] ) [EOL] assert values [ [number] ] == p . dirpath ( [string] ) [EOL] pytest . raises ( ValueError , config . getini , [string] ) [EOL] [EOL] def test_addini_args ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] , [string] , [string] ] [EOL] values = config . getini ( [string] ) [EOL] assert values == list ( [string] ) [EOL] [EOL] def test_addini_linelist ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] , [string] ] [EOL] values = config . getini ( [string] ) [EOL] assert values == [ ] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , True ) , ( [string] , False ) , ( [string] , True ) ] ) def test_addini_bool ( self , testdir , str_val , bool_val ) : [EOL] testdir . makeconftest ( [string] ) [EOL] if str_val != [string] : [EOL] testdir . makeini ( [string] % str_val ) [EOL] config = testdir . parseconfig ( ) [EOL] assert config . getini ( [string] ) is bool_val [EOL] [EOL] def test_addinivalue_line_existing ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] ] [EOL] config . addinivalue_line ( [string] , [string] ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] , [string] ] [EOL] [EOL] def test_addinivalue_line_new ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] assert not config . getini ( [string] ) [EOL] config . addinivalue_line ( [string] , [string] ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] ] [EOL] config . addinivalue_line ( [string] , [string] ) [EOL] values = config . getini ( [string] ) [EOL] assert len ( values ) == [number] [EOL] assert values == [ [string] , [string] ] [EOL] [EOL] def test_confcutdir_check_isdir ( self , testdir ) : [EOL] [docstring] [EOL] with pytest . raises ( pytest . UsageError ) : [EOL] testdir . parseconfig ( [string] , testdir . tmpdir . join ( [string] ) . ensure ( file = [number] ) ) [EOL] with pytest . raises ( pytest . UsageError ) : [EOL] testdir . parseconfig ( [string] , testdir . tmpdir . join ( [string] ) ) [EOL] config = testdir . parseconfig ( [string] , testdir . tmpdir . join ( [string] ) . ensure ( dir = [number] ) ) [EOL] assert config . getoption ( [string] ) == str ( testdir . tmpdir . join ( [string] ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ [string] ] , [ [string] ] ) , ( [ [string] , [string] ] , [ ] ) , ( [ [string] , [string] ] , [ ] ) , ( [ [string] , [string] ] , [ [string] ] ) , ( [ [string] , [string] , [string] ] , [ ] ) , ] , ) def test_iter_rewritable_modules ( self , names , expected ) : [EOL] assert list ( _iter_rewritable_modules ( [ [string] . join ( names ) ] ) ) == expected [EOL] [EOL] [EOL] class TestConfigFromdictargs ( object ) : [EOL] [EOL] def test_basic_behavior ( self ) : [EOL] from _pytest . config import Config [EOL] [EOL] option_dict = { [string] : [number] , [string] : [string] , [string] : [string] } [EOL] args = [ [string] , [string] ] [EOL] [EOL] config = Config . fromdictargs ( option_dict , args ) [EOL] with pytest . raises ( AssertionError ) : [EOL] config . parse ( [ [string] ] ) [EOL] assert config . option . verbose == [number] [EOL] assert config . option . foo == [string] [EOL] assert config . option . capture == [string] [EOL] assert config . args == args [EOL] [EOL] def test_origargs ( self ) : [EOL] [docstring] [EOL] from _pytest . config import Config [EOL] [EOL] option_dict = { } [EOL] args = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] config = Config . fromdictargs ( option_dict , args ) [EOL] assert config . args == [ [string] , [string] ] [EOL] assert config . _origargs == args [EOL] assert config . option . verbose == [number] [EOL] assert config . option . capture == [string] [EOL] [EOL] def test_inifilename ( self , tmpdir ) : [EOL] tmpdir . join ( [string] ) . ensure ( ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] [EOL] from _pytest . config import Config [EOL] [EOL] inifile = [string] [EOL] option_dict = { [string] : inifile , [string] : [string] } [EOL] [EOL] cwd = tmpdir . join ( [string] ) [EOL] cwd . join ( [string] ) . ensure ( ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] with cwd . ensure ( dir = True ) . as_cwd ( ) : [EOL] config = Config . fromdictargs ( option_dict , ( ) ) [EOL] [EOL] assert config . args == [ str ( cwd ) ] [EOL] assert config . option . inifilename == inifile [EOL] assert config . option . capture == [string] [EOL] [EOL] [comment] [EOL] assert config . inifile == inifile [EOL] assert config . inicfg . get ( [string] ) == [string] [EOL] assert config . inicfg . get ( [string] ) is None [EOL] [EOL] [EOL] def test_options_on_small_file_do_not_blow_up ( testdir ) : [EOL] [EOL] def runfiletest ( opts ) : [EOL] reprec = testdir . inline_run ( * opts ) [EOL] passed , skipped , failed = reprec . countoutcomes ( ) [EOL] assert failed == [number] [EOL] assert skipped == passed == [number] [EOL] [EOL] path = testdir . makepyfile ( [string] ) [EOL] [EOL] for opts in ( [ ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] , [string] ] , ) : [EOL] runfiletest ( opts + [ path ] ) [EOL] [EOL] [EOL] def test_preparse_ordering_with_setuptools ( testdir , monkeypatch ) : [EOL] pkg_resources = pytest . importorskip ( [string] ) [EOL] [EOL] def my_iter ( name ) : [EOL] assert name == [string] [EOL] [EOL] class Dist ( object ) : [EOL] project_name = [string] [EOL] version = [string] [EOL] [EOL] def _get_metadata ( self , name ) : [EOL] return [ [string] ] [EOL] [EOL] class EntryPoint ( object ) : [EOL] name = [string] [EOL] dist = Dist ( ) [EOL] [EOL] def load ( self ) : [EOL] [EOL] class PseudoPlugin ( object ) : [EOL] x = [number] [EOL] [EOL] return PseudoPlugin ( ) [EOL] [EOL] return iter ( [ EntryPoint ( ) ] ) [EOL] [EOL] monkeypatch . setattr ( pkg_resources , [string] , my_iter ) [EOL] testdir . makeconftest ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = testdir . parseconfig ( ) [EOL] plugin = config . pluginmanager . getplugin ( [string] ) [EOL] assert plugin . x == [number] [EOL] [EOL] [EOL] def test_setuptools_importerror_issue1479 ( testdir , monkeypatch ) : [EOL] pkg_resources = pytest . importorskip ( [string] ) [EOL] [EOL] def my_iter ( name ) : [EOL] assert name == [string] [EOL] [EOL] class Dist ( object ) : [EOL] project_name = [string] [EOL] version = [string] [EOL] [EOL] def _get_metadata ( self , name ) : [EOL] return [ [string] ] [EOL] [EOL] class EntryPoint ( object ) : [EOL] name = [string] [EOL] dist = Dist ( ) [EOL] [EOL] def load ( self ) : [EOL] raise ImportError ( [string] ) [EOL] [EOL] return iter ( [ EntryPoint ( ) ] ) [EOL] [EOL] monkeypatch . setattr ( pkg_resources , [string] , my_iter ) [EOL] with pytest . raises ( ImportError ) : [EOL] testdir . parseconfig ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_plugin_preparse_prevents_setuptools_loading ( testdir , monkeypatch , block_it ) : [EOL] pkg_resources = pytest . importorskip ( [string] ) [EOL] [EOL] plugin_module_placeholder = object ( ) [EOL] [EOL] def my_iter ( name ) : [EOL] assert name == [string] [EOL] [EOL] class Dist ( object ) : [EOL] project_name = [string] [EOL] version = [string] [EOL] [EOL] def _get_metadata ( self , name ) : [EOL] return [ [string] ] [EOL] [EOL] class EntryPoint ( object ) : [EOL] name = [string] [EOL] dist = Dist ( ) [EOL] [EOL] def load ( self ) : [EOL] return plugin_module_placeholder [EOL] [EOL] return iter ( [ EntryPoint ( ) ] ) [EOL] [EOL] monkeypatch . setattr ( pkg_resources , [string] , my_iter ) [EOL] args = ( [string] , [string] ) if block_it else ( ) [EOL] config = testdir . parseconfig ( * args ) [EOL] config . pluginmanager . import_plugin ( [string] ) [EOL] if block_it : [EOL] assert [string] not in sys . modules [EOL] assert config . pluginmanager . get_plugin ( [string] ) is None [EOL] else : [EOL] assert config . pluginmanager . get_plugin ( [string] ) is plugin_module_placeholder [EOL] [EOL] [EOL] def test_cmdline_processargs_simple ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_invalid_options_show_extra_information ( testdir ) : [EOL] [docstring] [EOL] testdir . makeini ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stderr . fnmatch_lines ( [ [string] , [string] % testdir . tmpdir . join ( [string] ) , [string] % testdir . tmpdir , ] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , ] , ) def test_consider_args_after_options_for_rootdir_and_inifile ( testdir , args ) : [EOL] [docstring] [EOL] [comment] [EOL] root = testdir . tmpdir . mkdir ( [string] ) [EOL] d1 = root . mkdir ( [string] ) [EOL] d2 = root . mkdir ( [string] ) [EOL] for i , arg in enumerate ( args ) : [EOL] if arg == [string] : [EOL] args [ i ] = d1 [EOL] elif arg == [string] : [EOL] args [ i ] = d2 [EOL] with root . as_cwd ( ) : [EOL] result = testdir . runpytest ( * args ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( [string] ) def test_toolongargs_issue224 ( testdir ) : [EOL] result = testdir . runpytest ( [string] , [string] * [number] ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] [EOL] [EOL] def test_config_in_subdirectory_colon_command_line_issue2148 ( testdir ) : [EOL] conftest_source = [string] [EOL] [EOL] testdir . makefile ( [string] , ** { [string] : [string] , [string] : [string] } ) [EOL] [EOL] testdir . makepyfile ( ** { [string] : conftest_source , [string] : conftest_source , [string] : [string] , } ) [EOL] [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] [EOL] [EOL] def test_notify_exception ( testdir , capfd ) : [EOL] config = testdir . parseconfig ( ) [EOL] excinfo = pytest . raises ( ValueError , [string] ) [EOL] config . notify_exception ( excinfo ) [EOL] out , err = capfd . readouterr ( ) [EOL] assert [string] in err [EOL] [EOL] class A ( object ) : [EOL] [EOL] def pytest_internalerror ( self , excrepr ) : [EOL] return True [EOL] [EOL] config . pluginmanager . register ( A ( ) ) [EOL] config . notify_exception ( excinfo ) [EOL] out , err = capfd . readouterr ( ) [EOL] assert not err [EOL] [EOL] [EOL] def test_load_initial_conftest_last_ordering ( testdir ) : [EOL] from _pytest . config import get_config [EOL] [EOL] pm = get_config ( ) . pluginmanager [EOL] [EOL] class My ( object ) : [EOL] [EOL] def pytest_load_initial_conftests ( self ) : [EOL] pass [EOL] [EOL] m = My ( ) [EOL] pm . register ( m ) [EOL] hc = pm . hook . pytest_load_initial_conftests [EOL] values = hc . _nonwrappers + hc . _wrappers [EOL] expected = [ [string] , [string] , [string] ] [EOL] assert [ x . function . __module__ for x in values ] == expected [EOL] [EOL] [EOL] def test_get_plugin_specs_as_list ( ) : [EOL] from _pytest . config import _get_plugin_specs_as_list [EOL] [EOL] with pytest . raises ( pytest . UsageError ) : [EOL] _get_plugin_specs_as_list ( { [string] } ) [EOL] with pytest . raises ( pytest . UsageError ) : [EOL] _get_plugin_specs_as_list ( dict ( ) ) [EOL] [EOL] assert _get_plugin_specs_as_list ( None ) == [ ] [EOL] assert _get_plugin_specs_as_list ( [string] ) == [ ] [EOL] assert _get_plugin_specs_as_list ( [string] ) == [ [string] ] [EOL] assert _get_plugin_specs_as_list ( [string] ) == [ [string] , [string] ] [EOL] assert _get_plugin_specs_as_list ( [ [string] , [string] ] ) == [ [string] , [string] ] [EOL] assert _get_plugin_specs_as_list ( ( [string] , [string] ) ) == [ [string] , [string] ] [EOL] [EOL] [EOL] class TestWarning ( object ) : [EOL] [EOL] def test_warn_config ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_warn_on_test_item_from_request ( self , testdir , request ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . parseoutcomes ( ) [ [string] ] > [number] [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] [EOL] class TestRootdir ( object ) : [EOL] [EOL] def test_simple_noini ( self , tmpdir ) : [EOL] assert get_common_ancestor ( [ tmpdir ] ) == tmpdir [EOL] a = tmpdir . mkdir ( [string] ) [EOL] assert get_common_ancestor ( [ a , tmpdir ] ) == tmpdir [EOL] assert get_common_ancestor ( [ tmpdir , a ] ) == tmpdir [EOL] with tmpdir . as_cwd ( ) : [EOL] assert get_common_ancestor ( [ ] ) == tmpdir [EOL] no_path = tmpdir . join ( [string] ) [EOL] assert get_common_ancestor ( [ no_path ] ) == tmpdir [EOL] assert get_common_ancestor ( [ no_path . join ( [string] ) ] ) == tmpdir [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [string] . split ( ) ) def test_with_ini ( self , tmpdir , name ) : [EOL] inifile = tmpdir . join ( name ) [EOL] inifile . write ( [string] ) [EOL] [EOL] a = tmpdir . mkdir ( [string] ) [EOL] b = a . mkdir ( [string] ) [EOL] for args in ( [ tmpdir ] , [ a ] , [ b ] ) : [EOL] rootdir , inifile , inicfg = determine_setup ( None , args ) [EOL] assert rootdir == tmpdir [EOL] assert inifile == inifile [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ b , a ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile == inifile [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [string] . split ( ) ) def test_pytestini_overides_empty_other ( self , tmpdir , name ) : [EOL] inifile = tmpdir . ensure ( [string] ) [EOL] a = tmpdir . mkdir ( [string] ) [EOL] a . ensure ( name ) [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ a ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile == inifile [EOL] [EOL] def test_setuppy_fallback ( self , tmpdir ) : [EOL] a = tmpdir . mkdir ( [string] ) [EOL] a . ensure ( [string] ) [EOL] tmpdir . ensure ( [string] ) [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ a ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile is None [EOL] assert inicfg == { } [EOL] [EOL] def test_nothing ( self , tmpdir , monkeypatch ) : [EOL] monkeypatch . chdir ( str ( tmpdir ) ) [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ tmpdir ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile is None [EOL] assert inicfg == { } [EOL] [EOL] def test_with_specific_inifile ( self , tmpdir ) : [EOL] inifile = tmpdir . ensure ( [string] ) [EOL] rootdir , inifile , inicfg = determine_setup ( inifile , [ tmpdir ] ) [EOL] assert rootdir == tmpdir [EOL] [EOL] [EOL] class TestOverrideIniArgs ( object ) : [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [string] . split ( ) ) def test_override_ini_names ( self , testdir , name ) : [EOL] testdir . tmpdir . join ( name ) . write ( textwrap . dedent ( [string] ) ) [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] result = testdir . runpytest ( [string] , [string] , [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_override_ini_pathlist ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_override_multiple_and_default ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makeini ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] def test_override_ini_usage_error_bad_style ( self , testdir ) : [EOL] testdir . makeini ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_override_ini_handled_asap ( self , testdir , with_ini ) : [EOL] [docstring] [EOL] if with_ini : [EOL] testdir . makeini ( [string] ) [EOL] testdir . makepyfile ( unittest_ini_handle = [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_with_arg_outside_cwd_without_inifile ( self , tmpdir , monkeypatch ) : [EOL] monkeypatch . chdir ( str ( tmpdir ) ) [EOL] a = tmpdir . mkdir ( [string] ) [EOL] b = tmpdir . mkdir ( [string] ) [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ a , b ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile is None [EOL] [EOL] def test_with_arg_outside_cwd_with_inifile ( self , tmpdir ) : [EOL] a = tmpdir . mkdir ( [string] ) [EOL] b = tmpdir . mkdir ( [string] ) [EOL] inifile = a . ensure ( [string] ) [EOL] rootdir , parsed_inifile , inicfg = determine_setup ( None , [ a , b ] ) [EOL] assert rootdir == a [EOL] assert inifile == parsed_inifile [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [ ] , [ [string] ] , [ [string] ] ) ) def test_with_non_dir_arg ( self , dirs , tmpdir ) : [EOL] with tmpdir . ensure ( dir = True ) . as_cwd ( ) : [EOL] rootdir , inifile , inicfg = determine_setup ( None , dirs ) [EOL] assert rootdir == tmpdir [EOL] assert inifile is None [EOL] [EOL] def test_with_existing_file_in_subdir ( self , tmpdir ) : [EOL] a = tmpdir . mkdir ( [string] ) [EOL] a . ensure ( [string] ) [EOL] with tmpdir . as_cwd ( ) : [EOL] rootdir , inifile , inicfg = determine_setup ( None , [ [string] ] ) [EOL] assert rootdir == tmpdir [EOL] assert inifile is None [EOL] [EOL] def test_addopts_before_initini ( self , monkeypatch ) : [EOL] cache_dir = [string] [EOL] monkeypatch . setenv ( [string] , [string] % cache_dir ) [EOL] from _pytest . config import get_config [EOL] [EOL] config = get_config ( ) [EOL] config . _preparse ( [ ] , addopts = True ) [EOL] assert config . _override_ini == [ [string] % cache_dir ] [EOL] [EOL] def test_override_ini_does_not_contain_paths ( self ) : [EOL] [docstring] [EOL] from _pytest . config import get_config [EOL] [EOL] config = get_config ( ) [EOL] config . _preparse ( [ [string] , [string] , [string] ] ) [EOL] assert config . _override_ini == [ [string] ] [EOL] [EOL] def test_multiple_override_ini_options ( self , testdir , request ) : [EOL] [docstring] [EOL] testdir . makepyfile ( ** { [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] , [string] , [string] ) [EOL] assert [string] not in result . stderr . str ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List , Optional [EOL] import typing [EOL] import _importlib_modulespec [EOL] from __future__ import absolute_import , division , print_function [EOL] import os [EOL] import sys [EOL] import types [EOL] [EOL] import six [EOL] [EOL] import _pytest . _code [EOL] import py [EOL] import pytest [EOL] from _pytest . main import EXIT_NOTESTSCOLLECTED , EXIT_USAGEERROR [EOL] [EOL] [EOL] class TestGeneralUsage ( object ) : [EOL] [EOL] def test_config_error ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( testdir . tmpdir ) [EOL] assert result . ret != [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_root_conftest_syntax_error ( self , testdir ) : [EOL] testdir . makepyfile ( conftest = [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] assert result . ret != [number] [EOL] [EOL] def test_early_hook_error_issue38_1 ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( testdir . tmpdir ) [EOL] assert result . ret != [number] [EOL] [comment] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] result = testdir . runpytest ( testdir . tmpdir , [string] ) [EOL] assert result . ret != [number] [EOL] [comment] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_early_hook_configure_error_issue38 ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( testdir . tmpdir ) [EOL] assert result . ret != [number] [EOL] [comment] [EOL] result . stderr . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_file_not_found ( self , testdir ) : [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret != [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_file_not_found_unconfigure_issue143 ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [comment] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_config_preparse_plugin_option ( self , testdir ) : [EOL] testdir . makepyfile ( pytest_xyz = [string] ) [EOL] testdir . makepyfile ( test_one = [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] , syspathinsert = True ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_assertion_magic ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_nested_import_error ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] testdir . makepyfile ( import_fails = [string] ) [EOL] result = testdir . runpytest ( p ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , ] ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_not_collectable_arguments ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] p2 = testdir . makefile ( [string] , [string] ) [EOL] result = testdir . runpytest ( p1 , p2 ) [EOL] assert result . ret [EOL] result . stderr . fnmatch_lines ( [ [string] % ( p2 . basename , ) ] ) [EOL] [EOL] def test_issue486_better_reporting_on_conftest_load_failure ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stderr . fnmatch_lines ( [string] ) [EOL] [EOL] def test_early_skip ( self , testdir ) : [EOL] testdir . mkdir ( [string] ) [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_issue88_initial_file_multinodes ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_issue93_initialnode_importing_capturing ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] assert [string] not in result . stdout . str ( ) [EOL] assert [string] not in result . stderr . str ( ) [EOL] [EOL] def test_conftest_printing_shows_if_error ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret != [number] [EOL] assert [string] in result . stdout . str ( ) [EOL] [EOL] @ pytest . mark . skipif ( not hasattr ( py . path . local , [string] ) , reason = [string] , ) def test_chdir ( self , testdir ) : [EOL] testdir . tmpdir . join ( [string] ) . mksymlinkto ( py . _pydir ) [EOL] p = testdir . tmpdir . join ( [string] ) [EOL] p . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpython ( p ) [EOL] assert not result . ret [EOL] [EOL] def test_issue109_sibling_conftests_not_loaded ( self , testdir ) : [EOL] sub1 = testdir . mkdir ( [string] ) [EOL] sub2 = testdir . mkdir ( [string] ) [EOL] sub1 . join ( [string] ) . write ( [string] ) [EOL] result = testdir . runpytest ( sub2 ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] sub2 . ensure ( [string] ) [EOL] p = sub2 . ensure ( [string] ) [EOL] result = testdir . runpytest ( p ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] result = testdir . runpytest ( sub1 ) [EOL] assert result . ret == EXIT_USAGEERROR [EOL] [EOL] def test_directory_skipped ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_multiple_items_per_collector_byid ( self , testdir ) : [EOL] c = testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( c . basename + [string] + [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_skip_on_generated_funcarg_id ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p ) [EOL] assert res . ret == [number] [EOL] res . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_direct_addressing_selects ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p . basename + [string] + [string] ) [EOL] assert res . ret == [number] [EOL] res . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_direct_addressing_notfound ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p . basename + [string] + [string] ) [EOL] assert res . ret [EOL] res . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_docstring_on_hookspec ( self ) : [EOL] from _pytest import hookspec [EOL] [EOL] for name , value in vars ( hookspec ) . items ( ) : [EOL] if name . startswith ( [string] ) : [EOL] assert value . __doc__ , [string] % name [EOL] [EOL] def test_initialization_error_issue49 ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == [number] [comment] [EOL] result . stderr . fnmatch_lines ( [ [string] , [string] ] ) [EOL] assert [string] not in result . stderr . str ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] ] ) def test_issue134_report_error_when_collecting_member ( self , testdir , lookfor ) : [EOL] testdir . makepyfile ( test_fun = [string] ) [EOL] result = testdir . runpytest ( lookfor ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] if [string] in lookfor : [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] assert result . ret == [number] [comment] [EOL] [EOL] def test_report_all_failed_collections_initargs ( self , testdir ) : [EOL] testdir . makepyfile ( test_a = [string] , test_b = [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stderr . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) def test_namespace_import_doesnt_confuse_import_hook ( self , testdir ) : [EOL] [docstring] [EOL] testdir . mkdir ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p . basename ) [EOL] assert res . ret == [number] [EOL] [EOL] def test_unknown_option ( self , testdir ) : [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stderr . fnmatch_lines ( [string] ) [EOL] [EOL] def test_getsourcelines_error_issue553 ( self , testdir , monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , None ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p ) [EOL] res . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_plugins_given_as_strings ( self , tmpdir , monkeypatch ) : [EOL] [docstring] [EOL] with pytest . raises ( ImportError ) as excinfo : [EOL] pytest . main ( [ str ( tmpdir ) ] , plugins = [ [string] ] ) [EOL] assert [string] in str ( excinfo . value ) [EOL] [EOL] p = tmpdir . join ( [string] ) [EOL] p . write ( [string] ) [EOL] mod = types . ModuleType ( [string] ) [EOL] monkeypatch . setitem ( sys . modules , [string] , mod ) [EOL] assert pytest . main ( args = [ str ( tmpdir ) ] , plugins = [ [string] ] ) == [number] [EOL] [EOL] def test_parametrized_with_bytes_regex ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p ) [EOL] res . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_parametrized_with_null_bytes ( self , testdir ) : [EOL] [docstring] [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( p ) [EOL] res . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] class TestInvocationVariants ( object ) : [EOL] [EOL] def test_earlyinit ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpython ( p ) [EOL] assert result . ret == [number] [EOL] [EOL] @ pytest . mark . xfail ( [string] ) def test_pydoc ( self , testdir ) : [EOL] for name in ( [string] , [string] ) : [EOL] result = testdir . runpython_c ( [string] % ( name , name ) ) [EOL] assert result . ret == [number] [EOL] s = result . stdout . str ( ) [EOL] assert [string] in s [EOL] [EOL] def test_import_star_py_dot_test ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpython ( p ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_import_star_pytest ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpython ( p ) [EOL] assert result . ret == [number] [EOL] [EOL] def test_double_pytestcmdline ( self , testdir ) : [EOL] p = testdir . makepyfile ( run = [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpython ( p ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_python_minus_m_invocation_ok ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] res = testdir . run ( sys . executable , [string] , [string] , str ( p1 ) ) [EOL] assert res . ret == [number] [EOL] [EOL] def test_python_minus_m_invocation_fail ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] res = testdir . run ( sys . executable , [string] , [string] , str ( p1 ) ) [EOL] assert res . ret == [number] [EOL] [EOL] def test_python_pytest_package ( self , testdir ) : [EOL] p1 = testdir . makepyfile ( [string] ) [EOL] res = testdir . run ( sys . executable , [string] , [string] , str ( p1 ) ) [EOL] assert res . ret == [number] [EOL] res . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_equivalence_pytest_pytest ( self ) : [EOL] assert pytest . main == py . test . cmdline . main [EOL] [EOL] def test_invoke_with_string ( self , capsys ) : [EOL] retcode = pytest . main ( [string] ) [EOL] assert not retcode [EOL] out , err = capsys . readouterr ( ) [EOL] assert [string] in out [EOL] pytest . raises ( ValueError , lambda : pytest . main ( [number] ) ) [EOL] [EOL] def test_invoke_with_path ( self , tmpdir , capsys ) : [EOL] retcode = pytest . main ( tmpdir ) [EOL] assert retcode == EXIT_NOTESTSCOLLECTED [EOL] out , err = capsys . readouterr ( ) [EOL] [EOL] def test_invoke_plugin_api ( self , testdir , capsys ) : [EOL] [EOL] class MyPlugin ( object ) : [EOL] [EOL] def pytest_addoption ( self , parser ) : [EOL] parser . addoption ( [string] ) [EOL] [EOL] pytest . main ( [ [string] ] , plugins = [ MyPlugin ( ) ] ) [EOL] out , err = capsys . readouterr ( ) [EOL] assert [string] in out [EOL] [EOL] def test_pyargs_importerror ( self , testdir , monkeypatch ) : [EOL] monkeypatch . delenv ( [string] , False ) [EOL] path = testdir . mkpydir ( [string] ) [EOL] path . join ( [string] ) . write ( [string] ) [EOL] [EOL] result = testdir . runpytest ( [string] , [string] , syspathinsert = True ) [EOL] assert result . ret != [number] [EOL] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_cmdline_python_package ( self , testdir , monkeypatch ) : [EOL] import warnings [EOL] [EOL] monkeypatch . delenv ( [string] , False ) [EOL] path = testdir . mkpydir ( [string] ) [EOL] path . join ( [string] ) . write ( [string] ) [EOL] path . join ( [string] ) . write ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] result = testdir . runpytest ( [string] , [string] , syspathinsert = True ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def join_pythonpath ( what ) : [EOL] cur = os . environ . get ( [string] ) [EOL] if cur : [EOL] return str ( what ) + os . pathsep + cur [EOL] return what [EOL] [EOL] empty_package = testdir . mkpydir ( [string] ) [EOL] monkeypatch . setenv ( [string] , join_pythonpath ( empty_package ) ) [EOL] [comment] [EOL] [comment] [EOL] with warnings . catch_warnings ( ) : [EOL] warnings . simplefilter ( [string] , ImportWarning ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] monkeypatch . setenv ( [string] , join_pythonpath ( testdir ) ) [EOL] result = testdir . runpytest ( [string] , [string] , syspathinsert = True ) [EOL] assert result . ret != [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_cmdline_python_namespace_package ( self , testdir , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . delenv ( [string] , raising = False ) [EOL] [EOL] search_path = [ ] [EOL] for dirname in [string] , [string] : [EOL] d = testdir . mkdir ( dirname ) [EOL] search_path . append ( d ) [EOL] ns = d . mkdir ( [string] ) [EOL] ns . join ( [string] ) . write ( [string] ) [EOL] lib = ns . mkdir ( dirname ) [EOL] lib . ensure ( [string] ) [EOL] lib . join ( [string] . format ( dirname ) ) . write ( [string] [string] . format ( dirname ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def join_pythonpath ( * dirs ) : [EOL] cur = os . environ . get ( [string] ) [EOL] if cur : [EOL] dirs += ( cur , ) [EOL] return os . pathsep . join ( str ( p ) for p in dirs ) [EOL] [EOL] monkeypatch . setenv ( [string] , join_pythonpath ( * search_path ) ) [EOL] for p in search_path : [EOL] monkeypatch . syspath_prepend ( p ) [EOL] [EOL] [comment] [EOL] os . chdir ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [comment] [EOL] testdir . chdir ( ) [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] @ pytest . mark . skipif ( not hasattr ( os , [string] ) , reason = [string] ) def test_cmdline_python_package_symlink ( self , testdir , monkeypatch ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] if sys . platform == [string] : [EOL] try : [EOL] os . symlink ( str ( testdir . tmpdir . ensure ( [string] ) ) , str ( testdir . tmpdir . join ( [string] ) ) , ) [EOL] except OSError as e : [EOL] pytest . skip ( six . text_type ( e . args [ [number] ] ) ) [EOL] monkeypatch . delenv ( [string] , raising = False ) [EOL] [EOL] search_path = [ [string] , os . path . join ( [string] , [string] ) ] [EOL] [EOL] dirname = [string] [EOL] d = testdir . mkdir ( dirname ) [EOL] foo = d . mkdir ( [string] ) [EOL] foo . ensure ( [string] ) [EOL] lib = foo . mkdir ( [string] ) [EOL] lib . ensure ( [string] ) [EOL] lib . join ( [string] ) . write ( [string] [string] ) [EOL] lib . join ( [string] ) . write ( [string] [string] [string] ) [EOL] [EOL] d_local = testdir . mkdir ( [string] ) [EOL] symlink_location = os . path . join ( str ( d_local ) , [string] ) [EOL] if six . PY2 : [EOL] os . symlink ( str ( d ) , symlink_location ) [EOL] else : [EOL] os . symlink ( str ( d ) , symlink_location , target_is_directory = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def join_pythonpath ( * dirs ) : [EOL] cur = os . getenv ( [string] ) [EOL] if cur : [EOL] dirs += ( cur , ) [EOL] return os . pathsep . join ( str ( p ) for p in dirs ) [EOL] [EOL] monkeypatch . setenv ( [string] , join_pythonpath ( * search_path ) ) [EOL] for p in search_path : [EOL] monkeypatch . syspath_prepend ( p ) [EOL] [EOL] [comment] [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] testdir . chdir ( ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] def test_cmdline_python_package_not_exists ( self , testdir ) : [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) def test_noclass_discovery_if_not_testcase ( self , testdir ) : [EOL] testpath = testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( testpath ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_doctest_id ( self , testdir ) : [EOL] testdir . makefile ( [string] , [string] , ) [EOL] result = testdir . runpytest ( [string] ) [EOL] lines = result . stdout . str ( ) . splitlines ( ) [EOL] for line in lines : [EOL] if line . startswith ( [string] ) : [EOL] testid = line [ [number] : ] . strip ( ) [EOL] break [EOL] result = testdir . runpytest ( testid , [string] ) [EOL] result . stdout . fnmatch_lines ( [ line , [string] ] ) [EOL] [EOL] def test_core_backward_compatibility ( self ) : [EOL] [docstring] [EOL] import _pytest . config [EOL] [EOL] assert type ( _pytest . config . get_plugin_manager ( ) ) is _pytest . config . PytestPluginManager [EOL] [EOL] def test_has_plugin ( self , request ) : [EOL] [docstring] [EOL] assert request . config . pluginmanager . hasplugin ( [string] ) [EOL] [EOL] [EOL] class TestDurations ( object ) : [EOL] source = [string] [EOL] [EOL] def test_calls ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines_random ( [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] def test_calls_show_2 ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] lines = result . stdout . get_lines_after ( [string] ) [EOL] assert [string] in lines [ [number] ] [EOL] [EOL] def test_calls_showall ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] for x in [string] : [EOL] for y in ( [string] , ) : [comment] [EOL] for line in result . stdout . lines : [EOL] if ( [string] % x ) in line and y in line : [EOL] break [EOL] else : [EOL] raise AssertionError ( [string] % ( x , y ) ) [EOL] [EOL] def test_with_deselected ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_with_failing_collection ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] testdir . makepyfile ( test_collecterror = [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] def test_with_not ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] [EOL] [EOL] class TestDurationWithFixture ( object ) : [EOL] source = [string] [EOL] [EOL] def test_setup_function ( self , testdir ) : [EOL] testdir . makepyfile ( self . source ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == [number] [EOL] [EOL] result . stdout . fnmatch_lines_random ( [string] ) [EOL] [EOL] [EOL] def test_zipimport_hook ( testdir , tmpdir ) : [EOL] [docstring] [EOL] zipapp = pytest . importorskip ( [string] ) [EOL] testdir . tmpdir . join ( [string] ) . ensure ( dir = [number] ) [EOL] testdir . makepyfile ( ** { [string] : [string] } ) [EOL] target = tmpdir . join ( [string] ) [EOL] zipapp . create_archive ( str ( testdir . tmpdir . join ( [string] ) ) , str ( target ) , main = [string] ) [EOL] result = testdir . runpython ( target ) [EOL] assert result . ret == [number] [EOL] result . stderr . fnmatch_lines ( [ [string] ] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_import_plugin_unicode_name ( testdir ) : [EOL] testdir . makepyfile ( myplugin = [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] testdir . makeconftest ( [string] ) [EOL] r = testdir . runpytest ( ) [EOL] assert r . ret == [number] [EOL] [EOL] [EOL] def test_deferred_hook_checking ( testdir ) : [EOL] [docstring] [EOL] testdir . syspathinsert ( ) [EOL] testdir . makepyfile ( ** { [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_fixture_values_leak ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_fixture_order_respects_scope ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == [number] [EOL] [EOL] [EOL] def test_frame_leak_on_failing_test ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest_subprocess ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $_importlib_modulespec.ModuleType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_importlib_modulespec.ModuleType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any
from typing import Any , List [EOL] import typing [EOL] from __future__ import absolute_import , division , print_function [EOL] from textwrap import dedent [EOL] [EOL] import _pytest . _code [EOL] import py [EOL] import pytest [EOL] from _pytest . config import PytestPluginManager [EOL] from _pytest . main import EXIT_NOTESTSCOLLECTED , EXIT_USAGEERROR [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = [ [string] , [string] ] ) def basedir ( request , tmpdir_factory ) : [EOL] from _pytest . tmpdir import tmpdir [EOL] [EOL] tmpdir = tmpdir ( request , tmpdir_factory ) [EOL] tmpdir . ensure ( [string] ) . write ( [string] ) [EOL] tmpdir . ensure ( [string] ) . write ( [string] ) [EOL] if request . param == [string] : [EOL] tmpdir . ensure ( [string] ) [EOL] tmpdir . ensure ( [string] ) [EOL] return tmpdir [EOL] [EOL] [EOL] def ConftestWithSetinitial ( path ) : [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , [ path ] ) [EOL] return conftest [EOL] [EOL] [EOL] def conftest_setinitial ( conftest , args , confcutdir = None ) : [EOL] [EOL] class Namespace ( object ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . file_or_dir = args [EOL] self . confcutdir = str ( confcutdir ) [EOL] self . noconftest = False [EOL] [EOL] conftest . _set_initial_conftests ( Namespace ( ) ) [EOL] [EOL] [EOL] class TestConftestValueAccessGlobal ( object ) : [EOL] [EOL] def test_basic_init ( self , basedir ) : [EOL] conftest = PytestPluginManager ( ) [EOL] p = basedir . join ( [string] ) [EOL] assert conftest . _rget_with_confmod ( [string] , p ) [ [number] ] == [number] [EOL] [EOL] def test_immediate_initialiation_and_incremental_are_the_same ( self , basedir ) : [EOL] conftest = PytestPluginManager ( ) [EOL] len ( conftest . _path2confmods ) [EOL] conftest . _getconftestmodules ( basedir ) [EOL] snap1 = len ( conftest . _path2confmods ) [EOL] [comment] [EOL] conftest . _getconftestmodules ( basedir . join ( [string] ) ) [EOL] assert len ( conftest . _path2confmods ) == snap1 + [number] [EOL] conftest . _getconftestmodules ( basedir . join ( [string] ) ) [EOL] assert len ( conftest . _path2confmods ) == snap1 + [number] [EOL] [EOL] def test_value_access_not_existing ( self , basedir ) : [EOL] conftest = ConftestWithSetinitial ( basedir ) [EOL] with pytest . raises ( KeyError ) : [EOL] conftest . _rget_with_confmod ( [string] , basedir ) [EOL] [EOL] def test_value_access_by_path ( self , basedir ) : [EOL] conftest = ConftestWithSetinitial ( basedir ) [EOL] adir = basedir . join ( [string] ) [EOL] assert conftest . _rget_with_confmod ( [string] , adir ) [ [number] ] == [number] [EOL] assert conftest . _rget_with_confmod ( [string] , adir . join ( [string] ) ) [ [number] ] == [number] [EOL] [EOL] def test_value_access_with_confmod ( self , basedir ) : [EOL] startdir = basedir . join ( [string] , [string] ) [EOL] startdir . ensure ( [string] , dir = True ) [EOL] conftest = ConftestWithSetinitial ( startdir ) [EOL] mod , value = conftest . _rget_with_confmod ( [string] , startdir ) [EOL] assert value == [number] [EOL] path = py . path . local ( mod . __file__ ) [EOL] assert path . dirpath ( ) == basedir . join ( [string] , [string] ) [EOL] assert path . purebasename . startswith ( [string] ) [EOL] [EOL] [EOL] def test_conftest_in_nonpkg_with_init ( tmpdir ) : [EOL] tmpdir . ensure ( [string] ) . write ( [string] ) [EOL] tmpdir . ensure ( [string] ) . write ( [string] ) [EOL] tmpdir . ensure ( [string] ) [EOL] tmpdir . ensure ( [string] ) [EOL] ConftestWithSetinitial ( tmpdir . join ( [string] , [string] ) ) [EOL] [EOL] [EOL] def test_doubledash_considered ( testdir ) : [EOL] conf = testdir . mkdir ( [string] ) [EOL] conf . ensure ( [string] ) [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , [ conf . basename , conf . basename ] ) [EOL] values = conftest . _getconftestmodules ( conf ) [EOL] assert len ( values ) == [number] [EOL] [EOL] [EOL] def test_issue151_load_all_conftests ( testdir ) : [EOL] names = [string] . split ( ) [EOL] for name in names : [EOL] p = testdir . mkdir ( name ) [EOL] p . ensure ( [string] ) [EOL] [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , names ) [EOL] d = list ( conftest . _conftestpath2mod . values ( ) ) [EOL] assert len ( d ) == len ( names ) [EOL] [EOL] [EOL] def test_conftest_global_import ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] res = testdir . runpython ( p ) [EOL] assert res . ret == [number] [EOL] [EOL] [EOL] def test_conftestcutdir ( testdir ) : [EOL] conf = testdir . makeconftest ( [string] ) [EOL] p = testdir . mkdir ( [string] ) [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , [ testdir . tmpdir ] , confcutdir = p ) [EOL] values = conftest . _getconftestmodules ( p ) [EOL] assert len ( values ) == [number] [EOL] values = conftest . _getconftestmodules ( conf . dirpath ( ) ) [EOL] assert len ( values ) == [number] [EOL] assert conf not in conftest . _conftestpath2mod [EOL] [comment] [EOL] conftest . _importconftest ( conf ) [EOL] values = conftest . _getconftestmodules ( conf . dirpath ( ) ) [EOL] assert values [ [number] ] . __file__ . startswith ( str ( conf ) ) [EOL] [comment] [EOL] values = conftest . _getconftestmodules ( p ) [EOL] assert len ( values ) == [number] [EOL] assert values [ [number] ] . __file__ . startswith ( str ( conf ) ) [EOL] [EOL] [EOL] def test_conftestcutdir_inplace_considered ( testdir ) : [EOL] conf = testdir . makeconftest ( [string] ) [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , [ conf . dirpath ( ) ] , confcutdir = conf . dirpath ( ) ) [EOL] values = conftest . _getconftestmodules ( conf . dirpath ( ) ) [EOL] assert len ( values ) == [number] [EOL] assert values [ [number] ] . __file__ . startswith ( str ( conf ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [string] . split ( ) ) def test_setinitial_conftest_subdirs ( testdir , name ) : [EOL] sub = testdir . mkdir ( name ) [EOL] subconftest = sub . ensure ( [string] ) [EOL] conftest = PytestPluginManager ( ) [EOL] conftest_setinitial ( conftest , [ sub . dirpath ( ) ] , confcutdir = testdir . tmpdir ) [EOL] if name not in ( [string] , [string] ) : [EOL] assert subconftest in conftest . _conftestpath2mod [EOL] assert len ( conftest . _conftestpath2mod ) == [number] [EOL] else : [EOL] assert subconftest not in conftest . _conftestpath2mod [EOL] assert len ( conftest . _conftestpath2mod ) == [number] [EOL] [EOL] [EOL] def test_conftest_confcutdir ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] x = testdir . mkdir ( [string] ) [EOL] x . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpytest ( [string] , [string] % x , x ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] [EOL] [EOL] def test_no_conftest ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == EXIT_USAGEERROR [EOL] [EOL] [EOL] def test_conftest_existing_resultlog ( testdir ) : [EOL] x = testdir . mkdir ( [string] ) [EOL] x . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] testdir . makefile ( ext = [string] , result = [string] ) [comment] [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_conftest_existing_junitxml ( testdir ) : [EOL] x = testdir . mkdir ( [string] ) [EOL] x . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] testdir . makefile ( ext = [string] , junit = [string] ) [comment] [EOL] result = testdir . runpytest ( [string] , [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_conftest_import_order ( testdir , monkeypatch ) : [EOL] ct1 = testdir . makeconftest ( [string] ) [EOL] sub = testdir . mkdir ( [string] ) [EOL] ct2 = sub . join ( [string] ) [EOL] ct2 . write ( [string] ) [EOL] [EOL] def impct ( p ) : [EOL] return p [EOL] [EOL] conftest = PytestPluginManager ( ) [EOL] conftest . _confcutdir = testdir . tmpdir [EOL] monkeypatch . setattr ( conftest , [string] , impct ) [EOL] assert conftest . _getconftestmodules ( sub ) == [ ct1 , ct2 ] [EOL] [EOL] [EOL] def test_fixture_dependency ( testdir , monkeypatch ) : [EOL] ct1 = testdir . makeconftest ( [string] ) [EOL] ct1 = testdir . makepyfile ( [string] ) [EOL] ct1 . write ( [string] ) [EOL] sub = testdir . mkdir ( [string] ) [EOL] sub . join ( [string] ) . write ( [string] ) [EOL] sub . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] subsub = sub . mkdir ( [string] ) [EOL] subsub . join ( [string] ) . write ( [string] ) [EOL] subsub . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_conftest_found_with_double_dash ( testdir ) : [EOL] sub = testdir . mkdir ( [string] ) [EOL] sub . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] p = sub . join ( [string] ) [EOL] p . write ( [string] ) [EOL] result = testdir . runpytest ( str ( p ) + [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] [EOL] class TestConftestVisibility ( object ) : [EOL] [EOL] def _setup_tree ( self , testdir ) : [comment] [EOL] [comment] [EOL] [comment] [EOL] runner = testdir . mkdir ( [string] ) [EOL] package = testdir . mkdir ( [string] ) [EOL] [EOL] package . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] package . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] [EOL] swc = package . mkdir ( [string] ) [EOL] swc . join ( [string] ) . ensure ( ) [EOL] swc . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] swc . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] [EOL] snc = package . mkdir ( [string] ) [EOL] snc . join ( [string] ) . ensure ( ) [EOL] snc . join ( [string] ) . write ( dedent ( [string] ) ) [EOL] print ( [string] ) [EOL] for x in testdir . tmpdir . visit ( ) : [EOL] print ( [string] + x . relto ( testdir . tmpdir ) ) [EOL] [EOL] return { [string] : runner , [string] : package , [string] : swc , [string] : snc } [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ( [string] , [string] , [number] ) , ] , ) @ pytest . mark . issue616 def test_parsefactories_relative_node_ids ( self , testdir , chdir , testarg , expect_ntests_passed ) : [EOL] dirs = self . _setup_tree ( testdir ) [EOL] print ( [string] % ( dirs [ chdir ] . relto ( testdir . tmpdir ) ) ) [EOL] print ( [string] % (testarg) ) [EOL] print ( [string] % (expect_ntests_passed) ) [EOL] with dirs [ chdir ] . as_cwd ( ) : [EOL] reprec = testdir . inline_run ( testarg , [string] , [string] ) [EOL] reprec . assertoutcome ( passed = expect_ntests_passed ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( None , [number] , [number] ) ] ) def test_search_conftest_up_to_inifile ( testdir , confcutdir , passed , error ) : [EOL] [docstring] [EOL] root = testdir . tmpdir [EOL] src = root . join ( [string] ) . ensure ( dir = [number] ) [EOL] src . join ( [string] ) . write ( [string] ) [EOL] src . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] src . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] root . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] [EOL] args = [ str ( src ) ] [EOL] if confcutdir : [EOL] args = [ [string] % root . join ( confcutdir ) ] [EOL] result = testdir . runpytest ( * args ) [EOL] match = [string] [EOL] if passed : [EOL] match += [string] % passed [EOL] if error : [EOL] match += [string] % error [EOL] result . stdout . fnmatch_lines ( match ) [EOL] [EOL] [EOL] def test_issue1073_conftest_special_objects ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( ) [EOL] assert res . ret == [number] [EOL] [EOL] [EOL] def test_conftest_exception_handling ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] res = testdir . runpytest ( ) [EOL] assert res . ret == [number] [EOL] assert [string] in [ line . strip ( ) for line in res . errlines ] [EOL] [EOL] [EOL] def test_hook_proxy ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( ** { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_required_option_help ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] x = testdir . mkdir ( [string] ) [EOL] x . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpytest ( [string] , x ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] assert [string] in result . stdout . str ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import py [EOL] import subprocess [EOL] import sys [EOL] import pytest [EOL] import _pytest [EOL] [EOL] MODSET = [ x for x in py . path . local ( _pytest . __file__ ) . dirpath ( ) . visit ( [string] ) if x . purebasename != [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , MODSET , ids = lambda x : x . purebasename ) def test_fileimport ( modfile ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] res = subprocess . call ( [ sys . executable , [string] , [string] , modfile . strpath , ] ) [EOL] if res : [EOL] pytest . fail ( [string] % res ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] if __name__ == [string] : [EOL] import sys [EOL] import pytest [EOL] [EOL] sys . exit ( pytest . main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] if __name__ == [string] : [EOL] import os [EOL] import sys [EOL] [EOL] executable = os . path . join ( os . getcwd ( ) , [string] , [string] , [string] ) [EOL] if sys . platform . startswith ( [string] ) : [EOL] executable += [string] [EOL] sys . exit ( os . system ( [string] % executable ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
def test_upper ( ) : [EOL] assert [string] . upper ( ) == [string] [EOL] [EOL] [EOL] def test_lower ( ) : [EOL] assert [string] . lower ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import tools [EOL] import sys [EOL] [EOL] import _pytest . _code [EOL] [EOL] [EOL] def test_getstartingblock_multiline ( ) : [EOL] [docstring] [EOL] [EOL] class A ( object ) : [EOL] [EOL] def __init__ ( self , * args ) : [EOL] frame = sys . _getframe ( [number] ) [EOL] self . source = _pytest . _code . Frame ( frame ) . statement [EOL] [EOL] [comment] [EOL] x = A ( [string] , [string] , [string] ) [EOL] [comment] [EOL] values = [ i for i in x . source . lines if i . strip ( ) ] [EOL] assert len ( values ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Union , Type , Tuple , Any , Literal , Dict [EOL] import typing_extensions [EOL] import typing [EOL] import tools [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import operator [EOL] import os [EOL] import sys [EOL] import _pytest [EOL] import py [EOL] import pytest [EOL] from _pytest . _code . code import ( ExceptionInfo , FormattedExcinfo , ReprExceptionInfo , ExceptionChainRepr , ) [EOL] from six . moves import queue [EOL] [EOL] from test_source import astonly [EOL] [EOL] try : [EOL] import importlib [EOL] except ImportError : [EOL] invalidate_import_caches = None [EOL] else : [EOL] invalidate_import_caches = getattr ( importlib , [string] , None ) [EOL] [EOL] failsonjython = pytest . mark . xfail ( [string] ) [EOL] [EOL] pytest_version_info = tuple ( map ( int , pytest . __version__ . split ( [string] ) [ : [number] ] ) ) [EOL] [EOL] [EOL] class TWMock ( object ) : [EOL] WRITE = object ( ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . lines = [ ] [EOL] self . is_writing = False [EOL] [EOL] def sep ( self , sep , line = None ) : [EOL] self . lines . append ( ( sep , line ) ) [EOL] [EOL] def write ( self , msg , ** kw ) : [EOL] self . lines . append ( ( TWMock . WRITE , msg ) ) [EOL] [EOL] def line ( self , line , ** kw ) : [EOL] self . lines . append ( line ) [EOL] [EOL] def markup ( self , text , ** kw ) : [EOL] return text [EOL] [EOL] def get_write_msg ( self , idx ) : [EOL] flag , msg = self . lines [ idx ] [EOL] assert flag == TWMock . WRITE [EOL] return msg [EOL] [EOL] fullwidth = [number] [EOL] [EOL] [EOL] def test_excinfo_simple ( ) : [EOL] try : [EOL] raise ValueError [EOL] except ValueError : [EOL] info = _pytest . _code . ExceptionInfo ( ) [EOL] assert info . type == ValueError [EOL] [EOL] [EOL] def test_excinfo_getstatement ( ) : [EOL] [EOL] def g ( ) : [EOL] raise ValueError [EOL] [EOL] def f ( ) : [EOL] g ( ) [EOL] [EOL] try : [EOL] f ( ) [EOL] except ValueError : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] linenumbers = [ _pytest . _code . getrawcode ( f ) . co_firstlineno - [number] + [number] , _pytest . _code . getrawcode ( f ) . co_firstlineno - [number] + [number] , _pytest . _code . getrawcode ( g ) . co_firstlineno - [number] + [number] , ] [EOL] values = list ( excinfo . traceback ) [EOL] foundlinenumbers = [ x . lineno for x in values ] [EOL] assert foundlinenumbers == linenumbers [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def f ( ) : [EOL] [comment] [EOL] raise ValueError [EOL] [comment] [EOL] [EOL] [EOL] def g ( ) : [EOL] [comment] [EOL] __tracebackhide__ = True [EOL] f ( ) [EOL] [comment] [EOL] [EOL] [EOL] def h ( ) : [EOL] [comment] [EOL] g ( ) [EOL] [comment] [EOL] [EOL] [EOL] class TestTraceback_f_g_h ( object ) : [EOL] [EOL] def setup_method ( self , method ) : [EOL] try : [EOL] h ( ) [EOL] except ValueError : [EOL] self . excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] [EOL] def test_traceback_entries ( self ) : [EOL] tb = self . excinfo . traceback [EOL] entries = list ( tb ) [EOL] assert len ( tb ) == [number] [comment] [EOL] assert len ( entries ) == [number] [comment] [EOL] names = [ [string] , [string] , [string] ] [EOL] for entry in entries : [EOL] try : [EOL] names . remove ( entry . frame . code . name ) [EOL] except ValueError : [EOL] pass [EOL] assert not names [EOL] [EOL] def test_traceback_entry_getsource ( self ) : [EOL] tb = self . excinfo . traceback [EOL] s = str ( tb [ - [number] ] . getsource ( ) ) [EOL] assert s . startswith ( [string] ) [EOL] assert s . endswith ( [string] ) [EOL] [EOL] @ astonly @ failsonjython def test_traceback_entry_getsource_in_construct ( self ) : [EOL] source = _pytest . _code . Source ( [string] ) [EOL] try : [EOL] exec ( source . compile ( ) ) [EOL] except NameError : [EOL] tb = _pytest . _code . ExceptionInfo ( ) . traceback [EOL] print ( tb [ - [number] ] . getsource ( ) ) [EOL] s = str ( tb [ - [number] ] . getsource ( ) ) [EOL] assert s . startswith ( [string] ) [EOL] assert s . strip ( ) . endswith ( [string] ) [EOL] [EOL] def test_traceback_cut ( self ) : [EOL] co = _pytest . _code . Code ( f ) [EOL] path , firstlineno = co . path , co . firstlineno [EOL] traceback = self . excinfo . traceback [EOL] newtraceback = traceback . cut ( path = path , firstlineno = firstlineno ) [EOL] assert len ( newtraceback ) == [number] [EOL] newtraceback = traceback . cut ( path = path , lineno = firstlineno + [number] ) [EOL] assert len ( newtraceback ) == [number] [EOL] [EOL] def test_traceback_cut_excludepath ( self , testdir ) : [EOL] p = testdir . makepyfile ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , [string] ) [EOL] basedir = py . path . local ( pytest . __file__ ) . dirpath ( ) [EOL] newtraceback = excinfo . traceback . cut ( excludepath = basedir ) [EOL] for x in newtraceback : [EOL] if hasattr ( x , [string] ) : [EOL] assert not py . path . local ( x . path ) . relto ( basedir ) [EOL] assert newtraceback [ - [number] ] . frame . code . path == p [EOL] [EOL] def test_traceback_filter ( self ) : [EOL] traceback = self . excinfo . traceback [EOL] ntraceback = traceback . filter ( ) [EOL] assert len ( ntraceback ) == len ( traceback ) - [number] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( lambda info : True , True ) , ( lambda info : False , False ) , ( operator . methodcaller ( [string] , ValueError ) , True ) , ( operator . methodcaller ( [string] , IndexError ) , False ) , ] , ) def test_traceback_filter_selective ( self , tracebackhide , matching ) : [EOL] [EOL] def f ( ) : [EOL] [comment] [EOL] raise ValueError [EOL] [comment] [EOL] [EOL] def g ( ) : [EOL] [comment] [EOL] __tracebackhide__ = tracebackhide [EOL] f ( ) [EOL] [comment] [EOL] [EOL] def h ( ) : [EOL] [comment] [EOL] g ( ) [EOL] [comment] [EOL] [EOL] excinfo = pytest . raises ( ValueError , h ) [EOL] traceback = excinfo . traceback [EOL] ntraceback = traceback . filter ( ) [EOL] print ( [string] . format ( traceback ) ) [EOL] print ( [string] . format ( ntraceback ) ) [EOL] [EOL] if matching : [EOL] assert len ( ntraceback ) == len ( traceback ) - [number] [EOL] else : [EOL] [comment] [EOL] assert len ( ntraceback ) == len ( traceback ) - [number] [EOL] [EOL] def test_traceback_recursion_index ( self ) : [EOL] [EOL] def f ( n ) : [EOL] if n < [number] : [EOL] n += [number] [EOL] f ( n ) [EOL] [EOL] excinfo = pytest . raises ( RuntimeError , f , [number] ) [EOL] traceback = excinfo . traceback [EOL] recindex = traceback . recursionindex ( ) [EOL] assert recindex == [number] [EOL] [EOL] def test_traceback_only_specific_recursion_errors ( self , monkeypatch ) : [EOL] [EOL] def f ( n ) : [EOL] if n == [number] : [EOL] raise RuntimeError ( [string] ) [EOL] f ( n - [number] ) [EOL] [EOL] excinfo = pytest . raises ( RuntimeError , f , [number] ) [EOL] monkeypatch . delattr ( excinfo . traceback . __class__ , [string] ) [EOL] repr = excinfo . getrepr ( ) [EOL] assert [string] in str ( repr . reprcrash ) [EOL] [EOL] def test_traceback_no_recursion_index ( self ) : [EOL] [EOL] def do_stuff ( ) : [EOL] raise RuntimeError [EOL] [EOL] def reraise_me ( ) : [EOL] import sys [EOL] [EOL] exc , val , tb = sys . exc_info ( ) [EOL] py . builtin . _reraise ( exc , val , tb ) [EOL] [EOL] def f ( n ) : [EOL] try : [EOL] do_stuff ( ) [EOL] except : [comment] [EOL] reraise_me ( ) [EOL] [EOL] excinfo = pytest . raises ( RuntimeError , f , [number] ) [EOL] traceback = excinfo . traceback [EOL] recindex = traceback . recursionindex ( ) [EOL] assert recindex is None [EOL] [EOL] def test_traceback_messy_recursion ( self ) : [EOL] [comment] [EOL] decorator = pytest . importorskip ( [string] ) . decorator [EOL] [EOL] def log ( f , * k , ** kw ) : [EOL] print ( [string] % ( k , kw ) ) [EOL] f ( * k , ** kw ) [EOL] [EOL] log = decorator ( log ) [EOL] [EOL] def fail ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] fail = log ( log ( fail ) ) [EOL] [EOL] excinfo = pytest . raises ( ValueError , fail ) [EOL] assert excinfo . traceback . recursionindex ( ) is None [EOL] [EOL] def test_traceback_getcrashentry ( self ) : [EOL] [EOL] def i ( ) : [EOL] __tracebackhide__ = True [EOL] raise ValueError [EOL] [EOL] def h ( ) : [EOL] i ( ) [EOL] [EOL] def g ( ) : [EOL] __tracebackhide__ = True [EOL] h ( ) [EOL] [EOL] def f ( ) : [EOL] g ( ) [EOL] [EOL] excinfo = pytest . raises ( ValueError , f ) [EOL] tb = excinfo . traceback [EOL] entry = tb . getcrashentry ( ) [EOL] co = _pytest . _code . Code ( h ) [EOL] assert entry . frame . code . path == co . path [EOL] assert entry . lineno == co . firstlineno + [number] [EOL] assert entry . frame . code . name == [string] [EOL] [EOL] def test_traceback_getcrashentry_empty ( self ) : [EOL] [EOL] def g ( ) : [EOL] __tracebackhide__ = True [EOL] raise ValueError [EOL] [EOL] def f ( ) : [EOL] __tracebackhide__ = True [EOL] g ( ) [EOL] [EOL] excinfo = pytest . raises ( ValueError , f ) [EOL] tb = excinfo . traceback [EOL] entry = tb . getcrashentry ( ) [EOL] co = _pytest . _code . Code ( g ) [EOL] assert entry . frame . code . path == co . path [EOL] assert entry . lineno == co . firstlineno + [number] [EOL] assert entry . frame . code . name == [string] [EOL] [EOL] [EOL] def test_excinfo_exconly ( ) : [EOL] excinfo = pytest . raises ( ValueError , h ) [EOL] assert excinfo . exconly ( ) . startswith ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , [string] ) [EOL] msg = excinfo . exconly ( tryshort = True ) [EOL] assert msg . startswith ( [string] ) [EOL] assert msg . endswith ( [string] ) [EOL] [EOL] [EOL] def test_excinfo_repr ( ) : [EOL] excinfo = pytest . raises ( ValueError , h ) [EOL] s = repr ( excinfo ) [EOL] assert s == [string] [EOL] [EOL] [EOL] def test_excinfo_str ( ) : [EOL] excinfo = pytest . raises ( ValueError , h ) [EOL] s = str ( excinfo ) [EOL] assert s . startswith ( __file__ [ : - [number] ] ) [comment] [EOL] assert s . endswith ( [string] ) [EOL] assert len ( s . split ( [string] ) ) >= [number] [comment] [EOL] [EOL] [EOL] def test_excinfo_errisinstance ( ) : [EOL] excinfo = pytest . raises ( ValueError , h ) [EOL] assert excinfo . errisinstance ( ValueError ) [EOL] [EOL] [EOL] def test_excinfo_no_sourcecode ( ) : [EOL] try : [EOL] exec ( [string] ) [EOL] except ValueError : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] s = str ( excinfo . traceback [ - [number] ] ) [EOL] assert s == [string] [EOL] [EOL] [EOL] def test_excinfo_no_python_sourcecode ( tmpdir ) : [EOL] [comment] [EOL] tmpdir . join ( [string] ) . write ( [string] ) [EOL] [EOL] jinja2 = pytest . importorskip ( [string] ) [EOL] loader = jinja2 . FileSystemLoader ( str ( tmpdir ) ) [EOL] env = jinja2 . Environment ( loader = loader ) [EOL] template = env . get_template ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , template . render , h = h ) [EOL] for item in excinfo . traceback : [EOL] print ( item ) [comment] [EOL] item . source [comment] [EOL] if item . path . basename == [string] : [EOL] assert str ( item . source ) == [string] [EOL] [EOL] [EOL] def test_entrysource_Queue_example ( ) : [EOL] try : [EOL] queue . Queue ( ) . get ( timeout = [number] ) [EOL] except queue . Empty : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] entry = excinfo . traceback [ - [number] ] [EOL] source = entry . getsource ( ) [EOL] assert source is not None [EOL] s = str ( source ) . strip ( ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] [EOL] def test_codepath_Queue_example ( ) : [EOL] try : [EOL] queue . Queue ( ) . get ( timeout = [number] ) [EOL] except queue . Empty : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] entry = excinfo . traceback [ - [number] ] [EOL] path = entry . path [EOL] assert isinstance ( path , py . path . local ) [EOL] assert path . basename . lower ( ) == [string] [EOL] assert path . check ( ) [EOL] [EOL] [EOL] def test_match_succeeds ( ) : [EOL] with pytest . raises ( ZeroDivisionError ) as excinfo : [EOL] [number] // [number] [EOL] excinfo . match ( [string] ) [EOL] [EOL] [EOL] def test_match_raises_error ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret != [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] class TestFormattedExcinfo ( object ) : [EOL] [EOL] @ pytest . fixture def importasmod ( self , request ) : [EOL] [EOL] def importasmod ( source ) : [EOL] source = _pytest . _code . Source ( source ) [EOL] tmpdir = request . getfixturevalue ( [string] ) [EOL] modpath = tmpdir . join ( [string] ) [EOL] tmpdir . ensure ( [string] ) [EOL] modpath . write ( source ) [EOL] if invalidate_import_caches is not None : [EOL] invalidate_import_caches ( ) [EOL] return modpath . pyimport ( ) [EOL] [EOL] return importasmod [EOL] [EOL] def excinfo_from_exec ( self , source ) : [EOL] source = _pytest . _code . Source ( source ) . strip ( ) [EOL] try : [EOL] exec ( source . compile ( ) ) [EOL] except KeyboardInterrupt : [EOL] raise [EOL] except : [comment] [EOL] return _pytest . _code . ExceptionInfo ( ) [EOL] assert [number] , [string] [EOL] [EOL] def test_repr_source ( self ) : [EOL] pr = FormattedExcinfo ( ) [EOL] source = _pytest . _code . Source ( [string] ) . strip ( ) [EOL] pr . flow_marker = [string] [EOL] lines = pr . get_source ( source , [number] ) [EOL] assert len ( lines ) == [number] [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] [EOL] def test_repr_source_excinfo ( self ) : [EOL] [docstring] [EOL] pr = FormattedExcinfo ( ) [EOL] excinfo = self . excinfo_from_exec ( [string] ) [EOL] pr = FormattedExcinfo ( ) [EOL] source = pr . _getentrysource ( excinfo . traceback [ - [number] ] ) [EOL] lines = pr . get_source ( source , [number] , excinfo ) [EOL] assert lines == [ [string] , [string] , [string] ] [EOL] [EOL] def test_repr_source_not_existing ( self ) : [EOL] pr = FormattedExcinfo ( ) [EOL] co = compile ( [string] , [string] , [string] ) [EOL] try : [EOL] exec ( co ) [EOL] except ValueError : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] repr = pr . repr_excinfo ( excinfo ) [EOL] assert repr . reprtraceback . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert repr . chain [ [number] ] [ [number] ] . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] [EOL] def test_repr_many_line_source_not_existing ( self ) : [EOL] pr = FormattedExcinfo ( ) [EOL] co = compile ( [string] , [string] , [string] , ) [EOL] try : [EOL] exec ( co ) [EOL] except ValueError : [EOL] excinfo = _pytest . _code . ExceptionInfo ( ) [EOL] repr = pr . repr_excinfo ( excinfo ) [EOL] assert repr . reprtraceback . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert repr . chain [ [number] ] [ [number] ] . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] [EOL] def test_repr_source_failing_fullsource ( self ) : [EOL] pr = FormattedExcinfo ( ) [EOL] [EOL] class FakeCode ( object ) : [EOL] [EOL] class raw ( object ) : [EOL] co_filename = [string] [EOL] [EOL] path = [string] [EOL] firstlineno = [number] [EOL] [EOL] def fullsource ( self ) : [EOL] return None [EOL] [EOL] fullsource = property ( fullsource ) [EOL] [EOL] class FakeFrame ( object ) : [EOL] code = FakeCode ( ) [EOL] f_locals = { } [EOL] f_globals = { } [EOL] [EOL] class FakeTracebackEntry ( _pytest . _code . Traceback . Entry ) : [EOL] [EOL] def __init__ ( self , tb , excinfo = None ) : [EOL] self . lineno = [number] + [number] [EOL] [EOL] @ property def frame ( self ) : [EOL] return FakeFrame ( ) [EOL] [EOL] class Traceback ( _pytest . _code . Traceback ) : [EOL] Entry = FakeTracebackEntry [EOL] [EOL] class FakeExcinfo ( _pytest . _code . ExceptionInfo ) : [EOL] typename = [string] [EOL] value = Exception ( ) [EOL] [EOL] def __init__ ( self ) : [EOL] pass [EOL] [EOL] def exconly ( self , tryshort ) : [EOL] return [string] [EOL] [EOL] def errisinstance ( self , cls ) : [EOL] return False [EOL] [EOL] excinfo = FakeExcinfo ( ) [EOL] [EOL] class FakeRawTB ( object ) : [EOL] tb_next = None [EOL] [EOL] tb = FakeRawTB ( ) [EOL] excinfo . traceback = Traceback ( tb ) [EOL] [EOL] fail = IOError ( ) [EOL] repr = pr . repr_excinfo ( excinfo ) [EOL] assert repr . reprtraceback . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert repr . chain [ [number] ] [ [number] ] . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] [EOL] fail = py . error . ENOENT [comment] [EOL] repr = pr . repr_excinfo ( excinfo ) [EOL] assert repr . reprtraceback . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert repr . chain [ [number] ] [ [number] ] . reprentries [ [number] ] . lines [ [number] ] == [string] [EOL] [EOL] def test_repr_local ( self ) : [EOL] p = FormattedExcinfo ( showlocals = True ) [EOL] loc = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : { } } [EOL] reprlocals = p . repr_locals ( loc ) [EOL] assert reprlocals . lines [EOL] assert reprlocals . lines [ [number] ] == [string] [EOL] assert reprlocals . lines [ [number] ] == [string] [EOL] assert reprlocals . lines [ [number] ] == [string] [EOL] assert reprlocals . lines [ [number] ] == [string] [EOL] [EOL] def test_repr_tracebackentry_lines ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . func1 ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] p = FormattedExcinfo ( ) [EOL] reprtb = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] ) [EOL] [EOL] [comment] [EOL] lines = reprtb . lines [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] [EOL] [comment] [EOL] p = FormattedExcinfo ( showlocals = True ) [EOL] repr_entry = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] , excinfo ) [EOL] lines = repr_entry . lines [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] assert not lines [ [number] : ] [EOL] [EOL] loc = repr_entry . reprlocals is not None [EOL] loc = repr_entry . reprfileloc [EOL] assert loc . path == mod . __file__ [EOL] assert loc . lineno == [number] [EOL] [comment] [EOL] [EOL] def test_repr_tracebackentry_lines2 ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . func1 , [string] * [number] , [number] , [number] , [string] * [number] ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] entry = excinfo . traceback [ - [number] ] [EOL] p = FormattedExcinfo ( funcargs = True ) [EOL] reprfuncargs = p . repr_args ( entry ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , repr ( [string] * [number] ) ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , [string] ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , [string] ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , repr ( [string] * [number] ) ) [EOL] [EOL] p = FormattedExcinfo ( funcargs = True ) [EOL] repr_entry = p . repr_traceback_entry ( entry ) [EOL] assert repr_entry . reprfuncargs . args == reprfuncargs . args [EOL] tw = TWMock ( ) [EOL] repr_entry . toterminal ( tw ) [EOL] assert tw . lines [ [number] ] == [string] + repr ( [string] * [number] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] + repr ( [string] * [number] ) [EOL] [EOL] def test_repr_tracebackentry_lines_var_kw_args ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . func1 , [string] , [string] , c = [string] ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] entry = excinfo . traceback [ - [number] ] [EOL] p = FormattedExcinfo ( funcargs = True ) [EOL] reprfuncargs = p . repr_args ( entry ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , repr ( [string] ) ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , repr ( ( [string] , ) ) ) [EOL] assert reprfuncargs . args [ [number] ] == ( [string] , repr ( { [string] : [string] } ) ) [EOL] [EOL] p = FormattedExcinfo ( funcargs = True ) [EOL] repr_entry = p . repr_traceback_entry ( entry ) [EOL] assert repr_entry . reprfuncargs . args == reprfuncargs . args [EOL] tw = TWMock ( ) [EOL] repr_entry . toterminal ( tw ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] def test_repr_tracebackentry_short ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] reprtb = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] ) [EOL] lines = reprtb . lines [EOL] basename = py . path . local ( mod . __file__ ) . basename [EOL] assert lines [ [number] ] == [string] [EOL] assert basename in str ( reprtb . reprfileloc . path ) [EOL] assert reprtb . reprfileloc . lineno == [number] [EOL] [EOL] [comment] [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] reprtb = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] , excinfo ) [EOL] lines = reprtb . lines [EOL] assert lines [ [number] ] == [string] [EOL] assert lines [ [number] ] == [string] [EOL] assert basename in str ( reprtb . reprfileloc . path ) [EOL] assert reprtb . reprfileloc . lineno == [number] [EOL] [EOL] def test_repr_tracebackentry_no ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] p . repr_traceback_entry ( excinfo . traceback [ - [number] ] ) [EOL] [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] reprentry = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] , excinfo ) [EOL] lines = reprentry . lines [EOL] assert lines [ [number] ] == [string] [EOL] assert not lines [ [number] : ] [EOL] [EOL] def test_repr_traceback_tbfilter ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] p = FormattedExcinfo ( tbfilter = True ) [EOL] reprtb = p . repr_traceback ( excinfo ) [EOL] assert len ( reprtb . reprentries ) == [number] [EOL] p = FormattedExcinfo ( tbfilter = False ) [EOL] reprtb = p . repr_traceback ( excinfo ) [EOL] assert len ( reprtb . reprentries ) == [number] [EOL] [EOL] def test_traceback_short_no_source ( self , importasmod , monkeypatch ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] from _pytest . _code . code import Code [EOL] [EOL] monkeypatch . setattr ( Code , [string] , [string] ) [EOL] excinfo . traceback [ [number] ] . frame . code . path = [string] [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] reprtb = p . repr_traceback_entry ( excinfo . traceback [ - [number] ] ) [EOL] lines = reprtb . lines [EOL] last_p = FormattedExcinfo ( style = [string] ) [EOL] last_reprtb = last_p . repr_traceback_entry ( excinfo . traceback [ - [number] ] , excinfo ) [EOL] last_lines = last_reprtb . lines [EOL] monkeypatch . undo ( ) [EOL] assert lines [ [number] ] == [string] [EOL] [EOL] assert last_lines [ [number] ] == [string] [EOL] assert last_lines [ [number] ] == [string] [EOL] [EOL] def test_repr_traceback_and_excinfo ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] [EOL] for style in ( [string] , [string] ) : [EOL] p = FormattedExcinfo ( style = style ) [EOL] reprtb = p . repr_traceback ( excinfo ) [EOL] assert len ( reprtb . reprentries ) == [number] [EOL] assert reprtb . style == style [EOL] assert not reprtb . extraline [EOL] repr = p . repr_excinfo ( excinfo ) [EOL] assert repr . reprtraceback [EOL] assert len ( repr . reprtraceback . reprentries ) == len ( reprtb . reprentries ) [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert repr . chain [ [number] ] [ [number] ] [EOL] assert len ( repr . chain [ [number] ] [ [number] ] . reprentries ) == len ( reprtb . reprentries ) [EOL] assert repr . reprcrash . path . endswith ( [string] ) [EOL] assert repr . reprcrash . message == [string] [EOL] [EOL] def test_repr_traceback_with_invalid_cwd ( self , importasmod , monkeypatch ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] [EOL] p = FormattedExcinfo ( ) [EOL] [EOL] def raiseos ( ) : [EOL] raise OSError ( [number] ) [EOL] [EOL] monkeypatch . setattr ( os , [string] , raiseos ) [EOL] assert p . _makepath ( __file__ ) == __file__ [EOL] p . repr_traceback ( excinfo ) [EOL] [EOL] def test_repr_excinfo_addouterr ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] repr = excinfo . getrepr ( ) [EOL] repr . addsection ( [string] , [string] ) [EOL] twmock = TWMock ( ) [EOL] repr . toterminal ( twmock ) [EOL] assert twmock . lines [ - [number] ] == [string] [EOL] assert twmock . lines [ - [number] ] == ( [string] , [string] ) [EOL] [EOL] def test_repr_excinfo_reprcrash ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] repr = excinfo . getrepr ( ) [EOL] assert repr . reprcrash . path . endswith ( [string] ) [EOL] assert repr . reprcrash . lineno == [number] [EOL] assert repr . reprcrash . message == [string] [EOL] assert str ( repr . reprcrash ) . endswith ( [string] ) [EOL] [EOL] def test_repr_traceback_recursion ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( RuntimeError , mod . entry ) [EOL] [EOL] for style in ( [string] , [string] , [string] ) : [EOL] p = FormattedExcinfo ( style = [string] ) [EOL] reprtb = p . repr_traceback ( excinfo ) [EOL] assert reprtb . extraline == [string] [EOL] assert str ( reprtb ) [EOL] [EOL] def test_reprexcinfo_getrepr ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . entry ) [EOL] [EOL] for style in ( [string] , [string] , [string] ) : [EOL] for showlocals in ( True , False ) : [EOL] repr = excinfo . getrepr ( style = style , showlocals = showlocals ) [EOL] if sys . version_info [ [number] ] < [number] : [EOL] assert isinstance ( repr , ReprExceptionInfo ) [EOL] assert repr . reprtraceback . style == style [EOL] if sys . version_info [ [number] ] >= [number] : [EOL] assert isinstance ( repr , ExceptionChainRepr ) [EOL] for repr in repr . chain : [EOL] assert repr [ [number] ] . style == style [EOL] [EOL] def test_reprexcinfo_unicode ( self ) : [EOL] from _pytest . _code . code import TerminalRepr [EOL] [EOL] class MyRepr ( TerminalRepr ) : [EOL] [EOL] def toterminal ( self , tw ) : [EOL] tw . line ( py . builtin . _totext ( [string] , [string] ) ) [EOL] [EOL] x = py . builtin . _totext ( MyRepr ( ) ) [EOL] assert x == py . builtin . _totext ( [string] , [string] ) [EOL] [EOL] def test_toterminal_long ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] repr = excinfo . getrepr ( ) [EOL] tw = TWMock ( ) [EOL] repr . toterminal ( tw ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] tw . lines . pop ( [number] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == ( [string] ) [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] def test_toterminal_long_missing_source ( self , importasmod , tmpdir ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] tmpdir . join ( [string] ) . remove ( ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] repr = excinfo . getrepr ( ) [EOL] tw = TWMock ( ) [EOL] repr . toterminal ( tw ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] tw . lines . pop ( [number] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] def test_toterminal_long_incomplete_source ( self , importasmod , tmpdir ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] tmpdir . join ( [string] ) . write ( [string] ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] repr = excinfo . getrepr ( ) [EOL] tw = TWMock ( ) [EOL] repr . toterminal ( tw ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] tw . lines . pop ( [number] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] def test_toterminal_long_filenames ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] tw = TWMock ( ) [EOL] path = py . path . local ( mod . __file__ ) [EOL] old = path . dirpath ( ) . chdir ( ) [EOL] try : [EOL] repr = excinfo . getrepr ( abspath = False ) [EOL] repr . toterminal ( tw ) [EOL] x = py . path . local ( ) . bestrelpath ( path ) [EOL] if len ( x ) < len ( str ( path ) ) : [EOL] msg = tw . get_write_msg ( - [number] ) [EOL] assert msg == [string] [EOL] assert tw . lines [ - [number] ] == [string] [EOL] [EOL] repr = excinfo . getrepr ( abspath = True ) [EOL] repr . toterminal ( tw ) [EOL] msg = tw . get_write_msg ( - [number] ) [EOL] assert msg == path [EOL] line = tw . lines [ - [number] ] [EOL] assert line == [string] [EOL] finally : [EOL] old . chdir ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { [string] : style , [string] : showlocals , [string] : funcargs , [string] : tbfilter , } for style in ( [string] , [string] , [string] ) for showlocals in ( True , False ) for tbfilter in ( True , False ) for funcargs in ( True , False ) ] , ) def test_format_excinfo ( self , importasmod , reproptions ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] tw = py . io . TerminalWriter ( stringio = True ) [EOL] repr = excinfo . getrepr ( ** reproptions ) [EOL] repr . toterminal ( tw ) [EOL] assert tw . stringio . getvalue ( ) [EOL] [EOL] def test_traceback_repr_style ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( ValueError , mod . f ) [EOL] excinfo . traceback = excinfo . traceback . filter ( ) [EOL] excinfo . traceback [ [number] ] . set_repr_style ( [string] ) [EOL] excinfo . traceback [ [number] ] . set_repr_style ( [string] ) [EOL] r = excinfo . getrepr ( style = [string] ) [EOL] tw = TWMock ( ) [EOL] r . toterminal ( tw ) [EOL] for line in tw . lines : [EOL] print ( line ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] msg = tw . get_write_msg ( [number] ) [EOL] assert msg . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] tw . get_write_msg ( [number] ) [EOL] assert tw . lines [ [number] ] . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] tw . get_write_msg ( [number] ) [EOL] assert tw . lines [ [number] ] . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] msg = tw . get_write_msg ( [number] ) [EOL] msg . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] @ pytest . mark . skipif ( [string] ) def test_exc_chain_repr ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( AttributeError , mod . f ) [EOL] r = excinfo . getrepr ( style = [string] ) [EOL] tw = TWMock ( ) [EOL] r . toterminal ( tw ) [EOL] for line in tw . lines : [EOL] print ( line ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert ( tw . lines [ [number] ] == [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert ( tw . lines [ [number] ] == [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == ( [string] , None ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] [EOL] @ pytest . mark . skipif ( [string] ) def test_exc_repr_with_raise_from_none_chain_suppression ( self , importasmod ) : [EOL] mod = importasmod ( [string] ) [EOL] excinfo = pytest . raises ( AttributeError , mod . f ) [EOL] r = excinfo . getrepr ( style = [string] ) [EOL] tw = TWMock ( ) [EOL] r . toterminal ( tw ) [EOL] for line in tw . lines : [EOL] print ( line ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert tw . lines [ [number] ] == [string] [EOL] line = tw . get_write_msg ( [number] ) [EOL] assert line . endswith ( [string] ) [EOL] assert tw . lines [ [number] ] == [string] [EOL] assert len ( tw . lines ) == [number] [EOL] [EOL] @ pytest . mark . skipif ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] , ) , ( [string] , [string] , ) , ] , ) def test_exc_chain_repr_without_traceback ( self , importasmod , reason , description ) : [EOL] [docstring] [EOL] from _pytest . pytester import LineMatcher [EOL] [EOL] exc_handling_code = [string] if reason == [string] else [string] [EOL] mod = importasmod ( [string] . format ( exc_handling_code = exc_handling_code ) ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as excinfo : [EOL] mod . f ( ) [EOL] [EOL] [comment] [EOL] attr = [string] % reason [EOL] getattr ( excinfo . value , attr ) . __traceback__ = None [EOL] [EOL] r = excinfo . getrepr ( ) [EOL] tw = py . io . TerminalWriter ( stringio = True ) [EOL] tw . hasmarkup = False [EOL] r . toterminal ( tw ) [EOL] [EOL] matcher = LineMatcher ( tw . stringio . getvalue ( ) . splitlines ( ) ) [EOL] matcher . fnmatch_lines ( [ [string] , description , [string] , [string] + exc_handling_code , [string] , ] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ None , [string] , [string] ] ) def test_repr_traceback_with_unicode ( style , encoding ) : [EOL] msg = [string] [EOL] if encoding is not None : [EOL] msg = msg . encode ( encoding ) [EOL] try : [EOL] raise RuntimeError ( msg ) [EOL] except RuntimeError : [EOL] e_info = ExceptionInfo ( ) [EOL] formatter = FormattedExcinfo ( style = style ) [EOL] repr_traceback = formatter . repr_traceback ( e_info ) [EOL] assert repr_traceback is not None [EOL] [EOL] [EOL] def test_cwd_deleted ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] assert [string] not in result . stdout . str ( ) + result . stderr . str ( ) [EOL] [EOL] [EOL] def test_exception_repr_extraction_error_on_recursion ( ) : [EOL] [docstring] [EOL] [EOL] class numpy_like ( object ) : [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if type ( other ) is numpy_like : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] def a ( x ) : [EOL] return b ( numpy_like ( ) ) [EOL] [EOL] def b ( x ) : [EOL] return a ( numpy_like ( ) ) [EOL] [EOL] try : [EOL] a ( numpy_like ( ) ) [EOL] except : [comment] [EOL] from _pytest . _code . code import ExceptionInfo [EOL] from _pytest . pytester import LineMatcher [EOL] [EOL] exc_info = ExceptionInfo ( ) [EOL] [EOL] matcher = LineMatcher ( str ( exc_info . getrepr ( ) ) . splitlines ( ) ) [EOL] matcher . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] def test_no_recursion_index_on_recursion_error ( ) : [EOL] [docstring] [EOL] try : [EOL] [EOL] class RecursionDepthError ( object ) : [EOL] [EOL] def __getattr__ ( self , attr ) : [EOL] return getattr ( self , [string] + attr ) [EOL] [EOL] RecursionDepthError ( ) . trigger [EOL] except : [comment] [EOL] from _pytest . _code . code import ExceptionInfo [EOL] [EOL] exc_info = ExceptionInfo ( ) [EOL] assert [string] in str ( exc_info . getrepr ( ) ) [EOL] else : [EOL] assert [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeCode$ 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeFrame]$ 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeFrame]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeTracebackEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.Exception$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeExcinfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeRawTB]$ 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeRawTB$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeExcinfo$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeRawTB$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeExcinfo$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TestFormattedExcinfo.test_repr_source_failing_fullsource.FakeExcinfo$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.int]]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.testing.code.test_excinfo.TWMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_show_fixtures_and_test ( testdir ) : [EOL] [docstring] [EOL] p = testdir . makepyfile ( [string] ) [EOL] [EOL] result = testdir . runpytest ( [string] , p ) [EOL] assert result . ret == [number] [EOL] [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] from textwrap import dedent [EOL] [EOL] import _pytest . _code [EOL] import pytest [EOL] from _pytest . main import EXIT_NOTESTSCOLLECTED [EOL] from _pytest . nodes import Collector [EOL] [EOL] ignore_parametrized_marks = pytest . mark . filterwarnings ( [string] ) [EOL] [EOL] [EOL] class TestModule ( object ) : [EOL] [EOL] def test_failing_import ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] pytest . raises ( Collector . CollectError , modcol . collect ) [EOL] [EOL] def test_import_duplicate ( self , testdir ) : [EOL] a = testdir . mkdir ( [string] ) [EOL] b = testdir . mkdir ( [string] ) [EOL] p = a . ensure ( [string] ) [EOL] p . pyimport ( ) [EOL] del sys . modules [ [string] ] [EOL] b . ensure ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] % a . join ( [string] ) , [string] , [string] % b . join ( [string] ) , [string] , ] ) [EOL] [EOL] def test_import_prepend_append ( self , testdir , monkeypatch ) : [EOL] syspath = list ( sys . path ) [EOL] monkeypatch . setattr ( sys , [string] , syspath ) [EOL] root1 = testdir . mkdir ( [string] ) [EOL] root2 = testdir . mkdir ( [string] ) [EOL] root1 . ensure ( [string] ) [EOL] root2 . ensure ( [string] ) [EOL] p = root2 . join ( [string] ) [EOL] monkeypatch . syspath_prepend ( str ( root1 ) ) [EOL] p . write ( dedent ( [string] % str ( root2 ) ) ) [EOL] with root2 . as_cwd ( ) : [EOL] reprec = testdir . inline_run ( [string] ) [EOL] reprec . assertoutcome ( passed = [number] , failed = [number] ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_syntax_error_in_module ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] pytest . raises ( modcol . CollectError , modcol . collect ) [EOL] pytest . raises ( modcol . CollectError , modcol . collect ) [EOL] [EOL] def test_module_considers_pluginmanager_at_import ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] pytest . raises ( ImportError , lambda : modcol . obj ) [EOL] [EOL] def test_invalid_test_module_name ( self , testdir ) : [EOL] a = testdir . mkdir ( [string] ) [EOL] a . ensure ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , ] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) def test_show_traceback_import_error ( self , testdir , verbose ) : [EOL] [docstring] [EOL] testdir . makepyfile ( foo_traceback_import_error = [string] , bar_traceback_import_error = [string] , ) [EOL] testdir . makepyfile ( [string] ) [EOL] args = ( [string] , ) * verbose [EOL] result = testdir . runpytest ( * args ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] , ] ) [EOL] assert result . ret == [number] [EOL] [EOL] stdout = result . stdout . str ( ) [EOL] for name in ( [string] , os . path . join ( [string] , [string] ) ) : [EOL] if verbose == [number] : [EOL] assert name in stdout [EOL] else : [EOL] assert name not in stdout [EOL] [EOL] def test_show_traceback_import_error_unicode ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] assert result . ret == [number] [EOL] [EOL] [EOL] class TestClass ( object ) : [EOL] [EOL] def test_class_with_init_warning ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_class_subclassobject ( self , testdir ) : [EOL] testdir . getmodulecol ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_static_method ( self , testdir ) : [EOL] [docstring] [EOL] testdir . getmodulecol ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_setup_teardown_class_as_classmethod ( self , testdir ) : [EOL] testdir . makepyfile ( test_mod1 = [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_issue1035_obj_has_getattr ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert len ( colitems ) == [number] [EOL] [EOL] def test_issue1579_namedtuple ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [string] [string] ) [EOL] [EOL] def test_issue2234_property ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] [EOL] [EOL] class TestGenerator ( object ) : [EOL] [EOL] def test_generative_functions ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert len ( colitems ) == [number] [EOL] gencol = colitems [ [number] ] [EOL] assert isinstance ( gencol , pytest . Generator ) [EOL] gencolitems = gencol . collect ( ) [EOL] assert len ( gencolitems ) == [number] [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] [EOL] def test_generative_methods ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] gencol = modcol . collect ( ) [ [number] ] . collect ( ) [ [number] ] . collect ( ) [ [number] ] [EOL] assert isinstance ( gencol , pytest . Generator ) [EOL] gencolitems = gencol . collect ( ) [EOL] assert len ( gencolitems ) == [number] [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] [EOL] def test_generative_functions_with_explicit_names ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert len ( colitems ) == [number] [EOL] gencol = colitems [ [number] ] [EOL] assert isinstance ( gencol , pytest . Generator ) [EOL] gencolitems = gencol . collect ( ) [EOL] assert len ( gencolitems ) == [number] [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] [EOL] def test_generative_functions_unique_explicit_names ( self , testdir ) : [EOL] [comment] [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert len ( colitems ) == [number] [EOL] gencol = colitems [ [number] ] [EOL] assert isinstance ( gencol , pytest . Generator ) [EOL] pytest . raises ( ValueError , [string] ) [EOL] [EOL] def test_generative_methods_with_explicit_names ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] gencol = modcol . collect ( ) [ [number] ] . collect ( ) [ [number] ] . collect ( ) [ [number] ] [EOL] assert isinstance ( gencol , pytest . Generator ) [EOL] gencolitems = gencol . collect ( ) [EOL] assert len ( gencolitems ) == [number] [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert isinstance ( gencolitems [ [number] ] , pytest . Function ) [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] assert gencolitems [ [number] ] . name == [string] [EOL] assert gencolitems [ [number] ] . obj . __name__ == [string] [EOL] [EOL] def test_order_of_execution_generator_same_codeline ( self , testdir , tmpdir ) : [EOL] o = testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( o ) [EOL] passed , skipped , failed = reprec . countoutcomes ( ) [EOL] assert passed == [number] [EOL] assert not skipped and not failed [EOL] [EOL] def test_order_of_execution_generator_different_codeline ( self , testdir ) : [EOL] o = testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( o ) [EOL] passed , skipped , failed = reprec . countoutcomes ( ) [EOL] assert passed == [number] [EOL] assert not skipped and not failed [EOL] [EOL] def test_setupstate_is_preserved_134 ( self , testdir ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] o = testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( o , [string] ) [EOL] passed , skipped , failed = reprec . countoutcomes ( ) [EOL] assert passed == [number] [EOL] assert not skipped and not failed [EOL] [EOL] [EOL] class TestFunction ( object ) : [EOL] [EOL] def test_getmodulecollector ( self , testdir ) : [EOL] item = testdir . getitem ( [string] ) [EOL] modcol = item . getparent ( pytest . Module ) [EOL] assert isinstance ( modcol , pytest . Module ) [EOL] assert hasattr ( modcol . obj , [string] ) [EOL] [EOL] def test_function_as_object_instance_ignored ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( ) [EOL] [EOL] def test_function_equality ( self , testdir , tmpdir ) : [EOL] from _pytest . fixtures import FixtureManager [EOL] [EOL] config = testdir . parseconfigure ( ) [EOL] session = testdir . Session ( config ) [EOL] session . _fixturemanager = FixtureManager ( session ) [EOL] [EOL] def func1 ( ) : [EOL] pass [EOL] [EOL] def func2 ( ) : [EOL] pass [EOL] [EOL] f1 = pytest . Function ( name = [string] , parent = session , config = config , args = ( [number] , ) , callobj = func1 ) [EOL] assert f1 == f1 [EOL] f2 = pytest . Function ( name = [string] , config = config , callobj = func2 , parent = session ) [EOL] assert f1 != f2 [EOL] [EOL] def test_issue197_parametrize_emptyset ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( skipped = [number] ) [EOL] [EOL] def test_single_tuple_unwraps_values ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_issue213_parametrize_value_no_equal ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] reprec = testdir . inline_run ( [string] ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_parametrize_with_non_hashable_values ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] rec = testdir . inline_run ( ) [EOL] rec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_parametrize_with_non_hashable_values_indirect ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] rec = testdir . inline_run ( ) [EOL] rec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_parametrize_overrides_fixture ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] rec = testdir . inline_run ( ) [EOL] rec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_parametrize_overrides_parametrized_fixture ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] rec = testdir . inline_run ( ) [EOL] rec . assertoutcome ( passed = [number] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_with_mark ( self , testdir ) : [EOL] items = testdir . getitems ( [string] ) [EOL] keywords = [ item . keywords for item in items ] [EOL] assert ( [string] in keywords [ [number] ] [EOL] and [string] not in keywords [ [number] ] [EOL] and [string] not in keywords [ [number] ] ) [EOL] assert [string] in keywords [ [number] ] and [string] in keywords [ [number] ] and [string] in keywords [ [number] ] [EOL] [EOL] def test_function_equality_with_callspec ( self , testdir , tmpdir ) : [EOL] items = testdir . getitems ( [string] ) [EOL] assert items [ [number] ] != items [ [number] ] [EOL] assert not ( items [ [number] ] == items [ [number] ] ) [EOL] [EOL] def test_pyfunc_call ( self , testdir ) : [EOL] item = testdir . getitem ( [string] ) [EOL] config = item . config [EOL] [EOL] class MyPlugin1 ( object ) : [EOL] [EOL] def pytest_pyfunc_call ( self , pyfuncitem ) : [EOL] raise ValueError [EOL] [EOL] class MyPlugin2 ( object ) : [EOL] [EOL] def pytest_pyfunc_call ( self , pyfuncitem ) : [EOL] return True [EOL] [EOL] config . pluginmanager . register ( MyPlugin1 ( ) ) [EOL] config . pluginmanager . register ( MyPlugin2 ( ) ) [EOL] config . hook . pytest_runtest_setup ( item = item ) [EOL] config . hook . pytest_pyfunc_call ( pyfuncitem = item ) [EOL] [EOL] def test_multiple_parametrize ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] [EOL] def test_issue751_multiple_parametrize_with_ids ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [ [number] ] . collect ( ) [ [number] ] . collect ( ) [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] assert colitems [ [number] ] . name == [string] [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_skipif ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_skip ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_skipif_no_skip ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_xfail ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_passed ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] @ ignore_parametrized_marks def test_parametrize_xfail_passed ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] def test_function_original_name ( self , testdir ) : [EOL] items = testdir . getitems ( [string] ) [EOL] assert [ x . originalname for x in items ] == [ [string] , [string] ] [EOL] [EOL] [EOL] class TestSorting ( object ) : [EOL] [EOL] def test_check_equality ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] fn1 = testdir . collect_by_name ( modcol , [string] ) [EOL] assert isinstance ( fn1 , pytest . Function ) [EOL] fn2 = testdir . collect_by_name ( modcol , [string] ) [EOL] assert isinstance ( fn2 , pytest . Function ) [EOL] [EOL] assert fn1 == fn2 [EOL] assert fn1 != modcol [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] assert cmp ( fn1 , fn2 ) == [number] [comment] [EOL] assert hash ( fn1 ) == hash ( fn2 ) [EOL] [EOL] fn3 = testdir . collect_by_name ( modcol , [string] ) [EOL] assert isinstance ( fn3 , pytest . Function ) [EOL] assert not ( fn1 == fn3 ) [EOL] assert fn1 != fn3 [EOL] [EOL] for fn in fn1 , fn2 , fn3 : [EOL] assert fn != [number] [EOL] assert fn != modcol [EOL] assert fn != [ [number] , [number] , [number] ] [EOL] assert [ [number] , [number] , [number] ] != fn [EOL] assert modcol != fn [EOL] [EOL] def test_allow_sane_sorting_for_decorators ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] colitems = modcol . collect ( ) [EOL] assert len ( colitems ) == [number] [EOL] assert [ item . name for item in colitems ] == [ [string] , [string] ] [EOL] [EOL] [EOL] class TestConftestCustomization ( object ) : [EOL] [EOL] def test_pytest_pycollect_module ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] testdir . makepyfile ( test_xyz = [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_customized_pymakemodule_issue205_subdir ( self , testdir ) : [EOL] b = testdir . mkdir ( [string] ) . mkdir ( [string] ) [EOL] b . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] b . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_customized_pymakeitem ( self , testdir ) : [EOL] b = testdir . mkdir ( [string] ) . mkdir ( [string] ) [EOL] b . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] b . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] reprec = testdir . inline_run ( ) [EOL] reprec . assertoutcome ( passed = [number] ) [EOL] [EOL] def test_pytest_pycollect_makeitem ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] def test_makeitem_non_underscore ( self , testdir , monkeypatch ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] values = [ ] [EOL] monkeypatch . setattr ( pytest . Module , [string] , lambda self , name , obj : values . append ( name ) ) [EOL] values = modcol . collect ( ) [EOL] assert [string] not in values [EOL] [EOL] def test_issue2369_collect_module_fileext ( self , testdir ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makefile ( [string] , [string] , ) [EOL] [comment] [EOL] result = testdir . runpytest_subprocess ( ) [EOL] result . stdout . fnmatch_lines ( [string] ) [EOL] [EOL] [EOL] def test_setup_only_available_in_subdir ( testdir ) : [EOL] sub1 = testdir . mkpydir ( [string] ) [EOL] sub2 = testdir . mkpydir ( [string] ) [EOL] sub1 . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] sub2 . join ( [string] ) . write ( _pytest . _code . Source ( [string] ) ) [EOL] sub1 . join ( [string] ) . write ( [string] ) [EOL] sub2 . join ( [string] ) . write ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_modulecol_roundtrip ( testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] , withinit = True ) [EOL] trail = modcol . nodeid [EOL] newcol = modcol . session . perform_collect ( [ trail ] , genitems = [number] ) [ [number] ] [EOL] assert modcol . name == newcol . name [EOL] [EOL] [EOL] class TestTracebackCutting ( object ) : [EOL] [EOL] def test_skip_simple ( self ) : [EOL] excinfo = pytest . raises ( pytest . skip . Exception , [string] ) [EOL] assert excinfo . traceback [ - [number] ] . frame . code . name == [string] [EOL] assert excinfo . traceback [ - [number] ] . ishidden ( ) [EOL] [EOL] def test_traceback_argsetup ( self , testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( p ) [EOL] assert result . ret != [number] [EOL] out = result . stdout . str ( ) [EOL] assert [string] in out [EOL] assert [string] in out [EOL] numentries = out . count ( [string] ) [comment] [EOL] assert numentries == [number] [EOL] [EOL] result = testdir . runpytest ( [string] , p ) [EOL] out = result . stdout . str ( ) [EOL] assert [string] in out [EOL] numentries = out . count ( [string] ) [comment] [EOL] assert numentries > [number] [EOL] [EOL] def test_traceback_error_during_import ( self , testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret != [number] [EOL] out = result . stdout . str ( ) [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] out = result . stdout . str ( ) [EOL] assert [string] in out [EOL] assert [string] in out [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_traceback_filter_error_during_fixture_collection ( self , testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret != [number] [EOL] out = result . stdout . str ( ) [EOL] assert [string] not in out [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] ] ) [EOL] [EOL] def test_filter_traceback_generated_code ( self ) : [EOL] [docstring] [EOL] from _pytest . python import filter_traceback [EOL] [EOL] try : [EOL] ns = { } [EOL] exec ( [string] , ns ) [EOL] ns [ [string] ] ( ) [EOL] except ValueError : [EOL] _ , _ , tb = sys . exc_info ( ) [EOL] [EOL] tb = _pytest . _code . Traceback ( tb ) [EOL] assert isinstance ( tb [ - [number] ] . path , str ) [EOL] assert not filter_traceback ( tb [ - [number] ] ) [EOL] [EOL] def test_filter_traceback_path_no_longer_valid ( self , testdir ) : [EOL] [docstring] [EOL] from _pytest . python import filter_traceback [EOL] [EOL] testdir . syspathinsert ( ) [EOL] testdir . makepyfile ( filter_traceback_entry_as_str = [string] ) [EOL] try : [EOL] import filter_traceback_entry_as_str [EOL] [EOL] filter_traceback_entry_as_str . foo ( ) [EOL] except ValueError : [EOL] _ , _ , tb = sys . exc_info ( ) [EOL] [EOL] testdir . tmpdir . join ( [string] ) . remove ( ) [EOL] tb = _pytest . _code . Traceback ( tb ) [EOL] assert isinstance ( tb [ - [number] ] . path , str ) [EOL] assert filter_traceback ( tb [ - [number] ] ) [EOL] [EOL] [EOL] class TestReportInfo ( object ) : [EOL] [EOL] def test_itemreport_reportinfo ( self , testdir , linecomp ) : [EOL] testdir . makeconftest ( [string] ) [EOL] item = testdir . getitem ( [string] ) [EOL] item . config . pluginmanager . getplugin ( [string] ) [EOL] assert item . location == ( [string] , [number] , [string] ) [EOL] [EOL] def test_func_reportinfo ( self , testdir ) : [EOL] item = testdir . getitem ( [string] ) [EOL] fspath , lineno , modpath = item . reportinfo ( ) [EOL] assert fspath == item . fspath [EOL] assert lineno == [number] [EOL] assert modpath == [string] [EOL] [EOL] def test_class_reportinfo ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] classcol = testdir . collect_by_name ( modcol , [string] ) [EOL] fspath , lineno , msg = classcol . reportinfo ( ) [EOL] assert fspath == modcol . fspath [EOL] assert lineno == [number] [EOL] assert msg == [string] [EOL] [EOL] def test_generator_reportinfo ( self , testdir ) : [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] gencol = testdir . collect_by_name ( modcol , [string] ) [EOL] fspath , lineno , modpath = gencol . reportinfo ( ) [EOL] assert fspath == modcol . fspath [EOL] assert lineno == [number] [EOL] assert modpath == [string] [EOL] [EOL] genitem = gencol . collect ( ) [ [number] ] [EOL] fspath , lineno , modpath = genitem . reportinfo ( ) [EOL] assert fspath == modcol . fspath [EOL] assert lineno == [number] [EOL] assert modpath == [string] [EOL] [docstring] [EOL] [EOL] def test_reportinfo_with_nasty_getattr ( self , testdir ) : [EOL] [comment] [EOL] modcol = testdir . getmodulecol ( [string] ) [EOL] classcol = testdir . collect_by_name ( modcol , [string] ) [EOL] instance = classcol . collect ( ) [ [number] ] [EOL] fspath , lineno , msg = instance . reportinfo ( ) [EOL] [EOL] [EOL] def test_customized_python_discovery ( testdir ) : [EOL] testdir . makeini ( [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] p2 = p . new ( basename = p . basename . replace ( [string] , [string] ) ) [EOL] p . move ( p2 ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_customized_python_discovery_functions ( testdir ) : [EOL] testdir . makeini ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] , [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] result = testdir . runpytest ( ) [EOL] assert result . ret == [number] [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_collector_attributes ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_customize_through_attributes ( testdir ) : [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_unorderable_types ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] assert result . ret == EXIT_NOTESTSCOLLECTED [EOL] [EOL] [EOL] def test_collect_functools_partial ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . inline_run ( ) [EOL] result . assertoutcome ( passed = [number] , failed = [number] ) [EOL] [EOL] [EOL] def test_dont_collect_non_function_callable ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] def test_class_injection_does_not_break_collection ( testdir ) : [EOL] [docstring] [EOL] testdir . makeconftest ( [string] ) [EOL] testdir . makepyfile ( test_inject = [string] ) [EOL] result = testdir . runpytest ( ) [EOL] assert [string] not in result . stdout . str ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_syntax_error_with_non_ascii_chars ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_skip_duplicates_by_default ( testdir ) : [EOL] [docstring] [EOL] a = testdir . mkdir ( [string] ) [EOL] fh = a . join ( [string] ) [EOL] fh . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpytest ( a . strpath , a . strpath ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_keep_duplicates ( testdir ) : [EOL] [docstring] [EOL] a = testdir . mkdir ( [string] ) [EOL] fh = a . join ( [string] ) [EOL] fh . write ( _pytest . _code . Source ( [string] ) ) [EOL] result = testdir . runpytest ( [string] , a . strpath , a . strpath ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 $typing.list$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import py [EOL] [EOL] for i in range ( [number] ) : [EOL] py . builtin . exec_ ( [string] % i ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from six . moves import range [EOL] import pytest [EOL] [EOL] [EOL] SKIP = True [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , range ( [number] ) ) def test_foo ( x ) : [EOL] if SKIP : [EOL] pytest . skip ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0
[EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = range ( [number] ) ) def foo ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] def test_it ( foo ) : [EOL] pass [EOL] [EOL] [EOL] def test_it2 ( foo ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Tuple , OrderedDict , Any , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import collections [EOL] [docstring] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] from collections import OrderedDict [EOL] [EOL] import py [EOL] import six [EOL] [EOL] import pytest [EOL] import json [EOL] import os [EOL] from os . path import sep as _sep , altsep as _altsep [EOL] [EOL] [EOL] class Cache ( object ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . _cachedir = Cache . cache_dir_from_config ( config ) [EOL] self . trace = config . trace . root . get ( [string] ) [EOL] if config . getoption ( [string] ) : [EOL] self . trace ( [string] ) [EOL] if self . _cachedir . check ( ) : [EOL] self . _cachedir . remove ( ) [EOL] self . _cachedir . mkdir ( ) [EOL] [EOL] @ staticmethod def cache_dir_from_config ( config ) : [EOL] cache_dir = config . getini ( [string] ) [EOL] cache_dir = os . path . expanduser ( cache_dir ) [EOL] cache_dir = os . path . expandvars ( cache_dir ) [EOL] if os . path . isabs ( cache_dir ) : [EOL] return py . path . local ( cache_dir ) [EOL] else : [EOL] return config . rootdir . join ( cache_dir ) [EOL] [EOL] def makedir ( self , name ) : [EOL] [docstring] [EOL] if _sep in name or _altsep is not None and _altsep in name : [EOL] raise ValueError ( [string] ) [EOL] return self . _cachedir . ensure_dir ( [string] , name ) [EOL] [EOL] def _getvaluepath ( self , key ) : [EOL] return self . _cachedir . join ( [string] , * key . split ( [string] ) ) [EOL] [EOL] def get ( self , key , default ) : [EOL] [docstring] [EOL] path = self . _getvaluepath ( key ) [EOL] if path . check ( ) : [EOL] try : [EOL] with path . open ( [string] ) as f : [EOL] return json . load ( f ) [EOL] except ValueError : [EOL] self . trace ( [string] % ( path , ) ) [EOL] return default [EOL] [EOL] def set ( self , key , value ) : [EOL] [docstring] [EOL] path = self . _getvaluepath ( key ) [EOL] try : [EOL] path . dirpath ( ) . ensure_dir ( ) [EOL] except ( py . error . EEXIST , py . error . EACCES ) : [EOL] self . config . warn ( code = [string] , message = [string] % ( path , ) ) [EOL] return [EOL] try : [EOL] f = path . open ( [string] ) [EOL] except py . error . ENOTDIR : [EOL] self . config . warn ( code = [string] , message = [string] % ( path , ) ) [EOL] else : [EOL] with f : [EOL] self . trace ( [string] % ( key , value ) ) [EOL] json . dump ( value , f , indent = [number] , sort_keys = True ) [EOL] [EOL] [EOL] class LFPlugin ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] active_keys = [string] , [string] [EOL] self . active = any ( config . getoption ( key ) for key in active_keys ) [EOL] self . lastfailed = config . cache . get ( [string] , { } ) [EOL] self . _previously_failed_count = None [EOL] self . _no_failures_behavior = self . config . getoption ( [string] ) [EOL] [EOL] def pytest_report_collectionfinish ( self ) : [EOL] if self . active : [EOL] if not self . _previously_failed_count : [EOL] mode = [string] . format ( self . _no_failures_behavior ) [EOL] else : [EOL] noun = [string] if self . _previously_failed_count == [number] else [string] [EOL] suffix = [string] if self . config . getoption ( [string] ) else [string] [EOL] mode = [string] . format ( count = self . _previously_failed_count , suffix = suffix , noun = noun ) [EOL] return [string] % mode [EOL] [EOL] def pytest_runtest_logreport ( self , report ) : [EOL] if ( report . when == [string] and report . passed ) or report . skipped : [EOL] self . lastfailed . pop ( report . nodeid , None ) [EOL] elif report . failed : [EOL] self . lastfailed [ report . nodeid ] = True [EOL] [EOL] def pytest_collectreport ( self , report ) : [EOL] passed = report . outcome in ( [string] , [string] ) [EOL] if passed : [EOL] if report . nodeid in self . lastfailed : [EOL] self . lastfailed . pop ( report . nodeid ) [EOL] self . lastfailed . update ( ( item . nodeid , True ) for item in report . result ) [EOL] else : [EOL] self . lastfailed [ report . nodeid ] = True [EOL] [EOL] def pytest_collection_modifyitems ( self , session , config , items ) : [EOL] if self . active : [EOL] if self . lastfailed : [EOL] previously_failed = [ ] [EOL] previously_passed = [ ] [EOL] for item in items : [EOL] if item . nodeid in self . lastfailed : [EOL] previously_failed . append ( item ) [EOL] else : [EOL] previously_passed . append ( item ) [EOL] self . _previously_failed_count = len ( previously_failed ) [EOL] if not previously_failed : [EOL] [comment] [EOL] [comment] [EOL] return [EOL] if self . config . getoption ( [string] ) : [EOL] items [ : ] = previously_failed [EOL] config . hook . pytest_deselected ( items = previously_passed ) [EOL] else : [EOL] items [ : ] = previously_failed + previously_passed [EOL] elif self . _no_failures_behavior == [string] : [EOL] config . hook . pytest_deselected ( items = items ) [EOL] items [ : ] = [ ] [EOL] [EOL] def pytest_sessionfinish ( self , session ) : [EOL] config = self . config [EOL] if config . getoption ( [string] ) or hasattr ( config , [string] ) : [EOL] return [EOL] [EOL] saved_lastfailed = config . cache . get ( [string] , { } ) [EOL] if saved_lastfailed != self . lastfailed : [EOL] config . cache . set ( [string] , self . lastfailed ) [EOL] [EOL] [EOL] class NFPlugin ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . active = config . option . newfirst [EOL] self . cached_nodeids = config . cache . get ( [string] , [ ] ) [EOL] [EOL] def pytest_collection_modifyitems ( self , session , config , items ) : [EOL] if self . active : [EOL] new_items = OrderedDict ( ) [EOL] other_items = OrderedDict ( ) [EOL] for item in items : [EOL] if item . nodeid not in self . cached_nodeids : [EOL] new_items [ item . nodeid ] = item [EOL] else : [EOL] other_items [ item . nodeid ] = item [EOL] [EOL] items [ : ] = self . _get_increasing_order ( six . itervalues ( new_items ) ) + self . _get_increasing_order ( six . itervalues ( other_items ) ) [EOL] self . cached_nodeids = [ x . nodeid for x in items if isinstance ( x , pytest . Item ) ] [EOL] [EOL] def _get_increasing_order ( self , items ) : [EOL] return sorted ( items , key = lambda item : item . fspath . mtime ( ) , reverse = True ) [EOL] [EOL] def pytest_sessionfinish ( self , session ) : [EOL] config = self . config [EOL] if config . getoption ( [string] ) or hasattr ( config , [string] ) : [EOL] return [EOL] [EOL] config . cache . set ( [string] , self . cached_nodeids ) [EOL] [EOL] [EOL] def pytest_addoption ( parser ) : [EOL] group = parser . getgroup ( [string] ) [EOL] group . addoption ( [string] , [string] , action = [string] , dest = [string] , help = [string] [string] , ) [EOL] group . addoption ( [string] , [string] , action = [string] , dest = [string] , help = [string] [string] [string] , ) [EOL] group . addoption ( [string] , [string] , action = [string] , dest = [string] , help = [string] [string] , ) [EOL] group . addoption ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] group . addoption ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . addini ( [string] , default = [string] , help = [string] ) [EOL] group . addoption ( [string] , [string] , action = [string] , dest = [string] , choices = ( [string] , [string] ) , default = [string] , help = [string] [string] , ) [EOL] [EOL] [EOL] def pytest_cmdline_main ( config ) : [EOL] if config . option . cacheshow : [EOL] from _pytest . main import wrap_session [EOL] [EOL] return wrap_session ( config , cacheshow ) [EOL] [EOL] [EOL] @ pytest . hookimpl ( tryfirst = True ) def pytest_configure ( config ) : [EOL] config . cache = Cache ( config ) [EOL] config . pluginmanager . register ( LFPlugin ( config ) , [string] ) [EOL] config . pluginmanager . register ( NFPlugin ( config ) , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def cache ( request ) : [EOL] [docstring] [EOL] return request . config . cache [EOL] [EOL] [EOL] def pytest_report_header ( config ) : [EOL] if config . option . verbose : [EOL] relpath = py . path . local ( ) . bestrelpath ( config . cache . _cachedir ) [EOL] return [string] % relpath [EOL] [EOL] [EOL] def cacheshow ( config , session ) : [EOL] from pprint import pprint [EOL] [EOL] tw = py . io . TerminalWriter ( ) [EOL] tw . line ( [string] + str ( config . cache . _cachedir ) ) [EOL] if not config . cache . _cachedir . check ( ) : [EOL] tw . line ( [string] ) [EOL] return [number] [EOL] dummy = object ( ) [EOL] basedir = config . cache . _cachedir [EOL] vdir = basedir . join ( [string] ) [EOL] tw . sep ( [string] , [string] ) [EOL] for valpath in sorted ( vdir . visit ( lambda x : x . isfile ( ) ) ) : [EOL] key = valpath . relto ( vdir ) . replace ( valpath . sep , [string] ) [EOL] val = config . cache . get ( key , dummy ) [EOL] if val is dummy : [EOL] tw . line ( [string] [string] % key ) [EOL] else : [EOL] tw . line ( [string] % key ) [EOL] stream = py . io . TextIO ( ) [EOL] pprint ( val , stream = stream ) [EOL] for line in stream . getvalue ( ) . splitlines ( ) : [EOL] tw . line ( [string] + line ) [EOL] [EOL] ddir = basedir . join ( [string] ) [EOL] if ddir . isdir ( ) and ddir . listdir ( ) : [EOL] tw . sep ( [string] , [string] ) [EOL] for p in sorted ( basedir . join ( [string] ) . visit ( ) ) : [EOL] [comment] [EOL] [comment] [EOL] if p . isfile ( ) : [EOL] key = p . relto ( basedir ) [EOL] tw . line ( [string] % ( key , p . size ( ) ) ) [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any
from typing import Any , Type [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import re [EOL] [EOL] import pytest [EOL] import py [EOL] from _pytest . monkeypatch import MonkeyPatch [EOL] [EOL] [EOL] class TempdirFactory ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . trace = config . trace . get ( [string] ) [EOL] [EOL] def ensuretemp ( self , string , dir = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] return self . getbasetemp ( ) . ensure ( string , dir = dir ) [EOL] [EOL] def mktemp ( self , basename , numbered = True ) : [EOL] [docstring] [EOL] basetemp = self . getbasetemp ( ) [EOL] if not numbered : [EOL] p = basetemp . mkdir ( basename ) [EOL] else : [EOL] p = py . path . local . make_numbered_dir ( prefix = basename , keep = [number] , rootdir = basetemp , lock_timeout = None ) [EOL] self . trace ( [string] , p ) [EOL] return p [EOL] [EOL] def getbasetemp ( self ) : [EOL] [docstring] [EOL] try : [EOL] return self . _basetemp [EOL] except AttributeError : [EOL] basetemp = self . config . option . basetemp [EOL] if basetemp : [EOL] basetemp = py . path . local ( basetemp ) [EOL] if basetemp . check ( ) : [EOL] basetemp . remove ( ) [EOL] basetemp . mkdir ( ) [EOL] else : [EOL] temproot = py . path . local . get_temproot ( ) [EOL] user = get_user ( ) [EOL] if user : [EOL] [comment] [EOL] [comment] [EOL] rootdir = temproot . join ( [string] % user ) [EOL] else : [EOL] rootdir = temproot [EOL] rootdir . ensure ( dir = [number] ) [EOL] basetemp = py . path . local . make_numbered_dir ( prefix = [string] , rootdir = rootdir ) [EOL] self . _basetemp = t = basetemp . realpath ( ) [EOL] self . trace ( [string] , t ) [EOL] return t [EOL] [EOL] def finish ( self ) : [EOL] self . trace ( [string] ) [EOL] [EOL] [EOL] def get_user ( ) : [EOL] [docstring] [EOL] import getpass [EOL] [EOL] try : [EOL] return getpass . getuser ( ) [EOL] except ( ImportError , KeyError ) : [EOL] return None [EOL] [EOL] [EOL] [comment] [EOL] TempdirHandler = TempdirFactory [EOL] [EOL] [EOL] def pytest_configure ( config ) : [EOL] [docstring] [EOL] mp = MonkeyPatch ( ) [EOL] t = TempdirFactory ( config ) [EOL] config . _cleanup . extend ( [ mp . undo , t . finish ] ) [EOL] mp . setattr ( config , [string] , t , raising = False ) [EOL] mp . setattr ( pytest , [string] , t . ensuretemp , raising = False ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def tmpdir_factory ( request ) : [EOL] [docstring] [EOL] return request . config . _tmpdirhandler [EOL] [EOL] [EOL] @ pytest . fixture def tmpdir ( request , tmpdir_factory ) : [EOL] [docstring] [EOL] name = request . node . name [EOL] name = re . sub ( [string] , [string] , name ) [EOL] MAXVAL = [number] [EOL] if len ( name ) > MAXVAL : [EOL] name = name [ : MAXVAL ] [EOL] x = tmpdir_factory . mktemp ( name , numbered = True ) [EOL] return x [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.pytest.src._pytest.tmpdir.TempdirFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] [EOL] try : [EOL] from . _version import version as __version__ [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] from __future__ import absolute_import , division , print_function [EOL] import sys [EOL] import os [EOL] from glob import glob [EOL] [EOL] [EOL] class FastFilesCompleter ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , directories = True ) : [EOL] self . directories = directories [EOL] [EOL] def __call__ ( self , prefix , ** kwargs ) : [EOL] [docstring] [EOL] if os . path . sep in prefix [ [number] : ] : [EOL] prefix_dir = len ( os . path . dirname ( prefix ) + os . path . sep ) [EOL] else : [EOL] prefix_dir = [number] [EOL] completion = [ ] [EOL] globbed = [ ] [EOL] if [string] not in prefix and [string] not in prefix : [EOL] [comment] [EOL] if not prefix or prefix [ - [number] ] == os . path . sep : [EOL] globbed . extend ( glob ( prefix + [string] ) ) [EOL] prefix += [string] [EOL] globbed . extend ( glob ( prefix ) ) [EOL] for x in sorted ( globbed ) : [EOL] if os . path . isdir ( x ) : [EOL] x += [string] [EOL] [comment] [EOL] completion . append ( x [ prefix_dir : ] ) [EOL] return completion [EOL] [EOL] [EOL] if os . environ . get ( [string] ) : [EOL] try : [EOL] import argcomplete . completers [EOL] except ImportError : [EOL] sys . exit ( - [number] ) [EOL] filescompleter = FastFilesCompleter ( ) [EOL] [EOL] def try_argcomplete ( parser ) : [EOL] argcomplete . autocomplete ( parser , always_complete_options = False ) [EOL] [EOL] [EOL] else : [EOL] [EOL] def try_argcomplete ( parser ) : [EOL] pass [EOL] [EOL] filescompleter = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.src._pytest._argcomplete.FastFilesCompleter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.pytest.src._pytest._argcomplete.FastFilesCompleter$ 0 0 0
class UsageError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class PrintHelp ( Exception ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Set , Literal [EOL] import typing_extensions [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] from pathlib import Path [EOL] from subprocess import check_output , check_call [EOL] [EOL] import invoke [EOL] [EOL] [EOL] @ invoke . task ( help = { [string] : [string] } ) def announce ( ctx , version ) : [EOL] [docstring] [EOL] [comment] [EOL] stdout = check_output ( [ [string] , [string] , [string] , [string] ] ) [EOL] stdout = stdout . decode ( [string] ) [EOL] last_version = stdout . strip ( ) [EOL] [EOL] stdout = check_output ( [ [string] , [string] , [string] . format ( last_version ) , [string] ] ) [EOL] stdout = stdout . decode ( [string] ) [EOL] [EOL] contributors = set ( stdout . splitlines ( ) ) [EOL] [EOL] template_name = [string] if version . endswith ( [string] ) else [string] [EOL] template_text = Path ( __file__ ) . parent . joinpath ( template_name ) . read_text ( encoding = [string] ) [EOL] [EOL] contributors_text = [string] . join ( [string] . format ( name ) for name in sorted ( contributors ) ) + [string] [EOL] text = template_text . format ( version = version , contributors = contributors_text ) [EOL] [EOL] target = Path ( __file__ ) . parent . joinpath ( [string] . format ( version ) ) [EOL] target . write_text ( text , encoding = [string] ) [EOL] print ( [string] . format ( target . name ) ) [EOL] [EOL] [comment] [EOL] index_path = Path ( __file__ ) . parent . joinpath ( [string] ) [EOL] lines = index_path . read_text ( encoding = [string] ) . splitlines ( ) [EOL] indent = [string] [EOL] for index , line in enumerate ( lines ) : [EOL] if line . startswith ( [string] . format ( indent ) ) : [EOL] new_line = indent + target . stem [EOL] if line != new_line : [EOL] lines . insert ( index , new_line ) [EOL] index_path . write_text ( [string] . join ( lines ) + [string] , encoding = [string] ) [EOL] print ( [string] . format ( index_path . name ) ) [EOL] else : [EOL] print ( [string] . format ( index_path . name ) ) [EOL] break [EOL] [EOL] check_call ( [ [string] , [string] , str ( target ) ] ) [EOL] [EOL] [EOL] @ invoke . task ( ) def regen ( ctx ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] check_call ( [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] @ invoke . task ( ) def make_tag ( ctx , version ) : [EOL] [docstring] [EOL] from git import Repo [EOL] [EOL] repo = Repo ( [string] ) [EOL] if repo . is_dirty ( ) : [EOL] print ( [string] ) [EOL] raise invoke . Exit ( code = [number] ) [EOL] [EOL] tag_names = [ x . name for x in repo . tags ] [EOL] if version in tag_names : [EOL] print ( [string] . format ( version ) ) [EOL] repo . delete_tag ( version ) [EOL] [EOL] print ( [string] . format ( version ) ) [EOL] repo . create_tag ( version ) [EOL] [EOL] [EOL] @ invoke . task ( help = { [string] : [string] } ) def pre_release ( ctx , version ) : [EOL] [docstring] [EOL] announce ( ctx , version ) [EOL] regen ( ctx ) [EOL] changelog ( ctx , version , write_out = True ) [EOL] [EOL] msg = [string] . format ( version ) [EOL] check_call ( [ [string] , [string] , [string] , [string] , msg ] ) [EOL] [EOL] make_tag ( ctx , version ) [EOL] [EOL] print ( ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ invoke . task ( help = { [string] : [string] , [string] : [string] , } ) def changelog ( ctx , version , write_out = False ) : [EOL] if write_out : [EOL] addopts = [ ] [EOL] else : [EOL] addopts = [ [string] ] [EOL] check_call ( [ [string] , [string] , [string] , version ] + addopts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import invoke [EOL] [EOL] from . import generate [EOL] [EOL] [EOL] ns = invoke . Collection ( generate ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import sys [EOL] from distutils . core import setup [EOL] [EOL] if __name__ == [string] : [EOL] if [string] not in sys . argv [ [number] : ] : [EOL] raise ValueError ( [string] ) [EOL] setup ( name = [string] , version = [string] , description = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List , Type [EOL] import typing [EOL] [docstring] [EOL] import os . path as path [EOL] from . common . exceptions import MissingCertFile [EOL] from . compat import ignore_missing , ssl [EOL] [EOL] [EOL] NPN_PROTOCOL = [string] [EOL] H2_NPN_PROTOCOLS = [ NPN_PROTOCOL , [string] , [string] , [string] ] [EOL] SUPPORTED_NPN_PROTOCOLS = H2_NPN_PROTOCOLS + [ [string] ] [EOL] [EOL] H2C_PROTOCOL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _context = None [EOL] [EOL] [comment] [EOL] cert_loc = path . join ( path . dirname ( __file__ ) , [string] ) [EOL] [EOL] [EOL] def wrap_socket ( sock , server_hostname , ssl_context = None , force_proto = None ) : [EOL] [docstring] [EOL] [EOL] global _context [EOL] [EOL] if ssl_context : [EOL] [comment] [EOL] _ssl_context = ssl_context [EOL] else : [EOL] [comment] [EOL] if _context is None : [comment] [EOL] _context = init_context ( ) [EOL] _ssl_context = _context [EOL] [EOL] [comment] [EOL] ssl_sock = _ssl_context . wrap_socket ( sock , server_hostname = server_hostname ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if _ssl_context . check_hostname : [comment] [EOL] try : [EOL] ssl . match_hostname ( ssl_sock . getpeercert ( ) , server_hostname ) [EOL] except AttributeError : [EOL] ssl . verify_hostname ( ssl_sock , server_hostname ) [comment] [EOL] [EOL] [comment] [EOL] proto = force_proto [EOL] [EOL] [comment] [EOL] [comment] [EOL] with ignore_missing ( ) : [EOL] if proto is None : [EOL] proto = ssl_sock . selected_alpn_protocol ( ) [EOL] [EOL] with ignore_missing ( ) : [EOL] if proto is None : [EOL] proto = ssl_sock . selected_npn_protocol ( ) [EOL] [EOL] return ( ssl_sock , proto ) [EOL] [EOL] [EOL] def init_context ( cert_path = None , cert = None , cert_password = None ) : [EOL] [docstring] [EOL] cafile = cert_path or cert_loc [EOL] if not cafile or not path . exists ( cafile ) : [EOL] err_msg = ( [string] + str ( cafile ) + [string] + [string] + [string] + [string] ) [EOL] raise MissingCertFile ( err_msg ) [EOL] [EOL] context = ssl . SSLContext ( ssl . PROTOCOL_SSLv23 ) [EOL] context . set_default_verify_paths ( ) [EOL] context . load_verify_locations ( cafile = cafile ) [EOL] context . verify_mode = ssl . CERT_REQUIRED [EOL] context . check_hostname = True [EOL] [EOL] with ignore_missing ( ) : [EOL] context . set_npn_protocols ( SUPPORTED_NPN_PROTOCOLS ) [EOL] [EOL] with ignore_missing ( ) : [EOL] context . set_alpn_protocols ( SUPPORTED_NPN_PROTOCOLS ) [EOL] [EOL] [comment] [EOL] context . options |= ssl . OP_NO_COMPRESSION [EOL] [EOL] if cert is not None : [EOL] try : [EOL] basestring [EOL] except NameError : [EOL] basestring = ( str , bytes ) [EOL] if not isinstance ( cert , basestring ) : [EOL] context . load_cert_chain ( cert [ [number] ] , cert [ [number] ] , cert_password ) [EOL] else : [EOL] context . load_cert_chain ( cert , password = cert_password ) [EOL] [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , List , Type [EOL] import http [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import socket [EOL] try : [EOL] import http . client as httplib [EOL] except ImportError : [EOL] import httplib [EOL] [EOL] from . compat import ssl [EOL] from . http20 . tls import wrap_socket [EOL] [EOL] [comment] [EOL] try : [EOL] support_20 = ssl . HAS_NPN [EOL] except AttributeError : [EOL] support_20 = False [EOL] [EOL] [comment] [EOL] HTTPConnection = httplib . HTTPConnection [EOL] HTTPSConnection = httplib . HTTPSConnection [EOL] [EOL] [comment] [EOL] [comment] [EOL] if support_20 : [EOL] class HTTPSConnection ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _original_args = args [EOL] self . _original_kwargs = kwargs [EOL] [EOL] [comment] [EOL] self . _sock = None [EOL] self . _conn = None [EOL] [EOL] [comment] [EOL] self . _call_queue = [ ] [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] delay_methods = [ [string] , [string] ] [EOL] [EOL] if self . _conn is None and name in delay_methods : [EOL] [comment] [EOL] [comment] [EOL] def capture ( obj , * args , ** kwargs ) : [EOL] self . _call_queue . append ( ( name , args , kwargs ) ) [EOL] return capture [EOL] elif self . _conn is None : [EOL] [comment] [EOL] [comment] [EOL] self . _delayed_connect ( ) [EOL] [EOL] [comment] [EOL] return getattr ( self . _conn , name ) [EOL] [EOL] def _delayed_connect ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tempconn = httplib . HTTPConnection ( * self . _original_args , ** self . _original_kwargs ) [EOL] host = tempconn . host [EOL] port = tempconn . port [EOL] timeout = tempconn . timeout [EOL] source_address = tempconn . source_address [EOL] [EOL] [comment] [EOL] sock = socket . create_connection ( ( host , port ) , timeout , source_address ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sock = wrap_socket ( sock , host ) [EOL] [EOL] [comment] [EOL] tempconn . sock = sock [EOL] self . _sock = sock [EOL] self . _conn = tempconn [EOL] [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 0 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 0 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 $typing.Type[tools.third_party.hyper.hyper.httplib_compat.HTTPSConnection]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $http.client.HTTPConnection$ 0 $builtins.str$ 0 $builtins.int$ 0 $http.client.HTTPConnection$ 0 $builtins.int$ 0 $typing.Optional[builtins.float]$ 0 $http.client.HTTPConnection$ 0 $typing.Optional[builtins.float]$ 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0
[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import socket [EOL] import base64 [EOL] [EOL] from collections import Iterable , Mapping [EOL] [EOL] import collections [EOL] from hyperframe . frame import SettingsFrame [EOL] [EOL] from . response import HTTP11Response [EOL] from . . tls import wrap_socket , H2C_PROTOCOL [EOL] from . . common . bufsocket import BufferedSocket [EOL] from . . common . exceptions import TLSUpgrade , HTTPUpgrade [EOL] from . . common . headers import HTTPHeaderMap [EOL] from . . common . util import to_bytestring , to_host_port_tuple [EOL] from . . compat import bytes [EOL] [EOL] [comment] [EOL] try : [comment] [EOL] from pycohttpparser . api import Parser [EOL] except ImportError : [comment] [EOL] from . parser import Parser [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] BODY_CHUNKED = [number] [EOL] BODY_FLAT = [number] [EOL] [EOL] [EOL] class HTTP11Connection ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , host , port = None , secure = None , ssl_context = None , proxy_host = None , proxy_port = None , ** kwargs ) : [EOL] if port is None : [EOL] self . host , self . port = to_host_port_tuple ( host , default_port = [number] ) [EOL] else : [EOL] self . host , self . port = host , port [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if secure is not None : [EOL] self . secure = secure [EOL] elif self . port == [number] : [EOL] self . secure = True [EOL] else : [EOL] self . secure = False [EOL] [EOL] [comment] [EOL] self . _send_http_upgrade = not self . secure [EOL] [EOL] self . ssl_context = ssl_context [EOL] self . _sock = None [EOL] [EOL] [comment] [EOL] if proxy_host : [EOL] if proxy_port is None : [EOL] self . proxy_host , self . proxy_port = to_host_port_tuple ( proxy_host , default_port = [number] ) [EOL] else : [EOL] self . proxy_host , self . proxy_port = proxy_host , proxy_port [EOL] else : [EOL] self . proxy_host = None [EOL] self . proxy_port = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . network_buffer_size = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . parser = Parser ( ) [EOL] [EOL] def connect ( self ) : [EOL] [docstring] [EOL] if self . _sock is None : [EOL] if not self . proxy_host : [EOL] host = self . host [EOL] port = self . port [EOL] else : [EOL] host = self . proxy_host [EOL] port = self . proxy_port [EOL] [EOL] sock = socket . create_connection ( ( host , port ) , [number] ) [EOL] proto = None [EOL] [EOL] if self . secure : [EOL] assert not self . proxy_host , [string] [EOL] sock , proto = wrap_socket ( sock , host , self . ssl_context ) [EOL] [EOL] log . debug ( [string] , proto ) [EOL] sock = BufferedSocket ( sock , self . network_buffer_size ) [EOL] [EOL] if proto not in ( [string] , None ) : [EOL] raise TLSUpgrade ( proto , sock ) [EOL] [EOL] self . _sock = sock [EOL] [EOL] return [EOL] [EOL] def request ( self , method , url , body = None , headers = None ) : [EOL] [docstring] [EOL] [EOL] headers = headers or { } [EOL] [EOL] method = to_bytestring ( method ) [EOL] url = to_bytestring ( url ) [EOL] [EOL] if not isinstance ( headers , HTTPHeaderMap ) : [EOL] if isinstance ( headers , Mapping ) : [EOL] headers = HTTPHeaderMap ( headers . items ( ) ) [EOL] elif isinstance ( headers , Iterable ) : [EOL] headers = HTTPHeaderMap ( headers ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if self . _sock is None : [EOL] self . connect ( ) [EOL] [EOL] if self . _send_http_upgrade : [EOL] self . _add_upgrade_headers ( headers ) [EOL] self . _send_http_upgrade = False [EOL] [EOL] [comment] [EOL] if body : [EOL] body_type = self . _add_body_headers ( headers , body ) [EOL] [EOL] if [string] not in headers : [EOL] headers [ [string] ] = self . host [EOL] [EOL] [comment] [EOL] self . _send_headers ( method , url , headers ) [EOL] [EOL] [comment] [EOL] if body : [EOL] self . _send_body ( body , body_type ) [EOL] [EOL] return [EOL] [EOL] def get_response ( self ) : [EOL] [docstring] [EOL] headers = HTTPHeaderMap ( ) [EOL] [EOL] response = None [EOL] while response is None : [EOL] [comment] [EOL] self . _sock . fill ( ) [EOL] response = self . parser . parse_response ( self . _sock . buffer ) [EOL] [EOL] for n , v in response . headers : [EOL] headers [ n . tobytes ( ) ] = v . tobytes ( ) [EOL] [EOL] self . _sock . advance_buffer ( response . consumed ) [EOL] [EOL] if ( response . status == [number] and [string] in headers [ [string] ] and H2C_PROTOCOL . encode ( [string] ) in headers [ [string] ] ) : [EOL] raise HTTPUpgrade ( H2C_PROTOCOL , self . _sock ) [EOL] [EOL] return HTTP11Response ( response . status , response . msg . tobytes ( ) , headers , self . _sock , self ) [EOL] [EOL] def _send_headers ( self , method , url , headers ) : [EOL] [docstring] [EOL] self . _sock . send ( [string] . join ( [ method , url , [string] ] ) ) [EOL] [EOL] for name , value in headers . iter_raw ( ) : [EOL] name , value = to_bytestring ( name ) , to_bytestring ( value ) [EOL] header = [string] . join ( [ name , [string] , value , [string] ] ) [EOL] self . _sock . send ( header ) [EOL] [EOL] self . _sock . send ( [string] ) [EOL] [EOL] def _add_body_headers ( self , headers , body ) : [EOL] [docstring] [EOL] if [string] in headers : [EOL] return BODY_FLAT [EOL] [EOL] if [string] in headers . get ( [string] , [ ] ) : [EOL] return BODY_CHUNKED [EOL] [EOL] [comment] [EOL] [comment] [EOL] if isinstance ( body , bytes ) : [EOL] length = str ( len ( body ) ) . encode ( [string] ) [EOL] elif hasattr ( body , [string] ) : [EOL] length = str ( os . fstat ( body . fileno ( ) ) . st_size ) . encode ( [string] ) [EOL] else : [EOL] length = None [EOL] [EOL] if length : [EOL] headers [ [string] ] = length [EOL] return BODY_FLAT [EOL] [EOL] headers [ [string] ] = [string] [EOL] return BODY_CHUNKED [EOL] [EOL] def _add_upgrade_headers ( self , headers ) : [EOL] [comment] [EOL] headers [ [string] ] = [string] [EOL] headers [ [string] ] = H2C_PROTOCOL [EOL] [EOL] [comment] [EOL] [comment] [EOL] http2_settings = SettingsFrame ( [number] ) [EOL] http2_settings . settings [ SettingsFrame . INITIAL_WINDOW_SIZE ] = [number] [EOL] encoded_settings = base64 . urlsafe_b64encode ( http2_settings . serialize_body ( ) ) [EOL] headers [ [string] ] = encoded_settings . rstrip ( [string] ) [EOL] [EOL] def _send_body ( self , body , body_type ) : [EOL] [docstring] [EOL] if body_type == BODY_FLAT : [EOL] [comment] [EOL] if hasattr ( body , [string] ) : [EOL] return self . _send_file_like_obj ( body ) [EOL] [EOL] [comment] [EOL] elif isinstance ( body , bytes ) : [EOL] self . _sock . send ( body ) [EOL] [EOL] return [EOL] [EOL] [comment] [EOL] elif isinstance ( body , collections . Iterable ) : [EOL] for item in body : [EOL] try : [EOL] self . _sock . send ( item ) [EOL] except TypeError : [EOL] raise ValueError ( [string] [string] . format ( item ) ) [EOL] return [EOL] [EOL] else : [EOL] raise ValueError ( [string] [string] [string] . format ( type ( body ) ) ) [EOL] [EOL] [comment] [EOL] return self . _send_chunked ( body ) [EOL] [EOL] def _send_chunked ( self , body ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] for chunk in body : [EOL] length = [string] . format ( len ( chunk ) ) . encode ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] self . _sock . send ( length ) [EOL] self . _sock . send ( [string] ) [EOL] self . _sock . send ( chunk ) [EOL] self . _sock . send ( [string] ) [EOL] except TypeError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _sock . send ( [string] ) [EOL] return [EOL] [EOL] def _send_file_like_obj ( self , fobj ) : [EOL] [docstring] [EOL] while True : [EOL] block = fobj . read ( [number] * [number] ) [EOL] if not block : [EOL] break [EOL] [EOL] try : [EOL] self . _sock . send ( block ) [EOL] except TypeError : [EOL] raise ValueError ( [string] [string] . format ( type ( block ) ) ) [EOL] [EOL] return [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] self . _sock . close ( ) [EOL] self . _sock = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , type , value , tb ) : [EOL] self . close ( ) [EOL] return False [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $None$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import enum [EOL] [EOL] [EOL] class ErrorCodes ( enum . IntEnum ) : [EOL] [docstring] [EOL] [comment] [EOL] NO_ERROR = [number] [EOL] [EOL] [comment] [EOL] PROTOCOL_ERROR = [number] [EOL] [EOL] [comment] [EOL] INTERNAL_ERROR = [number] [EOL] [EOL] [comment] [EOL] FLOW_CONTROL_ERROR = [number] [EOL] [EOL] [comment] [EOL] SETTINGS_TIMEOUT = [number] [EOL] [EOL] [comment] [EOL] STREAM_CLOSED = [number] [EOL] [EOL] [comment] [EOL] FRAME_SIZE_ERROR = [number] [EOL] [EOL] [comment] [EOL] REFUSED_STREAM = [number] [EOL] [EOL] [comment] [EOL] CANCEL = [number] [EOL] [EOL] [comment] [EOL] COMPRESSION_ERROR = [number] [EOL] [EOL] [comment] [EOL] CONNECT_ERROR = [number] [EOL] [EOL] [comment] [EOL] ENHANCE_YOUR_CALM = [number] [EOL] [EOL] [comment] [EOL] INADEQUATE_SECURITY = [number] [EOL] [EOL] [comment] [EOL] HTTP_1_1_REQUIRED = [number] [EOL] [EOL] [EOL] def _error_code_from_int ( code ) : [EOL] [docstring] [EOL] try : [EOL] return ErrorCodes ( code ) [EOL] except ValueError : [EOL] return code [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] NO_ERROR = ErrorCodes . NO_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] PROTOCOL_ERROR = ErrorCodes . PROTOCOL_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] INTERNAL_ERROR = ErrorCodes . INTERNAL_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FLOW_CONTROL_ERROR = ErrorCodes . FLOW_CONTROL_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] SETTINGS_TIMEOUT = ErrorCodes . SETTINGS_TIMEOUT [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] STREAM_CLOSED = ErrorCodes . STREAM_CLOSED [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FRAME_SIZE_ERROR = ErrorCodes . FRAME_SIZE_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] REFUSED_STREAM = ErrorCodes . REFUSED_STREAM [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CANCEL = ErrorCodes . CANCEL [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] COMPRESSION_ERROR = ErrorCodes . COMPRESSION_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CONNECT_ERROR = ErrorCodes . CONNECT_ERROR [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ENHANCE_YOUR_CALM = ErrorCodes . ENHANCE_YOUR_CALM [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] INADEQUATE_SECURITY = ErrorCodes . INADEQUATE_SECURITY [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] HTTP_1_1_REQUIRED = ErrorCodes . HTTP_1_1_REQUIRED [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] H2_ERRORS = list ( ErrorCodes ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Union , Type , Pattern , Any , Set [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import collections [EOL] import re [EOL] from string import whitespace [EOL] import sys [EOL] [EOL] from hpack import HeaderTuple , NeverIndexedHeaderTuple [EOL] [EOL] from . exceptions import ProtocolError , FlowControlError [EOL] [EOL] UPPER_RE = re . compile ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] CONNECTION_HEADERS = frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] _ALLOWED_PSEUDO_HEADER_FIELDS = frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] _SECURE_HEADERS = frozenset ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] _REQUEST_ONLY_HEADERS = frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] _RESPONSE_ONLY_HEADERS = frozenset ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] if sys . version_info [ [number] ] == [number] : [comment] [EOL] _WHITESPACE = frozenset ( whitespace ) [EOL] else : [comment] [EOL] _WHITESPACE = frozenset ( map ( ord , whitespace ) ) [EOL] [EOL] [EOL] def _secure_headers ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if header [ [number] ] in _SECURE_HEADERS : [EOL] yield NeverIndexedHeaderTuple ( * header ) [EOL] elif header [ [number] ] in ( [string] , [string] ) and len ( header [ [number] ] ) < [number] : [EOL] yield NeverIndexedHeaderTuple ( * header ) [EOL] else : [EOL] yield header [EOL] [EOL] [EOL] def extract_method_header ( headers ) : [EOL] [docstring] [EOL] for k , v in headers : [EOL] if k in ( [string] , [string] ) : [EOL] if not isinstance ( v , bytes ) : [EOL] return v . encode ( [string] ) [EOL] else : [EOL] return v [EOL] [EOL] [EOL] def is_informational_response ( headers ) : [EOL] [docstring] [EOL] for n , v in headers : [EOL] if isinstance ( n , bytes ) : [EOL] sigil = [string] [EOL] status = [string] [EOL] informational_start = [string] [EOL] else : [EOL] sigil = [string] [EOL] status = [string] [EOL] informational_start = [string] [EOL] [EOL] [comment] [EOL] if not n . startswith ( sigil ) : [EOL] return False [EOL] [EOL] [comment] [EOL] if n != status : [EOL] continue [EOL] [EOL] [comment] [EOL] return v . startswith ( informational_start ) [EOL] [EOL] [EOL] def guard_increment_window ( current , increment ) : [EOL] [docstring] [EOL] [comment] [EOL] LARGEST_FLOW_CONTROL_WINDOW = [number] ** [number] - [number] [EOL] [EOL] new_size = current + increment [EOL] [EOL] if new_size > LARGEST_FLOW_CONTROL_WINDOW : [EOL] raise FlowControlError ( [string] % LARGEST_FLOW_CONTROL_WINDOW ) [EOL] [EOL] return new_size [EOL] [EOL] [EOL] def authority_from_headers ( headers ) : [EOL] [docstring] [EOL] for n , v in headers : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if n in ( [string] , [string] ) : [EOL] return v . encode ( [string] ) if not isinstance ( v , bytes ) else v [EOL] [EOL] return None [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] HeaderValidationFlags = collections . namedtuple ( [string] , [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def validate_headers ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] headers = _reject_uppercase_header_fields ( headers , hdr_validation_flags ) [EOL] headers = _reject_surrounding_whitespace ( headers , hdr_validation_flags ) [EOL] headers = _reject_te ( headers , hdr_validation_flags ) [EOL] headers = _reject_connection_header ( headers , hdr_validation_flags ) [EOL] headers = _reject_pseudo_header_fields ( headers , hdr_validation_flags ) [EOL] headers = _check_host_authority_header ( headers , hdr_validation_flags ) [EOL] headers = _check_path_header ( headers , hdr_validation_flags ) [EOL] [EOL] return list ( headers ) [EOL] [EOL] [EOL] def _reject_uppercase_header_fields ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if UPPER_RE . search ( header [ [number] ] ) : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] yield header [EOL] [EOL] [EOL] def _reject_surrounding_whitespace ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for header in headers : [EOL] if header [ [number] ] [ [number] ] in _WHITESPACE or header [ [number] ] [ - [number] ] in _WHITESPACE : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] if header [ [number] ] and ( ( header [ [number] ] [ [number] ] in _WHITESPACE ) or ( header [ [number] ] [ - [number] ] in _WHITESPACE ) ) : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] yield header [EOL] [EOL] [EOL] def _reject_te ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if header [ [number] ] in ( [string] , [string] ) : [EOL] if header [ [number] ] . lower ( ) not in ( [string] , [string] ) : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] [EOL] yield header [EOL] [EOL] [EOL] def _reject_connection_header ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if header [ [number] ] in CONNECTION_HEADERS : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] [EOL] yield header [EOL] [EOL] [EOL] def _custom_startswith ( test_string , bytes_prefix , unicode_prefix ) : [EOL] [docstring] [EOL] if isinstance ( test_string , bytes ) : [EOL] return test_string . startswith ( bytes_prefix ) [EOL] else : [EOL] return test_string . startswith ( unicode_prefix ) [EOL] [EOL] [EOL] def _assert_header_in_set ( string_header , bytes_header , header_set ) : [EOL] [docstring] [EOL] if not ( string_header in header_set or bytes_header in header_set ) : [EOL] raise ProtocolError ( [string] % string_header ) [EOL] [EOL] [EOL] def _reject_pseudo_header_fields ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] seen_pseudo_header_fields = set ( ) [EOL] seen_regular_header = False [EOL] [EOL] for header in headers : [EOL] if _custom_startswith ( header [ [number] ] , [string] , [string] ) : [EOL] if header [ [number] ] in seen_pseudo_header_fields : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] [EOL] seen_pseudo_header_fields . add ( header [ [number] ] ) [EOL] [EOL] if seen_regular_header : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] [EOL] if header [ [number] ] not in _ALLOWED_PSEUDO_HEADER_FIELDS : [EOL] raise ProtocolError ( [string] % header [ [number] ] ) [EOL] [EOL] else : [EOL] seen_regular_header = True [EOL] [EOL] yield header [EOL] [EOL] [comment] [EOL] _check_pseudo_header_field_acceptability ( seen_pseudo_header_fields , hdr_validation_flags ) [EOL] [EOL] [EOL] def _check_pseudo_header_field_acceptability ( pseudo_headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] [comment] [EOL] if hdr_validation_flags . is_trailer and pseudo_headers : [EOL] raise ProtocolError ( [string] % pseudo_headers ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if hdr_validation_flags . is_response_header : [EOL] _assert_header_in_set ( [string] , [string] , pseudo_headers ) [EOL] invalid_response_headers = pseudo_headers & _REQUEST_ONLY_HEADERS [EOL] if invalid_response_headers : [EOL] raise ProtocolError ( [string] % invalid_response_headers ) [EOL] elif ( not hdr_validation_flags . is_response_header and not hdr_validation_flags . is_trailer ) : [EOL] [comment] [EOL] [comment] [EOL] _assert_header_in_set ( [string] , [string] , pseudo_headers ) [EOL] _assert_header_in_set ( [string] , [string] , pseudo_headers ) [EOL] _assert_header_in_set ( [string] , [string] , pseudo_headers ) [EOL] invalid_request_headers = pseudo_headers & _RESPONSE_ONLY_HEADERS [EOL] if invalid_request_headers : [EOL] raise ProtocolError ( [string] % invalid_request_headers ) [EOL] [EOL] [EOL] def _validate_host_authority_header ( headers ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] authority_header_val = None [EOL] host_header_val = None [EOL] [EOL] for header in headers : [EOL] if header [ [number] ] in ( [string] , [string] ) : [EOL] authority_header_val = header [ [number] ] [EOL] elif header [ [number] ] in ( [string] , [string] ) : [EOL] host_header_val = header [ [number] ] [EOL] [EOL] yield header [EOL] [EOL] [comment] [EOL] [comment] [EOL] authority_present = ( authority_header_val is not None ) [EOL] host_present = ( host_header_val is not None ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not authority_present and not host_present : [EOL] raise ProtocolError ( [string] ) [EOL] [EOL] [comment] [EOL] if authority_present and host_present : [EOL] if authority_header_val != host_header_val : [EOL] raise ProtocolError ( [string] [string] % ( authority_header_val , host_header_val ) ) [EOL] [EOL] [EOL] def _check_host_authority_header ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] skip_validation = ( hdr_validation_flags . is_response_header or hdr_validation_flags . is_trailer ) [EOL] if skip_validation : [EOL] return headers [EOL] [EOL] return _validate_host_authority_header ( headers ) [EOL] [EOL] [EOL] def _check_path_header ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] def inner ( ) : [EOL] for header in headers : [EOL] if header [ [number] ] in ( [string] , [string] ) : [EOL] if not header [ [number] ] : [EOL] raise ProtocolError ( [string] ) [EOL] [EOL] yield header [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] skip_validation = ( hdr_validation_flags . is_response_header or hdr_validation_flags . is_trailer ) [EOL] if skip_validation : [EOL] return headers [EOL] else : [EOL] return inner ( ) [EOL] [EOL] [EOL] def _lowercase_header_names ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if isinstance ( header , HeaderTuple ) : [EOL] yield header . __class__ ( header [ [number] ] . lower ( ) , header [ [number] ] ) [EOL] else : [EOL] yield ( header [ [number] ] . lower ( ) , header [ [number] ] ) [EOL] [EOL] [EOL] def _strip_surrounding_whitespace ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if isinstance ( header , HeaderTuple ) : [EOL] yield header . __class__ ( header [ [number] ] . strip ( ) , header [ [number] ] . strip ( ) ) [EOL] else : [EOL] yield ( header [ [number] ] . strip ( ) , header [ [number] ] . strip ( ) ) [EOL] [EOL] [EOL] def _strip_connection_headers ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] for header in headers : [EOL] if header [ [number] ] not in CONNECTION_HEADERS : [EOL] yield header [EOL] [EOL] [EOL] def _check_sent_host_authority_header ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] skip_validation = ( hdr_validation_flags . is_response_header or hdr_validation_flags . is_trailer ) [EOL] if skip_validation : [EOL] return headers [EOL] [EOL] return _validate_host_authority_header ( headers ) [EOL] [EOL] [EOL] def normalize_outbound_headers ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] headers = _lowercase_header_names ( headers , hdr_validation_flags ) [EOL] headers = _strip_surrounding_whitespace ( headers , hdr_validation_flags ) [EOL] headers = _strip_connection_headers ( headers , hdr_validation_flags ) [EOL] headers = _secure_headers ( headers , hdr_validation_flags ) [EOL] [EOL] return headers [EOL] [EOL] [EOL] def validate_outbound_headers ( headers , hdr_validation_flags ) : [EOL] [docstring] [EOL] headers = _reject_te ( headers , hdr_validation_flags ) [EOL] headers = _reject_connection_header ( headers , hdr_validation_flags ) [EOL] headers = _reject_pseudo_header_fields ( headers , hdr_validation_flags ) [EOL] headers = _check_sent_host_authority_header ( headers , hdr_validation_flags ) [EOL] headers = _check_path_header ( headers , hdr_validation_flags ) [EOL] [EOL] return headers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.hyper.hyper.h2.utilities.HeaderValidationFlags
[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] from . exceptions import TLSUpgrade , HTTPUpgrade [EOL] from . . http11 . connection import HTTP11Connection [EOL] from . . http20 . connection import HTTP20Connection [EOL] from . . tls import H2_NPN_PROTOCOLS , H2C_PROTOCOL [EOL] [EOL] [EOL] class HTTPConnection ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , host , port = None , secure = None , window_manager = None , enable_push = False , ssl_context = None , proxy_host = None , proxy_port = None , ** kwargs ) : [EOL] [EOL] self . _host = host [EOL] self . _port = port [EOL] self . _h1_kwargs = { [string] : secure , [string] : ssl_context , [string] : proxy_host , [string] : proxy_port } [EOL] self . _h2_kwargs = { [string] : window_manager , [string] : enable_push , [string] : secure , [string] : ssl_context , [string] : proxy_host , [string] : proxy_port } [EOL] [EOL] [comment] [EOL] self . _h1_kwargs . update ( kwargs ) [EOL] self . _h2_kwargs . update ( kwargs ) [EOL] [EOL] self . _conn = HTTP11Connection ( self . _host , self . _port , ** self . _h1_kwargs ) [EOL] [EOL] def request ( self , method , url , body = None , headers = None ) : [EOL] [docstring] [EOL] [EOL] headers = headers or { } [EOL] [EOL] try : [EOL] return self . _conn . request ( method = method , url = url , body = body , headers = headers ) [EOL] except TLSUpgrade as e : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert e . negotiated in H2_NPN_PROTOCOLS [EOL] [EOL] self . _conn = HTTP20Connection ( self . _host , self . _port , ** self . _h2_kwargs ) [EOL] self . _conn . _sock = e . sock [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . _conn . _send_preamble ( ) [EOL] [EOL] return self . _conn . request ( method = method , url = url , body = body , headers = headers ) [EOL] [EOL] def get_response ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] try : [EOL] return self . _conn . get_response ( * args , ** kwargs ) [EOL] except HTTPUpgrade as e : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert e . negotiated == H2C_PROTOCOL [EOL] [EOL] self . _conn = HTTP20Connection ( self . _host , self . _port , ** self . _h2_kwargs ) [EOL] [EOL] self . _conn . _connect_upgrade ( e . sock ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] return self . _conn . get_response ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def __enter__ ( self ) : [comment] [EOL] return self [EOL] [EOL] def __exit__ ( self , type , value , tb ) : [comment] [EOL] self . _conn . close ( ) [EOL] return False [comment] [EOL] [EOL] [comment] [EOL] def __getattr__ ( self , name ) : [EOL] return getattr ( self . _conn , name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.hyper.hyper.http11.connection.HTTP11Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] import zlib [EOL] [EOL] [EOL] class DeflateDecoder ( object ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] self . _first_try = True [EOL] self . _data = [string] [EOL] self . _obj = zlib . decompressobj ( zlib . MAX_WBITS ) [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] return getattr ( self . _obj , name ) [EOL] [EOL] def decompress ( self , data ) : [EOL] if not self . _first_try : [EOL] return self . _obj . decompress ( data ) [EOL] [EOL] self . _data += data [EOL] try : [EOL] return self . _obj . decompress ( data ) [EOL] except zlib . error : [EOL] self . _first_try = False [EOL] self . _obj = zlib . decompressobj ( - zlib . MAX_WBITS ) [EOL] try : [EOL] return self . decompress ( self . _data ) [EOL] finally : [EOL] self . _data = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [EOL] class HTTP20Error ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class HPACKEncodingError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class HPACKDecodingError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ConnectionError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ProtocolError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class StreamResetError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class BaseFlowControlManager ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , initial_window_size , document_size = None ) : [EOL] [comment] [EOL] [comment] [EOL] self . initial_window_size = initial_window_size [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . window_size = initial_window_size [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . document_size = document_size [EOL] [EOL] def increase_window_size ( self , frame_size ) : [EOL] [docstring] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def blocked ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def _handle_frame ( self , frame_size ) : [EOL] [docstring] [EOL] rc = self . increase_window_size ( frame_size ) [EOL] self . window_size -= frame_size [EOL] self . window_size += rc [EOL] return rc [EOL] [EOL] def _blocked ( self ) : [EOL] [docstring] [EOL] rc = self . blocked ( ) [EOL] self . window_size += rc [EOL] return rc [EOL] [EOL] [EOL] class FlowControlManager ( BaseFlowControlManager ) : [EOL] [docstring] [EOL] def increase_window_size ( self , frame_size ) : [EOL] future_window_size = self . window_size - frame_size [EOL] [EOL] if ( ( future_window_size < ( self . initial_window_size / [number] ) ) or ( future_window_size < [number] ) ) : [EOL] return self . initial_window_size - future_window_size [EOL] [EOL] return [number] [EOL] [EOL] def blocked ( self ) : [EOL] return self . initial_window_size - self . window_size [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Generator , Any [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] from . . h2 import exceptions as h2Exceptions [EOL] [EOL] from . . common . headers import HTTPHeaderMap [EOL] from . util import h2_safe_headers [EOL] import logging [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MAX_CHUNK = [number] [EOL] [EOL] [EOL] class Stream ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , stream_id , window_manager , connection , send_outstanding_data , recv_cb , close_cb ) : [EOL] self . stream_id = stream_id [EOL] self . headers = HTTPHeaderMap ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . response_headers = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . response_trailers = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . promised_headers = { } [EOL] [EOL] [comment] [EOL] self . data = [ ] [EOL] [EOL] [comment] [EOL] self . remote_closed = False [EOL] [EOL] [comment] [EOL] self . local_closed = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . _in_window_manager = window_manager [EOL] [EOL] [comment] [EOL] self . _conn = connection [EOL] [EOL] [comment] [EOL] self . _send_outstanding_data = send_outstanding_data [EOL] self . _recv_cb = recv_cb [EOL] self . _close_cb = close_cb [EOL] [EOL] def add_header ( self , name , value , replace = False ) : [EOL] [docstring] [EOL] if not replace : [EOL] self . headers [ name ] = value [EOL] else : [EOL] self . headers . replace ( name , value ) [EOL] [EOL] def send_headers ( self , end_stream = False ) : [EOL] [docstring] [EOL] headers = self . get_headers ( ) [EOL] with self . _conn as conn : [EOL] conn . send_headers ( self . stream_id , headers , end_stream ) [EOL] self . _send_outstanding_data ( ) [EOL] [EOL] if end_stream : [EOL] self . local_closed = True [EOL] [EOL] def send_data ( self , data , final ) : [EOL] [docstring] [EOL] [comment] [EOL] def file_iterator ( fobj ) : [EOL] while True : [EOL] data = fobj . read ( MAX_CHUNK ) [EOL] yield data [EOL] if len ( data ) < MAX_CHUNK : [EOL] break [EOL] [EOL] [comment] [EOL] if hasattr ( data , [string] ) : [EOL] chunks = file_iterator ( data ) [EOL] else : [EOL] chunks = ( data [ i : i + MAX_CHUNK ] for i in range ( [number] , len ( data ) , MAX_CHUNK ) ) [EOL] [EOL] for chunk in chunks : [EOL] self . _send_chunk ( chunk , final ) [EOL] [EOL] def _read ( self , amt = None ) : [EOL] [docstring] [EOL] def listlen ( list ) : [EOL] return sum ( map ( len , list ) ) [EOL] [EOL] [comment] [EOL] while ( not self . remote_closed and ( amt is None or listlen ( self . data ) < amt ) ) : [EOL] self . _recv_cb ( stream_id = self . stream_id ) [EOL] [EOL] result = [string] . join ( self . data ) [EOL] self . data = [ ] [EOL] return result [EOL] [EOL] def _read_one_frame ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] while not self . remote_closed and not self . data : [EOL] self . _recv_cb ( stream_id = self . stream_id ) [EOL] [EOL] try : [EOL] return self . data . pop ( [number] ) [EOL] except IndexError : [EOL] return None [EOL] [EOL] def receive_response ( self , event ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . response_headers = HTTPHeaderMap ( event . headers ) [EOL] [EOL] def receive_trailers ( self , event ) : [EOL] [docstring] [EOL] self . response_trailers = HTTPHeaderMap ( event . headers ) [EOL] [EOL] def receive_push ( self , event ) : [EOL] [docstring] [EOL] self . promised_headers [ event . pushed_stream_id ] = event . headers [EOL] [EOL] def receive_data ( self , event ) : [EOL] [docstring] [EOL] size = event . flow_controlled_length [EOL] increment = self . _in_window_manager . _handle_frame ( size ) [EOL] [EOL] [comment] [EOL] self . data . append ( event . data ) [EOL] [EOL] if increment : [EOL] try : [EOL] with self . _conn as conn : [EOL] conn . increment_flow_control_window ( increment , stream_id = self . stream_id ) [EOL] except h2Exceptions . StreamClosedError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] else : [EOL] self . _send_outstanding_data ( ) [EOL] [EOL] def receive_end_stream ( self , event ) : [EOL] [docstring] [EOL] self . remote_closed = True [EOL] [EOL] def receive_reset ( self , event ) : [EOL] [docstring] [EOL] self . remote_closed = True [EOL] self . _close_cb ( self . stream_id ) [EOL] [EOL] def get_headers ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] return h2_safe_headers ( self . headers ) [EOL] [EOL] def getheaders ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] while self . response_headers is None : [EOL] self . _recv_cb ( stream_id = self . stream_id ) [EOL] [EOL] [comment] [EOL] self . _in_window_manager . document_size = ( int ( self . response_headers . get ( [string] , [ [number] ] ) [ [number] ] ) ) [EOL] [EOL] return self . response_headers [EOL] [EOL] def gettrailers ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] while not self . remote_closed : [EOL] self . _recv_cb ( stream_id = self . stream_id ) [EOL] [EOL] return self . response_trailers [EOL] [EOL] def get_pushes ( self , capture_all = False ) : [EOL] [docstring] [EOL] while True : [EOL] for pair in self . promised_headers . items ( ) : [EOL] yield pair [EOL] self . promised_headers = { } [EOL] if not capture_all or self . remote_closed : [EOL] break [EOL] self . _recv_cb ( stream_id = self . stream_id ) [EOL] [EOL] def close ( self , error_code = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if not ( self . remote_closed and self . local_closed ) : [EOL] try : [EOL] with self . _conn as conn : [EOL] conn . reset_stream ( self . stream_id , error_code or [number] ) [EOL] except h2Exceptions . ProtocolError : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] else : [EOL] self . _send_outstanding_data ( tolerate_peer_gone = True ) [EOL] self . remote_closed = True [EOL] self . local_closed = True [EOL] [EOL] self . _close_cb ( self . stream_id ) [EOL] [EOL] @ property def _out_flow_control_window ( self ) : [EOL] [docstring] [EOL] [EOL] with self . _conn as conn : [EOL] return conn . local_flow_control_window ( self . stream_id ) [EOL] [EOL] def _send_chunk ( self , data , final ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] while len ( data ) > self . _out_flow_control_window : [EOL] self . _recv_cb ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] end_stream = False [EOL] if len ( data ) < MAX_CHUNK and final : [EOL] end_stream = True [EOL] [EOL] [comment] [EOL] with self . _conn as conn : [EOL] conn . send_data ( stream_id = self . stream_id , data = data , end_stream = end_stream ) [EOL] self . _send_outstanding_data ( ) [EOL] [EOL] if end_stream : [EOL] self . local_closed = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] __title__ = [string] [EOL] __author__ = [string] [EOL] __author_email__ = [string] [EOL] __license__ = [string] [EOL] __copyright__ = [string] [EOL] __version__ = [string] [EOL] [EOL] from . api import ( URIReference , uri_reference , is_valid_uri , normalize_uri , urlparse ) [EOL] from . parseresult import ParseResult [EOL] [EOL] __all__ = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] class HTTP20Error ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class HPACKEncodingError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class HPACKDecodingError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ConnectionError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ProtocolError ( HTTP20Error ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] REQUEST_CODES = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] REQUEST_CODES_LENGTH = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import List , Tuple , Any , Literal , Dict [EOL] import OpenSSL [EOL] import typing_extensions [EOL] import io [EOL] import typing [EOL] [docstring] [EOL] import functools [EOL] import mimetypes [EOL] import os [EOL] import os . path [EOL] import sys [EOL] [EOL] from OpenSSL import crypto [EOL] from twisted . internet . defer import Deferred , inlineCallbacks [EOL] from twisted . internet . protocol import Protocol , Factory [EOL] from twisted . internet import endpoints , reactor , ssl [EOL] from h2 . config import H2Configuration [EOL] from h2 . connection import H2Connection [EOL] from h2 . events import ( RequestReceived , DataReceived , WindowUpdated ) [EOL] [EOL] [EOL] def close_file ( file , d ) : [EOL] file . close ( ) [EOL] [EOL] [EOL] READ_CHUNK_SIZE = [number] [EOL] [EOL] [EOL] class H2Protocol ( Protocol ) : [EOL] def __init__ ( self , root ) : [EOL] config = H2Configuration ( client_side = False ) [EOL] self . conn = H2Connection ( config = config ) [EOL] self . known_proto = None [EOL] self . root = root [EOL] [EOL] self . _flow_control_deferreds = { } [EOL] [EOL] def connectionMade ( self ) : [EOL] self . conn . initiate_connection ( ) [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] def dataReceived ( self , data ) : [EOL] if not self . known_proto : [EOL] self . known_proto = True [EOL] [EOL] events = self . conn . receive_data ( data ) [EOL] if self . conn . data_to_send : [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] for event in events : [EOL] if isinstance ( event , RequestReceived ) : [EOL] self . requestReceived ( event . headers , event . stream_id ) [EOL] elif isinstance ( event , DataReceived ) : [EOL] self . dataFrameReceived ( event . stream_id ) [EOL] elif isinstance ( event , WindowUpdated ) : [EOL] self . windowUpdated ( event ) [EOL] [EOL] def requestReceived ( self , headers , stream_id ) : [EOL] headers = dict ( headers ) [comment] [EOL] assert headers [ [string] ] == [string] [EOL] [EOL] path = headers [ [string] ] . lstrip ( [string] ) [EOL] full_path = os . path . join ( self . root , path ) [EOL] [EOL] if not os . path . exists ( full_path ) : [EOL] response_headers = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] self . conn . send_headers ( stream_id , response_headers , end_stream = True ) [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] else : [EOL] self . sendFile ( full_path , stream_id ) [EOL] [EOL] return [EOL] [EOL] def dataFrameReceived ( self , stream_id ) : [EOL] self . conn . reset_stream ( stream_id ) [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] def sendFile ( self , file_path , stream_id ) : [EOL] filesize = os . stat ( file_path ) . st_size [EOL] content_type , content_encoding = mimetypes . guess_type ( file_path ) [EOL] response_headers = [ ( [string] , [string] ) , ( [string] , str ( filesize ) ) , ( [string] , [string] ) , ] [EOL] if content_type : [EOL] response_headers . append ( ( [string] , content_type ) ) [EOL] if content_encoding : [EOL] response_headers . append ( ( [string] , content_encoding ) ) [EOL] [EOL] self . conn . send_headers ( stream_id , response_headers ) [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] f = open ( file_path , [string] ) [EOL] d = self . _send_file ( f , stream_id ) [EOL] d . addErrback ( functools . partial ( close_file , f ) ) [EOL] [EOL] def windowUpdated ( self , event ) : [EOL] [docstring] [EOL] stream_id = event . stream_id [EOL] [EOL] if stream_id and stream_id in self . _flow_control_deferreds : [EOL] d = self . _flow_control_deferreds . pop ( stream_id ) [EOL] d . callback ( event . delta ) [EOL] elif not stream_id : [EOL] for d in self . _flow_control_deferreds . values ( ) : [EOL] d . callback ( event . delta ) [EOL] [EOL] self . _flow_control_deferreds = { } [EOL] [EOL] return [EOL] [EOL] @ inlineCallbacks def _send_file ( self , file , stream_id ) : [EOL] [docstring] [EOL] keep_reading = True [EOL] while keep_reading : [EOL] while not self . conn . remote_flow_control_window ( stream_id ) : [EOL] yield self . wait_for_flow_control ( stream_id ) [EOL] [EOL] chunk_size = min ( self . conn . remote_flow_control_window ( stream_id ) , READ_CHUNK_SIZE ) [EOL] data = file . read ( chunk_size ) [EOL] keep_reading = len ( data ) == chunk_size [EOL] self . conn . send_data ( stream_id , data , not keep_reading ) [EOL] self . transport . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] if not keep_reading : [EOL] break [EOL] [EOL] file . close ( ) [EOL] [EOL] def wait_for_flow_control ( self , stream_id ) : [EOL] [docstring] [EOL] d = Deferred ( ) [EOL] self . _flow_control_deferreds [ stream_id ] = d [EOL] return d [EOL] [EOL] [EOL] class H2Factory ( Factory ) : [EOL] def __init__ ( self , root ) : [EOL] self . root = root [EOL] [EOL] def buildProtocol ( self , addr ) : [EOL] return H2Protocol ( self . root ) [EOL] [EOL] [EOL] root = sys . argv [ [number] ] [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] cert_data = f . read ( ) [EOL] with open ( [string] , [string] ) as f : [EOL] key_data = f . read ( ) [EOL] [EOL] cert = crypto . load_certificate ( crypto . FILETYPE_PEM , cert_data ) [EOL] key = crypto . load_privatekey ( crypto . FILETYPE_PEM , key_data ) [EOL] options = ssl . CertificateOptions ( privateKey = key , certificate = cert , acceptableProtocols = [ [string] ] , ) [EOL] [EOL] endpoint = endpoints . SSL4ServerEndpoint ( reactor , [number] , options , backlog = [number] ) [EOL] endpoint . listen ( H2Factory ( root ) ) [EOL] reactor . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BufferedReader$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BufferedReader$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $io.BufferedReader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $OpenSSL.crypto.X509$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $OpenSSL.crypto.PKey$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $OpenSSL.crypto.PKey$ 0 0 0 $OpenSSL.crypto.X509$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Generator , Tuple , OrderedDict , Any , Literal [EOL] import server [EOL] import typing [EOL] import typing_extensions [EOL] import tools [EOL] import ssl [EOL] import collections [EOL] [docstring] [EOL] import collections [EOL] import json [EOL] import ssl [EOL] [EOL] import tornado . gen [EOL] import tornado . ioloop [EOL] import tornado . iostream [EOL] import tornado . tcpserver [EOL] [EOL] from h2 . config import H2Configuration [EOL] from h2 . connection import H2Connection [EOL] from h2 . events import RequestReceived , DataReceived [EOL] [EOL] [EOL] def create_ssl_context ( certfile , keyfile ) : [EOL] ssl_context = ssl . create_default_context ( ssl . Purpose . CLIENT_AUTH ) [EOL] ssl_context . options |= ( ssl . OP_NO_TLSv1 | ssl . OP_NO_TLSv1_1 | ssl . OP_NO_COMPRESSION ) [EOL] ssl_context . set_ciphers ( [string] ) [EOL] ssl_context . load_cert_chain ( certfile = certfile , keyfile = keyfile ) [EOL] ssl_context . set_alpn_protocols ( [ [string] ] ) [EOL] return ssl_context [EOL] [EOL] [EOL] class H2Server ( tornado . tcpserver . TCPServer ) : [EOL] [EOL] @ tornado . gen . coroutine def handle_stream ( self , stream , address ) : [EOL] handler = EchoHeadersHandler ( stream ) [EOL] yield handler . handle ( ) [EOL] [EOL] [EOL] class EchoHeadersHandler ( object ) : [EOL] [EOL] def __init__ ( self , stream ) : [EOL] self . stream = stream [EOL] [EOL] config = H2Configuration ( client_side = False ) [EOL] self . conn = H2Connection ( config = config ) [EOL] [EOL] @ tornado . gen . coroutine def handle ( self ) : [EOL] self . conn . initiate_connection ( ) [EOL] yield self . stream . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] while True : [EOL] try : [EOL] data = yield self . stream . read_bytes ( [number] , partial = True ) [EOL] if not data : [EOL] break [EOL] [EOL] events = self . conn . receive_data ( data ) [EOL] for event in events : [EOL] if isinstance ( event , RequestReceived ) : [EOL] self . request_received ( event . headers , event . stream_id ) [EOL] elif isinstance ( event , DataReceived ) : [EOL] self . conn . reset_stream ( event . stream_id ) [EOL] [EOL] yield self . stream . write ( self . conn . data_to_send ( ) ) [EOL] [EOL] except tornado . iostream . StreamClosedError : [EOL] break [EOL] [EOL] def request_received ( self , headers , stream_id ) : [EOL] headers = collections . OrderedDict ( headers ) [EOL] data = json . dumps ( { [string] : headers } , indent = [number] ) . encode ( [string] ) [EOL] [EOL] response_headers = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , str ( len ( data ) ) ) , ( [string] , [string] ) , ) [EOL] self . conn . send_headers ( stream_id , response_headers ) [EOL] self . conn . send_data ( stream_id , data , end_stream = True ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] ssl_context = create_ssl_context ( [string] , [string] ) [EOL] server = H2Server ( ssl_options = ssl_context ) [EOL] server . listen ( [number] ) [EOL] io_loop = tornado . ioloop . IOLoop . current ( ) [EOL] io_loop . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.h2.examples.tornado.tornado-server.EchoHeadersHandler$ 0 0 0 0 0 0 0 $tools.third_party.h2.examples.tornado.tornado-server.EchoHeadersHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from hypothesis import settings , HealthCheck [EOL] [EOL] import pytest [EOL] import helpers [EOL] [EOL] [comment] [EOL] settings . register_profile ( [string] , settings ( suppress_health_check = [ HealthCheck . too_slow ] ) ) [EOL] [EOL] [EOL] @ pytest . fixture def frame_factory ( ) : [EOL] return helpers . FrameFactory ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import pytest [EOL] [EOL] import h2 . errors [EOL] import h2 . exceptions [EOL] import h2 . settings [EOL] [EOL] from hypothesis import given , assume [EOL] from hypothesis . strategies import integers [EOL] [EOL] [EOL] class TestSettings ( object ) : [EOL] [docstring] [EOL] def test_settings_defaults_client ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . ENABLE_PUSH ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] == [number] [EOL] [EOL] def test_settings_defaults_server ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = False ) [EOL] [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . ENABLE_PUSH ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] == [number] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_can_set_initial_values ( self , client ) : [EOL] [docstring] [EOL] overrides = { h2 . settings . SettingCodes . HEADER_TABLE_SIZE : [number] , h2 . settings . SettingCodes . MAX_FRAME_SIZE : [number] , h2 . settings . SettingCodes . MAX_CONCURRENT_STREAMS : [number] , h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE : [number] ** [number] , } [EOL] s = h2 . settings . Settings ( client = client , initial_values = overrides ) [EOL] [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . ENABLE_PUSH ] == bool ( client ) [EOL] assert s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_CONCURRENT_STREAMS ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE ] == [number] ** [number] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( h2 . settings . SettingCodes . ENABLE_PUSH , [number] ) , ( h2 . settings . SettingCodes . ENABLE_PUSH , - [number] ) , ( h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE , - [number] ) , ( h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE , [number] ** [number] ) , ( h2 . settings . SettingCodes . MAX_FRAME_SIZE , [number] ) , ( h2 . settings . SettingCodes . MAX_FRAME_SIZE , [number] ** [number] ) , ( h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE , - [number] ) , ] ) def test_cannot_set_invalid_initial_values ( self , setting , value ) : [EOL] [docstring] [EOL] overrides = { setting : value } [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) : [EOL] h2 . settings . Settings ( initial_values = overrides ) [EOL] [EOL] def test_applying_value_doesnt_take_effect_immediately ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] [EOL] def test_acknowledging_values ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] old_settings = dict ( s ) [EOL] [EOL] new_settings = { h2 . settings . SettingCodes . HEADER_TABLE_SIZE : [number] , h2 . settings . SettingCodes . ENABLE_PUSH : [number] , h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE : [number] , h2 . settings . SettingCodes . MAX_FRAME_SIZE : [number] , } [EOL] s . update ( new_settings ) [EOL] [EOL] assert dict ( s ) == old_settings [EOL] s . acknowledge ( ) [EOL] assert dict ( s ) == new_settings [EOL] [EOL] def test_acknowledging_returns_the_changed_settings ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] = [number] [EOL] s [ h2 . settings . SettingCodes . ENABLE_PUSH ] = [number] [EOL] [EOL] changes = s . acknowledge ( ) [EOL] assert len ( changes ) == [number] [EOL] [EOL] table_size_change = ( changes [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] ) [EOL] push_change = changes [ h2 . settings . SettingCodes . ENABLE_PUSH ] [EOL] [EOL] assert table_size_change . setting == ( h2 . settings . SettingCodes . HEADER_TABLE_SIZE ) [EOL] assert table_size_change . original_value == [number] [EOL] assert table_size_change . new_value == [number] [EOL] [EOL] assert push_change . setting == h2 . settings . SettingCodes . ENABLE_PUSH [EOL] assert push_change . original_value == [number] [EOL] assert push_change . new_value == [number] [EOL] [EOL] def test_acknowledging_only_returns_changed_settings ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] = [number] [EOL] [EOL] changes = s . acknowledge ( ) [EOL] assert len ( changes ) == [number] [EOL] assert list ( changes . keys ( ) ) == [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] [EOL] [EOL] def test_deleting_values_deletes_all_of_them ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] [EOL] del s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] [EOL] [EOL] with pytest . raises ( KeyError ) : [EOL] s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] [EOL] [EOL] def test_length_correctly_reported ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] assert len ( s ) == [number] [EOL] [EOL] s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] assert len ( s ) == [number] [EOL] [EOL] s . acknowledge ( ) [EOL] assert len ( s ) == [number] [EOL] [EOL] del s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] [EOL] assert len ( s ) == [number] [EOL] [EOL] def test_new_values_work ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ [number] ] = [number] [EOL] [EOL] with pytest . raises ( KeyError ) : [EOL] s [ [number] ] [EOL] [EOL] def test_new_values_follow_basic_acknowledgement_rules ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] s [ [number] ] = [number] [EOL] changed_settings = s . acknowledge ( ) [EOL] [EOL] assert s [ [number] ] == [number] [EOL] assert len ( changed_settings ) == [number] [EOL] [EOL] changed = changed_settings [ [number] ] [EOL] assert changed . setting == [number] [EOL] assert changed . original_value is None [EOL] assert changed . new_value == [number] [EOL] [EOL] def test_single_values_arent_affected_by_acknowledgement ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] [EOL] s . acknowledge ( ) [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] [EOL] def test_settings_getters ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] [EOL] assert s . header_table_size == ( s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] ) [EOL] assert s . enable_push == s [ h2 . settings . SettingCodes . ENABLE_PUSH ] [EOL] assert s . initial_window_size == ( s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] ) [EOL] assert s . max_frame_size == s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] [EOL] assert s . max_concurrent_streams == [number] ** [number] + [number] [comment] [EOL] assert s . max_header_list_size is None [EOL] [EOL] def test_settings_setters ( self ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( client = True ) [EOL] [EOL] s . header_table_size = [number] [EOL] s . enable_push = [number] [EOL] s . initial_window_size = [number] [EOL] s . max_frame_size = [number] [EOL] s . max_concurrent_streams = [number] [EOL] s . max_header_list_size = [number] ** [number] [EOL] [EOL] s . acknowledge ( ) [EOL] assert s [ h2 . settings . SettingCodes . HEADER_TABLE_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . ENABLE_PUSH ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_CONCURRENT_STREAMS ] == [number] [EOL] assert s [ h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE ] == [number] ** [number] [EOL] [EOL] @ given ( integers ( ) ) def test_cannot_set_invalid_values_for_enable_push ( self , val ) : [EOL] [docstring] [EOL] assume ( val not in ( [number] , [number] ) ) [EOL] s = h2 . settings . Settings ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s . enable_push = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] assert s . enable_push == [number] [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s [ h2 . settings . SettingCodes . ENABLE_PUSH ] = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] assert s [ h2 . settings . SettingCodes . ENABLE_PUSH ] == [number] [EOL] [EOL] @ given ( integers ( ) ) def test_cannot_set_invalid_vals_for_initial_window_size ( self , val ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( ) [EOL] [EOL] if [number] <= val <= [number] ** [number] - [number] : [EOL] s . initial_window_size = val [EOL] s . acknowledge ( ) [EOL] assert s . initial_window_size == val [EOL] else : [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s . initial_window_size = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert ( e . value . error_code == h2 . errors . ErrorCodes . FLOW_CONTROL_ERROR ) [EOL] assert s . initial_window_size == [number] [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert ( e . value . error_code == h2 . errors . ErrorCodes . FLOW_CONTROL_ERROR ) [EOL] assert s [ h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE ] == [number] [EOL] [EOL] @ given ( integers ( ) ) def test_cannot_set_invalid_values_for_max_frame_size ( self , val ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( ) [EOL] [EOL] if [number] ** [number] <= val <= [number] ** [number] - [number] : [EOL] s . max_frame_size = val [EOL] s . acknowledge ( ) [EOL] assert s . max_frame_size == val [EOL] else : [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s . max_frame_size = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] assert s . max_frame_size == [number] [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] assert s [ h2 . settings . SettingCodes . MAX_FRAME_SIZE ] == [number] [EOL] [EOL] @ given ( integers ( ) ) def test_cannot_set_invalid_values_for_max_header_list_size ( self , val ) : [EOL] [docstring] [EOL] s = h2 . settings . Settings ( ) [EOL] [EOL] if val >= [number] : [EOL] s . max_header_list_size = val [EOL] s . acknowledge ( ) [EOL] assert s . max_header_list_size == val [EOL] else : [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s . max_header_list_size = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] assert s . max_header_list_size is None [EOL] [EOL] with pytest . raises ( h2 . exceptions . InvalidSettingsValueError ) as e : [EOL] s [ h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE ] = val [EOL] [EOL] s . acknowledge ( ) [EOL] assert e . value . error_code == h2 . errors . ErrorCodes . PROTOCOL_ERROR [EOL] [EOL] with pytest . raises ( KeyError ) : [EOL] s [ h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE ] [EOL] [EOL] [EOL] class TestSettingsEquality ( object ) : [EOL] [docstring] [EOL] [EOL] def an_instance ( self ) : [EOL] [docstring] [EOL] overrides = { h2 . settings . SettingCodes . HEADER_TABLE_SIZE : [number] , h2 . settings . SettingCodes . MAX_FRAME_SIZE : [number] , h2 . settings . SettingCodes . MAX_CONCURRENT_STREAMS : [number] , h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE : [number] ** [number] , } [EOL] return h2 . settings . Settings ( client = True , initial_values = overrides ) [EOL] [EOL] def another_instance ( self ) : [EOL] [docstring] [EOL] overrides = { h2 . settings . SettingCodes . HEADER_TABLE_SIZE : [number] , h2 . settings . SettingCodes . MAX_FRAME_SIZE : [number] , h2 . settings . SettingCodes . MAX_CONCURRENT_STREAMS : [number] , h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE : [number] ** [number] , } [EOL] return h2 . settings . Settings ( client = False , initial_values = overrides ) [EOL] [EOL] def test_identical_eq ( self ) : [EOL] [docstring] [EOL] o = self . an_instance ( ) [EOL] assert ( o == o ) [EOL] [EOL] def test_identical_ne ( self ) : [EOL] [docstring] [EOL] o = self . an_instance ( ) [EOL] assert not ( o != o ) [EOL] [EOL] def test_same_eq ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = self . an_instance ( ) [EOL] assert ( a == b ) [EOL] [EOL] def test_same_ne ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = self . an_instance ( ) [EOL] assert not ( a != b ) [EOL] [EOL] def test_different_eq ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = self . another_instance ( ) [EOL] assert not ( a == b ) [EOL] [EOL] def test_different_ne ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = self . another_instance ( ) [EOL] assert ( a != b ) [EOL] [EOL] def test_another_type_eq ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = object ( ) [EOL] assert not ( a == b ) [EOL] [EOL] def test_another_type_ne ( self ) : [EOL] [docstring] [EOL] a = self . an_instance ( ) [EOL] b = object ( ) [EOL] assert ( a != b ) [EOL] [EOL] def test_delegated_eq ( self ) : [EOL] [docstring] [EOL] class Delegate ( object ) : [EOL] def __eq__ ( self , other ) : [EOL] return [ self ] [EOL] [EOL] a = self . an_instance ( ) [EOL] b = Delegate ( ) [EOL] assert ( a == b ) == [ b ] [EOL] [EOL] def test_delegate_ne ( self ) : [EOL] [docstring] [EOL] class Delegate ( object ) : [EOL] def __ne__ ( self , other ) : [EOL] return [ self ] [EOL] [EOL] a = self . an_instance ( ) [EOL] b = Delegate ( ) [EOL] assert ( a != b ) == [ b ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[unknown,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[unknown,builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[unknown,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegated_eq.Delegate$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegated_eq.Delegate$ 0 0 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegated_eq.Delegate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegate_ne.Delegate$ 0 0 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegate_ne.Delegate$ 0 0 0 $tools.third_party.h2.test.test_settings.TestSettingsEquality.test_delegate_ne.Delegate$ 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import h2 . exceptions [EOL] [EOL] [EOL] class TestExceptions ( object ) : [EOL] def test_stream_id_too_low_prints_properly ( self ) : [EOL] x = h2 . exceptions . StreamIDTooLowError ( [number] , [number] ) [EOL] [EOL] assert [string] == str ( x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] [docstring] [EOL] import inspect [EOL] import sys [EOL] [EOL] from hypothesis import given [EOL] from hypothesis . strategies import ( integers , lists , tuples ) [EOL] import pytest [EOL] [EOL] import h2 . errors [EOL] import h2 . events [EOL] import h2 . settings [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] SETTINGS_STRATEGY = lists ( tuples ( integers ( min_value = [number] , max_value = [number] ** [number] - [number] ) , integers ( min_value = [number] , max_value = [number] ** [number] - [number] ) , ) ) [EOL] [EOL] [EOL] class TestRemoteSettingsChanged ( object ) : [EOL] [docstring] [EOL] @ given ( SETTINGS_STRATEGY ) def test_building_settings_from_scratch ( self , settings_list ) : [EOL] [docstring] [EOL] settings_dict = dict ( settings_list ) [EOL] e = h2 . events . RemoteSettingsChanged . from_settings ( old_settings = { } , new_settings = settings_dict , ) [EOL] [EOL] for setting , new_value in settings_dict . items ( ) : [EOL] assert e . changed_settings [ setting ] . setting == setting [EOL] assert e . changed_settings [ setting ] . original_value is None [EOL] assert e . changed_settings [ setting ] . new_value == new_value [EOL] [EOL] @ given ( SETTINGS_STRATEGY , SETTINGS_STRATEGY ) def test_only_reports_changed_settings ( self , old_settings_list , new_settings_list ) : [EOL] [docstring] [EOL] old_settings_dict = dict ( old_settings_list ) [EOL] new_settings_dict = dict ( new_settings_list ) [EOL] e = h2 . events . RemoteSettingsChanged . from_settings ( old_settings = old_settings_dict , new_settings = new_settings_dict , ) [EOL] [EOL] assert len ( e . changed_settings ) == len ( new_settings_dict ) [EOL] assert ( sorted ( list ( e . changed_settings . keys ( ) ) ) == sorted ( list ( new_settings_dict . keys ( ) ) ) ) [EOL] [EOL] @ given ( SETTINGS_STRATEGY , SETTINGS_STRATEGY ) def test_correctly_reports_changed_settings ( self , old_settings_list , new_settings_list ) : [EOL] [docstring] [EOL] old_settings_dict = dict ( old_settings_list ) [EOL] new_settings_dict = dict ( new_settings_list ) [EOL] e = h2 . events . RemoteSettingsChanged . from_settings ( old_settings = old_settings_dict , new_settings = new_settings_dict , ) [EOL] [EOL] for setting , new_value in new_settings_dict . items ( ) : [EOL] original_value = old_settings_dict . get ( setting ) [EOL] assert e . changed_settings [ setting ] . setting == setting [EOL] assert e . changed_settings [ setting ] . original_value == original_value [EOL] assert e . changed_settings [ setting ] . new_value == new_value [EOL] [EOL] [EOL] class TestEventReprs ( object ) : [EOL] [docstring] [EOL] example_request_headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] example_informational_headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] example_response_headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] def test_requestreceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . RequestReceived ( ) [EOL] e . stream_id = [number] [EOL] e . headers = self . example_request_headers [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] [string] [string] ) [EOL] [EOL] def test_responsereceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . ResponseReceived ( ) [EOL] e . stream_id = [number] [EOL] e . headers = self . example_response_headers [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] ) [EOL] [EOL] def test_trailersreceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . TrailersReceived ( ) [EOL] e . stream_id = [number] [EOL] e . headers = self . example_response_headers [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] ) [EOL] [EOL] def test_informationalresponsereceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . InformationalResponseReceived ( ) [EOL] e . stream_id = [number] [EOL] e . headers = self . example_informational_headers [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] ) [EOL] [EOL] def test_datareceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . DataReceived ( ) [EOL] e . stream_id = [number] [EOL] e . data = [string] [EOL] e . flow_controlled_length = [number] [EOL] [EOL] assert repr ( e ) == ( [string] [string] ) [EOL] [EOL] def test_windowupdated_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . WindowUpdated ( ) [EOL] e . stream_id = [number] [EOL] e . delta = [number] ** [number] [EOL] [EOL] assert repr ( e ) == [string] [EOL] [EOL] def test_remotesettingschanged_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . RemoteSettingsChanged ( ) [EOL] e . changed_settings = { h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE : h2 . settings . ChangedSetting ( h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE , [number] ** [number] , [number] ** [number] ) , } [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] ) [EOL] [EOL] def test_pingacknowledged_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . PingAcknowledged ( ) [EOL] e . ping_data = [string] [EOL] [EOL] assert repr ( e ) == [string] [EOL] [EOL] def test_streamended_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . StreamEnded ( ) [EOL] e . stream_id = [number] [EOL] [EOL] assert repr ( e ) == [string] [EOL] [EOL] def test_streamreset_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . StreamReset ( ) [EOL] e . stream_id = [number] [EOL] e . error_code = h2 . errors . ErrorCodes . ENHANCE_YOUR_CALM [EOL] e . remote_reset = False [EOL] [EOL] assert repr ( e ) == ( [string] [string] ) [EOL] [EOL] def test_pushedstreamreceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . PushedStreamReceived ( ) [EOL] e . pushed_stream_id = [number] [EOL] e . parent_stream_id = [number] [EOL] e . headers = self . example_request_headers [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] def test_settingsacknowledged_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . SettingsAcknowledged ( ) [EOL] e . changed_settings = { h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE : h2 . settings . ChangedSetting ( h2 . settings . SettingCodes . INITIAL_WINDOW_SIZE , [number] ** [number] , [number] ** [number] ) , } [EOL] [EOL] assert repr ( e ) == ( [string] [string] [string] ) [EOL] [EOL] def test_priorityupdated_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . PriorityUpdated ( ) [EOL] e . stream_id = [number] [EOL] e . weight = [number] [EOL] e . depends_on = [number] [EOL] e . exclusive = True [EOL] [EOL] assert repr ( e ) == ( [string] [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( None , [string] ) , ( [string] , [string] ) ] ) def test_connectionterminated_repr ( self , additional_data , data_repr ) : [EOL] [docstring] [EOL] e = h2 . events . ConnectionTerminated ( ) [EOL] e . error_code = h2 . errors . ErrorCodes . INADEQUATE_SECURITY [EOL] e . last_stream_id = [number] [EOL] e . additional_data = additional_data [EOL] [EOL] assert repr ( e ) == ( [string] [string] % data_repr ) [EOL] [EOL] def test_alternativeserviceavailable_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . AlternativeServiceAvailable ( ) [EOL] e . origin = [string] [EOL] e . field_value = [string] [EOL] [EOL] assert repr ( e ) == ( [string] [string] ) [EOL] [EOL] def test_unknownframereceived_repr ( self ) : [EOL] [docstring] [EOL] e = h2 . events . UnknownFrameReceived ( ) [EOL] assert repr ( e ) == [string] [EOL] [EOL] [EOL] def all_events ( ) : [EOL] [docstring] [EOL] for _ , obj in inspect . getmembers ( sys . modules [ [string] ] ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( obj , [string] ) and ( obj . __module__ != [string] ) : [EOL] continue [EOL] [EOL] if inspect . isclass ( obj ) : [EOL] yield obj [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , all_events ( ) ) def test_all_events_subclass_from_event ( event ) : [EOL] [docstring] [EOL] assert ( event is h2 . events . Event ) or issubclass ( event , h2 . events . Event ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List , Type [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import pytest [EOL] [EOL] import h2 . config [EOL] import h2 . connection [EOL] import h2 . errors [EOL] import h2 . events [EOL] import h2 . exceptions [EOL] [EOL] [EOL] class TestInvalidContentLengths ( object ) : [EOL] [docstring] [EOL] example_request_headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] example_response_headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] server_config = h2 . config . H2Configuration ( client_side = False ) [EOL] [EOL] def test_too_much_data ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] headers = frame_factory . build_headers_frame ( headers = self . example_request_headers ) [EOL] first_data = frame_factory . build_data_frame ( data = [string] * [number] ) [EOL] c . receive_data ( headers . serialize ( ) + first_data . serialize ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] second_data = frame_factory . build_data_frame ( data = [string] ) [EOL] with pytest . raises ( h2 . exceptions . InvalidBodyLengthError ) as exp : [EOL] c . receive_data ( second_data . serialize ( ) ) [EOL] [EOL] assert exp . value . expected_length == [number] [EOL] assert exp . value . actual_length == [number] [EOL] assert str ( exp . value ) == ( [string] ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR , ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_insufficient_data ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] headers = frame_factory . build_headers_frame ( headers = self . example_request_headers ) [EOL] first_data = frame_factory . build_data_frame ( data = [string] * [number] ) [EOL] c . receive_data ( headers . serialize ( ) + first_data . serialize ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] second_data = frame_factory . build_data_frame ( data = [string] , flags = [ [string] ] , ) [EOL] with pytest . raises ( h2 . exceptions . InvalidBodyLengthError ) as exp : [EOL] c . receive_data ( second_data . serialize ( ) ) [EOL] [EOL] assert exp . value . expected_length == [number] [EOL] assert exp . value . actual_length == [number] [EOL] assert str ( exp . value ) == ( [string] ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR , ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_insufficient_data_empty_frame ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] headers = frame_factory . build_headers_frame ( headers = self . example_request_headers ) [EOL] first_data = frame_factory . build_data_frame ( data = [string] * [number] ) [EOL] c . receive_data ( headers . serialize ( ) + first_data . serialize ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] second_data = frame_factory . build_data_frame ( data = [string] , flags = [ [string] ] , ) [EOL] with pytest . raises ( h2 . exceptions . InvalidBodyLengthError ) as exp : [EOL] c . receive_data ( second_data . serialize ( ) ) [EOL] [EOL] assert exp . value . expected_length == [number] [EOL] assert exp . value . actual_length == [number] [EOL] assert str ( exp . value ) == ( [string] ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR , ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.h2.test.test_invalid_content_lengths.TestInvalidContentLengths]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List , Type [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import itertools [EOL] [EOL] import pytest [EOL] [EOL] import h2 . config [EOL] import h2 . connection [EOL] import h2 . errors [EOL] import h2 . events [EOL] import h2 . exceptions [EOL] import h2 . settings [EOL] import h2 . utilities [EOL] [EOL] import hyperframe . frame [EOL] [EOL] from hypothesis import given [EOL] from hypothesis . strategies import binary , lists , tuples [EOL] [EOL] HEADERS_STRATEGY = lists ( tuples ( binary ( min_size = [number] ) , binary ( ) ) ) [EOL] [EOL] [EOL] class TestInvalidFrameSequences ( object ) : [EOL] [docstring] [EOL] base_request_headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] invalid_header_blocks = [ base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , [ ( [string] , [string] ) ] + base_request_headers , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , [ header for header in base_request_headers if header [ [number] ] != [string] ] , ] [EOL] server_config = h2 . config . H2Configuration ( client_side = False , header_encoding = [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_headers_event ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_headers_frame ( headers ) [EOL] data = f . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_push_promise_event ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( ) [EOL] c . initiate_connection ( ) [EOL] c . send_headers ( stream_id = [number] , headers = self . base_request_headers , end_stream = True ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_push_promise_frame ( stream_id = [number] , promised_stream_id = [number] , headers = headers ) [EOL] data = f . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_push_promise_skipping_validation ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( client_side = True , validate_inbound_headers = False , header_encoding = [string] ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . initiate_connection ( ) [EOL] c . send_headers ( stream_id = [number] , headers = self . base_request_headers , end_stream = True ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_push_promise_frame ( stream_id = [number] , promised_stream_id = [number] , headers = headers ) [EOL] data = f . serialize ( ) [EOL] [EOL] events = c . receive_data ( data ) [EOL] assert len ( events ) == [number] [EOL] pp_event = events [ [number] ] [EOL] assert pp_event . headers == headers [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_headers_event_skipping_validation ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( client_side = False , validate_inbound_headers = False , header_encoding = [string] ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] f = frame_factory . build_headers_frame ( headers ) [EOL] data = f . serialize ( ) [EOL] [EOL] events = c . receive_data ( data ) [EOL] assert len ( events ) == [number] [EOL] request_event = events [ [number] ] [EOL] assert request_event . headers == headers [EOL] [EOL] def test_transfer_encoding_trailers_is_valid ( self , frame_factory ) : [EOL] [docstring] [EOL] headers = ( self . base_request_headers + [ ( [string] , [string] ) ] ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] f = frame_factory . build_headers_frame ( headers ) [EOL] data = f . serialize ( ) [EOL] [EOL] events = c . receive_data ( data ) [EOL] assert len ( events ) == [number] [EOL] request_event = events [ [number] ] [EOL] assert request_event . headers == headers [EOL] [EOL] def test_pseudo_headers_rejected_in_trailer ( self , frame_factory ) : [EOL] [docstring] [EOL] trailers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] header_frame = frame_factory . build_headers_frame ( self . base_request_headers ) [EOL] trailer_frame = frame_factory . build_headers_frame ( trailers , flags = [ [string] ] ) [EOL] head = header_frame . serialize ( ) [EOL] trailer = trailer_frame . serialize ( ) [EOL] [EOL] c . receive_data ( head ) [EOL] [comment] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) as e : [EOL] c . receive_data ( trailer ) [EOL] assert [string] in str ( e ) [EOL] [EOL] [comment] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] [EOL] class TestSendingInvalidFrameSequences ( object ) : [EOL] [docstring] [EOL] base_request_headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] invalid_header_blocks = [ base_request_headers + [ ( [string] , [string] ) ] , [ ( [string] , [string] ) ] + base_request_headers , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , [ header for header in base_request_headers if header [ [number] ] != [string] ] , ] [EOL] strippable_header_blocks = [ base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] , base_request_headers + [ ( [string] , [string] ) ] ] [EOL] all_header_blocks = invalid_header_blocks + strippable_header_blocks [EOL] [EOL] server_config = h2 . config . H2Configuration ( client_side = False ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_headers_event ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( ) [EOL] c . initiate_connection ( ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . send_headers ( [number] , headers ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , invalid_header_blocks ) def test_send_push_promise ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] header_frame = frame_factory . build_headers_frame ( self . base_request_headers ) [EOL] c . receive_data ( header_frame . serialize ( ) ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . push_stream ( stream_id = [number] , promised_stream_id = [number] , request_headers = headers ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , all_header_blocks ) def test_headers_event_skipping_validation ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( validate_outbound_headers = False ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . initiate_connection ( ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] c . send_headers ( [number] , headers ) [EOL] [EOL] [comment] [EOL] norm_headers = h2 . utilities . normalize_outbound_headers ( headers , None ) [EOL] f = frame_factory . build_headers_frame ( norm_headers ) [EOL] assert c . data_to_send ( ) == f . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , all_header_blocks ) def test_push_promise_skipping_validation ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( client_side = False , validate_outbound_headers = False , ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] header_frame = frame_factory . build_headers_frame ( self . base_request_headers ) [EOL] c . receive_data ( header_frame . serialize ( ) ) [EOL] [EOL] [comment] [EOL] frame_factory . refresh_encoder ( ) [EOL] norm_headers = h2 . utilities . normalize_outbound_headers ( headers , None ) [EOL] pp_frame = frame_factory . build_push_promise_frame ( stream_id = [number] , promised_stream_id = [number] , headers = norm_headers ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] c . push_stream ( stream_id = [number] , promised_stream_id = [number] , request_headers = headers ) [EOL] assert c . data_to_send ( ) == pp_frame . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , all_header_blocks ) def test_headers_event_skip_normalization ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( validate_outbound_headers = False , normalize_outbound_headers = False ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . initiate_connection ( ) [EOL] [EOL] f = frame_factory . build_headers_frame ( headers , stream_id = [number] , ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] c . send_headers ( [number] , headers ) [EOL] assert c . data_to_send ( ) == f . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , all_header_blocks ) def test_push_promise_skip_normalization ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] config = h2 . config . H2Configuration ( client_side = False , validate_outbound_headers = False , normalize_outbound_headers = False , ) [EOL] [EOL] c = h2 . connection . H2Connection ( config = config ) [EOL] c . initiate_connection ( ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] [EOL] header_frame = frame_factory . build_headers_frame ( self . base_request_headers ) [EOL] c . receive_data ( header_frame . serialize ( ) ) [EOL] [EOL] frame_factory . refresh_encoder ( ) [EOL] pp_frame = frame_factory . build_push_promise_frame ( stream_id = [number] , promised_stream_id = [number] , headers = headers ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] c . push_stream ( stream_id = [number] , promised_stream_id = [number] , request_headers = headers ) [EOL] assert c . data_to_send ( ) == pp_frame . serialize ( ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , strippable_header_blocks ) def test_strippable_headers ( self , frame_factory , headers ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( ) [EOL] c . initiate_connection ( ) [EOL] [EOL] [comment] [EOL] c . clear_outbound_data_buffer ( ) [EOL] c . send_headers ( [number] , headers ) [EOL] [EOL] f = frame_factory . build_headers_frame ( self . base_request_headers ) [EOL] assert c . data_to_send ( ) == f . serialize ( ) [EOL] [EOL] [EOL] class TestFilter ( object ) : [EOL] [docstring] [EOL] validation_functions = [ h2 . utilities . validate_headers , h2 . utilities . validate_outbound_headers ] [EOL] [EOL] hdr_validation_combos = [ h2 . utilities . HeaderValidationFlags ( is_client , is_trailer , is_response_header , is_push_promise ) for is_client , is_trailer , is_response_header , is_push_promise in ( itertools . product ( [ True , False ] , repeat = [number] ) ) ] [EOL] [EOL] hdr_validation_response_headers = [ flags for flags in hdr_validation_combos if flags . is_response_header ] [EOL] [EOL] hdr_validation_request_headers_no_trailer = [ flags for flags in hdr_validation_combos if not ( flags . is_trailer or flags . is_response_header ) ] [EOL] [EOL] invalid_request_header_blocks_bytes = ( ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ) [EOL] invalid_request_header_blocks_unicode = ( ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) , ) [EOL] [EOL] [comment] [EOL] forbidden_request_headers_bytes = ( [string] , ) [EOL] forbidden_request_headers_unicode = ( [string] , ) [EOL] forbidden_response_headers_bytes = ( [string] , [string] , [string] , [string] ) [EOL] forbidden_response_headers_unicode = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , validation_functions ) @ pytest . mark . parametrize ( [string] , hdr_validation_combos ) @ given ( headers = HEADERS_STRATEGY ) def test_range_of_acceptable_outputs ( self , headers , validation_function , hdr_validation_flags ) : [EOL] [docstring] [EOL] try : [EOL] assert headers == list ( validation_function ( headers , hdr_validation_flags ) ) [EOL] except h2 . exceptions . ProtocolError : [EOL] assert True [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_combos ) def test_invalid_pseudo_headers ( self , hdr_validation_flags ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , validation_functions ) @ pytest . mark . parametrize ( [string] , hdr_validation_request_headers_no_trailer ) def test_matching_authority_host_headers ( self , validation_function , hdr_validation_flags ) : [EOL] [docstring] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] assert headers == list ( h2 . utilities . validate_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_response_headers ) def test_response_header_without_status ( self , hdr_validation_flags ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_request_headers_no_trailer ) @ pytest . mark . parametrize ( [string] , ( invalid_request_header_blocks_bytes + invalid_request_header_blocks_unicode ) ) def test_outbound_req_header_missing_pseudo_headers ( self , hdr_validation_flags , header_block ) : [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_outbound_headers ( header_block , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_request_headers_no_trailer ) @ pytest . mark . parametrize ( [string] , invalid_request_header_blocks_bytes ) def test_inbound_req_header_missing_pseudo_headers ( self , hdr_validation_flags , header_block ) : [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_headers ( header_block , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_request_headers_no_trailer ) @ pytest . mark . parametrize ( [string] , forbidden_request_headers_bytes + forbidden_request_headers_unicode ) def test_outbound_req_header_extra_pseudo_headers ( self , hdr_validation_flags , invalid_header ) : [EOL] [docstring] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] headers . append ( ( invalid_header , [string] ) ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_outbound_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_request_headers_no_trailer ) @ pytest . mark . parametrize ( [string] , forbidden_request_headers_bytes ) def test_inbound_req_header_extra_pseudo_headers ( self , hdr_validation_flags , invalid_header ) : [EOL] [docstring] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] headers . append ( ( invalid_header , [string] ) ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_response_headers ) @ pytest . mark . parametrize ( [string] , forbidden_response_headers_bytes + forbidden_response_headers_unicode ) def test_outbound_resp_header_extra_pseudo_headers ( self , hdr_validation_flags , invalid_header ) : [EOL] [docstring] [EOL] headers = [ ( [string] , [string] ) ] [EOL] headers . append ( ( invalid_header , [string] ) ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_outbound_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , hdr_validation_response_headers ) @ pytest . mark . parametrize ( [string] , forbidden_response_headers_bytes ) def test_inbound_resp_header_extra_pseudo_headers ( self , hdr_validation_flags , invalid_header ) : [EOL] [docstring] [EOL] headers = [ ( [string] , [string] ) ] [EOL] headers . append ( ( invalid_header , [string] ) ) [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] list ( h2 . utilities . validate_headers ( headers , hdr_validation_flags ) ) [EOL] [EOL] [EOL] class TestOversizedHeaders ( object ) : [EOL] [docstring] [EOL] request_header_block = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] response_header_block = [ ( [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] first_header_block = [ ( [string] , [string] * [number] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] second_header_block = [string] * [number] ** [number] [EOL] [EOL] server_config = h2 . config . H2Configuration ( client_side = False ) [EOL] [EOL] def test_hpack_bomb_request ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_headers_frame ( self . request_header_block + self . first_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] attack_frame = hyperframe . frame . HeadersFrame ( stream_id = [number] ) [EOL] attack_frame . data = self . second_header_block [EOL] attack_frame . flags . add ( [string] ) [EOL] data = attack_frame . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . DenialOfServiceError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . ENHANCE_YOUR_CALM ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_hpack_bomb_response ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( ) [EOL] c . initiate_connection ( ) [EOL] c . send_headers ( stream_id = [number] , headers = self . request_header_block ) [EOL] c . send_headers ( stream_id = [number] , headers = self . request_header_block ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_headers_frame ( self . response_header_block + self . first_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] attack_frame = hyperframe . frame . HeadersFrame ( stream_id = [number] ) [EOL] attack_frame . data = self . second_header_block [EOL] attack_frame . flags . add ( [string] ) [EOL] data = attack_frame . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . DenialOfServiceError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . ENHANCE_YOUR_CALM ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_hpack_bomb_push ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( ) [EOL] c . initiate_connection ( ) [EOL] c . send_headers ( stream_id = [number] , headers = self . request_header_block ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] f = frame_factory . build_headers_frame ( self . response_header_block + self . first_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] attack_frame = hyperframe . frame . PushPromiseFrame ( stream_id = [number] ) [EOL] attack_frame . promised_stream_id = [number] [EOL] attack_frame . data = self . second_header_block [ : - [number] ] [EOL] attack_frame . flags . add ( [string] ) [EOL] data = attack_frame . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . DenialOfServiceError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . ENHANCE_YOUR_CALM ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_reject_headers_when_list_size_shrunk ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] c . update_settings ( { h2 . settings . SettingCodes . MAX_HEADER_LIST_SIZE : [number] } ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_settings_frame ( { } , ack = True ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . DenialOfServiceError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . ENHANCE_YOUR_CALM ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_reject_headers_when_table_size_shrunk ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] c . update_settings ( { h2 . settings . SettingCodes . HEADER_TABLE_SIZE : [number] } ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_settings_frame ( { } , ack = True ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL] [EOL] def test_reject_headers_exceeding_table_size ( self , frame_factory ) : [EOL] [docstring] [EOL] c = h2 . connection . H2Connection ( config = self . server_config ) [EOL] c . receive_data ( frame_factory . preamble ( ) ) [EOL] c . clear_outbound_data_buffer ( ) [EOL] [EOL] [comment] [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] c . receive_data ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] frame_factory . change_table_size ( c . local_settings . header_table_size + [number] ) [EOL] f = frame_factory . build_headers_frame ( stream_id = [number] , headers = self . request_header_block ) [EOL] data = f . serialize ( ) [EOL] [EOL] with pytest . raises ( h2 . exceptions . ProtocolError ) : [EOL] c . receive_data ( data ) [EOL] [EOL] expected_frame = frame_factory . build_goaway_frame ( last_stream_id = [number] , error_code = h2 . errors . ErrorCodes . PROTOCOL_ERROR ) [EOL] assert c . data_to_send ( ) == expected_frame . serialize ( ) [EOL]	typing.Type[tools.third_party.h2.test.test_invalid_headers.TestOversizedHeaders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from typing import List , Iterator , Type , Tuple , Any , Set , Dict [EOL] import typing [EOL] import tools [EOL] from hpack . hpack import Encoder , Decoder , _dict_to_iterable , _to_bytes [EOL] from hpack . exceptions import ( HPACKDecodingError , InvalidTableIndex , OversizedHeaderListError , InvalidTableSizeError ) [EOL] from hpack . struct import HeaderTuple , NeverIndexedHeaderTuple [EOL] import itertools [EOL] import pytest [EOL] [EOL] from hypothesis import given [EOL] from hypothesis . strategies import text , binary , sets , one_of [EOL] [EOL] try : [EOL] unicode = unicode [EOL] except NameError : [EOL] unicode = str [EOL] [EOL] [EOL] class TestHPACKEncoder ( object ) : [EOL] [comment] [EOL] def test_literal_header_field_with_indexing ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] header_set = { [string] : [string] } [EOL] result = [string] [EOL] [EOL] assert e . encode ( header_set , huffman = False ) == result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in header_set . items ( ) ] [EOL] [EOL] def test_sensitive_headers ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] result = ( [string] + [string] + [string] + [string] + [string] ) [EOL] header_set = [ ( [string] , [string] , True ) , ( [string] , [string] , True ) , ( [string] , [string] , True ) , ] [EOL] assert e . encode ( header_set , huffman = True ) == result [EOL] [EOL] def test_non_sensitive_headers_with_header_tuples ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] result = ( [string] + [string] + [string] + [string] + [string] ) [EOL] header_set = [ HeaderTuple ( [string] , [string] ) , HeaderTuple ( [string] , [string] ) , HeaderTuple ( [string] , [string] ) , ] [EOL] assert e . encode ( header_set , huffman = True ) == result [EOL] [EOL] def test_sensitive_headers_with_header_tuples ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] result = ( [string] + [string] + [string] + [string] + [string] ) [EOL] header_set = [ NeverIndexedHeaderTuple ( [string] , [string] ) , NeverIndexedHeaderTuple ( [string] , [string] ) , NeverIndexedHeaderTuple ( [string] , [string] ) , ] [EOL] assert e . encode ( header_set , huffman = True ) == result [EOL] [EOL] def test_header_table_size_getter ( self ) : [EOL] e = Encoder ( ) [EOL] assert e . header_table_size == [number] [EOL] [EOL] def test_indexed_literal_header_field_with_indexing ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] header_set = { [string] : [string] } [EOL] result = [string] [EOL] [EOL] assert e . encode ( header_set , huffman = False ) == result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in header_set . items ( ) ] [EOL] [EOL] def test_indexed_header_field ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] header_set = { [string] : [string] } [EOL] result = [string] [EOL] [EOL] assert e . encode ( header_set , huffman = False ) == result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ] [EOL] [EOL] def test_indexed_header_field_from_static_table ( self ) : [EOL] e = Encoder ( ) [EOL] e . header_table_size = [number] [EOL] header_set = { [string] : [string] } [EOL] result = [string] [EOL] [EOL] [comment] [EOL] e . header_table . resized = False [EOL] [EOL] assert e . encode ( header_set , huffman = False ) == result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ] [EOL] [EOL] def test_request_examples_without_huffman ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] first_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] [comment] [EOL] first_header_table = [ ( [string] , [string] ) ] [EOL] first_result = [string] [EOL] [EOL] assert e . encode ( first_header_set , huffman = False ) == first_result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in first_header_table ] [EOL] [EOL] second_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] second_header_table = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] second_result = [string] [EOL] [EOL] assert e . encode ( second_header_set , huffman = False ) == second_result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in second_header_table ] [EOL] [EOL] third_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] third_result = ( [string] ) [EOL] [EOL] assert e . encode ( third_header_set , huffman = False ) == third_result [EOL] [comment] [EOL] [comment] [EOL] assert len ( e . header_table . dynamic_entries ) == [number] [EOL] [EOL] def test_request_examples_with_huffman ( self ) : [EOL] [docstring] [EOL] e = Encoder ( ) [EOL] first_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] first_header_table = [ ( [string] , [string] ) ] [EOL] first_result = ( [string] ) [EOL] [EOL] assert e . encode ( first_header_set , huffman = True ) == first_result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in first_header_table ] [EOL] [EOL] second_header_table = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] second_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] second_result = [string] [EOL] [EOL] assert e . encode ( second_header_set , huffman = True ) == second_result [EOL] assert list ( e . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in second_header_table ] [EOL] [EOL] third_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] third_result = ( [string] [string] ) [EOL] [EOL] assert e . encode ( third_header_set , huffman = True ) == third_result [EOL] assert len ( e . header_table . dynamic_entries ) == [number] [EOL] [EOL] [comment] [EOL] def test_resizing_header_table ( self ) : [EOL] [comment] [EOL] [comment] [EOL] e = Encoder ( ) [EOL] header_set = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] [string] , ) , ( [string] , [string] [string] , ) , ( [string] , [string] ) , ] [EOL] e . encode ( header_set , huffman = True ) [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] assert len ( e . header_table . dynamic_entries ) == [number] [EOL] [EOL] def test_resizing_header_table_sends_multiple_updates ( self ) : [EOL] e = Encoder ( ) [EOL] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] [EOL] header_set = [ ( [string] , [string] ) ] [EOL] out = e . encode ( header_set , huffman = True ) [EOL] assert out == [string] [EOL] [EOL] def test_resizing_header_table_to_same_size_ignored ( self ) : [EOL] e = Encoder ( ) [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] e . header_table_size = [number] [EOL] [EOL] header_set = [ ( [string] , [string] ) ] [EOL] out = e . encode ( header_set , huffman = True ) [EOL] assert out == [string] [EOL] [EOL] def test_resizing_header_table_sends_context_update ( self ) : [EOL] e = Encoder ( ) [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] header_set = [ ( [string] , [string] ) ] [EOL] out = e . encode ( header_set , huffman = True ) [EOL] [EOL] assert out == [string] [EOL] [EOL] def test_setting_table_size_to_the_same_does_nothing ( self ) : [EOL] e = Encoder ( ) [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] header_set = [ ( [string] , [string] ) ] [EOL] out = e . encode ( header_set , huffman = True ) [EOL] [EOL] assert out == [string] [EOL] [EOL] def test_evicting_header_table_objects ( self ) : [EOL] e = Encoder ( ) [EOL] [EOL] [comment] [EOL] e . header_table_size = [number] [EOL] header_set = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] e . encode ( header_set ) [EOL] [EOL] assert len ( e . header_table . dynamic_entries ) == [number] [EOL] [EOL] [EOL] class TestHPACKDecoder ( object ) : [EOL] [comment] [EOL] def test_literal_header_field_with_indexing ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] header_set = [ ( [string] , [string] ) ] [EOL] data = [string] [EOL] [EOL] assert d . decode ( data ) == header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ( n . encode ( [string] ) , v . encode ( [string] ) ) for n , v in header_set ] [EOL] [EOL] def test_raw_decoding ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] header_set = [ ( [string] , [string] ) ] [EOL] data = ( [string] [string] ) [EOL] [EOL] assert d . decode ( data , raw = True ) == header_set [EOL] [EOL] def test_literal_header_field_without_indexing ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] header_set = [ ( [string] , [string] ) ] [EOL] data = [string] [EOL] [EOL] assert d . decode ( data ) == header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] def test_header_table_size_getter ( self ) : [EOL] d = Decoder ( ) [EOL] assert d . header_table_size [EOL] [EOL] def test_indexed_header_field ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] header_set = [ ( [string] , [string] ) ] [EOL] data = [string] [EOL] [EOL] assert d . decode ( data ) == header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] def test_request_examples_without_huffman ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] first_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] [comment] [EOL] first_data = [string] [EOL] [EOL] assert d . decode ( first_data ) == first_header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] second_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] second_data = ( [string] ) [EOL] [EOL] assert d . decode ( second_data ) == second_header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] third_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] third_data = ( [string] ) [EOL] [EOL] assert d . decode ( third_data ) == third_header_set [EOL] [comment] [EOL] [comment] [EOL] assert len ( d . header_table . dynamic_entries ) == [number] [EOL] [EOL] def test_request_examples_with_huffman ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] [EOL] first_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] first_data = ( [string] ) [EOL] [EOL] assert d . decode ( first_data ) == first_header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] second_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] second_data = ( [string] [string] ) [EOL] [EOL] assert d . decode ( second_data ) == second_header_set [EOL] assert list ( d . header_table . dynamic_entries ) == [ ] [EOL] [EOL] third_header_set = [ ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] , ) , ( [string] , [string] ) , ] [EOL] third_data = ( [string] [string] ) [EOL] [EOL] assert d . decode ( third_data ) == third_header_set [EOL] assert len ( d . header_table . dynamic_entries ) == [number] [EOL] [EOL] [comment] [EOL] def test_resizing_header_table ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] d = Decoder ( ) [EOL] data = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] d . decode ( data ) [EOL] [EOL] [comment] [EOL] d . header_table_size = [number] [EOL] assert len ( d . header_table . dynamic_entries ) == [number] [EOL] [EOL] def test_apache_trafficserver ( self ) : [EOL] [comment] [EOL] [comment] [EOL] d = Decoder ( ) [EOL] data = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] expect = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] result = d . decode ( data ) [EOL] [EOL] assert result == expect [EOL] [comment] [EOL] assert len ( d . header_table . dynamic_entries ) == len ( expect ) - [number] [EOL] [EOL] def test_utf8_errors_raise_hpack_decoding_error ( self ) : [EOL] d = Decoder ( ) [EOL] [EOL] [comment] [EOL] data = [string] [EOL] [EOL] with pytest . raises ( HPACKDecodingError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_invalid_indexed_literal ( self ) : [EOL] d = Decoder ( ) [EOL] [EOL] [comment] [EOL] data = [string] [EOL] with pytest . raises ( InvalidTableIndex ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_invalid_indexed_header ( self ) : [EOL] d = Decoder ( ) [EOL] [EOL] [comment] [EOL] data = [string] [EOL] with pytest . raises ( InvalidTableIndex ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_literal_header_field_with_indexing_emits_headertuple ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] [EOL] headers = d . decode ( data ) [EOL] assert len ( headers ) == [number] [EOL] [EOL] header = headers [ [number] ] [EOL] assert isinstance ( header , HeaderTuple ) [EOL] assert not isinstance ( header , NeverIndexedHeaderTuple ) [EOL] [EOL] def test_literal_never_indexed_emits_neverindexedheadertuple ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] [EOL] headers = d . decode ( data ) [EOL] assert len ( headers ) == [number] [EOL] [EOL] header = headers [ [number] ] [EOL] assert isinstance ( header , NeverIndexedHeaderTuple ) [EOL] [EOL] def test_indexed_never_indexed_emits_neverindexedheadertuple ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] [EOL] headers = d . decode ( data ) [EOL] assert len ( headers ) == [number] [EOL] [EOL] header = headers [ [number] ] [EOL] assert isinstance ( header , NeverIndexedHeaderTuple ) [EOL] [EOL] def test_max_header_list_size ( self ) : [EOL] [docstring] [EOL] d = Decoder ( max_header_list_size = [number] ) [EOL] data = [string] [EOL] [EOL] with pytest . raises ( OversizedHeaderListError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_can_decode_multiple_header_table_size_changes ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] expect = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] assert d . decode ( data ) == expect [EOL] [EOL] def test_header_table_size_change_above_maximum ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] d . max_allowed_table_size = [number] [EOL] data = [string] [EOL] [EOL] with pytest . raises ( InvalidTableSizeError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_table_size_not_adjusting ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] d . max_allowed_table_size = [number] [EOL] data = [string] [EOL] [EOL] with pytest . raises ( InvalidTableSizeError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_table_size_last_rejected ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] [EOL] with pytest . raises ( HPACKDecodingError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_table_size_middle_rejected ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] data = [string] [EOL] [EOL] with pytest . raises ( HPACKDecodingError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_truncated_header_name ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] data = ( [string] [string] ) [EOL] [EOL] with pytest . raises ( HPACKDecodingError ) : [EOL] d . decode ( data ) [EOL] [EOL] def test_truncated_header_value ( self ) : [EOL] [docstring] [EOL] d = Decoder ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] data = ( [string] [string] ) [EOL] [EOL] with pytest . raises ( HPACKDecodingError ) : [EOL] d . decode ( data ) [EOL] [EOL] [EOL] class TestDictToIterable ( object ) : [EOL] [docstring] [EOL] keys = one_of ( text ( ) . filter ( lambda k : k and not k . startswith ( [string] ) ) , binary ( ) . filter ( lambda k : k and not k . startswith ( [string] ) ) ) [EOL] [EOL] @ given ( special_keys = sets ( keys ) , boring_keys = sets ( keys ) , ) def test_ordering ( self , special_keys , boring_keys ) : [EOL] [docstring] [EOL] def _prepend_colon ( k ) : [EOL] if isinstance ( k , unicode ) : [EOL] return [string] + k [EOL] else : [EOL] return [string] + k [EOL] [EOL] special_keys = set ( map ( _prepend_colon , special_keys ) ) [EOL] input_dict = { k : [string] for k in itertools . chain ( special_keys , boring_keys ) } [EOL] filtered = _dict_to_iterable ( input_dict ) [EOL] [EOL] received_special = set ( ) [EOL] received_boring = set ( ) [EOL] [EOL] for _ in special_keys : [EOL] k , _ = next ( filtered ) [EOL] received_special . add ( k ) [EOL] for _ in boring_keys : [EOL] k , _ = next ( filtered ) [EOL] received_boring . add ( k ) [EOL] [EOL] assert special_keys == received_special [EOL] assert boring_keys == received_boring [EOL] [EOL] @ given ( special_keys = sets ( keys ) , boring_keys = sets ( keys ) , ) def test_ordering_applies_to_encoding ( self , special_keys , boring_keys ) : [EOL] [docstring] [EOL] def _prepend_colon ( k ) : [EOL] if isinstance ( k , unicode ) : [EOL] return [string] + k [EOL] else : [EOL] return [string] + k [EOL] [EOL] special_keys = set ( map ( _prepend_colon , special_keys ) ) [EOL] input_dict = { k : [string] for k in itertools . chain ( special_keys , boring_keys ) } [EOL] e = Encoder ( ) [EOL] d = Decoder ( ) [EOL] encoded = e . encode ( input_dict ) [EOL] decoded = iter ( d . decode ( encoded , raw = True ) ) [EOL] [EOL] received_special = set ( ) [EOL] received_boring = set ( ) [EOL] expected_special = set ( map ( _to_bytes , special_keys ) ) [EOL] expected_boring = set ( map ( _to_bytes , boring_keys ) ) [EOL] [EOL] for _ in special_keys : [EOL] k , _ = next ( decoded ) [EOL] received_special . add ( k ) [EOL] for _ in boring_keys : [EOL] k , _ = next ( decoded ) [EOL] received_boring . add ( k ) [EOL] [EOL] assert expected_special == received_special [EOL] assert expected_boring == received_boring [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.str]$ 0 $typing.Type[builtins.str]$ 0 0 0 0 0 $typing.Type[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.bool]]$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.bytes,builtins.bytes]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.bytes,builtins.bytes]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.hpack.test.test_hpack.TestDictToIterable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,builtins.bytes]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,builtins.bytes]$ 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] [docstring] [EOL] from . exceptions import HPACKDecodingError [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def decode_huffman ( huffman_string ) : [EOL] [docstring] [EOL] if not huffman_string : [EOL] return [string] [EOL] [EOL] state = [number] [EOL] flags = [number] [EOL] decoded_bytes = bytearray ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] huffman_string = bytearray ( huffman_string ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for input_byte in huffman_string : [EOL] index = ( state * [number] ) + ( input_byte >> [number] ) [EOL] state , flags , output_byte = HUFFMAN_TABLE [ index ] [EOL] [EOL] if flags & HUFFMAN_FAIL : [EOL] raise HPACKDecodingError ( [string] ) [EOL] [EOL] if flags & HUFFMAN_EMIT_SYMBOL : [EOL] decoded_bytes . append ( output_byte ) [EOL] [EOL] index = ( state * [number] ) + ( input_byte & [number] ) [EOL] state , flags , output_byte = HUFFMAN_TABLE [ index ] [EOL] [EOL] if flags & HUFFMAN_FAIL : [EOL] raise HPACKDecodingError ( [string] ) [EOL] [EOL] if flags & HUFFMAN_EMIT_SYMBOL : [EOL] decoded_bytes . append ( output_byte ) [EOL] [EOL] if not ( flags & HUFFMAN_COMPLETE ) : [EOL] raise HPACKDecodingError ( [string] ) [EOL] [EOL] return bytes ( decoded_bytes ) [EOL] [EOL] [EOL] [comment] [EOL] HUFFMAN_COMPLETE = [number] [EOL] HUFFMAN_EMIT_SYMBOL = ( [number] << [number] ) [EOL] HUFFMAN_FAIL = ( [number] << [number] ) [EOL] [EOL] [comment] [EOL] HUFFMAN_TABLE = [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_COMPLETE | HUFFMAN_EMIT_SYMBOL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ( [number] , HUFFMAN_FAIL , [number] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class HeaderTuple ( tuple ) : [EOL] [docstring] [EOL] __slots__ = ( ) [EOL] [EOL] indexable = True [EOL] [EOL] def __new__ ( _cls , * args ) : [EOL] return tuple . __new__ ( _cls , args ) [EOL] [EOL] [EOL] class NeverIndexedHeaderTuple ( HeaderTuple ) : [EOL] [docstring] [EOL] __slots__ = ( ) [EOL] [EOL] indexable = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [EOL] class HPACKError ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class HPACKDecodingError ( HPACKError ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class InvalidTableIndex ( HPACKDecodingError ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class OversizedHeaderListError ( HPACKDecodingError ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class InvalidTableSizeError ( HPACKDecodingError ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] REQUEST_CODES = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] REQUEST_CODES_LENGTH = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] try : [EOL] import multiprocessing [comment] [EOL] except ImportError : [EOL] pass [EOL] from re import sub [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] def get_long_description ( ) : [EOL] [comment] [EOL] readme = open ( [string] ) . read ( ) [EOL] [EOL] version_lines = [ ] [EOL] with open ( [string] ) as infile : [EOL] next ( infile ) [EOL] for line in infile : [EOL] line = line . rstrip ( ) . replace ( [string] , [string] ) [EOL] version_lines . append ( line ) [EOL] version_history = [string] . join ( version_lines ) [EOL] version_history = sub ( [string] , [string] , version_history ) [EOL] [EOL] ret = readme + [string] + version_history [EOL] return ret [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = get_long_description ( ) , author = [string] , author_email = [string] , license = [string] , packages = find_packages ( exclude = [ [string] ] ) , install_requires = [ [string] ] , test_suite = [string] , url = [string] , include_package_data = True , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , keywords = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from more_itertools . more import * [comment] [EOL] from more_itertools . recipes import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Optional , Match [EOL] import typing [EOL] from setuptools import setup [EOL] import re [EOL] import sys [EOL] [EOL] def load_version ( filename = [string] ) : [EOL] [docstring] [EOL] with open ( filename ) as source : [EOL] text = source . read ( ) [EOL] match = re . search ( [string] , text ) [EOL] if not match : [EOL] msg = [string] . format ( filename ) [EOL] raise RuntimeError ( msg ) [EOL] version = match . group ( [number] ) [EOL] return version [EOL] [EOL] def load_rst ( filename = [string] ) : [EOL] [docstring] [EOL] with open ( filename ) as source : [EOL] text = source . read ( ) [EOL] doc = re . sub ( [string] , [string] , text ) [EOL] return doc [EOL] [EOL] setup ( name = [string] , version = load_version ( ) , packages = [ [string] ] , zip_safe = False , author = [string] , author_email = [string] , url = [string] , description = [string] , long_description = open ( [string] ) . read ( ) , license = [string] , install_requires = [ ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , tests_require = [ ] if sys . version_info [ [number] ] > [number] else [ [string] ] , test_suite = [string] if sys . version_info [ [number] ] > [number] else [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] from typing import Any , Type [EOL] import typing [EOL] import tools [EOL] from __future__ import absolute_import , division , print_function [EOL] import collections [EOL] import sys [EOL] [EOL] try : [EOL] import unittest2 as unittest [EOL] except ImportError : [EOL] import unittest [EOL] [EOL] import funcsigs as inspect [EOL] [EOL] [EOL] class TestSignatureObject ( unittest . TestCase ) : [EOL] @ staticmethod def signature ( func ) : [EOL] sig = inspect . signature ( func ) [EOL] return ( tuple ( ( param . name , ( Ellipsis if param . default is param . empty else param . default ) , ( Ellipsis if param . annotation is param . empty [EOL] else param . annotation ) , str ( param . kind ) . lower ( ) ) for param in sig . parameters . values ( ) ) , ( Ellipsis if sig . return_annotation is sig . empty [EOL] else sig . return_annotation ) ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] unittest . TestCase . __init__ ( self , * args , ** kwargs ) [EOL] if not hasattr ( self , [string] ) : [EOL] self . assertRaisesRegex = self . assertRaisesRegexp [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] def test_signature_immutability ( self ) : [EOL] def test ( a ) : [EOL] pass [EOL] sig = inspect . signature ( test ) [EOL] [EOL] with self . assertRaises ( AttributeError ) : [EOL] sig . foo = [string] [EOL] [EOL] [comment] [EOL] if sys . version_info [ : [number] ] < ( [number] , [number] ) : [EOL] return [EOL] [EOL] with self . assertRaises ( TypeError ) : [EOL] sig . parameters [ [string] ] = None [EOL] [EOL] def test_signature_on_noarg ( self ) : [EOL] def test ( ) : [EOL] pass [EOL] self . assertEqual ( self . signature ( test ) , ( ( ) , Ellipsis ) ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] def test_signature_on_builtin_function ( self ) : [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . signature ( type ) [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] [comment] [EOL] inspect . signature ( type . __call__ ) [EOL] if hasattr ( sys , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] [comment] [EOL] inspect . signature ( min . __call__ ) [EOL] if hasattr ( sys , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] [comment] [EOL] inspect . signature ( min ) [EOL] [EOL] def test_signature_on_non_function ( self ) : [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] inspect . signature ( [number] ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] inspect . Signature . from_function ( [number] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] def test_signature_on_callable_objects ( self ) : [EOL] class Foo ( object ) : [EOL] def __call__ ( self , a ) : [EOL] pass [EOL] [EOL] self . assertEqual ( self . signature ( Foo ( ) ) , ( ( ( [string] , Ellipsis , Ellipsis , [string] ) , ) , Ellipsis ) ) [EOL] [EOL] class Spam ( object ) : [EOL] pass [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] inspect . signature ( Spam ( ) ) [EOL] [EOL] class Bar ( Spam , Foo ) : [EOL] pass [EOL] [EOL] self . assertEqual ( self . signature ( Bar ( ) ) , ( ( ( [string] , Ellipsis , Ellipsis , [string] ) , ) , Ellipsis ) ) [EOL] [EOL] class ToFail ( object ) : [EOL] __call__ = type [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . signature ( ToFail ( ) ) [EOL] [EOL] if sys . version_info [ [number] ] < [number] : [EOL] return [EOL] [EOL] class Wrapped ( object ) : [EOL] pass [EOL] Wrapped . __wrapped__ = lambda a : None [EOL] self . assertEqual ( self . signature ( Wrapped ) , ( ( ( [string] , Ellipsis , Ellipsis , [string] ) , ) , Ellipsis ) ) [EOL] [EOL] def test_signature_on_lambdas ( self ) : [EOL] self . assertEqual ( self . signature ( ( lambda a = [number] : a ) ) , ( ( ( [string] , [number] , Ellipsis , [string] ) , ) , Ellipsis ) ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] def test_signature_unhashable ( self ) : [EOL] def foo ( a ) : pass [EOL] sig = inspect . signature ( foo ) [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] hash ( sig ) [EOL] [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] [EOL] class TestParameterObject ( unittest . TestCase ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] unittest . TestCase . __init__ ( self , * args , ** kwargs ) [EOL] if not hasattr ( self , [string] ) : [EOL] self . assertRaisesRegex = self . assertRaisesRegexp [EOL] [EOL] def test_signature_parameter_kinds ( self ) : [EOL] P = inspect . Parameter [EOL] self . assertTrue ( P . POSITIONAL_ONLY < P . POSITIONAL_OR_KEYWORD < P . VAR_POSITIONAL < P . KEYWORD_ONLY < P . VAR_KEYWORD ) [EOL] [EOL] self . assertEqual ( str ( P . POSITIONAL_ONLY ) , [string] ) [EOL] self . assertTrue ( [string] in repr ( P . POSITIONAL_ONLY ) ) [EOL] [EOL] def test_signature_parameter_object ( self ) : [EOL] p = inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . POSITIONAL_ONLY ) [EOL] self . assertEqual ( p . name , [string] ) [EOL] self . assertEqual ( p . default , [number] ) [EOL] self . assertIs ( p . annotation , p . empty ) [EOL] self . assertEqual ( p . kind , inspect . Parameter . POSITIONAL_ONLY ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . Parameter ( [string] , default = [number] , kind = [string] ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . Parameter ( [string] , kind = inspect . Parameter . VAR_KEYWORD ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . Parameter ( None , kind = inspect . Parameter . VAR_KEYWORD ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . VAR_KEYWORD ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . VAR_POSITIONAL ) [EOL] [EOL] p = inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . POSITIONAL_OR_KEYWORD ) [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] p . replace ( kind = inspect . Parameter . VAR_POSITIONAL ) [EOL] [EOL] self . assertTrue ( repr ( p ) . startswith ( [string] ) ) [EOL] [EOL] def test_signature_parameter_equality ( self ) : [EOL] P = inspect . Parameter [EOL] p = P ( [string] , default = [number] , kind = inspect . Parameter . KEYWORD_ONLY ) [EOL] [EOL] self . assertEqual ( p , p ) [EOL] self . assertNotEqual ( p , [number] ) [EOL] [EOL] self . assertEqual ( p , P ( [string] , default = [number] , kind = inspect . Parameter . KEYWORD_ONLY ) ) [EOL] [EOL] def test_signature_parameter_unhashable ( self ) : [EOL] p = inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . KEYWORD_ONLY ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] hash ( p ) [EOL] [EOL] def test_signature_parameter_replace ( self ) : [EOL] p = inspect . Parameter ( [string] , default = [number] , kind = inspect . Parameter . KEYWORD_ONLY ) [EOL] [EOL] self . assertIsNot ( p , p . replace ( ) ) [EOL] self . assertEqual ( p , p . replace ( ) ) [EOL] [EOL] p2 = p . replace ( annotation = [number] ) [EOL] self . assertEqual ( p2 . annotation , [number] ) [EOL] p2 = p2 . replace ( annotation = p2 . empty ) [EOL] self . assertEqual ( p , p2 ) [EOL] [EOL] p2 = p2 . replace ( name = [string] ) [EOL] self . assertEqual ( p2 . name , [string] ) [EOL] self . assertNotEqual ( p2 , p ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] p2 = p2 . replace ( name = p2 . empty ) [EOL] [EOL] p2 = p2 . replace ( name = [string] , default = None ) [EOL] self . assertIs ( p2 . default , None ) [EOL] self . assertNotEqual ( p2 , p ) [EOL] [EOL] p2 = p2 . replace ( name = [string] , default = p2 . empty ) [EOL] self . assertIs ( p2 . default , p2 . empty ) [EOL] [EOL] [EOL] p2 = p2 . replace ( default = [number] , kind = p2 . POSITIONAL_OR_KEYWORD ) [EOL] self . assertEqual ( p2 . kind , p2 . POSITIONAL_OR_KEYWORD ) [EOL] self . assertNotEqual ( p2 , p ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] p2 = p2 . replace ( kind = p2 . empty ) [EOL] [EOL] p2 = p2 . replace ( kind = p2 . KEYWORD_ONLY ) [EOL] self . assertEqual ( p2 , p ) [EOL] [EOL] def test_signature_parameter_positional_only ( self ) : [EOL] p = inspect . Parameter ( None , kind = inspect . Parameter . POSITIONAL_ONLY ) [EOL] self . assertEqual ( str ( p ) , [string] ) [EOL] [EOL] p = p . replace ( name = [string] ) [EOL] self . assertEqual ( str ( p ) , [string] ) [EOL] [EOL] def test_signature_parameter_immutability ( self ) : [EOL] p = inspect . Parameter ( None , kind = inspect . Parameter . POSITIONAL_ONLY ) [EOL] [EOL] with self . assertRaises ( AttributeError ) : [EOL] p . foo = [string] [EOL] [EOL] with self . assertRaises ( AttributeError ) : [EOL] p . kind = [number] [EOL] [EOL] [EOL] class TestSignatureBind ( unittest . TestCase ) : [EOL] @ staticmethod def call ( func , * args , ** kwargs ) : [EOL] sig = inspect . signature ( func ) [EOL] ba = sig . bind ( * args , ** kwargs ) [EOL] return func ( * ba . args , ** ba . kwargs ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] unittest . TestCase . __init__ ( self , * args , ** kwargs ) [EOL] if not hasattr ( self , [string] ) : [EOL] self . assertRaisesRegex = self . assertRaisesRegexp [EOL] [EOL] def test_signature_bind_empty ( self ) : [EOL] def test ( ) : [EOL] return [number] [EOL] [EOL] self . assertEqual ( self . call ( test ) , [number] ) [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , [number] ) [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , [number] , spam = [number] ) [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , spam = [number] ) [EOL] [EOL] def test_signature_bind_var ( self ) : [EOL] def test ( * args , ** kwargs ) : [EOL] return args , kwargs [EOL] [EOL] self . assertEqual ( self . call ( test ) , ( ( ) , { } ) ) [EOL] self . assertEqual ( self . call ( test , [number] ) , ( ( [number] , ) , { } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] ) , ( ( [number] , [number] ) , { } ) ) [EOL] self . assertEqual ( self . call ( test , foo = [string] ) , ( ( ) , { [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , foo = [string] ) , ( ( [number] , ) , { [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , args = [number] ) , ( ( ) , { [string] : [number] } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] , foo = [string] ) , ( ( [number] , [number] ) , { [string] : [string] } ) ) [EOL] [EOL] def test_signature_bind_just_args ( self ) : [EOL] def test ( a , b , c ) : [EOL] return a , b , c [EOL] [EOL] self . assertEqual ( self . call ( test , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , [number] , [number] , [number] , [number] ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , [number] ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test ) [EOL] [EOL] def test ( a , b , c = [number] ) : [EOL] return a , b , c [EOL] self . assertEqual ( self . call ( test , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] ) , ( [number] , [number] , [number] ) ) [EOL] [EOL] def test ( a = [number] , b = [number] , c = [number] ) : [EOL] return a , b , c [EOL] self . assertEqual ( self . call ( test , a = [number] , c = [number] ) , ( [number] , [number] , [number] ) ) [EOL] self . assertEqual ( self . call ( test , a = [number] ) , ( [number] , [number] , [number] ) ) [EOL] self . assertEqual ( self . call ( test , b = [number] ) , ( [number] , [number] , [number] ) ) [EOL] [EOL] def test_signature_bind_varargs_order ( self ) : [EOL] def test ( * args ) : [EOL] return args [EOL] [EOL] self . assertEqual ( self . call ( test ) , ( ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ) [EOL] [EOL] def test_signature_bind_args_and_varargs ( self ) : [EOL] def test ( a , b , c = [number] , * args ) : [EOL] return a , b , c , args [EOL] [EOL] self . assertEqual ( self . call ( test , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , ( [number] , [number] ) ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] ) , ( [number] , [number] , [number] , ( ) ) ) [EOL] self . assertEqual ( self . call ( test , b = [number] , a = [number] ) , ( [number] , [number] , [number] , ( ) ) ) [EOL] self . assertEqual ( self . call ( test , [number] , b = [number] ) , ( [number] , [number] , [number] , ( ) ) ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] self . call ( test , [number] , [number] , [number] , c = [number] ) [EOL] [EOL] def test_signature_bind_just_kwargs ( self ) : [EOL] def test ( ** kwargs ) : [EOL] return kwargs [EOL] [EOL] self . assertEqual ( self . call ( test ) , { } ) [EOL] self . assertEqual ( self . call ( test , foo = [string] , spam = [string] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] def test_signature_bind_args_and_kwargs ( self ) : [EOL] def test ( a , b , c = [number] , ** kwargs ) : [EOL] return a , b , c , kwargs [EOL] [EOL] self . assertEqual ( self . call ( test , [number] , [number] ) , ( [number] , [number] , [number] , { } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] , foo = [string] , spam = [string] ) , ( [number] , [number] , [number] , { [string] : [string] , [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , b = [number] , a = [number] , foo = [string] , spam = [string] ) , ( [number] , [number] , [number] , { [string] : [string] , [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , a = [number] , b = [number] , foo = [string] , spam = [string] ) , ( [number] , [number] , [number] , { [string] : [string] , [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , b = [number] , foo = [string] , spam = [string] ) , ( [number] , [number] , [number] , { [string] : [string] , [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , b = [number] , c = [number] , foo = [string] , spam = [string] ) , ( [number] , [number] , [number] , { [string] : [string] , [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , [number] , [number] , [number] , foo = [string] ) , ( [number] , [number] , [number] , { [string] : [string] } ) ) [EOL] self . assertEqual ( self . call ( test , c = [number] , a = [number] , b = [number] ) , ( [number] , [number] , [number] , { } ) ) [EOL] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [comment] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [comment] [EOL] if sys . version_info [ [number] ] > [number] : [EOL] exec ( [string] ) [EOL] [EOL] [EOL] class TestBoundArguments ( unittest . TestCase ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] unittest . TestCase . __init__ ( self , * args , ** kwargs ) [EOL] if not hasattr ( self , [string] ) : [EOL] self . assertRaisesRegex = self . assertRaisesRegexp [EOL] [EOL] def test_signature_bound_arguments_unhashable ( self ) : [EOL] def foo ( a ) : pass [EOL] ba = inspect . signature ( foo ) . bind ( [number] ) [EOL] [EOL] with self . assertRaisesRegex ( TypeError , [string] ) : [EOL] hash ( ba ) [EOL] [EOL] def test_signature_bound_arguments_equality ( self ) : [EOL] def foo ( a ) : pass [EOL] ba = inspect . signature ( foo ) . bind ( [number] ) [EOL] self . assertEqual ( ba , ba ) [EOL] [EOL] ba2 = inspect . signature ( foo ) . bind ( [number] ) [EOL] self . assertEqual ( ba , ba2 ) [EOL] [EOL] ba3 = inspect . signature ( foo ) . bind ( [number] ) [EOL] self . assertNotEqual ( ba , ba3 ) [EOL] ba3 . arguments [ [string] ] = [number] [EOL] self . assertEqual ( ba , ba3 ) [EOL] [EOL] def bar ( b ) : pass [EOL] ba4 = inspect . signature ( bar ) . bind ( [number] ) [EOL] self . assertNotEqual ( ba , ba4 ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . begin ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.funcsigs.tests.test_inspect.TestSignatureObject.test_signature_on_callable_objects.ToFail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] from setuptools import setup , Extension [EOL] import sys [EOL] [EOL] _PACKAGE_NAME = [string] [EOL] [EOL] [comment] [EOL] _USE_FAST_MASKING = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] if sys . version < [string] : [EOL] print ( [string] % _PACKAGE_NAME , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if _USE_FAST_MASKING : [EOL] setup ( ext_modules = [ Extension ( [string] , [ [string] ] , swig_opts = [ [string] ] ) ] ) [EOL] [EOL] setup ( author = [string] , author_email = [string] , description = [string] , long_description = ( [string] [string] [string] ) , license = [string] , name = _PACKAGE_NAME , packages = [ _PACKAGE_NAME , _PACKAGE_NAME + [string] ] , python_requires = [string] , install_requires = [ [string] ] , url = [string] , version = [string] , ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from __future__ import absolute_import [EOL] from mod_pywebsocket import handshake [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] raise handshake . AbortedByUserException ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] request . extra_headers . append ( ( [string] , [string] ) ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] request . ws_stream . send_message ( [string] , binary = False ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from __future__ import absolute_import [EOL] from mod_pywebsocket import handshake [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] raise handshake . AbortedByUserException ( [string] ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from __future__ import absolute_import [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] raise msgutil . BadOperationException ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] if request . ws_origin == [string] : [EOL] return [EOL] raise ValueError ( [string] % request . ws_origin ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] request . connection . write ( [string] % ( request . ws_resource , request . ws_protocol ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import urllib [EOL] from __future__ import absolute_import [EOL] from six . moves import urllib [EOL] [EOL] [EOL] def _add_set_cookie ( request , value ) : [EOL] request . extra_headers . append ( ( [string] , value ) ) [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] components = urllib . parse . urlparse ( request . uri ) [EOL] command = components [ [number] ] [EOL] [EOL] ONE_DAY_LIFE = [string] [EOL] [EOL] if command == [string] : [EOL] _add_set_cookie ( request , [string] . join ( [ [string] , ONE_DAY_LIFE ] ) ) [EOL] elif command == [string] : [EOL] _add_set_cookie ( request , [string] . join ( [ [string] , ONE_DAY_LIFE , [string] ] ) ) [EOL] elif command == [string] : [EOL] _add_set_cookie ( request , [string] ) [EOL] _add_set_cookie ( request , [string] ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] sys . path . insert ( [number] , os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from mod_pywebsocket import handshake [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] raise handshake . AbortedByUserException ( [string] ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] raise handshake . AbortedByUserException ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] raise Exception ( [string] % ( request . ws_resource , request . ws_protocol ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def no_web_socket_transfer_data ( request ) : [EOL] message = [string] % ( request . ws_resource , request . ws_protocol ) [EOL] request . connection . write ( message . encode ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] def no_web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] message = [string] % ( request . ws_resource , request . ws_protocol ) [EOL] request . connection . write ( message . encode ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] message = [string] % ( request . ws_resource , request . ws_protocol ) [EOL] request . connection . write ( message . encode ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] web_socket_do_extra_handshake = True [EOL] web_socket_transfer_data = [number] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] message = [string] % ( request . ws_resource , request . ws_protocol ) [EOL] request . connection . write ( message . encode ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class ConnectionTerminatedException ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class InvalidFrameException ( ConnectionTerminatedException ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class BadOperationException ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class UnsupportedFrameException ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class InvalidUTF8Exception ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Type , Tuple , Any [EOL] import types [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import sys [EOL] import warnings [EOL] [EOL] _py3 = sys . version_info > ( [number] , [number] ) [EOL] [EOL] [EOL] if not _py3 : [EOL] exec ( [string] ) [EOL] [EOL] [EOL] def _raise_wrapfail ( wrap_controller , msg ) : [EOL] co = wrap_controller . gi_code [EOL] raise RuntimeError ( [string] % ( co . co_name , co . co_filename , co . co_firstlineno , msg ) ) [EOL] [EOL] [EOL] class HookCallError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class _Result ( object ) : [EOL] def __init__ ( self , result , excinfo ) : [EOL] self . _result = result [EOL] self . _excinfo = excinfo [EOL] [EOL] @ property def excinfo ( self ) : [EOL] return self . _excinfo [EOL] [EOL] @ property def result ( self ) : [EOL] [docstring] [EOL] msg = [string] [EOL] warnings . warn ( DeprecationWarning ( msg ) , stacklevel = [number] ) [EOL] return self . _result [EOL] [EOL] @ classmethod def from_call ( cls , func ) : [EOL] __tracebackhide__ = True [EOL] result = excinfo = None [EOL] try : [EOL] result = func ( ) [EOL] except BaseException : [EOL] excinfo = sys . exc_info ( ) [EOL] [EOL] return cls ( result , excinfo ) [EOL] [EOL] def force_result ( self , result ) : [EOL] [docstring] [EOL] self . _result = result [EOL] self . _excinfo = None [EOL] [EOL] def get_result ( self ) : [EOL] [docstring] [EOL] __tracebackhide__ = True [EOL] if self . _excinfo is None : [EOL] return self . _result [EOL] else : [EOL] ex = self . _excinfo [EOL] if _py3 : [EOL] raise ex [ [number] ] . with_traceback ( ex [ [number] ] ) [EOL] _reraise ( * ex ) [comment] [EOL] [EOL] [EOL] def _wrapped_call ( wrap_controller , func ) : [EOL] [docstring] [EOL] try : [EOL] next ( wrap_controller ) [comment] [EOL] except StopIteration : [EOL] _raise_wrapfail ( wrap_controller , [string] ) [EOL] call_outcome = _Result . from_call ( func ) [EOL] try : [EOL] wrap_controller . send ( call_outcome ) [EOL] _raise_wrapfail ( wrap_controller , [string] ) [EOL] except StopIteration : [EOL] pass [EOL] return call_outcome . get_result ( ) [EOL] [EOL] [EOL] class _LegacyMultiCall ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __init__ ( self , hook_impls , kwargs , firstresult = False ) : [EOL] self . hook_impls = hook_impls [EOL] self . caller_kwargs = kwargs [comment] [EOL] self . caller_kwargs [ [string] ] = self [EOL] self . firstresult = firstresult [EOL] [EOL] def execute ( self ) : [EOL] caller_kwargs = self . caller_kwargs [EOL] self . results = results = [ ] [EOL] firstresult = self . firstresult [EOL] [EOL] while self . hook_impls : [EOL] hook_impl = self . hook_impls . pop ( ) [EOL] try : [EOL] args = [ caller_kwargs [ argname ] for argname in hook_impl . argnames ] [EOL] except KeyError : [EOL] for argname in hook_impl . argnames : [EOL] if argname not in caller_kwargs : [EOL] raise HookCallError ( [string] % ( argname , ) ) [EOL] if hook_impl . hookwrapper : [EOL] return _wrapped_call ( hook_impl . function ( * args ) , self . execute ) [EOL] res = hook_impl . function ( * args ) [EOL] if res is not None : [EOL] if firstresult : [EOL] return res [EOL] results . append ( res ) [EOL] [EOL] if not firstresult : [EOL] return results [EOL] [EOL] def __repr__ ( self ) : [EOL] status = [string] % ( len ( self . hook_impls ) , ) [EOL] if hasattr ( self , [string] ) : [EOL] status = ( [string] % len ( self . results ) ) + status [EOL] return [string] % ( status , self . caller_kwargs ) [EOL] [EOL] [EOL] def _legacymulticall ( hook_impls , caller_kwargs , firstresult = False ) : [EOL] return _LegacyMultiCall ( hook_impls , caller_kwargs , firstresult = firstresult ) . execute ( ) [EOL] [EOL] [EOL] def _multicall ( hook_impls , caller_kwargs , firstresult = False ) : [EOL] [docstring] [EOL] __tracebackhide__ = True [EOL] results = [ ] [EOL] excinfo = None [EOL] try : [comment] [EOL] teardowns = [ ] [EOL] try : [EOL] for hook_impl in reversed ( hook_impls ) : [EOL] try : [EOL] args = [ caller_kwargs [ argname ] for argname in hook_impl . argnames ] [EOL] except KeyError : [EOL] for argname in hook_impl . argnames : [EOL] if argname not in caller_kwargs : [EOL] raise HookCallError ( [string] % ( argname , ) ) [EOL] [EOL] if hook_impl . hookwrapper : [EOL] try : [EOL] gen = hook_impl . function ( * args ) [EOL] next ( gen ) [comment] [EOL] teardowns . append ( gen ) [EOL] except StopIteration : [EOL] _raise_wrapfail ( gen , [string] ) [EOL] else : [EOL] res = hook_impl . function ( * args ) [EOL] if res is not None : [EOL] results . append ( res ) [EOL] if firstresult : [comment] [EOL] break [EOL] except BaseException : [EOL] excinfo = sys . exc_info ( ) [EOL] finally : [EOL] if firstresult : [comment] [EOL] outcome = _Result ( results [ [number] ] if results else None , excinfo ) [EOL] else : [EOL] outcome = _Result ( results , excinfo ) [EOL] [EOL] [comment] [EOL] for gen in reversed ( teardowns ) : [EOL] try : [EOL] gen . send ( outcome ) [EOL] _raise_wrapfail ( gen , [string] ) [EOL] except StopIteration : [EOL] pass [EOL] [EOL] return outcome . get_result ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Union[typing.Tuple[None,None,None],typing.Tuple[typing.Type[builtins.BaseException],builtins.BaseException,types.TracebackType]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str
from pluggy import _formatdef , varnames [EOL] [EOL] [EOL] def test_varnames ( ) : [EOL] def f ( x ) : [EOL] i = [number] [comment] [EOL] [EOL] class A ( object ) : [EOL] def f ( self , y ) : [EOL] pass [EOL] [EOL] class B ( object ) : [EOL] def __call__ ( self , z ) : [EOL] pass [EOL] [EOL] assert varnames ( f ) == ( ( [string] , ) , ( ) ) [EOL] assert varnames ( A ( ) . f ) == ( ( [string] , ) , ( ) ) [EOL] assert varnames ( B ( ) ) == ( ( [string] , ) , ( ) ) [EOL] [EOL] [EOL] def test_varnames_default ( ) : [EOL] def f ( x , y = [number] ) : [EOL] pass [EOL] [EOL] assert varnames ( f ) == ( ( [string] , ) , ( [string] , ) ) [EOL] [EOL] [EOL] def test_varnames_class ( ) : [EOL] class C ( object ) : [EOL] def __init__ ( self , x ) : [EOL] pass [EOL] [EOL] class D ( object ) : [EOL] pass [EOL] [EOL] class E ( object ) : [EOL] def __init__ ( self , x ) : [EOL] pass [EOL] [EOL] class F ( object ) : [EOL] pass [EOL] [EOL] assert varnames ( C ) == ( ( [string] , ) , ( ) ) [EOL] assert varnames ( D ) == ( ( ) , ( ) ) [EOL] assert varnames ( E ) == ( ( [string] , ) , ( ) ) [EOL] assert varnames ( F ) == ( ( ) , ( ) ) [EOL] [EOL] [EOL] def test_formatdef ( ) : [EOL] def function1 ( ) : [EOL] pass [EOL] [EOL] assert _formatdef ( function1 ) == [string] [EOL] [EOL] def function2 ( arg1 ) : [EOL] pass [EOL] [EOL] assert _formatdef ( function2 ) == [string] [EOL] [EOL] def function3 ( arg1 , arg2 = [string] ) : [EOL] pass [EOL] [EOL] assert _formatdef ( function3 ) == [string] [EOL] [EOL] def function4 ( arg1 , * args , ** kwargs ) : [EOL] pass [EOL] [EOL] assert _formatdef ( function4 ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Callable [EOL] import typing [EOL] import tools [EOL] import pytest [EOL] [EOL] from pluggy import _multicall , _legacymulticall , HookImpl , HookCallError [EOL] from pluggy . callers import _LegacyMultiCall [EOL] from pluggy import HookspecMarker , HookimplMarker [EOL] [EOL] [EOL] hookspec = HookspecMarker ( [string] ) [EOL] hookimpl = HookimplMarker ( [string] ) [EOL] [EOL] [EOL] def test_uses_copy_of_methods ( ) : [EOL] out = [ lambda : [number] ] [EOL] mc = _LegacyMultiCall ( out , { } ) [EOL] repr ( mc ) [EOL] out [ : ] = [ ] [EOL] res = mc . execute ( ) [EOL] return res == [number] [EOL] [EOL] [EOL] def MC ( methods , kwargs , firstresult = False ) : [EOL] caller = _multicall [EOL] hookfuncs = [ ] [EOL] for method in methods : [EOL] f = HookImpl ( None , [string] , method , method . example_impl ) [EOL] hookfuncs . append ( f ) [EOL] if [string] in f . argnames : [EOL] caller = _legacymulticall [EOL] return caller ( hookfuncs , kwargs , firstresult = firstresult ) [EOL] [EOL] [EOL] def test_call_passing ( ) : [EOL] class P1 ( object ) : [EOL] @ hookimpl def m ( self , __multicall__ , x ) : [EOL] assert len ( __multicall__ . results ) == [number] [EOL] assert not __multicall__ . hook_impls [EOL] return [number] [EOL] [EOL] class P2 ( object ) : [EOL] @ hookimpl def m ( self , __multicall__ , x ) : [EOL] assert __multicall__ . results == [ ] [EOL] assert __multicall__ . hook_impls [EOL] return [number] [EOL] [EOL] p1 = P1 ( ) [EOL] p2 = P2 ( ) [EOL] reslist = MC ( [ p1 . m , p2 . m ] , { [string] : [number] } ) [EOL] assert len ( reslist ) == [number] [EOL] [comment] [EOL] assert reslist == [ [number] , [number] ] [EOL] [EOL] [EOL] def test_keyword_args ( ) : [EOL] @ hookimpl def f ( x ) : [EOL] return x + [number] [EOL] [EOL] class A ( object ) : [EOL] @ hookimpl def f ( self , x , y ) : [EOL] return x + y [EOL] [EOL] reslist = MC ( [ f , A ( ) . f ] , dict ( x = [number] , y = [number] ) ) [EOL] assert reslist == [ [number] + [number] , [number] ] [EOL] [EOL] [EOL] def test_keyword_args_with_defaultargs ( ) : [EOL] @ hookimpl def f ( x , z = [number] ) : [EOL] return x + z [EOL] reslist = MC ( [ f ] , dict ( x = [number] , y = [number] ) ) [EOL] assert reslist == [ [number] ] [EOL] [EOL] [EOL] def test_tags_call_error ( ) : [EOL] @ hookimpl def f ( x ) : [EOL] return x [EOL] with pytest . raises ( HookCallError ) : [EOL] MC ( [ f ] , { } ) [EOL] [EOL] [EOL] def test_call_subexecute ( ) : [EOL] @ hookimpl def m ( __multicall__ ) : [EOL] subresult = __multicall__ . execute ( ) [EOL] return subresult + [number] [EOL] [EOL] @ hookimpl def n ( ) : [EOL] return [number] [EOL] [EOL] res = MC ( [ n , m ] , { } , firstresult = True ) [EOL] assert res == [number] [EOL] [EOL] [EOL] def test_call_none_is_no_result ( ) : [EOL] @ hookimpl def m1 ( ) : [EOL] return [number] [EOL] [EOL] @ hookimpl def m2 ( ) : [EOL] return None [EOL] [EOL] res = MC ( [ m1 , m2 ] , { } , firstresult = True ) [EOL] assert res == [number] [EOL] res = MC ( [ m1 , m2 ] , { } , { } ) [EOL] assert res == [ [number] ] [EOL] [EOL] [EOL] def test_hookwrapper ( ) : [EOL] out = [ ] [EOL] [EOL] @ hookimpl ( hookwrapper = True ) def m1 ( ) : [EOL] out . append ( [string] ) [EOL] yield None [EOL] out . append ( [string] ) [EOL] [EOL] @ hookimpl def m2 ( ) : [EOL] out . append ( [string] ) [EOL] return [number] [EOL] [EOL] res = MC ( [ m2 , m1 ] , { } ) [EOL] assert res == [ [number] ] [EOL] assert out == [ [string] , [string] , [string] ] [EOL] out [ : ] = [ ] [EOL] res = MC ( [ m2 , m1 ] , { } , firstresult = True ) [EOL] assert res == [number] [EOL] assert out == [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_hookwrapper_order ( ) : [EOL] out = [ ] [EOL] [EOL] @ hookimpl ( hookwrapper = True ) def m1 ( ) : [EOL] out . append ( [string] ) [EOL] yield [number] [EOL] out . append ( [string] ) [EOL] [EOL] @ hookimpl ( hookwrapper = True ) def m2 ( ) : [EOL] out . append ( [string] ) [EOL] yield [number] [EOL] out . append ( [string] ) [EOL] [EOL] res = MC ( [ m2 , m1 ] , { } ) [EOL] assert res == [ ] [EOL] assert out == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_hookwrapper_not_yield ( ) : [EOL] @ hookimpl ( hookwrapper = True ) def m1 ( ) : [EOL] pass [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] MC ( [ m1 ] , { } ) [EOL] [EOL] [EOL] def test_hookwrapper_too_many_yield ( ) : [EOL] @ hookimpl ( hookwrapper = True ) def m1 ( ) : [EOL] yield [number] [EOL] yield [number] [EOL] [EOL] with pytest . raises ( RuntimeError ) as ex : [EOL] MC ( [ m1 ] , { } ) [EOL] assert [string] in str ( ex . value ) [EOL] assert ( __file__ + [string] ) in str ( ex . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ValueError , SystemExit ] ) def test_hookwrapper_exception ( exc ) : [EOL] out = [ ] [EOL] [EOL] @ hookimpl ( hookwrapper = True ) def m1 ( ) : [EOL] out . append ( [string] ) [EOL] yield None [EOL] out . append ( [string] ) [EOL] [EOL] @ hookimpl def m2 ( ) : [EOL] raise exc [EOL] [EOL] with pytest . raises ( exc ) : [EOL] MC ( [ m2 , m1 ] , { } ) [EOL] assert out == [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tools [EOL] import warnings [EOL] [EOL] import pytest [EOL] [EOL] from pluggy import PluginManager , HookimplMarker , HookspecMarker , _Result [EOL] [EOL] hookspec = HookspecMarker ( [string] ) [EOL] hookimpl = HookimplMarker ( [string] ) [EOL] [EOL] [EOL] def test_parse_hookimpl_override ( ) : [EOL] class MyPluginManager ( PluginManager ) : [EOL] def parse_hookimpl_opts ( self , module_or_class , name ) : [EOL] opts = PluginManager . parse_hookimpl_opts ( self , module_or_class , name ) [EOL] if opts is None : [EOL] if name . startswith ( [string] ) : [EOL] opts = { } [EOL] return opts [EOL] [EOL] class Plugin ( object ) : [EOL] def x1meth ( self ) : [EOL] pass [EOL] [EOL] @ hookimpl ( hookwrapper = True , tryfirst = True ) def x1meth2 ( self ) : [EOL] pass [EOL] [EOL] class Spec ( object ) : [EOL] @ hookspec def x1meth ( self ) : [EOL] pass [EOL] [EOL] @ hookspec def x1meth2 ( self ) : [EOL] pass [EOL] [EOL] pm = MyPluginManager ( hookspec . project_name ) [EOL] pm . register ( Plugin ( ) ) [EOL] pm . add_hookspecs ( Spec ) [EOL] assert not pm . hook . x1meth . _nonwrappers [ [number] ] . hookwrapper [EOL] assert not pm . hook . x1meth . _nonwrappers [ [number] ] . tryfirst [EOL] assert not pm . hook . x1meth . _nonwrappers [ [number] ] . trylast [EOL] assert not pm . hook . x1meth . _nonwrappers [ [number] ] . optionalhook [EOL] [EOL] assert pm . hook . x1meth2 . _wrappers [ [number] ] . tryfirst [EOL] assert pm . hook . x1meth2 . _wrappers [ [number] ] . hookwrapper [EOL] [EOL] [EOL] def test_plugin_getattr_raises_errors ( ) : [EOL] [docstring] [EOL] class DontTouchMe ( object ) : [EOL] def __getattr__ ( self , x ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] class Module ( object ) : [EOL] pass [EOL] [EOL] module = Module ( ) [EOL] module . x = DontTouchMe ( ) [EOL] [EOL] pm = PluginManager ( hookspec . project_name ) [EOL] [comment] [EOL] pm . register ( module , [string] ) [EOL] assert pm . get_plugin ( [string] ) is module [EOL] [EOL] [EOL] def test_warning_on_call_vs_hookspec_arg_mismatch ( ) : [EOL] [docstring] [EOL] class Spec : [EOL] @ hookspec def myhook ( self , arg1 , arg2 ) : [EOL] pass [EOL] [EOL] class Plugin : [EOL] @ hookimpl def myhook ( self , arg1 ) : [EOL] pass [EOL] [EOL] pm = PluginManager ( hookspec . project_name ) [EOL] pm . register ( Plugin ( ) ) [EOL] pm . add_hookspecs ( Spec ( ) ) [EOL] [EOL] with warnings . catch_warnings ( record = True ) as warns : [EOL] warnings . simplefilter ( [string] ) [EOL] [EOL] [comment] [EOL] pm . hook . myhook ( arg1 = [number] ) [EOL] [EOL] assert len ( warns ) == [number] [EOL] warning = warns [ - [number] ] [EOL] assert issubclass ( warning . category , Warning ) [EOL] assert [string] in str ( warning . message ) [EOL] [EOL] [EOL] def test_result_deprecated ( ) : [EOL] r = _Result ( [number] , None ) [EOL] with pytest . deprecated_call ( ) : [EOL] assert r . result == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] if __name__ == [string] : [EOL] import pytest [EOL] sys . exit ( pytest . main ( ) ) [EOL] else : [EOL] import sys , pytest [EOL] sys . modules [ [string] ] = pytest [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import py [EOL] pydir = py . path . local ( py . __file__ ) . dirpath ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL] [EOL]	0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import io [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] import py [EOL] import sys [EOL] [EOL] [EOL] class Message ( object ) : [EOL] def __init__ ( self , keywords , args ) : [EOL] self . keywords = keywords [EOL] self . args = args [EOL] [EOL] def content ( self ) : [EOL] return [string] . join ( map ( str , self . args ) ) [EOL] [EOL] def prefix ( self ) : [EOL] return [string] % ( [string] . join ( self . keywords ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . prefix ( ) + self . content ( ) [EOL] [EOL] [EOL] class Producer ( object ) : [EOL] [docstring] [EOL] [EOL] Message = Message [comment] [EOL] keywords2consumer = { } [EOL] [EOL] def __init__ ( self , keywords , keywordmapper = None , ** kw ) : [EOL] if hasattr ( keywords , [string] ) : [EOL] keywords = tuple ( keywords . split ( ) ) [EOL] self . _keywords = keywords [EOL] if keywordmapper is None : [EOL] keywordmapper = default_keywordmapper [EOL] self . _keywordmapper = keywordmapper [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % [string] . join ( self . _keywords ) [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] if [string] in name : [EOL] raise AttributeError ( name ) [EOL] producer = self . __class__ ( self . _keywords + ( name , ) ) [EOL] setattr ( self , name , producer ) [EOL] return producer [EOL] [EOL] def __call__ ( self , * args ) : [EOL] [docstring] [EOL] func = self . _keywordmapper . getconsumer ( self . _keywords ) [EOL] if func is not None : [EOL] func ( self . Message ( self . _keywords , args ) ) [EOL] [EOL] class KeywordMapper : [EOL] def __init__ ( self ) : [EOL] self . keywords2consumer = { } [EOL] [EOL] def getstate ( self ) : [EOL] return self . keywords2consumer . copy ( ) [EOL] [EOL] def setstate ( self , state ) : [EOL] self . keywords2consumer . clear ( ) [EOL] self . keywords2consumer . update ( state ) [EOL] [EOL] def getconsumer ( self , keywords ) : [EOL] [docstring] [EOL] for i in range ( len ( keywords ) , [number] , - [number] ) : [EOL] try : [EOL] return self . keywords2consumer [ keywords [ : i ] ] [EOL] except KeyError : [EOL] continue [EOL] return self . keywords2consumer . get ( [string] , default_consumer ) [EOL] [EOL] def setconsumer ( self , keywords , consumer ) : [EOL] [docstring] [EOL] [comment] [EOL] if isinstance ( keywords , str ) : [EOL] keywords = tuple ( filter ( None , keywords . split ( ) ) ) [EOL] elif hasattr ( keywords , [string] ) : [EOL] keywords = keywords . _keywords [EOL] elif not isinstance ( keywords , tuple ) : [EOL] raise TypeError ( [string] % ( keywords , ) ) [EOL] if consumer is not None and not py . builtin . callable ( consumer ) : [EOL] if not hasattr ( consumer , [string] ) : [EOL] raise TypeError ( [string] % ( consumer , ) ) [EOL] consumer = File ( consumer ) [EOL] self . keywords2consumer [ keywords ] = consumer [EOL] [EOL] [EOL] def default_consumer ( msg ) : [EOL] [docstring] [EOL] sys . stderr . write ( str ( msg ) + [string] ) [EOL] [EOL] default_keywordmapper = KeywordMapper ( ) [EOL] [EOL] [EOL] def setconsumer ( keywords , consumer ) : [EOL] default_keywordmapper . setconsumer ( keywords , consumer ) [EOL] [EOL] [EOL] def setstate ( state ) : [EOL] default_keywordmapper . setstate ( state ) [EOL] [EOL] [EOL] def getstate ( ) : [EOL] return default_keywordmapper . getstate ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class File ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , f ) : [EOL] assert hasattr ( f , [string] ) [EOL] [comment] [EOL] self . _file = f [EOL] [EOL] def __call__ ( self , msg ) : [EOL] [docstring] [EOL] self . _file . write ( str ( msg ) + [string] ) [EOL] if hasattr ( self . _file , [string] ) : [EOL] self . _file . flush ( ) [EOL] [EOL] [EOL] class Path ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , filename , append = False , delayed_create = False , buffering = False ) : [EOL] self . _append = append [EOL] self . _filename = str ( filename ) [EOL] self . _buffering = buffering [EOL] if not delayed_create : [EOL] self . _openfile ( ) [EOL] [EOL] def _openfile ( self ) : [EOL] mode = self . _append and [string] or [string] [EOL] f = open ( self . _filename , mode ) [EOL] self . _file = f [EOL] [EOL] def __call__ ( self , msg ) : [EOL] [docstring] [EOL] if not hasattr ( self , [string] ) : [EOL] self . _openfile ( ) [EOL] self . _file . write ( str ( msg ) + [string] ) [EOL] if not self . _buffering : [EOL] self . _file . flush ( ) [EOL] [EOL] [EOL] def STDOUT ( msg ) : [EOL] [docstring] [EOL] sys . stdout . write ( str ( msg ) + [string] ) [EOL] [EOL] [EOL] def STDERR ( msg ) : [EOL] [docstring] [EOL] sys . stderr . write ( str ( msg ) + [string] ) [EOL] [EOL] [EOL] class Syslog : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , priority = None ) : [EOL] if priority is None : [EOL] priority = self . LOG_INFO [EOL] self . priority = priority [EOL] [EOL] def __call__ ( self , msg ) : [EOL] [docstring] [EOL] import syslog [EOL] syslog . syslog ( self . priority , str ( msg ) ) [EOL] [EOL] [EOL] try : [EOL] import syslog [EOL] except ImportError : [EOL] pass [EOL] else : [EOL] for _prio in [string] . split ( ) : [EOL] _prio = [string] + _prio [EOL] try : [EOL] setattr ( Syslog , _prio , getattr ( syslog , _prio ) ) [EOL] except AttributeError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.Producer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.Producer$ 0 0 0 $tools.third_party.py.py._log.log.Producer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 0 0 $tools.third_party.py.py._log.log.File$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[EOL] from typing import Tuple [EOL] import typing [EOL] pytest_plugins = [string] , [EOL] [EOL]	0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] import py [EOL] from py . _path import svnwc as svncommon [EOL] from common import CommonFSTests [EOL] [EOL] class CommonSvnTests ( CommonFSTests ) : [EOL] [EOL] def test_propget ( self , path1 ) : [EOL] url = path1 . join ( [string] ) [EOL] value = url . propget ( [string] ) [EOL] assert value == [string] [EOL] [EOL] def test_proplist ( self , path1 ) : [EOL] url = path1 . join ( [string] ) [EOL] res = url . proplist ( ) [EOL] assert res [ [string] ] == [string] [EOL] [EOL] def test_info ( self , path1 ) : [EOL] url = path1 . join ( [string] ) [EOL] res = url . info ( ) [EOL] assert res . size > len ( [string] ) and res . created_rev >= [number] [EOL] [EOL] def test_log_simple ( self , path1 ) : [EOL] url = path1 . join ( [string] ) [EOL] logentries = url . log ( ) [EOL] for logentry in logentries : [EOL] assert logentry . rev == [number] [EOL] assert hasattr ( logentry , [string] ) [EOL] assert hasattr ( logentry , [string] ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] from distutils . version import LooseVersion [EOL] [EOL] import pytest [EOL] [EOL] import py [EOL] [EOL] mypath = py . path . local ( __file__ ) . new ( ext = [string] ) [EOL] [EOL] [EOL] win = sys . platform . startswith ( [string] ) [EOL] pytestmark = pytest . mark . skipif ( win and LooseVersion ( pytest . __version__ ) >= LooseVersion ( [string] ) , reason = [string] ) [EOL] [EOL] [EOL] @ pytest . mark . xfail def test_forwarding_to_warnings_module ( ) : [EOL] pytest . deprecated_call ( py . log . _apiwarn , [string] , [string] ) [EOL] [EOL] def test_apiwarn_functional ( recwarn ) : [EOL] capture = py . io . StdCapture ( ) [EOL] py . log . _apiwarn ( [string] , [string] , stacklevel = [number] ) [EOL] out , err = capture . reset ( ) [EOL] py . builtin . print_ ( [string] , out ) [EOL] py . builtin . print_ ( [string] , err ) [EOL] assert err . find ( [string] ) != - [number] [EOL] lno = py . code . getrawcode ( test_apiwarn_functional ) . co_firstlineno + [number] [EOL] exp = [string] % ( mypath , lno ) [EOL] assert err . find ( exp ) != - [number] [EOL] [EOL] def test_stacklevel ( recwarn ) : [EOL] def f ( ) : [EOL] py . log . _apiwarn ( [string] , [string] , stacklevel = [number] ) [EOL] [comment] [EOL] [comment] [EOL] capture = py . io . StdCapture ( ) [EOL] f ( ) [EOL] out , err = capture . reset ( ) [EOL] lno = py . code . getrawcode ( test_stacklevel ) . co_firstlineno + [number] [EOL] warning = str ( err ) [EOL] assert warning . find ( [string] % lno ) != - [number] [EOL] [EOL] def test_stacklevel_initpkg_with_resolve ( testdir , recwarn ) : [EOL] testdir . makepyfile ( modabc = [string] ) [EOL] testdir . makepyfile ( apipkg123 = [string] ) [EOL] p = testdir . makepyfile ( [string] ) [EOL] capture = py . io . StdCapture ( ) [EOL] p . pyimport ( ) [EOL] out , err = capture . reset ( ) [EOL] warning = str ( err ) [EOL] loc = [string] [EOL] assert warning . find ( loc ) != - [number] [EOL] [EOL] def test_stacklevel_initpkg_no_resolve ( recwarn ) : [EOL] def f ( ) : [EOL] py . log . _apiwarn ( [string] , [string] , stacklevel = [string] ) [EOL] capture = py . io . StdCapture ( ) [EOL] f ( ) [EOL] out , err = capture . reset ( ) [EOL] lno = py . code . getrawcode ( test_stacklevel_initpkg_no_resolve ) . co_firstlineno + [number] [EOL] warning = str ( err ) [EOL] assert warning . find ( [string] % lno ) != - [number] [EOL] [EOL] [EOL] def test_function ( recwarn ) : [EOL] capture = py . io . StdCapture ( ) [EOL] py . log . _apiwarn ( [string] , [string] , function = test_function ) [EOL] out , err = capture . reset ( ) [EOL] py . builtin . print_ ( [string] , out ) [EOL] py . builtin . print_ ( [string] , err ) [EOL] assert err . find ( [string] ) != - [number] [EOL] lno = py . code . getrawcode ( test_function ) . co_firstlineno [EOL] exp = [string] % ( mypath , lno ) [EOL] assert err . find ( exp ) != - [number] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import sys [EOL] import py [EOL] [EOL] [EOL] @ pytest . mark . skipif ( [string] ) def test_kill ( tmpdir ) : [EOL] subprocess = pytest . importorskip ( [string] ) [EOL] t = tmpdir . join ( [string] ) [EOL] t . write ( [string] ) [EOL] proc = subprocess . Popen ( [ sys . executable , str ( t ) ] ) [EOL] assert proc . poll ( ) is None [comment] [EOL] py . process . kill ( proc . pid ) [EOL] ret = proc . wait ( ) [EOL] if sys . platform == [string] and ret == [number] : [EOL] pytest . skip ( [string] [string] ) [EOL] assert ret != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import py [EOL] from py . process import cmdexec [EOL] [EOL] def exvalue ( ) : [EOL] import sys [EOL] return sys . exc_info ( ) [ [number] ] [EOL] [EOL] [EOL] class Test_exec_cmd : [EOL] def test_simple ( self ) : [EOL] out = cmdexec ( [string] ) [EOL] assert out . strip ( ) == [string] [EOL] assert py . builtin . _istext ( out ) [EOL] [EOL] def test_simple_newline ( self ) : [EOL] import sys [EOL] out = cmdexec ( [string] % sys . executable ) [EOL] assert out == [string] [EOL] assert py . builtin . _istext ( out ) [EOL] [EOL] def test_simple_error ( self ) : [EOL] py . test . raises ( cmdexec . Error , cmdexec , [string] ) [EOL] [EOL] def test_simple_error_exact_status ( self ) : [EOL] try : [EOL] cmdexec ( [string] ) [EOL] except cmdexec . Error : [EOL] e = exvalue ( ) [EOL] assert e . status == [number] [EOL] assert py . builtin . _istext ( e . out ) [EOL] assert py . builtin . _istext ( e . err ) [EOL] [EOL] def test_err ( self ) : [EOL] try : [EOL] cmdexec ( [string] ) [EOL] raise AssertionError ( [string] ) [EOL] except cmdexec . Error : [EOL] e = exvalue ( ) [EOL] assert hasattr ( e , [string] ) [EOL] assert hasattr ( e , [string] ) [EOL] assert e . err or e . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL]	0 0
[comment] [EOL]	0 0
from typing import List , Type , Tuple , Any , Dict [EOL] import typing [EOL] import tools [EOL] import pytest , py [EOL] import re [EOL] [EOL] def exvalue ( ) : [EOL] import sys [EOL] return sys . exc_info ( ) [ [number] ] [EOL] [EOL] def f ( ) : [EOL] return [number] [EOL] [EOL] def test_assert ( ) : [EOL] try : [EOL] assert f ( ) == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] [EOL] def test_assert_within_finally ( ) : [EOL] excinfo = py . test . raises ( ZeroDivisionError , [string] ) [EOL] s = excinfo . exconly ( ) [EOL] assert re . search ( [string] , s ) is not None [EOL] [EOL] [EOL] def test_assert_multiline_1 ( ) : [EOL] try : [EOL] assert ( f ( ) == [number] ) [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] def test_assert_multiline_2 ( ) : [EOL] try : [EOL] assert ( f ( ) == ( [number] , [number] ) [ - [number] ] ) [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] def test_in ( ) : [EOL] try : [EOL] assert [string] in [ [number] , [number] ] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] def test_is ( ) : [EOL] try : [EOL] assert [number] is [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] [EOL] def test_attrib ( ) : [EOL] class Foo ( object ) : [EOL] b = [number] [EOL] i = Foo ( ) [EOL] try : [EOL] assert i . b == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] def test_attrib_inst ( ) : [EOL] class Foo ( object ) : [EOL] b = [number] [EOL] try : [EOL] assert Foo ( ) . b == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] [EOL] def test_len ( ) : [EOL] l = list ( range ( [number] ) ) [EOL] try : [EOL] assert len ( l ) == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert s . startswith ( [string] ) [EOL] assert [string] in s [EOL] [EOL] [EOL] def test_assert_keyword_arg ( ) : [EOL] def f ( x = [number] ) : [EOL] return False [EOL] try : [EOL] assert f ( x = [number] ) [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert [string] in str ( e ) [EOL] [EOL] [comment] [EOL] class WeirdRepr : [EOL] def __repr__ ( self ) : [EOL] return [string] [EOL] [EOL] def bug_test_assert_repr ( ) : [EOL] v = WeirdRepr ( ) [EOL] try : [EOL] assert v == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert str ( e ) . find ( [string] ) != - [number] [EOL] assert str ( e ) . find ( [string] ) != - [number] [EOL] assert [number] [EOL] [EOL] def test_assert_non_string ( ) : [EOL] try : [EOL] assert [number] , [ [string] ] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert str ( e ) . find ( [string] ) != - [number] [EOL] [EOL] def test_assert_implicit_multiline ( ) : [EOL] try : [EOL] x = [ [number] , [number] , [number] ] [EOL] assert x != [ [number] , [number] , [number] ] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert str ( e ) . find ( [string] ) != - [number] [EOL] [EOL] @ py . test . mark . xfail ( py . test . __version__ [ [number] ] != [string] , reason = [string] , run = False ) def test_assert_with_brokenrepr_arg ( ) : [EOL] class BrokenRepr : [EOL] def __repr__ ( self ) : [number] / [number] [EOL] e = AssertionError ( BrokenRepr ( ) ) [EOL] if e . msg . find ( [string] ) == - [number] : [EOL] py . test . fail ( [string] ) [EOL] [EOL] def test_multiple_statements_per_line ( ) : [EOL] try : [EOL] a = [number] ; assert a == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert [string] in str ( e ) [EOL] [EOL] def test_power ( ) : [EOL] try : [EOL] assert [number] ** [number] == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] assert [string] in str ( e ) [EOL] [EOL] [EOL] class TestView : [EOL] [EOL] def setup_class ( cls ) : [EOL] cls . View = py . test . importorskip ( [string] ) . View [EOL] [EOL] def test_class_dispatch ( self ) : [EOL] [comment] [EOL] [EOL] class Picklable ( self . View ) : [EOL] pass [EOL] [EOL] class Simple ( Picklable ) : [EOL] __view__ = object [EOL] def pickle ( self ) : [EOL] return repr ( self . __obj__ ) [EOL] [EOL] class Seq ( Picklable ) : [EOL] __view__ = list , tuple , dict [EOL] def pickle ( self ) : [EOL] return [string] . join ( [ Picklable ( item ) . pickle ( ) for item in self . __obj__ ] ) [EOL] [EOL] class Dict ( Seq ) : [EOL] __view__ = dict [EOL] def pickle ( self ) : [EOL] return Seq . pickle ( self ) + [string] + Seq ( self . values ( ) ) . pickle ( ) [EOL] [EOL] assert Picklable ( [number] ) . pickle ( ) == [string] [EOL] assert Picklable ( [ [number] , [ [number] , [number] ] , [number] ] ) . pickle ( ) == [string] [EOL] assert Picklable ( { [number] : [number] } ) . pickle ( ) == [string] [EOL] [EOL] def test_viewtype_class_hierarchy ( self ) : [EOL] [comment] [EOL] class Operation : [EOL] [docstring] [EOL] def __init__ ( self , opname , * args ) : [EOL] self . opname = opname [EOL] self . args = args [EOL] [EOL] existing = [ Operation ( [string] , [number] , [number] ) , Operation ( [string] , [string] , [string] ) , Operation ( [string] , [string] , [string] , [number] ) , Operation ( [string] , [number] , [number] ) ] [EOL] [EOL] class PyOp ( self . View ) : [EOL] def __viewkey__ ( self ) : [EOL] return self . opname [EOL] def generate ( self ) : [EOL] return [string] % ( self . opname , [string] . join ( map ( repr , self . args ) ) ) [EOL] [EOL] class PyBinaryOp ( PyOp ) : [EOL] __view__ = ( [string] , [string] , [string] , [string] ) [EOL] def generate ( self ) : [EOL] return [string] % ( self . args [ [number] ] , self . opname , self . args [ [number] ] ) [EOL] [EOL] codelines = [ PyOp ( op ) . generate ( ) for op in existing ] [EOL] assert codelines == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def test_underscore_api ( ) : [EOL] py . code . _AssertionError [EOL] py . code . _reinterpret_old [comment] [EOL] py . code . _reinterpret [EOL] [EOL] def test_assert_customizable_reprcompare ( monkeypatch ) : [EOL] util = pytest . importorskip ( [string] ) [EOL] monkeypatch . setattr ( util , [string] , lambda * args : [string] ) [EOL] try : [EOL] assert [number] == [number] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert [string] in s [EOL] [EOL] def test_assert_long_source_1 ( ) : [EOL] try : [EOL] assert len == [ ( None , [ [string] , [string] ] ) , ] [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert [string] not in s [EOL] assert [string] in s [EOL] [EOL] def test_assert_long_source_2 ( ) : [EOL] try : [EOL] assert ( len == [ ( None , [ [string] , [string] ] ) , ] ) [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert [string] not in s [EOL] assert [string] in s [EOL] [EOL] def test_assert_raise_alias ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . stdout . fnmatch_lines ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] @ py . test . mark . xfail ( py . test . __version__ [ [number] ] != [string] , reason = [string] , run = False ) def test_assert_raise_subclass ( ) : [EOL] class SomeEx ( AssertionError ) : [EOL] def __init__ ( self , * args ) : [EOL] super ( SomeEx , self ) . __init__ ( ) [EOL] try : [EOL] raise SomeEx ( [string] ) [EOL] except AssertionError as e : [EOL] s = str ( e ) [EOL] assert [string] not in s [EOL] assert [string] in s [EOL] [EOL] def test_assert_raises_in_nonzero_of_object_pytest_issue10 ( ) : [EOL] class A ( object ) : [EOL] def __nonzero__ ( self ) : [EOL] raise ValueError ( [number] ) [EOL] def __lt__ ( self , other ) : [EOL] return A ( ) [EOL] def __repr__ ( self ) : [EOL] return [string] [EOL] def myany ( x ) : [EOL] return True [EOL] try : [EOL] assert not ( myany ( A ( ) < [number] ) ) [EOL] except AssertionError : [EOL] e = exvalue ( ) [EOL] s = str ( e ) [EOL] assert [string] in s [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.py.testing.code.test_assertion.TestView.test_class_dispatch.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tools.third_party.py.testing.code.test_assertion.TestView.test_viewtype_class_hierarchy.Operation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tools.third_party.py.testing.code.test_assertion.TestView.test_viewtype_class_hierarchy.Operation]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List , Dict [EOL] import typing [EOL] import sys , os [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import py [EOL] release = py . __version__ [EOL] version = [string] . join ( release . split ( [string] ) [ : [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( [string] , [string] , [string] , [ [string] ] , [number] ) ] [EOL] [EOL] autodoc_member_order = [string] [EOL] autodoc_default_flags = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = [string] [EOL] epub_author = [string] [EOL] epub_publisher = [string] [EOL] epub_copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : None } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0
from . core import where , old_where [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from certifi import where [EOL] print ( where ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import json [EOL] [EOL] import html5lib [EOL] [EOL] [EOL] def parse ( path = [string] ) : [EOL] return html5lib . parse ( open ( path ) , treebuilder = [string] ) [EOL] [EOL] [EOL] def entity_table ( tree ) : [EOL] return { entity_name ( [string] . join ( tr [ [number] ] . xpath ( [string] ) ) ) : entity_characters ( tr [ [number] ] . text ) for tr in tree . xpath ( [string] , namespaces = { [string] : [string] } ) } [EOL] [EOL] [EOL] def entity_name ( inp ) : [EOL] return inp . strip ( ) [EOL] [EOL] [EOL] def entity_characters ( inp ) : [EOL] return [string] . join ( codepoint_to_character ( item ) for item in inp . split ( ) if item ) [EOL] [EOL] [EOL] def codepoint_to_character ( inp ) : [EOL] return ( [string] + inp [ [number] : ] ) . decode ( [string] ) [EOL] [EOL] [EOL] def make_tests_json ( entities ) : [EOL] test_list = make_test_list ( entities ) [EOL] tests_json = { [string] : [ make_test ( * item ) for item in test_list ] } [EOL] return tests_json [EOL] [EOL] [EOL] def make_test ( name , characters , good ) : [EOL] return { [string] : test_description ( name , good ) , [string] : [string] % name , [string] : test_expected ( name , characters , good ) } [EOL] [EOL] [EOL] def test_description ( name , good ) : [EOL] with_semicolon = name . endswith ( [string] ) [EOL] semicolon_text = { True : [string] , False : [string] } [ with_semicolon ] [EOL] if good : [EOL] text = [string] % ( name , semicolon_text ) [EOL] else : [EOL] text = [string] % ( name , semicolon_text ) [EOL] return text [EOL] [EOL] [EOL] def test_expected ( name , characters , good ) : [EOL] rv = [ ] [EOL] if not good or not name . endswith ( [string] ) : [EOL] rv . append ( [string] ) [EOL] rv . append ( [ [string] , characters ] ) [EOL] return rv [EOL] [EOL] [EOL] def make_test_list ( entities ) : [EOL] tests = [ ] [EOL] for entity_name , characters in entities . items ( ) : [EOL] if entity_name . endswith ( [string] ) and not subentity_exists ( entity_name , entities ) : [EOL] tests . append ( ( entity_name [ : - [number] ] , [string] + entity_name [ : - [number] ] , False ) ) [EOL] tests . append ( ( entity_name , characters , True ) ) [EOL] return sorted ( tests ) [EOL] [EOL] [EOL] def subentity_exists ( entity_name , entities ) : [EOL] for i in range ( [number] , len ( entity_name ) ) : [EOL] if entity_name [ : - i ] in entities : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def make_entities_code ( entities ) : [EOL] entities_text = [string] . join ( [string] % ( name , entities [ name ] . encode ( [string] ) . replace ( [string] , [string] ) ) for name in sorted ( entities . keys ( ) ) ) [EOL] return [string] % entities_text [EOL] [EOL] [EOL] def main ( ) : [EOL] entities = entity_table ( parse ( ) ) [EOL] tests_json = make_tests_json ( entities ) [EOL] json . dump ( tests_json , open ( [string] , [string] ) , indent = [number] ) [EOL] code = make_entities_code ( entities ) [EOL] open ( [string] , [string] ) . write ( code ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Tuple , Dict , Optional [EOL] import typing [EOL] from __future__ import absolute_import , division , unicode_literals [EOL] [EOL] import string [EOL] [EOL] EOF = None [EOL] [EOL] E = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] [string] , [string] : [string] [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] namespaces = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] scopingElements = frozenset ( [ ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ] ) [EOL] [EOL] formattingElements = frozenset ( [ ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) ] ) [EOL] [EOL] specialElements = frozenset ( [ ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) ] ) [EOL] [EOL] htmlIntegrationPointElements = frozenset ( [ ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) ] ) [EOL] [EOL] mathmlTextIntegrationPointElements = frozenset ( [ ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) , ( namespaces [ [string] ] , [string] ) ] ) [EOL] [EOL] adjustSVGAttributes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] adjustMathMLAttributes = { [string] : [string] } [EOL] [EOL] adjustForeignAttributes = { [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) , [string] : ( None , [string] , namespaces [ [string] ] ) , [string] : ( [string] , [string] , namespaces [ [string] ] ) } [EOL] [EOL] unadjustForeignAttributes = { ( ns , local ) : qname for qname , ( prefix , local , ns ) in adjustForeignAttributes . items ( ) } [EOL] [EOL] spaceCharacters = frozenset ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] tableInsertModeElements = frozenset ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] asciiLowercase = frozenset ( string . ascii_lowercase ) [EOL] asciiUppercase = frozenset ( string . ascii_uppercase ) [EOL] asciiLetters = frozenset ( string . ascii_letters ) [EOL] digits = frozenset ( string . digits ) [EOL] hexDigits = frozenset ( string . hexdigits ) [EOL] [EOL] asciiUpper2Lower = { ord ( c ) : ord ( c . lower ( ) ) for c in string . ascii_uppercase } [EOL] [EOL] [comment] [EOL] headingElements = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] voidElements = frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] cdataElements = frozenset ( [ [string] , [string] ] ) [EOL] [EOL] rcdataElements = frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] booleanAttributes = { [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] ] ) , [string] : frozenset ( [ [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] , [string] , [string] ] ) , [string] : frozenset ( [ [string] ] ) , [string] : frozenset ( [ [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] , [string] , [string] , [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] , [string] , [string] ] ) , [string] : frozenset ( [ [string] , [string] ] ) , [string] : frozenset ( [ [string] ] ) , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] entitiesWindows1252 = ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] xmlEntities = frozenset ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] entities = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] replacementCharacters = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] tokenTypes = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] tagTokenTypes = frozenset ( [ tokenTypes [ [string] ] , tokenTypes [ [string] ] , tokenTypes [ [string] ] ] ) [EOL] [EOL] [EOL] prefixes = { v : k for k , v in namespaces . items ( ) } [EOL] prefixes [ [string] ] = [string] [EOL] [EOL] [EOL] class DataLossWarning ( UserWarning ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class _ReparseException ( Exception ) : [EOL] pass [EOL]	typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from __future__ import absolute_import , division , unicode_literals [EOL] [EOL] [EOL] class Filter ( object ) : [EOL] def __init__ ( self , source ) : [EOL] self . source = source [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . source ) [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] return getattr ( self . source , name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from __future__ import absolute_import , division , unicode_literals [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any , DefaultDict , List , Dict [EOL] import typing [EOL] import tools [EOL] from __future__ import absolute_import , division , unicode_literals [EOL] [EOL] [comment] [EOL] [EOL] import os [EOL] import sys [EOL] import codecs [EOL] import glob [EOL] import xml . sax . handler [EOL] [EOL] base_path = os . path . split ( __file__ ) [ [number] ] [EOL] [EOL] test_dir = os . path . join ( base_path , [string] ) [EOL] sys . path . insert ( [number] , os . path . abspath ( os . path . join ( base_path , os . path . pardir , os . path . pardir ) ) ) [EOL] [EOL] from html5lib import treebuilders , treewalkers , treeadapters [comment] [EOL] del base_path [EOL] [EOL] [comment] [EOL] treeTypes = { } [EOL] [EOL] [comment] [EOL] treeTypes [ [string] ] = { [string] : treebuilders . getTreeBuilder ( [string] ) , [string] : treewalkers . getTreeWalker ( [string] ) } [EOL] [EOL] [comment] [EOL] import xml . etree . ElementTree as ElementTree [comment] [EOL] treeTypes [ [string] ] = { [string] : treebuilders . getTreeBuilder ( [string] , ElementTree , fullTree = True ) , [string] : treewalkers . getTreeWalker ( [string] , ElementTree ) } [EOL] [EOL] try : [EOL] import xml . etree . cElementTree as cElementTree [comment] [EOL] except ImportError : [EOL] treeTypes [ [string] ] = None [EOL] else : [EOL] [comment] [EOL] if cElementTree . Element is ElementTree . Element : [EOL] treeTypes [ [string] ] = None [EOL] else : [EOL] treeTypes [ [string] ] = { [string] : treebuilders . getTreeBuilder ( [string] , cElementTree , fullTree = True ) , [string] : treewalkers . getTreeWalker ( [string] , cElementTree ) } [EOL] [EOL] try : [EOL] import lxml . etree as lxml [comment] [EOL] except ImportError : [EOL] treeTypes [ [string] ] = None [EOL] else : [EOL] treeTypes [ [string] ] = { [string] : treebuilders . getTreeBuilder ( [string] ) , [string] : treewalkers . getTreeWalker ( [string] ) } [EOL] [EOL] [comment] [EOL] try : [EOL] import genshi [comment] [EOL] except ImportError : [EOL] treeTypes [ [string] ] = None [EOL] else : [EOL] treeTypes [ [string] ] = { [string] : treebuilders . getTreeBuilder ( [string] ) , [string] : lambda tree : treeadapters . genshi . to_genshi ( treewalkers . getTreeWalker ( [string] ) ( tree ) ) , [string] : treewalkers . getTreeWalker ( [string] ) } [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def get_data_files ( subdirectory , files = [string] , search_dir = test_dir ) : [EOL] return sorted ( glob . glob ( os . path . join ( search_dir , subdirectory , files ) ) ) [EOL] [EOL] [EOL] class DefaultDict ( dict ) : [EOL] def __init__ ( self , default , * args , ** kwargs ) : [EOL] self . default = default [EOL] dict . __init__ ( self , * args , ** kwargs ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return dict . get ( self , key , self . default ) [EOL] [EOL] [EOL] class TestData ( object ) : [EOL] def __init__ ( self , filename , newTestHeading = [string] , encoding = [string] ) : [EOL] if encoding is None : [EOL] self . f = open ( filename , mode = [string] ) [EOL] else : [EOL] self . f = codecs . open ( filename , encoding = encoding ) [EOL] self . encoding = encoding [EOL] self . newTestHeading = newTestHeading [EOL] [EOL] def __iter__ ( self ) : [EOL] data = DefaultDict ( None ) [EOL] key = None [EOL] for line in self . f : [EOL] heading = self . isSectionHeading ( line ) [EOL] if heading : [EOL] if data and heading == self . newTestHeading : [EOL] [comment] [EOL] data [ key ] = data [ key ] [ : - [number] ] [EOL] yield self . normaliseOutput ( data ) [EOL] data = DefaultDict ( None ) [EOL] key = heading [EOL] data [ key ] = [string] if self . encoding else [string] [EOL] elif key is not None : [EOL] data [ key ] += line [EOL] if data : [EOL] yield self . normaliseOutput ( data ) [EOL] [EOL] def isSectionHeading ( self , line ) : [EOL] [docstring] [EOL] [comment] [EOL] if line . startswith ( [string] if self . encoding else [string] ) : [EOL] return line [ [number] : ] . strip ( ) [EOL] else : [EOL] return False [EOL] [EOL] def normaliseOutput ( self , data ) : [EOL] [comment] [EOL] for key , value in data . items ( ) : [EOL] if value . endswith ( [string] if self . encoding else [string] ) : [EOL] data [ key ] = value [ : - [number] ] [EOL] return data [EOL] [EOL] [EOL] def convert ( stripChars ) : [EOL] def convertData ( data ) : [EOL] [docstring] [EOL] data = data . split ( [string] ) [EOL] rv = [ ] [EOL] for line in data : [EOL] if line . startswith ( [string] ) : [EOL] rv . append ( line [ stripChars : ] ) [EOL] else : [EOL] rv . append ( line ) [EOL] return [string] . join ( rv ) [EOL] return convertData [EOL] [EOL] [EOL] convertExpected = convert ( [number] ) [EOL] [EOL] [EOL] def errorMessage ( input , expected , actual ) : [EOL] msg = ( [string] % ( repr ( input ) , repr ( expected ) , repr ( actual ) ) ) [EOL] if sys . version_info [ [number] ] == [number] : [EOL] msg = msg . encode ( [string] , [string] ) [EOL] return msg [EOL] [EOL] [EOL] class TracingSaxHandler ( xml . sax . handler . ContentHandler ) : [EOL] def __init__ ( self ) : [EOL] xml . sax . handler . ContentHandler . __init__ ( self ) [EOL] self . visited = [ ] [EOL] [EOL] def startDocument ( self ) : [EOL] self . visited . append ( [string] ) [EOL] [EOL] def endDocument ( self ) : [EOL] self . visited . append ( [string] ) [EOL] [EOL] def startPrefixMapping ( self , prefix , uri ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def endPrefixMapping ( self , prefix ) : [EOL] [comment] [EOL] pass [EOL] [EOL] def startElement ( self , name , attrs ) : [EOL] self . visited . append ( ( [string] , name , attrs ) ) [EOL] [EOL] def endElement ( self , name ) : [EOL] self . visited . append ( ( [string] , name ) ) [EOL] [EOL] def startElementNS ( self , name , qname , attrs ) : [EOL] self . visited . append ( ( [string] , name , qname , dict ( attrs ) ) ) [EOL] [EOL] def endElementNS ( self , name , qname ) : [EOL] self . visited . append ( ( [string] , name , qname ) ) [EOL] [EOL] def characters ( self , content ) : [EOL] self . visited . append ( ( [string] , content ) ) [EOL] [EOL] def ignorableWhitespace ( self , whitespace ) : [EOL] self . visited . append ( ( [string] , whitespace ) ) [EOL] [EOL] def processingInstruction ( self , target , data ) : [EOL] self . visited . append ( ( [string] , target , data ) ) [EOL] [EOL] def skippedEntity ( self , name ) : [EOL] self . visited . append ( ( [string] , name ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 $typing.Any$ 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 $typing.Any$ 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 0 0 0 0 0 0 $tools.third_party.html5lib.html5lib.tests.support.DefaultDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from __future__ import absolute_import , division , unicode_literals [EOL] [EOL] from html5lib . filters . optionaltags import Filter [EOL] [EOL] [EOL] def test_empty ( ) : [EOL] assert list ( Filter ( [ ] ) ) == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from __future__ import absolute_import , division , unicode_literals [EOL] [EOL] from . py import Trie [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from hyperframe . frame import ( Flags , Flag , ) [EOL] import pytest [EOL] [EOL] [EOL] class TestFlags ( object ) : [EOL] def test_add ( self ) : [EOL] flags = Flags ( [ Flag ( [string] , [number] ) ] ) [EOL] assert not flags [EOL] [EOL] flags . add ( [string] ) [EOL] flags . add ( [string] ) [EOL] assert [string] in flags [EOL] assert list ( flags ) == [ [string] ] [EOL] assert len ( flags ) == [number] [EOL] [EOL] def test_remove ( self ) : [EOL] flags = Flags ( [ Flag ( [string] , [number] ) ] ) [EOL] flags . add ( [string] ) [EOL] [EOL] flags . discard ( [string] ) [EOL] assert [string] not in flags [EOL] assert list ( flags ) == [ ] [EOL] assert len ( flags ) == [number] [EOL] [EOL] [comment] [EOL] flags . discard ( [string] ) [EOL] [EOL] def test_validation ( self ) : [EOL] flags = Flags ( [ Flag ( [string] , [number] ) ] ) [EOL] flags . add ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] flags . add ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import sys [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def C ( ) : [EOL] [docstring] [EOL] import attr [EOL] [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( ) [EOL] y = attr . ib ( ) [EOL] [EOL] return C [EOL] [EOL] [EOL] collect_ignore = [ ] [EOL] if sys . version_info [ : [number] ] < ( [number] , [number] ) : [EOL] collect_ignore . extend ( [ [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Match , Tuple , Any , Optional , Dict [EOL] import typing [EOL] import codecs [EOL] import os [EOL] import re [EOL] [EOL] [EOL] def read ( * parts ) : [EOL] [docstring] [EOL] here = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] with codecs . open ( os . path . join ( here , * parts ) , [string] , [string] ) as f : [EOL] return f . read ( ) [EOL] [EOL] [EOL] def find_version ( * file_paths ) : [EOL] [docstring] [EOL] version_file = read ( * file_paths ) [EOL] version_match = re . search ( [string] , version_file , re . M ) [EOL] if version_match : [EOL] return version_match . group ( [number] ) [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] release = find_version ( [string] ) [EOL] version = release . rsplit ( [string] , [number] ) [ [number] ] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] add_function_parentheses = True [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] html_theme = [string] [EOL] html_theme_options = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_logo = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] html_domain_indices = True [EOL] [EOL] [comment] [EOL] html_use_index = True [EOL] [EOL] [comment] [EOL] html_split_index = False [EOL] [EOL] [comment] [EOL] html_show_sourcelink = False [EOL] [EOL] [comment] [EOL] html_show_sphinx = True [EOL] [EOL] [comment] [EOL] html_show_copyright = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( [string] , [string] , [string] , [ [string] ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] intersphinx_mapping = { [string] : None , } [EOL] [EOL] [comment] [EOL] suppress_warnings = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[docstring] [EOL] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] [EOL] def optional ( converter ) : [EOL] [docstring] [EOL] [EOL] def optional_converter ( val ) : [EOL] if val is None : [EOL] return None [EOL] return converter ( val ) [EOL] [EOL] return optional_converter [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Callable [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] import pytest [EOL] [EOL] from attr . converters import optional [EOL] [EOL] [EOL] class TestOptional ( object ) : [EOL] [docstring] [EOL] def test_success_with_type ( self ) : [EOL] [docstring] [EOL] c = optional ( int ) [EOL] assert c ( [string] ) == [number] [EOL] [EOL] def test_success_with_none ( self ) : [EOL] [docstring] [EOL] c = optional ( int ) [EOL] assert c ( None ) is None [EOL] [EOL] def test_fail ( self ) : [EOL] [docstring] [EOL] c = optional ( int ) [EOL] with pytest . raises ( ValueError ) : [EOL] c ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Optional[builtins.int]]$ 0 0 0 0
	0
from typing import Any , Dict , Type [EOL] import typing [EOL] import tools [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import copy [EOL] import inspect [EOL] import itertools [EOL] import sys [EOL] [EOL] from operator import attrgetter [EOL] [EOL] import pytest [EOL] [EOL] from hypothesis import given [EOL] from hypothesis . strategies import booleans , integers , lists , sampled_from , text [EOL] [EOL] import attr [EOL] [EOL] from attr import _config [EOL] from attr . _compat import PY2 , ordered_dict [EOL] from attr . _make import ( Attribute , Factory , _AndValidator , _Attributes , _ClassBuilder , _CountingAttr , _transform_attrs , and_ , fields , fields_dict , make_class , validate ) [EOL] from attr . exceptions import DefaultAlreadySetError , NotAnAttrsClassError [EOL] [EOL] from . strategies import ( gen_attr_names , list_of_attrs , simple_attrs , simple_attrs_with_metadata , simple_attrs_without_metadata , simple_classes ) [EOL] from . utils import simple_attr [EOL] [EOL] [EOL] attrs_st = simple_attrs . map ( lambda c : Attribute . from_counting_attr ( [string] , c ) ) [EOL] [EOL] [EOL] class TestCountingAttr ( object ) : [EOL] [docstring] [EOL] def test_returns_Attr ( self ) : [EOL] [docstring] [EOL] a = attr . ib ( ) [EOL] [EOL] assert isinstance ( a , _CountingAttr ) [EOL] [EOL] def test_validators_lists_to_wrapped_tuples ( self ) : [EOL] [docstring] [EOL] def v1 ( _ , __ ) : [EOL] pass [EOL] [EOL] def v2 ( _ , __ ) : [EOL] pass [EOL] [EOL] a = attr . ib ( validator = [ v1 , v2 ] ) [EOL] [EOL] assert _AndValidator ( ( v1 , v2 , ) ) == a . _validator [EOL] [EOL] def test_validator_decorator_single ( self ) : [EOL] [docstring] [EOL] a = attr . ib ( ) [EOL] [EOL] @ a . validator def v ( ) : [EOL] pass [EOL] [EOL] assert v == a . _validator [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ lambda v : v , lambda v : [ v ] , lambda v : and_ ( v ) ] ) def test_validator_decorator ( self , wrap ) : [EOL] [docstring] [EOL] def v ( _ , __ ) : [EOL] pass [EOL] [EOL] a = attr . ib ( validator = wrap ( v ) ) [EOL] [EOL] @ a . validator def v2 ( self , _ , __ ) : [EOL] pass [EOL] [EOL] assert _AndValidator ( ( v , v2 , ) ) == a . _validator [EOL] [EOL] def test_default_decorator_already_set ( self ) : [EOL] [docstring] [EOL] a = attr . ib ( default = [number] ) [EOL] [EOL] with pytest . raises ( DefaultAlreadySetError ) : [EOL] @ a . default def f ( self ) : [EOL] pass [EOL] [EOL] def test_default_decorator_sets ( self ) : [EOL] [docstring] [EOL] a = attr . ib ( ) [EOL] [EOL] @ a . default def f ( self ) : [EOL] pass [EOL] [EOL] assert Factory ( f , True ) == a . _default [EOL] [EOL] [EOL] class TestAttribute ( object ) : [EOL] [docstring] [EOL] def test_deprecated_convert_argument ( self ) : [EOL] [docstring] [EOL] def conv ( v ) : [EOL] return v [EOL] [EOL] with pytest . warns ( DeprecationWarning ) as wi : [EOL] a = Attribute ( [string] , True , True , True , True , True , True , convert = conv ) [EOL] w = wi . pop ( ) [EOL] [EOL] assert conv == a . converter [EOL] assert ( [string] [string] , ) == w . message . args [EOL] assert __file__ == w . filename [EOL] [EOL] def test_deprecated_convert_attribute ( self ) : [EOL] [docstring] [EOL] def conv ( v ) : [EOL] return v [EOL] [EOL] a = simple_attr ( [string] , converter = conv ) [EOL] with pytest . warns ( DeprecationWarning ) as wi : [EOL] convert = a . convert [EOL] w = wi . pop ( ) [EOL] [EOL] assert conv is convert is a . converter [EOL] assert ( [string] [string] , ) == w . message . args [EOL] assert __file__ == w . filename [EOL] [EOL] def test_convert_converter ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( RuntimeError ) as ei : [EOL] Attribute ( [string] , True , True , True , True , True , True , convert = lambda v : v , converter = lambda v : v , ) [EOL] [EOL] assert ( [string] [string] , ) == ei . value . args [EOL] [EOL] [EOL] def make_tc ( ) : [EOL] class TransformC ( object ) : [EOL] z = attr . ib ( ) [EOL] y = attr . ib ( ) [EOL] x = attr . ib ( ) [EOL] a = [number] [EOL] return TransformC [EOL] [EOL] [EOL] class TestTransformAttrs ( object ) : [EOL] [docstring] [EOL] def test_no_modifications ( self ) : [EOL] [docstring] [EOL] C = make_tc ( ) [EOL] _transform_attrs ( C , None , False ) [EOL] [EOL] assert None is getattr ( C , [string] , None ) [EOL] [EOL] def test_normal ( self ) : [EOL] [docstring] [EOL] C = make_tc ( ) [EOL] attrs , _ , _ = _transform_attrs ( C , None , False ) [EOL] [EOL] assert [ [string] , [string] , [string] ] == [ a . name for a in attrs ] [EOL] [EOL] def test_empty ( self ) : [EOL] [docstring] [EOL] @ attr . s class C ( object ) : [EOL] pass [EOL] [EOL] assert _Attributes ( ( ( ) , [ ] , { } ) ) == _transform_attrs ( C , None , False ) [EOL] [EOL] def test_transforms_to_attribute ( self ) : [EOL] [docstring] [EOL] C = make_tc ( ) [EOL] attrs , super_attrs , _ = _transform_attrs ( C , None , False ) [EOL] [EOL] assert [ ] == super_attrs [EOL] assert [number] == len ( attrs ) [EOL] assert all ( isinstance ( a , Attribute ) for a in attrs ) [EOL] [EOL] def test_conflicting_defaults ( self ) : [EOL] [docstring] [EOL] class C ( object ) : [EOL] x = attr . ib ( default = None ) [EOL] y = attr . ib ( ) [EOL] [EOL] with pytest . raises ( ValueError ) as e : [EOL] _transform_attrs ( C , None , False ) [EOL] assert ( [string] [string] [string] [string] [string] , ) == e . value . args [EOL] [EOL] def test_these ( self ) : [EOL] [docstring] [EOL] class Base ( object ) : [EOL] z = attr . ib ( ) [EOL] [EOL] class C ( Base ) : [EOL] y = attr . ib ( ) [EOL] [EOL] attrs , super_attrs , _ = _transform_attrs ( C , { [string] : attr . ib ( ) } , False ) [EOL] [EOL] assert [ ] == super_attrs [EOL] assert ( simple_attr ( [string] ) , ) == attrs [EOL] [EOL] def test_these_leave_body ( self ) : [EOL] [docstring] [EOL] @ attr . s ( init = False , these = { [string] : attr . ib ( ) } ) class C ( object ) : [EOL] x = [number] [EOL] [EOL] assert [number] == C ( ) . x [EOL] assert [string] == repr ( C ( ) ) [EOL] [EOL] def test_these_ordered ( self ) : [EOL] [docstring] [EOL] b = attr . ib ( default = [number] ) [EOL] a = attr . ib ( default = [number] ) [EOL] [EOL] @ attr . s ( these = ordered_dict ( [ ( [string] , a ) , ( [string] , b ) ] ) ) class C ( object ) : [EOL] pass [EOL] [EOL] assert [string] == repr ( C ( ) ) [EOL] [EOL] def test_multiple_inheritance ( self ) : [EOL] [docstring] [EOL] @ attr . s class A ( object ) : [EOL] a1 = attr . ib ( default = [string] ) [EOL] a2 = attr . ib ( default = [string] ) [EOL] [EOL] @ attr . s class B ( A ) : [EOL] b1 = attr . ib ( default = [string] ) [EOL] b2 = attr . ib ( default = [string] ) [EOL] [EOL] @ attr . s class C ( B , A ) : [EOL] c1 = attr . ib ( default = [string] ) [EOL] c2 = attr . ib ( default = [string] ) [EOL] [EOL] @ attr . s class D ( A ) : [EOL] d1 = attr . ib ( default = [string] ) [EOL] d2 = attr . ib ( default = [string] ) [EOL] [EOL] @ attr . s class E ( C , D ) : [EOL] e1 = attr . ib ( default = [string] ) [EOL] e2 = attr . ib ( default = [string] ) [EOL] [EOL] assert ( [string] [string] ) == repr ( E ( ) ) [EOL] [EOL] [EOL] class TestAttributes ( object ) : [EOL] [docstring] [EOL] @ pytest . mark . skipif ( not PY2 , reason = [string] ) def test_catches_old_style ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) as e : [EOL] @ attr . s class C : [EOL] pass [EOL] [EOL] assert ( [string] , ) == e . value . args [EOL] [EOL] def test_sets_attrs ( self ) : [EOL] [docstring] [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( ) [EOL] [EOL] assert [string] == C . __attrs_attrs__ [ [number] ] . name [EOL] assert all ( isinstance ( a , Attribute ) for a in C . __attrs_attrs__ ) [EOL] [EOL] def test_empty ( self ) : [EOL] [docstring] [EOL] @ attr . s class C3 ( object ) : [EOL] pass [EOL] [EOL] assert [string] == repr ( C3 ( ) ) [EOL] assert C3 ( ) == C3 ( ) [EOL] [EOL] @ given ( attr = attrs_st , attr_name = sampled_from ( Attribute . __slots__ ) ) def test_immutable ( self , attr , attr_name ) : [EOL] [docstring] [EOL] with pytest . raises ( AttributeError ) : [EOL] setattr ( attr , attr_name , [number] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , ] ) def test_adds_all_by_default ( self , method_name ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] sentinel = object ( ) [EOL] [EOL] class C ( object ) : [EOL] x = attr . ib ( ) [EOL] [EOL] setattr ( C , method_name , sentinel ) [EOL] [EOL] C = attr . s ( C ) [EOL] meth = getattr ( C , method_name ) [EOL] [EOL] assert sentinel != meth [EOL] if method_name == [string] : [EOL] assert meth is None [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_respects_add_arguments ( self , arg_name , method_name ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] sentinel = object ( ) [EOL] [EOL] am_args = { [string] : True , [string] : True , [string] : True , [string] : True } [EOL] am_args [ arg_name ] = False [EOL] [EOL] class C ( object ) : [EOL] x = attr . ib ( ) [EOL] [EOL] setattr ( C , method_name , sentinel ) [EOL] [EOL] C = attr . s ( ** am_args ) ( C ) [EOL] [EOL] assert sentinel == getattr ( C , method_name ) [EOL] [EOL] @ pytest . mark . skipif ( PY2 , reason = [string] ) @ given ( slots_outer = booleans ( ) , slots_inner = booleans ( ) ) def test_repr_qualname ( self , slots_outer , slots_inner ) : [EOL] [docstring] [EOL] @ attr . s ( slots = slots_outer ) class C ( object ) : [EOL] @ attr . s ( slots = slots_inner ) class D ( object ) : [EOL] pass [EOL] [EOL] assert [string] == repr ( C . D ( ) ) [EOL] assert [string] == repr ( GC . D ( ) ) [EOL] [EOL] @ given ( slots_outer = booleans ( ) , slots_inner = booleans ( ) ) def test_repr_fake_qualname ( self , slots_outer , slots_inner ) : [EOL] [docstring] [EOL] @ attr . s ( slots = slots_outer ) class C ( object ) : [EOL] @ attr . s ( repr_ns = [string] , slots = slots_inner ) class D ( object ) : [EOL] pass [EOL] assert [string] == repr ( C . D ( ) ) [EOL] [EOL] @ pytest . mark . skipif ( PY2 , reason = [string] ) @ given ( slots_outer = booleans ( ) , slots_inner = booleans ( ) ) def test_name_not_overridden ( self , slots_outer , slots_inner ) : [EOL] [docstring] [EOL] @ attr . s ( slots = slots_outer ) class C ( object ) : [EOL] @ attr . s ( slots = slots_inner ) class D ( object ) : [EOL] pass [EOL] [EOL] assert C . D . __name__ == [string] [EOL] assert C . D . __qualname__ == C . __qualname__ + [string] [EOL] [EOL] @ given ( with_validation = booleans ( ) ) def test_post_init ( self , with_validation , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( _config , [string] , with_validation ) [EOL] [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( ) [EOL] y = attr . ib ( ) [EOL] [EOL] def __attrs_post_init__ ( self2 ) : [EOL] self2 . z = self2 . x + self2 . y [EOL] [EOL] c = C ( x = [number] , y = [number] ) [EOL] [EOL] assert [number] == getattr ( c , [string] , None ) [EOL] [EOL] def test_types ( self ) : [EOL] [docstring] [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( type = int ) [EOL] y = attr . ib ( type = str ) [EOL] z = attr . ib ( ) [EOL] [EOL] assert int is fields ( C ) . x . type [EOL] assert str is fields ( C ) . y . type [EOL] assert None is fields ( C ) . z . type [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_clean_class ( self , slots ) : [EOL] [docstring] [EOL] @ attr . s ( slots = slots ) class C ( object ) : [EOL] x = attr . ib ( ) [EOL] [EOL] x = getattr ( C , [string] , None ) [EOL] [EOL] assert not isinstance ( x , _CountingAttr ) [EOL] [EOL] def test_factory_sugar ( self ) : [EOL] [docstring] [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( factory = list ) [EOL] [EOL] assert Factory ( list ) == attr . fields ( C ) . x . default [EOL] [EOL] def test_sugar_factory_mutex ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( factory = list , default = Factory ( list ) ) [EOL] [EOL] def test_sugar_callable ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( factory = Factory ( list ) ) [EOL] [EOL] [EOL] @ attr . s class GC ( object ) : [EOL] @ attr . s class D ( object ) : [EOL] pass [EOL] [EOL] [EOL] class TestMakeClass ( object ) : [EOL] [docstring] [EOL] @ pytest . mark . parametrize ( [string] , [ list , tuple ] ) def test_simple ( self , ls ) : [EOL] [docstring] [EOL] C1 = make_class ( [string] , ls ( [ [string] , [string] ] ) ) [EOL] [EOL] @ attr . s class C2 ( object ) : [EOL] a = attr . ib ( ) [EOL] b = attr . ib ( ) [EOL] [EOL] assert C1 . __attrs_attrs__ == C2 . __attrs_attrs__ [EOL] [EOL] def test_dict ( self ) : [EOL] [docstring] [EOL] C1 = make_class ( [string] , { [string] : attr . ib ( default = [number] ) , [string] : attr . ib ( default = None ) , } ) [EOL] [EOL] @ attr . s class C2 ( object ) : [EOL] a = attr . ib ( default = [number] ) [EOL] b = attr . ib ( default = None ) [EOL] [EOL] assert C1 . __attrs_attrs__ == C2 . __attrs_attrs__ [EOL] [EOL] def test_attr_args ( self ) : [EOL] [docstring] [EOL] C = make_class ( [string] , [ [string] ] , repr = False ) [EOL] [EOL] assert repr ( C ( [number] ) ) . startswith ( [string] ) [EOL] [EOL] def test_catches_wrong_attrs_type ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) as e : [EOL] make_class ( [string] , object ( ) ) [EOL] [EOL] assert ( [string] , ) == e . value . args [EOL] [EOL] def test_bases ( self ) : [EOL] [docstring] [EOL] class D ( object ) : [EOL] pass [EOL] [EOL] cls = make_class ( [string] , { } ) [EOL] [EOL] assert cls . __mro__ [ - [number] ] == object [EOL] [EOL] cls = make_class ( [string] , { } , bases = ( D , ) ) [EOL] [EOL] assert D in cls . __mro__ [EOL] assert isinstance ( cls ( ) , D ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_clean_class ( self , slots ) : [EOL] [docstring] [EOL] C = make_class ( [string] , [ [string] ] , slots = slots ) [EOL] [EOL] x = getattr ( C , [string] , None ) [EOL] [EOL] assert not isinstance ( x , _CountingAttr ) [EOL] [EOL] def test_missing_sys_getframe ( self , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . delattr ( sys , [string] ) [EOL] C = make_class ( [string] , [ [string] ] ) [EOL] [EOL] assert [number] == len ( C . __attrs_attrs__ ) [EOL] [EOL] def test_make_class_ordered ( self ) : [EOL] [docstring] [EOL] b = attr . ib ( default = [number] ) [EOL] a = attr . ib ( default = [number] ) [EOL] [EOL] C = attr . make_class ( [string] , ordered_dict ( [ ( [string] , a ) , ( [string] , b ) ] ) ) [EOL] [EOL] assert [string] == repr ( C ( ) ) [EOL] [EOL] [EOL] class TestFields ( object ) : [EOL] [docstring] [EOL] def test_instance ( self , C ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) as e : [EOL] fields ( C ( [number] , [number] ) ) [EOL] [EOL] assert [string] == e . value . args [ [number] ] [EOL] [EOL] def test_handler_non_attrs_class ( self , C ) : [EOL] [docstring] [EOL] with pytest . raises ( NotAnAttrsClassError ) as e : [EOL] fields ( object ) [EOL] [EOL] assert ( [string] . format ( o = object ) ) == e . value . args [ [number] ] [EOL] [EOL] @ given ( simple_classes ( ) ) def test_fields ( self , C ) : [EOL] [docstring] [EOL] assert all ( isinstance ( a , Attribute ) for a in fields ( C ) ) [EOL] [EOL] @ given ( simple_classes ( ) ) def test_fields_properties ( self , C ) : [EOL] [docstring] [EOL] for attribute in fields ( C ) : [EOL] assert getattr ( fields ( C ) , attribute . name ) is attribute [EOL] [EOL] [EOL] class TestFieldsDict ( object ) : [EOL] [docstring] [EOL] def test_instance ( self , C ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) as e : [EOL] fields_dict ( C ( [number] , [number] ) ) [EOL] [EOL] assert [string] == e . value . args [ [number] ] [EOL] [EOL] def test_handler_non_attrs_class ( self , C ) : [EOL] [docstring] [EOL] with pytest . raises ( NotAnAttrsClassError ) as e : [EOL] fields_dict ( object ) [EOL] [EOL] assert ( [string] . format ( o = object ) ) == e . value . args [ [number] ] [EOL] [EOL] @ given ( simple_classes ( ) ) def test_fields_dict ( self , C ) : [EOL] [docstring] [EOL] d = fields_dict ( C ) [EOL] [EOL] assert isinstance ( d , ordered_dict ) [EOL] assert list ( fields ( C ) ) == list ( d . values ( ) ) [EOL] assert [ a . name for a in fields ( C ) ] == [ field_name for field_name in d ] [EOL] [EOL] [EOL] class TestConverter ( object ) : [EOL] [docstring] [EOL] def test_convert ( self ) : [EOL] [docstring] [EOL] C = make_class ( [string] , { [string] : attr . ib ( converter = lambda v : v + [number] ) , [string] : attr . ib ( ) , } ) [EOL] c = C ( [number] , [number] ) [EOL] [EOL] assert c . x == [number] [EOL] assert c . y == [number] [EOL] [EOL] @ given ( integers ( ) , booleans ( ) ) def test_convert_property ( self , val , init ) : [EOL] [docstring] [EOL] C = make_class ( [string] , { [string] : attr . ib ( ) , [string] : attr . ib ( init = init , default = val , converter = lambda v : v + [number] ) , } ) [EOL] c = C ( [number] ) [EOL] [EOL] assert c . x == val + [number] [EOL] assert c . y == [number] [EOL] [EOL] @ given ( integers ( ) , booleans ( ) ) def test_convert_factory_property ( self , val , init ) : [EOL] [docstring] [EOL] C = make_class ( [string] , ordered_dict ( [ ( [string] , attr . ib ( ) ) , ( [string] , attr . ib ( init = init , default = Factory ( lambda : val ) , converter = lambda v : v + [number] ) ) , ] ) ) [EOL] c = C ( [number] ) [EOL] [EOL] assert c . x == val + [number] [EOL] assert c . y == [number] [EOL] [EOL] def test_factory_takes_self ( self ) : [EOL] [docstring] [EOL] C = make_class ( [string] , { [string] : attr . ib ( default = Factory ( ( lambda self : self ) , takes_self = True ) ) , } ) [EOL] [EOL] i = C ( ) [EOL] [EOL] assert i is i . x [EOL] [EOL] def test_factory_hashable ( self ) : [EOL] [docstring] [EOL] assert hash ( Factory ( None , False ) ) == hash ( Factory ( None , False ) ) [EOL] [EOL] def test_convert_before_validate ( self ) : [EOL] [docstring] [EOL] def validator ( inst , attr , val ) : [EOL] raise RuntimeError ( [string] ) [EOL] C = make_class ( [string] , { [string] : attr . ib ( validator = validator , converter = lambda v : [number] / [number] ) , [string] : attr . ib ( ) , } ) [EOL] with pytest . raises ( ZeroDivisionError ) : [EOL] C ( [number] , [number] ) [EOL] [EOL] def test_frozen ( self ) : [EOL] [docstring] [EOL] C = make_class ( [string] , { [string] : attr . ib ( converter = lambda v : int ( v ) ) , } , frozen = True ) [EOL] C ( [string] ) [EOL] [EOL] def test_deprecated_convert ( self ) : [EOL] [docstring] [EOL] def conv ( v ) : [EOL] return v [EOL] [EOL] with pytest . warns ( DeprecationWarning ) as wi : [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( convert = conv ) [EOL] [EOL] convert = fields ( C ) . x . convert [EOL] [EOL] assert [number] == len ( wi . list ) [EOL] w = wi . pop ( ) [EOL] [EOL] assert conv == fields ( C ) . x . converter == convert [EOL] assert ( [string] [string] , ) == w . message . args [EOL] assert __file__ == w . filename [EOL] [EOL] def test_convert_converter ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( RuntimeError ) as ei : [EOL] @ attr . s class C ( object ) : [EOL] x = attr . ib ( convert = lambda v : v , converter = lambda v : v ) [EOL] [EOL] assert ( [string] [string] , ) == ei . value . args [EOL] [EOL] [EOL] class TestValidate ( object ) : [EOL] [docstring] [EOL] def test_success ( self ) : [EOL] [docstring] [EOL] C = make_class ( [string] , { [string] : attr . ib ( validator = lambda * a : None ) , [string] : attr . ib ( ) } ) [EOL] validate ( C ( [number] , [number] ) ) [EOL] [EOL] def test_propagates ( self ) : [EOL] [docstring] [EOL] def raiser ( _ , __ , value ) : [EOL] if value == [number] : [EOL] raise FloatingPointError [EOL] [EOL] C = make_class ( [string] , { [string] : attr . ib ( validator = raiser ) } ) [EOL] i = C ( [number] ) [EOL] i . x = [number] [EOL] [EOL] with pytest . raises ( FloatingPointError ) : [EOL] validate ( i ) [EOL] [EOL] def test_run_validators ( self ) : [EOL] [docstring] [EOL] _config . _run_validators = False [EOL] obj = object ( ) [EOL] [EOL] def raiser ( _ , __ , ___ ) : [EOL] raise Exception ( obj ) [EOL] [EOL] C = make_class ( [string] , { [string] : attr . ib ( validator = raiser ) } ) [EOL] c = C ( [number] ) [EOL] validate ( c ) [EOL] assert [number] == c . x [EOL] _config . _run_validators = True [EOL] [EOL] with pytest . raises ( Exception ) : [EOL] validate ( c ) [EOL] [EOL] with pytest . raises ( Exception ) as e : [EOL] C ( [number] ) [EOL] assert ( obj , ) == e . value . args [EOL] [EOL] def test_multiple_validators ( self ) : [EOL] [docstring] [EOL] def v1 ( _ , __ , value ) : [EOL] if value == [number] : [EOL] raise TypeError ( [string] ) [EOL] [EOL] def v2 ( _ , __ , value ) : [EOL] if value == [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] C = make_class ( [string] , { [string] : attr . ib ( validator = [ v1 , v2 ] ) } ) [EOL] [EOL] validate ( C ( [number] ) ) [EOL] [EOL] with pytest . raises ( TypeError ) as e : [EOL] C ( [number] ) [EOL] [EOL] assert [string] == e . value . args [ [number] ] [EOL] [EOL] with pytest . raises ( ValueError ) as e : [EOL] C ( [number] ) [EOL] [EOL] assert [string] == e . value . args [ [number] ] [EOL] [EOL] def test_multiple_empty ( self ) : [EOL] [docstring] [EOL] C1 = make_class ( [string] , { [string] : attr . ib ( validator = [ ] ) } ) [EOL] C2 = make_class ( [string] , { [string] : attr . ib ( validator = None ) } ) [EOL] [EOL] assert inspect . getsource ( C1 . __init__ ) == inspect . getsource ( C2 . __init__ ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] sorted_lists_of_attrs = list_of_attrs . map ( lambda l : sorted ( l , key = attrgetter ( [string] ) ) ) [EOL] [EOL] [EOL] class TestMetadata ( object ) : [EOL] [docstring] [EOL] @ given ( sorted_lists_of_attrs ) def test_metadata_present ( self , list_of_attrs ) : [EOL] [docstring] [EOL] C = make_class ( [string] , dict ( zip ( gen_attr_names ( ) , list_of_attrs ) ) ) [EOL] [EOL] for hyp_attr , class_attr in zip ( list_of_attrs , fields ( C ) ) : [EOL] if hyp_attr . metadata is None : [EOL] [comment] [EOL] assert class_attr . metadata is not None [EOL] assert len ( class_attr . metadata ) == [number] [EOL] else : [EOL] assert hyp_attr . metadata == class_attr . metadata [EOL] [EOL] [comment] [EOL] for k in class_attr . metadata : [EOL] assert hyp_attr . metadata [ k ] == class_attr . metadata [ k ] [EOL] assert ( hyp_attr . metadata . get ( k ) == class_attr . metadata . get ( k ) ) [EOL] [EOL] @ given ( simple_classes ( ) , text ( ) ) def test_metadata_immutability ( self , C , string ) : [EOL] [docstring] [EOL] for a in fields ( C ) : [EOL] with pytest . raises ( TypeError ) : [EOL] a . metadata [ string ] = string [EOL] with pytest . raises ( AttributeError ) : [EOL] a . metadata . update ( { string : string } ) [EOL] with pytest . raises ( AttributeError ) : [EOL] a . metadata . clear ( ) [EOL] with pytest . raises ( AttributeError ) : [EOL] a . metadata . setdefault ( string , string ) [EOL] [EOL] for k in a . metadata : [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( ( TypeError , IndexError ) ) : [EOL] del a . metadata [ k ] [EOL] with pytest . raises ( AttributeError ) : [EOL] a . metadata . pop ( k ) [EOL] with pytest . raises ( AttributeError ) : [EOL] a . metadata . popitem ( ) [EOL] [EOL] @ given ( lists ( simple_attrs_without_metadata , min_size = [number] , max_size = [number] ) ) def test_empty_metadata_singleton ( self , list_of_attrs ) : [EOL] [docstring] [EOL] C = make_class ( [string] , dict ( zip ( gen_attr_names ( ) , list_of_attrs ) ) ) [EOL] for a in fields ( C ) [ [number] : ] : [EOL] assert a . metadata is fields ( C ) [ [number] ] . metadata [EOL] [EOL] @ given ( lists ( simple_attrs_without_metadata , min_size = [number] , max_size = [number] ) ) def test_empty_countingattr_metadata_independent ( self , list_of_attrs ) : [EOL] [docstring] [EOL] for x , y in itertools . combinations ( list_of_attrs , [number] ) : [EOL] assert x . metadata is not y . metadata [EOL] [EOL] @ given ( lists ( simple_attrs_with_metadata ( ) , min_size = [number] , max_size = [number] ) ) def test_not_none_metadata ( self , list_of_attrs ) : [EOL] [docstring] [EOL] C = make_class ( [string] , dict ( zip ( gen_attr_names ( ) , list_of_attrs ) ) ) [EOL] [EOL] assert len ( fields ( C ) ) > [number] [EOL] [EOL] for cls_a , raw_a in zip ( fields ( C ) , list_of_attrs ) : [EOL] assert cls_a . metadata != { } [EOL] assert cls_a . metadata == raw_a . metadata [EOL] [EOL] def test_metadata ( self ) : [EOL] [docstring] [EOL] md = { } [EOL] a = attr . ib ( metadata = md ) [EOL] [EOL] assert md is a . metadata [EOL] [EOL] [EOL] class TestClassBuilder ( object ) : [EOL] [docstring] [EOL] def test_repr_str ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( ValueError ) as ei : [EOL] make_class ( [string] , { } , repr = False , str = True ) [EOL] [EOL] assert ( [string] , ) == ei . value . args [EOL] [EOL] def test_repr ( self ) : [EOL] [docstring] [EOL] class C ( object ) : [EOL] pass [EOL] [EOL] b = _ClassBuilder ( C , None , True , True , False ) [EOL] [EOL] assert [string] == repr ( b ) [EOL] [EOL] def test_returns_self ( self ) : [EOL] [docstring] [EOL] class C ( object ) : [EOL] x = attr . ib ( ) [EOL] [EOL] b = _ClassBuilder ( C , None , True , True , False ) [EOL] [EOL] cls = b . add_cmp ( ) . add_hash ( ) . add_init ( ) . add_repr ( [string] ) . add_str ( ) . build_class ( ) [EOL] [EOL] assert [string] == repr ( cls ( [number] ) ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_attaches_meta_dunders ( self , meth_name ) : [EOL] [docstring] [EOL] @ attr . s ( hash = True , str = True ) class C ( object ) : [EOL] def organic ( self ) : [EOL] pass [EOL] [EOL] meth = getattr ( C , meth_name ) [EOL] [EOL] assert meth_name == meth . __name__ [EOL] assert C . organic . __module__ == meth . __module__ [EOL] if not PY2 : [EOL] organic_prefix = C . organic . __qualname__ . rsplit ( [string] , [number] ) [ [number] ] [EOL] assert organic_prefix + [string] + meth_name == meth . __qualname__ [EOL] [EOL] def test_handles_missing_meta_on_class ( self ) : [EOL] [docstring] [EOL] class C ( object ) : [EOL] pass [EOL] [EOL] b = _ClassBuilder ( C , these = None , slots = False , frozen = False , auto_attribs = False , ) [EOL] b . _cls = { } [comment] [EOL] [EOL] def fake_meth ( self ) : [EOL] pass [EOL] [EOL] fake_meth . __module__ = [string] [EOL] fake_meth . __qualname__ = [string] [EOL] [EOL] rv = b . _add_method_dunders ( fake_meth ) [EOL] [EOL] assert [string] == rv . __module__ == fake_meth . __module__ [EOL] assert [string] == rv . __qualname__ == fake_meth . __qualname__ [EOL] [EOL] def test_weakref_setstate ( self ) : [EOL] [docstring] [EOL] @ attr . s ( slots = True ) class C ( object ) : [EOL] __weakref__ = attr . ib ( init = False , hash = False , repr = False , cmp = False ) [EOL] [EOL] assert C ( ) == copy . deepcopy ( C ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_conflicting_defaults.C]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_conflicting_defaults.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_these.Base]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_these.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.A]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.A]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.B]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.B]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.C]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.D]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.D]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.E]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestTransformAttrs.test_multiple_inheritance.E]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_sets_attrs.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_adds_all_by_default.C]$ 0 0 0 $builtins.object$ 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_adds_all_by_default.C]$ 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_adds_all_by_default.C]$ 0 0 $typing.Any$ 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_adds_all_by_default.C]$ 0 0 0 0 0 0 $builtins.object$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_respects_add_arguments.C]$ 0 0 0 $builtins.object$ 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_respects_add_arguments.C]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_respects_add_arguments.C]$ 0 0 0 0 $builtins.object$ 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_respects_add_arguments.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_types.C]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_types.C]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_types.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_factory_sugar.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_sugar_factory_mutex.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestAttributes.test_sugar_callable.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestMakeClass.test_dict.C2]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestMakeClass.test_dict.C2]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestConverter.test_deprecated_convert.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestConverter.test_convert_converter.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestClassBuilder.test_returns_self.C]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tools.third_party.attrs.tests.test_make.TestClassBuilder.test_weakref_setstate.C]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import pytest [EOL] [EOL] from attr import _config [EOL] [EOL] [EOL] class TestConfig ( object ) : [EOL] def test_default ( self ) : [EOL] [docstring] [EOL] assert True is _config . _run_validators [EOL] [EOL] def test_set_run_validators ( self ) : [EOL] [docstring] [EOL] _config . set_run_validators ( False ) [EOL] assert False is _config . _run_validators [EOL] _config . set_run_validators ( True ) [EOL] assert True is _config . _run_validators [EOL] [EOL] def test_get_run_validators ( self ) : [EOL] [docstring] [EOL] _config . _run_validators = False [EOL] assert _config . _run_validators is _config . get_run_validators ( ) [EOL] _config . _run_validators = True [EOL] assert _config . _run_validators is _config . get_run_validators ( ) [EOL] [EOL] def test_wrong_type ( self ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) as e : [EOL] _config . set_run_validators ( [string] ) [EOL] assert [string] == e . value . args [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import os . path [EOL] import sys [EOL] [EOL] import setuptools [EOL] [EOL] root_dir = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] about = { } [EOL] about_file = os . path . join ( root_dir , [string] , [string] , [string] ) [EOL] with open ( about_file , encoding = [string] ) as fp : [EOL] exec ( fp . read ( ) , about ) [EOL] [EOL] readme_file = os . path . join ( root_dir , [string] ) [EOL] with open ( readme_file , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] if sys . platform == [string] : [EOL] extra_compile_args = [ ] [EOL] libraries = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] extra_compile_args = [ [string] ] [EOL] libraries = [ [string] ] [EOL] [EOL] setuptools . setup ( name = about [ [string] ] , version = about [ [string] ] , description = about [ [string] ] , long_description = long_description , url = about [ [string] ] , author = about [ [string] ] , author_email = about [ [string] ] , license = about [ [string] ] , include_package_data = True , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ext_modules = [ setuptools . Extension ( [string] , extra_compile_args = extra_compile_args , sources = [ [string] ] , ) , setuptools . Extension ( [string] , extra_compile_args = extra_compile_args , libraries = libraries , sources = [ [string] ] , ) , ] , package_dir = { [string] : [string] } , package_data = { [string] : [ [string] , [string] , [string] ] } , packages = [ [string] , [string] , [string] , [string] , [string] ] , install_requires = [ [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from aioquic . quic . logger import QuicLogger [EOL] [EOL] [EOL] class QuicLoggerTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] logger = QuicLogger ( ) [EOL] self . assertEqual ( logger . to_dict ( ) , { [string] : [string] , [string] : [ ] } ) [EOL] [EOL] def test_empty_trace ( self ) : [EOL] logger = QuicLogger ( ) [EOL] trace = logger . start_trace ( is_client = True , odcid = bytes ( [number] ) ) [EOL] logger . end_trace ( trace ) [EOL] self . assertEqual ( logger . to_dict ( ) , { [string] : [string] , [string] : [ { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } , [string] : [ [string] , [string] , [string] , [string] , ] , [string] : [ ] , [string] : { [string] : [string] , [string] : [string] } , } ] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from aioquic . quic . rangeset import RangeSet [EOL] [EOL] [EOL] class RangeSetTest ( TestCase ) : [EOL] def test_add_single_duplicate ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_single_ordered ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_single_merge ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_single_reverse ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_ordered ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_merge ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_overlap ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_overlap_2 ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_reverse ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_unordered_contiguous ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_add_range_unordered_sparse ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_subtract ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_subtract_no_change ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_subtract_overlap ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . add ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_subtract_split ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] rangeset . add ( [number] , [number] ) [EOL] rangeset . subtract ( [number] , [number] ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] def test_bool ( self ) : [EOL] with self . assertRaises ( NotImplementedError ) : [EOL] bool ( RangeSet ( ) ) [EOL] [EOL] def test_contains ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] self . assertFalse ( [number] in rangeset ) [EOL] [EOL] rangeset = RangeSet ( [ range ( [number] , [number] ) ] ) [EOL] self . assertTrue ( [number] in rangeset ) [EOL] self . assertFalse ( [number] in rangeset ) [EOL] [EOL] rangeset = RangeSet ( [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] self . assertTrue ( [number] in rangeset ) [EOL] self . assertFalse ( [number] in rangeset ) [EOL] self . assertFalse ( [number] in rangeset ) [EOL] self . assertTrue ( [number] in rangeset ) [EOL] self . assertTrue ( [number] in rangeset ) [EOL] self . assertTrue ( [number] in rangeset ) [EOL] self . assertFalse ( [number] in rangeset ) [EOL] [EOL] def test_eq ( self ) : [EOL] r0 = RangeSet ( [ range ( [number] , [number] ) ] ) [EOL] r1 = RangeSet ( [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] r2 = RangeSet ( [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] [EOL] self . assertTrue ( r0 == r0 ) [EOL] self . assertFalse ( r0 == r1 ) [EOL] self . assertFalse ( r0 == [number] ) [EOL] [EOL] self . assertTrue ( r1 == r1 ) [EOL] self . assertFalse ( r1 == r0 ) [EOL] self . assertTrue ( r1 == r2 ) [EOL] self . assertFalse ( r1 == [number] ) [EOL] [EOL] self . assertTrue ( r2 == r2 ) [EOL] self . assertTrue ( r2 == r1 ) [EOL] self . assertFalse ( r2 == r0 ) [EOL] self . assertFalse ( r2 == [number] ) [EOL] [EOL] def test_len ( self ) : [EOL] rangeset = RangeSet ( ) [EOL] self . assertEqual ( len ( rangeset ) , [number] ) [EOL] [EOL] rangeset = RangeSet ( [ range ( [number] , [number] ) ] ) [EOL] self . assertEqual ( len ( rangeset ) , [number] ) [EOL] [EOL] def test_pop ( self ) : [EOL] rangeset = RangeSet ( [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] r = rangeset . shift ( ) [EOL] self . assertEqual ( r , range ( [number] , [number] ) ) [EOL] self . assertEqual ( list ( rangeset ) , [ range ( [number] , [number] ) ] ) [EOL] [EOL] def test_repr ( self ) : [EOL] rangeset = RangeSet ( [ range ( [number] , [number] ) , range ( [number] , [number] ) ] ) [EOL] self . assertEqual ( repr ( rangeset ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import math [EOL] from unittest import TestCase [EOL] [EOL] from aioquic import tls [EOL] from aioquic . quic . packet import PACKET_TYPE_INITIAL , PACKET_TYPE_ONE_RTT [EOL] from aioquic . quic . packet_builder import QuicSentPacket [EOL] from aioquic . quic . rangeset import RangeSet [EOL] from aioquic . quic . recovery import ( QuicPacketPacer , QuicPacketRecovery , QuicPacketSpace , QuicRttMonitor , ) [EOL] [EOL] [EOL] def send_probe ( ) : [EOL] pass [EOL] [EOL] [EOL] class QuicPacketPacerTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . pacer = QuicPacketPacer ( ) [EOL] [EOL] def test_no_measurement ( self ) : [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] [EOL] def test_with_measurement ( self ) : [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] [EOL] self . pacer . update_rate ( congestion_window = [number] , smoothed_rtt = [number] ) [EOL] self . assertEqual ( self . pacer . bucket_max , [number] ) [EOL] self . assertEqual ( self . pacer . bucket_time , [number] ) [EOL] self . assertEqual ( self . pacer . packet_time , [number] ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] self . assertAlmostEqual ( self . pacer . next_send_time ( now = [number] ) , [number] ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] self . assertAlmostEqual ( self . pacer . next_send_time ( now = [number] ) , [number] ) [EOL] [EOL] [comment] [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] self . assertAlmostEqual ( self . pacer . next_send_time ( now = [number] ) , [number] ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] self . assertIsNone ( self . pacer . next_send_time ( now = [number] ) ) [EOL] self . pacer . update_after_send ( now = [number] ) [EOL] self . assertAlmostEqual ( self . pacer . next_send_time ( now = [number] ) , [number] ) [EOL] [EOL] [EOL] class QuicPacketRecoveryTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . INITIAL_SPACE = QuicPacketSpace ( ) [EOL] self . HANDSHAKE_SPACE = QuicPacketSpace ( ) [EOL] self . ONE_RTT_SPACE = QuicPacketSpace ( ) [EOL] [EOL] self . recovery = QuicPacketRecovery ( is_client_without_1rtt = False , send_probe = send_probe ) [EOL] self . recovery . spaces = [ self . INITIAL_SPACE , self . HANDSHAKE_SPACE , self . ONE_RTT_SPACE , ] [EOL] [EOL] def test_discard_space ( self ) : [EOL] self . recovery . discard_space ( self . INITIAL_SPACE ) [EOL] [EOL] def test_on_ack_received_ack_eliciting ( self ) : [EOL] packet = QuicSentPacket ( epoch = tls . Epoch . ONE_RTT , in_flight = True , is_ack_eliciting = True , is_crypto_packet = False , packet_number = [number] , packet_type = PACKET_TYPE_ONE_RTT , sent_bytes = [number] , sent_time = [number] , ) [EOL] space = self . ONE_RTT_SPACE [EOL] [EOL] [comment] [EOL] self . recovery . on_packet_sent ( packet , space ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] [comment] [EOL] self . recovery . on_ack_received ( space , ack_rangeset = RangeSet ( [ range ( [number] , [number] ) ] ) , ack_delay = [number] , now = [number] ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( self . recovery . _rtt_initialized ) [EOL] self . assertEqual ( self . recovery . _rtt_latest , [number] ) [EOL] self . assertEqual ( self . recovery . _rtt_min , [number] ) [EOL] self . assertEqual ( self . recovery . _rtt_smoothed , [number] ) [EOL] [EOL] def test_on_ack_received_non_ack_eliciting ( self ) : [EOL] packet = QuicSentPacket ( epoch = tls . Epoch . ONE_RTT , in_flight = True , is_ack_eliciting = False , is_crypto_packet = False , packet_number = [number] , packet_type = PACKET_TYPE_ONE_RTT , sent_bytes = [number] , sent_time = [number] , ) [EOL] space = self . ONE_RTT_SPACE [EOL] [EOL] [comment] [EOL] self . recovery . on_packet_sent ( packet , space ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] [comment] [EOL] self . recovery . on_ack_received ( space , ack_rangeset = RangeSet ( [ range ( [number] , [number] ) ] ) , ack_delay = [number] , now = [number] ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] [comment] [EOL] self . assertFalse ( self . recovery . _rtt_initialized ) [EOL] self . assertEqual ( self . recovery . _rtt_latest , [number] ) [EOL] self . assertEqual ( self . recovery . _rtt_min , math . inf ) [EOL] self . assertEqual ( self . recovery . _rtt_smoothed , [number] ) [EOL] [EOL] def test_on_packet_lost_crypto ( self ) : [EOL] packet = QuicSentPacket ( epoch = tls . Epoch . INITIAL , in_flight = True , is_ack_eliciting = True , is_crypto_packet = True , packet_number = [number] , packet_type = PACKET_TYPE_INITIAL , sent_bytes = [number] , sent_time = [number] , ) [EOL] space = self . INITIAL_SPACE [EOL] [EOL] self . recovery . on_packet_sent ( packet , space ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] self . recovery . _detect_loss ( space , now = [number] ) [EOL] self . assertEqual ( self . recovery . bytes_in_flight , [number] ) [EOL] self . assertEqual ( space . ack_eliciting_in_flight , [number] ) [EOL] self . assertEqual ( len ( space . sent_packets ) , [number] ) [EOL] [EOL] [EOL] class QuicRttMonitorTest ( TestCase ) : [EOL] def test_monitor ( self ) : [EOL] monitor = QuicRttMonitor ( ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertFalse ( monitor . _ready ) [EOL] [EOL] [comment] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertFalse ( monitor . _ready ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertFalse ( monitor . _ready ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertFalse ( monitor . _ready ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertFalse ( monitor . _ready ) [EOL] [EOL] [comment] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _samples , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] self . assertTrue ( monitor . _ready ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertFalse ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL] [EOL] self . assertTrue ( monitor . is_rtt_increasing ( rtt = [number] , now = [number] ) ) [EOL] self . assertEqual ( monitor . _increases , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from aioquic . buffer import Buffer , BufferReadError , BufferWriteError , size_uint_var [EOL] [EOL] [EOL] class BufferTest ( TestCase ) : [EOL] def test_data_slice ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . data_slice ( [number] , [number] ) , [string] ) [EOL] self . assertEqual ( buf . data_slice ( [number] , [number] ) , [string] ) [EOL] [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . data_slice ( - [number] , [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . data_slice ( [number] , [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . data_slice ( [number] , [number] ) [EOL] [EOL] def test_pull_bytes ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_bytes ( [number] ) , [string] ) [EOL] [EOL] def test_pull_bytes_negative ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_bytes ( - [number] ) [EOL] [EOL] def test_pull_bytes_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_bytes ( [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_bytes_zero ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_bytes ( [number] ) , [string] ) [EOL] [EOL] def test_pull_uint8 ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_uint8 ( ) , [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint8_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint8 ( ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint16 ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_uint16 ( ) , [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint16_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint16 ( ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint32 ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_uint32 ( ) , [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint32_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint32 ( ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint64 ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertEqual ( buf . pull_uint64 ( ) , [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_pull_uint64_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint64 ( ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_bytes ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_bytes ( [string] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_bytes_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferWriteError ) : [EOL] buf . push_bytes ( [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_bytes_zero ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_bytes ( [string] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_uint8 ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint8 ( [number] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_uint16 ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint16 ( [number] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_uint32 ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint32 ( [number] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_push_uint64 ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint64 ( [number] ) [EOL] self . assertEqual ( buf . data , [string] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] def test_seek ( self ) : [EOL] buf = Buffer ( data = [string] ) [EOL] self . assertFalse ( buf . eof ( ) ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] buf . seek ( [number] ) [EOL] self . assertFalse ( buf . eof ( ) ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] buf . seek ( [number] ) [EOL] self . assertTrue ( buf . eof ( ) ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . seek ( - [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . seek ( [number] ) [EOL] self . assertEqual ( buf . tell ( ) , [number] ) [EOL] [EOL] [EOL] class UintVarTest ( TestCase ) : [EOL] def roundtrip ( self , data , value ) : [EOL] buf = Buffer ( data = data ) [EOL] self . assertEqual ( buf . pull_uint_var ( ) , value ) [EOL] self . assertEqual ( buf . tell ( ) , len ( data ) ) [EOL] [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint_var ( value ) [EOL] self . assertEqual ( buf . data , data ) [EOL] [EOL] def test_uint_var ( self ) : [EOL] [comment] [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] self . roundtrip ( [string] , [number] ) [EOL] self . roundtrip ( [string] , [number] ) [EOL] [EOL] def test_pull_uint_var_truncated ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint_var ( ) [EOL] [EOL] buf = Buffer ( data = [string] ) [EOL] with self . assertRaises ( BufferReadError ) : [EOL] buf . pull_uint_var ( ) [EOL] [EOL] def test_push_uint_var_too_big ( self ) : [EOL] buf = Buffer ( capacity = [number] ) [EOL] with self . assertRaises ( ValueError ) as cm : [EOL] buf . push_uint_var ( [number] ) [EOL] self . assertEqual ( str ( cm . exception ) , [string] ) [EOL] [EOL] def test_size_uint_var ( self ) : [EOL] self . assertEqual ( size_uint_var ( [number] ) , [number] ) [EOL] self . assertEqual ( size_uint_var ( [number] ) , [number] ) [EOL] self . assertEqual ( size_uint_var ( [number] ) , [number] ) [EOL] self . assertEqual ( size_uint_var ( [number] ) , [number] ) [EOL] [EOL] with self . assertRaises ( ValueError ) as cm : [EOL] size_uint_var ( [number] ) [EOL] self . assertEqual ( str ( cm . exception ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asyncio [EOL] from unittest import TestCase [EOL] [EOL] from aioquic . asyncio . compat import _asynccontextmanager [EOL] [EOL] from . utils import run [EOL] [EOL] [EOL] @ _asynccontextmanager async def some_context ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] yield [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] [EOL] class AsyncioCompatTest ( TestCase ) : [EOL] def test_ok ( self ) : [EOL] async def test ( ) : [EOL] async with some_context ( ) : [EOL] pass [EOL] [EOL] run ( test ( ) ) [EOL] [EOL] def test_raise_exception ( self ) : [EOL] async def test ( ) : [EOL] async with some_context ( ) : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] with self . assertRaises ( RuntimeError ) : [EOL] run ( test ( ) ) [EOL] [EOL] def test_raise_exception_type ( self ) : [EOL] async def test ( ) : [EOL] async with some_context ( ) : [EOL] raise RuntimeError [EOL] [EOL] with self . assertRaises ( RuntimeError ) : [EOL] run ( test ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Type [EOL] import typing [EOL] import tools [EOL] import binascii [EOL] from unittest import TestCase [EOL] [EOL] from aioquic . buffer import encode_uint_var [EOL] from aioquic . h3 . connection import ( H3_ALPN , ErrorCode , FrameType , FrameUnexpected , H3Connection , StreamType , encode_frame , ) [EOL] from aioquic . h3 . events import DataReceived , HeadersReceived , PushPromiseReceived [EOL] from aioquic . h3 . exceptions import NoAvailablePushIDError [EOL] from aioquic . quic . configuration import QuicConfiguration [EOL] from aioquic . quic . events import StreamDataReceived [EOL] from aioquic . quic . logger import QuicLogger [EOL] [EOL] from . test_connection import client_and_server , transfer [EOL] [EOL] [EOL] def h3_client_and_server ( ) : [EOL] return client_and_server ( client_options = { [string] : H3_ALPN } , server_options = { [string] : H3_ALPN } , ) [EOL] [EOL] [EOL] def h3_transfer ( quic_sender , h3_receiver ) : [EOL] quic_receiver = h3_receiver . _quic [EOL] if hasattr ( quic_sender , [string] ) : [EOL] quic_receiver . _events . extend ( quic_sender . stream_queue ) [EOL] quic_sender . stream_queue . clear ( ) [EOL] else : [EOL] transfer ( quic_sender , quic_receiver ) [EOL] [EOL] [comment] [EOL] http_events = [ ] [EOL] event = quic_receiver . next_event ( ) [EOL] while event is not None : [EOL] http_events . extend ( h3_receiver . handle_event ( event ) ) [EOL] event = quic_receiver . next_event ( ) [EOL] return http_events [EOL] [EOL] [EOL] class FakeQuicConnection : [EOL] def __init__ ( self , configuration ) : [EOL] self . closed = None [EOL] self . configuration = configuration [EOL] self . stream_queue = [ ] [EOL] self . _events = [ ] [EOL] self . _next_stream_bidi = [number] if configuration . is_client else [number] [EOL] self . _next_stream_uni = [number] if configuration . is_client else [number] [EOL] self . _quic_logger = QuicLogger ( ) . start_trace ( is_client = configuration . is_client , odcid = [string] ) [EOL] [EOL] def close ( self , error_code , reason_phrase ) : [EOL] self . closed = ( error_code , reason_phrase ) [EOL] [EOL] def get_next_available_stream_id ( self , is_unidirectional = False ) : [EOL] if is_unidirectional : [EOL] stream_id = self . _next_stream_uni [EOL] self . _next_stream_uni += [number] [EOL] else : [EOL] stream_id = self . _next_stream_bidi [EOL] self . _next_stream_bidi += [number] [EOL] return stream_id [EOL] [EOL] def next_event ( self ) : [EOL] try : [EOL] return self . _events . pop ( [number] ) [EOL] except IndexError : [EOL] return None [EOL] [EOL] def send_stream_data ( self , stream_id , data , end_stream = False ) : [EOL] [comment] [EOL] for c in data : [EOL] self . stream_queue . append ( StreamDataReceived ( data = bytes ( [ c ] ) , end_stream = False , stream_id = stream_id ) ) [EOL] if end_stream : [EOL] self . stream_queue . append ( StreamDataReceived ( data = [string] , end_stream = end_stream , stream_id = stream_id ) ) [EOL] [EOL] [EOL] class H3ConnectionTest ( TestCase ) : [EOL] maxDiff = None [EOL] [EOL] def _make_request ( self , h3_client , h3_server ) : [EOL] quic_client = h3_client . _quic [EOL] quic_server = h3_server . _quic [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_client . send_data ( stream_id = stream_id , data = [string] , end_stream = True ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = stream_id , stream_ended = True ) , ] , ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_server . send_data ( stream_id = stream_id , data = [string] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_server , h3_client ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = stream_id , stream_ended = True , ) , ] , ) [EOL] [EOL] def test_handle_control_frame_headers ( self ) : [EOL] [docstring] [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . CONTROL ) + encode_frame ( FrameType . HEADERS , [string] ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] ) , ) [EOL] [EOL] def test_handle_control_frame_max_push_id_from_server ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . CONTROL ) + encode_frame ( FrameType . MAX_PUSH_ID , [string] ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] ) , ) [EOL] [EOL] def test_handle_control_stream_duplicate ( self ) : [EOL] [docstring] [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . CONTROL ) , end_stream = False ) ) [EOL] [EOL] [comment] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . CONTROL ) , end_stream = False ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_STREAM_CREATION_ERROR , [string] , ) , ) [EOL] [EOL] def test_handle_push_frame_wrong_frame_type ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . PUSH ) + encode_uint_var ( [number] ) + encode_frame ( FrameType . SETTINGS , [string] ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] ) , ) [EOL] [EOL] def test_handle_qpack_decoder_duplicate ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] [comment] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_DECODER ) , end_stream = False , ) ) [EOL] [EOL] [comment] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_DECODER ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_STREAM_CREATION_ERROR , [string] , ) , ) [EOL] [EOL] def test_handle_qpack_decoder_stream_error ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_DECODER ) + [string] , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_QPACK_DECODER_STREAM_ERROR , [string] ) ) [EOL] [EOL] def test_handle_qpack_encoder_duplicate ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] [comment] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_ENCODER ) , end_stream = False , ) ) [EOL] [EOL] [comment] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_ENCODER ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_STREAM_CREATION_ERROR , [string] , ) , ) [EOL] [EOL] def test_handle_qpack_encoder_stream_error ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_uint_var ( StreamType . QPACK_ENCODER ) + [string] , end_stream = False , ) ) [EOL] self . assertEqual ( quic_client . closed , ( ErrorCode . HTTP_QPACK_ENCODER_STREAM_ERROR , [string] ) ) [EOL] [EOL] def test_handle_request_frame_bad_headers ( self ) : [EOL] [docstring] [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_frame ( FrameType . HEADERS , [string] ) , end_stream = False ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_QPACK_DECOMPRESSION_FAILED , [string] ) ) [EOL] [EOL] def test_handle_request_frame_data_before_headers ( self ) : [EOL] [docstring] [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_frame ( FrameType . DATA , [string] ) , end_stream = False ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] , ) , ) [EOL] [EOL] def test_handle_request_frame_headers_after_trailers ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = True ) [EOL] h3_transfer ( quic_client , h3_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_frame ( FrameType . HEADERS , [string] ) , end_stream = False ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] , ) , ) [EOL] [EOL] def test_handle_request_frame_push_promise_from_client ( self ) : [EOL] [docstring] [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_frame ( FrameType . PUSH_PROMISE , [string] ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] ) , ) [EOL] [EOL] def test_handle_request_frame_wrong_frame_type ( self ) : [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] h3_server . handle_event ( StreamDataReceived ( stream_id = [number] , data = encode_frame ( FrameType . SETTINGS , [string] ) , end_stream = False , ) ) [EOL] self . assertEqual ( quic_server . closed , ( ErrorCode . HTTP_FRAME_UNEXPECTED , [string] ) , ) [EOL] [EOL] def test_request ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] self . _make_request ( h3_client , h3_server ) [EOL] [EOL] [comment] [EOL] self . _make_request ( h3_client , h3_server ) [EOL] [EOL] [comment] [EOL] self . _make_request ( h3_client , h3_server ) [EOL] [EOL] def test_request_headers_only ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = True , ) ] , ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_server , h3_client ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = True , ) ] , ) [EOL] [EOL] def test_request_fragmented_frame ( self ) : [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] quic_server = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = False ) ) [EOL] [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_client . send_data ( stream_id = stream_id , data = [string] , end_stream = True ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = True ) , ] , ) [EOL] [EOL] [comment] [EOL] push_stream_id = h3_server . send_push_promise ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] self . assertEqual ( push_stream_id , [number] ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = stream_id , data = [string] , end_stream = True ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = push_stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = push_stream_id , data = [string] , end_stream = True ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_server , h3_client ) [EOL] self . assertEqual ( events , [ PushPromiseReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , push_id = [number] , stream_id = stream_id , ) , HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = [number] , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = True ) , HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] , stream_id = [number] , stream_ended = False , push_id = [number] , ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False , push_id = [number] ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False , push_id = [number] ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False , push_id = [number] ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = False , push_id = [number] ) , DataReceived ( data = [string] , stream_id = [number] , stream_ended = True , push_id = [number] ) , ] , ) [EOL] [EOL] def test_request_with_server_push ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = True , ) ] , ) [EOL] [EOL] [comment] [EOL] push_stream_id_css = h3_server . send_push_promise ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] self . assertEqual ( push_stream_id_css , [number] ) [EOL] [EOL] push_stream_id_js = h3_server . send_push_promise ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] self . assertEqual ( push_stream_id_js , [number] ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = stream_id , data = [string] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = push_stream_id_css , headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = push_stream_id_css , data = [string] , end_stream = True , ) [EOL] [EOL] h3_server . send_headers ( stream_id = push_stream_id_js , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = push_stream_id_js , data = [string] , end_stream = True ) [EOL] [EOL] [comment] [EOL] [EOL] events = h3_transfer ( quic_server , h3_client ) [EOL] self . assertEqual ( events , [ PushPromiseReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , push_id = [number] , stream_id = stream_id , ) , PushPromiseReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , push_id = [number] , stream_id = stream_id , ) , HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = stream_id , stream_ended = True , ) , HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] , push_id = [number] , stream_id = push_stream_id_css , stream_ended = False , ) , DataReceived ( data = [string] , push_id = [number] , stream_id = push_stream_id_css , stream_ended = True , ) , HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , push_id = [number] , stream_id = push_stream_id_js , stream_ended = False , ) , DataReceived ( data = [string] , push_id = [number] , stream_id = push_stream_id_js , stream_ended = True , ) , ] , ) [EOL] [EOL] def test_request_with_server_push_max_push_id ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = True , ) ] , ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] h3_server . send_push_promise ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] . format ( i ) . encode ( [string] ) ) , ] , ) [EOL] [EOL] [comment] [EOL] with self . assertRaises ( NoAvailablePushIDError ) : [EOL] h3_server . send_push_promise ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] [EOL] def test_send_data_after_trailers ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = False ) [EOL] with self . assertRaises ( FrameUnexpected ) : [EOL] h3_client . send_data ( stream_id = stream_id , data = [string] , end_stream = False ) [EOL] [EOL] def test_send_data_before_headers ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] with self . assertRaises ( FrameUnexpected ) : [EOL] h3_client . send_data ( stream_id = stream_id , data = [string] , end_stream = False ) [EOL] [EOL] def test_send_headers_after_trailers ( self ) : [EOL] [docstring] [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = False ) [EOL] with self . assertRaises ( FrameUnexpected ) : [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = False , ) [EOL] [EOL] def test_blocked_stream ( self ) : [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False , ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = [string] , end_stream = False ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = [string] , end_stream = False ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] [string] [string] [string] [string] ) , end_stream = True , ) ) [EOL] self . assertEqual ( h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False , ) ) , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = [number] , stream_ended = False , ) , DataReceived ( data = ( [string] [string] [string] ) , stream_id = [number] , stream_ended = True , ) , ] , ) [EOL] [EOL] def test_blocked_stream_trailer ( self ) : [EOL] quic_client = FakeQuicConnection ( configuration = QuicConfiguration ( is_client = True ) ) [EOL] h3_client = H3Connection ( quic_client ) [EOL] [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False , ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = [string] , end_stream = False ) ) [EOL] h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = [string] , end_stream = False ) ) [EOL] [EOL] self . assertEqual ( h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False , ) ) , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = [number] , stream_ended = False , ) ] , ) [EOL] [EOL] self . assertEqual ( h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] [string] [string] [string] [string] ) , end_stream = False , ) ) , [ DataReceived ( data = ( [string] [string] [string] ) , stream_id = [number] , stream_ended = False , ) ] , ) [EOL] [EOL] self . assertEqual ( h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = True ) ) , [ ] , ) [EOL] [EOL] self . assertEqual ( h3_client . handle_event ( StreamDataReceived ( stream_id = [number] , data = binascii . unhexlify ( [string] ) , end_stream = False , ) ) , [ HeadersReceived ( headers = [ ( [string] , [string] ) ] , stream_id = [number] , stream_ended = True , push_id = None , ) ] , ) [EOL] [EOL] def test_uni_stream_grease ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] quic_client . send_stream_data ( [number] , [string] ) [EOL] self . assertEqual ( h3_transfer ( quic_client , h3_server ) , [ ] ) [EOL] [EOL] def test_request_with_trailers ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_client = H3Connection ( quic_client ) [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = False , ) [EOL] h3_client . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_client , h3_server ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , HeadersReceived ( headers = [ ( [string] , [string] ) ] , stream_id = stream_id , stream_ended = True , ) , ] , ) [EOL] [EOL] [comment] [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , end_stream = False , ) [EOL] h3_server . send_data ( stream_id = stream_id , data = [string] , end_stream = False , ) [EOL] h3_server . send_headers ( stream_id = stream_id , headers = [ ( [string] , [string] ) ] , end_stream = True , ) [EOL] [EOL] [comment] [EOL] events = h3_transfer ( quic_server , h3_client ) [EOL] self . assertEqual ( events , [ HeadersReceived ( headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ] , stream_id = stream_id , stream_ended = False , ) , DataReceived ( data = [string] , stream_id = stream_id , stream_ended = False , ) , HeadersReceived ( headers = [ ( [string] , [string] ) ] , stream_id = stream_id , stream_ended = True , ) , ] , ) [EOL] [EOL] def test_uni_stream_type ( self ) : [EOL] with h3_client_and_server ( ) as ( quic_client , quic_server ) : [EOL] h3_server = H3Connection ( quic_server ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( is_unidirectional = True ) [EOL] self . assertEqual ( stream_id , [number] ) [EOL] quic_client . send_stream_data ( stream_id , [string] ) [EOL] self . assertEqual ( h3_transfer ( quic_client , h3_server ) , [ ] ) [EOL] self . assertEqual ( list ( h3_server . _stream . keys ( ) ) , [ [number] ] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . buffer , [string] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . stream_type , [number] ) [EOL] [EOL] [comment] [EOL] stream_id = quic_client . get_next_available_stream_id ( is_unidirectional = True ) [EOL] self . assertEqual ( stream_id , [number] ) [EOL] [EOL] quic_client . send_stream_data ( stream_id , [string] ) [EOL] self . assertEqual ( h3_transfer ( quic_client , h3_server ) , [ ] ) [EOL] self . assertEqual ( list ( h3_server . _stream . keys ( ) ) , [ [number] , [number] ] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . buffer , [string] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . stream_type , [number] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . buffer , [string] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . stream_type , None ) [EOL] [EOL] quic_client . send_stream_data ( stream_id , [string] ) [EOL] self . assertEqual ( h3_transfer ( quic_client , h3_server ) , [ ] ) [EOL] self . assertEqual ( list ( h3_server . _stream . keys ( ) ) , [ [number] , [number] ] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . buffer , [string] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . stream_type , [number] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . buffer , [string] ) [EOL] self . assertEqual ( h3_server . _stream [ [number] ] . stream_type , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tools.third_party.aioquic.tests.test_h3.FakeQuicConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL] __email__ = [string] [EOL] __license__ = [string] [EOL] __summary__ = [string] [EOL] __title__ = [string] [EOL] __uri__ = [string] [EOL] __version__ = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from . about import __version__ [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] from . _buffer import Buffer , BufferReadError , BufferWriteError [comment] [EOL] [EOL] UINT_VAR_MAX = [number] [EOL] [EOL] [EOL] def encode_uint_var ( value ) : [EOL] [docstring] [EOL] buf = Buffer ( capacity = [number] ) [EOL] buf . push_uint_var ( value ) [EOL] return buf . data [EOL] [EOL] [EOL] def size_uint_var ( value ) : [EOL] [docstring] [EOL] if value <= [number] : [EOL] return [number] [EOL] elif value <= [number] : [EOL] return [number] [EOL] elif value <= [number] : [EOL] return [number] [EOL] elif value <= [number] : [EOL] return [number] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import AsyncGenerator , List , Union , Callable , Tuple , Any , Optional , Literal [EOL] import typing [EOL] import asyncio [EOL] import typing_extensions [EOL] import tls [EOL] import quic [EOL] import builtins [EOL] import protocol [EOL] import tools [EOL] import socket [EOL] import asyncio [EOL] import ipaddress [EOL] import socket [EOL] import sys [EOL] from typing import AsyncGenerator , Callable , Optional , cast [EOL] [EOL] from . . quic . configuration import QuicConfiguration [EOL] from . . quic . connection import QuicConnection [EOL] from . . tls import SessionTicketHandler [EOL] from . compat import asynccontextmanager [EOL] from . protocol import QuicConnectionProtocol , QuicStreamHandler [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] @ asynccontextmanager async def connect ( host , port , * , configuration = None , create_protocol = QuicConnectionProtocol , session_ticket_handler = None , stream_handler = None , wait_connected = True , local_port = [number] , ) : [EOL] [docstring] [EOL] loop = asyncio . get_event_loop ( ) [EOL] local_host = [string] [EOL] [EOL] [comment] [EOL] try : [EOL] ipaddress . ip_address ( host ) [EOL] server_name = None [EOL] except ValueError : [EOL] server_name = host [EOL] [EOL] [comment] [EOL] infos = await loop . getaddrinfo ( host , port , type = socket . SOCK_DGRAM ) [EOL] addr = infos [ [number] ] [ [number] ] [EOL] if len ( addr ) == [number] : [EOL] [comment] [EOL] if sys . platform == [string] : [EOL] [comment] [EOL] local_host = [string] [EOL] else : [EOL] [comment] [EOL] addr = ( [string] + addr [ [number] ] , addr [ [number] ] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] if configuration is None : [EOL] configuration = QuicConfiguration ( is_client = True ) [EOL] if server_name is not None : [EOL] configuration . server_name = server_name [EOL] connection = QuicConnection ( configuration = configuration , session_ticket_handler = session_ticket_handler ) [EOL] [EOL] [comment] [EOL] _ , protocol = await loop . create_datagram_endpoint ( lambda : create_protocol ( connection , stream_handler = stream_handler ) , local_addr = ( local_host , local_port ) , ) [EOL] protocol = cast ( QuicConnectionProtocol , protocol ) [EOL] protocol . connect ( addr ) [EOL] if wait_connected : [EOL] await protocol . wait_connected ( ) [EOL] try : [EOL] yield protocol [EOL] finally : [EOL] protocol . close ( ) [EOL] await protocol . wait_closed ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncGenerator[protocol.QuicConnectionProtocol,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . client import connect [comment] [EOL] from . protocol import QuicConnectionProtocol [comment] [EOL] from . server import serve [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Callable , Tuple , Type , Any , Optional , Dict [EOL] import typing [EOL] import asyncio [EOL] import quic [EOL] import builtins [EOL] import tools [EOL] import asyncio [EOL] from typing import Any , Callable , Dict , Optional , Text , Tuple , Union , cast [EOL] [EOL] from . . quic import events [EOL] from . . quic . connection import NetworkAddress , QuicConnection [EOL] [EOL] QuicConnectionIdHandler = Callable [ [ bytes ] , None ] [EOL] QuicStreamHandler = Callable [ [ asyncio . StreamReader , asyncio . StreamWriter ] , None ] [EOL] [EOL] [EOL] class QuicConnectionProtocol ( asyncio . DatagramProtocol ) : [EOL] def __init__ ( self , quic , stream_handler = None ) : [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] self . _closed = asyncio . Event ( ) [EOL] self . _connected = False [EOL] self . _connected_waiter = None [EOL] self . _loop = loop [EOL] self . _ping_waiters = { } [EOL] self . _quic = quic [EOL] self . _stream_readers = { } [EOL] self . _timer = None [EOL] self . _timer_at = None [EOL] self . _transmit_task = None [EOL] self . _transport = None [EOL] [EOL] [comment] [EOL] self . _connection_id_issued_handler = lambda c : None [EOL] self . _connection_id_retired_handler = lambda c : None [EOL] self . _connection_terminated_handler = lambda : None [EOL] if stream_handler is not None : [EOL] self . _stream_handler = stream_handler [EOL] else : [EOL] self . _stream_handler = lambda r , w : None [EOL] [EOL] def change_connection_id ( self ) : [EOL] [docstring] [EOL] self . _quic . change_connection_id ( ) [EOL] self . transmit ( ) [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] self . _quic . close ( ) [EOL] self . transmit ( ) [EOL] [EOL] def connect ( self , addr ) : [EOL] [docstring] [EOL] self . _quic . connect ( addr , now = self . _loop . time ( ) ) [EOL] self . transmit ( ) [EOL] [EOL] async def create_stream ( self , is_unidirectional = False ) : [EOL] [docstring] [EOL] stream_id = self . _quic . get_next_available_stream_id ( is_unidirectional = is_unidirectional ) [EOL] return self . _create_stream ( stream_id ) [EOL] [EOL] def request_key_update ( self ) : [EOL] [docstring] [EOL] self . _quic . request_key_update ( ) [EOL] self . transmit ( ) [EOL] [EOL] async def ping ( self ) : [EOL] [docstring] [EOL] waiter = self . _loop . create_future ( ) [EOL] uid = id ( waiter ) [EOL] self . _ping_waiters [ uid ] = waiter [EOL] self . _quic . send_ping ( uid ) [EOL] self . transmit ( ) [EOL] await asyncio . shield ( waiter ) [EOL] [EOL] def transmit ( self ) : [EOL] [docstring] [EOL] self . _transmit_task = None [EOL] [EOL] [comment] [EOL] for data , addr in self . _quic . datagrams_to_send ( now = self . _loop . time ( ) ) : [EOL] self . _transport . sendto ( data , addr ) [EOL] [EOL] [comment] [EOL] timer_at = self . _quic . get_timer ( ) [EOL] if self . _timer is not None and self . _timer_at != timer_at : [EOL] self . _timer . cancel ( ) [EOL] self . _timer = None [EOL] if self . _timer is None and timer_at is not None : [EOL] self . _timer = self . _loop . call_at ( timer_at , self . _handle_timer ) [EOL] self . _timer_at = timer_at [EOL] [EOL] async def wait_closed ( self ) : [EOL] [docstring] [EOL] await self . _closed . wait ( ) [EOL] [EOL] async def wait_connected ( self ) : [EOL] [docstring] [EOL] assert self . _connected_waiter is None , [string] [EOL] if not self . _connected : [EOL] self . _connected_waiter = self . _loop . create_future ( ) [EOL] await asyncio . shield ( self . _connected_waiter ) [EOL] [EOL] [comment] [EOL] [EOL] def connection_made ( self , transport ) : [EOL] self . _transport = cast ( asyncio . DatagramTransport , transport ) [EOL] [EOL] def datagram_received ( self , data , addr ) : [EOL] self . _quic . receive_datagram ( cast ( bytes , data ) , addr , now = self . _loop . time ( ) ) [EOL] self . _process_events ( ) [EOL] self . transmit ( ) [EOL] [EOL] [comment] [EOL] [EOL] def quic_event_received ( self , event ) : [EOL] [docstring] [EOL] [comment] [EOL] if isinstance ( event , events . ConnectionTerminated ) : [EOL] for reader in self . _stream_readers . values ( ) : [EOL] reader . feed_eof ( ) [EOL] elif isinstance ( event , events . StreamDataReceived ) : [EOL] reader = self . _stream_readers . get ( event . stream_id , None ) [EOL] if reader is None : [EOL] reader , writer = self . _create_stream ( event . stream_id ) [EOL] self . _stream_handler ( reader , writer ) [EOL] reader . feed_data ( event . data ) [EOL] if event . end_stream : [EOL] reader . feed_eof ( ) [EOL] [EOL] [comment] [EOL] [EOL] def _create_stream ( self , stream_id ) : [EOL] adapter = QuicStreamAdapter ( self , stream_id ) [EOL] reader = asyncio . StreamReader ( ) [EOL] writer = asyncio . StreamWriter ( adapter , None , reader , self . _loop ) [EOL] self . _stream_readers [ stream_id ] = reader [EOL] return reader , writer [EOL] [EOL] def _handle_timer ( self ) : [EOL] now = max ( self . _timer_at , self . _loop . time ( ) ) [EOL] self . _timer = None [EOL] self . _timer_at = None [EOL] self . _quic . handle_timer ( now = now ) [EOL] self . _process_events ( ) [EOL] self . transmit ( ) [EOL] [EOL] def _process_events ( self ) : [EOL] event = self . _quic . next_event ( ) [EOL] while event is not None : [EOL] if isinstance ( event , events . ConnectionIdIssued ) : [EOL] self . _connection_id_issued_handler ( event . connection_id ) [EOL] elif isinstance ( event , events . ConnectionIdRetired ) : [EOL] self . _connection_id_retired_handler ( event . connection_id ) [EOL] elif isinstance ( event , events . ConnectionTerminated ) : [EOL] self . _connection_terminated_handler ( ) [EOL] [EOL] [comment] [EOL] if self . _connected_waiter is not None : [EOL] waiter = self . _connected_waiter [EOL] self . _connected_waiter = None [EOL] waiter . set_exception ( ConnectionError ) [EOL] [EOL] [comment] [EOL] for waiter in self . _ping_waiters . values ( ) : [EOL] waiter . set_exception ( ConnectionError ) [EOL] self . _ping_waiters . clear ( ) [EOL] [EOL] self . _closed . set ( ) [EOL] elif isinstance ( event , events . HandshakeCompleted ) : [EOL] if self . _connected_waiter is not None : [EOL] waiter = self . _connected_waiter [EOL] self . _connected = True [EOL] self . _connected_waiter = None [EOL] waiter . set_result ( None ) [EOL] elif isinstance ( event , events . PingAcknowledged ) : [EOL] waiter = self . _ping_waiters . pop ( event . uid , None ) [EOL] if waiter is not None : [EOL] waiter . set_result ( None ) [EOL] self . quic_event_received ( event ) [EOL] event = self . _quic . next_event ( ) [EOL] [EOL] def _transmit_soon ( self ) : [EOL] if self . _transmit_task is None : [EOL] self . _transmit_task = self . _loop . call_soon ( self . transmit ) [EOL] [EOL] [EOL] class QuicStreamAdapter ( asyncio . Transport ) : [EOL] def __init__ ( self , protocol , stream_id ) : [EOL] self . protocol = protocol [EOL] self . stream_id = stream_id [EOL] [EOL] def can_write_eof ( self ) : [EOL] return True [EOL] [EOL] def get_extra_info ( self , name , default = None ) : [EOL] [docstring] [EOL] if name == [string] : [EOL] return self . stream_id [EOL] [EOL] def write ( self , data ) : [EOL] self . protocol . _quic . send_stream_data ( self . stream_id , data ) [EOL] self . protocol . _transmit_soon ( ) [EOL] [EOL] def write_eof ( self ) : [EOL] self . protocol . _quic . send_stream_data ( self . stream_id , [string] , end_stream = True ) [EOL] self . protocol . _transmit_soon ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.TimerHandle]$ 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 $typing.Optional[asyncio.futures.Future[None]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.events.Handle]$ 0 0 0 0 0 0 $typing.Optional[asyncio.events.Handle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.src.aioquic.asyncio.protocol.QuicConnectionProtocol$ 0 $builtins.int$ 0 0 0 0 0 $tools.third_party.aioquic.src.aioquic.asyncio.protocol.QuicConnectionProtocol$ 0 $tools.third_party.aioquic.src.aioquic.asyncio.protocol.QuicConnectionProtocol$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class H3Error ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class NoAvailablePushIDError ( H3Error ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Optional , List , Type [EOL] import builtins [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from typing import List , Optional , Tuple [EOL] [EOL] Headers = List [ Tuple [ bytes , bytes ] ] [EOL] [EOL] [EOL] class H3Event : [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class DataReceived ( H3Event ) : [EOL] [docstring] [EOL] [EOL] data = ... [EOL] [docstring] [EOL] [EOL] stream_id = ... [EOL] [docstring] [EOL] [EOL] stream_ended = ... [EOL] [docstring] [EOL] [EOL] push_id = None [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class HeadersReceived ( H3Event ) : [EOL] [docstring] [EOL] [EOL] headers = ... [EOL] [docstring] [EOL] [EOL] stream_id = ... [EOL] [docstring] [EOL] [EOL] stream_ended = ... [EOL] [docstring] [EOL] [EOL] push_id = None [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class PushPromiseReceived ( H3Event ) : [EOL] [docstring] [EOL] [EOL] headers = ... [EOL] [docstring] [EOL] [EOL] push_id = ... [EOL] [docstring] [EOL] [EOL] stream_id = ... [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Headers$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Headers$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0
	0
	0
	0
from typing import List , Union , Any , Optional , TextIO [EOL] import typing [EOL] import tls [EOL] import os [EOL] import builtins [EOL] import logger [EOL] from dataclasses import dataclass , field [EOL] from os import PathLike [EOL] from typing import Any , List , Optional , TextIO , Union [EOL] [EOL] from . . tls import SessionTicket , load_pem_private_key , load_pem_x509_certificates [EOL] from . logger import QuicLogger [EOL] from . packet import QuicProtocolVersion [EOL] [EOL] [EOL] @ dataclass class QuicConfiguration : [EOL] [docstring] [EOL] [EOL] alpn_protocols = None [EOL] [docstring] [EOL] [EOL] connection_id_length = [number] [EOL] [docstring] [EOL] [EOL] idle_timeout = [number] [EOL] [docstring] [EOL] [EOL] is_client = True [EOL] [docstring] [EOL] [EOL] max_data = [number] [EOL] [docstring] [EOL] [EOL] max_stream_data = [number] [EOL] [docstring] [EOL] [EOL] quic_logger = None [EOL] [docstring] [EOL] [EOL] secrets_log_file = None [EOL] [docstring] [EOL] [EOL] server_name = None [EOL] [docstring] [EOL] [EOL] session_ticket = None [EOL] [docstring] [EOL] [EOL] cadata = None [EOL] cafile = None [EOL] capath = None [EOL] certificate = None [EOL] certificate_chain = field ( default_factory = list ) [EOL] max_datagram_frame_size = None [EOL] private_key = None [EOL] quantum_readiness_test = False [EOL] supported_versions = field ( default_factory = lambda : [ QuicProtocolVersion . DRAFT_27 , QuicProtocolVersion . DRAFT_26 , QuicProtocolVersion . DRAFT_25 , ] ) [EOL] verify_mode = None [EOL] [EOL] def load_cert_chain ( self , certfile , keyfile = None , password = None , ) : [EOL] [docstring] [EOL] with open ( certfile , [string] ) as fp : [EOL] certificates = load_pem_x509_certificates ( fp . read ( ) ) [EOL] self . certificate = certificates [ [number] ] [EOL] self . certificate_chain = certificates [ [number] : ] [EOL] [EOL] if keyfile is not None : [EOL] with open ( keyfile , [string] ) as fp : [EOL] self . private_key = load_pem_private_key ( fp . read ( ) , password = password . encode ( [string] ) [EOL] if isinstance ( password , str ) [EOL] else password , ) [EOL] [EOL] def load_verify_locations ( self , cafile = None , capath = None , cadata = None , ) : [EOL] [docstring] [EOL] self . cafile = cafile [EOL] self . capath = capath [EOL] self . cadata = cadata [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[tls.SessionTicket]$ 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $None$ 0 0 0 $os.PathLike$ 0 $typing.Optional[os.PathLike]$ 0 0 0 $typing.Optional[typing.Union[builtins.bytes,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $os.PathLike$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[os.PathLike]$ 0 0 0 0 0 0 0 0 $typing.Optional[os.PathLike]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.bytes,builtins.str]]$ 0 $typing.Optional[typing.Union[builtins.bytes,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.bytes,builtins.str]]$ 0 0 0 0 0 $typing.Optional[typing.Union[builtins.bytes,builtins.str]]$ 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bytes]$ 0 $typing.Optional[builtins.bytes]$ 0
from typing import List , Union , Deque , Tuple , Any , Optional , Dict [EOL] import typing [EOL] import rangeset [EOL] import packet [EOL] import builtins [EOL] import tools [EOL] import binascii [EOL] import time [EOL] from collections import deque [EOL] from typing import Any , Deque , Dict , List , Optional , Tuple [EOL] [EOL] from . packet import ( PACKET_TYPE_HANDSHAKE , PACKET_TYPE_INITIAL , PACKET_TYPE_MASK , PACKET_TYPE_ONE_RTT , PACKET_TYPE_RETRY , PACKET_TYPE_ZERO_RTT , QuicStreamFrame , QuicTransportParameters , ) [EOL] from . rangeset import RangeSet [EOL] [EOL] PACKET_TYPE_NAMES = { PACKET_TYPE_INITIAL : [string] , PACKET_TYPE_HANDSHAKE : [string] , PACKET_TYPE_ZERO_RTT : [string] , PACKET_TYPE_ONE_RTT : [string] , PACKET_TYPE_RETRY : [string] , } [EOL] [EOL] [EOL] def hexdump ( data ) : [EOL] return binascii . hexlify ( data ) . decode ( [string] ) [EOL] [EOL] [EOL] class QuicLoggerTrace : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * , is_client , odcid ) : [EOL] self . _odcid = odcid [EOL] self . _events = deque ( ) [EOL] self . _vantage_point = { [string] : [string] , [string] : [string] if is_client else [string] , } [EOL] [EOL] def encode_ack_frame ( self , ranges , delay ) : [EOL] return { [string] : str ( self . encode_time ( delay ) ) , [string] : [ [ str ( x . start ) , str ( x . stop - [number] ) ] for x in ranges ] , [string] : [string] , } [EOL] [EOL] def encode_connection_close_frame ( self , error_code , frame_type , reason_phrase ) : [EOL] attrs = { [string] : error_code , [string] : [string] if frame_type is None else [string] , [string] : [string] , [string] : error_code , [string] : reason_phrase , } [EOL] if frame_type is not None : [EOL] attrs [ [string] ] = frame_type [EOL] [EOL] return attrs [EOL] [EOL] def encode_crypto_frame ( self , frame ) : [EOL] return { [string] : [string] , [string] : len ( frame . data ) , [string] : str ( frame . offset ) , } [EOL] [EOL] def encode_data_blocked_frame ( self , limit ) : [EOL] return { [string] : [string] , [string] : str ( limit ) } [EOL] [EOL] def encode_datagram_frame ( self , length ) : [EOL] return { [string] : [string] , [string] : length } [EOL] [EOL] def encode_handshake_done_frame ( self ) : [EOL] return { [string] : [string] } [EOL] [EOL] def encode_max_data_frame ( self , maximum ) : [EOL] return { [string] : [string] , [string] : str ( maximum ) } [EOL] [EOL] def encode_max_stream_data_frame ( self , maximum , stream_id ) : [EOL] return { [string] : [string] , [string] : str ( maximum ) , [string] : str ( stream_id ) , } [EOL] [EOL] def encode_max_streams_frame ( self , is_unidirectional , maximum ) : [EOL] return { [string] : [string] , [string] : str ( maximum ) , [string] : [string] if is_unidirectional else [string] , } [EOL] [EOL] def encode_new_connection_id_frame ( self , connection_id , retire_prior_to , sequence_number , stateless_reset_token , ) : [EOL] return { [string] : hexdump ( connection_id ) , [string] : [string] , [string] : len ( connection_id ) , [string] : hexdump ( stateless_reset_token ) , [string] : str ( retire_prior_to ) , [string] : str ( sequence_number ) , } [EOL] [EOL] def encode_new_token_frame ( self , token ) : [EOL] return { [string] : [string] , [string] : len ( token ) , [string] : hexdump ( token ) , } [EOL] [EOL] def encode_padding_frame ( self ) : [EOL] return { [string] : [string] } [EOL] [EOL] def encode_path_challenge_frame ( self , data ) : [EOL] return { [string] : hexdump ( data ) , [string] : [string] } [EOL] [EOL] def encode_path_response_frame ( self , data ) : [EOL] return { [string] : hexdump ( data ) , [string] : [string] } [EOL] [EOL] def encode_ping_frame ( self ) : [EOL] return { [string] : [string] } [EOL] [EOL] def encode_reset_stream_frame ( self , error_code , final_size , stream_id ) : [EOL] return { [string] : error_code , [string] : str ( final_size ) , [string] : [string] , [string] : str ( stream_id ) , } [EOL] [EOL] def encode_retire_connection_id_frame ( self , sequence_number ) : [EOL] return { [string] : [string] , [string] : str ( sequence_number ) , } [EOL] [EOL] def encode_stream_data_blocked_frame ( self , limit , stream_id ) : [EOL] return { [string] : [string] , [string] : str ( limit ) , [string] : str ( stream_id ) , } [EOL] [EOL] def encode_stop_sending_frame ( self , error_code , stream_id ) : [EOL] return { [string] : [string] , [string] : error_code , [string] : str ( stream_id ) , } [EOL] [EOL] def encode_stream_frame ( self , frame , stream_id ) : [EOL] return { [string] : frame . fin , [string] : [string] , [string] : len ( frame . data ) , [string] : str ( frame . offset ) , [string] : str ( stream_id ) , } [EOL] [EOL] def encode_streams_blocked_frame ( self , is_unidirectional , limit ) : [EOL] return { [string] : [string] , [string] : str ( limit ) , [string] : [string] if is_unidirectional else [string] , } [EOL] [EOL] def encode_time ( self , seconds ) : [EOL] [docstring] [EOL] return int ( seconds * [number] ) [EOL] [EOL] def encode_transport_parameters ( self , owner , parameters ) : [EOL] data = { [string] : owner } [EOL] for param_name , param_value in parameters . __dict__ . items ( ) : [EOL] if isinstance ( param_value , bool ) : [EOL] data [ param_name ] = param_value [EOL] elif isinstance ( param_value , bytes ) : [EOL] data [ param_name ] = hexdump ( param_value ) [EOL] elif isinstance ( param_value , int ) : [EOL] data [ param_name ] = param_value [EOL] return data [EOL] [EOL] def log_event ( self , * , category , event , data ) : [EOL] self . _events . append ( ( time . time ( ) , category , event , data ) ) [EOL] [EOL] def packet_type ( self , packet_type ) : [EOL] return PACKET_TYPE_NAMES . get ( packet_type & PACKET_TYPE_MASK , [string] ) [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] if self . _events : [EOL] reference_time = self . _events [ [number] ] [ [number] ] [EOL] else : [EOL] reference_time = [number] [EOL] return { [string] : { [string] : [string] } , [string] : { [string] : hexdump ( self . _odcid ) , [string] : str ( self . encode_time ( reference_time ) ) , } , [string] : [ [string] , [string] , [string] , [string] ] , [string] : list ( map ( lambda event : ( str ( self . encode_time ( event [ [number] ] - reference_time ) ) , event [ [number] ] , event [ [number] ] , event [ [number] ] , ) , self . _events , ) ) , [string] : self . _vantage_point , } [EOL] [EOL] [EOL] class QuicLogger : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . _traces = [ ] [EOL] [EOL] def start_trace ( self , is_client , odcid ) : [EOL] trace = QuicLoggerTrace ( is_client = is_client , odcid = odcid ) [EOL] self . _traces . append ( trace ) [EOL] return trace [EOL] [EOL] def end_trace ( self , trace ) : [EOL] assert trace in self . _traces , [string] [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [ trace . to_dict ( ) for trace in self . _traces ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 $typing.Deque[typing.Tuple[builtins.float,builtins.str,builtins.str,typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $rangeset.RangeSet$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rangeset.RangeSet$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $typing.Dict$ 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bool$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bytes$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $packet.QuicStreamFrame$ 0 $builtins.int$ 0 0 0 0 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 $packet.QuicStreamFrame$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.bool$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 $packet.QuicTransportParameters$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $packet.QuicTransportParameters$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Dict$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.List[QuicLoggerTrace]$ 0 0 0 0 0 0 $QuicLoggerTrace$ 0 0 0 $builtins.bool$ 0 $builtins.bytes$ 0 0 0 $tools.third_party.aioquic.src.aioquic.quic.logger.QuicLoggerTrace$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $tools.third_party.aioquic.src.aioquic.quic.logger.QuicLoggerTrace$ 0 0 0 $tools.third_party.aioquic.src.aioquic.quic.logger.QuicLoggerTrace$ 0 0 0 $None$ 0 0 0 $QuicLoggerTrace$ 0 0 0 0 $QuicLoggerTrace$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] from typing import Optional [EOL] [EOL] [EOL] class QuicEvent : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] @ dataclass class ConnectionIdIssued ( QuicEvent ) : [EOL] connection_id = ... [EOL] [EOL] [EOL] @ dataclass class ConnectionIdRetired ( QuicEvent ) : [EOL] connection_id = ... [EOL] [EOL] [EOL] @ dataclass class ConnectionTerminated ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] error_code = ... [EOL] [docstring] [EOL] [EOL] frame_type = ... [EOL] [docstring] [EOL] [EOL] reason_phrase = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class DatagramFrameReceived ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] data = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class HandshakeCompleted ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] alpn_protocol = ... [EOL] [docstring] [EOL] [EOL] early_data_accepted = ... [EOL] [docstring] [EOL] [EOL] session_resumed = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class PingAcknowledged ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] uid = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class ProtocolNegotiated ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] alpn_protocol = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class StreamDataReceived ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] data = ... [EOL] [docstring] [EOL] [EOL] end_stream = ... [EOL] [docstring] [EOL] [EOL] stream_id = ... [EOL] [docstring] [EOL] [EOL] [EOL] @ dataclass class StreamReset ( QuicEvent ) : [EOL] [docstring] [EOL] [EOL] error_code = ... [EOL] [docstring] [EOL] [EOL] stream_id = ... [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import os [EOL] import typing [EOL] import datetime [EOL] import os [EOL] from urllib . parse import urlencode [EOL] [EOL] import httpbin [EOL] from asgiref . wsgi import WsgiToAsgi [EOL] from starlette . applications import Starlette [EOL] from starlette . responses import PlainTextResponse , Response [EOL] from starlette . staticfiles import StaticFiles [EOL] from starlette . templating import Jinja2Templates [EOL] from starlette . websockets import WebSocketDisconnect [EOL] [EOL] ROOT = os . path . dirname ( __file__ ) [EOL] STATIC_ROOT = os . environ . get ( [string] , os . path . join ( ROOT , [string] ) ) [EOL] STATIC_URL = [string] [EOL] LOGS_PATH = os . path . join ( STATIC_ROOT , [string] ) [EOL] QVIS_URL = [string] [EOL] [EOL] templates = Jinja2Templates ( directory = os . path . join ( ROOT , [string] ) ) [EOL] app = Starlette ( ) [EOL] [EOL] [EOL] @ app . route ( [string] ) async def homepage ( request ) : [EOL] [docstring] [EOL] await request . send_push_promise ( [string] ) [EOL] return templates . TemplateResponse ( [string] , { [string] : request } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def echo ( request ) : [EOL] [docstring] [EOL] content = await request . body ( ) [EOL] media_type = request . headers . get ( [string] ) [EOL] return Response ( content , media_type = media_type ) [EOL] [EOL] [EOL] @ app . route ( [string] ) async def logs ( request ) : [EOL] [docstring] [EOL] logs = [ ] [EOL] for name in os . listdir ( LOGS_PATH ) : [EOL] if name . endswith ( [string] ) : [EOL] s = os . stat ( os . path . join ( LOGS_PATH , name ) ) [EOL] file_url = [string] + request . headers [ [string] ] + [string] + name [EOL] logs . append ( { [string] : datetime . datetime . utcfromtimestamp ( s . st_mtime ) . strftime ( [string] ) , [string] : file_url , [string] : name [ : - [number] ] , [string] : QVIS_URL + [string] + urlencode ( { [string] : file_url } ) + [string] , [string] : s . st_size , } ) [EOL] return templates . TemplateResponse ( [string] , { [string] : sorted ( logs , key = lambda x : x [ [string] ] , reverse = True ) , [string] : request , } , ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def padding ( request ) : [EOL] [docstring] [EOL] size = min ( [number] , request . path_params [ [string] ] ) [EOL] return PlainTextResponse ( [string] * size ) [EOL] [EOL] [EOL] @ app . websocket_route ( [string] ) async def ws ( websocket ) : [EOL] [docstring] [EOL] if [string] in websocket . scope [ [string] ] : [EOL] subprotocol = [string] [EOL] else : [EOL] subprotocol = None [EOL] await websocket . accept ( subprotocol = subprotocol ) [EOL] [EOL] try : [EOL] while True : [EOL] message = await websocket . receive_text ( ) [EOL] await websocket . send_text ( message ) [EOL] except WebSocketDisconnect : [EOL] pass [EOL] [EOL] [EOL] app . mount ( [string] , WsgiToAsgi ( httpbin . app ) ) [EOL] [EOL] app . mount ( STATIC_URL , StaticFiles ( directory = STATIC_ROOT , html = True ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
	0
	0
import time [EOL] import timeit [EOL] [EOL] [comment] [EOL] [comment] [EOL] sleep_padding = [number] [EOL] [EOL] def sleep_at_least ( sleep_in_ms ) : [EOL] sleep_until = timeit . default_timer ( ) + ( sleep_in_ms / [number] ) [EOL] time . sleep ( ( sleep_in_ms + sleep_padding ) / [number] ) [EOL] [comment] [EOL] while timeit . default_timer ( ) < sleep_until : [EOL] time . sleep ( sleep_padding / [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0
def main ( request , response ) : [EOL] status = request . GET . first ( [string] ) [EOL] response . status = ( status , [string] ) ; [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] [docstring] [EOL] step = [number] [EOL] if [string] in request . GET : [EOL] try : [EOL] step = int ( request . GET . first ( [string] ) ) [EOL] except ValueError : [EOL] pass [EOL] [EOL] page_origin = request . GET . first ( [string] ) [EOL] cross_origin = request . GET . first ( [string] ) [EOL] final_resource = request . GET . first ( [string] ) [EOL] [EOL] tao_value = [string] [EOL] if [string] in request . GET : [EOL] tao_value = request . GET . first ( [string] ) [EOL] tao_steps = [number] [EOL] if [string] in request . GET : [EOL] tao_steps = int ( request . GET . first ( [string] ) ) [EOL] [EOL] next_tao_steps = tao_steps - [number] [EOL] redirect_url_path = [string] [EOL] redirect_url_path += [string] + page_origin [EOL] redirect_url_path += [string] + cross_origin [EOL] redirect_url_path += [string] + final_resource [EOL] redirect_url_path += [string] + tao_value [EOL] redirect_url_path += [string] + isomorphic_encode ( str ( next_tao_steps ) ) [EOL] redirect_url_path += [string] [EOL] if tao_steps > [number] : [EOL] response . headers . set ( [string] , tao_value ) [EOL] [EOL] if step == [number] : [EOL] [comment] [EOL] redirect_url = cross_origin + redirect_url_path + [string] [EOL] elif step == [number] : [EOL] [comment] [EOL] redirect_url = page_origin + redirect_url_path + [string] [EOL] else : [EOL] [comment] [EOL] redirect_url = page_origin + final_resource [EOL] [EOL] response . status = [number] [EOL] response . headers . set ( [string] , redirect_url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Union [EOL] import io [EOL] import typing [EOL] import gzip as gzip_module [EOL] import os [EOL] [EOL] from six import BytesIO [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] dir_path = os . path . dirname ( os . path . realpath ( isomorphic_decode ( __file__ ) ) ) [EOL] file_path = os . path . join ( dir_path , [string] ) [EOL] f = open ( file_path , [string] ) [EOL] output = f . read ( ) [EOL] [EOL] out = BytesIO ( ) [EOL] with gzip_module . GzipFile ( fileobj = out , mode = [string] ) as f : [EOL] f . write ( output ) [EOL] output = out . getvalue ( ) [EOL] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , len ( output ) ) ] [EOL] [EOL] return headers , output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] command = request . GET . first ( [string] ) . lower ( ) [EOL] test_id = request . GET . first ( [string] ) [EOL] if command == [string] : [EOL] request . server . stash . put ( test_id , request . headers . get ( [string] , [string] ) ) [EOL] return [ ( [string] , [string] ) ] , [string] [EOL] [EOL] if command == [string] : [EOL] stashed_header = request . server . stash . take ( test_id ) [EOL] if stashed_header is not None : [EOL] return [ ( [string] , [string] ) ] , stashed_header [EOL] [EOL] response . set_error ( [number] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] name = request . GET . first ( [string] ) [EOL] value = request . GET . first ( [string] ) [EOL] testcase = request . GET . first ( [string] ) [EOL] response_headers = [ ( [string] , name + [string] + value ) ] [EOL] [EOL] body = [string] % ( name , value , testcase ) [EOL] [EOL] return ( [number] , response_headers , body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List , Union , Dict [EOL] import io [EOL] import typing [EOL] [docstring] [EOL] import json [EOL] import os [EOL] [EOL] DURATION = [number] [EOL] MEDIA_FORMATS = [ [string] , [string] ] [EOL] ENCODE_SETTINGS = [ { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , ] [EOL] [EOL] CONFIG_CHANGE_TESTS = [ [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] , [ [string] , [number] , [number] , [string] ] ] [EOL] [EOL] CODEC_INFO = { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } } [EOL] [EOL] HTML_TEMPLATE = [string] [EOL] [EOL] def run ( cmd_line ) : [EOL] os . system ( [string] . join ( cmd_line ) ) [EOL] [EOL] def generate_manifest ( filename , media_filename , media_format , has_audio , has_video ) : [EOL] major_type = [string] [EOL] if has_video : [EOL] major_type = [string] [EOL] [EOL] codecs = [ ] [EOL] if has_video : [EOL] codecs . append ( CODEC_INFO [ media_format ] [ [string] ] ) [EOL] [EOL] if has_audio : [EOL] codecs . append ( CODEC_INFO [ media_format ] [ [string] ] ) [EOL] [EOL] mimetype = [string] % ( major_type , media_format , [string] . join ( codecs ) ) [EOL] [EOL] manifest = { [string] : media_filename , [string] : mimetype } [EOL] [EOL] f = open ( filename , [string] ) [EOL] f . write ( json . dumps ( manifest , indent = [number] , separators = ( [string] , [string] ) ) ) [EOL] f . close ( ) [EOL] [EOL] def generate_test_html ( media_format , config_change_tests , encoding_ids ) : [EOL] for test_info in config_change_tests : [EOL] filename = [string] % ( media_format , test_info [ [number] ] ) [EOL] html = HTML_TEMPLATE % { [string] : media_format , [string] : encoding_ids [ test_info [ [number] ] ] , [string] : encoding_ids [ test_info [ [number] ] ] , [string] : test_info [ [number] ] % (media_format) } [EOL] f = open ( filename , [string] ) [EOL] f . write ( html ) [EOL] f . close ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] encoding_ids = [ ] [EOL] [EOL] for media_format in MEDIA_FORMATS : [EOL] run ( [ [string] , media_format ] ) [EOL] [EOL] for settings in ENCODE_SETTINGS : [EOL] video_bitrate = settings [ [string] ] [EOL] has_video = ( video_bitrate > [number] ) [EOL] [EOL] audio_bitrate = settings [ [string] ] [EOL] has_audio = ( audio_bitrate > [number] ) [EOL] bitrate = video_bitrate + audio_bitrate [EOL] [EOL] frame_size = settings [ [string] ] [EOL] frame_rate = settings [ [string] ] [EOL] keyframe_rate = settings [ [string] ] [EOL] color = settings [ [string] ] [EOL] [EOL] sample_rate = settings [ [string] ] [EOL] channels = settings [ [string] ] [EOL] frequency = settings [ [string] ] [EOL] [EOL] cmdline = [ [string] , [string] ] [EOL] [EOL] id_prefix = [string] [EOL] id_params = [string] [EOL] if has_audio : [EOL] id_prefix += [string] [EOL] id_params += [string] % ( sample_rate , channels ) [EOL] [EOL] channel_layout = [string] [EOL] sin_func = [string] % frequency [EOL] func = sin_func [EOL] if channels == [number] : [EOL] channel_layout += [string] [EOL] func += [string] + sin_func [EOL] [EOL] cmdline += [ [string] , [string] , [string] , [string] % ( func , sample_rate , channel_layout , DURATION ) ] [EOL] [EOL] if has_video : [EOL] id_prefix += [string] [EOL] id_params += [string] % ( frame_size , frame_rate , keyframe_rate ) [EOL] [EOL] cmdline += [ [string] , [string] , [string] , [string] % ( color , DURATION , frame_size , frame_rate ) ] [EOL] [EOL] if has_audio : [EOL] cmdline += [ [string] , [string] % audio_bitrate ] [EOL] [EOL] if has_video : [EOL] cmdline += [ [string] , [string] % video_bitrate ] [EOL] cmdline += [ [string] , [string] % keyframe_rate ] [EOL] cmdline += [ [string] , [string] % keyframe_rate ] [EOL] [EOL] [EOL] textOverlayInfo = [string] [EOL] textOverlayInfo += [string] % (frame_size) [EOL] textOverlayInfo += [string] % (bitrate) [EOL] textOverlayInfo += [string] % (frame_rate) [EOL] textOverlayInfo += [string] % (keyframe_rate) [EOL] [EOL] if has_audio : [EOL] textOverlayInfo += [string] % (sample_rate) [EOL] textOverlayInfo += [string] % (channels) [EOL] [EOL] textOverlayInfo += [string] [EOL] cmdline += [ [string] , textOverlayInfo ] [EOL] [EOL] encoding_id = [string] % ( id_prefix , bitrate , id_params ) [EOL] [EOL] if len ( encoding_ids ) < len ( ENCODE_SETTINGS ) : [EOL] encoding_ids . append ( encoding_id ) [EOL] [EOL] filename_base = [string] % ( media_format , encoding_id ) [EOL] media_filename = filename_base + [string] + media_format [EOL] manifest_filename = filename_base + [string] [EOL] [EOL] cmdline . append ( media_filename ) [EOL] run ( cmdline ) [EOL] [EOL] [comment] [EOL] if media_format == [string] : [EOL] tmp_filename = media_filename + [string] [EOL] run ( [ [string] , media_filename , tmp_filename ] ) [EOL] run ( [ [string] , tmp_filename , media_filename ] ) [EOL] elif media_format == [string] : [EOL] run ( [ [string] , [string] , [string] , [string] , media_filename ] ) [EOL] run ( [ [string] , filename_base + [string] , media_filename ] ) [EOL] run ( [ [string] , filename_base + [string] ] ) [EOL] [EOL] generate_manifest ( manifest_filename , media_filename , media_format , has_audio , has_video ) [EOL] generate_test_html ( media_format , CONFIG_CHANGE_TESTS , encoding_ids ) [EOL] [EOL] if [string] == __name__ : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , request . headers . get ( [string] ) ) , ( [string] , request . headers . get ( [string] ) ) , ( [string] , [string] ) ] [EOL] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] def main ( request , response ) : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] return ( ( ( [string] , [string] ) , ) , [string] . format ( isomorphic_decode ( request . GET . first ( [string] ) ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import json [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] if [string] in request . GET : [EOL] headers . append ( ( [string] , request . GET [ [string] ] ) ) [EOL] message = request . GET [ [string] ] [EOL] return headers , [string] % ( message , message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] policy = request . GET . first ( [string] ) [EOL] return [ ( [string] , [string] ) , ( [string] , policy ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . status = [number] [EOL] if [string] in request . GET : [EOL] response . headers . set ( [string] , request . GET [ [string] ] ) [EOL] else : [EOL] response . headers . set ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] import time [EOL] def main ( request , response ) : [EOL] time . sleep ( [number] ) [EOL] headers = [ ( [string] , [string] ) ] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ] [EOL] headers . append ( ( [string] , [string] ) ) [EOL] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] policy = request . GET . first ( [string] ) [EOL] return [ ( [string] , [string] ) , ( [string] , policy ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] [docstring] [EOL] [EOL] name = request . GET [ [string] ] [EOL] path = request . GET [ [string] ] [EOL] cookie = [string] % ( name , path ) [EOL] [EOL] headers = [ ( [string] , [string] ) , ( [string] , cookie ) ] [EOL] body = [string] [EOL] return headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [comment] [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] msgutil . send_message ( request , request . ws_origin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil , util [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [comment] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] msgutil . send_message ( request , request . unparsed_uri . split ( [string] , [number] ) [ [number] ] or [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] request . ws_extension_processors = [ ] [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import time [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] [comment] [EOL] request . ws_extension_processors = [ ] [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] [comment] [EOL] time . sleep ( [number] ) ; [EOL] request . ws_stream . receive_message ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] referrer = request . headers_in . get ( [string] ) [EOL] if referrer is None : [EOL] referrer = [string] [EOL] msgutil . send_message ( request , referrer ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import six [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] _GOODBYE_MESSAGE = [string] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] pass [comment] [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] while True : [EOL] line = request . ws_stream . receive_message ( ) [EOL] if line is None : [EOL] return [EOL] if isinstance ( line , six . text_type ) : [EOL] if line == _GOODBYE_MESSAGE : [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [comment] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] line = msgutil . receive_message ( request ) [EOL] if line == [string] : [EOL] msgutil . send_message ( request , [string] ) [EOL] else : [EOL] msgutil . send_message ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] request . ws_protocol = [string] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil [EOL] import time [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] time . sleep ( [number] ) [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] request . connection . write ( [string] ) [EOL] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] [comment] [EOL] request . ws_requested_protocols = None [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from mod_pywebsocket import msgutil [EOL] [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [comment] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] while True : [EOL] line = msgutil . receive_message ( request ) [EOL] if line == [string] : [EOL] return [EOL] [EOL] if line is not None : [EOL] request . connection . write ( line ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil , util [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] request . ws_protocol = request . headers_in . get ( [string] ) [EOL] [comment] [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] while True : [EOL] msgutil . send_message ( request , request . ws_protocol ) [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from mod_pywebsocket import msgutil , util [EOL] [EOL] def web_socket_do_extra_handshake ( request ) : [EOL] pass [EOL] [EOL] def web_socket_transfer_data ( request ) : [EOL] while True : [EOL] msgutil . send_message ( request , request . unparsed_uri . split ( [string] ) [ [number] ] or [string] ) [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [string] if [string] in request . headers else [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from six . moves . urllib import parse [EOL] [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , isomorphic_encode ( parse . unquote ( request . url_parts . query ) ) ) [EOL] return [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] return [ ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] from template . stash import list_op [EOL] @ list_op ( [string] ) def list_contains ( l , x ) : [EOL] return x in l [EOL] [EOL] import sys [EOL] import re [EOL] import os [EOL] import codecs [EOL] from os . path import join , exists , abspath [EOL] from template import Template [EOL] import w3ctestlib [EOL] from Utils import listfiles , escapeToNamedASCII [EOL] from OutputFormats import ExtensionMap [EOL] import shutil [EOL] [EOL] class Section : [EOL] def __init__ ( self , uri , title , numstr ) : [EOL] self . uri = uri [EOL] self . title = title [EOL] self . numstr = numstr [EOL] self . tests = [ ] [EOL] def __cmp__ ( self , other ) : [EOL] return cmp ( self . natsortkey ( ) , other . natsortkey ( ) ) [EOL] def chapterNum ( self ) : [EOL] return self . numstr . partition ( [string] ) [ [number] ] [EOL] def natsortkey ( self ) : [EOL] chunks = self . numstr . partition ( [string] ) [ [number] ] . split ( [string] ) [EOL] for index in range ( len ( chunks ) ) : [EOL] if chunks [ index ] . isdigit ( ) : [EOL] [comment] [EOL] chunks [ index ] = ( [number] , int ( chunks [ index ] ) ) [EOL] else : [EOL] chunks [ index ] = ( [number] , chunks [ index ] ) [EOL] return ( chunks , self . numstr ) [EOL] [EOL] class Indexer : [EOL] [EOL] def __init__ ( self , suite , sections , suites , flags , splitChapter = False , templatePathList = None , extraData = None , overviewTmplNames = None , overviewCopyExts = ( [string] , [string] ) ) : [EOL] [docstring] [EOL] self . suite = suite [EOL] self . splitChapter = splitChapter [EOL] self . extraData = extraData [EOL] self . overviewCopyExtPat = re . compile ( [string] % [string] . join ( overviewCopyExts ) ) [EOL] self . overviewTmplNames = overviewTmplNames if overviewTmplNames is not None \ [EOL] else [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] self . templatePath = [ join ( w3ctestlib . __path__ [ [number] ] , [string] ) ] [EOL] if templatePathList : [EOL] self . templatePath . extend ( templatePathList ) [EOL] self . templatePath = [ abspath ( path ) for path in self . templatePath ] [EOL] self . tt = Template ( { [string] : self . templatePath , [string] : [string] , [string] : [number] , [string] : [number] , } ) [EOL] [EOL] [comment] [EOL] self . sections = { } [EOL] for uri , numstr , title in sections : [EOL] uri = intern ( uri . encode ( [string] ) ) [EOL] uriKey = intern ( self . _normalizeScheme ( uri ) ) [EOL] numstr = escapeToNamedASCII ( numstr ) [EOL] title = escapeToNamedASCII ( title ) if title else None [EOL] self . sections [ uriKey ] = Section ( uri , title , numstr ) [EOL] [EOL] self . suites = suites [EOL] self . flags = flags [EOL] [EOL] [comment] [EOL] self . errors = { } [EOL] self . contributors = { } [EOL] self . alltests = [ ] [EOL] [EOL] def _normalizeScheme ( self , uri ) : [EOL] if ( uri and uri . startswith ( [string] ) ) : [EOL] return [string] + uri [ [number] : ] [EOL] return uri [EOL] [EOL] def indexGroup ( self , group ) : [EOL] for test in group . iterTests ( ) : [EOL] data = test . getMetadata ( ) [EOL] if data : [comment] [EOL] data = dict ( data ) [EOL] data [ [string] ] = [string] . join ( ( group . name , test . relpath ) ) \ [EOL] if group . name else test . relpath [EOL] if ( data [ [string] ] ) : [EOL] data [ [string] ] . append ( intern ( [string] ) ) [EOL] self . alltests . append ( data ) [EOL] for uri in data [ [string] ] : [EOL] uri = self . _normalizeScheme ( uri ) [EOL] uri = uri . replace ( self . _normalizeScheme ( self . suite . draftroot ) , self . _normalizeScheme ( self . suite . specroot ) ) [EOL] if self . sections . has_key ( uri ) : [EOL] testlist = self . sections [ uri ] . tests . append ( data ) [EOL] for credit in data [ [string] ] : [EOL] self . contributors [ credit [ [number] ] ] = credit [ [number] ] [EOL] else : [EOL] self . errors [ test . sourcepath ] = test . errors [EOL] [EOL] def __writeTemplate ( self , template , data , outfile ) : [EOL] o = self . tt . process ( template , data ) [EOL] with open ( outfile , [string] ) as f : [EOL] f . write ( o . encode ( [string] ) ) [EOL] [EOL] def writeOverview ( self , destDir , errorOut = sys . stderr , addTests = [ ] ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] data = self . extraData . copy ( ) [EOL] data [ [string] ] = self . suite . title [EOL] data [ [string] ] = self . suite . name [EOL] data [ [string] ] = self . suite . specroot [EOL] data [ [string] ] = self . suite . draftroot [EOL] data [ [string] ] = self . contributors [EOL] data [ [string] ] = self . alltests [EOL] data [ [string] ] = ExtensionMap ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] data [ [string] ] = self . suite . formats [EOL] data [ [string] ] = addTests [EOL] data [ [string] ] = self . suites [EOL] data [ [string] ] = self . flags [EOL] data [ [string] ] = { [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : False , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] } } [EOL] [EOL] [comment] [EOL] for tmplDir in reversed ( self . templatePath ) : [EOL] files = listfiles ( tmplDir ) [EOL] for file in files : [EOL] if self . overviewCopyExtPat . match ( file ) : [EOL] shutil . copy ( join ( tmplDir , file ) , join ( destDir , file ) ) [EOL] [EOL] [comment] [EOL] for tmpl in self . overviewTmplNames : [EOL] out = tmpl [ [number] : - [number] ] if tmpl . endswith ( [string] ) else tmpl [EOL] self . __writeTemplate ( tmpl , data , join ( destDir , out ) ) [EOL] [EOL] [comment] [EOL] if ( self . errors ) : [EOL] if type ( errorOut ) is type ( ( [string] , [string] ) ) : [EOL] data [ [string] ] = errors [EOL] self . __writeTemplate ( errorOut [ [number] ] , data , join ( destDir , errorOut [ [number] ] ) ) [EOL] else : [EOL] sys . stdout . flush ( ) [EOL] for errorLocation in self . errors : [EOL] print >> errorOut , [string] % ( errorLocation , [string] . join ( [ str ( error ) for error in self . errors [ errorLocation ] ] ) ) [EOL] [EOL] def writeIndex ( self , format ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] data = self . extraData . copy ( ) [EOL] data [ [string] ] = self . suite . title [EOL] data [ [string] ] = self . suite . name [EOL] data [ [string] ] = self . suite . specroot [EOL] data [ [string] ] = self . suite . draftroot [EOL] [EOL] data [ [string] ] = format . indexExt [EOL] data [ [string] ] = format . indexExt . startswith ( [string] ) [EOL] data [ [string] ] = format . formatDirName [EOL] data [ [string] ] = format . extMap [EOL] data [ [string] ] = self . alltests [EOL] data [ [string] ] = self . suites [EOL] data [ [string] ] = self . flags [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] self . __writeTemplate ( [string] , data , format . dest ( [string] % format . indexExt ) ) [EOL] self . __writeTemplate ( [string] , data , format . dest ( [string] ) ) [EOL] [EOL] [comment] [EOL] sectionlist = sorted ( self . sections . values ( ) ) [EOL] if self . splitChapter : [EOL] [comment] [EOL] chapters = [ ] [EOL] lastChapNum = [string] [comment] [EOL] chap = None [EOL] for section in sectionlist : [EOL] if ( section . title and ( section . chapterNum ( ) != lastChapNum ) ) : [EOL] lastChapNum = section . chapterNum ( ) [EOL] chap = section [EOL] chap . sections = [ ] [EOL] chap . testcount = [number] [EOL] chap . testnames = set ( ) [EOL] chapters . append ( chap ) [EOL] chap . testnames . update ( [ test [ [string] ] for test in section . tests ] ) [EOL] chap . testcount = len ( chap . testnames ) [EOL] chap . sections . append ( section ) [EOL] [EOL] [comment] [EOL] data [ [string] ] = chapters [EOL] self . __writeTemplate ( [string] , data , format . dest ( [string] % format . indexExt ) ) [EOL] del data [ [string] ] [EOL] [EOL] [comment] [EOL] for chap in chapters : [EOL] data [ [string] ] = chap . title [EOL] data [ [string] ] = chap . testcount [EOL] data [ [string] ] = chap . sections [EOL] self . __writeTemplate ( [string] , data , format . dest ( [string] % ( chap . numstr , format . indexExt ) ) ) [EOL] [EOL] else : [comment] [EOL] data [ [string] ] = sectionlist [EOL] self . __writeTemplate ( [string] , data , format . dest ( [string] % format . indexExt ) ) [EOL] del data [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[EOL] [EOL] from typing import List [EOL] import typing [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] ]	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from distutils . core import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , author_email = [string] , url = [string] , packages = [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] __all__ = [ [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] __all__ = [ [string] , [string] ] [EOL] [EOL] import apiclient [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] + request . GET . first ( [string] ) ) [EOL] response . content = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from six import int2byte [EOL] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] + request . GET . first ( [string] ) ) [EOL] response . content = [string] . join ( int2byte ( byte ) for byte in range ( [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return ( [ ( [string] , [string] ) ] , [string] % request . GET [ [string] ] ) [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] key = request . GET [ [string] ] [EOL] already_requested = request . server . stash . take ( key ) [EOL] [EOL] header = [ ( [string] , [string] ) ] [EOL] initial_script = [string] . format ( isomorphic_decode ( key ) ) [EOL] updated_script = [string] [EOL] [EOL] if already_requested is None : [EOL] request . server . stash . put ( key , True ) [EOL] return header , initial_script [EOL] [EOL] return header , updated_script [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL] [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . write_status_headers ( ) [EOL] [EOL] time . sleep ( [number] ) [EOL] response . explicit_flush = True [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] script = [string] [EOL] [EOL] [EOL] def main ( request , response ) : [EOL] return [ ( [string] , [string] ) ] , script % time . time ( ) [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] import random [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [comment] [EOL] body = [string] . strip ( ) % ( random . random ( ) ) [EOL] return headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import time [EOL] [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , isomorphic_encode ( time . strftime ( [string] , time . gmtime ( ) ) ) ) ] [EOL] [EOL] body = [string] . format ( time = time . time ( ) ) [EOL] [EOL] return headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ] [EOL] [EOL] if [string] in request . GET : [EOL] for item in request . GET [ [string] ] . split ( [string] ) : [EOL] headers . append ( ( [string] , item ) ) [EOL] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( req , res ) : [EOL] return ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , [string] % req . GET [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] [comment] [EOL] mode = [string] [EOL] if [string] in request . cookies : [EOL] mode = request . cookies [ [string] ] . value [EOL] [EOL] [comment] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] extra_body = [string] [EOL] [EOL] if mode == [string] : [EOL] [comment] [EOL] [comment] [EOL] response . set_cookie ( [string] , [string] ) [EOL] extra_body = [string] [EOL] elif mode == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] response . delete_cookie ( [string] ) [EOL] [EOL] headers . append ( ( [string] , [string] ) ) [EOL] return headers , [string] % (extra_body) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import time [EOL] import json [EOL] [EOL] from wptserve . utils import isomorphic_decode , isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , isomorphic_encode ( time . strftime ( [string] , time . gmtime ( ) ) ) ) ] [EOL] [EOL] test = request . GET [ [string] ] [EOL] [EOL] body = [string] . format ( time = time . time ( ) , test = json . dumps ( isomorphic_decode ( test ) ) ) [EOL] [EOL] return headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( req , res ) : [EOL] return ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , [string] % ( req . GET [ [string] ] , req . GET [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] headers = [ ( [string] , request . GET [ [string] ] ) ] [EOL] return [number] , headers , [string] [EOL] [EOL] status = [number] [EOL] [EOL] if [string] in request . GET : [EOL] status = [number] [EOL] [EOL] return status , [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def serve_js_from_file ( request , response , filename ) : [EOL] body = [string] [EOL] path = os . path . join ( os . path . dirname ( isomorphic_encode ( __file__ ) ) , filename ) [EOL] with open ( path , [string] ) as f : [EOL] body = f . read ( ) [EOL] return ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , body ) [EOL] [EOL] def main ( request , response ) : [EOL] key = request . GET [ [string] ] [EOL] [EOL] visited_count = request . server . stash . take ( key ) [EOL] if visited_count is None : [EOL] visited_count = [number] [EOL] [EOL] [comment] [EOL] visited_count += [number] [EOL] request . server . stash . put ( key , visited_count ) [EOL] [EOL] [comment] [EOL] if visited_count == [number] : [EOL] return serve_js_from_file ( request , response , request . GET [ [string] ] ) [EOL] if visited_count == [number] : [EOL] return serve_js_from_file ( request , response , request . GET [ [string] ] ) [EOL] raise [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] def main ( req , res ) : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ] [EOL] [comment] [EOL] headers . append ( ( [string] , [string] ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return [ ( [string] , request . GET [ [string] ] ) ] , [string] [EOL] return [ ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL] [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from six . moves . urllib . parse import unquote [EOL] [EOL] from wptserve . utils import isomorphic_decode , isomorphic_encode [EOL] [EOL] def redirect_response ( request , response , visited_count ) : [EOL] [comment] [EOL] [comment] [EOL] location = [string] [EOL] if [string] in request . GET : [EOL] location = isomorphic_encode ( unquote ( isomorphic_decode ( request . GET [ [string] ] ) ) ) [EOL] return ( [number] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , location ) , ] , [string] % str ( visited_count ) ) [EOL] [EOL] def not_found_response ( ) : [EOL] return [number] , [ ( [string] , [string] ) ] , [string] [EOL] [EOL] def ok_response ( request , response , visited_count , extra_body = [string] , mime_type = [string] ) : [EOL] [comment] [EOL] [comment] [EOL] return ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , mime_type ) ] , [string] % ( str ( visited_count ) , extra_body ) ) [EOL] [EOL] def main ( request , response ) : [EOL] key = request . GET [ [string] ] [EOL] mode = request . GET [ [string] ] [EOL] [EOL] visited_count = request . server . stash . take ( key ) [EOL] if visited_count is None : [EOL] visited_count = [number] [EOL] [EOL] [comment] [EOL] visited_count += [number] [EOL] request . server . stash . put ( key , visited_count ) [EOL] [EOL] [comment] [EOL] if visited_count == [number] : [EOL] if mode == [string] : [EOL] return ok_response ( request , response , visited_count ) [EOL] if mode == [string] : [EOL] return ok_response ( request , response , visited_count , mime_type = [string] ) [EOL] if mode == [string] : [EOL] return not_found_response ( ) [EOL] if mode == [string] : [EOL] return redirect_response ( request , response , visited_count ) [EOL] if mode == [string] : [EOL] return ok_response ( request , response , visited_count , extra_body = [string] ) [EOL] if mode == [string] : [EOL] return ok_response ( request , response , visited_count , extra_body = [string] ) [EOL] [EOL] return ok_response ( request , response , visited_count ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL] [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Union , Type [EOL] import typing [EOL] import zlib [EOL] [EOL] def main ( request , response ) : [EOL] type = request . GET . first ( [string] ) [EOL] [EOL] if type == [string] : [EOL] content = [string] [EOL] output = zlib . compress ( content , [number] ) [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , len ( content ) ) , ( [string] , len ( output ) ) , ( [string] , len ( output ) ) ] [EOL] return headers , output [EOL] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return [ ( [string] , [string] ) ] , [string] [EOL] type = request . GET . first ( [string] ) [EOL] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL] if type == [string] : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL] response . headers . append ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] use_broken_body = [string] in request . GET [EOL] [EOL] response . add_required_headers = False [EOL] response . writer . write_status ( [number] ) [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . end_headers ( ) [EOL] [EOL] for idx in range ( [number] ) : [EOL] if use_broken_body : [EOL] response . writer . write ( [string] % ( len ( str ( idx ) ) , idx ) ) [EOL] else : [EOL] response . writer . write ( [string] % ( len ( str ( idx ) ) , idx ) ) [EOL] response . writer . flush ( ) [EOL] time . sleep ( [number] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] import os [EOL] import time [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] with open ( os . path . join ( os . path . dirname ( isomorphic_decode ( __file__ ) ) , [string] ) , [string] ) as file : [EOL] script = file . read ( ) [EOL] [comment] [EOL] return headers , [string] % ( time . time ( ) , script ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return int ( request . GET [ [string] ] ) , [ ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] url = [string] [EOL] if [string] in request . GET : [EOL] url = request . GET [ [string] ] [EOL] return [number] , [ ( [string] , url ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] [docstring] [EOL] [EOL] if [string] in request . headers : [EOL] result = [string] [EOL] else : [EOL] result = [string] [EOL] [EOL] content = [string] % (result) [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] return [number] , headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . add_required_headers = False [EOL] output = [string] [EOL] output += [string] [EOL] output += [string] [EOL] output += [string] [EOL] output += request . GET . first ( [string] ) + [string] [EOL] output += [string] [EOL] response . writer . write ( output ) [EOL] response . close_connection = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] token = request . GET . first ( [string] ) [EOL] if request . server . stash . remove ( token ) is not None : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] token = request . GET . first ( [string] , None ) [EOL] is_query = request . GET . first ( [string] , None ) is not None [EOL] with request . server . stash . lock : [EOL] value = request . server . stash . take ( token ) [EOL] count = [number] [EOL] if value is not None : [EOL] count = int ( value ) [EOL] if is_query : [EOL] request . server . stash . put ( token , count ) [EOL] else : [EOL] count += [number] [EOL] request . server . stash . put ( token , count ) [EOL] [EOL] headers = [ ] [EOL] if is_query : [EOL] headers = [ ( [string] , count ) ] [EOL] return ( [number] , headers , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] key = request . GET . first ( [string] ) [EOL] [EOL] if request . method == [string] : [EOL] request . server . stash . put ( key , request . body ) [EOL] return [string] [EOL] else : [EOL] value = request . server . stash . take ( key ) [EOL] assert request . server . stash . take ( key ) is None [EOL] return value	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . status = [number] [EOL] response . headers . append ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] def main ( request , response ) : [EOL] return [string] if request . GET . first ( [string] ) . decode ( [string] ) == [string] else [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , request . GET [ [string] ] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] referrer = request . headers . get ( [string] , [string] ) [EOL] [EOL] response_headers = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] return ( [number] , response_headers , [string] + referrer + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return ( [number] , [string] ) , [ ( [string] , [string] ) ] , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
pytest_plugins = [string] [EOL]	$builtins.str$ 0 0 0
import pytest [EOL] [EOL] [comment] [EOL] pytest . register_assert_rewrite ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
def element_dimensions ( session , element ) : [EOL] return tuple ( session . execute_script ( [string] , args = ( element , ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . support . asserts import assert_success [EOL] from tests . support . image import png_dimensions [EOL] from tests . support . inline import iframe , inline [EOL] [EOL] from . import element_dimensions [EOL] [EOL] DEFAULT_CONTENT = [string] [EOL] [EOL] REFERENCE_CONTENT = [string] . format ( DEFAULT_CONTENT ) [EOL] REFERENCE_STYLE = [string] [EOL] [EOL] OUTER_IFRAME_STYLE = [string] [EOL] [EOL] INNER_IFRAME_STYLE = [string] [EOL] [EOL] [EOL] def take_element_screenshot ( session , element_id ) : [EOL] return session . transport . send ( [string] , [string] . format ( session_id = session . session_id , element_id = element_id , ) ) [EOL] [EOL] [EOL] def test_frame_element ( session ) : [EOL] [comment] [EOL] session . url = inline ( [string] . format ( REFERENCE_STYLE , REFERENCE_CONTENT ) ) [EOL] [EOL] [comment] [EOL] ref_el = session . find . css ( [string] , all = False ) [EOL] ref_screenshot = ref_el . screenshot ( ) [EOL] ref_dimensions = element_dimensions ( session , ref_el ) [EOL] [EOL] assert png_dimensions ( ref_screenshot ) == ref_dimensions [EOL] [EOL] [comment] [EOL] iframe_content = [string] . format ( INNER_IFRAME_STYLE , DEFAULT_CONTENT ) [EOL] session . url = inline ( [string] . format ( OUTER_IFRAME_STYLE , iframe ( iframe_content ) ) ) [EOL] [EOL] frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame ) [EOL] div = session . find . css ( [string] , all = False ) [EOL] div_dimensions = element_dimensions ( session , div ) [EOL] assert div_dimensions == ref_dimensions [EOL] [EOL] response = take_element_screenshot ( session , div . id ) [EOL] div_screenshot = assert_success ( response ) [EOL] [EOL] assert png_dimensions ( div_screenshot ) == ref_dimensions [EOL] assert div_screenshot == ref_screenshot [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] , ids = [ [string] , [string] ] ) def test_source_origin ( session , url , domain ) : [EOL] [comment] [EOL] session . url = inline ( [string] . format ( REFERENCE_STYLE , REFERENCE_CONTENT ) ) [EOL] [EOL] div = session . find . css ( [string] , all = False ) [EOL] div_dimensions = element_dimensions ( session , div ) [EOL] [EOL] response = take_element_screenshot ( session , div . id ) [EOL] reference_screenshot = assert_success ( response ) [EOL] assert png_dimensions ( reference_screenshot ) == div_dimensions [EOL] [EOL] iframe_content = [string] . format ( INNER_IFRAME_STYLE , DEFAULT_CONTENT ) [EOL] session . url = inline ( [string] . format ( OUTER_IFRAME_STYLE , iframe ( iframe_content , domain = domain ) ) ) [EOL] [EOL] frame_element = session . find . css ( [string] , all = False ) [EOL] frame_dimensions = element_dimensions ( session , frame_element ) [EOL] [EOL] response = take_element_screenshot ( session , frame_element . id ) [EOL] screenshot = assert_success ( response ) [EOL] assert png_dimensions ( screenshot ) == frame_dimensions [EOL] [EOL] assert screenshot == reference_screenshot [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def create_files ( tmpdir_factory ) : [EOL] def inner ( filenames ) : [EOL] filelist = [ ] [EOL] tmpdir = tmpdir_factory . mktemp ( [string] ) [EOL] for filename in filenames : [EOL] fh = tmpdir . join ( filename ) [EOL] fh . write ( filename ) [EOL] filelist . append ( fh ) [EOL] [EOL] return filelist [EOL] [EOL] inner . __name__ = [string] [EOL] return inner [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def map_files_to_multiline_text ( files ) : [EOL] return [string] . join ( map ( lambda f : str ( f ) , files ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . support . inline import inline [EOL] [EOL] [EOL] def test_sets_insertion_point_to_end ( session ) : [EOL] session . url = inline ( [string] ) [EOL] input = session . find . css ( [string] , all = False ) [EOL] input . send_keys ( [string] ) [EOL] text = session . execute_script ( [string] , args = [ input ] ) [EOL] assert [string] == text . strip ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_sets_insertion_point_to_after_last_text_node ( session ) : [EOL] session . url = inline ( [string] ) [EOL] input = session . find . css ( [string] , all = False ) [EOL] input . send_keys ( [string] ) [EOL] text = session . execute_script ( [string] , args = [ input ] ) [EOL] assert [string] == text . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . support . asserts import assert_success [EOL] from tests . support . inline import iframe , inline [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] frame_doc = inline ( [string] ) [EOL] one_frame_doc = inline ( [string] % frame_doc ) [EOL] nested_frames_doc = inline ( [string] % one_frame_doc ) [EOL] [EOL] [EOL] def get_current_url ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_iframe ( session ) : [EOL] top_level_doc = one_frame_doc [EOL] session . url = top_level_doc [EOL] [EOL] frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_current_url ( session ) [EOL] assert_success ( response , top_level_doc ) [EOL] [EOL] [EOL] def test_nested_iframe ( session ) : [EOL] session . url = nested_frames_doc [EOL] top_level_doc = session . url [EOL] [EOL] outer_frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( outer_frame ) [EOL] [EOL] inner_frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( inner_frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_current_url ( session ) [EOL] assert_success ( response , top_level_doc ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] , ids = [ [string] , [string] ] ) def test_origin ( session , domain , url ) : [EOL] top_level_doc = inline ( iframe ( [string] , domain = domain ) ) [EOL] [EOL] session . url = top_level_doc [EOL] frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_current_url ( session ) [EOL] assert_success ( response , top_level_doc ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . support . asserts import assert_success [EOL] [EOL] [EOL] def set_timeouts ( session , timeouts ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , timeouts ) [EOL] [EOL] [EOL] @ pytest . fixture def check_user_prompt_not_closed ( session , create_dialog ) : [EOL] def check_user_prompt_not_closed ( dialog_type ) : [EOL] create_dialog ( dialog_type , text = dialog_type ) [EOL] [EOL] response = set_timeouts ( session , { [string] : [number] } ) [EOL] assert_success ( response ) [EOL] [EOL] assert session . alert . text == dialog_type [EOL] session . alert . dismiss ( ) [EOL] [EOL] assert session . timeouts . script == [number] [EOL] [EOL] return check_user_prompt_not_closed [EOL] [EOL] [EOL] @ pytest . mark . capabilities ( { [string] : [string] } ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_accept ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL] [EOL] [EOL] @ pytest . mark . capabilities ( { [string] : [string] } ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_accept_and_notify ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL] [EOL] [EOL] @ pytest . mark . capabilities ( { [string] : [string] } ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_dismiss ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL] [EOL] [EOL] @ pytest . mark . capabilities ( { [string] : [string] } ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_dismiss_and_notify ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL] [EOL] [EOL] @ pytest . mark . capabilities ( { [string] : [string] } ) @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_ignore ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_default ( check_user_prompt_not_closed , dialog_type ) : [EOL] check_user_prompt_not_closed ( dialog_type ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from webdriver import StaleElementReferenceException [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . inline import inline , iframe [EOL] [EOL] [EOL] def switch_to_parent_frame ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_null_response_value ( session ) : [EOL] session . url = inline ( iframe ( [string] ) ) [EOL] frame_element = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame_element ) [EOL] [EOL] response = switch_to_parent_frame ( session ) [EOL] value = assert_success ( response ) [EOL] assert value is None [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = switch_to_parent_frame ( session ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_stale_element_from_iframe ( session ) : [EOL] session . url = inline ( iframe ( [string] ) ) [EOL] frame_element = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame_element ) [EOL] stale_element = session . find . css ( [string] , all = False ) [EOL] [EOL] result = switch_to_parent_frame ( session ) [EOL] assert_success ( result ) [EOL] [EOL] with pytest . raises ( StaleElementReferenceException ) : [EOL] stale_element . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] from six import text_type [EOL] [EOL] from tests . support . asserts import assert_success [EOL] [EOL] [EOL] def get_status ( session ) : [EOL] return session . transport . send ( [string] , [string] ) [EOL] [EOL] [EOL] def test_get_status_no_session ( http ) : [EOL] with http . get ( [string] ) as response : [EOL] [comment] [EOL] assert response . status == [number] [EOL] [EOL] parsed_obj = json . loads ( response . read ( ) . decode ( [string] ) ) [EOL] value = parsed_obj [ [string] ] [EOL] [EOL] assert value [ [string] ] in [ True , False ] [EOL] assert isinstance ( value [ [string] ] , text_type ) [EOL] [EOL] [EOL] def test_status_with_session_running_on_endpoint_node ( session ) : [EOL] response = get_status ( session ) [EOL] value = assert_success ( response ) [EOL] assert value [ [string] ] is False [EOL] assert [string] in value [EOL] [EOL] session . end ( ) [EOL] [EOL] response = get_status ( session ) [EOL] value = assert_success ( response ) [EOL] assert value [ [string] ] is True [EOL] assert [string] in value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
def opener ( session ) : [EOL] return session . execute_script ( [string] ) [EOL] [EOL] [EOL] def window_name ( session ) : [EOL] return session . execute_script ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from tests . support . asserts import assert_error , assert_png , assert_success [EOL] from tests . support . image import png_dimensions [EOL] from tests . support . inline import inline [EOL] [EOL] from . import viewport_dimensions [EOL] [EOL] [EOL] def take_screenshot ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = take_screenshot ( session ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_format_and_dimensions ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = take_screenshot ( session ) [EOL] value = assert_success ( response ) [EOL] [EOL] assert_png ( value ) [EOL] assert png_dimensions ( value ) == viewport_dimensions ( session ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def element_dimensions ( session , element ) : [EOL] return tuple ( session . execute_script ( [string] , args = ( element , ) ) ) [EOL] [EOL] [EOL] def viewport_dimensions ( session ) : [EOL] return tuple ( session . execute_script ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import base64 [EOL] [EOL] import pytest [EOL] [EOL] from six import ensure_binary [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . inline import inline [EOL] [EOL] [EOL] def do_print ( session , options ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , options ) [EOL] [EOL] [EOL] def assert_pdf ( data ) : [EOL] assert data . startswith ( [string] ) , [string] [EOL] assert data . endswith ( [string] ) , [string] [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = do_print ( session , { } ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_html_document ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = do_print ( session , { [string] : { [string] : [number] , [string] : [number] } , [string] : False } ) [EOL] value = assert_success ( response ) [EOL] pdf = base64 . decodestring ( ensure_binary ( value ) ) [EOL] [comment] [EOL] assert_pdf ( pdf ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { [string] : [number] } , { [string] : [string] } , { [string] : [string] } , { [string] : [number] } , { [string] : [number] } , { [string] : { [string] : [string] } } , { [string] : { [string] : - [number] } } , { [string] : { [string] : False } } , { [string] : [string] } ] ) def test_invalid ( session , options ) : [EOL] response = do_print ( session , options ) [EOL] assert_error ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from typing import Any , List , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . perform_actions . support . keys import Keys [EOL] from tests . perform_actions . support . refine import filter_dict , get_events [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( Keys . ALT , [string] ) , ( Keys . R_ALT , [string] ) , ( Keys . META , [string] ) , ( Keys . R_META , [string] ) , ( Keys . SHIFT , [string] ) , ( Keys . R_SHIFT , [string] ) , ] ) def test_modifier_click ( session , test_actions_page , key_chain , mouse_chain , modifier , prop ) : [EOL] key_chain . pause ( [number] ) . key_down ( modifier ) . pause ( [number] ) . key_up ( modifier ) [EOL] outer = session . find . css ( [string] , all = False ) [EOL] mouse_chain . click ( element = outer ) [EOL] session . actions . perform ( [ key_chain . dict , mouse_chain . dict ] ) [EOL] expected = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] defaults = { [string] : False , [string] : False , [string] : False , [string] : False } [EOL] for e in expected : [EOL] e . update ( defaults ) [EOL] if e [ [string] ] != [string] : [EOL] e [ prop ] = True [EOL] filtered_events = [ filter_dict ( e , expected [ [number] ] ) for e in get_events ( session ) ] [EOL] assert expected == filtered_events [EOL] [EOL] [EOL] def test_many_modifiers_click ( session , test_actions_page , key_chain , mouse_chain ) : [EOL] outer = session . find . css ( [string] , all = False ) [EOL] dblclick_timeout = [number] [EOL] key_chain . pause ( [number] ) . key_down ( Keys . ALT ) . key_down ( Keys . SHIFT ) . pause ( dblclick_timeout ) . key_up ( Keys . ALT ) . key_up ( Keys . SHIFT ) [EOL] mouse_chain . pointer_move ( [number] , [number] , origin = outer ) . pause ( [number] ) . pointer_down ( ) . pointer_up ( ) . pause ( [number] ) . pause ( [number] ) . pointer_down ( ) [EOL] session . actions . perform ( [ key_chain . dict , mouse_chain . dict ] ) [EOL] expected = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] defaults = { [string] : False , [string] : False , [string] : False , [string] : False } [EOL] for e in expected : [EOL] e . update ( defaults ) [EOL] for e in expected [ [number] : [number] ] : [EOL] e [ [string] ] = True [EOL] e [ [string] ] = True [EOL] events = [ filter_dict ( e , expected [ [number] ] ) for e in get_events ( session ) ] [EOL] assert events == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . perform_actions . support . keys import Keys [EOL] from tests . perform_actions . support . refine import filter_dict , get_events [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( Keys . CONTROL , [string] ) , ( Keys . R_CONTROL , [string] ) , ] ) def test_control_click ( session , test_actions_page , key_chain , mouse_chain , modifier , prop ) : [EOL] os = session . capabilities [ [string] ] [EOL] key_chain . pause ( [number] ) . key_down ( modifier ) . pause ( [number] ) . key_up ( modifier ) [EOL] outer = session . find . css ( [string] , all = False ) [EOL] mouse_chain . click ( element = outer ) [EOL] session . actions . perform ( [ key_chain . dict , mouse_chain . dict ] ) [EOL] if os != [string] : [EOL] expected = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] else : [EOL] expected = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] defaults = { [string] : False , [string] : False , [string] : False , [string] : False } [EOL] for e in expected : [EOL] e . update ( defaults ) [EOL] if e [ [string] ] != [string] : [EOL] e [ prop ] = True [EOL] filtered_events = [ filter_dict ( e , expected [ [number] ] ) for e in get_events ( session ) ] [EOL] assert expected == filtered_events [EOL] [EOL] [EOL] def test_release_control_click ( session , key_reporter , key_chain , mouse_chain ) : [EOL] [comment] [EOL] [comment] [EOL] session . execute_script ( [string] ) [EOL] key_chain . pause ( [number] ) . key_down ( Keys . CONTROL ) [EOL] mouse_chain . pointer_move ( [number] , [number] , origin = key_reporter ) . pointer_down ( ) [EOL] session . actions . perform ( [ key_chain . dict , mouse_chain . dict ] ) [EOL] session . execute_script ( [string] ) [EOL] session . actions . release ( ) [EOL] expected = [ { [string] : [string] } , { [string] : [string] } , ] [EOL] events = [ filter_dict ( e , expected [ [number] ] ) for e in get_events ( session ) ] [EOL] assert events == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from tests . perform_actions . support . refine import filter_dict , get_events [EOL] from tests . support . asserts import assert_move_to_coordinates [EOL] from tests . support . inline import inline [EOL] [EOL] lots_of_text = [string] [string] [string] [EOL] [EOL] [EOL] def test_tripleclick_at_coordinates ( session , mouse_chain ) : [EOL] [docstring] [EOL] session . url = inline ( [string] . format ( lots_of_text ) ) [EOL] div = session . find . css ( [string] , all = False ) [EOL] div_rect = div . rect [EOL] div_centre = { [string] : div_rect [ [string] ] + int ( div_rect [ [string] ] / [number] ) , [string] : div_rect [ [string] ] + int ( div_rect [ [string] ] / [number] ) } [EOL] mouse_chain . pointer_move ( div_centre [ [string] ] , div_centre [ [string] ] ) . click ( ) . click ( ) . click ( ) . perform ( ) [EOL] [EOL] actual_text = session . execute_script ( [string] ) [EOL] [EOL] assert lots_of_text == actual_text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any , List , Union , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from webdriver . error import NoSuchWindowException [EOL] [EOL] from tests . perform_actions . support . mouse import get_inview_center , get_viewport_rect [EOL] from tests . perform_actions . support . refine import filter_dict , get_events [EOL] from tests . support . asserts import assert_move_to_coordinates [EOL] from tests . support . inline import inline [EOL] from tests . support . sync import Poll [EOL] [EOL] [EOL] def link_doc ( dest ) : [EOL] content = [string] . format ( dest ) [EOL] return inline ( content ) [EOL] [EOL] [EOL] def test_null_response_value ( session , mouse_chain ) : [EOL] value = mouse_chain . click ( ) . perform ( ) [EOL] assert value is None [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window , mouse_chain ) : [EOL] with pytest . raises ( NoSuchWindowException ) : [EOL] mouse_chain . click ( ) . perform ( ) [EOL] [EOL] [EOL] def test_click_at_coordinates ( session , test_actions_page , mouse_chain ) : [EOL] div_point = { [string] : [number] , [string] : [number] , } [EOL] mouse_chain . pointer_move ( div_point [ [string] ] , div_point [ [string] ] , duration = [number] ) . click ( ) . perform ( ) [EOL] events = get_events ( session ) [EOL] assert len ( events ) == [number] [EOL] assert_move_to_coordinates ( div_point , [string] , events ) [EOL] for e in events : [EOL] if e [ [string] ] != [string] : [EOL] assert e [ [string] ] == [number] [EOL] assert e [ [string] ] == [number] [EOL] expected = [ { [string] : [string] , [string] : [number] } , { [string] : [string] , [string] : [number] } , { [string] : [string] , [string] : [number] } , ] [EOL] filtered_events = [ filter_dict ( e , expected [ [number] ] ) for e in events ] [EOL] assert expected == filtered_events [ [number] : ] [EOL] [EOL] [EOL] def test_context_menu_at_coordinates ( session , test_actions_page , mouse_chain ) : [EOL] div_point = { [string] : [number] , [string] : [number] , } [EOL] mouse_chain . pointer_move ( div_point [ [string] ] , div_point [ [string] ] ) . pointer_down ( button = [number] ) . pointer_up ( button = [number] ) . perform ( ) [EOL] events = get_events ( session ) [EOL] expected = [ { [string] : [string] , [string] : [number] } , { [string] : [string] , [string] : [number] } , ] [EOL] assert len ( events ) == [number] [EOL] filtered_events = [ filter_dict ( e , expected [ [number] ] ) for e in events ] [EOL] mousedown_contextmenu_events = [ x for x in filtered_events if x [ [string] ] in [ [string] , [string] ] ] [EOL] assert expected == mousedown_contextmenu_events [EOL] [EOL] [EOL] def test_click_element_center ( session , test_actions_page , mouse_chain ) : [EOL] outer = session . find . css ( [string] , all = False ) [EOL] center = get_inview_center ( outer . rect , get_viewport_rect ( session ) ) [EOL] mouse_chain . click ( element = outer ) . perform ( ) [EOL] events = get_events ( session ) [EOL] assert len ( events ) == [number] [EOL] event_types = [ e [ [string] ] for e in events ] [EOL] assert [ [string] , [string] , [string] , [string] ] == event_types [EOL] for e in events : [EOL] if e [ [string] ] != [string] : [EOL] assert e [ [string] ] == pytest . approx ( center [ [string] ] , abs = [number] ) [EOL] assert e [ [string] ] == pytest . approx ( center [ [string] ] , abs = [number] ) [EOL] assert e [ [string] ] == [string] [EOL] [EOL] [EOL] def test_click_navigation ( session , url ) : [EOL] destination = url ( [string] ) [EOL] start = link_doc ( destination ) [EOL] [EOL] def click ( link ) : [EOL] mouse_chain = session . actions . sequence ( [string] , [string] , { [string] : [string] } ) [EOL] mouse_chain . click ( element = link ) . perform ( ) [EOL] [EOL] session . url = start [EOL] error_message = [string] % destination [EOL] [EOL] click ( session . find . css ( [string] , all = False ) ) [EOL] Poll ( session , message = error_message ) . until ( lambda s : s . url == destination ) [EOL] [comment] [EOL] session . url = start [EOL] click ( session . find . css ( [string] , all = False ) ) [EOL] Poll ( session , message = error_message ) . until ( lambda s : s . url == destination ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( - [number] , [number] ) , ( [number] , - [number] ) , ( - [number] , - [number] ) ] ) def test_drag_and_drop ( session , test_actions_page , mouse_chain , dx , dy , drag_duration ) : [EOL] drag_target = session . find . css ( [string] , all = False ) [EOL] initial_rect = drag_target . rect [EOL] initial_center = get_inview_center ( initial_rect , get_viewport_rect ( session ) ) [EOL] [comment] [EOL] [comment] [EOL] mouse_chain . pointer_move ( [number] , [number] , origin = drag_target ) . pointer_down ( ) . pointer_move ( dx , dy , duration = drag_duration , origin = [string] ) . pointer_up ( ) . pointer_move ( [number] , [number] , duration = [number] , origin = [string] ) . perform ( ) [EOL] [comment] [EOL] e = get_events ( session ) [ [number] ] [EOL] assert e [ [string] ] == [string] [EOL] assert e [ [string] ] == pytest . approx ( initial_center [ [string] ] + dx , abs = [number] ) [EOL] assert e [ [string] ] == pytest . approx ( initial_center [ [string] ] + dy , abs = [number] ) [EOL] [comment] [EOL] final_rect = drag_target . rect [EOL] assert initial_rect [ [string] ] + dx == final_rect [ [string] ] [EOL] assert initial_rect [ [string] ] + dy == final_rect [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] ] ) def test_drag_and_drop_with_draggable_element ( session_new_window , test_actions_page , mouse_chain , drag_duration ) : [EOL] new_session = session_new_window [EOL] drag_target = new_session . find . css ( [string] , all = False ) [EOL] drop_target = new_session . find . css ( [string] , all = False ) [EOL] [comment] [EOL] [comment] [EOL] mouse_chain . pointer_move ( [number] , [number] , origin = drag_target ) . pointer_down ( ) . pointer_move ( [number] , [number] , duration = drag_duration , origin = drop_target ) . pointer_up ( ) . pointer_move ( [number] , [number] , duration = [number] , origin = [string] ) . perform ( ) [EOL] [comment] [EOL] e = get_events ( new_session ) [EOL] assert len ( e ) >= [number] [EOL] assert e [ [number] ] [ [string] ] == [string] , [string] . format ( e ) [EOL] assert e [ [number] ] [ [string] ] == [string] , [string] . format ( e ) [EOL] drag_events_captured = [ ev [ [string] ] for ev in e if ev [ [string] ] . startswith ( [string] ) or ev [ [string] ] . startswith ( [string] ) ] [EOL] assert [string] in drag_events_captured [EOL] assert [string] in drag_events_captured [EOL] assert [string] in drag_events_captured [EOL] assert [string] in drag_events_captured [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from tests . perform_actions . support . refine import get_events , get_keys [EOL] [EOL] [EOL] def test_perform_no_actions_send_no_events ( session , key_reporter , key_chain ) : [EOL] key_chain . perform ( ) [EOL] assert len ( get_keys ( key_reporter ) ) == [number] [EOL] assert len ( get_events ( session ) ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from webdriver . error import NoSuchWindowException [EOL] [EOL] [EOL] @ pytest . fixture def session_new_window ( capabilities , session ) : [EOL] [comment] [EOL] original_handle = session . window_handle [EOL] session . window_handle = session . new_window ( ) [EOL] [EOL] yield session [EOL] [EOL] try : [EOL] session . window . close ( ) [EOL] except NoSuchWindowException : [EOL] pass [EOL] [EOL] session . window_handle = original_handle [EOL] [EOL] @ pytest . fixture def key_chain ( session ) : [EOL] return session . actions . sequence ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def mouse_chain ( session ) : [EOL] return session . actions . sequence ( [string] , [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] @ pytest . fixture def none_chain ( session ) : [EOL] return session . actions . sequence ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def release_actions ( session , request ) : [EOL] [comment] [EOL] [comment] [EOL] request . addfinalizer ( session . actions . release ) [EOL] [EOL] [EOL] @ pytest . fixture def key_reporter ( session , test_actions_page , request ) : [EOL] [docstring] [EOL] input_el = session . find . css ( [string] , all = False ) [EOL] input_el . click ( ) [EOL] session . execute_script ( [string] ) [EOL] return input_el [EOL] [EOL] [EOL] @ pytest . fixture def test_actions_page ( session , url ) : [EOL] session . url = url ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
import pytest [EOL] [EOL] from webdriver . error import NoSuchAlertException , NoSuchWindowException [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_session ( capabilities , session ) : [EOL] [docstring] [EOL] original_handle = session . window_handle [EOL] session . window_handle = session . new_window ( ) [EOL] [EOL] yield session [EOL] [EOL] try : [EOL] session . alert . dismiss ( ) [EOL] except NoSuchAlertException : [EOL] pass [EOL] [EOL] try : [EOL] session . window . close ( ) [EOL] except NoSuchWindowException : [EOL] pass [EOL] [EOL] session . window_handle = original_handle [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] from tests . support . asserts import assert_error , assert_is_active_element , assert_success [EOL] from tests . support . inline import inline [EOL] [EOL] [EOL] def read_global ( session , name ) : [EOL] return session . execute_script ( [string] % name ) [EOL] [EOL] [EOL] def get_active_element ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = get_active_element ( session ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_success_document ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] [EOL] def test_sucess_input ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] [EOL] def test_sucess_input_non_interactable ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] [EOL] def test_success_explicit_focus ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] session . execute_script ( [string] ) [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] session . execute_script ( [string] ) [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] session . execute_script ( [string] ) [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] session . execute_script ( [string] ) [EOL] session . execute_script ( [string] ) [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] session . execute_script ( [string] ) [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] [EOL] def test_success_iframe_content ( session ) : [EOL] session . url = inline ( [string] ) [EOL] session . execute_script ( [string] ) [EOL] [EOL] response = get_active_element ( session ) [EOL] element = assert_success ( response ) [EOL] assert_is_active_element ( session , element ) [EOL] [EOL] [EOL] def test_missing_document_element ( session ) : [EOL] session . url = inline ( [string] ) [EOL] session . execute_script ( [string] ) [EOL] [EOL] response = get_active_element ( session ) [EOL] assert_error ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . support . asserts import assert_success [EOL] from tests . support . inline import iframe , inline [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] frame_doc = inline ( [string] ) [EOL] one_frame_doc = inline ( [string] % frame_doc ) [EOL] nested_frames_doc = inline ( [string] % one_frame_doc ) [EOL] [EOL] [EOL] def get_title ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_no_iframe ( session ) : [EOL] session . url = inline ( [string] ) [EOL] [EOL] result = get_title ( session ) [EOL] assert_success ( result , [string] ) [EOL] [EOL] [EOL] def test_iframe ( session ) : [EOL] session . url = one_frame_doc [EOL] [EOL] frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_title ( session ) [EOL] assert_success ( response , [string] ) [EOL] [EOL] [EOL] def test_nested_iframe ( session ) : [EOL] session . url = nested_frames_doc [EOL] [EOL] outer_frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( outer_frame ) [EOL] [EOL] inner_frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( inner_frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_title ( session ) [EOL] assert_success ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] , ids = [ [string] , [string] ] ) def test_origin ( session , domain , url ) : [EOL] session . url = inline ( [string] . format ( iframe ( [string] , domain = domain ) ) ) [EOL] [EOL] frame = session . find . css ( [string] , all = False ) [EOL] session . switch_frame ( frame ) [EOL] session . find . css ( [string] , all = False ) [EOL] [EOL] response = get_title ( session ) [EOL] assert_success ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from datetime import datetime , timedelta [EOL] from six import integer_types , text_type [EOL] [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . helpers import clear_all_cookies [EOL] from tests . support . inline import inline [EOL] [EOL] def get_named_cookie ( session , name ) : [EOL] return session . transport . send ( [string] , [string] . format ( session_id = session . session_id , name = name ) ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = get_named_cookie ( session , [string] ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_get_named_session_cookie ( session , url ) : [EOL] session . url = url ( [string] ) [EOL] clear_all_cookies ( session ) [EOL] session . execute_script ( [string] ) [EOL] [EOL] result = get_named_cookie ( session , [string] ) [EOL] cookie = assert_success ( result ) [EOL] assert isinstance ( cookie , dict ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , bool ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , bool ) [EOL] if [string] in cookie : [EOL] assert cookie . get ( [string] ) is None [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] [EOL] assert cookie [ [string] ] == [string] [EOL] assert cookie [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_named_cookie ( session , url ) : [EOL] session . url = url ( [string] ) [EOL] clear_all_cookies ( session ) [EOL] [EOL] [comment] [EOL] utc_string_format = [string] [EOL] a_day_from_now = ( datetime . utcnow ( ) + timedelta ( days = [number] ) ) . strftime ( utc_string_format ) [EOL] session . execute_script ( [string] % a_day_from_now ) [EOL] [EOL] result = get_named_cookie ( session , [string] ) [EOL] cookie = assert_success ( result ) [EOL] assert isinstance ( cookie , dict ) [EOL] [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , integer_types ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] [EOL] [EOL] assert cookie [ [string] ] == [string] [EOL] assert cookie [ [string] ] == [string] [EOL] [comment] [EOL] assert datetime . utcfromtimestamp ( cookie [ [string] ] ) . strftime ( utc_string_format ) == a_day_from_now [EOL] [EOL] [EOL] def test_duplicated_cookie ( session , url , server_config ) : [EOL] new_cookie = { [string] : [string] , [string] : [string] , [string] : server_config [ [string] ] , [string] : [string] , [string] : False , [string] : False } [EOL] [EOL] session . url = url ( [string] ) [EOL] clear_all_cookies ( session ) [EOL] [EOL] session . set_cookie ( ** new_cookie ) [EOL] session . url = inline ( [string] . format ( name = new_cookie [ [string] ] , domain = server_config [ [string] ] ) ) [EOL] [EOL] result = get_named_cookie ( session , new_cookie [ [string] ] ) [EOL] cookie = assert_success ( result ) [EOL] assert isinstance ( cookie , dict ) [EOL] [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] [EOL] assert cookie [ [string] ] == new_cookie [ [string] ] [EOL] assert cookie [ [string] ] == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) @ pytest . mark . capabilities ( { [string] : True } ) def test_get_cookie_with_same_site_flag ( session , url , same_site ) : [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] clear_all_cookies ( session ) [EOL] [EOL] session . execute_script ( [string] % same_site ) [EOL] [EOL] result = get_named_cookie ( session , [string] ) [EOL] cookie = assert_success ( result ) [EOL] assert isinstance ( cookie , dict ) [EOL] [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] assert [string] in cookie [EOL] assert isinstance ( cookie [ [string] ] , text_type ) [EOL] [EOL] assert cookie [ [string] ] == [string] [EOL] assert cookie [ [string] ] == [string] [EOL] assert cookie [ [string] ] == same_site [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , Dict [EOL] import typing [EOL] import pytest [EOL] [EOL] from webdriver . transport import HTTPWireProtocol [EOL] [EOL] [EOL] def product ( a , b ) : [EOL] return [ ( a , item ) for item in b ] [EOL] [EOL] [EOL] def flatten ( l ) : [EOL] return [ item for x in l for item in x ] [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_add_browser_capabilities ( configuration ) : [EOL] [EOL] def add_browser_capabilities ( capabilities ) : [EOL] [comment] [EOL] assert not set ( configuration [ [string] ] ) . intersection ( set ( capabilities ) ) [EOL] result = dict ( configuration [ [string] ] ) [EOL] result . update ( capabilities ) [EOL] [EOL] return result [EOL] [EOL] return add_browser_capabilities [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_configuration ( configuration ) : [EOL] [docstring] [EOL] [EOL] if [string] in configuration [ [string] ] : [EOL] configuration = dict ( configuration ) [EOL] del configuration [ [string] ] [ [string] ] [EOL] return configuration [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_new_session ( request , configuration , current_session ) : [EOL] [docstring] [EOL] custom_session = { } [EOL] [EOL] transport = HTTPWireProtocol ( configuration [ [string] ] , configuration [ [string] ] , url_prefix = [string] , ) [EOL] [EOL] def _delete_session ( session_id ) : [EOL] transport . send ( [string] , [string] . format ( session_id ) ) [EOL] [EOL] def new_session ( body , delete_existing_session = False ) : [EOL] [comment] [EOL] [comment] [EOL] if current_session is not None : [EOL] current_session . end ( ) [EOL] [EOL] if delete_existing_session : [EOL] _delete_session ( custom_session [ [string] ] [ [string] ] ) [EOL] [EOL] response = transport . send ( [string] , [string] , body ) [EOL] if response . status == [number] : [EOL] custom_session [ [string] ] = response . body [ [string] ] [EOL] return response , custom_session . get ( [string] , None ) [EOL] [EOL] yield new_session [EOL] [EOL] if custom_session . get ( [string] ) is not None : [EOL] _delete_session ( custom_session [ [string] ] [ [string] ] ) [EOL] custom_session = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from webdriver import error [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . inline import inline [EOL] [EOL] [EOL] def close ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = close ( session ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_close_browsing_context ( session ) : [EOL] original_handles = session . handles [EOL] [EOL] new_handle = session . new_window ( ) [EOL] session . window_handle = new_handle [EOL] [EOL] response = close ( session ) [EOL] handles = assert_success ( response , original_handles ) [EOL] assert session . handles == original_handles [EOL] assert new_handle not in handles [EOL] [EOL] [EOL] def test_close_browsing_context_with_dismissed_beforeunload_prompt ( session ) : [EOL] original_handles = session . handles [EOL] [EOL] new_handle = session . new_window ( ) [EOL] session . window_handle = new_handle [EOL] [EOL] session . url = inline ( [string] ) [EOL] [EOL] session . find . css ( [string] , all = False ) . send_keys ( [string] ) [EOL] [EOL] response = close ( session ) [EOL] handles = assert_success ( response , original_handles ) [EOL] assert session . handles == original_handles [EOL] assert new_handle not in handles [EOL] [EOL] [comment] [EOL] with pytest . raises ( error . NoSuchWindowException ) : [EOL] session . alert . text [EOL] [EOL] [EOL] def test_close_last_browsing_context ( session ) : [EOL] assert len ( session . handles ) == [number] [EOL] response = close ( session ) [EOL] [EOL] assert_success ( response , [ ] ) [EOL] [EOL] [comment] [EOL] session . session_id = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import http [EOL] import typing [EOL] import contextlib [EOL] import json [EOL] [EOL] from six import text_type [EOL] [EOL] from six . moves . http_client import HTTPConnection [EOL] [EOL] [EOL] class HTTPRequest ( object ) : [EOL] def __init__ ( self , host , port ) : [EOL] self . host = host [EOL] self . port = port [EOL] [EOL] def head ( self , path ) : [EOL] return self . _request ( [string] , path ) [EOL] [EOL] def get ( self , path ) : [EOL] return self . _request ( [string] , path ) [EOL] [EOL] def post ( self , path , body ) : [EOL] return self . _request ( [string] , path , body ) [EOL] [EOL] @ contextlib . contextmanager def _request ( self , method , path , body = None ) : [EOL] payload = None [EOL] [EOL] if body is not None : [EOL] try : [EOL] payload = json . dumps ( body ) [EOL] except ValueError : [EOL] raise ValueError ( [string] . format ( json . dumps ( body , indent = [number] ) ) ) [EOL] [EOL] if isinstance ( payload , text_type ) : [EOL] payload = body . encode ( [string] ) [EOL] [EOL] conn = HTTPConnection ( self . host , self . port ) [EOL] try : [EOL] conn . request ( method , path , payload ) [EOL] yield conn . getresponse ( ) [EOL] finally : [EOL] conn . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] from __future__ import print_function [EOL] [EOL] import math [EOL] import sys [EOL] [EOL] import webdriver [EOL] [EOL] from tests . support import defaults [EOL] from tests . support . sync import Poll [EOL] [EOL] [EOL] def ignore_exceptions ( f ) : [EOL] def inner ( * args , ** kwargs ) : [EOL] try : [EOL] return f ( * args , ** kwargs ) [EOL] except webdriver . error . WebDriverException as e : [EOL] print ( [string] % e , file = sys . stderr ) [EOL] inner . __name__ = f . __name__ [EOL] return inner [EOL] [EOL] [EOL] def cleanup_session ( session ) : [EOL] [docstring] [EOL] @ ignore_exceptions def _dismiss_user_prompts ( session ) : [EOL] [docstring] [EOL] current_window = session . window_handle [EOL] [EOL] for window in _windows ( session ) : [EOL] session . window_handle = window [EOL] try : [EOL] session . alert . dismiss ( ) [EOL] except webdriver . NoSuchAlertException : [EOL] pass [EOL] [EOL] session . window_handle = current_window [EOL] [EOL] @ ignore_exceptions def _ensure_valid_window ( session ) : [EOL] [docstring] [EOL] try : [EOL] session . window_handle [EOL] except webdriver . NoSuchWindowException : [EOL] session . window_handle = session . handles [ [number] ] [EOL] [EOL] @ ignore_exceptions def _restore_timeouts ( session ) : [EOL] [docstring] [EOL] session . timeouts . implicit = defaults . IMPLICIT_WAIT_TIMEOUT [EOL] session . timeouts . page_load = defaults . PAGE_LOAD_TIMEOUT [EOL] session . timeouts . script = defaults . SCRIPT_TIMEOUT [EOL] [EOL] @ ignore_exceptions def _restore_window_state ( session ) : [EOL] [docstring] [EOL] session . window . size = defaults . WINDOW_SIZE [EOL] [EOL] @ ignore_exceptions def _restore_windows ( session ) : [EOL] [docstring] [EOL] current_window = session . window_handle [EOL] [EOL] for window in _windows ( session , exclude = [ current_window ] ) : [EOL] session . window_handle = window [EOL] if len ( session . handles ) > [number] : [EOL] session . window . close ( ) [EOL] [EOL] session . window_handle = current_window [EOL] [EOL] _restore_timeouts ( session ) [EOL] _ensure_valid_window ( session ) [EOL] _dismiss_user_prompts ( session ) [EOL] _restore_windows ( session ) [EOL] _restore_window_state ( session ) [EOL] _switch_to_top_level_browsing_context ( session ) [EOL] [EOL] [EOL] @ ignore_exceptions def _switch_to_top_level_browsing_context ( session ) : [EOL] [docstring] [EOL] session . switch_frame ( None ) [EOL] [EOL] [EOL] def _windows ( session , exclude = None ) : [EOL] [docstring] [EOL] if exclude is None : [EOL] exclude = [ ] [EOL] wins = [ w for w in session . handles if w not in exclude ] [EOL] return set ( wins ) [EOL] [EOL] [EOL] def clear_all_cookies ( session ) : [EOL] [docstring] [EOL] session . transport . send ( [string] , [string] % session . session_id ) [EOL] [EOL] [EOL] def document_dimensions ( session ) : [EOL] return tuple ( session . execute_script ( [string] ) ) [EOL] [EOL] [EOL] def center_point ( element ) : [EOL] [docstring] [EOL] inner_width , inner_height = element . session . execute_script ( [string] ) [EOL] rect = element . rect [EOL] [EOL] [comment] [EOL] visible = { [string] : max ( [number] , min ( rect [ [string] ] , rect [ [string] ] + rect [ [string] ] ) ) , [string] : min ( inner_width , max ( rect [ [string] ] , rect [ [string] ] + rect [ [string] ] ) ) , [string] : max ( [number] , min ( rect [ [string] ] , rect [ [string] ] + rect [ [string] ] ) ) , [string] : min ( inner_height , max ( rect [ [string] ] , rect [ [string] ] + rect [ [string] ] ) ) , } [EOL] [EOL] [comment] [EOL] x = ( visible [ [string] ] + visible [ [string] ] ) / [number] [EOL] y = ( visible [ [string] ] + visible [ [string] ] ) / [number] [EOL] [EOL] [comment] [EOL] return ( math . floor ( x ) , math . floor ( y ) ) [EOL] [EOL] [EOL] def document_hidden ( session ) : [EOL] [docstring] [EOL] def hidden ( session ) : [EOL] return session . execute_script ( [string] ) [EOL] return Poll ( session , timeout = [number] , raises = None ) . until ( hidden ) [EOL] [EOL] [EOL] def document_location ( session ) : [EOL] [docstring] [EOL] return session . execute_script ( [string] ) [EOL] [EOL] [EOL] def element_rect ( session , element ) : [EOL] return session . execute_script ( [string] , args = ( element , ) ) [EOL] [EOL] [EOL] def is_element_in_viewport ( session , element ) : [EOL] [docstring] [EOL] return session . execute_script ( [string] , args = ( element , ) ) [EOL] [EOL] [EOL] def is_fullscreen ( session ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return session . execute_script ( [string] ) [EOL] [EOL] [EOL] def document_dimensions ( session ) : [EOL] return tuple ( session . execute_script ( [string] ) ) [EOL] [EOL] [EOL] def screen_size ( session ) : [EOL] [docstring] [EOL] return tuple ( session . execute_script ( [string] ) ) [EOL] [EOL] [EOL] def available_screen_size ( session ) : [EOL] [docstring] [EOL] return tuple ( session . execute_script ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] SCRIPT_TIMEOUT = [number] [EOL] PAGE_LOAD_TIMEOUT = [number] [EOL] IMPLICIT_WAIT_TIMEOUT = [number] [EOL] [EOL] WINDOW_POSITION = ( [number] , [number] ) [EOL] WINDOW_SIZE = ( [number] , [number] ) [EOL] [EOL] DRIVER_HOST = [string] [EOL] DRIVER_PORT = [number] [EOL]	0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
from typing import Optional [EOL] import typing [EOL] import sys [EOL] [EOL] from . merge_dictionaries import merge_dictionaries [EOL] [EOL] platform_name = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } . get ( sys . platform ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import base64 [EOL] import math [EOL] import struct [EOL] [EOL] from six import ensure_binary [EOL] [EOL] from tests . support . asserts import assert_png [EOL] [EOL] [EOL] def png_dimensions ( screenshot ) : [EOL] assert_png ( screenshot ) [EOL] image = base64 . decodestring ( ensure_binary ( screenshot ) ) [EOL] width , height = struct . unpack ( [string] , image [ [number] : [number] ] ) [EOL] return int ( width ) , int ( height ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , Dict [EOL] import typing [EOL] from tests . support . asserts import assert_error , assert_success [EOL] import pytest [EOL] [EOL] def query ( session , name ) : [EOL] script = [string] % name [EOL] [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , { [string] : script , [string] : [ ] } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ { [string] : { [string] : [number] } , [string] : [string] } , { [string] : { } , [string] : [string] } , { [string] : { [string] : [string] } , [string] : [string] } , { [string] : [number] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [ { [string] : [string] } ] , [string] : [string] } , [ { [string] : { [string] : [string] } , [string] : [string] } ] , { [string] : { [string] : [string] } , [string] : [string] , [string] : [number] } ] ) @ pytest . mark . capabilities ( { [string] : True } ) def test_invalid_parameters ( session , url , parameters ) : [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] response = session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , parameters ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_non_secure_context ( session , url , state ) : [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] response = session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , { [string] : { [string] : [string] } , [string] : state } ) [EOL] [EOL] assert_error ( response , [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ { [string] : True } , { [string] : False } , { } ] ) @ pytest . mark . capabilities ( { [string] : True } ) def test_set_to_state ( session , url , state , realmSetting ) : [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] parameters = { [string] : { [string] : [string] } , [string] : state } [EOL] parameters . update ( realmSetting ) [EOL] response = session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , parameters ) [EOL] [EOL] try : [EOL] assert_success ( response ) [EOL] except AssertionError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert_error ( response , [string] ) [EOL] return [EOL] [EOL] assert response . body . get ( [string] ) == None [EOL] [EOL] response = query ( session , [string] ) [EOL] [EOL] assert_success ( response ) [EOL] result = response . body . get ( [string] ) [EOL] [EOL] assert isinstance ( result , dict ) [EOL] assert result . get ( [string] ) == [string] [EOL] assert result . get ( [string] ) == state [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) @ pytest . mark . parametrize ( [string] , [ { [string] : False } , { } ] ) @ pytest . mark . capabilities ( { [string] : True } ) def test_set_to_state_cross_realm ( session , url , state , realmSetting ) : [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] original_window = session . window_handle [EOL] session . window_handle = session . new_window ( ) [EOL] session . url = url ( [string] , protocol = [string] ) [EOL] parameters = { [string] : { [string] : [string] } , [string] : state } [EOL] parameters . update ( realmSetting ) [EOL] [EOL] response = session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , parameters ) [EOL] [EOL] try : [EOL] assert_success ( response ) [EOL] except AssertionError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert_error ( response , [string] ) [EOL] return [EOL] [EOL] assert response . body . get ( [string] ) == None [EOL] [EOL] session . window_handle = original_window [EOL] [EOL] response = query ( session , [string] ) [EOL] [EOL] assert_success ( response ) [EOL] result = response . body . get ( [string] ) [EOL] [EOL] assert isinstance ( result , dict ) [EOL] assert result . get ( [string] ) == [string] [EOL] assert result . get ( [string] ) == state [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] import webdriver . protocol as protocol [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . inline import inline , iframe [EOL] [EOL] [EOL] def switch_to_frame ( session , frame ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , { [string] : frame } , encoder = protocol . Encoder , decoder = protocol . Decoder , session = session ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ** [number] ] ) def test_frame_id_number_out_of_bounds ( session , value ) : [EOL] response = switch_to_frame ( session , value ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [number] ] ) def test_frame_id_number_index_out_of_bounds ( session , index ) : [EOL] session . url = inline ( iframe ( [string] ) ) [EOL] [EOL] response = switch_to_frame ( session , index ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [number] , [string] ] , [ [number] , [string] ] ] ) def test_frame_id_number_index ( session , index , value ) : [EOL] session . url = inline ( [string] . format ( iframe ( [string] ) , iframe ( [string] ) ) ) [EOL] [EOL] response = switch_to_frame ( session , index ) [EOL] assert_success ( response ) [EOL] [EOL] element = session . find . css ( [string] , all = False ) [EOL] assert element . text == value [EOL] [EOL] [EOL] def test_frame_id_number_index_nested ( session ) : [EOL] session . url = inline ( iframe ( [string] . format ( iframe ( [string] ) ) ) ) [EOL] [EOL] expected_text = [ [string] , [string] ] [EOL] for i in range ( [number] , len ( expected_text ) ) : [EOL] response = switch_to_frame ( session , [number] ) [EOL] assert_success ( response ) [EOL] [EOL] element = session . find . css ( [string] , all = False ) [EOL] assert element . text == expected_text [ i ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] import webdriver . protocol as protocol [EOL] [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . inline import inline , iframe [EOL] [EOL] [EOL] def switch_to_frame ( session , frame ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , { [string] : frame } , encoder = protocol . Encoder , decoder = protocol . Decoder , session = session ) [EOL] [EOL] [EOL] def frameset ( * docs ) : [EOL] frames = list ( map ( lambda doc : [string] . format ( inline ( doc ) ) , docs ) ) [EOL] return [string] . format ( len ( frames ) * [string] , [string] . join ( frames ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [number] , [string] ] , [ [number] , [string] ] ] ) def test_frame_id_webelement_frame ( session , index , value ) : [EOL] session . url = inline ( frameset ( [string] , [string] ) ) [EOL] frames = session . find . css ( [string] ) [EOL] assert len ( frames ) == [number] [EOL] [EOL] response = switch_to_frame ( session , frames [ index ] ) [EOL] assert_success ( response ) [EOL] [EOL] element = session . find . css ( [string] , all = False ) [EOL] assert element . text == value [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [number] , [string] ] , [ [number] , [string] ] ] ) def test_frame_id_webelement_iframe ( session , index , value ) : [EOL] session . url = inline ( [string] . format ( iframe ( [string] ) , iframe ( [string] ) ) ) [EOL] frames = session . find . css ( [string] ) [EOL] assert len ( frames ) == [number] [EOL] [EOL] response = switch_to_frame ( session , frames [ index ] ) [EOL] assert_success ( response ) [EOL] [EOL] element = session . find . css ( [string] , all = False ) [EOL] assert element . text == value [EOL] [EOL] [EOL] def test_frame_id_webelement_nested ( session ) : [EOL] session . url = inline ( iframe ( [string] . format ( iframe ( [string] ) ) ) ) [EOL] [EOL] expected_text = [ [string] , [string] ] [EOL] for i in range ( [number] , len ( expected_text ) ) : [EOL] frame_element = session . find . css ( [string] , all = False ) [EOL] response = switch_to_frame ( session , frame_element ) [EOL] assert_success ( response ) [EOL] [EOL] element = session . find . css ( [string] , all = False ) [EOL] assert element . text == expected_text [ i ] [EOL] [EOL] [EOL] def test_frame_id_webelement_no_element_reference ( session ) : [EOL] session . url = inline ( iframe ( [string] ) ) [EOL] frame = session . find . css ( [string] , all = False ) [EOL] frame . id = [string] [EOL] [EOL] response = switch_to_frame ( session , frame ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_frame_id_webelement_stale_reference ( session ) : [EOL] session . url = inline ( iframe ( [string] ) ) [EOL] frame = session . find . css ( [string] , all = False ) [EOL] [EOL] session . refresh ( ) [EOL] [EOL] response = switch_to_frame ( session , frame ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_frame_id_webelement_no_frame_element ( session ) : [EOL] session . url = inline ( [string] ) [EOL] no_frame = session . find . css ( [string] , all = False ) [EOL] [EOL] response = switch_to_frame ( session , no_frame ) [EOL] assert_error ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from tests . support . asserts import assert_error , assert_success [EOL] from tests . support . helpers import is_fullscreen [EOL] [EOL] [EOL] def fullscreen ( session ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = fullscreen ( session ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] def test_fullscreen ( session ) : [EOL] response = fullscreen ( session ) [EOL] assert_success ( response ) [EOL] [EOL] assert is_fullscreen ( session ) [EOL] [EOL] [EOL] def test_payload ( session ) : [EOL] response = fullscreen ( session ) [EOL] [EOL] assert response . status == [number] [EOL] assert isinstance ( response . body [ [string] ] , dict ) [EOL] [EOL] value = response . body [ [string] ] [EOL] assert [string] in value [EOL] assert [string] in value [EOL] assert [string] in value [EOL] assert [string] in value [EOL] assert isinstance ( value [ [string] ] , int ) [EOL] assert isinstance ( value [ [string] ] , int ) [EOL] assert isinstance ( value [ [string] ] , int ) [EOL] assert isinstance ( value [ [string] ] , int ) [EOL] [EOL] [EOL] def test_fullscreen_twice_is_idempotent ( session ) : [EOL] assert not is_fullscreen ( session ) [EOL] [EOL] first_response = fullscreen ( session ) [EOL] assert_success ( first_response ) [EOL] assert is_fullscreen ( session ) [EOL] [EOL] second_response = fullscreen ( session ) [EOL] assert_success ( second_response ) [EOL] assert is_fullscreen ( session ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def test_navigator_webdriver_active ( session ) : [EOL] assert session . execute_script ( [string] ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from webdriver . transport import Response [EOL] [EOL] from tests . support . asserts import assert_error , assert_same_element , assert_success [EOL] from tests . support . inline import inline [EOL] [EOL] [EOL] def find_elements ( session , using , value ) : [EOL] return session . transport . send ( [string] , [string] . format ( ** vars ( session ) ) , { [string] : using , [string] : value } ) [EOL] [EOL] [EOL] def test_null_parameter_value ( session , http ) : [EOL] path = [string] . format ( ** vars ( session ) ) [EOL] with http . post ( path , None ) as response : [EOL] assert_error ( Response . from_http ( response ) , [string] ) [EOL] [EOL] [EOL] def test_no_browsing_context ( session , closed_window ) : [EOL] response = find_elements ( session , [string] , [string] ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , True , None , [number] , [ ] , { } ] ) def test_invalid_using_argument ( session , using ) : [EOL] [comment] [EOL] response = find_elements ( session , using , [string] ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , [ ] , { } ] ) def test_invalid_selector_argument ( session , value ) : [EOL] [comment] [EOL] response = find_elements ( session , [string] , value ) [EOL] assert_error ( response , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_find_elements ( session , using , value ) : [EOL] [comment] [EOL] session . url = inline ( [string] ) [EOL] [EOL] response = find_elements ( session , using , value ) [EOL] assert_success ( response ) [EOL] assert len ( response . body [ [string] ] ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_find_elements_link_text ( session , document , value ) : [EOL] [comment] [EOL] session . url = inline ( [string] . format ( document ) ) [EOL] expected = session . execute_script ( [string] ) [EOL] [EOL] response = find_elements ( session , [string] , value ) [EOL] value = assert_success ( response ) [EOL] assert isinstance ( value , list ) [EOL] assert len ( value ) == [number] [EOL] [EOL] found_element = value [ [number] ] [EOL] assert_same_element ( session , found_element , expected ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_find_elements_partial_link_text ( session , document , value ) : [EOL] [comment] [EOL] session . url = inline ( [string] . format ( document ) ) [EOL] expected = session . execute_script ( [string] ) [EOL] [EOL] response = find_elements ( session , [string] , value ) [EOL] value = assert_success ( response ) [EOL] assert isinstance ( value , list ) [EOL] assert len ( value ) == [number] [EOL] [EOL] found_element = value [ [number] ] [EOL] assert_same_element ( session , found_element , expected ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) ] ) def test_no_element ( session , using , value ) : [EOL] [comment] [EOL] response = find_elements ( session , using , value ) [EOL] assert_success ( response ) [EOL] assert response . body [ [string] ] == [ ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_xhtml_namespace ( session , using , value ) : [EOL] session . url = inline ( [string] , doctype = [string] ) [EOL] expected = session . execute_script ( [string] ) [EOL] [EOL] response = find_elements ( session , using , value ) [EOL] value = assert_success ( response ) [EOL] assert isinstance ( value , list ) [EOL] assert len ( value ) == [number] [EOL] [EOL] found_element = value [ [number] ] [EOL] assert_same_element ( session , found_element , expected ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] ) def test_htmldocument ( session , using , value ) : [EOL] session . url = inline ( [string] ) [EOL] response = find_elements ( session , using , value ) [EOL] value = assert_success ( response ) [EOL] assert isinstance ( value , list ) [EOL] assert len ( value ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
[EOL]	0
	0
import subprocess [EOL] import os [EOL] [EOL] here = os . path . dirname ( __file__ ) [EOL] [EOL] [EOL] def build ( * args , ** kwargs ) : [EOL] subprocess . check_call ( [ [string] , [string] ] , cwd = here ) [EOL]	0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] response . explicit_flush = True [EOL] response . write_status_headers ( ) [EOL] [EOL] while True : [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . write ( [string] ) [EOL] response . writer . write ( [string] ) [EOL] [EOL] response . writer . flush ( ) [EOL] time . sleep ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ID_PERSISTS = [number] [EOL] ID_RESETS_1 = [number] [EOL] ID_RESETS_2 = [number] [EOL] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] try : [EOL] test_type = int ( request . GET . first ( [string] , ID_PERSISTS ) ) [EOL] except : [EOL] test_type = ID_PERSISTS [EOL] [EOL] if test_type == ID_PERSISTS : [EOL] return [string] [EOL] [EOL] elif test_type == ID_RESETS_1 : [EOL] return [string] [EOL] [EOL] [comment] [EOL] elif test_type == ID_RESETS_2 : [EOL] return [string] [EOL] [EOL] else : [EOL] return [string] [EOL]	$builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import time [EOL] [EOL] def main ( request , response ) : [EOL] mime = request . GET . first ( [string] , [string] ) [EOL] message = request . GET . first ( [string] , [string] ) [EOL] newline = [string] if request . GET . first ( [string] , None ) == [string] else [string] [EOL] sleep = int ( request . GET . first ( [string] , [string] ) ) [EOL] [EOL] headers = [ ( [string] , mime ) ] [EOL] body = message + newline + [string] [EOL] if sleep != [number] : [EOL] time . sleep ( sleep / [number] ) [EOL] [EOL] return headers , body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] last_event_id = request . headers . get ( [string] , [string] ) [EOL] if last_event_id : [EOL] return [string] + last_event_id + [string] [EOL] else : [EOL] idvalue = request . GET . first ( [string] , [string] . encode ( [string] ) ) [EOL] return [string] + idvalue + [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] def main ( request , response ) : [EOL] last_event_id = request . headers . get ( [string] , [string] ) [EOL] ident = request . GET . first ( [string] , [string] ) [EOL] cookie = [string] if ident in request . cookies else [string] [EOL] origin = request . GET . first ( [string] , request . headers [ [string] ] ) [EOL] credentials = request . GET . first ( [string] , [string] ) [EOL] [EOL] headers = [ ] [EOL] [EOL] if origin != [string] : [EOL] headers . append ( ( [string] , origin ) ) ; [EOL] [EOL] if credentials != [string] : [EOL] headers . append ( ( [string] , credentials ) ) ; [EOL] [EOL] if last_event_id == [string] : [EOL] headers . append ( ( [string] , [string] ) ) [EOL] response . set_cookie ( ident , [string] ) [EOL] data = [string] % cookie [EOL] elif last_event_id == [string] : [EOL] headers . append ( ( [string] , [string] ) ) [EOL] long_long_time_ago = datetime . now ( ) . replace ( year = [number] , month = [number] , day = [number] ) [EOL] response . set_cookie ( ident , [string] , expires = long_long_time_ago ) [EOL] data = [string] % cookie [EOL] else : [EOL] headers . append ( ( [string] , [string] ) ) [EOL] data = [string] + last_event_id + cookie + [string] [EOL] [EOL] return headers , data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] response_headers = [ ( [string] , [string] ) ] [EOL] body = [string] % request . headers . get ( [string] , [string] ) [EOL] return ( [number] , response_headers , body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = [string] [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] origin = request . GET . first ( [string] ) [EOL] value = request . GET . first ( [string] ) [EOL] [comment] [EOL] shouldSucceed = request . GET . first ( [string] , [string] ) [EOL] return ( [ ( [string] , [string] ) ] , [string] % ( origin , value , shouldSucceed ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . content = request . GET . first ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] time . sleep ( [number] ) [EOL] return [number] , [ ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os , sys [EOL] from wptserve . utils import isomorphic_decode [EOL] sys . path . insert ( [number] , os . path . dirname ( os . path . abspath ( isomorphic_decode ( __file__ ) ) ) ) [EOL] import subresource [EOL] [EOL] def generate_payload ( server_data ) : [EOL] return subresource . get_template ( [string] ) % server_data [EOL] [EOL] def main ( request , response ) : [EOL] subresource . respond ( request , response , payload_generator = generate_payload , content_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] referrer = request . headers . get ( [string] , [string] ) [EOL] response_headers = [ ( [string] , [string] ) ] [EOL] return ( [number] , response_headers , [string] + referrer + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] cookie = request . cookies . first ( [string] , None ) [EOL] expected_value = request . GET . first ( [string] , None ) [EOL] source_origin = request . headers . get ( [string] , None ) [EOL] [EOL] response_headers = [ ( [string] , [string] ) , ( [string] , source_origin ) , ( [string] , [string] ) ] [EOL] [EOL] if cookie == expected_value : [EOL] return ( [number] , response_headers , [string] ) [EOL] [EOL] return ( [number] , response_headers ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [string] % ( request . POST . first ( [string] ) , request . POST . first ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = [string] [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] code = int ( request . GET . first ( [string] , [number] ) ) [EOL] text = request . GET . first ( [string] , [string] ) [EOL] content = request . GET . first ( [string] , [string] ) [EOL] type = request . GET . first ( [string] , [string] ) [EOL] status = ( code , text ) [EOL] headers = [ ( [string] , type ) , ( [string] , isomorphic_encode ( request . method ) ) ] [EOL] return status , headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] from six import int2byte [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = int2byte ( [number] ) [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Type [EOL] import typing [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] location = [string] % ( request . url_parts . scheme , request . url_parts . netloc , request . url_parts . path ) [EOL] page = [string] [EOL] type = [number] [EOL] mix = [number] [EOL] if request . GET . first ( [string] , None ) == [string] : [EOL] page = [string] [EOL] [EOL] if request . GET . first ( [string] , None ) == [string] : [EOL] type = [number] [EOL] [EOL] if request . GET . first ( [string] , None ) == [string] : [EOL] mix = [number] [EOL] type = [number] if type == [number] else [number] [EOL] [EOL] new_location = [string] % ( location , page , type , mix ) [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , isomorphic_encode ( new_location ) ) ] [EOL] return [number] , headers , [string] + new_location [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , request . headers . get ( [string] ) ) [EOL] [EOL] response . content = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import datetime [EOL] from wptserve . utils import isomorphic_decode , isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] import datetime , os [EOL] srcpath = os . path . join ( os . path . dirname ( isomorphic_decode ( __file__ ) ) , [string] ) [EOL] srcmoddt = datetime . datetime . fromtimestamp ( os . path . getmtime ( srcpath ) ) [EOL] response . headers . set ( [string] , isomorphic_encode ( srcmoddt . strftime ( [string] ) ) ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return open ( srcpath , [string] ) . read ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] from six import int2byte [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] [comment] [EOL] content = int2byte ( [number] ) + int2byte ( [number] ) + int2byte ( [number] ) + int2byte ( [number] ) + int2byte ( [number] ) + int2byte ( [number] ) [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] ) ] , request . headers . get ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] if [string] in request . GET : [EOL] return request . url [EOL] else : [EOL] return request . request_path [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = [string] [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] content = [string] [EOL] if [string] in request . GET : [EOL] val = request . GET . first ( [string] ) [EOL] response . headers . set ( [string] , val ) [EOL] return content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] return [ ( [string] , [string] ) , request . headers . get ( [string] , [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] from six import int2byte [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = [string] + int2byte ( [number] ) + [string] [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] content = chr ( [number] ) [EOL] [EOL] return headers , content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] response . text = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] def main ( request , response ) : [EOL] delay = float ( request . GET . first ( [string] , [number] ) ) [EOL] time . sleep ( delay / [number] ) [EOL] [EOL] return [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] response . content = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] if request . method == [string] : [EOL] if [string] in request . headers . get ( [string] ) . lower ( ) : [EOL] response . status = [number] [EOL] response . content = [string] [EOL] else : [EOL] response . headers . set ( [string] , [string] ) [EOL] else : [EOL] response . content = request . headers . get ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def main ( request , response ) : [EOL] content = request . method [EOL] [EOL] response . add_required_headers = False [EOL] response . writer . write ( [string] . format ( len ( content ) , content ) ) [EOL] response . writer . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] response . status = [number] [EOL] location = request . GET . first ( [string] ) [EOL] response . headers . set ( [string] , location ) [EOL] response . headers . set ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] def main ( request , response ) : [EOL] return [number] , [ ( [string] , request . headers [ [string] ] ) ] , request . body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import os . path [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] [EOL] token = request . GET . first ( [string] , None ) [EOL] is_query = request . GET . first ( [string] , None ) != None [EOL] with request . server . stash . lock : [EOL] value = request . server . stash . take ( token ) [EOL] count = [number] [EOL] if value != None : [EOL] count = int ( value ) [EOL] if is_query : [EOL] if count < [number] : [EOL] request . server . stash . put ( token , count ) [EOL] else : [EOL] count = count + [number] [EOL] request . server . stash . put ( token , count ) [EOL] [EOL] if is_query : [EOL] headers = [ ( [string] , count ) ] [EOL] content = [string] [EOL] return [number] , headers , content [EOL] else : [EOL] filename = [string] [EOL] if count > [number] : [EOL] filename = [string] [EOL] [EOL] path = os . path . join ( os . path . dirname ( isomorphic_decode ( __file__ ) ) , [string] , filename ) [EOL] body = open ( path , [string] ) . read ( ) [EOL] [EOL] response . add_required_headers = False [EOL] response . writer . write_status ( [number] ) [EOL] response . writer . write_header ( [string] , len ( body ) ) [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . write_header ( [string] , [string] ) [EOL] response . writer . end_headers ( ) [EOL] [EOL] response . writer . write ( body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] return headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) , ( [string] , request . GET [ [string] ] ) ] [EOL] return [number] , headers , [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , request . GET [ [string] ] ) ] [EOL] if [string] in request . headers : [EOL] headers . append ( ( [string] , request . headers [ [string] ] ) ) [EOL] [EOL] return [number] , headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , request . GET [ [string] ] ) ] [EOL] if [string] in request . headers : [EOL] headers . append ( ( [string] , request . headers [ [string] ] ) ) [EOL] [EOL] return [number] , headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , request . GET [ [string] ] ) ] [EOL] if [string] in request . GET : [EOL] headers . append ( ( [string] , request . GET [ [string] ] ) ) [EOL] [EOL] return [number] , headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import os . path [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] type = request . GET . first ( [string] , None ) [EOL] [EOL] body = open ( os . path . join ( os . path . dirname ( isomorphic_decode ( __file__ ) ) , [string] ) , [string] ) . read ( ) [EOL] [EOL] response . add_required_headers = False [EOL] response . writer . write_status ( [number] ) [EOL] [EOL] if [string] in request . GET : [EOL] response . writer . write_header ( [string] , request . GET [ [string] ] ) [EOL] if [string] in request . GET : [EOL] response . writer . write_header ( [string] , request . GET [ [string] ] ) [EOL] response . writer . write_header ( [string] , len ( body ) ) [EOL] if ( type != None ) : [EOL] response . writer . write_header ( [string] , type ) [EOL] response . writer . end_headers ( ) [EOL] [EOL] response . writer . write ( body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import io [EOL] import typing [EOL] import os [EOL] import hashlib [EOL] import json [EOL] [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] [comment] [EOL] [comment] [EOL] if request . GET : [EOL] key = request . GET [ [string] ] [EOL] elif request . POST : [EOL] key = request . POST [ [string] ] [EOL] [EOL] [comment] [EOL] testId = hashlib . md5 ( key ) . hexdigest ( ) [EOL] [EOL] [comment] [EOL] if [string] in request . GET : [EOL] response . writer . write_status ( [number] ) [EOL] response . writer . end_headers ( ) [EOL] try : [EOL] header_value = request . server . stash . take ( testId ) [EOL] response . writer . write ( header_value ) [EOL] except ( KeyError , ValueError ) as e : [EOL] response . writer . write ( [string] ) [EOL] pass [EOL] [EOL] response . close_connection = True [EOL] [EOL] [comment] [EOL] else : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] header = json . dumps ( { [string] : isomorphic_decode ( request . headers . get ( [string] , [string] ) ) , [string] : isomorphic_decode ( request . headers . get ( [string] , [string] ) ) , [string] : isomorphic_decode ( request . headers . get ( [string] , [string] ) ) , [string] : isomorphic_decode ( request . headers . get ( [string] , [string] ) ) , } ) [EOL] request . server . stash . put ( testId , header ) [EOL] except KeyError : [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] ) , [string] ) [EOL] image = file . read ( ) [EOL] file . close ( ) [EOL] return image [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] return [string] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] , [string] , [string] ) , [string] ) [EOL] shared_worker = file . read ( ) [EOL] file . close ( ) [EOL] return shared_worker [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] ) , [string] ) [EOL] font = file . read ( ) [EOL] file . close ( ) [EOL] return font [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] ) , [string] ) [EOL] audio = file . read ( ) [EOL] file . close ( ) [EOL] return audio [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] ) , [string] ) [EOL] video = file . read ( ) [EOL] file . close ( ) [EOL] return video [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) or key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] file = open ( os . path . join ( request . doc_root , [string] , [string] ) , [string] ) [EOL] image = file . read ( ) [EOL] file . close ( ) [EOL] return image [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] % key [ [number] : ] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] if key . startswith ( [string] ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] def main ( request , response ) : [EOL] require_range = request . GET . first ( [string] , [string] ) [EOL] pretend_offset = int ( request . GET . first ( [string] , [string] ) ) [EOL] range_header = request . headers . get ( [string] , [string] ) [EOL] [EOL] if require_range and not range_header : [EOL] response . set_error ( [number] , [string] ) [EOL] response . write ( ) [EOL] return [EOL] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . status = [number] [EOL] [EOL] to_send = [string] [EOL] length = len ( to_send ) [EOL] [EOL] content_range = [string] % ( pretend_offset , pretend_offset + length - [number] , pretend_offset + length ) [EOL] [EOL] response . headers . set ( [string] , content_range ) [EOL] response . headers . set ( [string] , length ) [EOL] [EOL] response . content = to_send [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wptserve . handlers import json_handler [EOL] [EOL] [EOL] @ json_handler def main ( request , response ) : [EOL] key = request . GET . first ( [string] ) [EOL] return request . server . stash . take ( key , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def main ( request , response ) : [EOL] token = request . GET . first ( [string] ) [EOL] if request . server . stash . take ( token ) is not None : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] def main ( request , response ) : [EOL] headers = [ ( [string] , [string] ) ] [EOL] return [number] , headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] if request . method == [string] : [EOL] [comment] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] url_dir = [string] . join ( request . url_parts . path . split ( [string] ) [ : - [number] ] ) + [string] [EOL] key = request . GET . first ( [string] ) [EOL] value = request . GET . first ( [string] ) [EOL] [comment] [EOL] request . server . stash . put ( key , isomorphic_decode ( value ) , url_dir ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] [EOL] def url_dir ( request ) : [EOL] return [string] . join ( request . url_parts . path . split ( [string] ) [ : - [number] ] ) + [string] [EOL] [EOL] [EOL] def stash_write ( request , key , value ) : [EOL] [docstring] [EOL] request . server . stash . take ( key , url_dir ( request ) ) [EOL] request . server . stash . put ( key , value , url_dir ( request ) ) [EOL] [EOL] [EOL] def main ( request , response ) : [EOL] stateKey = request . GET . first ( [string] , [string] ) [EOL] abortKey = request . GET . first ( [string] , [string] ) [EOL] [EOL] if stateKey : [EOL] stash_write ( request , stateKey , [string] ) [EOL] [EOL] response . headers . set ( [string] , [string] ) [EOL] response . write_status_headers ( ) [EOL] [EOL] [comment] [EOL] response . writer . write ( [string] * [number] ) [EOL] [EOL] while True : [EOL] if not response . writer . write ( [string] ) : [EOL] break [EOL] if abortKey and request . server . stash . take ( abortKey , url_dir ( request ) ) : [EOL] break [EOL] time . sleep ( [number] ) [EOL] [EOL] if stateKey : [EOL] stash_write ( request , stateKey , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] headers = [ ] [EOL] if [string] in request . GET : [EOL] headers . append ( ( [string] , [string] ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] [EOL] headers . append ( ( [string] , isomorphic_encode ( request . method ) ) ) [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] return headers , request . body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] import time [EOL] [EOL] from six . moves . urllib . parse import urlencode , urlparse [EOL] [EOL] from wptserve . utils import isomorphic_decode , isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] stashed_data = { [string] : [number] , [string] : [string] } [EOL] status = [number] [EOL] headers = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] if [string] in request . headers : [EOL] headers . append ( ( [string] , request . headers . get ( [string] , [string] ) ) ) [EOL] headers . append ( ( [string] , [string] ) ) [EOL] else : [EOL] headers . append ( ( [string] , [string] ) ) [EOL] [EOL] token = None [EOL] if [string] in request . GET : [EOL] token = request . GET . first ( [string] ) [EOL] data = request . server . stash . take ( token ) [EOL] if data : [EOL] stashed_data = data [EOL] [EOL] if request . method == [string] : [EOL] if [string] in request . GET : [EOL] headers . append ( ( [string] , request . GET [ [string] ] ) ) [EOL] stashed_data [ [string] ] = [string] [EOL] [comment] [EOL] if not [string] in request . GET : [EOL] if token : [EOL] request . server . stash . put ( request . GET . first ( [string] ) , stashed_data ) [EOL] return [number] , headers , [string] [EOL] [EOL] if [string] in request . GET : [EOL] status = int ( request . GET [ [string] ] ) [EOL] [EOL] stashed_data [ [string] ] += [number] [EOL] [EOL] if [string] in request . GET : [EOL] url = isomorphic_decode ( request . GET [ [string] ] ) [EOL] if [string] not in request . GET : [EOL] scheme = urlparse ( url ) . scheme [EOL] if scheme == [string] or scheme == [string] or scheme == [string] : [EOL] url += [string] if [string] in url else [string] [EOL] [comment] [EOL] url_parameters = { } [EOL] for item in request . GET . items ( ) : [EOL] url_parameters [ isomorphic_decode ( item [ [number] ] ) ] = isomorphic_decode ( item [ [number] ] [ [number] ] ) [EOL] url += urlencode ( url_parameters ) [EOL] [comment] [EOL] url += [string] + str ( stashed_data [ [string] ] ) [EOL] headers . append ( ( [string] , isomorphic_encode ( url ) ) ) [EOL] [EOL] if [string] in request . GET : [EOL] headers . append ( ( [string] , request . GET [ [string] ] ) ) [EOL] [EOL] if [string] in request . GET : [EOL] time . sleep ( float ( request . GET . first ( [string] , [number] ) ) / [number] ) [EOL] [EOL] if token : [EOL] request . server . stash . put ( request . GET . first ( [string] ) , stashed_data ) [EOL] if [string] in request . GET : [EOL] max_count = int ( request . GET [ [string] ] ) [EOL] [comment] [EOL] if stashed_data [ [string] ] > max_count : [EOL] [comment] [EOL] return str ( stashed_data [ [string] ] - [number] ) [EOL] [EOL] return status , headers , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import typing [EOL] from wptserve . utils import isomorphic_decode [EOL] [EOL] def main ( request , response ) : [EOL] token = request . GET . first ( [string] , None ) [EOL] if [string] in request . GET : [EOL] from json import JSONEncoder [EOL] response . headers . set ( [string] , [string] ) [EOL] return JSONEncoder ( ) . encode ( request . server . stash . take ( token ) ) [EOL] content = request . GET . first ( [string] , None ) [EOL] tag = request . GET . first ( [string] , None ) [EOL] date = request . GET . first ( [string] , None ) [EOL] expires = request . GET . first ( [string] , None ) [EOL] vary = request . GET . first ( [string] , None ) [EOL] cc = request . GET . first ( [string] , None ) [EOL] redirect = request . GET . first ( [string] , None ) [EOL] inm = request . headers . get ( [string] , None ) [EOL] ims = request . headers . get ( [string] , None ) [EOL] pragma = request . headers . get ( [string] , None ) [EOL] cache_control = request . headers . get ( [string] , None ) [EOL] ignore = [string] in request . GET [EOL] [EOL] if tag : [EOL] tag = [string] % tag [EOL] [EOL] server_state = request . server . stash . take ( token ) [EOL] if not server_state : [EOL] server_state = [ ] [EOL] state = dict ( ) [EOL] if not ignore : [EOL] if inm : [EOL] state [ [string] ] = isomorphic_decode ( inm ) [EOL] if ims : [EOL] state [ [string] ] = isomorphic_decode ( ims ) [EOL] if pragma : [EOL] state [ [string] ] = isomorphic_decode ( pragma ) [EOL] if cache_control : [EOL] state [ [string] ] = isomorphic_decode ( cache_control ) [EOL] server_state . append ( state ) [EOL] request . server . stash . put ( token , server_state ) [EOL] [EOL] if tag : [EOL] response . headers . set ( [string] , [string] % tag ) [EOL] elif date : [EOL] response . headers . set ( [string] , date ) [EOL] if expires : [EOL] response . headers . set ( [string] , expires ) [EOL] if vary : [EOL] response . headers . set ( [string] , vary ) [EOL] if cc : [EOL] response . headers . set ( [string] , cc ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] if redirect : [EOL] response . headers . set ( [string] , redirect ) [EOL] response . status = ( [number] , [string] ) [EOL] return [string] [EOL] elif ( ( inm is not None and inm == tag ) or ( ims is not None and ims == date ) ) : [EOL] response . status = ( [number] , [string] ) [EOL] return [string] [EOL] else : [EOL] response . status = ( [number] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from wptserve . utils import isomorphic_encode [EOL] [EOL] def main ( request , response ) : [EOL] if request . method == [string] : [EOL] response . add_required_headers = False [EOL] response . writer . write_status ( [number] ) [EOL] response . writer . write_header ( [string] , isomorphic_encode ( request . url ) ) [EOL] response . writer . end_headers ( ) [EOL] response . writer . write ( [string] ) [EOL] elif request . method == [string] : [EOL] return ( [ ( [string] , [string] ) ] , [string] ) [EOL] else : [EOL] return ( [ ( [string] , [string] ) ] , [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Any , Optional [EOL] import io [EOL] import typing [EOL] import datetime [EOL] import json [EOL] import mimetypes [EOL] import os [EOL] import sys [EOL] import time [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def main ( request , response ) : [EOL] response . headers . set ( [string] , [string] ) [EOL] dispatch = request . GET . first ( [string] , None ) [EOL] uuid = request . GET . first ( [string] , None ) [EOL] partition_id = request . GET . first ( [string] , None ) [EOL] [EOL] if not uuid or not dispatch or not partition_id : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] stash = request . server . stash [EOL] test_failed = False [EOL] if request . GET . first ( [string] , None ) != [string] : [EOL] [comment] [EOL] with stash . lock : [EOL] [comment] [EOL] [comment] [EOL] address_key = str ( request . client_address ) + [string] + str ( request . url_parts . port ) [EOL] server_state = stash . take ( uuid ) or { [string] : False } [EOL] if address_key in server_state and server_state [ address_key ] != partition_id : [EOL] server_state [ [string] ] = True [EOL] server_state [ address_key ] = partition_id [EOL] test_failed = server_state [ [string] ] [EOL] stash . put ( uuid , server_state ) [EOL] [EOL] origin = request . headers . get ( [string] ) [EOL] if origin : [EOL] response . headers . set ( [string] , origin ) [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] if request . method == [string] : [EOL] return handle_preflight ( request , response ) [EOL] [EOL] if dispatch == [string] : [EOL] return handle_fetch_file ( request , response , partition_id , uuid ) [EOL] [EOL] if dispatch == [string] : [EOL] if test_failed : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] [EOL] if dispatch == [string] : [EOL] stash . take ( uuid ) [EOL] if test_failed : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] [EOL] return simple_response ( request , response , [number] , [string] , [string] + dispatch ) [EOL] [EOL] def handle_preflight ( request , response ) : [EOL] response . status = ( [number] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] response . headers . set ( [string] , [string] ) [EOL] return [string] [EOL] [EOL] def simple_response ( request , response , status_code , status_message , body , content_type = [string] ) : [EOL] response . status = ( status_code , status_message ) [EOL] response . headers . set ( [string] , content_type ) [EOL] return body [EOL] [EOL] def handle_fetch_file ( request , response , partition_id , uuid ) : [EOL] subresource_origin = request . GET . first ( [string] , None ) [EOL] rel_path = request . GET . first ( [string] , None ) [EOL] [EOL] [comment] [EOL] include_credentials = request . GET . first ( [string] , None ) [EOL] if not subresource_origin or not rel_path or not include_credentials : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] [EOL] cur_path = os . path . realpath ( __file__ ) [EOL] base_path = os . path . abspath ( os . path . join ( os . path . dirname ( cur_path ) , os . pardir , os . pardir , os . pardir ) ) [EOL] path = os . path . abspath ( os . path . join ( base_path , rel_path ) ) [EOL] [EOL] [comment] [EOL] if not path . startswith ( base_path ) : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] [EOL] sandbox = request . GET . first ( [string] , None ) [EOL] if sandbox == [string] : [EOL] response . headers . set ( [string] , [string] ) [EOL] [EOL] file = open ( path , mode = [string] ) [EOL] body = file . read ( ) [EOL] file . close ( ) [EOL] [EOL] subresource_path = [string] + os . path . relpath ( __file__ , base_path ) . replace ( [string] , [string] ) [EOL] subresource_params = [string] + partition_id + [string] + uuid + [string] + subresource_origin + [string] + include_credentials [EOL] body = body . replace ( [string] , subresource_origin + subresource_path + subresource_params ) [EOL] [EOL] other_origin = request . GET . first ( [string] , None ) [EOL] if other_origin : [EOL] body = body . replace ( [string] , other_origin + subresource_path + subresource_params ) [EOL] [EOL] mimetypes . init ( ) [EOL] mimetype_pair = mimetypes . guess_type ( path ) [EOL] mimetype = mimetype_pair [ [number] ] [EOL] [EOL] if mimetype == None or mimetype_pair [ [number] ] != None : [EOL] return simple_response ( request , response , [number] , [string] , [string] ) [EOL] return simple_response ( request , response , [number] , [string] , body , mimetype ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0