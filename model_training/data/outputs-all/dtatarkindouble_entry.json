	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from rest_framework import routers [EOL] [EOL] from payments . apps import PaymentsConfig [EOL] from payments . views import PaymentViewSet [EOL] [EOL] app_name = PaymentsConfig . name [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , PaymentViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import payments [EOL] import postings [EOL] from rest_framework . mixins import ListModelMixin , CreateModelMixin [EOL] from rest_framework . response import Response [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from payments . models import Payment [EOL] from payments . serializers import PaymentSerializer [EOL] from postings . models import Posting [EOL] from postings . serializers import PostingSerializer [EOL] from utils . views import NotImplementedAPI [EOL] [EOL] [EOL] class PaymentViewSet ( ListModelMixin , CreateModelMixin , GenericViewSet ) : [EOL] queryset = Payment . objects . all ( ) [EOL] serializer_class = PaymentSerializer [EOL] list_queryset = Posting . objects . order_by ( [string] ) [EOL] [EOL] def list ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] if request . version == [string] : [EOL] queryset = self . filter_queryset ( self . list_queryset ) [EOL] [EOL] page = self . paginate_queryset ( queryset ) [EOL] if page is not None : [EOL] serializer = PostingSerializer ( page , many = True ) [EOL] return self . get_paginated_response ( serializer . data ) [EOL] [EOL] serializer = PostingSerializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] raise NotImplementedAPI ( ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] if request . version == [string] : [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL] raise NotImplementedAPI ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.views.PaymentViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[payments.serializers.PaymentSerializer]$ 0 0 0 $typing.Type[payments.views.PaymentViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $postings.serializers.PostingSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $postings.serializers.PostingSerializer$ 0 0 0 0 0 $postings.serializers.PostingSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $postings.serializers.PostingSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Literal , List , Any [EOL] import typing [EOL] import _pydecimal [EOL] import builtins [EOL] import typing_extensions [EOL] from _pydecimal import Decimal [EOL] [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models , transaction [EOL] from django . utils . translation import gettext as _ [EOL] [EOL] from accounts . models import Account [EOL] from postings . models import Posting [EOL] [EOL] [EOL] class PaymentManager ( models . Manager ) : [EOL] [docstring] [EOL] [EOL] @ transaction . atomic def create_payment ( self , from_account_pk , to_account_pk , value ) : [EOL] if from_account_pk == to_account_pk : [EOL] raise ValidationError ( [string] , code = [string] ) [EOL] [EOL] [comment] [EOL] order_by = [string] if from_account_pk < to_account_pk else [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] accounts = Account . objects . filter ( pk__in = [ from_account_pk , to_account_pk ] ) . select_related ( [string] ) . select_for_update ( of = [ [string] ] ) . order_by ( order_by ) [EOL] accounts = list ( accounts ) [EOL] [comment] [EOL] if len ( accounts ) != [number] : [EOL] raise Account . DoesNotExist [EOL] from_account , to_account = accounts [EOL] [EOL] if value <= [number] : [EOL] raise ValidationError ( _ ( [string] ) , code = [string] ) [EOL] [EOL] if from_account . currency != to_account . currency : [EOL] raise ValidationError ( _ ( [string] ) , code = [string] ) [EOL] [EOL] if from_account . value < value : [EOL] raise ValidationError ( _ ( [string] ) . format ( from_account ) , code = [string] ) [EOL] [EOL] if to_account . value + value > settings . AMOUNT_VALUE_MAX : [EOL] raise ValidationError ( _ ( [string] ) . format ( to_account ) , code = [string] ) [EOL] [EOL] [comment] [EOL] payment = self . create ( from_account = from_account , to_account = to_account , value = value ) [EOL] [comment] [EOL] Posting . objects . create ( payment = payment , account = from_account , value = - value ) [EOL] Posting . objects . create ( payment = payment , account = to_account , value = value ) [EOL] [comment] [EOL] from_account . value -= value [EOL] from_account . save ( update_fields = [ [string] ] ) [EOL] to_account . value += value [EOL] to_account . save ( update_fields = [ [string] ] ) [EOL] [EOL] return payment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import utils [EOL] import payments [EOL] from decimal import Decimal [EOL] [EOL] from django . conf import settings [EOL] from django . core . validators import MinValueValidator [EOL] from django . db import models [EOL] [EOL] from accounts . models import Account [EOL] from payments . managers import PaymentManager [EOL] from utils . models import AmountField [EOL] [EOL] [EOL] class Payment ( models . Model ) : [EOL] [docstring] [EOL] [EOL] from_account = models . ForeignKey ( Account , related_name = [string] , on_delete = models . CASCADE ) [EOL] to_account = models . ForeignKey ( Account , related_name = [string] , on_delete = models . CASCADE ) [EOL] value = AmountField ( validators = [ MinValueValidator ( Decimal ( [number] ) / ( [number] ** settings . AMOUNT_DECIMAL_PLACES ) ) ] ) [EOL] [EOL] objects = PaymentManager ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.models.Payment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.models.Payment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.models.AmountField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $payments.managers.PaymentManager$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PaymentsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import payments [EOL] from django . core import exceptions [EOL] from rest_framework import serializers [EOL] from rest_framework . exceptions import ValidationError , ErrorDetail [EOL] [EOL] from accounts . models import Account [EOL] from payments . models import Payment [EOL] [EOL] [EOL] class PaymentSerializer ( serializers . ModelSerializer ) : [EOL] from_account = serializers . SlugRelatedField ( slug_field = [string] , queryset = Account . objects . all ( ) ) [EOL] to_account = serializers . SlugRelatedField ( slug_field = [string] , queryset = Account . objects . all ( ) ) [EOL] [EOL] class Meta : [EOL] model = Payment [EOL] fields = [string] [EOL] [EOL] def create ( self , validated_data ) : [EOL] try : [EOL] instance = Payment . objects . create_payment ( from_account_pk = validated_data [ [string] ] . pk , to_account_pk = validated_data [ [string] ] . pk , value = validated_data [ [string] ] , ) [EOL] except exceptions . ValidationError as exc : [EOL] raise ValidationError ( dict ( non_field_errors = [ ErrorDetail ( exc . message , code = exc . code ) ] ) ) [EOL] return instance [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.serializers.PaymentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.serializers.PaymentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[payments.models.Payment]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type , Any [EOL] import typing [EOL] import payments [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . db . models import Sum [EOL] from model_mommy import mommy [EOL] [EOL] from accounts . models import Account , Currency [EOL] from payments . models import Payment [EOL] from postings . models import Posting [EOL] [EOL] [EOL] @ pytest . mark . django_db ( transaction = True ) def test_create_payment ( ) : [EOL] [EOL] currency = mommy . make ( Currency ) [EOL] [EOL] from_account = mommy . make ( Account , currency = currency , value = Decimal ( [string] ) ) [EOL] to_account = mommy . make ( Account , currency = currency , value = Decimal ( [string] ) ) [EOL] [EOL] payment = Payment . objects . create_payment ( from_account_pk = from_account . pk , to_account_pk = to_account . pk , value = Decimal ( [string] ) ) [EOL] [EOL] [comment] [EOL] from_account . refresh_from_db ( ) [EOL] assert from_account . value == Decimal ( [string] ) [EOL] [EOL] [comment] [EOL] to_account . refresh_from_db ( ) [EOL] assert to_account . value == Decimal ( [string] ) [EOL] [EOL] [comment] [EOL] assert Posting . objects . filter ( payment = payment ) . count ( ) == [number] [EOL] assert Posting . objects . filter ( payment = payment ) . aggregate ( sum = Sum ( [string] ) ) [ [string] ] == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db ( transaction = True ) class TestValidation : [EOL] params = dict ( test_create_payment_fail = ( [string] , ( [ [string] , [string] ] , ) ) ) [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup ( self ) : [EOL] mommy . make ( Currency , code = [string] ) [EOL] mommy . make ( Currency , code = [string] ) [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) , [string] ) , ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) , [string] ) , ( [string] , [string] , settings . AMOUNT_VALUE_MAX , Decimal ( [string] ) , settings . AMOUNT_VALUE_MAX , [string] ) , ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , - Decimal ( [string] ) , [string] ) , ) ) def test_create_payment_fail ( self , from_code , to_code , from_value , to_value , value , exc_code ) : [EOL] from_currency = Currency . objects . get ( code = from_code ) [EOL] to_currency = Currency . objects . get ( code = to_code ) [EOL] [EOL] from_account = mommy . make ( Account , currency = from_currency , value = from_value ) [EOL] to_account = mommy . make ( Account , currency = to_currency , value = to_value ) [EOL] [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] Payment . objects . create_payment ( from_account_pk = from_account . pk , to_account_pk = to_account . pk , value = value ) [EOL] [EOL] assert exc_info . value . code == exc_code [EOL] [EOL] [EOL] @ pytest . mark . django_db ( transaction = True ) def test_create_payment_invalid_account ( ) : [EOL] from_account = mommy . make ( Account ) [EOL] with pytest . raises ( Account . DoesNotExist ) : [EOL] Payment . objects . create_payment ( from_account_pk = from_account . pk , to_account_pk = from_account . pk + [number] , value = Decimal ( [string] ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db ( transaction = True ) def test_create_payment_same_account ( ) : [EOL] from_account = mommy . make ( Account ) [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] Payment . objects . create_payment ( from_account_pk = from_account . pk , to_account_pk = from_account . pk , value = Decimal ( [string] ) ) [EOL] assert exc_info . value . code == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Union , Any [EOL] import typing [EOL] import decimal [EOL] from decimal import Decimal [EOL] [EOL] from django . conf import settings [EOL] from model_mommy import mommy [EOL] from parameterized import parameterized [EOL] from rest_framework import status [EOL] from rest_framework . reverse import reverse [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from accounts . models import Currency , Account [EOL] from postings . models import Posting [EOL] from postings . serializers import PaymentDirection [EOL] from utils . views import reverse_querystring [EOL] [EOL] [EOL] class CreatePaymentTestCase ( APITestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . currency_a = mommy . make ( Currency , code = [string] ) [EOL] cls . currency_b = mommy . make ( Currency , code = [string] ) [EOL] [EOL] def test_create_payment ( self ) : [EOL] mommy . make ( Account , currency = self . currency_a , name = [string] , value = Decimal ( [string] ) ) [EOL] mommy . make ( Account , currency = self . currency_a , name = [string] , value = Decimal ( [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = dict ( from_account = [string] , to_account = [string] , value = Decimal ( [string] ) , ) [EOL] response = self . client . post ( url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED , response . data ) [EOL] [EOL] [comment] [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK , response . data ) [EOL] self . assertEqual ( response . data [ [string] ] , [number] ) [EOL] results = response . data [ [string] ] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] self . assertEqual ( results [ [number] ] [ [string] ] , results [ [number] ] [ [string] ] ) [EOL] [EOL] posting = results [ [number] ] [EOL] self . assertEqual ( Decimal ( posting [ [string] ] ) , data [ [string] ] ) [EOL] self . assertEqual ( posting [ [string] ] , PaymentDirection . INCOMING . value ) [EOL] self . assertEqual ( posting [ [string] ] , [string] ) [EOL] self . assertEqual ( posting [ [string] ] , [string] ) [EOL] self . assertNotIn ( [string] , posting ) [EOL] [EOL] posting = results [ [number] ] [EOL] self . assertEqual ( Decimal ( posting [ [string] ] ) , data [ [string] ] ) [EOL] self . assertEqual ( posting [ [string] ] , PaymentDirection . OUTGOING . value ) [EOL] self . assertEqual ( posting [ [string] ] , [string] ) [EOL] self . assertEqual ( posting [ [string] ] , [string] ) [EOL] self . assertNotIn ( [string] , posting ) [EOL] [EOL] def test_pagination ( self ) : [EOL] mommy . make ( Posting , _quantity = [number] ) [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK , response . data ) [EOL] self . assertEqual ( response . data [ [string] ] , [number] ) [EOL] self . assertEqual ( len ( response . data [ [string] ] ) , [number] ) [EOL] [EOL] url = reverse_querystring ( [string] , query_kwargs = dict ( offset = [number] ) ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK , response . data ) [EOL] self . assertEqual ( response . data [ [string] ] , [number] ) [EOL] self . assertEqual ( len ( response . data [ [string] ] ) , [number] ) [EOL] [EOL] def test_invalid_account ( self ) : [EOL] mommy . make ( Account , currency = self . currency_a , name = [string] , value = Decimal ( [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = dict ( from_account = [string] , to_account = [string] , value = Decimal ( [string] ) , ) [EOL] response = self . client . post ( url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST , response . data ) [EOL] self . assertIn ( [string] , response . data , response . data ) [EOL] errors = response . data [ [string] ] [EOL] self . assertEqual ( len ( errors ) , [number] ) [EOL] self . assertEqual ( response . data [ [string] ] [ [number] ] . code , [string] , response . data ) [EOL] [EOL] def test_same_account ( self ) : [EOL] mommy . make ( Account , currency = self . currency_a , name = [string] , value = Decimal ( [string] ) ) [EOL] url = reverse ( [string] ) [EOL] data = dict ( from_account = [string] , to_account = [string] , value = Decimal ( [string] ) , ) [EOL] response = self . client . post ( url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST , response . data ) [EOL] self . assertIn ( [string] , response . data , response . data ) [EOL] errors = response . data [ [string] ] [EOL] self . assertEqual ( len ( errors ) , [number] ) [EOL] self . assertEqual ( response . data [ [string] ] [ [number] ] . code , [string] , response . data ) [EOL] [EOL] @ parameterized . expand ( ( ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) , [string] , [string] ) , ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) , [string] , [string] ) , ( [string] , [string] , settings . AMOUNT_VALUE_MAX , Decimal ( [string] ) , settings . AMOUNT_VALUE_MAX , [string] , [string] ) , ( [string] , [string] , Decimal ( [string] ) , Decimal ( [string] ) , - Decimal ( [string] ) , [string] , [string] ) , ) ) def test_create_payment_fail ( self , from_code , to_code , from_value , to_value , value , exc_code , key ) : [EOL] from_currency = Currency . objects . get ( code = from_code ) [EOL] to_currency = Currency . objects . get ( code = to_code ) [EOL] [EOL] mommy . make ( Account , currency = from_currency , name = [string] , value = from_value ) [EOL] mommy . make ( Account , currency = to_currency , name = [string] , value = to_value ) [EOL] [EOL] url = reverse ( [string] ) [EOL] data = dict ( from_account = [string] , to_account = [string] , value = value , ) [EOL] response = self . client . post ( url , data = data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST , response . data ) [EOL] self . assertIn ( key , response . data , response . data ) [EOL] errors = response . data [ key ] [EOL] self . assertEqual ( len ( errors ) , [number] ) [EOL] self . assertEqual ( response . data [ key ] [ [number] ] . code , exc_code , response . data ) [EOL] [EOL] def test_list_not_implemented ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_501_NOT_IMPLEMENTED , response . data ) [EOL] [EOL] def test_create_not_implemented ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . post ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_501_NOT_IMPLEMENTED , response . data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[decimal.Decimal,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
from django . conf import settings [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class AmountField ( serializers . DecimalField ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . setdefault ( [string] , settings . AMOUNT_MAX_DIGITS ) [EOL] kwargs . setdefault ( [string] , settings . AMOUNT_DECIMAL_PLACES ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from decimal import Decimal [EOL] [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from model_mommy import mommy [EOL] from model_mommy . generators import default_mapping [EOL] [EOL] [EOL] class DefaultCharField ( models . CharField ) : [EOL] [docstring] [EOL] [EOL] MAX_LENGTH = [number] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . setdefault ( [string] , self . MAX_LENGTH ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class AmountField ( models . DecimalField ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . setdefault ( [string] , settings . AMOUNT_MAX_DIGITS ) [EOL] kwargs . setdefault ( [string] , settings . AMOUNT_DECIMAL_PLACES ) [EOL] kwargs . setdefault ( [string] , Decimal ( [number] ) ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] mommy . generators . add ( DefaultCharField , default_mapping [ models . CharField ] ) [EOL] mommy . generators . add ( AmountField , default_mapping [ models . DecimalField ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UtilsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import utils [EOL] from urllib . parse import urlencode [EOL] [EOL] from django . utils . translation import gettext as _ [EOL] from rest_framework import status [EOL] from rest_framework . exceptions import APIException [EOL] from rest_framework . reverse import reverse [EOL] [EOL] [EOL] class NotImplementedAPI ( APIException ) : [EOL] status_code = status . HTTP_501_NOT_IMPLEMENTED [EOL] default_detail = _ ( [string] ) [EOL] default_code = [string] [EOL] [EOL] [EOL] def reverse_querystring ( view , urlconf = None , args = None , kwargs = None , current_app = None , query_kwargs = None ) : [EOL] [docstring] [EOL] base_url = reverse ( view , urlconf = urlconf , args = args , kwargs = kwargs , current_app = current_app ) [EOL] if query_kwargs : [EOL] return [string] . format ( base_url , urlencode ( query_kwargs ) ) [EOL] return base_url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[utils.views.NotImplementedAPI]$ 0 0 0 0 0 $typing.Type[utils.views.NotImplementedAPI]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from rest_framework_swagger . views import get_swagger_view [EOL] [EOL] swagger_view = get_swagger_view ( title = [string] ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , swagger_view , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Type , List [EOL] import typing [EOL] import postings [EOL] from enum import Enum [EOL] [EOL] from rest_framework import serializers [EOL] [EOL] from postings . models import Posting [EOL] [EOL] [EOL] class PaymentDirection ( Enum ) : [EOL] OUTGOING = [string] [EOL] INCOMING = [string] [EOL] [EOL] [EOL] class PostingRelatedAccountField ( serializers . SlugRelatedField ) : [EOL] def __init__ ( self , slug_field = [string] , ** kwargs ) : [EOL] kwargs . setdefault ( [string] , True ) [EOL] super ( ) . __init__ ( slug_field = slug_field , ** kwargs ) [EOL] [EOL] def get_attribute ( self , instance ) : [EOL] if self . source == [string] and instance . value < [number] or self . source == [string] and instance . value > [number] : [EOL] raise serializers . SkipField ( ) [EOL] return super ( ) . get_attribute ( instance ) [EOL] [EOL] [EOL] class PostingSerializer ( serializers . ModelSerializer ) : [EOL] account = serializers . SlugRelatedField ( slug_field = [string] , read_only = True ) [EOL] direction = serializers . SerializerMethodField ( ) [EOL] amount = serializers . SerializerMethodField ( ) [EOL] from_account = PostingRelatedAccountField ( source = [string] ) [EOL] to_account = PostingRelatedAccountField ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = Posting [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] @ staticmethod def get_direction ( instance ) : [EOL] if instance . value > [number] : [EOL] return PaymentDirection . INCOMING . value [EOL] return PaymentDirection . OUTGOING . value [EOL] [EOL] @ staticmethod def get_amount ( instance ) : [EOL] return str ( abs ( instance . value ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[postings.serializers.PostingSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[postings.serializers.PostingSerializer]$ 0 0 0 0 0 0 0 $typing.Type[postings.serializers.PostingSerializer]$ 0 0 0 0 0 0 0 $postings.serializers.PostingRelatedAccountField$ 0 0 0 0 0 0 0 0 $postings.serializers.PostingRelatedAccountField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[postings.models.Posting]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import utils [EOL] import postings [EOL] from django . db import models [EOL] [EOL] from accounts . models import Account [EOL] from utils . models import AmountField [EOL] [EOL] [EOL] class Posting ( models . Model ) : [EOL] [docstring] [EOL] [EOL] payment = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] account = models . ForeignKey ( Account , related_name = [string] , on_delete = models . CASCADE ) [EOL] value = AmountField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[postings.models.Posting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[postings.models.Posting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.models.AmountField$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PostingsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
ERROR_INVALID_CURRENCY_CODE = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import accounts [EOL] from rest_framework . mixins import ListModelMixin [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from accounts . models import Account [EOL] from accounts . serializers import AccountSerializer [EOL] [EOL] [EOL] class AccountViewSet ( ListModelMixin , GenericViewSet ) : [EOL] queryset = Account . objects . all ( ) [EOL] serializer_class = AccountSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.views.AccountViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.serializers.AccountSerializer]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import utils [EOL] import accounts [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . validators import RegexValidator [EOL] from django . db import models [EOL] from django . utils . translation import gettext as _ [EOL] [EOL] from accounts . consts import ERROR_INVALID_CURRENCY_CODE [EOL] from utils . models import DefaultCharField , AmountField [EOL] [EOL] [EOL] class CurrencyCodeValidator ( RegexValidator ) : [EOL] [docstring] [EOL] [EOL] regex = [string] [EOL] message = _ ( ERROR_INVALID_CURRENCY_CODE ) [EOL] [EOL] [EOL] class Currency ( models . Model ) : [EOL] [docstring] [EOL] [EOL] code = DefaultCharField ( max_length = [number] , validators = [ CurrencyCodeValidator ( ) ] , unique = True ) [EOL] [EOL] [EOL] class Account ( models . Model ) : [EOL] [docstring] [EOL] [EOL] name = DefaultCharField ( unique = True ) [EOL] owner = models . ForeignKey ( get_user_model ( ) , null = True , blank = True , related_name = [string] , on_delete = models . CASCADE ) [EOL] currency = models . ForeignKey ( Currency , related_name = [string] , on_delete = models . CASCADE ) [EOL] value = AmountField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[accounts.models.CurrencyCodeValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.models.DefaultCharField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.models.DefaultCharField$ 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.models.AmountField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import utils [EOL] import accounts [EOL] from rest_framework import serializers [EOL] [EOL] from accounts . models import Account [EOL] from utils . serializers import AmountField [EOL] [EOL] [EOL] class AccountSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( source = [string] ) [EOL] balance = AmountField ( source = [string] , read_only = True ) [EOL] currency = serializers . SlugRelatedField ( slug_field = [string] , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Account [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.serializers.AccountSerializer]$ 0 0 0 0 0 0 0 0 0 0 $utils.serializers.AmountField$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.serializers.AccountSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Account]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from rest_framework import routers [EOL] [EOL] from accounts . apps import AccountsConfig [EOL] from accounts . views import AccountViewSet [EOL] [EOL] app_name = AccountsConfig . name [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , AccountViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import accounts [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from model_mommy import mommy [EOL] [EOL] from accounts . models import Currency , CurrencyCodeValidator , Account [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] , ) ) def test_currency_code_validator_invalid ( value ) : [EOL] validator = CurrencyCodeValidator ( ) [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] validator ( value ) [EOL] assert exc_info . value . code == [string] [EOL] [EOL] [EOL] def test_currency_code_validator_valid ( ) : [EOL] validator = CurrencyCodeValidator ( ) [EOL] validator ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_currency_model_invalid ( ) : [EOL] currency = Currency ( code = [string] ) [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] currency . full_clean ( ) [EOL] assert [string] in exc_info . value . error_dict [EOL] assert len ( exc_info . value . error_dict [ [string] ] ) == [number] [EOL] assert exc_info . value . error_dict [ [string] ] [ [number] ] . code == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [ Decimal ( [string] . format ( Decimal ( [string] * ( settings . AMOUNT_MAX_DIGITS - settings . AMOUNT_DECIMAL_PLACES - [number] ) ) , Decimal ( [string] * ( settings . AMOUNT_DECIMAL_PLACES + [number] ) ) , ) ) , [string] , ] , [ Decimal ( [string] . format ( Decimal ( [string] * ( settings . AMOUNT_MAX_DIGITS - settings . AMOUNT_DECIMAL_PLACES + [number] ) ) , Decimal ( [string] * ( settings . AMOUNT_DECIMAL_PLACES - [number] ) ) , ) ) , [string] , ] , [ Decimal ( [string] . format ( Decimal ( [string] * ( settings . AMOUNT_MAX_DIGITS - settings . AMOUNT_DECIMAL_PLACES + [number] ) ) , Decimal ( [string] * settings . AMOUNT_DECIMAL_PLACES ) , ) ) , [string] , ] ) ) @ pytest . mark . django_db def test_account_model_value_invalid ( value , code ) : [EOL] account = Account ( value = value ) [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] account . full_clean ( ) [EOL] assert [string] in exc_info . value . error_dict [EOL] assert len ( exc_info . value . error_dict [ [string] ] ) == [number] [EOL] assert exc_info . value . error_dict [ [string] ] [ [number] ] . code == code [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [number] , [string] . format ( Decimal ( [string] * ( settings . AMOUNT_MAX_DIGITS - settings . AMOUNT_DECIMAL_PLACES ) ) , Decimal ( [string] * settings . AMOUNT_DECIMAL_PLACES ) , ) , ) ) @ pytest . mark . django_db def test_account_model_value_valid ( value ) : [EOL] account = mommy . make ( Account , value = value ) [EOL] account . full_clean ( ) [EOL] account . save ( ) [EOL] account . refresh_from_db ( ) [EOL] assert account . value == Decimal ( value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from decimal import Decimal [EOL] [EOL] from model_mommy import mommy [EOL] from rest_framework import status [EOL] from rest_framework . reverse import reverse [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from accounts . models import Currency , Account [EOL] [EOL] [EOL] class ListAccountsTestCase ( APITestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] currency_a = mommy . make ( Currency , code = [string] ) [EOL] mommy . make ( Account , name = [string] , currency = currency_a , value = Decimal ( [string] ) ) [EOL] currency_b = mommy . make ( Currency , code = [string] ) [EOL] mommy . make ( Account , name = [string] , currency = currency_b , value = Decimal ( [string] ) ) [EOL] [EOL] def test_list_accounts ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK , response . data ) [EOL] self . assertEqual ( response . data [ [string] ] , [number] ) [EOL] self . assertEqual ( len ( response . data [ [string] ] ) , [number] ) [EOL] self . assertSetEqual ( { account [ [string] ] for account in response . data [ [string] ] } , { [string] , [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0