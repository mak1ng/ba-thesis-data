from svg import * [EOL] [EOL] compile_svg ( [string] , [string] , { [string] : True , [string] : [string] } ) [EOL] [EOL] inline_svg ( [string] , [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import io [EOL] import typing [EOL] import os [EOL] import errno [EOL] from bs4 import BeautifulSoup [EOL] [EOL] def create_file ( path , mode ) : [EOL] directory = os . path . dirname ( path ) [EOL] if directory != [string] and not os . path . exists ( directory ) : [EOL] try : [EOL] os . makedirs ( directory ) [EOL] except OSError as e : [EOL] if e . errno != errno . EEXIST : [EOL] raise [EOL] [EOL] file = open ( path , mode ) [EOL] return file [EOL] [EOL] def parse_svg ( path , namespace , options ) : [EOL] [comment] [EOL] file = open ( path , [string] ) [EOL] file_string = file . read ( ) . decode ( [string] ) [EOL] file . close ( ) ; [EOL] [EOL] if namespace == None : [EOL] namespace = [string] [EOL] else : [EOL] namespace = namespace + [string] [EOL] [EOL] [comment] [EOL] file_string = file_string . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if [string] in options and options [ [string] ] == True : [EOL] file_string = file_string . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if [string] in options and options [ [string] ] == True : [EOL] file_string = file_string . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if namespace : [EOL] file_string = file_string . replace ( [string] , [string] + namespace ) [EOL] file_string = file_string . replace ( [string] , [string] + namespace ) [EOL] [EOL] svg = BeautifulSoup ( file_string , [string] ) [EOL] [EOL] [comment] [EOL] symbol_elements = svg . select ( [string] ) [EOL] for element in symbol_elements : [EOL] del element [ [string] ] [EOL] [EOL] use_elements = svg . select ( [string] ) [EOL] for element in use_elements : [EOL] if namespace : [EOL] href = element [ [string] ] [EOL] element [ [string] ] = href . replace ( [string] , [string] + namespace ) [EOL] [EOL] del element [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] if [string] in options and options [ [string] ] == False : [EOL] titles = svg . select ( [string] ) [EOL] for t in titles : t . extract ( ) [EOL] [EOL] [comment] [EOL] if [string] in options and options [ [string] ] == False : [EOL] descriptions = svg . select ( [string] ) [EOL] for d in descriptions : d . extract ( ) [EOL] [EOL] foreign_tags_to_add = [ ] [EOL] if [string] in options and options [ [string] ] == True : [EOL] text_elements = svg . select ( [string] ) [EOL] for element in text_elements : [EOL] [EOL] area = element . rect [EOL] if not area : [EOL] print ( [string] ) [EOL] continue [EOL] [EOL] text_element = element . select ( [string] ) [ [number] ] [EOL] if not text_element : [EOL] print ( [string] ) [EOL] continue [EOL] [EOL] x = area [ [string] ] [EOL] y = area [ [string] ] [EOL] width = area [ [string] ] [EOL] height = area [ [string] ] [EOL] [EOL] text_content = text_element . getText ( ) [EOL] text_tag = BeautifulSoup ( text_content , [string] ) [EOL] [EOL] data_name = None [EOL] if area . has_attr ( [string] ) : data_name = area [ [string] ] [EOL] [comment] [EOL] [EOL] area . extract ( ) [EOL] text_element . extract ( ) [EOL] [EOL] foreign_object_tag = svg . new_tag ( [string] ) [EOL] foreign_object_tag [ [string] ] = [string] [EOL] foreign_object_tag [ [string] ] = [string] + x + [string] + y + [string] [EOL] foreign_object_tag [ [string] ] = width + [string] [EOL] foreign_object_tag [ [string] ] = height + [string] [EOL] [EOL] if [string] in options and options [ [string] ] == True : [EOL] foreign_object_tag [ [string] ] = [string] [EOL] [EOL] if data_name : [EOL] val = data_name [EOL] if not val . startswith ( [string] ) : continue [EOL] val = val . replace ( [string] , [string] ) [EOL] [EOL] attributes = str . split ( str ( val ) , [string] ) [EOL] for a in attributes : [EOL] split = str . split ( a . strip ( ) , [string] ) [EOL] if ( len ( split ) < [number] ) : continue [EOL] key = split [ [number] ] [EOL] value = split [ [number] ] [EOL] if key == [string] : key = namespace + key [EOL] foreign_object_tag [ key ] = value [EOL] [EOL] foreign_object_tag . append ( text_tag ) [EOL] [EOL] [comment] [EOL] foreign_tags_to_add . append ( { [string] : element , [string] : foreign_object_tag } ) [EOL] [EOL] [EOL] if ( not [string] in options or ( [string] in options and options [ [string] ] == True ) ) : [EOL] elements_with_data_names = svg . select ( [string] ) [EOL] for element in elements_with_data_names : [EOL] [EOL] [comment] [EOL] if element . has_attr ( [string] ) : del element . attrs [ [string] ] [EOL] [EOL] val = element [ [string] ] [EOL] [comment] [EOL] del element [ [string] ] [EOL] [EOL] if not val . startswith ( [string] ) : continue [EOL] val = val . replace ( [string] , [string] ) [EOL] [EOL] attributes = str . split ( str ( val ) , [string] ) [EOL] for a in attributes : [EOL] split = str . split ( a . strip ( ) , [string] ) [EOL] if ( len ( split ) < [number] ) : continue [EOL] key = split [ [number] ] [EOL] value = split [ [number] ] [EOL] if key == [string] or key == [string] : value = namespace + value [EOL] element [ key ] = value [EOL] [EOL] [EOL] if [string] in options and options [ [string] ] == True : [EOL] [comment] [EOL] text_elements = svg . select ( [string] ) [EOL] for element in text_elements : [EOL] if element . has_attr ( [string] ) : del element . attrs [ [string] ] [EOL] if element . has_attr ( [string] ) : del element . attrs [ [string] ] [EOL] if element . has_attr ( [string] ) : del element . attrs [ [string] ] [EOL] if element . has_attr ( [string] ) : del element . attrs [ [string] ] [EOL] [EOL] [comment] [EOL] if [string] in options and options [ [string] ] == True : [EOL] for t in foreign_tags_to_add : [EOL] t [ [string] ] . append ( t [ [string] ] ) [EOL] [EOL] [EOL] return svg [EOL] [EOL] [EOL] def write_svg ( svg , dst_path , options ) : [EOL] [EOL] result = str ( svg ) [EOL] result = unicode ( result , [string] ) [EOL] [comment] [EOL] result = result . replace ( [string] , [string] ) [EOL] result = result . replace ( [string] , [string] ) [EOL] result = result . replace ( [string] , [string] ) [EOL] result = result . replace ( [string] , [string] ) [EOL] [EOL] if [string] in options and options [ [string] ] == True : [EOL] result = result . replace ( [string] , [string] ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] result = result . replace ( [string] , [string] ) [EOL] result = result . encode ( [string] ) [EOL] [EOL] result_file = create_file ( dst_path , [string] ) [EOL] result_file . write ( result ) [EOL] result_file . close ( ) [EOL] [EOL] [EOL] [EOL] def compile_svg ( src_path , dst_path , options ) : [EOL] namespace = None [EOL] [EOL] if [string] in options : [EOL] namespace = options [ [string] ] [EOL] svg = parse_svg ( src_path , namespace , options ) [EOL] [EOL] if [string] in options : [EOL] attrs = options [ [string] ] [EOL] for k in attrs : [EOL] svg . svg [ k ] = attrs [ k ] [EOL] [EOL] if [string] in options : [EOL] current_desc = svg . select ( [string] ) [EOL] if current_desc : [EOL] current_desc [ [number] ] . string = options [ [string] ] [EOL] else : [EOL] desc_tag = svg . new_tag ( [string] ) [EOL] desc_tag . string = options [ [string] ] [EOL] svg . svg . append ( desc_tag ) [EOL] [EOL] write_svg ( svg , dst_path , options ) [EOL] [EOL] [EOL] [EOL] def compile_master_svg ( src_path , dst_path , options ) : [EOL] print ( [string] ) [EOL] print ( src_path ) [EOL] file = open ( src_path ) [EOL] svg = BeautifulSoup ( file , [string] ) [EOL] file . close ( ) [EOL] [EOL] master_viewbox = svg . svg . attrs [ [string] ] [EOL] [EOL] import_tags = svg . select ( [string] ) [EOL] for tag in import_tags : [EOL] [EOL] component_path = str ( tag [ [string] ] ) [EOL] [EOL] namespace = None [EOL] if tag . has_attr ( [string] ) : namespace = tag [ [string] ] [EOL] [EOL] component = parse_svg ( component_path , namespace , options ) [EOL] [EOL] component_viewbox = component . svg . attrs [ [string] ] [EOL] if master_viewbox != component_viewbox : [EOL] print ( [string] + master_viewbox + [string] + component_viewbox + [string] ) [EOL] [EOL] [comment] [EOL] for child in component . svg : tag . contents . append ( child ) [EOL] [EOL] [comment] [EOL] del tag . attrs [ [string] ] [EOL] if namespace : del tag . attrs [ [string] ] [EOL] [EOL] [EOL] if [string] in options : [EOL] attrs = options [ [string] ] [EOL] for k in attrs : [EOL] print ( k + [string] + attrs [ k ] ) [EOL] svg . svg [ k ] = attrs [ k ] [EOL] [EOL] [EOL] if [string] in options and options [ [string] ] is not False : [EOL] current_title = svg . select ( [string] ) [EOL] if current_title : [EOL] current_title [ [number] ] . string = options [ [string] ] [EOL] else : [EOL] title_tag = svg . new_tag ( [string] ) [EOL] title_tag . string = options [ [string] ] [EOL] svg . svg . append ( title_tag ) [EOL] [EOL] [EOL] if [string] in options : [EOL] current_desc = svg . select ( [string] ) [EOL] if current_desc : [EOL] current_desc [ [number] ] . string = options [ [string] ] [EOL] else : [EOL] desc_tag = svg . new_tag ( [string] ) [EOL] desc_tag . string = options [ [string] ] [EOL] svg . svg . append ( desc_tag ) [EOL] [EOL] [EOL] write_svg ( svg , dst_path , options ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def parse_markup ( src_path , output ) : [EOL] print ( src_path ) [EOL] read_state = [number] [EOL] file = open ( src_path , [string] ) [EOL] for line in file : [EOL] if line . startswith ( [string] ) : [EOL] path = line . split ( [string] ) [ [number] ] . rstrip ( [string] ) . rstrip ( [string] ) [EOL] parse_markup ( path , output ) [EOL] else : [EOL] output . append ( line ) [EOL] [EOL] file . close ( ) [EOL] [EOL] def inline_svg ( src_path , dst_path ) : [EOL] output = [ ] [EOL] [EOL] file = create_file ( dst_path , [string] ) [EOL] parse_markup ( src_path , output ) [EOL] for line in output : file . write ( line ) [EOL] file . close ( ) [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] from . common_settings import * [EOL] [EOL] DEBUG = True [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] DATABASES [ [string] ] [ [string] ] = [string] [EOL] DATABASES [ [string] ] [ [string] ] = [string] [EOL] DATABASES [ [string] ] [ [string] ] = [string] [EOL] DATABASES [ [string] ] [ [string] ] = [string] [EOL] DATABASES [ [string] ] [ [string] ] = [string] [EOL] [EOL] MAILING_LIST_FROM_EMAIL = [string] [EOL] MAILING_LIST_LINK_DOMAIN = [string] [EOL] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_HOST_USER = [string] [EOL] EMAIL_HOST_PASSWORD = os . getenv ( [string] ) [EOL] EMAIL_PORT = [number] [EOL] EMAIL_USE_TLS = True [EOL] [EOL] CELERY_BROKER_URL = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import configparser [EOL] [docstring] [EOL] [EOL] import os [EOL] import configparser [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] if not os . environ . get ( [string] ) : [EOL] parser = configparser . ConfigParser ( ) [EOL] parser . read ( [string] ) [EOL] for name , val in parser [ [string] ] . items ( ) : [EOL] os . environ [ name . upper ( ) ] = val [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = [ [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import base64 [EOL] import json [EOL] from unittest . mock import patch [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . test import TestCase [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from mailinglist . factories import SubscriberFactory [EOL] from mailinglist . models import Subscriber , MailingList [EOL] [EOL] [EOL] class MockSendEmailToSubscriberTask : [EOL] [EOL] def setUp ( self ) : [EOL] self . send_confirmation_email_patch = patch ( [string] ) [EOL] self . send_confirmation_email_mock = self . send_confirmation_email_patch . start ( ) [EOL] super ( ) . setUp ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . send_confirmation_email_patch . stop ( ) [EOL] self . send_confirmation_email_mock = None [EOL] super ( ) . tearDown ( ) [EOL] [EOL] [EOL] class SubscriberCreationTestCase ( MockSendEmailToSubscriberTask , TestCase ) : [EOL] [EOL] def test_calling_create_queues_confirmation_email_task ( self ) : [EOL] user = get_user_model ( ) . objects . create_user ( username = [string] ) [EOL] mailing_list = MailingList . objects . create ( name = [string] , owner = user , ) [EOL] Subscriber . objects . create ( email = [string] , mailing_list = mailing_list ) [EOL] self . assertEqual ( self . send_confirmation_email_mock . delay . call_count , [number] ) [EOL] [EOL] [EOL] class SubscriberManagerTestCase ( TestCase ) : [EOL] [EOL] def testConfirmedSubscribersForMailingList ( self ) : [EOL] mailing_list = MailingList . objects . create ( name = [string] , owner = get_user_model ( ) . objects . create_user ( username = [string] ) ) [EOL] confirmed_users = [ SubscriberFactory ( confirmed = True , mailing_list = mailing_list ) for n in range ( [number] ) ] [EOL] unconfirmed_users = [ SubscriberFactory ( mailing_list = mailing_list ) for n in range ( [number] ) ] [EOL] confirmed_users_qs = Subscriber . objects . confirmed_subscribers_for_mailing_list ( mailing_list = mailing_list ) [EOL] self . assertEqual ( len ( confirmed_users ) , confirmed_users_qs . count ( ) ) [EOL] for user in confirmed_users_qs : [EOL] self . assertIn ( user , confirmed_users ) [EOL] [EOL] [EOL] class ListMailingListsWithAPI ( APITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] password = [string] [EOL] username = [string] [EOL] self . user = get_user_model ( ) . objects . create_user ( username = username , password = password ) [EOL] cred_bytes = [string] . format ( username , password ) . encode ( [string] ) [EOL] self . basic_auth = base64 . b64encode ( cred_bytes ) . decode ( [string] ) [EOL] [EOL] def test_listing_all_my_mailing_lists ( self ) : [EOL] mailing_lists = [ MailingList . objects . create ( name = [string] . format ( i ) , owner = self . user ) for i in range ( [number] ) ] [EOL] [EOL] self . client . credentials ( HTTP_AUTHORIZATION = [string] . format ( self . basic_auth ) ) [EOL] [EOL] response = self . client . get ( [string] ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] parsed = json . loads ( response . content ) [EOL] self . assertEqual ( [number] , len ( parsed ) ) [EOL] [EOL] content = str ( response . content ) [EOL] for ml in mailing_lists : [EOL] self . assertIn ( str ( ml . id ) , content ) [EOL] self . assertIn ( ml . name , content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Dict , Tuple , Type [EOL] import typing [EOL] import extra [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework import serializers [EOL] [EOL] from mailinglist . models import MailingList , Subscriber [EOL] [EOL] [EOL] class MailingListSerializer ( serializers . HyperlinkedModelSerializer ) : [EOL] owner = serializers . PrimaryKeyRelatedField ( queryset = get_user_model ( ) . objects . all ( ) ) [EOL] [EOL] class Meta : [EOL] model = MailingList [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] extra_kwargs = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } [EOL] [EOL] [EOL] class SubscriberSerializer ( serializers . HyperlinkedModelSerializer ) : [EOL] class Meta : [EOL] model = Subscriber [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } [EOL] [EOL] [EOL] class ReadOnlyEmailSubscriberSerializer ( serializers . HyperlinkedModelSerializer ) : [EOL] class Meta : [EOL] model = Subscriber [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.serializers.MailingListSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.serializers.ReadOnlyEmailSubscriberSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.serializers.ReadOnlyEmailSubscriberSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.serializers.ReadOnlyEmailSubscriberSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from mailinglist . models import Message , MailingList , Subscriber [EOL] [EOL] admin . site . register ( Message ) [EOL] admin . site . register ( MailingList ) [EOL] admin . site . register ( Subscriber ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import extra [EOL] from unittest . mock import patch [EOL] [EOL] import factory [EOL] [EOL] from mailinglist . models import Subscriber [EOL] [EOL] [EOL] class SubscriberFactory ( factory . DjangoModelFactory ) : [EOL] email = factory . Sequence ( lambda n : [string] % n ) [EOL] [EOL] class Meta : [EOL] model = Subscriber [EOL] [EOL] @ classmethod def _create ( cls , model_class , * args , ** kwargs ) : [EOL] with patch ( [string] [string] ) : [EOL] return super ( ) . _create ( model_class = model_class , * args , ** kwargs ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.factories.SubscriberFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.factories.SubscriberFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import datetime [EOL] import typing [EOL] import logging [EOL] import extra [EOL] import logging [EOL] from datetime import datetime [EOL] from smtplib import SMTPServerDisconnected [EOL] [EOL] from django . conf import settings [EOL] from django . core . mail import send_mail [EOL] from django . template import engines , Context [EOL] from django . urls import reverse [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] CONFIRM_SUBSCRIPTION_HTML = [string] [EOL] [EOL] CONFIRM_SUBSCRIPTION_TXT = [string] [EOL] [EOL] SUBSCRIBER_MESSAGE_TXT = [string] [EOL] [EOL] SUBSCRIBER_MESSAGE_HTML = [string] [EOL] [EOL] [EOL] class EmailTemplateContext ( Context ) : [EOL] [EOL] @ staticmethod def make_link ( path ) : [EOL] return settings . MAILING_LIST_LINK_DOMAIN + path [EOL] [EOL] def __init__ ( self , subscriber , dict_ = None , ** kwargs ) : [EOL] if dict_ is None : [EOL] dict_ = { } [EOL] email_ctx = self . common_context ( subscriber ) [EOL] email_ctx . update ( dict_ ) [EOL] super ( ) . __init__ ( email_ctx , ** kwargs ) [EOL] [EOL] def common_context ( self , subscriber ) : [EOL] subscriber_pk_kwargs = { [string] : subscriber . id } [EOL] unsubscribe_path = reverse ( [string] , kwargs = subscriber_pk_kwargs ) [EOL] return { [string] : subscriber , [string] : subscriber . mailing_list , [string] : self . make_link ( unsubscribe_path ) , } [EOL] [EOL] [EOL] def send_confirmation_email ( subscriber ) : [EOL] logger . info ( [string] ) [EOL] mailing_list = subscriber . mailing_list [EOL] confirmation_link = EmailTemplateContext . make_link ( reverse ( [string] , kwargs = { [string] : subscriber . id } ) ) [EOL] context = EmailTemplateContext ( subscriber , { [string] : confirmation_link } ) [EOL] subject = [string] . format ( mailing_list . name ) [EOL] [EOL] dt_engine = engines [ [string] ] . engine [EOL] text_body_template = dt_engine . get_template ( CONFIRM_SUBSCRIPTION_TXT ) [EOL] text_body = text_body_template . render ( context = context ) [EOL] html_body_template = dt_engine . get_template ( CONFIRM_SUBSCRIPTION_HTML ) [EOL] html_body = html_body_template . render ( context = context ) [EOL] [EOL] try : [EOL] send_mail ( subject = subject , message = text_body , from_email = settings . MAILING_LIST_FROM_EMAIL , recipient_list = ( subscriber . email , ) , html_message = html_body ) [EOL] except SMTPServerDisconnected as e : [EOL] logger . error ( [string] % ( e , e ) ) [EOL] except Exception as e : [EOL] logger . error ( [string] % ( e , e ) ) [EOL] [EOL] [EOL] def send_subscriber_message ( subscriber_message ) : [EOL] message = subscriber_message . message [EOL] context = EmailTemplateContext ( subscriber_message . subscriber , { [string] : message . body , } ) [EOL] [EOL] dt_engine = engines [ [string] ] . engine [EOL] text_body_template = dt_engine . get_template ( SUBSCRIBER_MESSAGE_TXT ) [EOL] text_body = text_body_template . render ( context = context ) [EOL] html_body_template = dt_engine . get_template ( SUBSCRIBER_MESSAGE_HTML ) [EOL] html_body = html_body_template . render ( context = context ) [EOL] [EOL] utcnow = datetime . utcnow ( ) [EOL] subscriber_message . last_attempt = utcnow [EOL] subscriber_message . save ( ) [EOL] [EOL] success = send_mail ( subject = message . subject , message = text_body , from_email = settings . MAILING_LIST_FROM_EMAIL , recipient_list = ( subscriber_message . subscriber . email , ) , html_message = html_body ) [EOL] [EOL] if success == [number] : [EOL] subscriber_message . sent = utcnow [EOL] subscriber_message . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from celery import shared_task [EOL] [EOL] from mailinglist import emails [EOL] [EOL] [EOL] @ shared_task def send_confirmation_email_to_subscriber ( subscriber_id ) : [EOL] from mailinglist . models import Subscriber [EOL] subscriber = Subscriber . objects . get ( id = subscriber_id ) [EOL] emails . send_confirmation_email ( subscriber ) [EOL] [EOL] [EOL] @ shared_task def build_subscriber_messages_for_message ( message_id ) : [EOL] from mailinglist . models import Message , SubscriberMessage [EOL] message = Message . objects . get ( id = message_id ) [EOL] SubscriberMessage . objects . create_from_message ( message ) [EOL] [EOL] [EOL] @ shared_task def send_subscriber_message ( subscriber_message_id ) : [EOL] from mailinglist . models import SubscriberMessage [EOL] subscriber_message = SubscriberMessage . objects . get ( id = subscriber_message_id ) [EOL] emails . send_subscriber_message ( subscriber_message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import extra [EOL] from django import forms [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] from mailinglist . models import MailingList , Subscriber , Message [EOL] [EOL] [EOL] class SubscriberForm ( forms . ModelForm ) : [EOL] mailing_list = forms . ModelChoiceField ( widget = forms . HiddenInput , queryset = MailingList . objects . all ( ) , disabled = True , ) [EOL] [EOL] class Meta : [EOL] model = Subscriber [EOL] fields = [ [string] , [string] , ] [EOL] [EOL] [EOL] class MessageForm ( forms . ModelForm ) : [EOL] mailing_list = forms . ModelChoiceField ( widget = forms . HiddenInput , queryset = MailingList . objects . all ( ) , disabled = True , ) [EOL] [EOL] class Meta : [EOL] model = Message [EOL] fields = [ [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class MailingListForm ( forms . ModelForm ) : [EOL] owner = forms . ModelChoiceField ( widget = forms . HiddenInput , queryset = get_user_model ( ) . objects . all ( ) , disabled = True , ) [EOL] [EOL] class Meta : [EOL] model = MailingList [EOL] fields = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.SubscriberForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.MailingListForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.MessageForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.MailingListForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.MailingListForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.forms.MailingListForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . exceptions import PermissionDenied , FieldDoesNotExist [EOL] [EOL] from mailinglist . models import MailingList [EOL] [EOL] [EOL] class UserCanUseMailingList : [EOL] [EOL] def get_object ( self , queryset = None ) : [EOL] obj = super ( ) . get_object ( queryset ) [EOL] user = self . request . user [EOL] if type ( obj ) is MailingList : [EOL] if obj . user_can_use_mailing_list ( user ) : [EOL] return obj [EOL] else : [EOL] raise PermissionDenied ( ) [EOL] [EOL] mailing_list_attr = getattr ( obj , [string] ) [EOL] if type ( mailing_list_attr ) is MailingList : [EOL] if mailing_list_attr . user_can_use_mailing_list ( user ) : [EOL] return obj [EOL] else : [EOL] raise PermissionDenied [EOL] raise FieldDoesNotExist ( [string] [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MailinglistConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] from mailinglist . models import Subscriber , MailingList [EOL] [EOL] [EOL] class IsOwnerPermission ( BasePermission ) : [EOL] [EOL] message = [string] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] user = request . user [EOL] if type ( obj ) is Subscriber : [EOL] return obj . mailing_list . user_can_use_mailing_list ( user ) [EOL] elif type ( obj ) is MailingList : [EOL] return obj . user_can_use_mailing_list ( user ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import logging [EOL] import extra [EOL] import logging [EOL] import uuid [EOL] [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from mailinglist import tasks [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class MailingList ( models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] owner = models . ForeignKey ( to = settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . id } ) [EOL] [EOL] def user_can_use_mailing_list ( self , user ) : [EOL] return user == self . owner [EOL] [EOL] [EOL] class SubscriberManager ( models . Manager ) : [EOL] [EOL] def confirmed_subscribers_for_mailing_list ( self , mailing_list ) : [EOL] qs = self . get_queryset ( ) [EOL] qs = qs . filter ( confirmed = True ) [EOL] qs = qs . filter ( mailing_list = mailing_list ) [EOL] return qs [EOL] [EOL] [EOL] class Subscriber ( models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] email = models . EmailField ( ) [EOL] confirmed = models . BooleanField ( default = False ) [EOL] mailing_list = models . ForeignKey ( to = MailingList , on_delete = models . CASCADE ) [EOL] [EOL] objects = SubscriberManager ( ) [EOL] [EOL] class Meta : [EOL] unique_together = [ [string] , [string] , ] [EOL] [EOL] def save ( self , force_insert = False , force_update = False , using = None , update_fields = None ) : [EOL] is_new = self . _state . adding or force_insert [EOL] super ( ) . save ( force_insert = force_insert , force_update = force_update , using = using , update_fields = update_fields ) [EOL] logger . info ( [string] % ( is_new , self . confirmed ) ) [EOL] if is_new and not self . confirmed : [EOL] self . send_confirmation_email ( ) [EOL] [EOL] def send_confirmation_email ( self ) : [EOL] logger . info ( [string] ) [EOL] tasks . send_confirmation_email_to_subscriber . delay ( self . id ) [EOL] [EOL] [EOL] class Message ( models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] mailing_list = models . ForeignKey ( to = MailingList , on_delete = models . CASCADE ) [EOL] subject = models . CharField ( max_length = [number] ) [EOL] body = models . TextField ( ) [EOL] started = models . DateTimeField ( default = None , null = True ) [EOL] finished = models . DateTimeField ( default = None , null = True ) [EOL] [EOL] def save ( self , force_insert = False , force_update = False , using = None , update_fields = None ) : [EOL] is_new = self . _state . adding or force_insert [EOL] super ( ) . save ( force_insert = force_insert , force_update = force_update , using = using , update_fields = update_fields ) [EOL] if is_new : [EOL] tasks . build_subscriber_messages_for_message . delay ( self . id ) [EOL] [EOL] [EOL] class SubscriberMessageManager ( models . Manager ) : [EOL] [EOL] def create_from_message ( self , message ) : [EOL] confirmed_subs = Subscriber . objects . confirmed_subscribers_for_mailing_list ( message . mailing_list ) [EOL] return [ self . create ( message = message , subscriber = subscriber ) for subscriber in confirmed_subs ] [EOL] [EOL] [EOL] class SubscriberMessage ( models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] message = models . ForeignKey ( to = Message , on_delete = models . CASCADE ) [EOL] subscriber = models . ForeignKey ( to = Subscriber , on_delete = models . CASCADE ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] sent = models . DateTimeField ( default = None , null = True ) [EOL] last_attempt = models . DateTimeField ( default = None , null = True ) [EOL] [EOL] objects = SubscriberMessageManager ( ) [EOL] [EOL] def save ( self , force_insert = False , force_update = False , using = None , update_fields = None ) : [EOL] is_new = self . _state . adding or force_insert [EOL] super ( ) . save ( force_insert = force_insert , force_update = force_update , using = using , update_fields = update_fields ) [EOL] if is_new : [EOL] self . send ( ) [EOL] [EOL] def send ( self ) : [EOL] tasks . send_subscriber_message . delay ( self . id )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.MailingList]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.MailingList]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.MailingList]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Subscriber]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Subscriber]$ 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Subscriber]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Subscriber]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $extra.docker.django.mailinglist.models.SubscriberManager$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.mailinglist.models.SubscriberMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $extra.docker.django.mailinglist.models.SubscriberMessageManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False , primary_key = True , serialize = False ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . DateTimeField ( default = None , null = True ) ) , ( [string] , models . DateTimeField ( default = None , null = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import extra [EOL] from django . conf import settings [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . urls import reverse [EOL] from django . views . generic . edit import CreateView [EOL] [EOL] [EOL] class RegisterView ( CreateView ) : [EOL] template_name = [string] [EOL] form_class = UserCreationForm [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse ( settings . LOGIN_REDIRECT_URL ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[extra.docker.django.user.views.RegisterView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import extra [EOL] from django . conf import settings [EOL] [EOL] import factory [EOL] [EOL] [EOL] class UserFactory ( factory . DjangoModelFactory ) : [EOL] username = factory . Sequence ( lambda n : [string] % n ) [EOL] password = [string] [EOL] [EOL] class Meta : [EOL] model = settings . AUTH_USER_MODEL [EOL] [EOL] @ classmethod def _create ( cls , model_class , * args , ** kwargs ) : [EOL] manager = cls . _get_manager ( model_class ) [EOL] return manager . create_user ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.user.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[extra.docker.django.user.factories.UserFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL]	0 0
	0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AdoptionsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Pattern , List , Any [EOL] import typing [EOL] import os [EOL] import re [EOL] import subprocess as sp [EOL] [EOL] req_re = re . compile ( [string] ) [EOL] the_cwd = os . getcwd ( ) [EOL] [EOL] def get_project_dir ( ) : [EOL] if [string] in the_cwd . split ( [string] ) [ - [number] : ] : [EOL] prj = os . path . dirname ( the_cwd ) [EOL] else : [EOL] prj = os . getcwd ( ) [EOL] return prj [EOL] [EOL] def find_requirements ( prj ) : [EOL] if not os . getcwd ( ) == prj : os . chdir ( prj ) [EOL] if os . path . isdir ( os . path . join ( prj , [string] ) ) : [EOL] os . chdir ( os . path . join ( prj , [string] ) ) [EOL] req_files = [ f for f in os . listdir ( os . getcwd ( ) ) if f . endswith ( [string] ) ] [EOL] else : [EOL] req_files = [ f for f in os . listdir ( os . getcwd ( ) ) if f . endswith ( [string] ) \ [EOL] and f . __contains__ ( [string] ) ] [EOL] return req_files [EOL] [EOL] def get_modules ( req_files ) : [EOL] mod_list = [ ] [EOL] for f in req_files : [EOL] with open ( f ) as fd : [EOL] for line in fd . readlines ( ) : [EOL] if line . __contains__ ( [string] ) : [EOL] sep = [string] [EOL] elif line . __contains__ ( [string] ) : [EOL] sep = [string] [EOL] elif line . __contains__ ( [string] ) : [EOL] sep = [string] [EOL] else : [EOL] continue [EOL] items = line . split ( sep ) [EOL] mod = items [ [number] ] [EOL] ver = items [ [number] ] . split ( ) [ [number] ] [EOL] mod_list . append ( { [string] : mod , [string] : ver , [string] : sep } ) [EOL] return sorted ( mod_list , key = lambda mod : mod [ [string] ] ) [EOL] [EOL] def write_upgrade ( prj , mod_list ) : [EOL] pip_up = os . path . join ( prj , [string] ) [EOL] if os . path . exists ( pip_up ) : [EOL] os . remove ( pip_up ) [EOL] with open ( pip_up , [string] ) as pip_up_fd : [EOL] for mod in mod_list : [EOL] pip_up_fd . write ( f"{ mod [ [string] ] } [string] { mod [ [string] ] }{ mod [ [string] ] } [string] " ) [EOL] return pip_up [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] prj = get_project_dir ( ) [EOL] reqs = find_requirements ( prj ) [EOL] mod_list = get_modules ( reqs ) [EOL] pip_up = write_upgrade ( prj , mod_list ) [EOL] print ( f" [string] { pip_up }" ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class VolunteersAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class EventsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FostersAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DogsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SponsorshipsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DonationsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0