from odoo_password_tools . cli import manage [EOL] [EOL] if __name__ == [string] : [EOL] manage ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from odoo_password_tools . cli import test_db [EOL] [EOL] if __name__ == [string] : [EOL] test_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import configparser [EOL] import click [EOL] import configparser [EOL] [EOL] from . database import test , change_password [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] , type = click . Path ( exists = True ) ) def test_db ( config_path ) : [EOL] config = configparser . ConfigParser ( ) [EOL] config . read ( config_path ) [EOL] [EOL] dbname = config [ [string] ] . get ( [string] ) [EOL] dbpassword = config [ [string] ] . get ( [string] ) [EOL] dbuser = config [ [string] ] . get ( [string] ) [EOL] dbhost = config [ [string] ] . get ( [string] ) [EOL] dbport = config [ [string] ] . getint ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] test ( dbname , dbuser , dbpassword , dbhost , dbport ) [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] , type = click . Path ( exists = True ) ) def manage ( config_path ) : [EOL] config = configparser . ConfigParser ( ) [EOL] config . read ( config_path ) [EOL] [EOL] dbname = config [ [string] ] . get ( [string] ) [EOL] dbpassword = config [ [string] ] . get ( [string] ) [EOL] dbuser = config [ [string] ] . get ( [string] ) [EOL] dbhost = config [ [string] ] . get ( [string] ) [EOL] dbport = config [ [string] ] . getint ( [string] ) [EOL] [EOL] password = config [ [string] ] . get ( [string] ) [EOL] login = config [ [string] ] . get ( [string] ) [EOL] [EOL] change_password ( { [string] : dbname , [string] : dbpassword , [string] : dbuser , [string] : dbhost , [string] : dbport } , { [string] : password , [string] : login } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] import psycopg2 [EOL] from passlib . context import CryptContext [EOL] from typing import Dict [EOL] [EOL] def change_password ( connection , data ) : [EOL] cxt = CryptContext ( schemes = [ [string] ] ) [EOL] pw_hash = cxt . hash ( data [ [string] ] ) [EOL] [EOL] with psycopg2 . connect ( ** connection ) as conn : [EOL] with conn . cursor ( ) as cursor : [EOL] update_query = ( [string] [string] [string] ) [EOL] cursor . execute ( update_query , { [string] : pw_hash , [string] : data [ [string] ] , } ) [EOL] [EOL] with conn . cursor ( ) as cursor : [EOL] query = ( [string] [string] ) [EOL] [EOL] cursor . execute ( query , { [string] : data [ [string] ] , } ) [EOL] [EOL] result = cursor . fetchone ( ) [EOL] [EOL] if not result : [EOL] raise Exception ( [string] ) [EOL] [EOL] check_password = result [ [number] ] [EOL] [EOL] if cxt . verify ( data [ [string] ] , check_password ) : [EOL] print ( [string] ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] def test ( dbname , dbuser , dbpassword , dbhost , dbport ) : [EOL] with psycopg2 . connect ( dbname = dbname , user = dbuser , password = dbpassword , host = dbhost , port = dbport , ) : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0