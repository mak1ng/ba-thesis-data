	0
import sys [EOL] if len ( sys . argv ) > [number] and sys . argv [ [number] ] in { [string] , [string] } : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import logging [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] [comment] [EOL] if hasattr ( sys , [string] ) : [EOL] import os [EOL] os . chdir ( sys . _MEIPASS ) [comment] [EOL] if sys . platform == [string] : [EOL] import os [EOL] os . environ [ [string] ] = [string] [EOL] from persimmon . view import ViewApp [EOL] [EOL] [EOL] ViewApp ( ) . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . backend import InputEntry , BlockEntry , OutputEntry , IR , Backend [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import persimmon [EOL] from threading import Thread [EOL] from pymitter import EventEmitter [EOL] from typing import List , Dict , Any , Tuple , NamedTuple , Callable , TYPE_CHECKING [EOL] from persimmon . view . pins import Pin [comment] [EOL] import logging [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] InputEntry = NamedTuple ( [string] , [ ( [string] , int ) , ( [string] , [string] ) , ( [string] , int ) ] ) [EOL] BlockEntry = NamedTuple ( [string] , [ ( [string] , List [ int ] ) , ( [string] , Callable [ ... , None ] ) , ( [string] , List [ int ] ) ] ) [EOL] OutputEntry = NamedTuple ( [string] , [ ( [string] , List [ int ] ) , ( [string] , [string] ) , ( [string] , int ) ] ) [EOL] IR = NamedTuple ( [string] , [ ( [string] , Dict [ int , BlockEntry ] ) , ( [string] , Dict [ int , InputEntry ] ) , ( [string] , Dict [ int , OutputEntry ] ) ] ) [EOL] [EOL] class Backend ( EventEmitter ) : [EOL] def exec_graph ( self , ir ) : [EOL] self . ir = ir [EOL] Thread ( target = self . _exec_graph_parallel ) . start ( ) [EOL] [EOL] def _exec_graph_parallel ( self ) : [EOL] [docstring] [EOL] unseen = set ( self . ir . blocks . keys ( ) ) [comment] [EOL] [comment] [EOL] seen = { } [comment] [EOL] while unseen : [EOL] unseen , seen = self . _exec_block ( unseen . pop ( ) , unseen , seen ) [EOL] logger . info ( [string] ) [EOL] self . emit ( [string] ) [EOL] [EOL] def _exec_block ( self , current , unseen , seen ) : [EOL] [docstring] [EOL] logger . debug ( [string] . format ( current ) ) [EOL] current_block = self . ir . blocks [ current ] [EOL] for in_pin in map ( lambda x : self . ir . inputs [ x ] , current_block . inputs ) : [EOL] origin = in_pin . origin [EOL] if origin not in seen : [EOL] dependency = self . ir . outputs [ origin ] . block [EOL] unseen . remove ( dependency ) [EOL] unseen , seen = self . _exec_block ( dependency , unseen , seen ) [EOL] in_pin . pin . val = seen [ origin ] [EOL] [EOL] current_block . function ( ) [EOL] self . emit ( [string] , current ) [EOL] logger . debug ( [string] . format ( current ) ) [EOL] [EOL] for out_id in current_block . outputs : [EOL] seen [ out_id ] = self . ir . outputs [ out_id ] . pin . val [EOL] return unseen , seen [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.InputEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.BlockEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.OutputEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.IR]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.BlockEntry]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.InputEntry]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.backend.backend.OutputEntry]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.set,typing.Dict[builtins.int,typing.Any]]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . blackboard import BlackBoard , Blocks [EOL] from . view import ViewApp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import logging [EOL] import persimmon [EOL] from persimmon . view . blackboard import BlackBoard , Blocks [comment] [EOL] from persimmon . view . util import PlayButton , Notification [EOL] [comment] [EOL] from kivy . app import App [EOL] from kivy . config import Config [EOL] from kivy . factory import Factory [EOL] from kivy . properties import ObjectProperty [EOL] [comment] [EOL] from kivy . uix . image import Image [EOL] from kivy . uix . tabbedpanel import TabbedPanel [EOL] from kivy . uix . floatlayout import FloatLayout [EOL] [comment] [EOL] import logging [EOL] [EOL] from kivy . lang import Builder [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] Config . read ( [string] ) [EOL] [EOL] class ViewApp ( App ) : [EOL] background = ObjectProperty ( ) [EOL] [EOL] def build ( self ) : [EOL] print ( [string] ) [EOL] self . title = [string] [EOL] self . background = Image ( source = [string] ) . texture [EOL] [EOL] class Backdrop ( FloatLayout ) : [EOL] [docstring] [EOL] play_button = ObjectProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . add_hint ( ) [EOL] [EOL] def on_graph_executed ( self ) : [EOL] self . play_button . ready ( ) [EOL] [EOL] def remove_hint ( self ) : [EOL] self . remove_widget ( self . hint ) [EOL] self . hint = None [EOL] [EOL] def add_hint ( self ) : [EOL] self . hint = Factory . Hint ( ) [EOL] self . add_widget ( self . hint , index = len ( self . children ) ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.view.ViewApp]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.view.Backdrop]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import InputPin , OutputPin [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . properties import ObjectProperty [EOL] from kivy . lang import Builder [EOL] [EOL] from sklearn . model_selection import cross_val_score [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class CrossValidationBlock ( Block ) : [EOL] data_input = ObjectProperty ( ) [EOL] estimator_input = ObjectProperty ( ) [EOL] cross_val_input = ObjectProperty ( ) [EOL] cross_out = ObjectProperty ( ) [EOL] [EOL] [EOL] def function ( self ) : [EOL] X = self . data_input . val . iloc [ : , : - [number] ] [EOL] y = self . data_input . val . iloc [ : , - [number] ] [EOL] self . cross_out . val = cross_val_score ( self . estimator_input . val , X , y , cv = self . cross_val_input . val ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.crossvalidationblock.CrossValidationBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.crossvalidationblock.CrossValidationBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.crossvalidationblock.CrossValidationBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.crossvalidationblock.CrossValidationBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import InputPin [EOL] from persimmon . view . util import FileDialog [EOL] from persimmon . view . blocks . block import Block [EOL] [EOL] from kivy . properties import ObjectProperty , StringProperty [EOL] from kivy . lang import Builder [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class CSVOutBlock ( Block ) : [EOL] in_1 = ObjectProperty ( ) [EOL] path = StringProperty ( ) [EOL] file_dialog = ObjectProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . file_dialog = FileDialog ( dir = [string] , filters = [ [string] ] , size_hint = ( [number] , [number] ) ) [EOL] [comment] [EOL] self . file_dialog . bind ( file_chosen = self . setter ( [string] ) ) [EOL] self . tainted = True [EOL] self . tainted_msg = [string] . format ( self . title ) [EOL] [EOL] def function ( self ) : [EOL] if type ( self . in_1 . val ) == np . ndarray : [EOL] self . in_1 . val = pd . DataFrame ( self . in_1 . val ) [EOL] self . in_1 . val . to_csv ( path_or_buf = self . path , index = False ) [EOL] [EOL] def on_path ( self , instance , value ) : [EOL] self . tainted = not value . endswith ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvoutblock.CSVOutBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvoutblock.CSVOutBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvoutblock.CSVOutBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import InputPin , OutputPin [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty [EOL] [EOL] from sklearn . model_selection import TimeSeriesSplit [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class TSSplitBlock ( Block ) : [EOL] out_1 = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] self . out_1 . val = TimeSeriesSplit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.tssplitblock.TSSplitBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import OutputPin [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . properties import ObjectProperty [EOL] from kivy . lang import Builder [EOL] [EOL] from sklearn . neighbors import KNeighborsClassifier [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class KNNBlock ( Block ) : [EOL] est_out = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] self . est_out . val = KNeighborsClassifier ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.knnblock.KNNBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import OutputPin [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty [EOL] [EOL] from sklearn . ensemble import RandomForestClassifier [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class RandomForestBlock ( Block ) : [EOL] out_1 = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] self . out_1 . val = RandomForestClassifier ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.randomforestblock.RandomForestBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import OutputPin [EOL] from persimmon . view . util import FileDialog [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . properties import ObjectProperty , StringProperty [EOL] from kivy . lang import Builder [EOL] [EOL] import pandas as pd [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class CSVInBlock ( Block ) : [EOL] out_1 = ObjectProperty ( ) [EOL] file_chosen = StringProperty ( ) [EOL] file_dialog = ObjectProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . file_dialog = FileDialog ( dir = [string] , filters = [ [string] ] , size_hint = ( [number] , [number] ) ) [EOL] [comment] [EOL] self . file_dialog . bind ( file_chosen = self . setter ( [string] ) ) [EOL] self . tainted = True [EOL] self . tainted_msg = [string] . format ( self . title ) [EOL] [EOL] def function ( self ) : [EOL] self . out_1 . val = pd . read_csv ( self . file_chosen , header = [number] ) [EOL] [EOL] def on_file_chosen ( self , instance , value ) : [EOL] self . tainted = not value . endswith ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvinblock.CSVInBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvinblock.CSVInBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.csvinblock.CSVInBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0
from . block import Block [EOL] [EOL] from . svmblock import SVMBlock [EOL] from . knnblock import KNNBlock [EOL] from . sgdblock import SGDBlock [EOL] from . fitblock import FitBlock [EOL] from . dictblock import DictBlock [EOL] from . printblock import PrintBlock [EOL] from . csvinblock import CSVInBlock [EOL] from . csvoutblock import CSVOutBlock [EOL] from . tenfoldblock import TenFoldBlock [EOL] from . predictblock import PredictBlock [EOL] from . tssplitblock import TSSplitBlock [EOL] from . gridsearchblock import GridSearchBlock [EOL] from . randomforestblock import RandomForestBlock [EOL] from . crossvalidationblock import CrossValidationBlock [EOL] [EOL] from . smart_bubble import SmartBubble [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] from persimmon . view . pins import InputPin , OutputPin [EOL] [EOL] from kivy . properties import ObjectProperty [EOL] from kivy . lang import Builder [EOL] from sklearn . model_selection import GridSearchCV [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class GridSearchBlock ( Block ) : [EOL] data_in = ObjectProperty ( ) [EOL] est_in = ObjectProperty ( ) [EOL] params_in = ObjectProperty ( ) [EOL] est_out = ObjectProperty ( ) [EOL] score_out = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] results = GridSearchCV ( self . est_in . val , self . params_in . val ) [EOL] results . fit ( self . data_in . val . iloc [ : , : - [number] ] , self . data_in . val . iloc [ : , - [number] ] ) [EOL] self . est_out . val = results . best_estimator_ [EOL] self . score_out . val = ( str ( results . best_params_ ) + [string] + str ( results . best_score_ * [number] ) + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.gridsearchblock.GridSearchBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.gridsearchblock.GridSearchBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.gridsearchblock.GridSearchBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.gridsearchblock.GridSearchBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.gridsearchblock.GridSearchBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . blocks . block import Block [EOL] from persimmon . view . pins import OutputPin [EOL] [EOL] from kivy . properties import ObjectProperty , StringProperty [EOL] from kivy . lang import Builder [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class DictBlock ( Block ) : [EOL] dict_out = ObjectProperty ( ) [EOL] string_in = StringProperty ( ) [EOL] tinput = ObjectProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . tainted = True [EOL] self . tainted_msg = ( [string] . format ( self . title ) ) [EOL] [EOL] [comment] [EOL] @ Block . tainted . getter def tainted ( self ) : [EOL] try : [EOL] string = eval ( self . tinput . text ) [EOL] if type ( string ) == dict : [EOL] self . tainted = False [EOL] else : [EOL] self . tainted = True [EOL] self . tainted_msg = ( [string] . format ( self . title , type ( string ) . __name__ ) ) [EOL] except Exception : [EOL] self . tainted = True [EOL] self . tainted_msg = ( [string] . format ( self . title ) ) [EOL] return self . _tainted [EOL] [EOL] def function ( self ) : [EOL] self . dict_out . val = eval ( self . tinput . text ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.dictblock.DictBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.dictblock.DictBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.dictblock.DictBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import InputPin , OutputPin [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty [EOL] [EOL] from sklearn . model_selection import KFold [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class TenFoldBlock ( Block ) : [EOL] out_1 = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] self . out_1 . val = KFold ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.tenfoldblock.TenFoldBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . pins import InputPin [EOL] from persimmon . view . util import Notification [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class PrintBlock ( Block ) : [EOL] in_1 = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] Notification ( title = [string] , message = str ( self . in_1 . val ) ) . open ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.printblock.PrintBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from persimmon . view . blocks . block import Block [comment] [EOL] from persimmon . view . pins import InputPin , OutputPin [EOL] [EOL] from kivy . properties import ObjectProperty [EOL] from kivy . lang import Builder [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class FitBlock ( Block ) : [EOL] data_in = ObjectProperty ( ) [EOL] est_in = ObjectProperty ( ) [EOL] est_out = ObjectProperty ( ) [EOL] [EOL] def function ( self ) : [EOL] X , y = self . data_in . val . iloc [ : , : - [number] ] , self . data_in . val . iloc [ : , - [number] ] [EOL] self . est_out . val = self . est_in . val . fit ( X , y ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.blocks.fitblock.FitBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.fitblock.FitBlock]$ 0 0 0 0 0 $typing.Type[persimmon.view.blocks.fitblock.FitBlock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . types import Type , BlockType , AbstractWidget [EOL] from . connection import Connection [EOL] [EOL] from . filedialog import FileDialog [EOL] from . notification import Notification [EOL] from . play_button import PlayButton [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from kivy . uix . image import Image , AsyncImage [EOL] from kivy . uix . behaviors import ButtonBehavior [EOL] from kivy . animation import Animation [EOL] from kivy . lang import Builder [EOL] from kivy . properties import NumericProperty [EOL] from kivy . loader import Loader [EOL] from kivy . graphics . context_instructions import Rotate , PushMatrix , PopMatrix [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class PlayButton ( ButtonBehavior , AsyncImage ) : [EOL] angle = NumericProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . source = [string] [EOL] self . anim = Animation ( angle = [number] , duration = [number] ) [EOL] self . anim += Animation ( angle = [number] , duration = [number] ) [EOL] self . anim . repeat = True [EOL] self . running = False [EOL] [EOL] def on_press ( self ) : [EOL] self . source = [string] [EOL] [EOL] def start ( self ) : [EOL] self . running = True [EOL] self . anim . start ( self ) [EOL] self . source = [string] [EOL] self . disabled = True [EOL] [EOL] def ready ( self ) : [EOL] self . anim . cancel ( self ) [EOL] self . disabled = False [EOL] self . source = [string] [EOL] self . angle = [number] [EOL] [EOL] def on_angle ( self , instance , values ) : [EOL] [docstring] [EOL] self . angle %= [number] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.util.play_button.PlayButton]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from kivy . uix . popup import Popup [EOL] from kivy . uix . label import Label [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty , StringProperty [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class Notification ( Popup ) : [EOL] message = StringProperty ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.util.notification.Notification]$ 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Tuple , List , Any [EOL] import typing [EOL] import logging [EOL] import kivy [EOL] import builtins [EOL] import persimmon [EOL] from kivy . uix . widget import Widget [EOL] from kivy . uix . label import Label [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ObjectProperty , ListProperty [EOL] from kivy . graphics import Color , Ellipse , Line [EOL] from kivy . clock import Clock [EOL] from kivy . lang import Builder [EOL] from kivy . factory import Factory [EOL] from kivy . core . window import Window [EOL] [comment] [EOL] from kivy . input import MotionEvent [EOL] from typing import Tuple , TYPE_CHECKING [EOL] if TYPE_CHECKING : [EOL] from persimmon . view . pins . pin import Pin [comment] [EOL] import numpy as np [EOL] [comment] [EOL] from math import pi [EOL] import logging [EOL] [EOL] [EOL] [comment] [EOL] Builder . load_string ( [string] ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] class Info ( Label ) : [EOL] pass [EOL] [EOL] class Connection ( Widget ) : [EOL] start = ObjectProperty ( allownone = True ) [EOL] end = ObjectProperty ( allownone = True ) [EOL] color = ListProperty ( ) [EOL] lin = ObjectProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] if self . start : [EOL] self . forward = True [EOL] [comment] [EOL] self . bez_start , self . bez_end = [ self . start . center ] * [number] [EOL] with self . canvas . before : [EOL] Color ( * self . color ) [EOL] self . lin = Line ( bezier = self . bez_start * [number] , width = [number] ) [EOL] self . _bind_pin ( self . start ) [EOL] else : [EOL] self . forward = False [EOL] self . bez_start , self . bez_end = [ self . end . center ] * [number] [EOL] with self . canvas . before : [EOL] Color ( * self . color ) [EOL] self . lin = Line ( bezier = self . bez_end * [number] , width = [number] ) [EOL] self . _bind_pin ( self . end ) [EOL] self . warned = False [EOL] self . info = Factory . Info ( pos = self . bez_start ) [EOL] Window . add_widget ( self . info ) [EOL] [EOL] def finish_connection ( self , pin ) : [EOL] [docstring] [EOL] self . remove_info ( ) [EOL] if self . forward : [EOL] self . end = pin [EOL] self . _bind_pin ( self . end ) [EOL] else : [EOL] self . start = pin [EOL] self . _bind_pin ( self . start ) [EOL] [EOL] [comment] [EOL] def on_touch_down ( self , touch ) : [EOL] [docstring] [EOL] [comment] [EOL] if self . start and self . start . collide_point ( * touch . pos ) : [EOL] self . forward = False [EOL] [comment] [EOL] self . _unbind_pin ( self . start ) [EOL] self . start . on_connection_delete ( self ) [EOL] self . start = None [EOL] [comment] [EOL] touch . ud [ [string] ] = self [EOL] Window . add_widget ( self . info ) [EOL] return True [EOL] elif self . end and self . end . collide_point ( * touch . pos ) : [EOL] [comment] [EOL] self . forward = True [EOL] self . _unbind_pin ( self . end ) [EOL] self . end . on_connection_delete ( self ) [EOL] self . end = None [EOL] touch . ud [ [string] ] = self [EOL] Window . add_widget ( self . info ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def follow_cursor ( self , newpos , blackboard ) : [EOL] [docstring] [EOL] if self . forward : [EOL] fixed_edge = self . start [EOL] self . bez_end = [ * newpos ] [EOL] self . _rebezier ( ) [EOL] else : [EOL] fixed_edge = self . end [EOL] self . bez_start = [ * newpos ] [EOL] self . _rebezier ( ) [EOL] self . info . pos = [ * newpos ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if ( self . _in_pin ( blackboard , newpos ) and not self . _in_pin ( blackboard , newpos ) . typesafe ( fixed_edge ) ) : [EOL] [comment] [EOL] self . info . text = [string] [EOL] self . _warn ( ) [EOL] elif ( self . _in_pin ( blackboard , newpos ) and self . _in_pin ( blackboard , newpos ) . typesafe ( fixed_edge ) ) : [EOL] self . info . text = [string] [EOL] if self . warned : [EOL] self . _unwarn ( ) [EOL] else : [EOL] self . info . text = [string] [EOL] if self . warned : [EOL] self . _unwarn ( ) [EOL] [EOL] def delete_connection ( self ) : [EOL] [docstring] [EOL] self . parent . remove_widget ( self ) [comment] [EOL] self . remove_info ( ) [EOL] if self . start : [EOL] self . _unbind_pin ( self . start ) [EOL] self . start . on_connection_delete ( self ) [EOL] if self . end : [EOL] self . _unbind_pin ( self . end ) [EOL] self . end . on_connection_delete ( self ) [EOL] [EOL] def pulse ( self ) : [EOL] [docstring] [EOL] self . it = self . _change_width ( ) [EOL] next ( self . it ) [EOL] Clock . schedule_interval ( lambda _ : next ( self . it ) , [number] ) [comment] [EOL] [EOL] def stop_pulse ( self ) : [EOL] [docstring] [EOL] self . it . throw ( StopIteration ) [EOL] [EOL] def remove_info ( self ) : [EOL] Window . remove_widget ( self . info ) [EOL] [EOL] [comment] [EOL] def _in_pin ( self , blackboard , pos ) : [EOL] block = blackboard . in_block ( * pos ) [EOL] if block : [EOL] pin = block . in_pin ( * pos ) [EOL] if pin : [EOL] return pin [EOL] return False [EOL] [EOL] [comment] [EOL] def _unbind_pin ( self , pin ) : [EOL] [docstring] [EOL] pin . funbind ( [string] , self . _line_bind ) [EOL] [EOL] def _bind_pin ( self , pin ) : [EOL] [docstring] [EOL] pin . fbind ( [string] , self . _line_bind ) [EOL] self . _line_bind ( pin , pin . pos ) [EOL] [EOL] def _line_bind ( self , pin , new_pos ) : [EOL] if pin == self . start : [EOL] self . bez_start = pin . center [EOL] self . _rebezier ( ) [EOL] elif pin == self . end : [EOL] self . bez_end = pin . center [EOL] self . _rebezier ( ) [EOL] else : [EOL] logger . error ( [string] ) [EOL] [EOL] [comment] [EOL] def _change_width ( self ) : [EOL] [docstring] [EOL] try : [EOL] for value in self . _width_gen ( ) : [EOL] self . lin . width = value [EOL] yield [EOL] except StopIteration : [EOL] self . lin . width = [number] [EOL] yield [EOL] yield False [EOL] [EOL] def _width_gen ( self ) : [EOL] [docstring] [EOL] val = [number] [EOL] while True : [EOL] yield np . sin ( val ) + [number] [EOL] val += pi / [number] [EOL] [EOL] [comment] [EOL] def _warn ( self ) : [EOL] [docstring] [EOL] self . warned = True [EOL] self . canvas . before . remove ( self . lin ) [EOL] with self . canvas . before : [EOL] Color ( [number] , [number] , [number] ) [EOL] self . lin = Line ( points = self . lin . points , width = [number] ) [EOL] self . _rebezier ( ) [EOL] [EOL] def _unwarn ( self ) : [EOL] [docstring] [EOL] self . warned = False [EOL] self . canvas . before . remove ( self . lin ) [EOL] with self . canvas . before : [EOL] Color ( * self . color ) [EOL] self . lin = Line ( points = self . lin . points , width = [number] ) [EOL] self . _rebezier ( ) [EOL] [EOL] [comment] [EOL] def _rebezier ( self ) : [EOL] [docstring] [EOL] arc_tan = np . arctan2 ( self . bez_start [ [number] ] - self . bez_end [ [number] ] , self . bez_start [ [number] ] - self . bez_end [ [number] ] ) [EOL] abs_angle = np . abs ( np . degrees ( arc_tan ) ) [EOL] [comment] [EOL] start_right = [ self . bez_start [ [number] ] - [number] - [number] * abs_angle , self . bez_start [ [number] ] ] [EOL] end_left = [ self . bez_end [ [number] ] + [number] + [number] * abs_angle , self . bez_end [ [number] ] ] [EOL] [comment] [EOL] dist = ( min ( self . bez_start [ [number] ] , self . bez_end [ [number] ] ) + abs ( self . bez_start [ [number] ] - self . bez_end [ [number] ] ) / [number] ) [EOL] [comment] [EOL] self . lin . bezier = ( self . bez_start + start_right + [ dist , self . bez_start [ [number] ] ] + [ dist , self . bez_end [ [number] ] ] + end_left + self . bez_end ) [EOL] [EOL] def _search_window ( self ) : [EOL] return Window [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.util.connection.Connection]$ 0 0 0 0 0 $typing.Type[persimmon.view.util.connection.Connection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 $'Pin'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from kivy . uix . popup import Popup [EOL] from kivy . properties import ObjectProperty , StringProperty [EOL] from kivy . lang import Builder [EOL] import kivy . uix . filechooser [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] [comment] [EOL] class FileDialog ( Popup ) : [EOL] [docstring] [EOL] file_chooser = ObjectProperty ( ) [EOL] [comment] [EOL] load_button = ObjectProperty ( ) [EOL] file_chosen = StringProperty ( ) [EOL] [EOL] def __init__ ( self , dir = [string] , filters = None , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] self . file_chooser . path = dir [EOL] if filters : [EOL] self . file_chooser . filters = filters [EOL] else : [EOL] self . file_chooser . filters = [ ] [EOL] [EOL] def toggle_load_button ( self , selection ) : [EOL] if selection : [EOL] [comment] [EOL] self . tinput . text = self . file_chooser . selection [ [number] ] [EOL] self . load_button . disabled = False [EOL] elif self . tinput . text : [EOL] self . load_button . disabled = False [EOL] else : [EOL] self . load_button . disabled = True [EOL] [EOL] def changed_dir ( self , file_chooser , entry , _ ) : [EOL] [comment] [EOL] self . tinput . text = file_chooser . path [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.util.filedialog.FileDialog]$ 0 0 0 0 0 0 0 $typing.Type[persimmon.view.util.filedialog.FileDialog]$ 0 0 0 0 0 $typing.Type[persimmon.view.util.filedialog.FileDialog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum [EOL] from abc import ABCMeta [EOL] from kivy . uix . widget import WidgetMetaclass [EOL] [EOL] [EOL] class AbstractWidget ( ABCMeta , WidgetMetaclass ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] class Type ( Enum ) : [EOL] ANY = [number] , [number] , [number] [EOL] DATAFRAME = [number] , [number] , [number] [EOL] CLASSIFICATOR = [number] , [number] , [number] [EOL] CROSS_VALIDATOR = [number] , [number] , [number] [EOL] STATE = [number] , [number] , [number] [EOL] STR = [number] , [number] , [number] [EOL] [EOL] class BlockType ( Enum ) : [EOL] IO = [number] , [number] , [number] [EOL] CLASSIFICATOR = [number] , [number] , [number] [EOL] MODEL_SELECTION = [number] , [number] , [number] [EOL] CROSS_VALIDATOR = [number] , [number] , [number] [EOL] STATE = [number] , [number] , [number] [EOL] FIT_AND_PREDICT = [number] , [number] , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import logging [EOL] import kivy [EOL] import builtins [EOL] import persimmon [EOL] from persimmon . view . pins . pin import Pin [comment] [EOL] from persimmon . view . util import Connection [EOL] from kivy . properties import ObjectProperty , ListProperty [EOL] from kivy . lang import Builder [EOL] from kivy . graphics import Ellipse , Color [EOL] [EOL] from kivy . input import MotionEvent [EOL] [EOL] import logging [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] class OutputPin ( Pin ) : [EOL] destinations = ListProperty ( ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def on_touch_down ( self , touch ) : [EOL] if ( self . collide_point ( * touch . pos ) and touch . button == [string] and not self . destinations ) : [EOL] logger . info ( [string] ) [EOL] touch . ud [ [string] ] = Connection ( end = self , color = self . color ) [EOL] self . destinations . append ( touch . ud [ [string] ] ) [EOL] [comment] [EOL] self . block . parent . parent . parent . connections . add_widget ( touch . ud [ [string] ] ) [EOL] self . _circle_pin ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def on_touch_up ( self , touch ) : [EOL] if ( [string] in touch . ud . keys ( ) and touch . button == [string] and self . collide_point ( * touch . pos ) ) : [EOL] if ( touch . ud [ [string] ] . start and self . typesafe ( touch . ud [ [string] ] . start ) ) : [EOL] self . connect_pin ( touch . ud [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] logger . info ( [string] ) [EOL] touch . ud [ [string] ] . delete_connection ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def on_connection_delete ( self , connection ) : [EOL] if connection in self . destinations : [EOL] self . destinations . remove ( connection ) [EOL] [comment] [EOL] self . funbind ( [string] , self . _bind_circle ) [EOL] self . canvas . remove ( self . circle ) [EOL] del self . circle [EOL] else : [EOL] logger . error ( [string] ) [EOL] [EOL] def connect_pin ( self , connection ) : [EOL] logger . info ( [string] ) [EOL] connection . finish_connection ( self ) [EOL] self . destinations . append ( connection ) [EOL] self . _circle_pin ( ) [EOL] [EOL] def _circle_pin ( self ) : [EOL] if hasattr ( self , [string] ) : [EOL] logger . error ( [string] ) [EOL] return [EOL] with self . canvas : [EOL] Color ( * self . color ) [EOL] self . circle = Ellipse ( pos = self . pos , size = self . size ) [EOL] self . fbind ( [string] , self . _bind_circle ) [EOL] [EOL] def _bind_circle ( self , instance , value ) : [EOL] self . circle . pos = self . pos [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.pins.outpin.OutputPin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $persimmon.view.util.Connection$ 0 0 0 0 $persimmon.view.util.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 $persimmon.view.util.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import persimmon [EOL] from kivy . uix . widget import Widget [EOL] from kivy . uix . behaviors import ButtonBehavior [EOL] from kivy . vector import Vector [EOL] from kivy . lang import Builder [EOL] from kivy . properties import ListProperty [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] [EOL] class CircularButton ( ButtonBehavior , Widget ) : [EOL] color = ListProperty ( [ [number] , [number] , [number] ] ) [EOL] [EOL] def collide_point ( self , x , y ) : [EOL] return Vector ( x , y ) . distance ( self . center ) <= self . width / [number] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[persimmon.view.pins.circularbutton.CircularButton]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import logging [EOL] import kivy [EOL] import builtins [EOL] import persimmon [EOL] from persimmon . view . pins . pin import Pin [comment] [EOL] from persimmon . view . util import Connection [EOL] from kivy . lang import Builder [EOL] from kivy . graphics import Ellipse , Color [EOL] from kivy . properties import ObjectProperty [EOL] from kivy . input import MotionEvent [EOL] import logging [EOL] [EOL] [EOL] Builder . load_file ( [string] ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] class InputPin ( Pin ) : [EOL] origin = ObjectProperty ( allownone = True ) [EOL] [EOL] [comment] [EOL] def on_touch_down ( self , touch ) : [EOL] if ( self . collide_point ( * touch . pos ) and touch . button == [string] and not self . origin ) : [EOL] logger . info ( [string] ) [EOL] touch . ud [ [string] ] = Connection ( start = self , color = self . color ) [EOL] self . origin = touch . ud [ [string] ] [EOL] [comment] [EOL] self . block . parent . parent . parent . connections . add_widget ( touch . ud [ [string] ] ) [EOL] self . _circle_pin ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def on_touch_up ( self , touch ) : [EOL] if ( [string] in touch . ud . keys ( ) and touch . button == [string] and self . collide_point ( * touch . pos ) ) : [EOL] if ( touch . ud [ [string] ] . end and self . typesafe ( touch . ud [ [string] ] . end ) ) : [EOL] self . connect_pin ( touch . ud [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] logger . info ( [string] ) [EOL] touch . ud [ [string] ] . delete_connection ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def on_connection_delete ( self , connection ) : [EOL] if self . origin : [EOL] self . origin = None [EOL] [comment] [EOL] self . funbind ( [string] , self . _bind_circle ) [EOL] self . canvas . remove ( self . circle ) [EOL] del self . circle [EOL] else : [EOL] logger . error ( [string] ) [EOL] [EOL] def connect_pin ( self , connection ) : [EOL] logger . info ( [string] ) [EOL] connection . finish_connection ( self ) [EOL] self . origin = connection [EOL] self . _circle_pin ( ) [EOL] [EOL] def typesafe ( self , other ) : [EOL] return super ( ) . typesafe ( other ) and self . origin == None [EOL] [EOL] def _circle_pin ( self ) : [EOL] if hasattr ( self , [string] ) : [EOL] logger . error ( [string] ) [EOL] return [EOL] with self . canvas : [EOL] Color ( * self . color ) [EOL] self . circle = Ellipse ( pos = self . pos , size = self . size ) [EOL] self . fbind ( [string] , self . _bind_circle ) [EOL] [EOL] def _bind_circle ( self , instance , value ) : [EOL] self . circle . pos = self . pos [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kivy.input.MotionEvent$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $persimmon.view.util.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $persimmon.view.pins.pin.Pin$ 0 0 0 0 0 0 0 0 0 0 $persimmon.view.pins.pin.Pin$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . circularbutton import CircularButton [EOL] from . pin import Pin [EOL] from . inpin import InputPin [EOL] from . outpin import OutputPin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0