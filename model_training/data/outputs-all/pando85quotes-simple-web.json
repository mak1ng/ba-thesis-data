from typing import Type [EOL] import typing [EOL] import api [EOL] from locust import HttpLocust , TaskSet , task [EOL] [EOL] [EOL] class UserBehavior ( TaskSet ) : [EOL] @ task ( [number] ) def index ( self ) : [EOL] self . client . get ( [string] ) [EOL] [EOL] [EOL] class WebsiteUser ( HttpLocust ) : [EOL] task_set = UserBehavior [EOL] min_wait = [number] [EOL] max_wait = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.locustfile.UserBehavior]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from typing import Callable , Awaitable , Any [EOL] import typing [EOL] import aiohttp [EOL] import aiohttp . web [EOL] import aiohttp_cors [EOL] from typing import Awaitable , Callable [EOL] [EOL] from quotes . handlers import random_handler , ping_handler [EOL] from quotes . config import AUDIO_ENDPOINT , AUDIOS_PATH , CORS_ALLOW_ORIGIN [EOL] [EOL] [EOL] def get_app ( setup_db ) : [EOL] app = aiohttp . web . Application ( ) [EOL] app . on_startup . append ( setup_db ) [EOL] app . add_routes ( [ aiohttp . web . get ( [string] , ping_handler ) , aiohttp . web . get ( [string] , random_handler ) , aiohttp . web . static ( AUDIO_ENDPOINT , AUDIOS_PATH ) ] ) [EOL] [EOL] cors = aiohttp_cors . setup ( app , defaults = { CORS_ALLOW_ORIGIN : aiohttp_cors . ResourceOptions ( ) , } ) [EOL] [ cors . add ( route ) for route in list ( app . router . routes ( ) ) ] [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Application$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import aiohttp . web [EOL] [EOL] from quotes . app import get_app [EOL] from quotes . db import setup_db [EOL] from quotes . logger import access_logger [EOL] [EOL] [EOL] def main ( ) : [EOL] app = get_app ( setup_db ) [EOL] aiohttp . web . run_app ( app , access_log = access_logger ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import os [EOL] [EOL] [EOL] DATA_PATH = os . environ . get ( [string] , [string] ) [EOL] AUDIOS_PATH = os . environ . get ( [string] , f'{ DATA_PATH } [string] ' ) [EOL] QUOTES_PATH = os . environ . get ( [string] , f'{ DATA_PATH } [string] ' ) [EOL] [EOL] AUDIO_ENDPOINT = os . environ . get ( [string] , [string] ) [EOL] QUOTES_AUTHOR = os . environ . get ( [string] , [string] ) [EOL] QUOTES_AUDIO_KEY = os . environ . get ( [string] , [string] ) [EOL] QUOTES_TRANSCRIPT_KEY = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] CORS_ALLOW_ORIGIN = os . environ . get ( [string] , [string] ) [EOL] [EOL] LOG_LEVEL = os . environ . get ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import NamedTuple [EOL] [EOL] [EOL] class Quote ( NamedTuple ) : [EOL] quote = ... [EOL] author = ... [EOL] audio = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import quotes [EOL] import functools [EOL] import builtins [EOL] import json [EOL] from functools import partial [EOL] [EOL] from quotes . quote import Quote [EOL] from quotes . functools import bind [EOL] [EOL] [EOL] def _quote_to_json ( quote ) : [EOL] return json . dumps ( { [string] : quote . audio , [string] : quote . author , [string] : quote . quote } , ensure_ascii = False ) [EOL] [EOL] [EOL] quote_to_json = partial ( bind , _quote_to_json ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 0 0
[EOL] import quotes . main [EOL] [EOL] if __name__ == [string] : [EOL] quotes . main . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Any [EOL] import typing [EOL] import asyncio [EOL] import functools [EOL] import unittest [EOL] [EOL] from aiohttp . test_utils import AioHTTPTestCase , unittest_run_loop [EOL] [EOL] from quotes . app import get_app [EOL] from quotes . db import get_random_quote , setup_db [EOL] [EOL] [EOL] class DBTests ( AioHTTPTestCase ) : [EOL] [EOL] async def get_application ( self ) : [EOL] return get_app ( setup_db ) [EOL] [EOL] @ unittest_run_loop async def test_get_random_quote ( self ) : [EOL] total_queries = [number] [EOL] success_rate = [number] [EOL] range_rate = [number] [EOL] example_quote = [string] [string] [EOL] random_quote_generator = [ get_random_quote ( self ) for _ in range ( [number] , total_queries ) ] [EOL] [EOL] random_quote_list = await asyncio . gather ( * random_quote_generator ) [EOL] results_list = [ [number] if random_quote . quote == example_quote else [number] for random_quote in random_quote_list ] [EOL] [EOL] def sum ( x , y ) : [EOL] return x + y [EOL] result_success = functools . reduce ( sum , results_list ) [EOL] result_success_rate = result_success / total_queries [EOL] [EOL] assert ( result_success_rate > success_rate - range_rate ) [EOL] assert ( result_success_rate < success_rate + range_rate ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $builtins.float$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from aiohttp . test_utils import AioHTTPTestCase , unittest_run_loop [EOL] import unittest [EOL] [EOL] from quotes . app import get_app [EOL] from quotes . db import setup_db [EOL] [EOL] [EOL] class RoutesTests ( AioHTTPTestCase ) : [EOL] [EOL] async def get_application ( self ) : [EOL] return get_app ( setup_db ) [EOL] [EOL] @ unittest_run_loop async def test_ping ( self , url = [string] ) : [EOL] request = await self . client . request ( [string] , url ) [EOL] assert request . status == [number] [EOL] response = await request . json ( ) [EOL] assert response == [string] [EOL] [EOL] @ unittest_run_loop async def test_random_handler ( self , url = [string] ) : [EOL] request = await self . client . request ( [string] , url ) [EOL] assert request . status == [number] [EOL] quote = await request . json ( ) [EOL] assert ( [string] and [string] ) in quote [EOL] print ( request . headers ) [EOL] assert ( [string] in request . headers and request . headers [ [string] ] == [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0