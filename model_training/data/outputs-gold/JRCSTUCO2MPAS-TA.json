	0
import pkg_resources [EOL] def _dist_patch ( ) : [EOL] import pkg_resources [EOL] ep = pkg_resources . EntryPoint . parse ( [string] ) [EOL] ep . dist = d = pkg_resources . Distribution ( [string] ) [EOL] d . _ep_map = { [string] : { [string] : ep } } [EOL] pkg_resources . working_set . add ( d , [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] _dist_patch ( ) [EOL] from co2mpas . cli import cli [EOL] [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyInstaller . utils . hooks import collect_all [EOL] datas , binaries , hiddenimports = collect_all ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyInstaller . utils . hooks import collect_all [EOL] datas , binaries , hiddenimports = collect_all ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyInstaller . utils . hooks import collect_all [EOL] datas , binaries , hiddenimports = collect_all ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyInstaller . utils . hooks import collect_all [EOL] datas , binaries , hiddenimports = collect_all ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from PyInstaller . utils . hooks import collect_all [EOL] datas , binaries , hiddenimports = collect_all ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Set , Any , Dict [EOL] import click [EOL] import typing [EOL] import ddt [EOL] import filecmp [EOL] import unittest [EOL] import os . path as osp [EOL] [EOL] cdir = osp . abspath ( osp . dirname ( __file__ ) ) [EOL] fdir = osp . join ( cdir , [string] ) [EOL] pdir = osp . abspath ( osp . join ( cdir , [string] ) ) [EOL] [EOL] [EOL] @ ddt . ddt class CLI ( unittest . TestCase ) : [EOL] [comment] [EOL] def setUp ( self ) : [EOL] import functools [EOL] from co2mpas . cli import cli [EOL] from click . testing import CliRunner [EOL] self . runner = CliRunner ( ) [EOL] self . invoke = functools . partial ( self . runner . invoke , cli ) [EOL] [EOL] @ ddt . idata ( ( ( ) , ( [string] , ) , ( [string] , ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ) ) def test_0_template ( self , options ) : [EOL] from co2mpas . cli import template [EOL] kw = template . make_context ( [string] , list ( options ) ) . params [EOL] rfp = osp . join ( pdir , [string] % kw [ [string] ] ) [EOL] with self . runner . isolated_filesystem ( ) : [EOL] result = self . invoke ( ( [string] , ) + options ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] self . assertTrue ( filecmp . cmp ( kw [ [string] ] , rfp ) , [string] ) [EOL] [EOL] @ ddt . idata ( ( ( ) , ( [string] , ) , ( [string] , ) , ( [string] , ) ) ) def test_1_demo ( self , options ) : [EOL] import glob [EOL] from co2mpas . cli import demo [EOL] kw = demo . make_context ( [string] , list ( options ) ) . params [EOL] d_demo = osp . join ( pdir , [string] ) [EOL] demos = { osp . basename ( fp ) : fp for fp in glob . glob ( d_demo ) } [EOL] with self . runner . isolated_filesystem ( ) : [EOL] result = self . invoke ( ( [string] , ) + options ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] for fpath in glob . glob ( osp . join ( kw [ [string] ] , [string] ) ) : [EOL] self . assertTrue ( filecmp . cmp ( fpath , demos [ osp . basename ( fpath ) ] ) , [string] % fpath ) [EOL] [EOL] [comment] [EOL] @ ddt . idata ( ( ( osp . join ( fdir , [string] ) , osp . join ( pdir , [string] ) , [string] , osp . join ( fdir , [string] ) , [string] , osp . join ( fdir , [string] ) , [string] ) , ( osp . join ( pdir , [string] ) , [string] , [string] , osp . join ( fdir , [string] ) ) , ) ) def test_2_run ( self , options ) : [EOL] import glob [EOL] import pandas as pd [EOL] from co2mpas . cli import run [EOL] kw = run . make_context ( [string] , list ( options ) ) . params [EOL] with self . runner . isolated_filesystem ( ) : [EOL] result = self . invoke ( ( [string] , ) + options ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] cols = [string] , [string] , [string] [EOL] cols1 = ( [string] , ) + cols [ [number] : ] [EOL] df = pd . read_excel ( glob . glob ( osp . join ( kw [ [string] ] , [string] ) ) [ [number] ] , header = [ [number] , [number] , [number] , [number] , [number] ] , skiprows = [ [number] ] ) [EOL] df . set_index ( list ( df . columns [ : [number] ] ) , inplace = True ) [EOL] df . rename_axis ( [ [string] , [string] ] , inplace = True ) [EOL] df = df . droplevel ( - [number] ) . droplevel ( - [number] , [number] ) . swaplevel ( [number] , - [number] , [number] ) [EOL] if cols1 in df : [EOL] df = df [ cols ] . fillna ( value = df [ cols1 ] ) . T [EOL] else : [EOL] df = df [ cols ] . T [EOL] cycles = { tuple ( map ( [string] . format , ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ) ) + ( [string] , ) : { [string] , [string] } , ( [string] , [string] , [string] ) + tuple ( map ( [string] . format , ( [string] , [string] ) ) ) : { [string] , [string] , [string] , [string] } , ( [string] , [string] ) : { [string] , [string] } , } [EOL] [EOL] for k , v in df . items ( ) : [EOL] v = v . dropna ( ) . to_dict ( ) [EOL] if k == [string] and [string] in df : [EOL] self . assertEqual ( v , df [ [string] ] . dropna ( ) . to_dict ( ) ) [EOL] for i , c in cycles . items ( ) : [comment] [EOL] if k in i : [EOL] self . assertSetEqual ( c , set ( v ) ) [EOL] break [EOL] else : [EOL] raise ValueError ( f'{ k } [string] ' ) [EOL] [EOL] @ ddt . idata ( ( ( ) , ( [string] , ) , ( [string] , ) , ( [string] , [string] , osp . join ( fdir , [string] ) ) ) ) def test_3_conf ( self , options ) : [EOL] import yaml [EOL] import schedula as sh [EOL] from co2mpas . defaults import dfl [EOL] from co2mpas . cli import conf [EOL] kw = conf . make_context ( [string] , list ( options ) ) . params [EOL] t = { k for k , _ in sh . stack_nested_keys ( dfl . to_dict ( ) ) } [EOL] with self . runner . isolated_filesystem ( ) : [EOL] result = self . invoke ( ( [string] , ) + options ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] with open ( kw [ [string] ] , [string] ) as f : [EOL] r = dict ( sh . stack_nested_keys ( yaml . load ( f ) ) ) [EOL] self . assertSetEqual ( set ( r ) , t ) [EOL] if kw [ [string] ] : [EOL] with open ( kw [ [string] ] , [string] ) as f : [EOL] for k , v in sh . stack_nested_keys ( yaml . load ( f ) ) : [EOL] self . assertEqual ( r [ k ] , v ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,...],typing.Set[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,...],typing.Set[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import unittest [EOL] import co2mpas . core . model . physical . wheels as wheels [EOL] import ddt [EOL] [EOL] [EOL] @ ddt . ddt class TyreCode ( unittest . TestCase ) : [EOL] @ ddt . data ( ( [number] , { [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , ( [number] , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } ) , ( [number] , { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } ) , ( [number] , { [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [number] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] } ) , ( [number] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] } ) , ( [number] , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } ) , ( [number] , { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } ) , ) def test_calculate_r_wheels ( self , case ) : [EOL] result , tyre_dimensions = case [EOL] res = wheels . calculate_r_wheels ( tyre_dimensions ) [EOL] self . assertEqual ( result , res ) [EOL] [EOL] @ ddt . data ( ( [string] , { [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] } ) , ( [string] , { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } ) , ( [string] , { [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] } ) , ( [string] , { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } ) , ( [string] , { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } ) , ) def test_calculate_tyre_dimensions ( self , case ) : [EOL] tyre_code , result = case [EOL] res = wheels . calculate_tyre_dimensions ( tyre_code ) [EOL] self . assertEqual ( result , res ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0