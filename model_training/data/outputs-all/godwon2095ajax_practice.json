from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import item_show , like_toggle , create_review , delete_review [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , item_show , name = [string] ) , path ( [string] , like_toggle , name = [string] ) , path ( [string] , create_review , name = [string] ) , path ( [string] , delete_review , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from users . models import User [EOL] from . models import Item , Like , Review [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . views . decorators . http import require_POST [EOL] [EOL] from django . http import HttpResponse [EOL] import json [EOL] [EOL] [EOL] def item_list ( request ) : [EOL] items = Item . objects . all ( ) [EOL] context = { [string] : items } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def item_show ( request , item_id ) : [EOL] item = get_object_or_404 ( Item , pk = item_id ) [EOL] context = { [string] : item } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] @ login_required @ require_POST def like_toggle ( request , item_id ) : [EOL] item = get_object_or_404 ( Item , pk = item_id ) [EOL] item_like , item_like_created = Like . objects . get_or_create ( user = request . user , item = item ) [EOL] [EOL] if not item_like_created : [EOL] item_like . delete ( ) [EOL] result = [string] [EOL] else : [EOL] result = [string] [EOL] [EOL] context = { [string] : result } [EOL] [EOL] return HttpResponse ( json . dumps ( context ) , content_type = [string] ) [EOL] [EOL] [EOL] @ login_required @ require_POST def create_review ( request , item_id ) : [EOL] user = request . user [EOL] item = get_object_or_404 ( Item , pk = item_id ) [EOL] body = request . POST . get ( [string] ) [EOL] review = Review . objects . create ( user = user , item = item , body = body ) [EOL] [EOL] return redirect ( [string] , item . id ) [EOL] [comment] [EOL] [EOL] [EOL] @ login_required [comment] [EOL] def delete_review ( request , review_id ) : [EOL] review = get_object_or_404 ( Review , pk = review_id ) [EOL] review . delete ( ) [EOL] return redirect ( [string] , review . item . id )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Type [EOL] import items [EOL] import typing [EOL] from django . db import models [EOL] from users . models import User [EOL] from shared . timestamp import TimeStampedModel [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class Item ( TimeStampedModel ) : [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] name = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] price = models . PositiveIntegerField ( _ ( [string] ) ) [EOL] description = models . TextField ( _ ( [string] ) , null = True , blank = True ) [EOL] image = models . ImageField ( _ ( [string] ) , upload_to = [string] ) [EOL] liked_users = models . ManyToManyField ( User , blank = True , related_name = [string] , through = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] @ property def likes_count ( self ) : [EOL] return self . liked_users . count ( ) [EOL] [EOL] @ property def reviews ( self ) : [EOL] return Review . objects . filter ( item = self ) [EOL] [EOL] [EOL] [EOL] class Like ( TimeStampedModel ) : [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] unique_together = ( ( [string] , [string] ) ) [EOL] [EOL] user = models . ForeignKey ( User , verbose_name = _ ( [string] ) , on_delete = models . CASCADE ) [EOL] item = models . ForeignKey ( Item , verbose_name = _ ( [string] ) , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Review ( TimeStampedModel ) : [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] item = models . ForeignKey ( Item , on_delete = models . CASCADE ) [EOL] body = models . TextField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . body [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Type[items.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Type[items.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[items.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ItemsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . utils . timezone [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . TextField ( blank = True , null = True , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ImageField ( default = django . utils . timezone . now , upload_to = [string] , verbose_name = [string] ) , preserve_default = False , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from items . views import item_list [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , item_list , name = [string] ) , path ( [string] , include ( [string] ) ) , ] [EOL] [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import users [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractUser [EOL] from shared . timestamp import TimeStampedModel [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class User ( AbstractUser , TimeStampedModel ) : [EOL] followings = models . ManyToManyField ( [string] , related_name = [string] , symmetrical = False ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
	0
	0