from . plugin import set_up , tear_down [EOL] [EOL] [comment] [EOL] from . plugin . sublime_text . OpenUri import * [EOL] from . plugin . sublime_text . OpenUriCommands import * [EOL] [EOL] [EOL] def plugin_loaded ( ) : [EOL] set_up ( ) [EOL] [EOL] [EOL] def plugin_unloaded ( ) : [EOL] tear_down ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Tuple , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import plugin [EOL] import collections [EOL] [EOL] __all__ = ( [string] , ) [EOL] [EOL] OR = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] NOTHING = [string] [EOL] GROUP = [string] [EOL] WORD_BOUNDARY = [string] [EOL] [EOL] [EOL] class TriegexNode : [EOL] def __init__ ( self , char , end , * children ) : [EOL] self . char = char if char is not None else [string] [EOL] self . end = end [EOL] self . children = { child . char : child for child in children } [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( sorted ( self . children . values ( ) , key = lambda x : x . char ) ) [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . children ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self ) [EOL] [EOL] def __contains__ ( self , key ) : [EOL] return key in self . children [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . children [ key ] [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] del self . children [ key ] [EOL] [EOL] def to_regex ( self ) : [EOL] [docstring] [EOL] [EOL] stack = [ self ] [EOL] [comment] [EOL] lookup = [ ] [EOL] [EOL] [comment] [EOL] i = [number] [EOL] j = [number] [EOL] while i < len ( stack ) : [EOL] stack . extend ( sorted ( stack [ i ] . children . values ( ) , key = lambda node : node . char ) ) [EOL] lookup . append ( j ) [EOL] j += len ( stack [ i ] . children ) [EOL] i += [number] [EOL] [EOL] i = len ( stack ) [EOL] [comment] [EOL] sub_regexes = [ None ] * i [EOL] while i > [number] : [EOL] [comment] [EOL] i -= [number] [EOL] node = stack [ i ] [EOL] [comment] [EOL] suffixes = [ sub_regexes [ child ] for child in range ( lookup [ i ] , lookup [ i ] + len ( node . children ) ) ] [EOL] if node . end : [EOL] [comment] [EOL] suffixes += [ WORD_BOUNDARY ] [EOL] [comment] [EOL] if i == [number] : [EOL] suffixes += [ NOTHING ] [EOL] if len ( suffixes ) > [number] : [EOL] sub_regexes [ i ] = node . char + GROUP . format ( OR . join ( suffixes ) ) [EOL] elif len ( suffixes ) == [number] : [EOL] sub_regexes [ i ] = node . char + suffixes [ [number] ] [EOL] else : [EOL] sub_regexes [ i ] = node . char [EOL] [comment] [EOL] return sub_regexes [ [number] ] [EOL] [EOL] [EOL] class Triegex ( collections . MutableSet ) : [EOL] def __init__ ( self , * words ) : [EOL] [docstring] [EOL] [EOL] self . _root = TriegexNode ( None , False ) [EOL] [EOL] for word in words : [EOL] self . add ( word ) [EOL] [EOL] def add ( self , word ) : [EOL] current = self . _root [EOL] for letter in word [ : - [number] ] : [EOL] if letter in current . children : [EOL] current = current . children [ letter ] [EOL] else : [EOL] current = current . children . setdefault ( letter , TriegexNode ( letter , False ) ) [EOL] [comment] [EOL] if word [ - [number] ] in current . children : [EOL] current . children [ word [ - [number] ] ] . end = True [EOL] else : [EOL] current . children [ word [ - [number] ] ] = TriegexNode ( word [ - [number] ] , True ) [EOL] [EOL] def to_regex ( self ) : [EOL] [docstring] [EOL] return self . _root . to_regex ( ) [EOL] [EOL] def _traverse ( self ) : [EOL] stack = [ self . _root ] [EOL] current = self . _root [EOL] while stack : [EOL] yield current [EOL] current = stack . pop ( ) [EOL] stack . extend ( current . children . values ( ) ) [EOL] [EOL] def __iter__ ( self ) : [EOL] paths = { self . _root . char : [ ] } [EOL] for node in self . _traverse ( ) : [EOL] for child in node : [EOL] paths [ child . char ] = [ node . char ] + paths [ node . char ] [EOL] if child . end : [EOL] char = child . char [EOL] yield [string] . join ( reversed ( [ char ] + paths [ char ] ) ) [EOL] [EOL] def __len__ ( self ) : [EOL] return sum ( [number] for _ in self . __iter__ ( ) ) [EOL] [EOL] def __contains__ ( self , word ) : [EOL] current = self . _root [EOL] for char in word : [EOL] if char not in current : [EOL] return False [EOL] current = current [ char ] [EOL] return True and current . end [comment] [EOL] [EOL] def discard ( self , word ) : [EOL] to_delete = [ self . _root ] [EOL] current = self . _root [EOL] for char in word : [EOL] if char not in current : [EOL] return [EOL] current = current [ char ] [EOL] to_delete . append ( current ) [EOL] if not to_delete [ - [number] ] . end : [EOL] return [EOL] while len ( to_delete ) > [number] : [EOL] node = to_delete . pop ( ) [EOL] if len ( node ) == [number] : [EOL] del to_delete [ - [number] ] [ node . char ] [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 $builtins.int$ 0 0 0 0 $typing.List[None]$ 0 0 $typing.List[None]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 $typing.List[None]$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[None]$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 $typing.List[None]$ 0 $builtins.int$ 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[None]$ 0 0 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 $typing.List[None]$ 0 $builtins.int$ 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 $typing.List[None]$ 0 0 0 0 0 0 0 $typing.List[None]$ 0 $builtins.int$ 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 $typing.List[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 $plugin.libs.triegex.TriegexNode$ 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0 $typing.List[plugin.libs.triegex.TriegexNode]$ 0 0 0 0 0 $plugin.libs.triegex.TriegexNode$ 0 0 0 0 0 0