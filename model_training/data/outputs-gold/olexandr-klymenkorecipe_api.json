from typing import Any , List [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import tempfile [EOL] from contextlib import suppress [EOL] from pathlib import Path [EOL] import os [EOL] [EOL] from invoke import task , UnexpectedExit [EOL] [EOL] APP = [string] [EOL] [EOL] ROOT = Path ( __file__ ) . parent [EOL] OPENAPI_GENERATOR_VERSION = [string] [EOL] CONTAINER_PORT = [number] [EOL] _default = object ( ) [EOL] [EOL] [EOL] def is_docker ( ) : [EOL] [docstring] [EOL] with suppress ( FileNotFoundError ) , open ( [string] ) as file : [EOL] for line in file : [EOL] if [string] in line : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] @ task def update ( ctx ) : [EOL] [docstring] [EOL] ctx . run ( [string] ) [EOL] [EOL] [EOL] @ task def pin ( ctx ) : [EOL] [docstring] [EOL] ctx . run ( [string] ) [EOL] [EOL] [EOL] @ task def black ( ctx ) : [EOL] [docstring] [EOL] ctx . run ( [string] ) [EOL] [EOL] [EOL] @ task ( help = { [string] : [string] [string] [string] } ) def lint ( ctx ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] results = [ ] [EOL] [EOL] results . append ( ctx . run ( [string] , warn = True ) ) [EOL] [EOL] print ( [string] ) [EOL] results . append ( ctx . run ( [string] , warn = True ) ) [EOL] [EOL] print ( [string] ) [EOL] results . append ( ctx . run ( [string] , warn = True ) ) [EOL] [EOL] print ( [string] ) [EOL] results . append ( ctx . run ( [string] , warn = True ) ) [EOL] [EOL] print ( [string] ) [EOL] validate_schema ( ctx ) [EOL] [EOL] for result in results : [EOL] if result . exited : [EOL] raise UnexpectedExit ( result ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ task def test ( ctx ) : [EOL] [docstring] [EOL] ctx . run ( f" [string] " , warn = True ) [EOL] ctx . run ( f" [string] " ) [EOL] [EOL] [EOL] @ task ( pre = [ pin ] , help = { [string] : [string] , [string] : [string] , [string] : [string] , } , ) def build_docker ( ctx , tag = [string] , no_cache = False ) : [EOL] [docstring] [EOL] [EOL] ctx . run ( f" [string] { APP } [string] { tag } [string] { [string] if no_cache else [string] } [string] " ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ task ( help = { [string] : f" [string] { CONTAINER_PORT }" } ) def run_dev ( ctx , port = CONTAINER_PORT ) : [EOL] [docstring] [EOL] ctx . run ( f" [string] " ) [EOL] ctx . run ( f" [string] { port }" ) [EOL] [EOL] [EOL] @ task def run ( ctx ) : [EOL] [docstring] [EOL] os . environ [ [string] ] = [string] [EOL] ctx . run ( f" [string] " ) [EOL] ctx . run ( f" [string] " ) [EOL] ctx . run ( f" [string] " f" [string] " f" [string] { CONTAINER_PORT } [string] " ) [EOL] [EOL] [EOL] @ task def validate_schema ( ctx ) : [EOL] [docstring] [EOL] cmd = ( f" [string] { ROOT } [string] { ROOT } [string] " f" [string] { OPENAPI_GENERATOR_VERSION }" ) [EOL] [EOL] with tempfile . TemporaryDirectory ( dir = ROOT , prefix = [string] ) as tempdir : [EOL] tempdir_path = Path ( tempdir ) [EOL] _generate_schema ( ctx , tempdir_path / [string] ) [EOL] [EOL] ctx . run ( f" [string] { cmd } [string] { tempdir_path / [string] } [string] " ) [EOL] [EOL] [EOL] def _generate_schema ( ctx , where ) : [EOL] ctx . run ( f" [string] { where } [string] " f" [string] { CONTAINER_PORT } [string] " f" [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . urls import path , include [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] from rest_framework import permissions [EOL] from django . views . generic import RedirectView [EOL] from drf_yasg import openapi [EOL] from drf_yasg . views import get_schema_view [EOL] [EOL] info = openapi . Info ( title = [string] , default_version = [string] , description = [string] , terms_of_service = [string] , contact = openapi . Contact ( email = [string] ) , license = openapi . License ( name = [string] ) , ) [EOL] schema_view = get_schema_view ( info , public = True , permission_classes = ( permissions . AllowAny , ) , validators = [ [string] ] ) [EOL] [EOL] [EOL] api_patterns = [ path ( [string] , include ( [string] ) ) ] [EOL] [EOL] urlpatterns = ( api_patterns + [ path ( [string] , RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , schema_view . without_ui ( cache_timeout = [number] ) , name = [string] ) , path ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] , ) , path ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import restservice [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] class UserModel ( AbstractUser ) : [EOL] [docstring] [EOL] [EOL] email = models . EmailField ( _ ( [string] ) , unique = True , null = False , blank = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . email [EOL] [EOL] [EOL] class RecipeModel ( models . Model ) : [EOL] name = models . TextField ( null = False , blank = False ) [EOL] user = models . ForeignKey ( UserModel , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . user . username } [string] " [EOL] [EOL] [EOL] class StepModel ( models . Model ) : [EOL] step_text = models . TextField ( null = False , blank = False ) [EOL] recipe = models . ForeignKey ( RecipeModel , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . step_text [EOL] [EOL] [EOL] class IngredientModel ( models . Model ) : [EOL] text = models . TextField ( null = False , blank = False ) [EOL] recipe = models . ForeignKey ( RecipeModel , on_delete = models . CASCADE , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.StepModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.StepModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.IngredientModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.IngredientModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from rest_framework import routers [EOL] [EOL] from restservice import views [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . UserViewSet ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , views . RecipeViewSet . as_view ( { [string] : [string] , [string] : [string] } ) , ) , path ( [string] , views . RecipeViewSet . as_view ( { [string] : [string] } ) ) , path ( [string] , views . RecipeViewSet . as_view ( { [string] : [string] , [string] : [string] } ) , ) , path ( [string] , views . StepViewSet . as_view ( { [string] : [string] , [string] : [string] } ) , ) , path ( [string] , views . IngredientViewSet . as_view ( { [string] : [string] , [string] : [string] } ) , ) , path ( [string] , views . StepViewSet . as_view ( { [string] : [string] } ) ) , path ( [string] , views . StepViewSet . as_view ( { [string] : [string] } ) ) , path ( [string] , views . IngredientViewSet . as_view ( { [string] : [string] } ) ) , path ( [string] , views . IngredientViewSet . as_view ( { [string] : [string] } ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import exception_handler [EOL] [EOL] [EOL] def custom_exception_handler ( exc , context ) : [EOL] response = exception_handler ( exc , context ) [EOL] if issubclass ( exc . __class__ , ObjectDoesNotExist ) : [EOL] response = Response ( exc . args [ [number] ] , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Tuple , Type [EOL] import restservice [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from typing import Optional [EOL] from django . db . models . base import Model [EOL] from rest_framework import serializers [EOL] [EOL] from . models import StepModel , IngredientModel , RecipeModel , UserModel [EOL] [EOL] [EOL] class BaseSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] _related_model = None [EOL] _related_model_filed = None [EOL] _related_primary_key = None [EOL] [EOL] def create ( self , validated_data ) : [EOL] validated_data [ self . _related_model_filed ] = self . _related_model . objects . get ( pk = self . initial_data [ self . _related_primary_key ] ) [EOL] return super ( ) . create ( validated_data ) [EOL] [EOL] [EOL] class StepSerializer ( BaseSerializer ) : [EOL] _related_model = RecipeModel [EOL] _related_model_filed = [string] [EOL] _related_primary_key = [string] [EOL] [EOL] recipe_id = serializers . IntegerField ( source = [string] , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = StepModel [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class IngredientSerializer ( BaseSerializer ) : [EOL] _related_model = RecipeModel [EOL] _related_model_filed = [string] [EOL] _related_primary_key = [string] [EOL] [EOL] recipe_id = serializers . IntegerField ( source = [string] , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = IngredientModel [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class RecipeSerializer ( BaseSerializer ) : [EOL] _related_model = UserModel [EOL] _related_model_filed = [string] [EOL] _related_primary_key = [string] [EOL] [EOL] id = serializers . IntegerField ( read_only = True ) [EOL] user_id = serializers . IntegerField ( source = [string] , read_only = True ) [EOL] steps = StepSerializer ( many = True , read_only = True ) [EOL] ingredients = IngredientSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = RecipeModel [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] validated_data [ [string] ] = UserModel . objects . get ( pk = self . initial_data [ [string] ] ) [EOL] return super ( ) . update ( instance , validated_data ) [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = UserModel [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[django.db.models.base.Model]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[restservice.serializers.StepSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[restservice.serializers.IngredientSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[restservice.serializers.RecipeSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.serializers.RecipeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $restservice.serializers.StepSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $restservice.serializers.IngredientSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.UserModel]$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RecipeApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Optional , List , Type [EOL] import restservice [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from typing import Optional [EOL] from django . db . models . base import Model [EOL] from rest_framework import viewsets [EOL] from rest_framework . response import Response [EOL] [EOL] from . models import UserModel , RecipeModel , StepModel , IngredientModel [EOL] from . serializers import ( UserSerializer , RecipeSerializer , StepSerializer , IngredientSerializer , ) [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] [EOL] http_method_names = [ [string] , [string] , [string] , [string] ] [EOL] queryset = UserModel . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] instance = serializer . save ( ) [EOL] instance . set_password ( instance . password ) [EOL] instance . save ( ) [EOL] [EOL] [EOL] class BaseOneToManyViewSet ( viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] [EOL] _model = None [EOL] _relation_primary_key = None [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] request . data [ self . _relation_primary_key ] = kwargs [ self . _relation_primary_key ] [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL] [EOL] def list ( self , request , * args , ** kwargs ) : [EOL] if self . _relation_primary_key in kwargs : [EOL] queryset = self . _model . objects . filter ( ** { self . _relation_primary_key : kwargs [ self . _relation_primary_key ] } ) [EOL] else : [EOL] queryset = self . _model . objects . all ( ) [EOL] [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] class RecipeViewSet ( BaseOneToManyViewSet ) : [EOL] [docstring] [EOL] [EOL] _model = RecipeModel [EOL] _relation_primary_key = [string] [EOL] queryset = _model . objects . all ( ) [EOL] serializer_class = RecipeSerializer [EOL] [EOL] def update ( self , request , * args , ** kwargs ) : [EOL] instance = self . _model . objects . get ( pk = kwargs [ [string] ] ) [EOL] request . data [ self . _relation_primary_key ] = instance . user_id [EOL] return super ( ) . update ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class StepViewSet ( BaseOneToManyViewSet ) : [EOL] [docstring] [EOL] [EOL] _model = StepModel [EOL] _relation_primary_key = [string] [EOL] queryset = _model . objects . all ( ) [EOL] serializer_class = StepSerializer [EOL] [EOL] [EOL] class IngredientViewSet ( BaseOneToManyViewSet ) : [EOL] [docstring] [EOL] [EOL] _model = IngredientModel [EOL] _relation_primary_key = [string] [EOL] queryset = _model . objects . all ( ) [EOL] serializer_class = IngredientSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.views.UserViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[django.db.models.base.Model]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[restservice.views.RecipeViewSet]$ 0 $typing.Type[restservice.models.RecipeModel]$ 0 0 0 0 0 0 0 $typing.Type[restservice.serializers.RecipeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.StepModel]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[restservice.views.StepViewSet]$ 0 $typing.Type[restservice.models.StepModel]$ 0 0 0 0 0 0 0 $typing.Type[restservice.serializers.StepSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restservice.models.IngredientModel]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[restservice.views.IngredientViewSet]$ 0 $typing.Type[restservice.models.IngredientModel]$ 0 0 0 0 0 0 0 $typing.Type[restservice.serializers.IngredientSerializer]$ 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from django . test import TestCase [EOL] from rest_framework . test import RequestsClient [EOL] [EOL] [EOL] class RecipeTestCase ( TestCase ) : [EOL] @ classmethod def setUpClass ( cls ) : [EOL] cls . client = RequestsClient ( ) [EOL] super ( ) . setUpClass ( ) [EOL] [EOL] def setUp ( self ) : [EOL] self . user1 = self . _create_test_user ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] self . user2 = self . _create_test_user ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] [EOL] def test_get_user ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] [EOL] user = response . json ( ) [EOL] assert user [ [string] ] == [string] [EOL] assert response . status_code == [number] [EOL] [EOL] def test_get_user_not_found ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] [EOL] assert response . status_code == [number] [EOL] [EOL] def test_create_recipe ( self ) : [EOL] new_recipe = self . _create_test_recipe ( user_id = self . user1 [ [string] ] , data = { [string] : [string] } ) [EOL] assert new_recipe == { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ ] , [string] : [ ] , } [EOL] [EOL] def test_get_recipes_by_user_id ( self ) : [EOL] self . _create_test_recipe ( user_id = self . user1 [ [string] ] , data = { [string] : [string] } ) [EOL] self . _create_test_recipe ( user_id = self . user2 [ [string] ] , data = { [string] : [string] } ) [EOL] response = self . client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] recipes = response . json ( ) [EOL] assert recipes == [ { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ ] , [string] : [ ] , } ] [EOL] [EOL] def test_get_all_recipes ( self ) : [EOL] self . _create_test_recipe ( user_id = self . user1 [ [string] ] , data = { [string] : [string] } ) [EOL] self . _create_test_recipe ( user_id = self . user2 [ [string] ] , data = { [string] : [string] } ) [EOL] response = self . client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == [ { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ ] , [string] : [ ] , } , { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ ] , [string] : [ ] , } , ] [EOL] [EOL] def test_update_recipe ( self ) : [EOL] self . _create_test_recipe ( user_id = self . user1 [ [string] ] , data = { [string] : [string] } ) [EOL] response = self . client . put ( [string] , { [string] : [string] } , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [ ] , [string] : [ ] , } [EOL] [EOL] def test_delete_recipe ( self ) : [EOL] self . _create_test_recipe ( user_id = self . user1 [ [string] ] , data = { [string] : [string] } ) [EOL] response = self . client . delete ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert self . client . get ( [string] ) . json ( ) == [ ] [EOL] [EOL] def _create_test_user ( self , data ) : [EOL] response = self . client . post ( [string] , data , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] return response . json ( ) [EOL] [EOL] def _create_test_recipe ( self , user_id , data ) : [EOL] response = self . client . post ( f" [string] { user_id } [string] " , data , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] return response . json ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $typing.Dict$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 $typing.Dict$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0