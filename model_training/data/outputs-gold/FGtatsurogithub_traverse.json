from pathlib import Path [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] [comment] [EOL] with open ( Path ( __file__ ) . parent . resolve ( ) / [string] ) as f : [EOL] readme = f . read ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = readme , long_description_content_type = [string] , url = [string] , author = [string] , classifiers = [ [string] [string] , [string] , [string] , ] , keywords = [string] , packages = find_packages ( ) , include_package_data = True , install_requires = [ [string] , [string] ] , python_requires = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import urllib [EOL] def notification ( event , context ) : [EOL] [docstring] [EOL] [EOL] import base64 [EOL] import json [EOL] import os [EOL] import urllib . request [EOL] [EOL] if not os . environ . get ( [string] ) : [EOL] return [EOL] [EOL] if [string] not in event : [EOL] return [EOL] [EOL] pubsub_message = json . loads ( base64 . b64decode ( event [ [string] ] ) . decode ( [string] ) ) [EOL] if pubsub_message [ [string] ] != [string] : [EOL] return [EOL] if pubsub_message [ [string] ] [ [string] ] != os . environ . get ( [string] ) : [EOL] return [EOL] [EOL] [comment] [EOL] slack_message = f""" [string] { os . environ [ [string] ] } [string] { os . environ [ [string] ] } [string] { os . environ [ [string] ] } [string] { os . environ [ [string] ] } [string] """ [EOL] req = urllib . request . Request ( url = os . environ . get ( [string] ) , data = json . dumps ( { [string] : slack_message } ) . encode ( [string] ) ) [EOL] with urllib . request . urlopen ( req ) as res : [EOL] pass [EOL] [comment] [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import os [EOL] [EOL] from pyramid . config import Configurator [EOL] from pyramid . response import Response [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def hello_world ( request ) : [EOL] return Response ( [string] ) [EOL] [EOL] [EOL] def json ( request ) : [EOL] return Response ( json = { [string] : [string] } ) [EOL] [EOL] [EOL] def main ( global_config = None , ** settings ) : [EOL] logging . basicConfig ( level = os . environ . get ( [string] , [string] ) ) [EOL] [EOL] config = Configurator ( settings = settings ) [EOL] [EOL] config . add_route ( [string] , [string] ) [EOL] config . add_view ( hello_world , route_name = [string] ) [EOL] [EOL] config . add_route ( [string] , [string] ) [EOL] config . add_view ( json , route_name = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] config . add_notfound_view ( append_slash = True ) [EOL] return config . make_wsgi_app ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0