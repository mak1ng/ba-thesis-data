	0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class IngredientsAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Type [EOL] import graphql_demo [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Ingredient ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] notes = models . TextField ( ) [EOL] category = models . ForeignKey ( Category , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.models.Ingredient]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.models.Ingredient]$ 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.models.Ingredient]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , List [EOL] import graphql_demo [EOL] import typing [EOL] import graphene [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from graphene import relay , ObjectType [EOL] from graphene_django import DjangoObjectType [EOL] from graphene_django . filter import DjangoFilterConnectionField [EOL] [EOL] from graphql_demo . ingredients . models import Category , Ingredient [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class CategoryNode ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = Category [EOL] filter_fields = [ [string] , [string] ] [EOL] interfaces = ( relay . Node , ) [EOL] [EOL] [EOL] class IngredientNode ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = Ingredient [EOL] [comment] [EOL] filter_fields = { [string] : [ [string] , [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } [EOL] interfaces = ( relay . Node , ) [EOL] [EOL] [EOL] class Query ( object ) : [EOL] category = relay . Node . Field ( CategoryNode ) [EOL] all_categories = DjangoFilterConnectionField ( CategoryNode ) [EOL] [EOL] ingredient = relay . Node . Field ( IngredientNode ) [EOL] all_ingredients = DjangoFilterConnectionField ( IngredientNode ) [EOL] [EOL] [EOL] class CreateCategory ( graphene . Mutation ) : [EOL] id = graphene . Int ( ) [EOL] name = graphene . String ( ) [EOL] [EOL] [comment] [EOL] class Arguments : [EOL] name = graphene . String ( ) [EOL] [EOL] [comment] [EOL] def mutate ( self , info , name ) : [EOL] category = Category ( name = name ) [EOL] category . save ( ) [EOL] [EOL] return CreateCategory ( id = category . id , name = category . name , ) [EOL] [EOL] [EOL] [comment] [EOL] class Mutation ( graphene . ObjectType ) : [EOL] create_category = CreateCategory . Field ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.Query]$ 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.CreateCategory]$ 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.CreateCategory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.CreateCategory.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $graphql_demo.ingredients.models.Category$ 0 0 0 0 0 0 0 0 $graphql_demo.ingredients.models.Category$ 0 0 0 0 0 0 0 0 0 0 0 $graphql_demo.ingredients.models.Category$ 0 0 0 0 0 $graphql_demo.ingredients.models.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[graphql_demo.ingredients.schema.Mutation]$ 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0