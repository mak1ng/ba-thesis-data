from typing import Any [EOL] import typing [EOL] from cookiecutter . main import cookiecutter [EOL] from . cli import project [EOL] import click [EOL] from pkg_resources import resource_filename [EOL] import os [EOL] import yaml [EOL] from cryptography . fernet import Fernet [EOL] [EOL] @ project . command ( help = [string] ) def create_project ( ) : [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : Fernet . generate_key ( ) . decode ( [string] ) } ) [EOL] [EOL] [EOL] @ project . command ( help = [string] ) @ click . pass_context def create_resource ( ctx ) : [EOL] project_name = ctx . obj [ [string] ] [ [string] ] [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : project_name , [string] : ctx . obj [ [string] ] [ [string] ] } , output_dir = project_name ) [EOL] [EOL] [EOL] @ project . command ( help = [string] ) @ click . pass_context def create_applicationbehavior ( ctx ) : [EOL] project_name = ctx . obj [ [string] ] [ [string] ] [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : project_name , [string] : ctx . obj [ [string] ] [ [string] ] } , output_dir = project_name ) [EOL] [EOL] [EOL] @ project . command ( help = [string] ) @ click . pass_context def create_behavior ( ctx ) : [EOL] project_name = ctx . obj [ [string] ] [ [string] ] [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : project_name , [string] : ctx . obj [ [string] ] [ [string] ] } , output_dir = project_name ) [EOL] [EOL] [EOL] @ project . command ( help = [string] ) @ click . pass_context def create_fieldvalidator ( ctx ) : [EOL] project_name = ctx . obj [ [string] ] [ [string] ] [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : project_name , [string] : ctx . obj [ [string] ] [ [string] ] } , output_dir = project_name ) [EOL] [EOL] [EOL] @ project . command ( help = [string] ) @ click . pass_context def create_formvalidator ( ctx ) : [EOL] project_name = ctx . obj [ [string] ] [ [string] ] [EOL] cookiecutter ( resource_filename ( [string] , [string] ) , extra_context = { [string] : project_name , [string] : ctx . obj [ [string] ] [ [string] ] } , output_dir = project_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] import sys [EOL] import click [EOL] import importscan [EOL] import mfw_template [EOL] import yaml [EOL] [EOL] @ click . group ( ) @ click . pass_context def project ( ctx = None ) : [EOL] [docstring] [EOL] localrc = os . path . join ( os . getcwd ( ) , [string] ) [EOL] c = { } [EOL] if os . path . exists ( localrc ) : [EOL] with open ( localrc , [string] ) as f : [EOL] c = yaml . load ( f ) [EOL] [EOL] ctx . ensure_object ( dict ) [EOL] ctx . obj [ [string] ] = c [EOL] [EOL] [EOL] def cli ( ) : [EOL] importscan . scan ( mfw_template ) [EOL] project ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
[EOL]	0
[EOL]	0
import shutil [EOL] [EOL] project_name = [string] [EOL] project_type = [string] [EOL] [EOL] if project_type != [string] : [EOL] shutil . rmtree ( [string] % project_name ) [EOL]	0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[EOL]	0
import shutil [EOL] import os [EOL] [EOL] project_name = [string] [EOL] project_type = [string] [EOL] module_name = [string] [EOL] [EOL] if project_type != [string] : [EOL] os . unlink ( [string] ) [EOL]	0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0