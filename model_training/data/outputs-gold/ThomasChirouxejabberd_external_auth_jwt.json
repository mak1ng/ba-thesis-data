[comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import uuid [EOL] [EOL] from setuptools import find_packages [EOL] from setuptools import setup [EOL] from setuptools . command . build_py import build_py [EOL] [EOL] [comment] [EOL] from build_scripts . version import VersionInfo [EOL] [EOL] HERE = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] README = open ( os . path . join ( HERE , [string] ) , encoding = [string] ) . read ( ) [EOL] NEWS = open ( os . path . join ( HERE , [string] ) , encoding = [string] ) . read ( ) [EOL] PROJECT_NAME = [string] [EOL] [EOL] VERSION = None [EOL] try : [EOL] VERSION = VersionInfo ( ) . version [EOL] except Exception : [EOL] pass [EOL] [EOL] if VERSION is None or not VERSION : [EOL] try : [EOL] VERSION_FILE = open ( f"{ PROJECT_NAME } [string] " , [string] ) [EOL] try : [EOL] VERSION = VERSION_FILE . readlines ( ) [ [number] ] [EOL] VERSION = VERSION . strip ( ) [EOL] except Exception : [EOL] VERSION = [string] [EOL] finally : [EOL] VERSION_FILE . close ( ) [EOL] except IOError : [EOL] VERSION = [string] [EOL] [EOL] [EOL] class CustomBuild ( build_py ) : [EOL] [docstring] [EOL] [EOL] def run ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] if not self . dry_run : [EOL] target_dirs = [ ] [EOL] target_dirs . append ( os . path . join ( self . build_lib , PROJECT_NAME ) ) [EOL] target_dirs . append ( PROJECT_NAME ) [EOL] [comment] [EOL] for _dir in target_dirs : [EOL] self . mkpath ( _dir ) [EOL] [EOL] try : [EOL] for _dir in target_dirs : [EOL] fobj = open ( os . path . join ( _dir , [string] ) , [string] ) [EOL] fobj . write ( VERSION ) [EOL] fobj . close ( ) [EOL] except Exception : [EOL] pass [EOL] [EOL] super ( ) . run ( ) [EOL] [EOL] [EOL] with open ( [string] ) as f : [EOL] requirements = f . read ( ) . splitlines ( ) [EOL] [EOL] if requirements [ [number] ] . startswith ( [string] ) : [EOL] requirements = requirements [ [number] : ] [EOL] [EOL] setup ( name = PROJECT_NAME , version = VERSION , description = [string] , long_description = README + [string] + NEWS , cmdclass = { [string] : CustomBuild } , classifiers = [ [string] , [string] , [string] , [string] , ] , keywords = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , packages = find_packages ( exclude = [ [string] ] ) , package_data = { [string] : [ [string] , [string] , [string] , [string] ] } , include_package_data = True , zip_safe = False , test_suite = [string] , tests_require = [ ] , install_requires = requirements , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] import datetime [EOL] import json [EOL] import logging [EOL] [EOL] import jwt [EOL] [EOL] [EOL] def jwt_auth ( login , token , conf ) : [EOL] [docstring] [EOL] _leeway = [number] [comment] [EOL] try : [EOL] try : [EOL] payload = jwt . decode ( token , conf . get ( [string] ) , issuer = conf . get ( [string] ) , audience = conf . get ( [string] ) , leeway = datetime . timedelta ( seconds = conf . get ( [string] , _leeway ) ) , algorithms = [ conf . get ( [string] , [string] ) ] , ) [EOL] except jwt . DecodeError : [EOL] [comment] [EOL] logging . info ( [string] ) [EOL] payload = jwt . decode ( token , conf . get ( [string] ) , issuer = conf . get ( [string] ) , audience = conf . get ( [string] ) , leeway = datetime . timedelta ( seconds = conf . get ( [string] , _leeway ) ) , algorithms = [ conf . get ( [string] , [string] ) ] , ) [EOL] [EOL] if conf . get ( [string] ) is not None : [EOL] [comment] [EOL] if payload . get ( [string] ) is None : [EOL] return False [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] now = datetime . datetime . utcnow ( ) + datetime . timedelta ( seconds = conf . get ( [string] , _leeway ) ) [EOL] if datetime . datetime . utcfromtimestamp ( payload . get ( [string] ) ) > now : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] if now > datetime . datetime . utcfromtimestamp ( payload . get ( [string] ) ) + datetime . timedelta ( seconds = conf . get ( [string] ) ) : [EOL] logging . warning ( [string] , login , ) [EOL] return False [EOL] if payload . get ( [string] ) is not None and payload . get ( [string] ) != conf . get ( [string] ) : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] [EOL] [comment] [EOL] if payload . get ( conf . get ( [string] , [string] ) ) == login : [EOL] return True [EOL] else : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except jwt . ExpiredSignatureError : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except jwt . exceptions . InvalidIssuedAtError : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except jwt . InvalidIssuerError : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except jwt . InvalidAudienceError : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except jwt . DecodeError : [EOL] logging . warning ( [string] , login ) [EOL] return False [EOL] except KeyError as exc : [comment] [EOL] logging . warning ( [string] , login , exc , ) [EOL] return False [EOL] except Exception as exc : [comment] [EOL] logging . error ( [string] , login , exc . __class__ . __name__ , exc , ) [EOL] return False [EOL] [EOL] logging . error ( [string] , login ) [EOL] return False [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] import logging [EOL] import os [EOL] import pathlib [EOL] import sys [EOL] import struct [EOL] [EOL] import yaml [EOL] [EOL] from ejabberd_external_auth_jwt . auth import jwt_auth [EOL] [EOL] CONFIG_PATH = os . environ [ [string] ] [EOL] [EOL] [EOL] def load_config ( fname ) : [EOL] [docstring] [EOL] with open ( fname , [string] ) as file_handle : [EOL] data = yaml . load ( file_handle , Loader = yaml . FullLoader ) [EOL] [comment] [EOL] return data [EOL] [EOL] [EOL] def from_ejabberd ( ) : [EOL] [docstring] [EOL] input_length = sys . stdin . buffer . read ( [number] ) [EOL] [comment] [EOL] ( size , ) = struct . unpack ( [string] , input_length ) [EOL] return sys . stdin . read ( size ) . split ( [string] ) [EOL] [EOL] [EOL] def to_ejabberd ( result ) : [EOL] [docstring] [EOL] answer = [number] [EOL] if result : [EOL] answer = [number] [EOL] token = struct . pack ( [string] , [number] , answer ) [EOL] sys . stdout . buffer . write ( token ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] [EOL] def isuser ( username , server ) : [EOL] [docstring] [EOL] return True [EOL] [EOL] [EOL] def main_sync ( ) : [EOL] [docstring] [EOL] logging . info ( [string] ) [EOL] [comment] [EOL] conf = load_config ( CONFIG_PATH ) [EOL] [EOL] while True : [EOL] data = from_ejabberd ( ) [EOL] sys . stderr . write ( [string] % data ) [EOL] success = False [EOL] if data [ [number] ] == [string] : [EOL] success = jwt_auth ( login = [string] % ( data [ [number] ] , data [ [number] ] ) , token = data [ [number] ] , conf = conf ) [EOL] elif data [ [number] ] == [string] : [EOL] success = isuser ( data [ [number] ] , data [ [number] ] ) [EOL] to_ejabberd ( success ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , List [EOL] import subprocess [EOL] import typing [EOL] [docstring] [EOL] import subprocess [EOL] [EOL] [EOL] class VersionInfo : [EOL] [docstring] [EOL] [EOL] hg_stable_branch = [string] [EOL] git_stable_branch = [string] [EOL] [EOL] def __init__ ( self , dvcs = None ) : [EOL] [docstring] [EOL] if dvcs is None : [EOL] dvcs = self . _autodetect ( ) [EOL] [comment] [EOL] self . dvcs = dvcs [EOL] [EOL] def _popen ( self , command_list ) : [EOL] [docstring] [EOL] p = subprocess . run ( command_list , stdout = subprocess . PIPE , stderr = subprocess . DEVNULL , check = True , encoding = [string] , ) [EOL] return p . stdout [EOL] [EOL] def _autodetect ( self ) : [EOL] [docstring] [EOL] try : [EOL] self . _popen ( [ [string] , [string] ] ) [EOL] except subprocess . CalledProcessError : [EOL] pass [EOL] else : [EOL] return [string] [EOL] [EOL] try : [EOL] self . _popen ( [ [string] , [string] ] ) [EOL] except subprocess . CalledProcessError : [EOL] pass [EOL] else : [EOL] return [string] [EOL] [EOL] def _get_hg_version ( self , branch = None ) : [EOL] [docstring] [EOL] cmd_hg_log = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] if branch is not None and branch : [EOL] cmd_hg_log += [ [string] , branch ] [EOL] [EOL] line = self . _popen ( cmd_hg_log ) . split ( [string] ) [ [number] ] [EOL] try : [EOL] latest_tag , latest_rev = line . strip ( ) . split ( [string] ) [EOL] except ValueError : [EOL] return [string] [EOL] else : [EOL] cmd_hg_log_rev = [ [string] , [string] , [string] , [string] % latest_tag , [string] , [string] , ] [EOL] [comment] [EOL] [comment] [EOL] line = self . _popen ( cmd_hg_log_rev ) . split ( [string] ) [ [number] ] [EOL] latest_tag_rev = line . strip ( ) [EOL] [EOL] if int ( latest_tag_rev ) == int ( latest_rev ) - [number] : [EOL] [comment] [EOL] [comment] [EOL] return latest_tag [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if branch is not None and branch == self . hg_stable_branch : [EOL] return [string] % ( latest_tag , latest_rev ) [EOL] return [string] % ( latest_tag , latest_rev ) [EOL] [EOL] def _hg_current_branch ( self ) : [EOL] [docstring] [EOL] return self . _popen ( [ [string] , [string] ] ) . split ( [string] ) [ [number] ] . strip ( ) [EOL] [EOL] def _write_hg_changelog_rst ( self , outputfile ) : [EOL] [docstring] [EOL] result = self . _popen ( [ [string] , [string] , [string] , [string] ] ) [EOL] with open ( outputfile , mode = [string] , encoding = [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] fp . write ( [string] ) [EOL] fp . write ( [string] ) [EOL] fp . write ( result ) [EOL] [EOL] def _get_git_version ( self , branch = None , abbrev = [number] ) : [EOL] [docstring] [EOL] cmd_git_log = [ [string] , [string] , [string] , [string] % abbrev ] [EOL] try : [EOL] version = self . _popen ( cmd_git_log ) . split ( [string] ) [ [number] ] [EOL] except subprocess . CalledProcessError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if branch is None or branch == self . git_stable_branch : [EOL] [comment] [EOL] return version [EOL] return [string] % ( branch , version ) [EOL] [EOL] def _git_current_branch ( self ) : [EOL] [docstring] [EOL] cmd_git = [ [string] , [string] , [string] ] [EOL] return self . _popen ( cmd_git ) . split ( [string] ) [ [number] ] . split ( [string] ) [ - [number] ] [EOL] [EOL] def _write_git_changelog_rst ( self , outputfile ) : [EOL] [docstring] [EOL] result = self . _popen ( [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL] with open ( outputfile , mode = [string] , encoding = [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] fp . write ( [string] ) [EOL] fp . write ( [string] ) [EOL] for line in result . split ( [string] ) : [EOL] fp . write ( [string] + line + [string] ) [EOL] [EOL] def write_changelog_rst ( self , outputfile ) : [EOL] [docstring] [EOL] if self . dvcs == [string] : [EOL] return self . _write_hg_changelog_rst ( outputfile ) [EOL] if self . dvcs == [string] : [EOL] return self . _write_git_changelog_rst ( outputfile ) [EOL] raise ValueError ( [string] % self . dvcs ) [EOL] [EOL] @ property def current_branch ( self ) : [EOL] [docstring] [EOL] if self . dvcs == [string] : [EOL] return self . _hg_current_branch ( ) [EOL] if self . dvcs == [string] : [EOL] return self . _git_current_branch ( ) [EOL] raise ValueError ( [string] % self . dvcs ) [EOL] [EOL] @ property def version ( self ) : [EOL] [docstring] [EOL] if self . dvcs == [string] : [EOL] return self . _get_hg_version ( self . current_branch ) [EOL] if self . dvcs == [string] : [EOL] return self . _get_git_version ( self . current_branch ) [EOL] raise ValueError ( [string] % self . dvcs ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [docstring] [EOL] print ( VersionInfo ( ) . version ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import datetime [EOL] [EOL] import pytest [EOL] [EOL] import jwt [EOL] [EOL] from ejabberd_external_auth_jwt . auth import jwt_auth [EOL] [EOL] [EOL] @ pytest . fixture def conf_empty ( ) : [EOL] [docstring] [EOL] return { } [EOL] [EOL] [EOL] @ pytest . fixture def conf_simple ( ) : [EOL] [docstring] [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def conf_simple2 ( ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def conf_full ( ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] [EOL] [EOL] @ pytest . fixture def payload_simple ( ) : [EOL] [docstring] [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def payload_simple2 ( ) : [EOL] [docstring] [EOL] return { [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def payload_full ( ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [string] , [string] : datetime . datetime . utcnow ( ) + datetime . timedelta ( seconds = [number] ) , [string] : datetime . datetime . utcnow ( ) , [string] : datetime . datetime . utcnow ( ) , [string] : [string] , } [EOL] [EOL] [EOL] def test_auth_empty_nok_1 ( conf_empty , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_empty ) is False [EOL] [EOL] [EOL] def test_auth_empty_nok_1 ( conf_empty , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_empty ) is False [EOL] [EOL] [EOL] def test_auth_simple_ok_1 ( conf_simple , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple ) is True [EOL] [EOL] [EOL] def test_auth_simple_nok_1 ( conf_simple , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple ) is False [EOL] [EOL] [EOL] def test_auth_simple_nok_2 ( conf_simple , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple ) is False [EOL] [EOL] [EOL] def test_auth_simple2_ok_1 ( conf_simple2 , payload_simple2 ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple2 , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple2 ) is True [EOL] [EOL] [EOL] def test_auth_simple2_nok_1 ( conf_simple2 , payload_simple2 ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple2 , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple2 ) is False [EOL] [EOL] [EOL] def test_auth_simple2_nok_2 ( conf_simple2 , payload_simple2 ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple2 , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple2 ) is False [EOL] [EOL] [EOL] def test_auth_simple2_nok_3 ( conf_simple2 , payload_simple ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_simple , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_simple2 ) is False [EOL] [EOL] [EOL] def test_auth_full_ok_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is True [EOL] [EOL] [EOL] def test_auth_full_ok_2 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is True [EOL] [EOL] [EOL] def test_auth_full_nok_iss_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] payload_full [ [string] ] = [string] [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is False [EOL] [EOL] [EOL] def test_auth_full_nok_aud_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] payload_full [ [string] ] = [string] [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is False [EOL] [EOL] [EOL] def test_auth_full_nok_exp_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] payload_full [ [string] ] = datetime . datetime . utcnow ( ) - datetime . timedelta ( seconds = [number] ) [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is False [EOL] [EOL] [EOL] def test_auth_full_nok_iat_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] payload_full [ [string] ] = datetime . datetime . utcnow ( ) + datetime . timedelta ( seconds = [number] ) [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is False [EOL] [EOL] [EOL] def test_auth_full_nok_nbf_1 ( conf_full , payload_full ) : [EOL] [docstring] [EOL] payload_full [ [string] ] = datetime . datetime . utcnow ( ) + datetime . timedelta ( seconds = [number] ) [EOL] jwt_token = jwt . encode ( payload_full , [string] , [string] ) . decode ( [string] ) [EOL] assert jwt_auth ( [string] , jwt_token , conf_full ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0