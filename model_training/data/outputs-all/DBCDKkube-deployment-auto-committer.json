[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , package_dir = { [string] : [string] } , packages = [ [string] ] , description = [string] , provides = [ [string] ] , install_requires = [ [string] ] , entry_points = { [string] : [ [string] ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , Any , List [EOL] import typing [EOL] import pathlib [EOL] import typing [EOL] [EOL] import io [EOL] import json [EOL] import os [EOL] import unittest . mock [EOL] import pathlib [EOL] import sys [EOL] [EOL] import yaml [EOL] [EOL] import deployversioner . deployversioner [EOL] [EOL] @ unittest . mock . patch ( [string] ) class VerionerTests ( unittest . TestCase ) : [EOL] [EOL] def test_set_image_tag ( self , mock_urlopen ) : [EOL] mock_urlopen . side_effect = get_url_open_response_return_value [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] result , _ = deployversioner . deployversioner . set_image_tag ( gitlab_request , [string] , [string] ) [EOL] docs = [ d for d in yaml . safe_load_all ( result ) ] [EOL] configuration_path = os . path . join ( get_tests_path ( ) , [string] ) [EOL] with open ( configuration_path ) as fp : [EOL] depl_docs = [ d for d in yaml . safe_load_all ( io . BytesIO ( fp . read ( ) . encode ( [string] ) ) ) ] [EOL] self . assertEqual ( docs , depl_docs ) [EOL] [EOL] def test_that_set_image_tag_sets_all_tags_in_a_yaml_doc ( self , mock_urlopen ) : [EOL] mock_urlopen . side_effect = get_url_open_response_return_value [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] result , _ = deployversioner . deployversioner . set_image_tag ( gitlab_request , [string] , [string] ) [EOL] self . assertEqual ( result . count ( [string] ) , [number] ) [EOL] [EOL] def test_that_change_image_tag_makes_a_commit_message_covering_all_bumped_tags ( self , mock_urlopen ) : [EOL] repo_tree_response = json . dumps ( [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ] ) [EOL] file_content_responses = [ [string] , [string] ] [EOL] commit_response = json . dumps ( { [string] : [string] , [string] : [string] , [string] : None , [string] : [number] } ) [EOL] mock_urlopen . side_effect = [ io . BytesIO ( repo_tree_response . encode ( [string] ) ) , io . BytesIO ( file_content_responses [ [number] ] . encode ( [string] ) ) , io . BytesIO ( file_content_responses [ [number] ] . encode ( [string] ) ) , io . BytesIO ( commit_response . encode ( [string] ) ) ] [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] proposed_commits , changed_image_tags = deployversioner . deployversioner . change_image_tag ( gitlab_request , [string] , [string] ) [EOL] deployversioner . deployversioner . commit_changes ( gitlab_request , proposed_commits , [string] , changed_image_tags ) [EOL] request = mock_urlopen . call_args [ [number] ] [ [number] ] [EOL] commit_message = json . loads ( request . data ) [ [string] ] [EOL] self . assertIn ( [string] , commit_message ) [EOL] self . assertIn ( [string] , commit_message ) [EOL] [EOL] def test_multiple_yaml_files ( self , mock_urlopen ) : [EOL] repo_tree_response = json . dumps ( [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ] ) [EOL] file_content_responses = [ [string] , [string] ] [EOL] mock_urlopen . side_effect = [ io . BytesIO ( repo_tree_response . encode ( [string] ) ) , io . BytesIO ( file_content_responses [ [number] ] . encode ( [string] ) ) , io . BytesIO ( file_content_responses [ [number] ] . encode ( [string] ) ) ] [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] result = deployversioner . deployversioner . change_image_tag ( gitlab_request , [string] , [string] ) [EOL] self . assertEqual ( len ( result ) , [number] ) [EOL] self . assertEqual ( mock_urlopen . call_count , [number] ) [EOL] [EOL] def test_set_image_tag_identical_new_tag ( self , mock_urlopen ) : [EOL] mock_urlopen . side_effect = get_url_open_response_return_value [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] with self . assertRaises ( deployversioner . deployversioner . VersionUnchangedException ) : [EOL] deployversioner . deployversioner . set_image_tag ( gitlab_request , [string] , [string] ) [EOL] [EOL] def test_parse_image ( self , mock_urlopen ) : [EOL] image = [string] [EOL] imagename , image_tag = deployversioner . deployversioner . parse_image ( image ) [EOL] self . assertEqual ( imagename , [string] ) [EOL] self . assertEqual ( image_tag , [string] ) [EOL] [EOL] def test_commit_changes ( self , mock_urlopen ) : [EOL] repo_tree_response = json . dumps ( [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ] ) [EOL] file_content_response = [string] [EOL] commit_response = json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [number] } ) [EOL] mock_urlopen . side_effect = [ io . BytesIO ( repo_tree_response . encode ( [string] ) ) , io . BytesIO ( file_content_response . encode ( [string] ) ) , io . BytesIO ( commit_response . encode ( [string] ) ) ] [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] proposed_commits , changed_tags = deployversioner . deployversioner . change_image_tag ( gitlab_request , [string] , [string] ) [EOL] deployversioner . deployversioner . commit_changes ( gitlab_request , proposed_commits , [string] , changed_tags ) [EOL] request = mock_urlopen . call_args [ [number] ] [ [number] ] [EOL] data = json . loads ( request . data ) [EOL] [EOL] self . assertEqual ( request . method , [string] ) [EOL] self . assertEqual ( [ d [ [string] ] for d in data [ [string] ] ] . sort ( ) , [ [string] , [string] , [string] ] . sort ( ) ) [EOL] self . assertEqual ( set ( [ d [ [string] ] for d in data [ [string] ] ] ) , { [string] } ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( request . headers , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] def test_get_file_contents ( self , mock_urlopen ) : [EOL] mock_urlopen . side_effect = get_url_open_response_return_value [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] deployversioner . deployversioner . get_file_contents ( gitlab_request , [string] ) [EOL] request = mock_urlopen . call_args [ [number] ] [ [number] ] [EOL] self . assertEqual ( request . full_url , [string] ) [EOL] self . assertEqual ( request . method , [string] ) [EOL] self . assertEqual ( request . headers , { [string] : [string] } ) [EOL] [EOL] def test_file_does_not_exist ( self , mock_urlopen ) : [EOL] repo_tree_response = json . dumps ( [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ] ) [EOL] mock_urlopen . return_value = io . BytesIO ( repo_tree_response . encode ( [string] ) ) [EOL] gitlab_request = deployversioner . deployversioner . GitlabRequest ( [string] , [string] , [number] , [string] ) [EOL] with self . assertRaises ( deployversioner . deployversioner . VersionerFileNotFound ) : [EOL] deployversioner . deployversioner . change_image_tag ( gitlab_request , [string] , [string] ) [EOL] [EOL] def test_get_project_number ( self , mock_urlopen ) : [EOL] mock_urlopen . side_effect = get_url_open_response_return_value [EOL] self . assertEqual ( [number] , deployversioner . deployversioner . get_project_number ( [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] def get_tests_path ( ) : [EOL] try : [EOL] [comment] [EOL] p = pathlib . PurePath ( sys . modules [ __name__ ] . __file__ ) [EOL] return str ( p . parents [ [number] ] ) [EOL] except IndexError : [EOL] return [string] [EOL] [EOL] [EOL] def get_url_open_response_return_value ( request ) : [EOL] return io . BytesIO ( url_open_response_return_values [ request . full_url ] . encode ( [string] ) ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] url_open_response_return_values = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List , Set , Dict , Type , Tuple [EOL] import builtins [EOL] import typing [EOL] import src [EOL] import urllib [EOL] import argparse [EOL] import argparse [EOL] import collections [EOL] import json [EOL] import sys [EOL] import typing [EOL] import urllib . error [EOL] import urllib . parse [EOL] import urllib . request [EOL] [EOL] import yaml [EOL] [EOL] GitlabRequest = collections . namedtuple ( [string] , [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] class VersionerError ( Exception ) : [EOL] pass [EOL] [EOL] [comment] [EOL] [comment] [EOL] class VersionUnchangedException ( Exception ) : [EOL] pass [EOL] [EOL] class VersionerFileNotFound ( VersionerError ) : [EOL] pass [EOL] [EOL] def get_file_contents ( gitlab_request , filename ) : [EOL] url = gitlab_request . url [EOL] if url [ : [number] ] != [string] : [EOL] url = [string] . format ( url ) [EOL] headers = { [string] : gitlab_request . api_token } [EOL] url = [string] . format ( url , gitlab_request . project_id , urllib . parse . quote ( filename , safe = [string] ) , gitlab_request . branch ) [EOL] request = urllib . request . Request ( url , headers = headers , method = [string] ) [EOL] try : [EOL] page = urllib . request . urlopen ( request ) [EOL] return page . read ( ) . decode ( [string] ) [EOL] except urllib . error . URLError as e : [EOL] raise VersionerError ( [string] . format ( filename , e ) ) [EOL] [EOL] [EOL] def get_project_number ( gitlab_get_projects_url , project_name , token ) : [EOL] url = [string] . format ( gitlab_get_projects_url , urllib . parse . quote ( project_name , safe = [string] ) ) [EOL] request = urllib . request . Request ( url , method = [string] , headers = { [string] : token } ) [EOL] try : [EOL] page = urllib . request . urlopen ( request ) [EOL] return json . loads ( page . read ( ) . decode ( [string] ) ) [ [string] ] [EOL] [EOL] except urllib . error . URLError as e : [EOL] raise VersionerError ( [string] . format ( url , e ) ) [EOL] [EOL] [EOL] def set_image_tag ( gitlab_request , filename , new_image_tag ) : [EOL] file_contents = get_file_contents ( gitlab_request , filename ) [EOL] docs = [ d for d in yaml . safe_load_all ( file_contents ) ] [EOL] changed = False [EOL] changed_image_tags = set ( ) [EOL] for doc in docs : [EOL] if [string] in doc and doc [ [string] ] == [string] : [EOL] try : [EOL] containers = doc [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] if len ( containers ) > [number] : [EOL] raise VersionerError ( [string] ) [EOL] image = containers [ [number] ] [ [string] ] [EOL] imagename , image_tag = parse_image ( image ) [EOL] if image_tag != new_image_tag : [EOL] changed_image_tags . add ( image_tag ) [EOL] containers [ [number] ] [ [string] ] = [string] . format ( imagename , new_image_tag ) [EOL] changed = True [EOL] [EOL] except IndexError as e : [EOL] raise VersionerError ( e ) [EOL] if not changed : [EOL] raise VersionUnchangedException ( [string] ) [EOL] return yaml . dump_all ( docs ) , changed_image_tags [EOL] [EOL] def parse_image ( image ) : [EOL] parts = image . split ( [string] ) [EOL] if len ( parts ) != [number] : [EOL] raise VersionerError ( [string] . format ( image ) ) [EOL] return parts [EOL] [EOL] [EOL] def get_content ( gitlab_request , file , image_tag , dir ) : [EOL] if dir not in file [ [string] ] or not file [ [string] ] == [string] or ( not file [ [string] ] . endswith ( [string] ) and not file [ [string] ] . endswith ( [string] ) ) : [EOL] return { [string] : { } , [string] : set ( ) } [EOL] [EOL] commit_blob = { } [EOL] try : [EOL] commit_blob [ [string] ] , changed_tags = set_image_tag ( gitlab_request , file [ [string] ] , image_tag ) [EOL] commit_blob [ [string] ] = [string] [EOL] commit_blob [ [string] ] = file [ [string] ] [EOL] except VersionUnchangedException as e : [EOL] return { [string] : { } , [string] : set ( ) } [EOL] return { [string] : commit_blob , [string] : changed_tags } [EOL] [EOL] [EOL] def change_image_tag ( gitlab_request , file_object , image_tag ) : [EOL] url = gitlab_request . url [EOL] if url [ : [number] ] != [string] : [EOL] url = [string] . format ( url ) [EOL] headers = { [string] : gitlab_request . api_token } [EOL] path = [string] . join ( file_object . split ( [string] ) [ : - [number] ] ) [EOL] url = f"{ url } [string] { gitlab_request . project_id } [string] { gitlab_request . branch } [string] { path }" [EOL] request = urllib . request . Request ( url , headers = headers , method = [string] ) [EOL] try : [EOL] page = urllib . request . urlopen ( request ) [EOL] file_tree = json . loads ( page . read ( ) . decode ( [string] ) ) [EOL] if not file_object == [string] and file_object not in [ n [ [string] ] for n in file_tree ] : [EOL] raise VersionerFileNotFound ( [string] . format ( file_object ) ) [EOL] changes = [ changes for changes in [ get_content ( gitlab_request , n , image_tag , file_object ) for n in file_tree ] if not changes [ [string] ] == { } ] [EOL] proposed_commits = [ ] [EOL] changed_image_tags = set ( ) [EOL] for change in changes : [EOL] proposed_commits . append ( change [ [string] ] ) [EOL] changed_image_tags . update ( change [ [string] ] ) [EOL] return proposed_commits , changed_image_tags [EOL] except urllib . error . URLError as e : [EOL] raise VersionerError ( [string] . format ( file_object , e ) ) [EOL] [EOL] def format_commit_message ( tag , changed_image_tags ) : [EOL] lines = [ [string] . format ( existing_image_tag , tag ) for existing_image_tag in changed_image_tags ] [EOL] return [string] . format ( tag , [string] . join ( lines ) ) [EOL] [EOL] def commit_changes ( gitlab_request , proposed_commits , tag , changed_image_tags ) : [EOL] if len ( proposed_commits ) == [number] : [EOL] raise VersionUnchangedException ( [string] ) [EOL] commit_blob = { [string] : gitlab_request . branch , [string] : format_commit_message ( tag , changed_image_tags ) , [string] : [ ] } [EOL] for proposed_commit in proposed_commits : [EOL] commit_blob [ [string] ] . append ( { [string] : [string] , [string] : proposed_commit [ [string] ] , [string] : proposed_commit [ [string] ] } ) [EOL] url = gitlab_request . url [EOL] if url [ : [number] ] != [string] : [EOL] url = [string] . format ( url ) [EOL] headers = { [string] : gitlab_request . api_token , [string] : [string] } [EOL] url = [string] . format ( url , gitlab_request . project_id , gitlab_request . branch ) [EOL] request = urllib . request . Request ( url , headers = headers , method = [string] , data = json . dumps ( commit_blob ) . encode ( ) ) [EOL] try : [EOL] page = urllib . request . urlopen ( request ) [EOL] p = page . read ( ) . decode ( [string] ) [EOL] if not json . loads ( p ) [ [string] ] == None : [EOL] raise VersionerError ( [string] . format ( url , p ) ) [EOL] except urllib . error . URLError as e : [EOL] raise VersionerError ( [string] . format ( url , tag , e ) ) [EOL] [EOL] def setup_args ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , metavar = [string] , help = [string] [string] ) [EOL] parser . add_argument ( [string] , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] ) [EOL] parser . add_argument ( [string] , metavar = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , default = [string] ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] return args [EOL] [EOL] [EOL] def main ( ) : [EOL] args = setup_args ( ) [EOL] try : [EOL] project_id = get_project_number ( [string] . format ( args . gitlab_url ) , args . project_name , args . gitlab_api_token ) [EOL] [EOL] gitlab_request = GitlabRequest ( args . gitlab_url , args . gitlab_api_token , project_id , args . branch ) [EOL] [EOL] proposed_commits , changed_image_tags = change_image_tag ( gitlab_request , args . deployment_configuration , args . image_tag ) [EOL] [EOL] if args . dry_run : [EOL] for proposed_commit in proposed_commits : [EOL] print ( [string] . format ( proposed_commit [ [string] ] ) ) [EOL] print ( [string] * ( len ( proposed_commit [ [string] ] ) + [number] ) ) [EOL] print ( proposed_commit [ [string] ] ) [EOL] else : [EOL] commit_changes ( gitlab_request , proposed_commits , args . image_tag , changed_image_tags ) [EOL] [EOL] except VersionUnchangedException as e : [EOL] print ( e ) [EOL] except VersionerError as e : [EOL] print ( [string] . format ( e ) , file = sys . stderr ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.deployversioner.deployversioner.GitlabRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.set]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.set]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.deployversioner.deployversioner.GitlabRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0