from typing import List , Any [EOL] import adapters [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] from datetime import datetime [EOL] from itertools import chain [EOL] from typing import List [EOL] [EOL] import click [EOL] from tabulate import tabulate [EOL] [EOL] import settings [EOL] from adapters . common import query_adapters , Event [EOL] from adapters . enums import City , Company [EOL] from arguments_utils import parse_city , parse_date , parse_company [EOL] [EOL] [EOL] @ click . group ( [string] ) def actions ( ) : [EOL] pass [EOL] [EOL] [EOL] @ actions . command ( ) @ click . argument ( [string] , type = str , default = [string] ) @ click . option ( [string] , help = [string] ) @ click . option ( [string] , help = [string] ) def show_events ( date , city , company ) : [EOL] date_parsed = parse_date ( date ) [EOL] city_parsed = parse_city ( city ) [EOL] company_parsed = parse_company ( company ) [EOL] adapters_responses = query_adapters ( date_parsed , city_parsed , company_parsed , settings . adapters ) [EOL] [EOL] combined_adapters = list ( chain ( * adapters_responses ) ) [EOL] combined_adapters . sort ( key = lambda x : x . date ) [EOL] [EOL] events_table = [ event . as_table_row ( ) for event in combined_adapters ] [EOL] click . echo ( tabulate ( events_table , tablefmt = [string] , numalign = [string] , stralign = [string] ) ) [EOL] click . echo ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] actions ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import adapters [EOL] import typing [EOL] import builtins [EOL] from datetime import timedelta [EOL] from typing import List , Optional [EOL] [EOL] import click [EOL] [EOL] from adapters . common import today , Event [EOL] from adapters . enums import City , CityNamesAlternatives , Company [EOL] [EOL] [EOL] def parse_city ( city ) : [EOL] city_parsed = None [EOL] for city_name_alt_enum in CityNamesAlternatives : [EOL] city_name_alt_enum_value = city_name_alt_enum . value [EOL] city_name_enum = city_name_alt_enum_value [ [number] ] [EOL] city_name_alts_str_list = city_name_alt_enum_value [ [number] ] [EOL] if city in city_name_alts_str_list : [EOL] city_parsed = city_name_enum [EOL] break [EOL] return city_parsed [EOL] [EOL] [EOL] def parse_company ( company ) : [EOL] company_parsed = None [EOL] for company_enum in Company : [EOL] company_value = company_enum . value [EOL] if company_value == company : [EOL] company_parsed = company_enum [EOL] break [EOL] return company_parsed [EOL] [EOL] [EOL] def parse_date ( date ) : [EOL] try : [EOL] date_int = int ( date ) [EOL] [EOL] if date_int < [number] : [EOL] click . echo ( [string] ) [EOL] raise AssertionError ( [string] ) [EOL] [EOL] [comment] [EOL] date_parsed = today ( ) + timedelta ( days = date_int ) [EOL] [EOL] except ( ValueError , TypeError ) : [EOL] [comment] [EOL] date = date . lower ( ) [EOL] if date == [string] : [EOL] date_parsed = today ( ) [EOL] [EOL] elif date == [string] : [EOL] date_parsed = today ( ) + timedelta ( days = [number] ) [EOL] [EOL] else : [EOL] raise AssertionError ( [string] ) [EOL] return date_parsed	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import click [EOL] import pytest [EOL] from click . testing import CliRunner [EOL] from main import actions [EOL] [EOL] [EOL] [comment] [EOL] class ShowEventsTests : [EOL] def test_show_events_no_args ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_today ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_tomorrow ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_bad_arg_str ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert isinstance ( result . exception , AssertionError ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_plus_0 ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_plus_1 ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_0 ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_1 ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] ] ) [EOL] assert result . exit_code == [number] [EOL] [EOL] def test_show_events_minus_1 ( self ) : [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( actions , [ [string] , [string] , [string] ] ) [EOL] assert isinstance ( result . exception , AssertionError ) [EOL] assert result . exit_code == [number] [EOL] [EOL] [EOL] @ pytest . fixture ( ) def mock_no_adapters ( mocker ) : [EOL] mocker . patch ( [string] ) [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture ( ) def verify_no_query ( mocker ) : [EOL] mocked_requests = mocker . patch ( [string] ) [EOL] yield [EOL] assert mocked_requests . call_count == [number] [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( * [ [string] , [string] ] ) class TestShowEventsNoAdapters ( ShowEventsTests ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import adapters [EOL] import typing [EOL] from pytest import mark [EOL] [EOL] from adapters . enums import CityNamesAlternatives , Company [EOL] from arguments_utils import parse_city , parse_company [EOL] [EOL] [EOL] class TestParseArguments : [EOL] [EOL] @ mark . parametrize ( [string] , [ * CityNamesAlternatives ] ) def test_parse_city ( self , city_alternative ) : [EOL] expected_city_parsed = city_alternative . value [ [number] ] [EOL] city_alternative_names = city_alternative . value [ [number] ] [EOL] for city_alternative_name in city_alternative_names : [EOL] city_parsed = parse_city ( city_alternative_name ) [EOL] assert expected_city_parsed == city_parsed [EOL] [EOL] @ mark . parametrize ( [string] , [ * Company ] ) def test_parse_company ( self , company ) : [EOL] company_name = company . value [EOL] company_parsed = parse_company ( company_name ) [EOL] assert company_parsed == company [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $adapters.enums.City$ 0 0 0 0 0 0 0 $typing.Any$ 0 $adapters.enums.City$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
import builtins [EOL] from enum import Enum [EOL] [EOL] [EOL] class ParsedEventListKey ( Enum ) : [EOL] Name = [string] [EOL] Date = [string] [EOL] Location = [string] [EOL] City = [string] [EOL] [EOL] [EOL] class Company ( Enum ) : [EOL] CinemaCity = [string] [EOL] YesPlanet = [string] [EOL] [EOL] [EOL] class City ( Enum ) : [EOL] RishonLeZion = [string] [EOL] Glilot = [string] [EOL] BeerSheba = [string] [EOL] [EOL] [EOL] class CityNamesAlternatives ( Enum ) : [EOL] BeerSheba = ( City . BeerSheba , [ [string] , [string] , [string] , [string] ] , ) [EOL] RishonLeZion = ( City . RishonLeZion , [ [string] , [string] , [string] , [string] ] , ) [EOL] Glilot = ( City . Glilot , [ [string] ] ) [EOL] [EOL] [EOL] class EventTags ( Enum ) : [EOL] SubbedHebrew = [string] [EOL] Subbed = [string] [EOL] English = [string] [EOL] Hebrew = [string] [EOL] ScreenX2D = [string] [EOL] In3D = [string] [EOL] DubbedHebrew = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
UNICODE_HEBREW_RANGE_START = [number] [EOL] UNICODE_HEBREW_RANGE_END = [number] [EOL]	$builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from typing import List , Any [EOL] import datetime [EOL] import logging [EOL] import adapters [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from abc import ABCMeta , abstractmethod [EOL] from datetime import datetime [EOL] from time import time [EOL] from typing import List [EOL] [EOL] import click [EOL] import tmdbsimple as tmdb [EOL] from tzlocal import get_localzone [EOL] [EOL] from adapters . consts import UNICODE_HEBREW_RANGE_START , UNICODE_HEBREW_RANGE_END [EOL] from adapters . enums import Company , City , EventTags [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def is_hebrew ( s ) : [EOL] for char in s : [EOL] if UNICODE_HEBREW_RANGE_START <= ord ( char ) <= UNICODE_HEBREW_RANGE_END : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _handle_event_name ( name ) : [EOL] name_english = name [EOL] if is_hebrew ( name ) : [EOL] start_time = time ( ) [EOL] search = tmdb . Search ( ) [EOL] response = search . movie ( query = f' [string] { name } [string] ' , language = [string] ) [EOL] logger . debug ( f" [string] { name } [string] { time ( ) - start_time }" ) [EOL] if len ( response [ [string] ] ) > [number] : [EOL] first_result = response [ [string] ] [ [number] ] [EOL] if first_result [ [string] ] == name : [EOL] name_english = first_result [ [string] ] [EOL] else : [EOL] name_english = name [EOL] return name_english [EOL] [EOL] [EOL] class Event ( object ) : [EOL] def __init__ ( self , name , date , city , company , tags , ) : [EOL] self . name = _handle_event_name ( name ) [EOL] self . date = date [EOL] self . city = city [EOL] self . company = company [EOL] self . tags = tags [EOL] [EOL] @ property def tags_str ( self ) : [EOL] return [string] . join ( [ click . style ( tag . value , bg = [string] , bold = True ) for tag in self . tags ] ) [EOL] [EOL] @ property def name_aligned ( self ) : [EOL] [comment] [EOL] if is_hebrew ( self . name ) : [EOL] return [string] . format ( name = self . name ) [EOL] else : [EOL] return self . name [EOL] [EOL] def as_table_row ( self ) : [EOL] return [ self . date , self . name_aligned , self . tags_str , self . company . value , self . city . value ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . __repr__ ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( date = self . date , name = self . name_aligned , tags = self . tags_str , company = self . company . value , city = self . city . value , ) [EOL] [EOL] [EOL] class TheatreAdapter ( metaclass = ABCMeta ) : [EOL] def __init__ ( self , theatre_id , display_name , city , company ) : [EOL] self . theatre_id = theatre_id [EOL] self . display_name = display_name [EOL] self . city = city [EOL] self . company = company [EOL] [EOL] @ staticmethod def validate_event_date ( event_date ) : [EOL] if event_date < today ( ) : [EOL] raise AssertionError ( [string] . format ( event_date ) ) [EOL] [EOL] @ abstractmethod def _get_event_list ( self , event_date ) : [EOL] pass [EOL] [EOL] @ abstractmethod def _parse_event_list ( self , event_list ) : [EOL] pass [EOL] [EOL] @ abstractmethod def get_events ( self , event_date ) : [EOL] pass [EOL] [EOL] @ abstractmethod def _parse_event_tags ( self , * args , ** kwargs ) : [EOL] pass [EOL] [EOL] [EOL] def today ( ) : [EOL] return datetime . now ( tz = get_localzone ( ) ) . replace ( hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] [EOL] [EOL] def query_adapters ( event_date , city , company , adapters ) : [EOL] adapters_responses = [ ] [EOL] with click . progressbar ( adapters , length = len ( adapters ) ) as adapters_progress : [EOL] adapter = ... [EOL] for adapter in adapters_progress : [EOL] if city is not None and adapter . city != city : [EOL] continue [EOL] [EOL] if company is not None and adapter . company != company : [EOL] continue [EOL] [EOL] adapter_response = adapter . get_events ( event_date = event_date ) [EOL] adapters_responses . append ( adapter_response ) [EOL] [EOL] return adapters_responses [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $adapters.enums.City$ 0 $adapters.enums.Company$ 0 $typing.List[adapters.enums.EventTags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $datetime.datetime$ 0 0 0 $adapters.enums.City$ 0 $adapters.enums.City$ 0 0 0 $adapters.enums.Company$ 0 $adapters.enums.Company$ 0 0 0 $typing.List[adapters.enums.EventTags]$ 0 $typing.List[adapters.enums.EventTags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 $adapters.enums.City$ 0 $adapters.enums.Company$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $adapters.enums.City$ 0 $adapters.enums.City$ 0 0 0 $adapters.enums.Company$ 0 $adapters.enums.Company$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import adapters [EOL] import typing [EOL] import pytest [EOL] [EOL] import settings [EOL] [EOL] from adapters . common import TheatreAdapter , today , Event [EOL] [EOL] [EOL] def verify_adapter_response ( adapter_response ) : [EOL] assert len ( adapter_response ) > [number] [EOL] for event in adapter_response : [EOL] assert isinstance ( event , Event ) [EOL] [EOL] [EOL] class TestAdaptersParsedEventsType : [EOL] @ pytest . mark . parametrize ( [string] , settings . adapters ) def test_adapter_today ( self , adapter_instance ) : [EOL] adapter_response = adapter_instance . get_events ( event_date = today ( ) ) [EOL] verify_adapter_response ( adapter_response ) [EOL] [EOL] [EOL] class TestAdaptersInitialization : [EOL] def test_adapter_init ( self ) : [EOL] assert len ( settings . adapters ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $adapters.common.TheatreAdapter$ 0 0 0 $typing.List[typing.Any]$ 0 $adapters.common.TheatreAdapter$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from adapters . enums import City , Company [EOL] from adapters . yes_planet . lib import YesPlanetTheatre [EOL] [EOL] [EOL] class YesPlanetRishonLeZion ( YesPlanetTheatre ) : [EOL] THEATRE_ID = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( YesPlanetRishonLeZion , self ) . __init__ ( theatre_id = self . THEATRE_ID , display_name = [string] , city = City . RishonLeZion , company = Company . YesPlanet , ) [EOL] [EOL] [EOL] class YesPlanetBeerSheba ( YesPlanetTheatre ) : [EOL] THEATRE_ID = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( YesPlanetBeerSheba , self ) . __init__ ( theatre_id = self . THEATRE_ID , display_name = [string] , city = City . BeerSheba , company = Company . YesPlanet , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any , Set [EOL] import requests [EOL] import datetime [EOL] import adapters [EOL] import typing [EOL] import builtins [EOL] from datetime import datetime [EOL] from typing import List [EOL] [EOL] import requests [EOL] [EOL] from adapters . common import Event , TheatreAdapter [EOL] from adapters . enums import EventTags [EOL] from adapters . yes_planet import enums [EOL] [EOL] [EOL] class YesPlanetTheatre ( TheatreAdapter ) : [EOL] def _parse_event_tags ( self , event_attributes ) : [EOL] _event_attributes = set ( event_attributes ) [EOL] event_tags = [ ] [EOL] [EOL] for event_attributes_sets in enums . EventAttributeSets : [EOL] attribute_set = event_attributes_sets . value [ [number] ] [EOL] event_tag = event_attributes_sets . value [ [number] ] [EOL] if _event_attributes . issuperset ( attribute_set ) : [EOL] event_tags . append ( event_tag ) [EOL] _event_attributes = _event_attributes . difference ( attribute_set ) [EOL] return event_tags [EOL] [EOL] def _get_event_list ( self , event_date ) : [EOL] url = enums . EVENT_LIST_URL . format ( theatre_id = self . theatre_id , date = event_date . strftime ( enums . DATE_URL_FORMAT ) ) [EOL] response = requests . get ( url = url ) [EOL] event_list_from_server = response . json ( ) [ enums . EventListKeys . Body ] [EOL] return event_list_from_server [EOL] [EOL] def _parse_event_list ( self , event_list ) : [EOL] parsed_event_list = [ ] [EOL] [EOL] films_list = event_list [ enums . EventListKeys . Films ] [EOL] event_ids_to_names = { } [EOL] for film in films_list : [EOL] event_ids_to_names [ film [ enums . EventListKeys . Id ] ] = film [ enums . EventListKeys . Name ] [EOL] [EOL] _event_list = event_list [ enums . EventListKeys . Events ] [EOL] for event in _event_list : [EOL] event_name = event_ids_to_names [ event [ enums . EventListKeys . FilmId ] ] [EOL] event_datetime = datetime . strptime ( event [ enums . EventListKeys . EventDateTime ] , enums . EVENT_DATETIME_FORMAT ) [EOL] tags = self . _parse_event_tags ( event [ enums . EventListKeys . Attributes ] ) [EOL] new_event = Event ( name = event_name , date = event_datetime , city = self . city , company = self . company , tags = tags , ) [EOL] parsed_event_list . append ( new_event ) [EOL] [EOL] return parsed_event_list [EOL] [EOL] def get_events ( self , event_date ) : [EOL] self . validate_event_date ( event_date = event_date ) [EOL] event_list_from_server = self . _get_event_list ( event_date = event_date ) [EOL] parsed_event_list = self . _parse_event_list ( event_list = event_list_from_server ) [EOL] return parsed_event_list [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[adapters.common.Event]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.List[adapters.common.Event]$ 0
from typing import List , Any [EOL] import adapters [EOL] import typing [EOL] import json [EOL] from datetime import datetime [EOL] import os [EOL] [EOL] import pytest [EOL] import pytz [EOL] [EOL] from adapters . yes_planet . enums import EventListKeys , EventAttributeSets [EOL] from adapters . yes_planet . theatres import YesPlanetTheatre [EOL] [EOL] [EOL] class TestYesPlanetTagParsing : [EOL] @ pytest . fixture ( ) def load_example ( self ) : [EOL] file_dir_path = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] example_path = os . path . join ( file_dir_path , [string] ) [EOL] with open ( example_path , encoding = [string] ) as example : [EOL] response_example = json . loads ( example . read ( ) , encoding = [string] ) [ [number] ] [EOL] return response_example [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) def test_no_tags ( self , mocker , load_example ) : [EOL] mocked_server_events_list = mocker . patch ( [string] ) [EOL] [EOL] [comment] [EOL] load_example [ EventListKeys . Events ] [ [number] ] [ EventListKeys . Attributes ] = [ ] [EOL] mocked_server_events_list . return_value = load_example [EOL] [EOL] adapter = YesPlanetTheatre ( [number] , [string] , [string] , [string] ) [EOL] events_list = adapter . get_events ( event_date = datetime . now ( tz = pytz . utc ) ) [EOL] event = events_list [ [number] ] [EOL] assert event . tags == [ ] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) @ pytest . mark . parametrize ( [string] , [ e for e in EventAttributeSets ] ) def test_single_tags ( self , mocker , load_example , current_tag_enum ) : [EOL] mocked_server_events_list = mocker . patch ( [string] ) [EOL] [EOL] [comment] [EOL] attribute_list = list ( current_tag_enum . value [ [number] ] ) [EOL] parsed_tag = current_tag_enum . value [ [number] ] [EOL] load_example [ EventListKeys . Events ] [ [number] ] [ EventListKeys . Attributes ] = attribute_list [EOL] mocked_server_events_list . return_value = load_example [EOL] [EOL] adapter = YesPlanetTheatre ( [number] , [string] , [string] , [string] ) [EOL] events_list = adapter . get_events ( event_date = datetime . now ( tz = pytz . utc ) ) [EOL] event = events_list [ [number] ] [EOL] assert event . tags == [ parsed_tag ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $adapters.yes_planet.lib.YesPlanetTheatre$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $adapters.yes_planet.lib.YesPlanetTheatre$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $adapters.yes_planet.lib.YesPlanetTheatre$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $adapters.yes_planet.lib.YesPlanetTheatre$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0
	0
from enum import Enum [EOL] [EOL] DATE_URL_FORMAT = [string] [EOL] THEATRE_LOCALE = [string] [EOL] [EOL] EVENT_LIST_DATETIME_FORMAT = [string] [EOL] EVENT_LIST_URL = [string] [comment] [EOL] [EOL] [EOL] class EventListKeys ( Enum ) : [EOL] Name = [string] [EOL] Dates = [string] [EOL] Date = [string] [EOL] [EOL] [EOL] class EventNameTagEndings ( Enum ) : [EOL] English = [string] [EOL] Hebrew = [string] [EOL] EnglishWithHyphen = [string] [EOL] HebrewWithHyphen = [string] [EOL] Dubbed = [string] [EOL] DubbedWithHyphen = [string] [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Tuple , Any [EOL] import requests [EOL] import datetime [EOL] import logging [EOL] import adapters [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from datetime import datetime [EOL] from typing import Tuple , List [EOL] [EOL] import requests [EOL] from babel . dates import format_datetime [EOL] [EOL] from adapters . common import TheatreAdapter , Event [EOL] from adapters . enums import EventTags [EOL] from adapters . cinema_city import enums [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class CinemaCityTheatre ( TheatreAdapter ) : [EOL] def _parse_event_tags ( self , event_name ) : [EOL] [comment] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . EnglishWithHyphen . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . English ] [EOL] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . HebrewWithHyphen . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . Hebrew ] [EOL] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . DubbedWithHyphen . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . DubbedHebrew ] [EOL] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . English . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . English ] [EOL] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . Hebrew . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . Hebrew ] [EOL] [EOL] query_ind = event_name . find ( enums . EventNameTagEndings . Dubbed . value ) [EOL] if query_ind != - [number] : [EOL] return event_name [ : query_ind ] , [ EventTags . DubbedHebrew ] [EOL] [EOL] return event_name , [ ] [EOL] [EOL] def _get_event_list ( self , event_date ) : [EOL] today_babel = format_datetime ( event_date , format = enums . DATE_URL_FORMAT , locale = enums . THEATRE_LOCALE ) [EOL] url = enums . EVENT_LIST_URL . format ( theatre_id = self . theatre_id , date = today_babel ) [EOL] logger . debug ( [string] . format ( url ) ) [EOL] response = requests . get ( url ) [EOL] return response . json ( ) [EOL] [EOL] def _parse_event_list ( self , event_list_from_server ) : [EOL] parsed_event_list = [ ] [EOL] for event in event_list_from_server : [EOL] event_name = event [ enums . EventListKeys . Name . value ] [EOL] event_datetime = datetime . strptime ( event [ enums . EventListKeys . Dates . value ] [ enums . EventListKeys . Date . value ] , enums . EVENT_LIST_DATETIME_FORMAT , ) [EOL] event_name , tags = self . _parse_event_tags ( event_name = event_name ) [EOL] [EOL] new_event = Event ( name = event_name , date = event_datetime , city = self . city , company = self . company , tags = tags , ) [EOL] parsed_event_list . append ( new_event ) [EOL] [EOL] return parsed_event_list [EOL] [EOL] def get_events ( self , event_date ) : [EOL] self . validate_event_date ( event_date = event_date ) [EOL] event_list_from_server = self . _get_event_list ( event_date ) [EOL] parsed_event_list = self . _parse_event_list ( event_list_from_server ) [EOL] return parsed_event_list [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $adapters.common.Event$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $adapters.common.Event$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0
	0
from typing import List , Any [EOL] import adapters [EOL] import typing [EOL] import json [EOL] import pytz [EOL] import pytest [EOL] from datetime import datetime [EOL] [EOL] from adapters . cinema_city . enums import EventNameTagEndings [EOL] [EOL] from adapters . cinema_city . theatres import CinemaCityTheatre [EOL] from adapters . enums import EventTags [EOL] [EOL] [EOL] class TestCinemaCityTagsParse : [EOL] def test_no_tags ( self , mocker ) : [EOL] mocked_server_events_list = mocker . patch ( [string] ) [EOL] mocked_server_events_list . return_value = json . loads ( json . dumps ( [ { [string] : [string] , [string] : { [string] : [string] } } ] ) ) [EOL] adapter = CinemaCityTheatre ( [number] , [string] , [string] , [string] ) [EOL] events_list = adapter . get_events ( event_date = datetime . now ( tz = pytz . utc ) ) [EOL] event = events_list [ [number] ] [EOL] assert event . tags == [ ] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ e for e in EventNameTagEndings ] ) def test_tagged ( self , mocker , tag_ending_enum ) : [EOL] mocked_server_events_list = mocker . patch ( [string] ) [EOL] mocked_server_events_list . return_value = json . loads ( json . dumps ( [ { [string] : [string] + tag_ending_enum . value , [string] : { [string] : [string] } , } ] ) ) [EOL] adapter = CinemaCityTheatre ( [number] , [string] , [string] , [string] ) [EOL] events_list = adapter . get_events ( event_date = datetime . now ( tz = pytz . utc ) ) [EOL] event = events_list [ [number] ] [EOL] if [string] in tag_ending_enum . name : [EOL] expected_event_tags = [ EventTags . Hebrew ] [EOL] elif [string] in tag_ending_enum . name : [EOL] expected_event_tags = [ EventTags . English ] [EOL] elif [string] in tag_ending_enum . name : [EOL] expected_event_tags = [ EventTags . DubbedHebrew ] [EOL] else : [EOL] raise AssertionError ( [string] ) [EOL] [EOL] assert event . tags == expected_event_tags [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[adapters.enums.EventTags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[adapters.enums.EventTags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[adapters.enums.EventTags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[adapters.enums.EventTags]$ 0