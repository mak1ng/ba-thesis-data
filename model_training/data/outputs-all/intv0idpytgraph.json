[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List , Union , Any , Dict [EOL] import typing [EOL] from __future__ import print_function [EOL] from glob import glob [EOL] from os . path import join as pjoin [EOL] [EOL] [EOL] from setupbase import ( create_cmdclass , install_npm , ensure_targets , find_packages , combine_commands , ensure_python , get_version , HERE ) [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] [comment] [EOL] name = [string] [EOL] [EOL] [comment] [EOL] ensure_python ( [string] ) [EOL] [EOL] [comment] [EOL] version = get_version ( pjoin ( name , [string] ) ) [EOL] [EOL] nb_path = pjoin ( HERE , name , [string] , [string] ) [EOL] lab_path = pjoin ( HERE , name , [string] ) [EOL] [EOL] [comment] [EOL] jstargets = [ pjoin ( nb_path , [string] ) , pjoin ( HERE , [string] , [string] ) , ] [EOL] [EOL] package_data_spec = { name : [ [string] , [string] ] } [EOL] [EOL] data_files_spec = [ ( [string] , nb_path , [string] ) , ( [string] , lab_path , [string] ) , ( [string] , HERE , [string] ) ] [EOL] [EOL] [EOL] cmdclass = create_cmdclass ( [string] , package_data_spec = package_data_spec , data_files_spec = data_files_spec ) [EOL] cmdclass [ [string] ] = combine_commands ( install_npm ( HERE , build_cmd = [string] ) , ensure_targets ( jstargets ) , ) [EOL] [EOL] [EOL] setup_args = dict ( name = name , description = [string] , version = version , scripts = glob ( pjoin ( [string] , [string] ) ) , cmdclass = cmdclass , packages = find_packages ( ) , author = [string] , author_email = [string] , url = [string] , license = [string] , platforms = [string] , keywords = [ [string] , [string] , [string] ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , include_package_data = True , install_requires = [ [string] , ] , extras_require = { [string] : [ [string] , [string] , [string] , ] , [string] : [ ] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , entry_points = { } , ) [EOL] [EOL] if __name__ == [string] : [EOL] setup ( ** setup_args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.List[typing.Tuple[builtins.str,typing.Any,builtins.str]]$ 0 $typing.List[typing.Tuple[builtins.str,typing.Any,builtins.str]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[builtins.str]]],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[builtins.str]]],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . example import GraphWidget [EOL] from . _version import __version__ , version_info [EOL] [EOL] from . nbextension import _jupyter_nbextension_paths [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Type [EOL] import typing [EOL] import pytgraph [EOL] [docstring] [EOL] [EOL] from ipywidgets import DOMWidget , register [EOL] from traitlets import Unicode , Instance , List , Dict [EOL] from . _frontend import module_name , module_version [EOL] from . types import GraphData [EOL] [EOL] @ register class GraphWidget ( DOMWidget ) : [EOL] [docstring] [EOL] _model_name = Unicode ( [string] ) . tag ( sync = True ) [EOL] _model_module = Unicode ( module_name ) . tag ( sync = True ) [EOL] _model_module_version = Unicode ( module_version ) . tag ( sync = True ) [EOL] _view_name = Unicode ( [string] ) . tag ( sync = True ) [EOL] _view_module = Unicode ( module_name ) . tag ( sync = True ) [EOL] _view_module_version = Unicode ( module_version ) . tag ( sync = True ) [EOL] [EOL] nodes = Dict ( default_value = { } ) . tag ( sync = True ) [EOL] vertices = List ( default_value = [ ] ) . tag ( sync = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pytgraph.example.GraphWidget]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] module_name = [string] [EOL] module_version = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] version_info = ( [number] , [number] , [number] , [string] ) [EOL] __version__ = [string] . join ( map ( str , version_info ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.str]$ 0 0 0
from . traits import GraphData [EOL]	0 0 0 0 0 0
from traitlets import TraitType [EOL] [EOL] [EOL] class GraphData ( TraitType ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _jupyter_nbextension_paths ( ) : [EOL] return [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List , Any , Dict , Tuple [EOL] import typing [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] import sys [EOL] from os . path import dirname , join as pjoin [EOL] docs = dirname ( dirname ( __file__ ) ) [EOL] root = dirname ( docs ) [EOL] sys . path . insert ( [number] , root ) [EOL] sys . path . insert ( [number] , pjoin ( docs , [string] ) ) [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] import os [EOL] here = os . path . dirname ( __file__ ) [EOL] repo = os . path . join ( here , [string] , [string] ) [EOL] _version_py = os . path . join ( repo , [string] , [string] ) [EOL] version_ns = { } [EOL] with open ( _version_py ) as f : [EOL] exec ( f . read ( ) , version_ns ) [EOL] [EOL] [comment] [EOL] version = [string] % version_ns [ [string] ] [ : [number] ] [EOL] [comment] [EOL] release = version_ns [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : None } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] on_rtd = os . environ . get ( [string] , None ) == [string] [EOL] [EOL] if not on_rtd : [comment] [EOL] import sphinx_rtd_theme [EOL] html_theme = [string] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] nbsphinx_allow_errors = True [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0