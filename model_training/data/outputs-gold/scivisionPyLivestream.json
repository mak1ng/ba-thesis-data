[comment] [EOL] from typing import Optional [EOL] import typing [EOL] import site [EOL] import setuptools [EOL] [EOL] [comment] [EOL] site . ENABLE_USER_SITE = True [EOL] [EOL] setuptools . setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] from pathlib import Path [EOL] import subprocess [EOL] import importlib . resources [EOL] [EOL] R = Path ( __file__ ) . parent [EOL] VIDPATH = R / [string] [EOL] IMGPATH = R / [string] [EOL] HOST = [string] [EOL] STATIC = IMGPATH / [string] [EOL] MOVING = VIDPATH / [string] [EOL] VIDEO = VIDPATH / [string] [EOL] MUSIC = VIDPATH / [string] [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] with importlib . resources . path ( [string] , [string] ) as fn : [EOL] subprocess . check_call ( [ [string] , [string] , HOST , [string] , str ( fn ) ] ) [EOL] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , HOST , [string] , str ( MOVING ) ] ) [EOL] [comment] [EOL] print ( [string] ) [EOL] with importlib . resources . path ( [string] , [string] ) as fn : [EOL] subprocess . check_call ( [ [string] , [string] , [string] , str ( fn ) , HOST , [string] , [string] ] ) [EOL] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , str ( MOVING ) , str ( MUSIC ) , HOST ] ) [EOL] [comment] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , str ( VIDEO ) , HOST ] ) [EOL] [comment] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , HOST ] ) [EOL] [comment] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , str ( VIDEO ) , HOST ] ) [EOL] [comment] [EOL] print ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , HOST ] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import subprocess [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] import subprocess [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def listener ( ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] proc = subprocess . Popen ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , stdout = subprocess . DEVNULL , ) [EOL] [EOL] yield proc [EOL] proc . terminate ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import argparse [EOL] import signal [EOL] from argparse import ArgumentParser [EOL] [EOL] from . api import ( stream_microphone , stream_file , stream_files , stream_screen , capture_screen , stream_webcam , ) [EOL] [EOL] [EOL] def loop_file ( ) : [EOL] [docstring] [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] , ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] stream_file ( ini_file = P . ini , websites = P . websites , assume_yes = P . yes , timeout = P . timeout , loop = True , video_file = P . infn , ) [EOL] [EOL] [EOL] def microphone ( ) : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] , ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] stream_microphone ( ini_file = P . ini , websites = P . websites , assume_yes = P . yes , timeout = P . timeout , still_image = P . image , ) [EOL] [EOL] [EOL] def screenshare ( ) : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] , ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] stream_screen ( ini_file = P . ini , websites = P . websites , assume_yes = P . yes , timeout = P . timeout ) [EOL] [EOL] [EOL] def screencapture ( ) : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] capture_screen ( ini_file = P . ini , out_file = P . outfn , assume_yes = P . yes , timeout = P . timeout ) [EOL] [EOL] [EOL] def webcam ( ) : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] , ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] stream_webcam ( ini_file = P . ini , websites = P . websites , assume_yes = P . yes , timeout = P . timeout ) [EOL] [EOL] [EOL] def glob_run ( ) : [EOL] signal . signal ( signal . SIGINT , signal . SIG_DFL ) [EOL] [EOL] p = ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] , ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , help = [string] , action = [string] ) [EOL] p . add_argument ( [string] , [string] , help = [string] , type = int ) [EOL] P = p . parse_args ( ) [EOL] [EOL] stream_files ( ini_file = P . ini , websites = P . websites , assume_yes = P . yes , timeout = P . timeout , loop = P . loop , video_path = P . path , glob = P . glob , shuffle = P . shuffle , still_image = P . image , no_meta = P . nometa , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Sequence , List , Optional [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import src [EOL] import random [EOL] from pathlib import Path [EOL] import typing as T [EOL] [EOL] from . base import FileIn [EOL] from . utils import meta_caption [EOL] [EOL] try : [EOL] from tinytag import TinyTag [EOL] except ImportError : [EOL] TinyTag = None [EOL] [EOL] [EOL] def playonce ( flist , image , sites , inifn , shuffle , usemeta , yes , ) : [EOL] [EOL] if shuffle : [EOL] random . shuffle ( flist ) [EOL] [EOL] caption = ... [EOL] [EOL] for f in flist : [EOL] if usemeta and TinyTag : [EOL] try : [EOL] caption = meta_caption ( TinyTag . get ( str ( f ) ) ) [EOL] print ( caption ) [EOL] except LookupError : [EOL] caption = None [EOL] else : [EOL] caption = None [EOL] [EOL] s = FileIn ( inifn , sites , infn = f , loop = False , image = image , caption = caption , yes = yes ) [EOL] [EOL] s . golive ( ) [EOL] [EOL] [EOL] def fileglob ( path , glob ) : [EOL] [EOL] path = Path ( path ) . expanduser ( ) [EOL] [EOL] if not glob : [EOL] glob = [string] [EOL] [EOL] if path . is_dir ( ) : [EOL] flist = sorted ( path . glob ( glob ) ) [EOL] elif path . is_file ( ) : [EOL] flist = [ path ] [EOL] else : [EOL] raise FileNotFoundError ( path ) [EOL] [EOL] return flist [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . utils import meta_caption [EOL] from . base import FileIn , Microphone , SaveDisk , Screenshare , Webcam , Livestream [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , List , Dict , Union [EOL] import builtins [EOL] import typing_extensions [EOL] import configparser [EOL] import src [EOL] import pathlib [EOL] import typing [EOL] import bisect [EOL] from pathlib import Path [EOL] import logging [EOL] import os [EOL] import sys [EOL] from configparser import ConfigParser [EOL] from typing import List [EOL] [EOL] [comment] [EOL] from . import utils [EOL] from . ffmpeg import Ffmpeg , get_exe [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] BR30 = { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } [EOL] [EOL] BR60 = { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } [EOL] [EOL] [comment] [EOL] BRS = { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } [EOL] [EOL] FPS = [number] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class Stream : [EOL] def __init__ ( self , inifn , site , ** kwargs ) : [EOL] [EOL] self . F = Ffmpeg ( ) [EOL] [EOL] self . loglevel = self . F . INFO if kwargs . get ( [string] ) else self . F . ERROR [EOL] [EOL] self . inifn = Path ( inifn ) . expanduser ( ) if inifn else None [EOL] [EOL] self . site = site [EOL] self . vidsource = kwargs . get ( [string] ) [EOL] [EOL] if kwargs . get ( [string] ) : [EOL] self . image = Path ( kwargs [ [string] ] ) . expanduser ( ) [EOL] else : [EOL] self . image = None [EOL] [EOL] self . loop = kwargs . get ( [string] ) [EOL] [EOL] self . infn = Path ( kwargs [ [string] ] ) . expanduser ( ) if kwargs . get ( [string] ) else None [EOL] self . yes = self . F . YES if kwargs . get ( [string] ) else [ ] [EOL] [EOL] self . queue = [ ] [comment] [EOL] [EOL] self . caption = kwargs . get ( [string] ) [EOL] [EOL] self . timelimit = self . F . timelimit ( kwargs . get ( [string] ) ) [EOL] [EOL] def osparam ( self , key ) : [EOL] [docstring] [EOL] [EOL] C = ConfigParser ( inline_comment_prefixes = ( [string] , [string] ) ) [EOL] if self . inifn is None : [EOL] logging . info ( [string] ) [EOL] cfg = utils . get_inifile ( [string] ) [EOL] else : [EOL] cfg = Path ( self . inifn ) . expanduser ( ) . read_text ( ) [EOL] [EOL] C . read_string ( cfg ) [EOL] [EOL] self . exe = get_exe ( C . get ( sys . platform , [string] , fallback = [string] ) ) [EOL] self . probeexe = get_exe ( C . get ( sys . platform , [string] , fallback = [string] ) ) [EOL] [EOL] if self . site not in C : [EOL] raise ValueError ( f" [string] { self . site } [string] { self . inifn }" ) [EOL] [EOL] if [string] in os . environ : [EOL] if os . environ [ [string] ] == [string] : [EOL] logging . error ( [string] ) [EOL] [EOL] if self . vidsource == [string] : [EOL] self . res = C . get ( self . site , [string] ) . split ( [string] ) [EOL] self . fps = C . getint ( self . site , [string] ) [EOL] self . movingimage = self . staticimage = False [EOL] elif self . vidsource == [string] : [EOL] self . res = C . get ( self . site , [string] ) . split ( [string] ) [EOL] self . fps = C . getint ( self . site , [string] ) [EOL] self . origin = C . get ( self . site , [string] ) . split ( [string] ) [EOL] self . movingimage = self . staticimage = False [EOL] elif self . vidsource == [string] : [comment] [EOL] self . res = utils . get_resolution ( self . infn , self . probeexe ) [EOL] self . fps = utils . get_framerate ( self . infn , self . probeexe ) [EOL] elif self . vidsource is None and self . image : [comment] [EOL] self . res = utils . get_resolution ( self . image , self . probeexe ) [EOL] self . fps = utils . get_framerate ( self . infn , self . probeexe ) [EOL] else : [comment] [EOL] self . res = None [EOL] self . fps = None [EOL] [EOL] if self . res is not None and len ( self . res ) != [number] : [EOL] raise ValueError ( f" [string] { self . res }" ) [EOL] [EOL] self . audiofs = C . get ( self . site , [string] ) [EOL] self . preset = C . get ( self . site , [string] ) [EOL] [EOL] if not self . timelimit : [EOL] self . timelimit = self . F . timelimit ( C . get ( self . site , [string] , fallback = None ) ) [EOL] [EOL] [comment] [EOL] self . webcamchan = C . get ( sys . platform , [string] , fallback = None ) [EOL] self . screenchan = C . get ( sys . platform , [string] , fallback = None ) [EOL] [EOL] self . audiochan = C . get ( sys . platform , [string] , fallback = None ) [EOL] [EOL] self . vcap = C . get ( sys . platform , [string] ) [EOL] self . acap = C . get ( sys . platform , [string] , fallback = None ) [EOL] [EOL] self . hcam = C . get ( sys . platform , [string] ) [EOL] [EOL] self . video_kbps = C . getint ( self . site , [string] , fallback = None ) [EOL] self . audio_bps = C . get ( self . site , [string] ) [EOL] [EOL] self . keyframe_sec = C . getint ( self . site , [string] ) [EOL] [EOL] self . server = C . get ( self . site , [string] , fallback = None ) [EOL] [comment] [EOL] if key : [EOL] self . key = utils . getstreamkey ( key ) [EOL] else : [EOL] self . key = utils . getstreamkey ( C . get ( self . site , [string] , fallback = None ) ) [EOL] [EOL] def videoIn ( self , quick = False ) : [EOL] [docstring] [EOL] [EOL] if self . vidsource == [string] : [EOL] v = self . screengrab ( quick ) [EOL] elif self . vidsource == [string] : [EOL] v = self . webcam ( quick ) [EOL] elif self . vidsource is None or self . vidsource == [string] : [EOL] v = self . filein ( quick ) [EOL] else : [EOL] raise ValueError ( f" [string] { self . vidsource }" ) [EOL] [EOL] if sys . platform == [string] : [EOL] v = [ [string] , [string] ] + v [EOL] [EOL] return v [EOL] [EOL] def videoOut ( self ) : [EOL] [docstring] [EOL] [EOL] vid_format = [string] if sys . platform == [string] else [string] [EOL] v = [ [string] , [string] , [string] , vid_format ] [EOL] [comment] [EOL] [docstring] [EOL] if self . res is None : [comment] [EOL] return [ ] [EOL] [EOL] fps = self . fps if self . fps is not None else FPS [EOL] [EOL] v += [ [string] , self . preset , [string] , str ( self . video_kbps ) + [string] ] [EOL] [EOL] if self . image : [EOL] v += [ [string] , str ( fps ) ] [EOL] [EOL] v += [ [string] , str ( self . keyframe_sec * fps ) ] [EOL] [EOL] return v [EOL] [EOL] def audioIn ( self , quick = False ) : [EOL] [docstring] [EOL] if not ( self . audio_bps and self . acap and self . audiochan and self . audiofs ) : [EOL] return [ ] [EOL] [EOL] if self . audiochan == [string] or self . acap == [string] : [EOL] self . acap = [string] [EOL] if not self . audio_bps : [EOL] self . audio_bps = [string] [EOL] if not self . audiofs : [EOL] self . audiofs = [string] [EOL] self . audiochan = f" [string] { self . audiofs } [string] " [EOL] [EOL] if self . vidsource == [string] : [EOL] a = [ ] [EOL] elif self . acap == [string] : [EOL] a = [ [string] , [string] , [string] , self . audiochan ] [EOL] else : [EOL] a = [ [string] , self . acap , [string] , self . audiochan ] [EOL] [EOL] return a [EOL] [EOL] def audioOut ( self ) : [EOL] [docstring] [EOL] [EOL] if not ( self . audio_bps and self . acap and self . audiochan and self . audiofs ) : [EOL] return [ ] [EOL] [EOL] return [ [string] , [string] , [string] , str ( self . audio_bps ) , [string] , str ( self . audiofs ) ] [EOL] [EOL] def video_bitrate ( self ) : [EOL] [docstring] [EOL] if self . video_kbps : [comment] [EOL] return [EOL] [EOL] if self . res is not None : [EOL] x = int ( self . res [ [number] ] ) [EOL] elif self . vidsource is None or self . vidsource == [string] : [EOL] logging . info ( [string] ) [EOL] x = [number] [EOL] else : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] if self . fps is None or self . fps < [number] : [EOL] self . video_kbps = list ( BRS . values ( ) ) [ bisect . bisect_left ( list ( BRS . keys ( ) ) , x ) ] [EOL] elif [number] <= self . fps <= [number] : [EOL] self . video_kbps = list ( BR30 . values ( ) ) [ bisect . bisect_left ( list ( BR30 . keys ( ) ) , x ) ] [EOL] else : [EOL] self . video_kbps = list ( BR60 . values ( ) ) [ bisect . bisect_left ( list ( BR60 . keys ( ) ) , x ) ] [EOL] [EOL] def screengrab ( self , quick = False ) : [EOL] [docstring] [EOL] [EOL] v = [ [string] , self . vcap ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if not quick and self . res is not None : [EOL] v += [ [string] , [string] . join ( map ( str , self . res ) ) ] [EOL] [EOL] if sys . platform == [string] : [EOL] if quick : [EOL] v += [ [string] , self . screenchan ] [EOL] else : [EOL] v += [ [string] , f"{ self . screenchan } [string] { self . origin [ [number] ] } [string] { self . origin [ [number] ] }" ] [EOL] elif sys . platform == [string] : [EOL] if not quick : [EOL] v += [ [string] , str ( self . origin [ [number] ] ) , [string] , str ( self . origin [ [number] ] ) ] [EOL] [EOL] v += [ [string] , self . screenchan ] [EOL] [EOL] elif sys . platform == [string] : [EOL] v += [ [string] , self . screenchan ] [EOL] [EOL] return v [EOL] [EOL] def webcam ( self , quick = False ) : [EOL] [docstring] [EOL] webcam_chan = self . webcamchan [EOL] [EOL] if sys . platform == [string] : [EOL] if not webcam_chan : [EOL] webcam_chan = [string] [EOL] [EOL] v = [ [string] , self . hcam , [string] , webcam_chan ] [EOL] [EOL] [comment] [EOL] [EOL] return v [EOL] [EOL] def filein ( self , quick = False ) : [EOL] [docstring] [EOL] [EOL] v = [ ] [EOL] [EOL] [docstring] [EOL] [comment] [EOL] if isinstance ( self . image , Path ) : [EOL] self . movingimage = self . image . suffix in ( [string] , [string] , [string] , [string] ) [EOL] self . staticimage = not self . movingimage [EOL] else : [EOL] self . movingimage = self . staticimage = False [EOL] [comment] [EOL] if ( self . vidsource is not None and self . image ) or self . vidsource == [string] : [EOL] v . append ( self . F . THROTTLE ) [EOL] [comment] [EOL] if self . staticimage : [EOL] if not quick : [EOL] v += [ [string] , [string] ] [EOL] v . extend ( [ [string] , [string] , [string] , str ( self . image ) ] ) [EOL] elif self . movingimage : [EOL] v . extend ( self . F . movingBG ( self . image ) ) [EOL] elif self . loop and not self . image : [comment] [EOL] if not quick : [EOL] v . extend ( [ [string] , [string] ] ) [comment] [EOL] [comment] [EOL] if self . infn : [EOL] v . extend ( [ [string] , str ( self . infn ) ] ) [EOL] [EOL] return v [EOL] [EOL] def buffer ( self , server ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] buf = [ [string] , f"{ self . video_kbps } [string] " , [string] , f"{ self . video_kbps // [number] } [string] " ] [EOL] [EOL] if self . staticimage : [comment] [EOL] buf += [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] buf += [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] buf += [ [string] , [string] ] [EOL] [EOL] return buf [EOL]	typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] from pytest import approx [EOL] import subprocess [EOL] import os [EOL] import importlib . resources [EOL] [EOL] import pylivestream as pls [EOL] [EOL] sites = [ [string] , [string] , [string] ] [EOL] TIMEOUT = [number] [EOL] CI = os . environ . get ( [string] , None ) in ( [string] , [string] ) [EOL] [EOL] [EOL] def test_props ( periscope_kbps ) : [EOL] [EOL] with importlib . resources . path ( [string] , [string] ) as fn : [EOL] S = pls . FileIn ( inifn = None , websites = sites , infn = fn , key = [string] ) [EOL] for s in S . streams : [EOL] assert [string] in S . streams [ s ] . cmd [EOL] assert S . streams [ s ] . fps == approx ( [number] ) [EOL] [EOL] if s == [string] : [EOL] assert S . streams [ s ] . video_kbps == periscope_kbps [EOL] else : [EOL] if int ( S . streams [ s ] . res [ [number] ] ) == [number] : [EOL] assert S . streams [ s ] . video_kbps == [number] [EOL] elif int ( S . streams [ s ] . res [ [number] ] ) == [number] : [EOL] assert S . streams [ s ] . video_kbps == [number] [EOL] [EOL] [EOL] def test_audio ( periscope_kbps ) : [EOL] [EOL] with importlib . resources . path ( [string] , [string] ) as logo , importlib . resources . path ( [string] , [string] ) as fn : [EOL] S = pls . FileIn ( inifn = None , websites = sites , infn = fn , image = logo , key = [string] ) [EOL] for s in S . streams : [EOL] assert [string] in S . streams [ s ] . cmd [EOL] assert S . streams [ s ] . fps is None [EOL] [EOL] if s == [string] : [EOL] assert S . streams [ s ] . video_kbps == periscope_kbps [EOL] else : [EOL] assert S . streams [ s ] . video_kbps == [number] [EOL] [EOL] [EOL] @ pytest . mark . timeout ( TIMEOUT ) @ pytest . mark . skipif ( CI , reason = [string] ) def test_simple ( ) : [EOL] [docstring] [EOL] with importlib . resources . path ( [string] , [string] ) as logo , importlib . resources . path ( [string] , [string] ) as fn : [EOL] S = pls . FileIn ( inifn = None , websites = [string] , infn = fn , image = logo , yes = True , timeout = [number] ) [EOL] [EOL] S . golive ( ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( CI , reason = [string] ) def test_script ( ) : [EOL] with importlib . resources . path ( [string] , [string] ) as fn : [EOL] subprocess . check_call ( [ [string] , str ( fn ) , [string] , [string] , [string] , [string] ] , timeout = TIMEOUT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def periscope_kbps ( ) : [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from pytest import approx [EOL] import importlib . resources [EOL] [EOL] import pylivestream as pls [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] ] ) def test_get_ini_file ( fn ) : [EOL] [EOL] cfg = pls . utils . get_inifile ( fn ) [EOL] [EOL] assert isinstance ( cfg , str ) [EOL] [EOL] [EOL] def test_key ( tmp_path ) : [EOL] [docstring] [EOL] assert pls . utils . getstreamkey ( [string] ) == [string] [EOL] fn = tmp_path / [string] [EOL] fn . write_text ( [string] ) [EOL] assert pls . utils . getstreamkey ( fn ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , None ] , ids = [ [string] , [string] ] ) def test_empty_key ( key ) : [EOL] assert pls . utils . getstreamkey ( key ) is None [EOL] [EOL] [EOL] def test_bad_key ( tmp_path ) : [EOL] [EOL] with pytest . raises ( IsADirectoryError ) : [EOL] assert pls . utils . getstreamkey ( tmp_path ) is None [EOL] [EOL] with pytest . raises ( FileNotFoundError ) : [EOL] assert pls . utils . getstreamkey ( tmp_path / [string] ) is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) def test_exe ( rex ) : [EOL] exe = pls . ffmpeg . get_exe ( rex ) [EOL] assert rex in exe [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( None , [string] ) ) def test_attrs ( inp ) : [EOL] assert pls . utils . get_resolution ( inp ) is None [EOL] [EOL] with importlib . resources . path ( [string] , [string] ) as fn : [EOL] assert pls . utils . get_resolution ( fn ) == [ [number] , [number] ] [EOL] assert pls . utils . get_framerate ( fn ) == approx ( [number] ) [EOL] [EOL] [EOL] def test_config_not_found ( tmp_path ) : [EOL] with pytest . raises ( FileNotFoundError ) : [EOL] pls . Livestream ( tmp_path / [string] , [string] ) [EOL] [EOL] [EOL] def test_config_default ( tmp_path ) : [EOL] S = pls . Livestream ( None , [string] ) [EOL] assert [string] in S . site [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pylivestream as pls [EOL] import pytest [EOL] from pytest import approx [EOL] import subprocess [EOL] import os [EOL] import platform [EOL] [EOL] sites = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] TIMEOUT = [number] [EOL] CI = os . environ . get ( [string] , None ) in ( [string] , [string] ) [EOL] WSL = [string] in platform . uname ( ) . release [EOL] [EOL] [EOL] def test_props ( periscope_kbps ) : [EOL] S = pls . Webcam ( inifn = None , websites = sites , key = [string] ) [EOL] for s in S . streams : [EOL] assert [string] not in S . streams [ s ] . cmd [EOL] assert S . streams [ s ] . fps == approx ( [number] ) [EOL] [EOL] if s == [string] : [EOL] assert S . streams [ s ] . video_kbps == periscope_kbps [EOL] else : [EOL] if int ( S . streams [ s ] . res [ [number] ] ) == [number] : [EOL] assert S . streams [ s ] . video_kbps == [number] [EOL] elif int ( S . streams [ s ] . res [ [number] ] ) == [number] : [EOL] assert S . streams [ s ] . video_kbps == [number] [EOL] [EOL] [EOL] @ pytest . mark . timeout ( TIMEOUT ) @ pytest . mark . skipif ( CI or WSL , reason = [string] ) def test_stream ( ) : [EOL] S = pls . Webcam ( inifn = None , websites = [string] , timeout = [number] , key = [string] ) [EOL] [EOL] S . golive ( ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( CI or WSL , reason = [string] ) def test_script ( ) : [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , [string] ] , timeout = TIMEOUT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] import pylivestream as pls [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_props ( site ) : [EOL] p = pls . SaveDisk ( inifn = None , outfn = [string] ) [EOL] assert p . site == [string] [EOL] assert p . video_kbps == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0