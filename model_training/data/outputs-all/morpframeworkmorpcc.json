import nltk [EOL] [EOL] nltk . download ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Dict [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from logging . config import fileConfig [EOL] import re [EOL] [EOL] from sqlalchemy import engine_from_config [EOL] from sqlalchemy import pool [EOL] [EOL] from alembic import context [EOL] [EOL] USE_TWOPHASE = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] config = context . config [EOL] [EOL] [comment] [EOL] [comment] [EOL] fileConfig ( config . config_file_name ) [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] db_names = config . get_main_option ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from morpfw . crud . storage . sqlstorage import Base [EOL] import morpcc . tests . democms [EOL] import morepath [EOL] [EOL] morepath . autoscan ( ) [EOL] morepath . scan ( morpcc . tests . democms ) [EOL] target_metadata = { [string] : Base . metadata } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def run_migrations_offline ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] engines = { } [EOL] for name in re . split ( [string] , db_names ) : [EOL] engines [ name ] = rec = { } [EOL] rec [ [string] ] = context . config . get_section_option ( name , [string] ) [EOL] [EOL] for name , rec in engines . items ( ) : [EOL] logger . info ( [string] % name ) [EOL] file_ = [string] % name [EOL] logger . info ( [string] % file_ ) [EOL] with open ( file_ , [string] ) as buffer : [EOL] context . configure ( url = rec [ [string] ] , output_buffer = buffer , target_metadata = target_metadata . get ( name ) , literal_binds = True , dialect_opts = { [string] : [string] } , ) [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( engine_name = name ) [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] engines = { } [EOL] for name in re . split ( [string] , db_names ) : [EOL] engines [ name ] = rec = { } [EOL] rec [ [string] ] = engine_from_config ( context . config . get_section ( name ) , prefix = [string] , poolclass = pool . NullPool , ) [EOL] [EOL] for name , rec in engines . items ( ) : [EOL] engine = rec [ [string] ] [EOL] rec [ [string] ] = conn = engine . connect ( ) [EOL] [EOL] if USE_TWOPHASE : [EOL] rec [ [string] ] = conn . begin_twophase ( ) [EOL] else : [EOL] rec [ [string] ] = conn . begin ( ) [EOL] [EOL] try : [EOL] for name , rec in engines . items ( ) : [EOL] logger . info ( [string] % name ) [EOL] context . configure ( connection = rec [ [string] ] , upgrade_token = [string] % name , downgrade_token = [string] % name , target_metadata = target_metadata . get ( name ) , ) [EOL] context . run_migrations ( engine_name = name ) [EOL] [EOL] if USE_TWOPHASE : [EOL] for rec in engines . values ( ) : [EOL] rec [ [string] ] . prepare ( ) [EOL] [EOL] for rec in engines . values ( ) : [EOL] rec [ [string] ] . commit ( ) [EOL] except : [EOL] for rec in engines . values ( ) : [EOL] rec [ [string] ] . rollback ( ) [EOL] raise [EOL] finally : [EOL] for rec in engines . values ( ) : [EOL] rec [ [string] ] . close ( ) [EOL] [EOL] [EOL] if context . is_offline_mode ( ) : [EOL] run_migrations_offline ( ) [EOL] else : [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from deform . widget import SequenceWidget [EOL] [EOL] [EOL] def patch ( ) : [EOL] from deform . compat import string_types , url_quote [EOL] [EOL] def prototype ( self , field , ** kw ) : [EOL] [comment] [EOL] [comment] [EOL] item_field = field . children [ [number] ] . clone ( ) [EOL] if not item_field . name : [EOL] info = [string] % field [EOL] raise ValueError ( info ) [EOL] [comment] [EOL] proto = item_field . render_template ( self . item_template , parent = field , ** kw ) [EOL] if isinstance ( proto , string_types ) : [EOL] proto = proto . encode ( [string] ) [EOL] proto = url_quote ( proto ) [EOL] return proto [EOL] [EOL] if not getattr ( [string] , [string] , False ) : [EOL] SequenceWidget . prototype = prototype [EOL] SequenceWidget . __prototype_patched = True [EOL] [EOL] [EOL] patch ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from morpfw . permission import All as MFWAll [EOL] [EOL] [EOL] class All ( MFWAll ) : [EOL] pass [EOL] [EOL] [EOL] class EditOwnProfile ( All ) : [EOL] pass [EOL] [EOL] [EOL] class ViewHome ( All ) : [EOL] pass [EOL] [EOL] [EOL] class ManageSite ( All ) : [EOL] pass [EOL] [EOL] [EOL] class SiteSearch ( All ) : [EOL] pass [EOL] [EOL] [EOL] class ManagePermission ( All ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import _importlib_modulespec [EOL] import typing [EOL] import copy [EOL] import dataclasses [EOL] from dataclasses import field [EOL] from datetime import date , datetime [EOL] from importlib import import_module [EOL] [EOL] from pkg_resources import resource_filename [EOL] [EOL] import colander [EOL] from deform . widget import HiddenWidget [EOL] from inverter . common import dataclass_check_type , dataclass_get_type [EOL] from morpfw . interfaces import ISchema [EOL] [EOL] [EOL] def permits ( request , context , permission ) : [EOL] if isinstance ( permission , str ) : [EOL] perm_mod , perm_cls = permission . split ( [string] ) [EOL] mod = import_module ( perm_mod ) [EOL] klass = getattr ( mod , perm_cls ) [EOL] else : [EOL] klass = permission [EOL] return request . app . _permits ( request . identity , context , klass ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . app import App [EOL] from webob import static [EOL] from webob . exc import HTTPNotFound , HTTPUnauthorized , HTTPNotModified [EOL] from pkg_resources import resource_filename [EOL] import os [EOL] import hashlib [EOL] from datetime import datetime , timedelta [EOL] from morpfw . static import StaticRoot [EOL] import morepath [EOL] [EOL] ETAG = hashlib . md5 ( datetime . now ( ) . strftime ( [string] ) . encode ( [string] ) ) . hexdigest ( ) [EOL] [EOL] [EOL] class MorpCCStaticRoot ( StaticRoot ) : [EOL] [EOL] module = [string] [EOL] directory = [string] [EOL] [EOL] [EOL] @ App . path ( model = MorpCCStaticRoot , path = [string] , absorb = True ) def get_staticroot ( absorb ) : [EOL] return MorpCCStaticRoot ( absorb ) [EOL] [EOL] [EOL] class DeformStaticRoot ( StaticRoot ) : [EOL] [EOL] module = [string] [EOL] directory = [string] [EOL] [EOL] [EOL] @ App . path ( model = DeformStaticRoot , path = [string] , absorb = True ) def get_deformstaticroot ( absorb ) : [EOL] return DeformStaticRoot ( absorb ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] from . import patches [EOL] import logging [EOL] [EOL] from . app import App [EOL] from . crud . model import CollectionUI , ModelUI [EOL] from . root import Root [EOL] from . static import StaticRoot [EOL] from . wizard . wizard import AgreementWizardStep , FormWizardStep , Wizard , WizardStep [EOL] [EOL] log = logging . getLogger ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
from morpcc . authz import rule_from_assignment [EOL] from morpfw . crud import permission as crudperm [EOL] from morpfw . permission import All as MFWAll [EOL] [EOL] from . import permission [EOL] from . app import App [EOL] from . root import Root [EOL] from . users . model import CurrentUserModelUI [EOL] [EOL] [EOL] @ App . permission_rule ( model = Root , permission = MFWAll ) def root_view_permission ( identity , model , permission ) : [EOL] return rule_from_assignment ( model . request , model , permission , identity ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import morepath [EOL] from . app import App [EOL] import morepath [EOL] [EOL] [EOL] @ App . tween_factory ( ) def make_tween ( app , handler ) : [EOL] def set_caching_headers ( request ) : [EOL] response = handler ( request ) [EOL] if not response . headers . get ( [string] ) : [EOL] response . headers [ [string] ] = [string] [EOL] return response [EOL] return set_caching_headers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import threading [EOL] import typing [EOL] import os [EOL] import socket [EOL] import sys [EOL] import threading [EOL] import time [EOL] import typing [EOL] [EOL] import luigi [EOL] import transaction [EOL] import yaml [EOL] from morpfw . request import request_factory [EOL] [EOL] try : [EOL] from pyspark . sql import SparkSession [EOL] [EOL] HAS_SPARK = True [EOL] except ImportError : [EOL] HAS_SPARK = False [EOL] [EOL] threadlocal = threading . local ( ) [EOL] [EOL] [EOL] class MorpTask ( luigi . Task ) : [EOL] settings_file = luigi . Parameter ( ) [EOL] [EOL] environ = None [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] if not os . path . exists ( self . settings_file ) : [EOL] raise IOError ( [string] % self . settings_file ) [EOL] [EOL] def request ( self ) : [EOL] extra_environ = self . environ or { } [EOL] return request_factory ( yaml . load ( open ( self . settings_file ) , Loader = yaml . Loader ) , extra_environ = extra_environ , ) [EOL] [EOL] [EOL] if HAS_SPARK : [EOL] [EOL] class MorpSparkTask ( MorpTask ) : [EOL] def spark_session ( self , app_name = None ) : [EOL] return self . spark_session_builder ( app_name ) . getOrCreate ( ) [EOL] [EOL] def spark_session_builder ( self , app_name = None ) : [EOL] if not os . environ . get ( [string] , None ) : [EOL] os . environ [ [string] ] = sys . executable [EOL] if not os . environ . get ( [string] , None ) : [EOL] os . environ [ [string] ] = sys . executable [EOL] if app_name is None : [EOL] app_name = [string] % ( socket . gethostname ( ) , int ( time . time ( ) ) ) [EOL] return SparkSession . builder . appName ( app_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $threading.local$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.luigi.MorpTask]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import functools [EOL] import os [EOL] from uuid import uuid4 [EOL] [EOL] import dectate [EOL] import morepath [EOL] import morpfw [EOL] import reg [EOL] from beaker . middleware import CacheMiddleware as BeakerCacheMiddleware [EOL] from beaker . middleware import SessionMiddleware as BeakerMiddleware [EOL] from more . chameleon import ChameleonApp [EOL] from morepath . publish import resolve_model [EOL] from morpcc . authz . policy import MorpCCAuthzPolicy [EOL] from morpfw . app import DBSessionRequest [EOL] from morpfw . authn . pas . policy import SQLStorageAuthApp , SQLStorageAuthnPolicy [EOL] from morpfw . authz . pas import DefaultAuthzPolicy [EOL] from morpfw . main import create_app [EOL] from webob . exc import HTTPException [EOL] [EOL] from . import directive [EOL] from . authn import IdentityPolicy [EOL] [EOL] [EOL] class WebAppRequest ( DBSessionRequest ) : [EOL] def notify ( self , category , title , message ) : [EOL] session = self . environ [ [string] ] [EOL] session . setdefault ( [string] , [ ] ) [EOL] session [ [string] ] . append ( { [string] : category , [string] : title , [string] : message } ) [EOL] session . save ( ) [EOL] [EOL] def messages ( self ) : [EOL] session = self . environ [ [string] ] [EOL] result = session . get ( [string] , [ ] ) [EOL] session [ [string] ] = [ ] [EOL] session . save ( ) [EOL] return result [EOL] [EOL] @ property def session ( self ) : [EOL] return self . environ [ [string] ] [EOL] [EOL] @ property def cache ( self ) : [EOL] return self . environ [ [string] ] [EOL] [EOL] [EOL] class App ( ChameleonApp , morpfw . SQLApp , MorpCCAuthzPolicy ) : [EOL] [EOL] request_class = WebAppRequest [EOL] [EOL] portlet = dectate . directive ( directive . PortletFactoryAction ) [EOL] portletprovider = dectate . directive ( directive . PortletProviderFactoryAction ) [EOL] structure_column = dectate . directive ( directive . StructureColumnAction ) [EOL] schemaextender = dectate . directive ( directive . SchemaExtenderAction ) [EOL] messagingprovider = dectate . directive ( directive . MessagingProviderAction ) [EOL] vocabulary = dectate . directive ( directive . VocabularyAction ) [EOL] indexer = dectate . directive ( directive . IndexerAction ) [EOL] indexresolver = dectate . directive ( directive . IndexResolverAction ) [EOL] behavior = dectate . directive ( directive . BehaviorAction ) [EOL] application_behavior = dectate . directive ( directive . ApplicationBehaviorAction ) [EOL] default_factory = dectate . directive ( directive . DefaultFactoryAction ) [EOL] restricted_module = dectate . directive ( directive . RestrictedModuleAction ) [EOL] breadcrumb = dectate . directive ( directive . BreadcrumbAction ) [EOL] setting_page = dectate . directive ( directive . SettingPageAction ) [EOL] [EOL] @ reg . dispatch_method ( reg . match_instance ( [string] ) , reg . match_key ( [string] ) ) def get_indexer ( self , model , name ) : [EOL] return None [EOL] [EOL] @ reg . dispatch_method ( reg . match_instance ( [string] ) , reg . match_instance ( [string] ) , reg . match_key ( [string] ) , ) def get_structure_column ( self , model , request , name ) : [EOL] raise NotImplementedError ( [string] % ( model , name ) ) [EOL] [EOL] def get_portletprovider ( self , name ) : [EOL] return self . config . portletprovider_registry . get_provider ( name ) [EOL] [EOL] @ reg . dispatch_method ( reg . match_class ( [string] ) ) def get_schemaextender ( self , schema ) : [EOL] return schema [EOL] [EOL] @ reg . dispatch_method ( reg . match_instance ( [string] ) , reg . match_key ( [string] ) ) def get_messagingprovider ( self , request , name ) : [EOL] raise NotImplementedError ( [string] % name ) [EOL] [EOL] @ reg . dispatch_method ( reg . match_instance ( [string] ) , reg . match_key ( [string] ) ) def get_vocabulary ( self , request , name ) : [EOL] return None [EOL] [EOL] @ reg . dispatch_method ( reg . match_key ( [string] ) ) def get_behavior_factory ( self , name ) : [EOL] raise NotImplementedError [EOL] [EOL] @ reg . dispatch_method ( reg . match_key ( [string] ) ) def get_application_behavior_factory ( self , name ) : [EOL] raise NotImplementedError [EOL] [EOL] @ reg . dispatch_method ( reg . match_key ( [string] ) ) def get_default_factory ( self , name ) : [EOL] raise NotImplementedError [EOL] [EOL] @ reg . dispatch_method ( reg . match_key ( [string] ) ) def get_index_resolver ( self , name ) : [EOL] raise NotImplementedError [EOL] [EOL] @ reg . dispatch_method ( reg . match_key ( [string] ) ) def get_restricted_module ( self , name ) : [EOL] raise ImportError ( [string] . format ( name ) ) [EOL] [EOL] @ reg . dispatch_method ( reg . match_instance ( [string] ) , reg . match_instance ( [string] ) , ) def get_breadcrumb ( self , model , request ) : [EOL] return [ ] [EOL] [EOL] def render_view ( self , context , request , name = [string] ) : [EOL] lookup = self . get_view . by_predicates ( model = context . __class__ , name = name ) [EOL] if lookup and lookup . component : [EOL] try : [EOL] return lookup . component ( obj = context , request = request , app = self ) [EOL] except HTTPException as e : [EOL] return None [EOL] return None [EOL] [EOL] [EOL] class AuthnPolicy ( SQLStorageAuthnPolicy ) : [EOL] def get_identity_policy ( self , settings ) : [EOL] config = settings . configuration . __dict__ [EOL] if config . get ( [string] , True ) : [EOL] secure = False [EOL] else : [EOL] secure = True [EOL] [EOL] master_secret = config . get ( [string] , { } ) . get ( [string] , uuid4 ( ) . hex ) [EOL] [EOL] jwt_settings = config . get ( [string] ) . copy ( ) [EOL] if not [string] in jwt_settings : [EOL] jwt_settings [ [string] ] = master_secret [EOL] [EOL] itsdangerous_settings = { [string] : secure , [string] : master_secret } [EOL] [EOL] return IdentityPolicy ( jwt_settings = jwt_settings , itsdangerous_settings = itsdangerous_settings , api_root = [string] , development_mode = config . get ( [string] , True ) , ) [EOL] [EOL] [EOL] App . hook_auth_models ( prefix = [string] ) [EOL] [EOL] [EOL] def create_morpcc_app ( settings , scan = True , ** kwargs ) : [EOL] application = create_app ( settings = settings , scan = scan , ** kwargs ) [EOL] beaker_settings = { } [EOL] [EOL] for k , v in settings [ [string] ] . items ( ) : [EOL] if k . startswith ( [string] ) : [EOL] beaker_settings [ k [ len ( [string] ) : ] ] = v [EOL] [EOL] sessionized = BeakerMiddleware ( application , beaker_settings ) [EOL] cached = BeakerCacheMiddleware ( sessionized , beaker_settings ) [EOL] return cached [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.WebAppRequest]$ 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.app.App]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import rulez [EOL] from morpfw . authn . pas . user . path import get_user_collection [EOL] from morpfw . crud import permission as crudperms [EOL] from webob . exc import HTTPUnauthorized [EOL] [EOL] from . app import App [EOL] from . application . path import get_collection as get_app_collection [EOL] from . users . path import get_current_user_model_ui [EOL] from . util import permits [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def left_portlets ( context , request ) : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def topnav_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def abovecontent_portlets ( context , request ) : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def logo_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def style_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def header_scripts_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def footer_scripts_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portletprovider ( name = [string] ) def footer_portlets ( context , request ) : [EOL] return [ [string] ] [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def navigation_portlet ( context , request ) : [EOL] [EOL] general_children = [ { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) } , ] [EOL] [EOL] appcol = get_app_collection ( request ) [EOL] apps_nav = [ ] [EOL] for app in appcol . search ( ) : [EOL] appui = app . ui ( ) [EOL] if permits ( request , appui , crudperms . View ) : [EOL] apps_nav . append ( { [string] : app [ [string] ] , [string] : app [ [string] ] or [string] , [string] : request . link ( appui , [string] . format ( appui . default_view ) ) , } ) [EOL] [EOL] types = request . app . config . type_registry . get_typeinfos ( request ) [EOL] types_nav = [ ] [EOL] for typeinfo in types . values ( ) : [EOL] if typeinfo . get ( [string] , False ) : [EOL] continue [EOL] collection = typeinfo [ [string] ] ( request ) [EOL] collectionui = collection . ui ( ) [EOL] if permits ( request , collectionui , crudperms . View ) : [EOL] types_nav . append ( { [string] : typeinfo [ [string] ] , [string] : [string] , [string] : request . link ( collectionui , [string] % collectionui . default_view ) , } ) [EOL] types_nav . sort ( key = lambda x : x [ [string] ] ) [EOL] [EOL] navtree = [ ] [EOL] navtree . append ( { [string] : [string] , [string] : general_children } ) [EOL] if apps_nav : [EOL] navtree . append ( { [string] : [string] , [string] : apps_nav } ) [EOL] if types_nav : [EOL] navtree . append ( { [string] : [string] , [string] : types_nav } ) [EOL] [EOL] return { [string] : navtree } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def profile_portlet ( context , request ) : [EOL] user = get_current_user_model_ui ( request ) [EOL] if user is None : [EOL] raise HTTPUnauthorized [EOL] username = user . model [ [string] ] [EOL] xattr = user . model . xattrprovider ( ) [EOL] if user . model . get_blob ( [string] ) : [EOL] photo_url = request . link ( user , [string] ) [EOL] else : [EOL] photo_url = request . relative_url ( [string] ) [EOL] return { [string] : xattr . get ( [string] , username ) or username , [string] : photo_url , [string] : user . model [ [string] ] or [string] , } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def topnav_portlet ( context , request ) : [EOL] user = get_current_user_model_ui ( request ) [EOL] username = user . model [ [string] ] [EOL] xattr = user . model . xattrprovider ( ) [EOL] if user . model . get_blob ( [string] ) : [EOL] photo_url = request . link ( user , [string] ) [EOL] else : [EOL] photo_url = request . relative_url ( [string] ) [EOL] [EOL] notif_col = request . get_collection ( [string] ) . ui ( ) [EOL] notifs = notif_col . search ( query = rulez . field [ [string] ] == request . identity . userid , limit = [number] , order_by = ( [string] , [string] ) , ) [EOL] unread_notifs = notif_col . collection . aggregate ( query = rulez . and_ ( rulez . field [ [string] ] == None , rulez . field [ [string] ] == request . identity . userid , ) , group = { [string] : { [string] : [string] , [string] : [string] } } , ) [EOL] return { [string] : xattr . get ( [string] , username ) or username , [string] : photo_url , [string] : notifs , [string] : unread_notifs [ [number] ] [ [string] ] , [string] : user . model [ [string] ] or [string] , } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def breadcrumb_portlet ( context , request ) : [EOL] [docstring] [EOL] breadcrumb = request . app . get_breadcrumb ( context , request ) [EOL] return { [string] : breadcrumb } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def timezone_portlet ( context , request ) : [EOL] user = get_current_user_model_ui ( request ) [EOL] return { [string] : user . model [ [string] ] or [string] } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def logo_portlet ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def footer_portlet ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def custom_styles_portlet ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] , ) def custom_header_scripts_portlet ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] , ) def custom_footer_scripts_portlet ( context , request ) : [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import morpcc [EOL] import builtins [EOL] import registry [EOL] import typing [EOL] import dectate [EOL] import morepath [EOL] import reg [EOL] from morepath . directive import SettingAction [EOL] [EOL] from . permission import ManageSite [EOL] from . registry . applicationbehavior import ApplicationBehaviorRegistry [EOL] from . registry . behavior import BehaviorRegistry [EOL] from . registry . default_factory import DefaultFactoryRegistry [EOL] from . registry . portlet import PortletProviderRegistry , PortletRegistry [EOL] from . registry . settingpage import SettingPageRegistry [EOL] [EOL] PORTLET_FACTORY_IDS = { } [EOL] [EOL] [EOL] class PortletFactoryAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : PortletRegistry } [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name , template = None , permission = None ) : [EOL] self . template = template [EOL] self . name = name [EOL] self . permission = permission [EOL] [EOL] def identifier ( self , portlet_registry ) : [EOL] return self . name [EOL] [EOL] def perform ( self , obj , portlet_registry ) : [EOL] portlet_registry . register ( obj , name = self . name , template = self . template , permission = self . permission ) [EOL] [EOL] [EOL] class PortletProviderFactoryAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : PortletProviderRegistry } [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name , permission = None ) : [EOL] self . name = name [EOL] self . permission = permission [EOL] [EOL] def identifier ( self , portletprovider_registry ) : [EOL] return self . name [EOL] [EOL] def perform ( self , obj , portletprovider_registry ) : [EOL] portletprovider_registry . register ( obj , name = self . name , permission = self . permission ) [EOL] [EOL] [EOL] class StructureColumnAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , model , name ) : [EOL] self . model = model [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . model , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_structure_column . register ( reg . methodify ( obj ) , model = self . model , request = morepath . Request , name = self . name , ) [EOL] [EOL] [EOL] class SchemaExtenderAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , schema ) : [EOL] self . schema = schema [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . schema ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_schemaextender . register ( reg . methodify ( obj ) , schema = self . schema ) [EOL] [EOL] [EOL] class MessagingProviderAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_messagingprovider . register ( reg . methodify ( obj ) , request = morepath . Request , name = self . name ) [EOL] [EOL] [EOL] class VocabularyAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_vocabulary . register ( reg . methodify ( obj ) , request = morepath . Request , name = self . name ) [EOL] [EOL] [EOL] class IndexerAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , model , name ) : [EOL] self . model = model [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . model , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_indexer . register ( reg . methodify ( obj ) , model = self . model , name = self . name , ) [EOL] [EOL] [EOL] class BehaviorAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : BehaviorRegistry } [EOL] [EOL] app_class_arg = True [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class , behavior_registry ) : [EOL] return self . name [EOL] [EOL] def perform ( self , obj , app_class , behavior_registry ) : [EOL] def factory ( name ) : [EOL] return obj [EOL] [EOL] app_class . get_behavior_factory . register ( reg . methodify ( factory ) , name = self . name ) [EOL] behavior_registry . register_behavior ( name = self . name ) [EOL] [EOL] [EOL] class ApplicationBehaviorAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : ApplicationBehaviorRegistry } [EOL] [EOL] app_class_arg = True [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class , application_behavior_registry ) : [EOL] return self . name [EOL] [EOL] def perform ( self , obj , app_class , application_behavior_registry ) : [EOL] def factory ( name ) : [EOL] return obj [EOL] [EOL] app_class . get_application_behavior_factory . register ( reg . methodify ( factory ) , name = self . name ) [EOL] application_behavior_registry . register_behavior ( name = self . name ) [EOL] [EOL] [EOL] class DefaultFactoryAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : DefaultFactoryRegistry } [EOL] [EOL] app_class_arg = True [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class , default_factory_registry ) : [EOL] return self . name [EOL] [EOL] def perform ( self , obj , app_class , default_factory_registry ) : [EOL] def factory ( name ) : [EOL] return obj [EOL] [EOL] app_class . get_default_factory . register ( reg . methodify ( factory ) , name = self . name ) [EOL] default_factory_registry . register ( name = self . name ) [EOL] [EOL] [EOL] class IndexResolverAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] def factory ( name ) : [EOL] return obj [EOL] [EOL] app_class . get_index_resolver . register ( reg . methodify ( factory ) , name = self . name ) [EOL] [EOL] [EOL] class RestrictedModuleAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_restricted_module . register ( reg . methodify ( obj ) , name = self . name ) [EOL] [EOL] [EOL] class BreadcrumbAction ( dectate . Action ) : [EOL] [EOL] app_class_arg = True [EOL] [EOL] def __init__ ( self , model ) : [EOL] self . model = model [EOL] [EOL] def identifier ( self , app_class ) : [EOL] return str ( ( app_class , self . model ) ) [EOL] [EOL] def perform ( self , obj , app_class ) : [EOL] app_class . get_breadcrumb . register ( reg . methodify ( obj ) , model = self . model , request = morepath . Request , ) [EOL] [EOL] [EOL] class SettingPageAction ( dectate . Action ) : [EOL] [EOL] config = { [string] : SettingPageRegistry } [EOL] app_class_arg = True [EOL] [EOL] depends = [ SettingAction ] [EOL] [EOL] def __init__ ( self , name , permission = None , title = None , order = [number] ) : [EOL] self . name = name [EOL] if title is None : [EOL] title = name . replace ( [string] , [string] ) . title ( ) [EOL] self . title = title [EOL] self . permission = permission [EOL] self . order = order [EOL] [EOL] def identifier ( self , app_class , setting_page_registry ) : [EOL] return str ( ( app_class , self . name ) ) [EOL] [EOL] def perform ( self , obj , app_class , setting_page_registry ) : [EOL] setting_page_registry . register ( obj , name = self . name , title = self . title , permission = self . permission , order = self . order , ) [EOL] [EOL]	registry.settingpage.SettingPageRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.settingpage.SettingPageRegistry$ 0 0 0 $registry.settingpage.SettingPageRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import json [EOL] import os [EOL] [EOL] from . app import App [EOL] [EOL] [EOL] @ App . vocabulary ( [string] ) def behaviors ( request , name ) : [EOL] registry = request . app . config . behavior_registry [EOL] return [ { [string] : n , [string] : n } for n in registry . behaviors ] [EOL] [EOL] [EOL] @ App . vocabulary ( [string] ) def application_behaviors ( request , name ) : [EOL] registry = request . app . config . application_behavior_registry [EOL] return [ { [string] : n , [string] : n } for n in registry . behaviors ] [EOL] [EOL] [EOL] @ App . vocabulary ( [string] ) def default_factories ( request , name ) : [EOL] registry = request . app . config . default_factory_registry [EOL] return [ { [string] : n , [string] : n } for n in registry . names ] [EOL] [EOL] [EOL] CACHED = { } [EOL] [EOL] [EOL] @ App . vocabulary ( [string] ) def fa_icons ( request , name ) : [EOL] icons = CACHED . get ( [string] , None ) [EOL] [EOL] if icons is None : [EOL] icons_fpath = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] ) [EOL] with open ( icons_fpath ) as icons_file : [EOL] icons = json . loads ( icons_file . read ( ) ) [EOL] CACHED [ [string] ] = icons [EOL] [EOL] return [ { [string] : k , [string] : k , [string] : [string] . format ( v , k ) , } for k , v in icons . items ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . app import App [EOL] from . application . modelui import ApplicationModelUI [EOL] from . crud . model import CollectionUI , ModelUI [EOL] from . entity . modelui import EntityCollectionUI , EntityModelUI [EOL] from . root import Root [EOL] from . schema . modelui import SchemaCollectionUI , SchemaModelUI [EOL] [EOL] VIEW_TITLES = { [string] : [string] } [EOL] [EOL] [EOL] @ App . breadcrumb ( model = Root ) def get_root_breadcrumb ( model , request ) : [EOL] view_title = VIEW_TITLES . get ( request . view_name , None ) [EOL] if not view_title and request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] if view_title : [EOL] return [ { [string] : view_title , [string] : request . link ( model , request . view_name ) , [string] : True , } ] [EOL] return [ ] [EOL] [EOL] [EOL] @ App . breadcrumb ( model = ModelUI ) def get_model_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] try : [EOL] typeinfo = request . app . get_typeinfo_by_schema ( schema = model . model . schema , request = request ) [EOL] except KeyError as e : [EOL] return [ ] [EOL] [EOL] collection_crumb = { [string] : typeinfo [ [string] ] , [string] : request . link ( model . collection_ui ) , [string] : False , } [EOL] model_crumb = { [string] : model . model . title ( ) , [string] : request . link ( model ) , [string] : False , } [EOL] crumbs = [ collection_crumb , model_crumb ] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] model_crumb [ [string] ] = True [EOL] return crumbs [EOL] [EOL] [EOL] @ App . breadcrumb ( model = CollectionUI ) def get_collection_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] try : [EOL] typeinfo = request . app . get_typeinfo_by_schema ( schema = model . collection . schema , request = request ) [EOL] except KeyError as e : [EOL] return [ ] [EOL] [EOL] collection_crumb = { [string] : typeinfo [ [string] ] , [string] : request . link ( model ) , [string] : False , } [EOL] crumbs = [ collection_crumb ] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] collection_crumb [ [string] ] = True [EOL] return crumbs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import html [EOL] [EOL] from . app import App [EOL] from . permission import ViewHome [EOL] [EOL] [EOL] class Root ( object ) : [EOL] def __init__ ( self , request ) : [EOL] self . request = request [EOL] [EOL] [EOL] @ App . path ( model = Root , path = [string] ) def get_root ( request ) : [EOL] return Root ( request ) [EOL] [EOL] [EOL] @ App . html ( model = Root , permission = ViewHome , template = [string] ) def index ( context , request ) : [EOL] return { [string] : request . get_collection ( [string] ) . search ( ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Tuple , Dict [EOL] import morepath [EOL] import functools [EOL] import typing [EOL] import functools [EOL] import json [EOL] import os [EOL] from importlib import import_module [EOL] [EOL] from pkg_resources import resource_filename [EOL] [EOL] import morepath [EOL] import morpfw [EOL] from deform import Form [EOL] from morepath . publish import resolve_model [EOL] [EOL] from . app import App [EOL] from . root import Root [EOL] from . util import permits [EOL] [EOL] [EOL] @ App . template_render ( extension = [string] ) def get_chameleon_render ( loader , name , original_render ) : [EOL] [EOL] template = loader . load ( name , [string] ) [EOL] [EOL] def render ( content , request ) : [EOL] [EOL] main_template = loader . load ( [string] , [string] ) [EOL] load_template = functools . partial ( loader . load , format = [string] ) [EOL] context = resolve_model ( request . copy ( app = request . app ) ) [EOL] [EOL] def _permits ( permission , request = request , context = context ) : [EOL] if isinstance ( context , str ) : [EOL] context = request . resolve_path ( context ) [EOL] return permits ( request , context , permission ) [EOL] [EOL] variables = { [string] : request , [string] : context , [string] : main_template , [string] : request . app , [string] : _permits , [string] : request . app . settings , [string] : json , [string] : load_template , } [EOL] variables . update ( content or { } ) [EOL] return original_render ( template . render ( ** variables ) , request ) [EOL] [EOL] return render [EOL] [EOL] [EOL] @ App . template_directory ( ) def get_template_directory ( ) : [EOL] return [string] [EOL] [EOL] [EOL] def set_deform_override ( ) : [EOL] deform_templates = resource_filename ( [string] , [string] ) [EOL] form_templates = resource_filename ( [string] , os . path . join ( [string] , [string] ) ) [EOL] search_path = ( form_templates , deform_templates ) [EOL] Form . set_zpt_renderer ( search_path ) [EOL] [EOL] [EOL] set_deform_override ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morepath [EOL] import rulez [EOL] from morpfw . authn . pas import permission as authperm [EOL] from morpfw . authn . pas . user . model import UserCollection [EOL] from morpfw . authz . pas import APIKeyModel , CurrentUserModel , UserModel [EOL] from morpfw . crud import permission as crudperms [EOL] from morpfw . crud . model import Collection , Model [EOL] from morpfw . permission import All [EOL] [EOL] from . . crud . model import CollectionUI , ModelUI [EOL] from . . entitycontent . model import EntityContentCollection , EntityContentModel [EOL] from . . entitycontent . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] from . . util import permits [EOL] from . policy import MorpCCAuthzPolicy [EOL] [EOL] Policy = MorpCCAuthzPolicy [EOL] [EOL] [EOL] def rule_from_config ( request , key , default = True ) : [EOL] app = request . app [EOL] value = app . get_config ( key , default ) [EOL] return value [EOL] [EOL] [EOL] def rule_from_assignment ( request , model , permission , identity ) : [EOL] usercol = request . get_collection ( [string] ) [EOL] user = usercol . get_by_userid ( identity . userid ) [EOL] if user [ [string] ] : [EOL] return True [EOL] pcol = request . get_collection ( [string] ) [EOL] opcol = request . get_collection ( [string] ) [EOL] [EOL] permission_name = [string] % ( permission . __module__ , permission . __name__ , ) [EOL] groups = user . groups ( ) [EOL] [EOL] user_roles = [ ] [EOL] for gid , roles in user . group_roles ( ) . items ( ) : [EOL] for role in roles : [EOL] role_ref = [string] % ( gid , role ) [EOL] user_roles . append ( role_ref ) [EOL] [EOL] if isinstance ( model , Model ) or isinstance ( model , ModelUI ) : [EOL] found_perms = [ ] [EOL] for perm in opcol . search ( rulez . and_ ( rulez . field [ [string] ] == model . uuid , rulez . field [ [string] ] == permission_name , rulez . field [ [string] ] == True , ) ) : [EOL] found_perms . append ( perm ) [EOL] [EOL] for perm in sorted ( found_perms , key = lambda x : [number] if x [ [string] ] == [string] else [number] ) : [EOL] for role in user_roles : [EOL] if role in ( perm [ [string] ] or [ ] ) : [EOL] if perm [ [string] ] == [string] : [EOL] return True [EOL] return False [EOL] [EOL] model_hierarchy = [ ] [EOL] for klass in model . __class__ . __mro__ : [EOL] model_name = [string] % ( klass . __module__ , klass . __name__ ) [EOL] model_hierarchy . append ( model_name ) [EOL] [EOL] for model_name in model_hierarchy : [EOL] found_perms = [ ] [EOL] for perm in pcol . search ( rulez . and_ ( rulez . field [ [string] ] == model_name , rulez . field [ [string] ] == permission_name , rulez . field [ [string] ] == True , ) ) : [EOL] found_perms . append ( perm ) [EOL] [EOL] for perm in sorted ( found_perms , key = lambda x : [number] if x [ [string] ] == [string] else [number] ) : [EOL] for role in user_roles : [EOL] if role in ( perm [ [string] ] or [ ] ) : [EOL] if perm [ [string] ] == [string] : [EOL] return True [EOL] return False [EOL] [EOL] return False [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = UserCollection , permission = authperm . Register ) def allow_api_registration ( identity , model , permission ) : [EOL] return rule_from_config ( model . request , [string] ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = Collection , permission = All ) def collection_permission ( identity , model , permission ) : [EOL] return rule_from_assignment ( model . request , model , permission , identity ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = CollectionUI , permission = All ) def collectionui_permission ( identity , model , permission ) : [EOL] return permits ( model . request , model . collection , permission ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = ModelUI , permission = All ) def modelui_permission ( identity , model , permission ) : [EOL] return permits ( model . request , model . model , permission ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = Model , permission = All ) def model_permission ( identity , model , permission ) : [EOL] return rule_from_assignment ( model . request , model , permission , identity ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = EntityContentModel , permission = All ) def entitycontentmodel_permission ( identity , model , permission ) : [EOL] application = model . collection . application ( ) [EOL] return rule_from_assignment ( model . request , application , permission , identity ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = EntityContentCollection , permission = All ) def entitycontentcollection_permission ( identity , model , permission ) : [EOL] application = model . application ( ) [EOL] return rule_from_assignment ( model . request , application , permission , identity ) [EOL] [EOL] [EOL] def currentuser_permission ( identity , model , permission ) : [EOL] request = model . request [EOL] usercol = request . get_collection ( [string] ) [EOL] user = usercol . get_by_userid ( identity . userid ) [EOL] if user [ [string] ] : [EOL] return True [EOL] userid = identity . userid [EOL] if isinstance ( model , UserModel ) : [EOL] if model . userid == userid : [EOL] return True [EOL] elif isinstance ( model , APIKeyModel ) : [EOL] if model [ [string] ] == userid : [EOL] return True [EOL] [EOL] return rule_from_assignment ( request = model . request , model = model , permission = permission , identity = identity ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = UserModel , permission = crudperms . All ) def allow_user_crud ( identity , model , permission ) : [EOL] return currentuser_permission ( identity , model , permission ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = UserModel , permission = authperm . ChangePassword ) def allow_change_password ( identity , model , permission ) : [EOL] return currentuser_permission ( identity , model , permission ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = CurrentUserModel , permission = authperm . ChangePassword ) def allow_self_change_password ( identity , model , permission ) : [EOL] return currentuser_permission ( identity , model , permission ) [EOL] [EOL] [EOL] @ Policy . permission_rule ( model = APIKeyModel , permission = crudperms . All ) def allow_apikey_management ( identity , model , permission ) : [EOL] return currentuser_permission ( identity , model , permission ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.authz.policy.MorpCCAuthzPolicy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import morepath [EOL] from morpfw . authz . pas import DefaultAuthzPolicy [EOL] [EOL] [EOL] class MorpCCAuthzPolicy ( morepath . App ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . permission_rule import rule_from_assignment , rule_from_config [EOL] from . policy import MorpCCAuthzPolicy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import urllib [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from urllib . parse import urlparse [EOL] [EOL] import deform . widget [EOL] from morpfw . colander import EncryptedExportField [EOL] [EOL] from . . app import App [EOL] [EOL] [EOL] def get_encrypted_field ( request ) : [EOL] key = request . app . get_config ( [string] ) [EOL] return EncryptedExportField ( key ) [EOL] [EOL] [EOL] def valid_dn ( request , schema , field , value , mode = None ) : [EOL] if [string] not in value : [EOL] return [string] [EOL] [EOL] [EOL] def valid_ldapurl ( request , schema , field , value , mode = None ) : [EOL] try : [EOL] parsed = urlparse ( value ) [EOL] except : [EOL] return [string] [EOL] if parsed . scheme . lower ( ) not in [ [string] , [string] ] : [EOL] return [string] [EOL] [EOL] [EOL] @ dataclass class LDAPSetting ( object ) : [EOL] [EOL] ldap_uri = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [ valid_ldapurl ] } , ) [EOL] use_tls = field ( default = False , metadata = { [string] : [string] , [string] : False , [string] : [string] , } , ) [EOL] bind_dn = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [ valid_dn ] , } , ) [EOL] bind_password = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : deform . widget . PasswordWidget ( redisplay = True ) , [string] : [string] , [string] : get_encrypted_field , [string] : True , } , ) [EOL] user_base_dn = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [ valid_dn ] , } , ) [EOL] [EOL] user_search_filter = field ( default = [string] , metadata = { [string] : [string] , [string] : [string] , [string] : True , } , ) [EOL] user_search_scope = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : deform . widget . SelectWidget ( values = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) , } , ) [EOL] username_attr = field ( default = [string] , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , } , ) [EOL] email_attr = field ( default = [string] , metadata = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , } , ) [EOL] [EOL] [EOL] @ App . setting_page ( name = [string] , title = [string] ) def get_schema ( request ) : [EOL] scol = request . get_collection ( [string] ) [EOL] enabled_setting = scol . get_by_key ( [string] ) [EOL] enabled = bool ( enabled_setting [ [string] ] [ [string] ] ) [EOL] if enabled : [EOL] return LDAPSetting [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import morepath [EOL] import typing [EOL] from uuid import uuid4 [EOL] [EOL] import morepath [EOL] from more . itsdangerous import IdentityPolicy as BaseItsDangerousIdentityPolicy [EOL] from morpfw . authn . pas . policy import Identity , JWTWithAPIKeyIdentityPolicy [EOL] [EOL] [EOL] class ItsDangerousIdentityPolicy ( BaseItsDangerousIdentityPolicy ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] if [string] in kwargs : [EOL] self . _secret = kwargs [ [string] ] [EOL] del kwargs [ [string] ] [EOL] else : [EOL] self . _secret = None [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] @ morepath . reify def secret ( self ) : [EOL] if self . _secret : [EOL] return self . _secret [EOL] return uuid4 ( ) . hex [EOL] [EOL] def identify ( self , request ) : [EOL] identity = super ( ) . identify ( request ) [EOL] if identity : [EOL] [EOL] @ request . after def update_expiry ( response ) : [EOL] response . headers . add ( [string] , [string] ) [EOL] request . app . remember_identity ( response , request , identity ) [EOL] [EOL] identity = Identity ( request = request , userid = identity . userid ) [EOL] [EOL] return identity [EOL] [EOL] [EOL] class IdentityPolicy ( morepath . IdentityPolicy ) : [EOL] def __init__ ( self , jwt_settings , itsdangerous_settings , api_root = [string] , development_mode = False , ) : [EOL] self . api_root = api_root [EOL] self . jwtpolicy = JWTWithAPIKeyIdentityPolicy ( ** jwt_settings ) [EOL] self . itsdangerouspolicy = ItsDangerousIdentityPolicy ( ** itsdangerous_settings ) [EOL] self . development_mode = development_mode [EOL] [EOL] def getpolicy ( self , request ) : [EOL] if self . development_mode and request . cookies . get ( [string] ) : [EOL] [comment] [EOL] return self . itsdangerouspolicy [EOL] if request . path . startswith ( self . api_root ) : [EOL] return self . jwtpolicy [EOL] return self . itsdangerouspolicy [EOL] [EOL] def identify ( self , request ) : [EOL] policy = self . getpolicy ( request ) [EOL] return policy . identify ( request ) [EOL] [EOL] def remember ( self , response , request , identity ) : [EOL] policy = self . getpolicy ( request ) [EOL] return policy . remember ( response , request , identity ) [EOL] [EOL] def forget ( self , response , request ) : [EOL] policy = self . getpolicy ( request ) [EOL] return policy . forget ( response , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $morpcc.authn.policy.ItsDangerousIdentityPolicy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $morepath.Request$ 0 0 0 $typing.Any$ 0 0 0 0 0 $morepath.Request$ 0 0 0 $typing.Any$ 0 0 0 $morepath.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import ldap [EOL] from morpfw . authn . pas . storage . ldap3storage import LDAP3SQLUserStorage [EOL] from morpfw . authn . pas . storage . sqlstorage import UserSQLStorage [EOL] from morpfw . authn . pas . user . model import UserModel [EOL] [EOL] from . . app import App [EOL] [EOL] _scopes = { [string] : ldap . SCOPE_BASE , [string] : ldap . SCOPE_ONELEVEL , [string] : ldap . SCOPE_SUBTREE , } [EOL] [EOL] [EOL] @ App . storage ( model = UserModel ) def get_user_sqlstorage ( model , request , blobstorage ) : [EOL] settings = request . get_collection ( [string] ) [EOL] if not settings . resolve_raw ( [string] , None ) : [EOL] return UserSQLStorage ( request , blobstorage = blobstorage ) [EOL] ldap_uri = settings . resolve_raw ( [string] , None ) [EOL] use_tls = settings . resolve_raw ( [string] , None ) [EOL] bind_dn = settings . resolve_raw ( [string] , None ) [EOL] bind_password = settings . resolve_raw ( [string] , None ) [EOL] bind_password = request . fernet_decrypt ( bind_password ) [EOL] base_dn = settings . resolve_raw ( [string] , None ) [EOL] search_filter = settings . resolve_raw ( [string] , None ) [EOL] search_scope = settings . resolve_raw ( [string] , None ) [EOL] search_scope = _scopes . get ( search_scope , None ) [EOL] username_attr = settings . resolve_raw ( [string] , None ) [EOL] email_attr = settings . resolve_raw ( [string] , None ) [EOL] reqcheck = [ ldap_uri , bind_dn , bind_password , base_dn , search_filter , search_scope ] [EOL] if None in reqcheck : [EOL] print ( reqcheck ) [EOL] if not request . environ . get ( [string] , False ) : [EOL] request . notify ( [string] , [string] , [string] , ) [EOL] request . environ [ [string] ] = True [EOL] return UserSQLStorage ( request , blobstorage = blobstorage ) [EOL] [EOL] try : [EOL] return LDAP3SQLUserStorage ( request , ldap_uri = ldap_uri , base_dn = base_dn , bind_dn = bind_dn , bind_password = bind_password , start_tls = use_tls , search_scope = search_scope , username_attr = username_attr , email_attr = email_attr , filterstr = search_filter , blobstorage = blobstorage , ) [EOL] except ldap . INVALID_CREDENTIALS : [EOL] if not request . environ . get ( [string] , False ) : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] request . environ [ [string] ] = True [EOL] [EOL] return UserSQLStorage ( request , blobstorage = blobstorage ) [EOL] except ldap . PROTOCOL_ERROR : [EOL] if not request . environ . get ( [string] , False ) : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] request . environ [ [string] ] = True [EOL] [EOL] return UserSQLStorage ( request , blobstorage = blobstorage ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from morpfw . authn . pas . policy import Identity [EOL] [EOL] from . policy import IdentityPolicy , ItsDangerousIdentityPolicy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import rulez [EOL] from colander import Invalid , null [EOL] from deform . compat import string_types [EOL] from deform . widget import SelectWidget , Widget [EOL] [EOL] from . . referencedata . path import get_collection as get_refdata_collection [EOL] from . . referencedatakey . path import get_collection as get_refdatakey_collection [EOL] from . . referencedataproperty . path import get_collection as get_refdataprop_collection [EOL] [EOL] [EOL] class ReferenceDataWidget ( SelectWidget ) : [EOL] template = [string] [EOL] readonly_template = [string] [EOL] null_value = [string] [EOL] values = ( ) [EOL] multiple = False [EOL] [EOL] def __init__ ( self , referencedata_name , referencedata_property = [string] , ** kwargs ) : [EOL] self . referencedata_name = referencedata_name [EOL] self . referencedata_property = referencedata_property [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def search_url ( self , context , request ) : [EOL] baselink = request . relative_url ( [string] . format ( self . referencedata_name , self . referencedata_property ) ) [EOL] return baselink [EOL] [EOL] def get_label ( self , request , identifier ) : [EOL] col = get_refdata_collection ( request ) [EOL] refdatas = col . search ( rulez . field [ [string] ] == self . referencedata_name ) [EOL] if not refdatas : [EOL] return [string] [EOL] refdata = refdatas [ [number] ] [EOL] [EOL] keycol = get_refdatakey_collection ( request ) [EOL] keys = keycol . search ( rulez . and_ ( rulez . field [ [string] ] == refdata . uuid , rulez . field [ [string] ] == identifier , ) ) [EOL] [EOL] if not keys : [EOL] return identifier [EOL] [EOL] key = keys [ [number] ] [EOL] [EOL] propcol = get_refdataprop_collection ( request ) [EOL] props = propcol . search ( rulez . and_ ( rulez . field [ [string] ] == key . uuid , rulez . field [ [string] ] == self . referencedata_property , ) ) [EOL] [EOL] if not props : [EOL] return [string] [EOL] [EOL] return props [ [number] ] [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] from colander import Invalid , null [EOL] from deform . compat import string_types [EOL] from deform . widget import SelectWidget , Widget [EOL] [EOL] [EOL] class VocabularyWidget ( SelectWidget ) : [EOL] template = [string] [EOL] readonly_template = [string] [EOL] null_value = [string] [EOL] values = ( ) [EOL] multiple = False [EOL] [EOL] def __init__ ( self , vocabulary , ** kwargs ) : [EOL] self . vocabulary = vocabulary [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def search_url ( self , context , request ) : [EOL] baselink = request . relative_url ( [string] . format ( self . vocabulary ) ) [EOL] return baselink [EOL] [EOL] def get_label ( self , request , identifier , html = False ) : [EOL] data = self . get_data ( request , identifier ) [EOL] if data : [EOL] if html and data . get ( [string] , None ) : [EOL] return data [ [string] ] [EOL] return data [ [string] ] [EOL] return [string] [EOL] [EOL] def get_data ( self , request , identifier ) : [EOL] vocab = request . app . get_vocabulary ( request = request , name = self . vocabulary ) [EOL] if vocab is None : [EOL] return [string] [EOL] for v in vocab : [EOL] if v [ [string] ] == identifier : [EOL] return v [EOL] return None [EOL] [EOL] def get_data_json ( self , request , identifier , selected = False ) : [EOL] data = self . get_data ( request , identifier ) [EOL] if data is None : [EOL] return [string] [EOL] data [ [string] ] = data [ [string] ] [EOL] if selected : [EOL] data [ [string] ] = True [EOL] return json . dumps ( data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import json [EOL] [EOL] from deform . widget import TextAreaWidget [EOL] from pygments import highlight [EOL] from pygments . formatters import HtmlFormatter [EOL] from pygments . lexers import find_lexer_class_by_name [EOL] [EOL] SUPPORTED_EDITAREA_SYNTAX = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ALT_EDITAREA_SYNTAX = { [string] : [string] } [EOL] [EOL] [EOL] class CodeWidget ( TextAreaWidget ) : [EOL] [EOL] css_class = [string] [EOL] template = [string] [EOL] readonly_template = [string] [EOL] syntax = [string] [EOL] [EOL] def highlight ( self , code ) : [EOL] Lexer = find_lexer_class_by_name ( self . syntax ) [EOL] formatter = HtmlFormatter ( ) [EOL] highlighted = highlight ( code , Lexer ( ) , formatter ) [EOL] return highlighted [EOL] [EOL] def editarea_syntax ( self ) : [EOL] if self . syntax in SUPPORTED_EDITAREA_SYNTAX : [EOL] return self . syntax [EOL] return ALT_EDITAREA_SYNTAX . get ( self . syntax , [string] ) [EOL] [EOL] [EOL] class JSONCodeWidget ( CodeWidget ) : [EOL] [docstring] [EOL] [EOL] syntax = [string] [EOL] [EOL] def deserialize ( self , field , pstruct ) : [EOL] pstruct = super ( ) . deserialize ( field , pstruct ) [EOL] return json . loads ( pstruct ) [EOL] [EOL] def serialize ( self , field , cstruct , ** kw ) : [EOL] cstruct = json . dumps ( cstruct , indent = [number] ) [EOL] return super ( ) . serialize ( field , cstruct , ** kw ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import rulez [EOL] from colander import Invalid , null [EOL] from deform . compat import string_types [EOL] from deform . widget import SelectWidget , Widget [EOL] from morpfw . authn . pas . user . path import get_user_collection [EOL] [EOL] from . . users . model import UserModelUI [EOL] from . . users . path import get_user_collection_ui [EOL] [EOL] [EOL] class ReferenceWidget ( SelectWidget ) : [EOL] template = [string] [EOL] readonly_template = [string] [EOL] null_value = [string] [EOL] values = ( ) [EOL] multiple = False [EOL] [EOL] def __init__ ( self , resource_type , term_field = [string] , value_field = [string] , get_search_url = None , ** kwargs ) : [EOL] self . resource_type = resource_type [EOL] self . term_field = term_field [EOL] self . value_field = value_field [EOL] self . get_search_url = get_search_url [EOL] if kwargs . get ( [string] , None ) is None : [EOL] kwargs [ [string] ] = [string] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def deserialize ( self , * args , ** kwargs ) : [EOL] result = super ( ) . deserialize ( * args , ** kwargs ) [EOL] return result [EOL] [EOL] def get_resource_search_url ( self , context , request ) : [EOL] if self . get_search_url is None : [EOL] baselink = request . relative_url ( [string] ) [EOL] else : [EOL] baselink = self . get_search_url ( self , context , request ) [EOL] if [string] not in baselink : [EOL] baselink += [string] [EOL] else : [EOL] baselink += [string] [EOL] return baselink + [string] % ( self . resource_type , self . term_field , self . value_field , ) [EOL] [EOL] def get_resource_url ( self , request , identifier ) : [EOL] m = self . get_resource ( request , identifier ) [EOL] if not m : [EOL] return None [EOL] return request . link ( m ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] if not ( identifier or [string] ) . strip ( ) : [EOL] return None [EOL] [EOL] col = request . get_collection ( self . resource_type ) [EOL] if not getattr ( col , [string] , None ) : [EOL] typeinfo = request . app . config . type_registry . get_typeinfo ( name = self . resource_type , request = request ) [EOL] col = typeinfo [ [string] ] ( request ) [EOL] else : [EOL] col = col . ui ( ) [EOL] models = col . search ( rulez . field [ self . value_field ] == identifier ) [EOL] if models : [EOL] return models [ [number] ] [EOL] return None [EOL] [EOL] def get_resource_term ( self , request , identifier ) : [EOL] m = self . get_resource ( request , identifier ) [EOL] if not m : [EOL] return None [EOL] return m . model [ self . term_field ] [EOL] [EOL] [EOL] class UserReferenceWidget ( ReferenceWidget ) : [EOL] def __init__ ( self , resource_type = [string] , term_field = [string] , value_field = [string] , ** kwargs ) : [EOL] super ( ) . __init__ ( resource_type , term_field , value_field , ** kwargs ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] if not identifier : [EOL] return None [EOL] users = get_user_collection ( request ) [EOL] user = users . get_by_uuid ( identifier ) [EOL] if user : [EOL] return UserModelUI ( request , user , get_user_collection_ui ( request ) ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from deform . widget import RichTextWidget as BaseRichTextWidget [EOL] [EOL] TOOLBAR1 = ( [string] ) [EOL] [EOL] TOOLBAR2 = [string] [EOL] [EOL] [EOL] class RichTextWidget ( BaseRichTextWidget ) : [EOL] [EOL] default_options = tuple ( list ( BaseRichTextWidget . default_options ) + [ ( [string] , TOOLBAR1 ) , ( [string] , TOOLBAR2 ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import EntityValidatorCollection , EntityValidatorModel [EOL] [EOL] [comment] [EOL] from . modelui import EntityValidatorCollectionUI , EntityValidatorModelUI [EOL] [EOL] [comment] [EOL] from . storage import EntityValidatorStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = EntityValidatorStorage ( request ) [EOL] return EntityValidatorCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = EntityValidatorCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = EntityValidatorModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = EntityValidatorCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = EntityValidatorModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . . app import App [EOL] from . model import EntityValidatorCollection , EntityValidatorModel [EOL] [EOL] [comment] [EOL] from . modelui import EntityValidatorCollectionUI , EntityValidatorModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import EntityValidatorSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = EntityValidatorSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : EntityValidatorSchema , [string] : EntityValidatorCollection , [string] : get_collection , [string] : EntityValidatorModel , [string] : get_model , [string] : EntityValidatorCollectionUI , [string] : EntityValidatorModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import EntityValidatorModel [EOL] [EOL] [EOL] class EntityValidator ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] name = sa . Column ( sa . String ( length = [number] ) , index = True ) [EOL] title = sa . Column ( sa . String ( length = [number] ) ) [EOL] description = sa . Column ( sa . Text ( ) ) [EOL] notes = sa . Column ( sa . Text ( ) ) [EOL] code = sa . Column ( sa . Text ( ) ) [EOL] error_message = sa . Column ( sa . String ( length = [number] ) ) [EOL] [EOL] [EOL] class EntityValidatorStorage ( morpfw . SQLStorage ) : [EOL] model = EntityValidatorModel [EOL] orm_model = EntityValidator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.model.EntityValidatorModel]$ 0 0 0 $typing.Type[morpcc.entityvalidator.storage.EntityValidator]$ 0 0 0
from typing import List , Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from RestrictedPython import compile_restricted [EOL] [EOL] import morpfw [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] from morpfw . crud . model import Collection , Model [EOL] [EOL] from . . entitycontent . model import EntityContentCollection , EntityContentModel [EOL] from . . entitycontent . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] from . . restrictedpython import get_restricted_function [EOL] from . modelui import EntityValidatorCollectionUI , EntityValidatorModelUI [EOL] from . schema import EntityValidatorSchema [EOL] [EOL] [EOL] class EntityValidatorWrapper ( object ) : [EOL] [EOL] __required_binds__ = [ [string] ] [EOL] [EOL] def __init__ ( self , validator , message ) : [EOL] self . validator = validator [EOL] self . message = message [EOL] [EOL] def __call__ ( self , request , schema , data , mode = None , context = None ) : [EOL] [comment] [EOL] if isinstance ( context , EntityContentModel ) : [EOL] obj = context . validation_dict ( ) [EOL] elif isinstance ( context , EntityContentModelUI ) : [EOL] obj = context . model . validation_dict ( ) [EOL] elif isinstance ( context , EntityContentCollection ) : [EOL] obj = context . validation_dict ( data ) [EOL] elif isinstance ( context , EntityContentCollectionUI ) : [EOL] obj = context . collection . validation_dict ( data ) [EOL] else : [EOL] raise AssertionError ( [string] % context ) [EOL] [EOL] if not self . validator ( obj ) : [EOL] return { [string] : self . message } [EOL] [EOL] [EOL] class EntityValidatorModel ( morpfw . Model ) : [EOL] schema = EntityValidatorSchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityValidatorModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . memoize ( ) def bytecode ( self ) : [EOL] bytecode = compile_restricted ( self [ [string] ] , filename = [string] . format ( self [ [string] ] ) , mode = [string] , ) [EOL] return bytecode [EOL] [EOL] @ morpfw . memoize ( ) def function ( self ) : [EOL] restricted = self . app . get_config ( [string] , True ) [EOL] if not restricted : [EOL] return self . unrestricted_function ( ) [EOL] function = get_restricted_function ( self . request . app , self . bytecode ( ) , [string] ) [EOL] return function [EOL] [EOL] def unrestricted_function ( self ) : [EOL] bytecode = compile ( self [ [string] ] , filename = [string] . format ( self [ [string] ] ) , mode = [string] , ) [EOL] name = [string] [EOL] local_vars = { } [EOL] exec ( bytecode , { } , local_vars ) [EOL] func = local_vars [ name ] [EOL] del local_vars [ name ] [EOL] func . __globals__ . update ( local_vars ) [EOL] return func [EOL] [EOL] def schema_validator ( self ) : [EOL] return EntityValidatorWrapper ( self . function ( ) , self [ [string] ] ) [EOL] [EOL] [EOL] class EntityValidatorCollection ( morpfw . Collection ) : [EOL] schema = EntityValidatorSchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityValidatorCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.schema.EntityValidatorSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.schema.EntityValidatorSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] [EOL] [comment] [EOL] from deform . widget import SelectWidget , TextAreaWidget [EOL] from morpfw . validator . field import valid_namespaced_identifier [EOL] [EOL] from . . attribute . schema import ACCEPTED_TYPES , valid_type [EOL] from . . deform . codewidget import CodeWidget [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . deform . richtextwidget import RichTextWidget [EOL] from . . deform . vocabularywidget import VocabularyWidget [EOL] from . . preparer . html import HTMLSanitizer [EOL] from . . validator . reference import ReferenceValidator [EOL] from . . validator . vocabulary import VocabularyValidator [EOL] [EOL] [EOL] @ dataclass class EntityValidatorSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False , [string] : True , [string] : [ valid_namespaced_identifier ] , } , ) [EOL] [EOL] title = field ( default = None , metadata = { [string] : True , [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] notes = field ( default = None , metadata = { [string] : [string] , [string] : [ HTMLSanitizer ( ) ] , [string] : RichTextWidget ( ) , } , ) [EOL] code = field ( default = [string] , metadata = { [string] : [string] , [string] : True , [string] : CodeWidget ( ) , } , ) [EOL] error_message = field ( default = None , metadata = { [string] : True } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class EntityValidatorModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class EntityValidatorCollectionUI ( CollectionUI ) : [EOL] modelui_class = EntityValidatorModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidator.modelui.EntityValidatorModelUI]$ 0 0 0
from . . app import App [EOL] from . model import ProcessCollection , ProcessModel [EOL] [EOL] [comment] [EOL] from . modelui import ProcessCollectionUI , ProcessModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ProcessSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ProcessSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ProcessSchema , [string] : ProcessCollection , [string] : get_collection , [string] : ProcessModel , [string] : get_model , [string] : ProcessCollectionUI , [string] : ProcessModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import ProcessModel , ProcessCollection [EOL] [comment] [EOL] from . modelui import ProcessModelUI , ProcessCollectionUI [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class ProcessModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ProcessCollectionUI ( CollectionUI ) : [EOL] modelui_class = ProcessModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.modelui.ProcessModelUI]$ 0 0 0
from typing import List , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] [EOL] [comment] [EOL] from . modelui import ProcessCollectionUI , ProcessModelUI [EOL] from . schema import ProcessSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ProcessModel ( morpfw . Model ) : [EOL] schema = ProcessSchema [EOL] [EOL] blob_fields = [ [string] ] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ProcessModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ProcessCollection ( morpfw . Collection ) : [EOL] schema = ProcessSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ProcessCollectionUI ( self . request , self ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.schema.ProcessSchema]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.schema.ProcessSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import ProcessCollection , ProcessModel [EOL] [EOL] [comment] [EOL] from . modelui import ProcessCollectionUI , ProcessModelUI [EOL] [EOL] [comment] [EOL] from . storage import ProcessStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] blobstorage = request . app . get_config_blobstorage ( request ) [EOL] storage = ProcessStorage ( request , blobstorage = blobstorage ) [EOL] return ProcessCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = ProcessCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = ProcessModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = ProcessCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = ProcessModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import datetime [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from datetime import datetime [EOL] [EOL] import morpfw [EOL] [EOL] from . . deform . codewidget import CodeWidget , JSONCodeWidget [EOL] [EOL] [EOL] @ dataclass class ProcessSchema ( morpfw . Schema ) : [EOL] [EOL] signal = field ( default = None , metadata = { [string] : True , [string] : False , [string] : True } ) [EOL] task_id = field ( default = None , metadata = { [string] : [string] , [string] : True , [string] : False } ) [EOL] start = field ( default = None , metadata = { [string] : False } ) [EOL] end = field ( default = None , metadata = { [string] : False } ) [EOL] params = field ( default_factory = dict , metadata = { [string] : False , [string] : JSONCodeWidget ( ) } , ) [EOL] traceback = field ( default = None , metadata = { [string] : [string] , [string] : False , [string] : False , [string] : CodeWidget ( syntax = [string] ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import ProcessModel [EOL] [EOL] [EOL] class Process ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] signal = sa . Column ( sa . String ( length = [number] ) , index = True ) [EOL] task_id = sa . Column ( morpfw . sql . GUID ( ) , index = True ) [EOL] start = sa . Column ( sa . DateTime ( timezone = True ) , index = True ) [EOL] end = sa . Column ( sa . DateTime ( timezone = True ) , index = True ) [EOL] params = sa . Column ( sajson . JSONField ( ) ) [EOL] traceback = sa . Column ( sa . Text ( ) ) [EOL] [EOL] [EOL] class ProcessStorage ( morpfw . SQLStorage ) : [EOL] model = ProcessModel [EOL] orm_model = Process [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.process.model.ProcessModel]$ 0 0 0 $typing.Type[morpcc.process.storage.Process]$ 0 0 0
import builtins [EOL] from typing import List , Union , Dict [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import pytz [EOL] [EOL] import morpfw [EOL] [EOL] from . . app import App [EOL] from . model import ProcessModel [EOL] [EOL] [EOL] class ProcessStateMachine ( morpfw . StateMachine ) : [EOL] [EOL] states = [ [string] , [string] , [string] , [string] , [string] ] [EOL] transitions = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [ [string] , [string] ] , [string] : [string] } , { [string] : [string] , [string] : [ [string] , [string] ] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] protected_transitions = [ [string] , [string] ] [EOL] [EOL] def on_enter_running ( self ) : [EOL] context = self . _context [EOL] context . update ( { [string] : datetime . now ( tz = pytz . UTC ) } , deserialize = False ) [EOL] [EOL] def on_exit_running ( self ) : [EOL] context = self . _context [EOL] context . update ( { [string] : datetime . now ( tz = pytz . UTC ) } , deserialize = False ) [EOL] [EOL] def on_enter_cancelled ( self ) : [EOL] context = self . _context [EOL] request = self . _request [EOL] request . app . celery . control . revoke ( context [ [string] ] , terminate = True ) [EOL] [EOL] [EOL] @ App . statemachine ( model = ProcessModel ) def get_statemachine ( context ) : [EOL] return ProcessStateMachine ( context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import html [EOL] [EOL] import morpfw [EOL] [EOL] [EOL] class ModelUI ( object ) : [EOL] [EOL] view_include_fields = [ ] [EOL] view_exclude_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] edit_include_fields = [ ] [EOL] edit_exclude_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] default_view = [string] [EOL] [EOL] @ property def identifier ( self ) : [EOL] return self . model . identifier [EOL] [EOL] @ property def uuid ( self ) : [EOL] return self . model . uuid [EOL] [EOL] @ property def schema ( self ) : [EOL] return self . model . schema [EOL] [EOL] def __init__ ( self , request , model , collection_ui ) : [EOL] self . request = request [EOL] self . model = model [EOL] self . collection_ui = collection_ui [EOL] [EOL] def transitions ( self ) : [EOL] sm = self . model . statemachine ( ) [EOL] if sm : [EOL] return list ( [ i for i in sm . _machine . get_triggers ( sm . state ) if not i . startswith ( [string] ) ] ) [EOL] return [ ] [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . model [ key ] [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] self . model [ key ] = value [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] del self . model [ key ] [EOL] [EOL] [EOL] class CollectionUI ( object ) : [EOL] [EOL] modelui_class = ModelUI [EOL] [EOL] create_include_fields = [ ] [EOL] create_exclude_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] default_view = [string] [EOL] [EOL] @ property def page_title ( self ) : [EOL] return str ( self . collection . __class__ . __name__ ) [EOL] [EOL] @ property def listing_title ( self ) : [EOL] return [string] [EOL] [EOL] @ property def columns ( self ) : [EOL] columns = [ ] [EOL] if [string] in self . collection . schema . __dataclass_fields__ . keys ( ) : [EOL] n = [string] [EOL] field = morpfw . Schema . __dataclass_fields__ [ [string] ] [EOL] title = field . metadata . get ( [string] , n ) [EOL] columns . append ( { [string] : title , [string] : n } ) [EOL] [EOL] for n , field in self . collection . schema . __dataclass_fields__ . items ( ) : [EOL] if n in morpfw . Schema . __dataclass_fields__ . keys ( ) : [EOL] continue [EOL] title = field . metadata . get ( [string] , n ) [EOL] columns . append ( { [string] : title , [string] : n } ) [EOL] [EOL] columns . append ( { [string] : [string] , [string] : [string] } ) [EOL] return columns [EOL] [EOL] @ property def columns_order ( self ) : [EOL] return [ [ [number] , [string] ] ] [EOL] [EOL] def __init__ ( self , request , collection ) : [EOL] self . request = request [EOL] self . collection = collection [EOL] [EOL] def get_structure_column ( self , obj , request , column_type ) : [EOL] column_type = column_type . replace ( [string] , [string] ) [EOL] coldata = request . app . get_structure_column ( model = obj , request = request , name = column_type ) [EOL] return coldata [EOL] [EOL] def search ( self , query = None , offset = [number] , limit = None , order_by = None , secure = False ) : [EOL] objs = self . collection . search ( query , offset , limit , order_by , secure ) [EOL] return list ( [ self . modelui_class ( self . request , o , self ) for o in objs ] ) [EOL] [EOL] def get ( self , identifier ) : [EOL] obj = self . collection . get ( identifier ) [EOL] if obj : [EOL] return self . modelui_class ( self . request , obj , self ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.crud.model.ModelUI]$ 0 0 0 0 $builtins.list$ 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from morpfw . crud . blobstorage . fsblobstorage import FSBlobStorage , FSBlob , WRITE_BUFF_SIZE [EOL] from deform . interfaces import FileUploadTempStore [EOL] import typing [EOL] from uuid import uuid4 [EOL] import os [EOL] from pathlib import Path [EOL] import json [EOL] import morepath [EOL] [EOL] [EOL] class UIDFSBlobStorage ( FSBlobStorage ) : [EOL] [EOL] def _uuid_path ( self , uuid ) : [EOL] return os . path . join ( self . path , uuid ) [EOL] [EOL] [EOL] class FSBlobFileUploadTempStore ( FileUploadTempStore ) : [EOL] [EOL] def __init__ ( self , field , context , request , path ) : [EOL] self . field = field [EOL] self . blobstorage = UIDFSBlobStorage ( request , path ) [EOL] self . request = request [EOL] self . context = context [EOL] self . _memstore = { } [EOL] [EOL] def __setitem__ ( self , name , value ) : [EOL] if value [ [string] ] is None : [EOL] self . _memstore [ name ] = value [EOL] return [EOL] blob = self . blobstorage . put ( value [ [string] ] , filename = value [ [string] ] , mimetype = value [ [string] ] , uuid = name ) [EOL] [EOL] def __getitem__ ( self , name ) : [EOL] if name in self . _memstore : [EOL] self . _memstore [ name ] [ [string] ] = [string] [EOL] return self . _memstore [ name ] [EOL] [EOL] uuid = name [EOL] blob = self . blobstorage . get ( uuid ) [EOL] if blob is None : [EOL] raise KeyError ( name ) [EOL] return { [string] : blob . open ( ) , [string] : blob . filename , [string] : blob . mimetype , [string] : blob . get_size ( ) , [string] : name } [EOL] [EOL] def get ( self , name , default = None ) : [EOL] try : [EOL] return self [ name ] [EOL] except KeyError : [EOL] return None [EOL] [EOL] def __contains__ ( self , name ) : [EOL] uuid = name [EOL] blob = self . blobstorage . get ( uuid ) [EOL] if blob is None : [EOL] return False [EOL] return True [EOL] [EOL] def preview_url ( self , name ) : [EOL] return [string] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $morpcc.crud.tempstore.UIDFSBlobStorage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import html [EOL] [EOL] from morpcc . util import permits [EOL] from morpfw . crud import permission as crudperm [EOL] from morpfw . crud . model import Model [EOL] [EOL] from . . app import App [EOL] [EOL] [EOL] @ App . structure_column ( model = Model , name = [string] ) def get_type_column ( model , request , name ) : [EOL] return str ( model . __class__ . __name__ ) [EOL] [EOL] [EOL] @ App . structure_column ( model = Model , name = [string] ) def get_objectstring_column ( model , request , name ) : [EOL] return html . escape ( str ( model ) ) [EOL] [EOL] [EOL] @ App . structure_column ( model = Model , name = [string] ) def get_buttons_column ( model , request , name ) : [EOL] typeinfos = request . app . config . type_registry . get_typeinfos ( request ) [EOL] uiobj = None [EOL] [comment] [EOL] if getattr ( model , [string] , None ) : [EOL] uiobj = model . ui ( ) [EOL] else : [EOL] for n , ti in typeinfos . items ( ) : [EOL] path_model = getattr ( model , [string] , None ) [EOL] if model . __class__ == ti [ [string] ] or path_model == ti [ [string] ] : [EOL] uiobj = ti [ [string] ] ( request , model , ti [ [string] ] ( request ) ) [EOL] break [EOL] [EOL] if uiobj is None : [EOL] raise ValueError ( [string] % model ) [EOL] [EOL] buttons = [ ] [EOL] [EOL] if permits ( request , uiobj , crudperm . View ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] % uiobj . default_view ) , [string] : [string] , } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Edit ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Delete ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } ) [EOL] render = request . app . get_template ( [string] ) [EOL] return render ( { [string] : buttons } , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import html [EOL] [EOL] import deform [EOL] import morepath [EOL] import morpfw [EOL] from inverter import dc2colander [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . . app import App [EOL] from . . . deform . referencewidget import ReferenceWidget [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . view ( model = CollectionUI ) def collection_index ( context , request ) : [EOL] return morepath . redirect ( request . link ( context , [string] % context . default_view ) ) [EOL] [EOL] [EOL] @ App . view ( model = ModelUI ) def model_index ( context , request ) : [EOL] return morepath . redirect ( request . link ( context , [string] % context . default_view ) ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . View , ) def view ( context , request ) : [EOL] formschema = dc2colander . convert ( context . model . schema , request = request , include_fields = context . view_include_fields , exclude_fields = context . view_exclude_fields , default_tzinfo = request . timezone ( ) , ) [EOL] [EOL] xattrprovider = context . model . xattrprovider ( ) [EOL] if xattrprovider : [EOL] xattrformschema = dc2colander . convert ( xattrprovider . schema , request = request , default_tzinfo = request . timezone ( ) , exclude_fields = [ [string] , [string] ] , ) [EOL] else : [EOL] xattrformschema = None [EOL] data = context . model . data . as_dict ( ) [EOL] sm = context . model . statemachine ( ) [EOL] [EOL] metadataschema = dc2colander . convert ( morpfw . Schema , request = request , exclude_fields = [ [string] , [string] ] , default_tzinfo = request . timezone ( ) , ) [EOL] [comment] [EOL] for f in metadataschema . __all_schema_nodes__ : [EOL] if f . name == [string] : [EOL] f . widget = ReferenceWidget ( [string] , term_field = [string] , value_field = [string] ) [EOL] if sm : [EOL] triggers = [ i for i in sm . _machine . get_triggers ( sm . state ) if not i . startswith ( [string] ) ] [EOL] else : [EOL] triggers = None [EOL] [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] [EOL] mfs = metadataschema ( ) [EOL] mfs = mfs . bind ( context = context , request = request ) [EOL] [EOL] xfs = None [EOL] if xattrprovider : [EOL] xfs = xattrformschema ( ) [EOL] xfs = xfs . bind ( context = context , request = request ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : deform . Form ( mfs ) , [string] : deform . Form ( fs ) , [string] : data , [string] : deform . Form ( xfs ) if xattrprovider else None , [string] : xattrprovider . as_dict ( ) if xattrprovider else None , [string] : True , [string] : triggers , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , permission = crudperms . View , ) def preview ( context , request ) : [EOL] formschema = dc2colander . convert ( context . model . schema , request = request , include_fields = context . view_include_fields , exclude_fields = context . view_exclude_fields , default_tzinfo = request . timezone ( ) , ) [EOL] [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] form = deform . Form ( fs ) [EOL] form_data = context . model . data . as_dict ( ) [EOL] return form . render ( appstruct = form_data , readonly = True , request = request , context = context ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . View , ) def modal_view ( context , request ) : [EOL] return view ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . View , ) def modal_close ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . View , ) def collection_modal_close ( context , request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . view ( model = ModelUI , name = [string] , permission = crudperms . Edit , request_method = [string] ) def statemachine ( context , request ) : [EOL] transition = request . POST . get ( [string] , None ) [EOL] sm = context . model . statemachine ( ) [EOL] if transition : [EOL] attr = getattr ( sm , transition , None ) [EOL] if attr : [EOL] attr ( ) [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morepath . redirect ( request . link ( context ) ) [EOL] request . notify ( [string] , [string] , [string] % transition ) [EOL] return morepath . redirect ( request . link ( context ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type , Dict [EOL] import typing [EOL] import deform [EOL] import model [EOL] import morepath [EOL] import colander [EOL] import deform [EOL] import deform . widget [EOL] import morepath [EOL] import morpfw . authn . pas . exc [EOL] from morpfw . authn . pas . user . path import get_user_collection [EOL] from morpfw . crud import permission as crudperm [EOL] from morpfw . crud . model import Model [EOL] from morpfw . crud . view import get_blob [EOL] [EOL] from . . . import permission [EOL] from . . . app import App [EOL] from . . model import ModelUI [EOL] from . . tempstore import FSBlobFileUploadTempStore [EOL] [EOL] [EOL] def upload_form ( context , request ) : [EOL] fields = { } [EOL] model = context . model [EOL] for f in model . blob_fields : [EOL] fields [ f ] = colander . SchemaNode ( deform . FileData ( ) , missing = colander . drop , widget = deform . widget . FileUploadWidget ( FSBlobFileUploadTempStore ( f , context , request , [string] ) ) , oid = [string] % f , ) [EOL] [EOL] FileUpload = type ( [string] , ( colander . Schema , ) , fields ) [EOL] fs = FileUpload ( ) [EOL] return deform . Form ( fs , buttons = ( [string] , ) , formid = [string] ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , permission = crudperm . Edit , template = [string] , ) def upload ( context , request ) : [EOL] data = { } [EOL] for f in context . model . blob_fields : [EOL] blob = context . model . get_blob ( f ) [EOL] if blob is None : [EOL] continue [EOL] data [ f ] = { [string] : blob . uuid , [string] : blob . filename , [string] : blob . size , [string] : blob . mimetype , [string] : request . link ( context , [string] % f ) , [string] : request . link ( context , [string] % f ) , } [EOL] [EOL] return { [string] : [string] , [string] : [string] , [string] : upload_form ( context , request ) , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , permission = crudperm . Edit , template = [string] , request_method = [string] , ) def process_upload ( context , request ) : [EOL] form = upload_form ( context , request ) [EOL] controls = list ( request . POST . items ( ) ) [EOL] [EOL] failed = False [EOL] data = { } [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] failed = True [EOL] form = e [EOL] if not failed : [EOL] for f in context . model . blob_fields : [EOL] if f not in data : [EOL] continue [EOL] filedata = data [ f ] [EOL] context . model . put_blob ( f , filedata [ [string] ] , filename = filedata [ [string] ] , mimetype = filedata [ [string] ] , ) [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morepath . redirect ( request . link ( context ) ) [EOL] [EOL] return { [string] : [string] , [string] : [string] , [string] : form , [string] : data if not failed else None , } [EOL] [EOL] [EOL] @ App . view ( model = ModelUI , name = [string] , permission = crudperm . View ) def download ( context , request ) : [EOL] return get_blob ( context . model , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deform.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import html [EOL] [EOL] import colander [EOL] import deform [EOL] import morepath [EOL] from inverter import dc2colander [EOL] from morpfw . crud import permission as crudperms [EOL] from morpfw . crud . errors import AlreadyExistsError , ValidationError [EOL] from webob . exc import HTTPFound , HTTPNotFound [EOL] [EOL] from . . . app import App [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , ) def edit ( context , request ) : [EOL] formschema = dc2colander . convert ( context . model . schema , request = request , mode = [string] , include_fields = context . edit_include_fields , exclude_fields = context . edit_exclude_fields , default_tzinfo = request . timezone ( ) , ) [EOL] data = context . model . data . as_dict ( ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : deform . Form ( fs , buttons = ( [string] , ) ) , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , ) def modal_edit ( context , request ) : [EOL] return edit ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , request_method = [string] , ) def process_edit ( context , request ) : [EOL] formschema = dc2colander . convert ( context . model . schema , request = request , mode = [string] , include_fields = context . edit_include_fields , exclude_fields = context . edit_exclude_fields , include_schema_validators = False , default_tzinfo = request . timezone ( ) , ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] data = context . model . data . as_dict ( ) [EOL] controls = list ( request . POST . items ( ) ) [EOL] form = deform . Form ( fs , buttons = ( [string] , ) ) [EOL] [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] if not failed : [EOL] try : [EOL] context . model . update ( data , deserialize = False ) [EOL] except ValidationError as e : [EOL] failed = True [EOL] for fe in e . field_errors : [EOL] node = form [EOL] if fe . path in form : [EOL] node = form [ fe . path ] [EOL] node_error = colander . Invalid ( node . widget , fe . message ) [EOL] node . widget . handle_error ( node , node_error ) [EOL] if not failed : [EOL] return morepath . redirect ( request . link ( context ) ) [EOL] [EOL] @ request . after def set_header ( response ) : [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : form , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , request_method = [string] , ) def modal_process_edit ( context , request ) : [EOL] result = process_edit ( context , request ) [EOL] if isinstance ( result , HTTPFound ) : [EOL] return morepath . redirect ( request . link ( context , [string] ) ) [EOL] return result [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , ) def xattredit ( context , request ) : [EOL] [EOL] xattrprovider = context . model . xattrprovider ( ) [EOL] if xattrprovider : [EOL] xattrformschema = dc2colander . convert ( xattrprovider . schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] else : [EOL] raise HTTPNotFound ( ) [EOL] [EOL] data = xattrprovider . as_dict ( ) [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : deform . Form ( xattrformschema ( ) , buttons = ( [string] , ) ) , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , ) def modal_xattredit ( context , request ) : [EOL] return xattredit ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , request_method = [string] , ) def process_xattredit ( context , request ) : [EOL] [EOL] xattrprovider = context . model . xattrprovider ( ) [EOL] if xattrprovider : [EOL] xattrformschema = dc2colander . convert ( xattrprovider . schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] else : [EOL] raise HTTPNotFound ( ) [EOL] [EOL] fs = xattrformschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] data = xattrprovider . as_dict ( ) [EOL] controls = list ( request . POST . items ( ) ) [EOL] form = deform . Form ( fs , buttons = ( [string] , ) ) [EOL] [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] if not failed : [EOL] [comment] [EOL] xattrprovider . update ( data ) [EOL] return morepath . redirect ( request . link ( context ) ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : form , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Edit , request_method = [string] , ) def modal_process_xattredit ( context , request ) : [EOL] result = process_xattredit ( context , request ) [EOL] if isinstance ( result , HTTPFound ) : [EOL] return morepath . redirect ( request . link ( context , [string] ) ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Type , Literal , Any , Tuple , Pattern , Dict [EOL] import typing_extensions [EOL] import typing [EOL] import html [EOL] import json [EOL] import re [EOL] import typing [EOL] from dataclasses import field , make_dataclass [EOL] [EOL] import colander [EOL] import deform [EOL] import morepath [EOL] import rulez [EOL] from boolean . boolean import ParseError [EOL] from inverter import dc2colander [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . . app import App [EOL] from . . . permission import ViewHome [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . Search , ) def listing ( context , request ) : [EOL] column_options = [ ] [EOL] columns = [ ] [EOL] order = context . columns_order [EOL] [EOL] for c in context . columns : [EOL] columns . append ( c [ [string] ] ) [EOL] sortable = True [EOL] if c [ [string] ] . startswith ( [string] ) : [EOL] sortable = False [EOL] column_options . append ( { [string] : c [ [string] ] , [string] : sortable } ) [EOL] [EOL] search_attrs = [ ] [EOL] for attrname , attr in context . collection . schema . __dataclass_fields__ . items ( ) : [EOL] searchable = attr . metadata . get ( [string] , None ) [EOL] if searchable : [EOL] metadata = { [string] : False } [EOL] for mf in [ [string] , [string] , [string] , [string] , ] : [EOL] mvalue = attr . metadata . get ( mf , None ) [EOL] if mvalue : [EOL] metadata [ mf ] = mvalue [EOL] search_attrs . append ( ( attrname , attr . type , field ( default = None , metadata = metadata ) ) ) [EOL] [EOL] if search_attrs : [EOL] dc = make_dataclass ( [string] , search_attrs ) [EOL] formschema = dc2colander . convert ( dc , request = request , default_tzinfo = request . timezone ( ) ) [EOL] search_form = deform . Form ( formschema ( ) , buttons = ( [string] , ) ) [EOL] else : [EOL] search_form = None [EOL] [EOL] data = _parse_dtdata ( list ( request . GET . items ( ) ) ) [EOL] search_data = data [ [string] ] [EOL] [EOL] return { [string] : context . page_title , [string] : context . listing_title , [string] : search_form , [string] : search_data , [string] : columns , [string] : json . dumps ( column_options ) , [string] : json . dumps ( order ) , } [EOL] [EOL] [EOL] column_pattern = re . compile ( [string] ) [EOL] search_column_pattern = re . compile ( [string] ) [EOL] search_pattern = re . compile ( [string] ) [EOL] mfw_search_pattern = re . compile ( [string] ) [EOL] order_pattern = re . compile ( [string] ) [EOL] [EOL] [EOL] def _parse_dtdata ( data ) : [EOL] result = { } [EOL] [EOL] result [ [string] ] = [ ] [EOL] result [ [string] ] = { } [EOL] result [ [string] ] = { } [EOL] result [ [string] ] = None [EOL] result [ [string] ] = [number] [EOL] result [ [string] ] = [number] [EOL] result [ [string] ] = None [EOL] result [ [string] ] = { } [EOL] [EOL] columns = [ ( k , v ) for k , v in data if k . startswith ( [string] ) ] [EOL] orders = [ ( k , v ) for k , v in data if k . startswith ( [string] ) ] [EOL] mfilter = [ ( k , v ) for k , v in data if k == [string] ] [EOL] mfilter = mfilter [ [number] ] [ [number] ] if mfilter else None [EOL] [EOL] column_data = { } [EOL] for k , v in columns : [EOL] m1 = column_pattern . match ( k ) [EOL] m2 = search_column_pattern . match ( k ) [EOL] if m1 : [EOL] i , o = m1 . groups ( ) [EOL] column_data . setdefault ( int ( i ) , { } ) [EOL] column_data [ int ( i ) ] [ o ] = v [EOL] elif m2 : [EOL] i , o , s = m2 . groups ( ) [EOL] column_data . setdefault ( int ( i ) , { } ) [EOL] column_data [ int ( i ) ] . setdefault ( o , { } ) [EOL] column_data [ int ( i ) ] [ o ] [ s ] = v [EOL] [EOL] result [ [string] ] = [ ] [EOL] for k in sorted ( column_data . keys ( ) ) : [EOL] result [ [string] ] . append ( column_data [ k ] ) [EOL] [EOL] order_data = { } [EOL] for k , v in orders : [EOL] i , o = order_pattern . match ( k ) . groups ( ) [EOL] order_data . setdefault ( int ( i ) , { } ) [EOL] if o == [string] : [EOL] order_data [ int ( i ) ] [ o ] = int ( v ) [EOL] else : [EOL] order_data [ int ( i ) ] [ o ] = v [EOL] [EOL] result [ [string] ] = [ ] [EOL] for k in sorted ( order_data . keys ( ) ) : [EOL] result [ [string] ] . append ( order_data [ k ] ) [EOL] [EOL] in_sequence = False [EOL] current_mfw_search = None [EOL] for k , v in data : [EOL] if in_sequence : [EOL] i = mfw_search_pattern . match ( k ) . groups ( ) [ [number] ] [EOL] if i == [string] : [EOL] in_sequence = False [EOL] current_mfw_search = None [EOL] continue [EOL] result [ [string] ] [ current_mfw_search ] . append ( v ) [EOL] continue [EOL] [EOL] if k == [string] : [EOL] result [ [string] ] = int ( v ) [EOL] elif k == [string] : [EOL] result [ [string] ] = v [EOL] elif k == [string] : [EOL] result [ [string] ] = int ( v ) [EOL] elif k == [string] : [EOL] result [ [string] ] = int ( v ) [EOL] elif k . startswith ( [string] ) : [EOL] i = search_pattern . match ( k ) . groups ( ) [ [number] ] [EOL] result [ [string] ] . setdefault ( i , { } ) [EOL] result [ [string] ] [ i ] = v [EOL] elif k . startswith ( [string] ) : [EOL] i = mfw_search_pattern . match ( k ) . groups ( ) [ [number] ] [EOL] if i == [string] : [EOL] current_mfw_search , typ = v . split ( [string] ) [EOL] in_sequence = True [EOL] result [ [string] ] . setdefault ( current_mfw_search , [ ] ) [EOL] continue [EOL] result [ [string] ] [ i ] = v [EOL] [EOL] if mfilter : [EOL] result [ [string] ] = rulez . parse_dsl ( mfilter ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def _dt_result_render ( context , request , columns , objs ) : [EOL] rows = [ ] [EOL] collection = context . collection [EOL] for o in objs : [EOL] row = [ ] [EOL] formschema = dc2colander . convert ( collection . schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = o , request = request ) [EOL] form = deform . Form ( fs ) [EOL] for c in columns : [EOL] if c [ [string] ] . startswith ( [string] ) : [EOL] row . append ( context . get_structure_column ( o , request , c [ [string] ] ) ) [EOL] else : [EOL] field = form [ c [ [string] ] ] [EOL] value = o . data [ c [ [string] ] ] [EOL] if value is None : [EOL] value = colander . null [EOL] row . append ( field . render ( value , readonly = True , request = request , context = o ) ) [EOL] rows . append ( row ) [EOL] return rows [EOL] [EOL] [EOL] def datatable_search ( context , request , additional_filters = None , renderer = _dt_result_render ) : [EOL] collection = context . collection [EOL] data = list ( request . GET . items ( ) ) [EOL] data = _parse_dtdata ( data ) [EOL] search = [ ] [EOL] if data [ [string] ] and data [ [string] ] [ [string] ] : [EOL] for fn , field in context . collection . schema . __dataclass_fields__ . items ( ) : [EOL] if field . metadata . get ( [string] , None ) == [string] : [EOL] continue [EOL] if field . type == str : [EOL] search . append ( { [string] : fn , [string] : [string] , [string] : data [ [string] ] [ [string] ] } ) [EOL] elif field . type . __origin__ == typing . Union : [EOL] if str in field . type . __args__ : [EOL] search . append ( { [string] : fn , [string] : [string] , [string] : data [ [string] ] [ [string] ] } ) [EOL] [EOL] if data [ [string] ] : [EOL] mfw_search = [ ] [EOL] for sfn , value in data [ [string] ] . items ( ) : [EOL] value = ( value or [string] ) . strip ( ) [EOL] if not value : [EOL] continue [EOL] [EOL] if sfn not in context . collection . schema . __dataclass_fields__ : [EOL] continue [EOL] [EOL] field = context . collection . schema . __dataclass_fields__ [ sfn ] [EOL] if field . metadata . get ( [string] , None ) == [string] : [EOL] mfw_search . append ( { [string] : sfn , [string] : [string] , [string] : value } ) [EOL] elif field . type == str : [EOL] mfw_search . append ( { [string] : sfn , [string] : [string] , [string] : value } ) [EOL] elif field . type == bool : [EOL] val = True if value . lower ( ) == [string] else False [EOL] mfw_search . append ( { [string] : sfn , [string] : [string] , [string] : val } ) [EOL] elif field . type . __origin__ == typing . Union : [EOL] if str in field . type . __args__ : [EOL] mfw_search . append ( { [string] : sfn , [string] : [string] , [string] : value } ) [EOL] elif bool in field . type . __args__ : [EOL] val = True if value . lower ( ) == [string] else False [EOL] mfw_search . append ( { [string] : sfn , [string] : [string] , [string] : val } ) [EOL] search . append ( rulez . and_ ( * mfw_search ) ) [EOL] if search : [EOL] search = rulez . or_ ( * search ) [EOL] else : [EOL] search = None [EOL] if data [ [string] ] : [EOL] if search : [EOL] search = rulez . and_ ( data [ [string] ] , search ) [EOL] else : [EOL] search = data [ [string] ] [EOL] [EOL] if additional_filters : [EOL] if search : [EOL] search = rulez . and_ ( additional_filters , search ) [EOL] else : [EOL] search = additional_filters [EOL] [EOL] order_by = None [EOL] if data [ [string] ] : [EOL] colidx = data [ [string] ] [ [number] ] [ [string] ] [EOL] order_col = data [ [string] ] [ colidx ] [ [string] ] [EOL] if order_col . startswith ( [string] ) : [EOL] order_by = None [EOL] else : [EOL] order_by = ( order_col , data [ [string] ] [ [number] ] [ [string] ] ) [EOL] try : [EOL] objs = collection . search ( query = search , limit = data [ [string] ] , offset = data [ [string] ] , order_by = order_by , ) [EOL] except NotImplementedError : [EOL] objs = collection . search ( limit = data [ [string] ] , offset = data [ [string] ] , order_by = order_by ) [EOL] total = collection . aggregate ( query = data [ [string] ] , group = { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] try : [EOL] total_filtered = collection . aggregate ( query = search , group = { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] except NotImplementedError : [EOL] total_filtered = total [EOL] [EOL] rows = renderer ( context , request , data [ [string] ] , objs ) [EOL] return { [string] : data [ [string] ] , [string] : total [ [number] ] [ [string] ] , [string] : total_filtered [ [number] ] [ [string] ] , [string] : rows , } [EOL] [EOL] [EOL] @ App . json ( model = CollectionUI , name = [string] , permission = crudperms . Search ) def datatable ( context , request ) : [EOL] return datatable_search ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str
from typing import Any [EOL] import typing [EOL] import html [EOL] [EOL] import deform [EOL] import morepath [EOL] from inverter import dc2colander [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . . app import App [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Delete , ) def delete ( context , request ) : [EOL] [EOL] formschema = dc2colander . convert ( context . model . schema , request = request , include_fields = context . view_include_fields , exclude_fields = context . view_exclude_fields , default_tzinfo = request . timezone ( ) , ) [EOL] data = context . model . data . as_dict ( ) [EOL] return { [string] : [string] , [string] : [string] , [string] : deform . Form ( formschema ( ) ) , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Delete , ) def modal_delete ( context , request ) : [EOL] return delete ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Delete , request_method = [string] , ) def process_delete ( context , request ) : [EOL] context . model . delete ( ) [EOL] return morepath . redirect ( request . link ( context . collection_ui ) ) [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = crudperms . Delete , request_method = [string] , ) def modal_process_delete ( context , request ) : [EOL] context . model . delete ( ) [EOL] return morepath . redirect ( request . link ( context . collection_ui , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import html [EOL] [EOL] import colander [EOL] import deform [EOL] import morepath [EOL] from deform . widget import HiddenWidget [EOL] from inverter import dc2colander [EOL] from morpfw . crud import permission as crudperms [EOL] from morpfw . crud . errors import AlreadyExistsError , ValidationError [EOL] from webob . exc import HTTPFound [EOL] [EOL] from . . . app import App [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . Create , ) def create ( context , request ) : [EOL] default_value_fields = list ( request . GET . keys ( ) ) [EOL] formschema = dc2colander . convert ( context . collection . schema , request = request , include_fields = context . create_include_fields , exclude_fields = context . create_exclude_fields , hidden_fields = default_value_fields , default_tzinfo = request . timezone ( ) , ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] [EOL] form_data = { } [EOL] for f in default_value_fields : [EOL] form_data [ f ] = request . GET . get ( f ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . collection . __class__ . __name__ . replace ( [string] , [string] ) ) ) , [string] : [string] , [string] : deform . Form ( fs , buttons = ( [string] , ) ) , [string] : form_data , } [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . Create , ) def modal_create ( context , request ) : [EOL] return create ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . Create , request_method = [string] , ) def process_create ( context , request ) : [EOL] default_value_fields = list ( request . GET . keys ( ) ) [EOL] formschema = dc2colander . convert ( context . collection . schema , request = request , include_fields = context . create_include_fields , exclude_fields = context . create_exclude_fields , hidden_fields = default_value_fields , default_tzinfo = request . timezone ( ) , ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] [EOL] controls = list ( request . POST . items ( ) ) [EOL] form = deform . Form ( fs , buttons = ( [string] , ) ) [EOL] [EOL] failed = False [EOL] data = { } [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] if not failed : [EOL] try : [EOL] obj = context . collection . create ( data , deserialize = False ) [EOL] except AlreadyExistsError as e : [EOL] failed = True [EOL] form_error = colander . Invalid ( form . widget , [string] . format ( e . message ) ) [EOL] form . widget . handle_error ( form , form_error ) [EOL] [EOL] if not failed : [EOL] return morepath . redirect ( request . link ( context . modelui_class ( request , obj , context ) ) ) [EOL] [EOL] @ request . after def set_header ( response ) : [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . collection . __class__ . __name__ . replace ( [string] , [string] ) ) ) , [string] : [string] , [string] : form , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = CollectionUI , name = [string] , template = [string] , permission = crudperms . Create , request_method = [string] , ) def modal_process_create ( context , request ) : [EOL] result = process_create ( context , request ) [EOL] [EOL] if isinstance ( result , HTTPFound ) : [EOL] return morepath . redirect ( request . link ( context , [string] ) ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import html [EOL] [EOL] import deform [EOL] import morepath [EOL] import rulez [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . . app import App [EOL] from . . . root import Root [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] def vocabulary_search ( context , request ) : [EOL] vocab_id = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not vocab_id : [EOL] return { } [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] [EOL] vocab = request . app . get_vocabulary ( request = request , name = vocab_id ) [EOL] [EOL] result = { [string] : [ ] } [EOL] for v in vocab : [EOL] if term : [EOL] if not term . lower ( ) in v [ [string] ] . lower ( ) : [EOL] continue [EOL] r = { [string] : v [ [string] ] , [string] : v [ [string] ] } [EOL] if v . get ( [string] , None ) : [EOL] r [ [string] ] = v [ [string] ] [EOL] result [ [string] ] . append ( r ) [EOL] [EOL] return result [EOL] [EOL] [EOL] @ App . json ( model = Root , name = [string] , permission = crudperms . View ) def root_vocabulary_search ( context , request ) : [EOL] return vocabulary_search ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import html [EOL] [EOL] import deform [EOL] import morepath [EOL] import rulez [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . . app import App [EOL] from . . . root import Root [EOL] from . . . util import permits [EOL] from . . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] def _term_search ( context , request ) : [EOL] [comment] [EOL] resource_type = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not resource_type : [EOL] return { } [EOL] value_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not value_field : [EOL] return { } [EOL] term_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term_field : [EOL] return { } [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term : [EOL] return { } [EOL] [EOL] typeinfo = request . app . config . type_registry . get_typeinfo ( name = resource_type , request = request ) [EOL] col = typeinfo [ [string] ] ( request ) [EOL] objs = col . search ( query = { [string] : term_field , [string] : [string] , [string] : term } ) [EOL] result = { [string] : [ ] } [EOL] for obj in objs : [EOL] if permits ( request , obj , crudperms . View ) : [EOL] result [ [string] ] . append ( { [string] : obj [ value_field ] , [string] : obj [ term_field ] } ) [EOL] return result [EOL] [EOL] [EOL] @ App . json ( model = Root , name = [string] , permission = crudperms . View ) def root_term_search ( context , request ) : [EOL] return _term_search ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from . . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class APIKeyModelUI ( ModelUI ) : [EOL] [EOL] edit_include_fields = [ [string] ] [EOL] [EOL] [EOL] class APIKeyCollectionUI ( CollectionUI ) : [EOL] [EOL] modelui_class = APIKeyModelUI [EOL] [EOL] create_include_fields = [ [string] ] [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.apikey.model.APIKeyModelUI]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . model import APIKeyModelUI , APIKeyCollectionUI [EOL] from . . app import App [EOL] from morpfw . authn . pas . apikey . path import get_apikey , get_apikey_collection [EOL] [EOL] [EOL] @ App . path ( model = APIKeyCollectionUI , path = [string] ) def get_apikey_collection_ui ( request ) : [EOL] col = get_apikey_collection ( request ) [EOL] return APIKeyCollectionUI ( request , col ) [EOL] [EOL] [EOL] @ App . path ( model = APIKeyModelUI , path = [string] , variables = lambda obj : { [string] : obj . model . data [ [string] ] } ) def get_apikey_model_ui ( request , identifier ) : [EOL] apikey = get_apikey ( request , identifier ) [EOL] col = get_apikey_collection ( request ) [EOL] return APIKeyModelUI ( request , apikey , APIKeyCollectionUI ( request , col ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import os [EOL] [EOL] from morpfw . authn . pas . user . model import UserModel [EOL] from morpfw . crud . blobstorage . fsblobstorage import FSBlobStorage [EOL] [EOL] from . . app import App [EOL] from . . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] @ App . blobstorage ( model = UserModel ) def get_user_blobstorage ( model , request ) : [EOL] return request . app . get_config_blobstorage ( request ) [EOL] [EOL] [EOL] class UserModelUI ( ModelUI ) : [EOL] [EOL] view_exclude_fields = ModelUI . view_exclude_fields + [ [string] , [string] ] [EOL] edit_include_fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class UserCollectionUI ( CollectionUI ) : [EOL] [EOL] modelui_class = UserModelUI [EOL] [EOL] page_title = [string] [EOL] listing_title = [string] [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL] [EOL] [EOL] class CurrentUserModelUI ( UserModelUI ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.users.model.UserModelUI]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . . app import App [EOL] from . model import CurrentUserModelUI [EOL] [EOL] [EOL] @ App . breadcrumb ( model = CurrentUserModelUI ) def get_profile_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] model_crumb = { [string] : [string] , [string] : request . link ( model ) , [string] : False , } [EOL] crumbs = [ model_crumb ] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] model_crumb [ [string] ] = True [EOL] return crumbs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from morpfw . authn . pas . user . rulesprovider import ( UserRulesProvider as BaseUserRulesProvider , ) [EOL] from morpfw . authn . pas . user . model import UserModel [EOL] from . . app import App [EOL] [EOL] [EOL] class UserRulesProvider ( BaseUserRulesProvider ) : [EOL] def validate ( self , password , check_state = True ) : [EOL] context = self . context [EOL] if check_state and context . data [ [string] ] not in [ [string] , [string] ] : [EOL] return False [EOL] return context . storage . validate ( context , context . userid , password ) [EOL] [EOL] [EOL] @ App . rulesprovider ( model = UserModel ) def get_user_rulesprovider ( context ) : [EOL] return UserRulesProvider ( context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Union , Dict [EOL] import typing [EOL] from dataclasses import dataclass [EOL] [EOL] import morpfw [EOL] from morpfw . authn . pas . user . model import UserModel [EOL] [EOL] from . . app import App [EOL] [EOL] [EOL] class UserStateMachine ( morpfw . StateMachine ) : [EOL] [EOL] states = [ [string] , [string] , [string] ] [EOL] transitions = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ [string] ] , } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] def is_validated ( self ) : [EOL] xattr = self . _context . xattrprovider ( ) [EOL] if self . _request . app . get_config ( [string] , False ) : [EOL] email_validated = xattr . get ( [string] , False ) [EOL] return email_validated [EOL] return True [EOL] [EOL] [EOL] @ App . statemachine ( model = UserModel ) def userstatemachine ( context ) : [EOL] return UserStateMachine ( context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from morpfw . authn . pas . user . path import get_user , get_user_collection [EOL] [EOL] from . . app import App [EOL] from . model import CurrentUserModelUI , UserCollectionUI , UserModelUI [EOL] [EOL] [EOL] @ App . path ( model = UserCollectionUI , path = [string] ) def get_user_collection_ui ( request ) : [EOL] col = get_user_collection ( request ) [EOL] return UserCollectionUI ( request , col ) [EOL] [EOL] [EOL] @ App . path ( model = UserModelUI , path = [string] , variables = lambda obj : { [string] : obj . model . data [ [string] ] } , ) def get_user_model_ui ( request , username ) : [EOL] user = get_user_collection ( request ) . get_by_username ( username ) [EOL] if user is None : [EOL] return None [EOL] col = get_user_collection ( request ) [EOL] return UserModelUI ( request , user , UserCollectionUI ( request , col ) ) [EOL] [EOL] [EOL] @ App . path ( model = CurrentUserModelUI , path = [string] ) def get_current_user_model_ui ( request ) : [EOL] userid = request . identity . userid [EOL] if userid is None : [EOL] return None [EOL] col = get_user_collection ( request ) [EOL] user = col . get_by_userid ( userid ) [EOL] if user is None : [EOL] return None [EOL] return CurrentUserModelUI ( request , user , UserCollectionUI ( request , col ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import datetime [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from datetime import datetime [EOL] [EOL] import morpfw [EOL] from morpfw . authn . pas . user . model import UserModel [EOL] from morpfw . crud . xattrprovider import FieldXattrProvider [EOL] [EOL] from . . app import App [EOL] [EOL] [EOL] @ dataclass class UserXattrSchema ( object ) : [EOL] [EOL] firstname = field ( default = None , metadata = { [string] : [string] } ) [EOL] lastname = field ( default = None , metadata = { [string] : [string] } ) [EOL] displayname = field ( default = None , metadata = { [string] : [string] } ) [EOL] address = field ( default = None , metadata = { [string] : [string] } ) [EOL] agreed_terms = field ( default = False , metadata = { [string] : False } ) [EOL] agreed_terms_ts = field ( default = None , metadata = { [string] : False } ) [EOL] [EOL] [EOL] class UserXattrProvider ( FieldXattrProvider ) : [EOL] [EOL] schema = UserXattrSchema [EOL] [EOL] [EOL] @ App . xattrprovider ( model = UserModel ) def get_xattr_provider ( context ) : [EOL] return UserXattrProvider ( context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.users.xattrprovider.UserXattrSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . app import App [EOL] from . . crud . view . view import view as default_view [EOL] from . model import UserModelUI [EOL] [EOL] [EOL] @ App . html ( model = UserModelUI , name = [string] , permission = crudperms . View , template = [string] ) def view ( context , request ) : [EOL] result = default_view ( context , request ) [EOL] user = context . model [EOL] username = user [ [string] ] [EOL] xattr = user . xattrprovider ( ) [EOL] if user . get_blob ( [string] ) : [EOL] photo_url = request . link ( context , [string] ) [EOL] else : [EOL] photo_url = request . relative_url ( [string] ) [EOL] [EOL] result [ [string] ] = photo_url [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] class DefaultFactoryRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . names = [ ] [EOL] [EOL] def register ( self , name ) : [EOL] if name not in self . names : [EOL] self . names . append ( name ) [EOL] [EOL] def get ( self , name , request ) : [EOL] try : [EOL] factory = request . app . get_default_factory ( name ) [EOL] except NotImplementedError : [EOL] factory = None [EOL] [EOL] if factory is None : [EOL] raise KeyError ( [string] % name ) [EOL] [EOL] return factory [EOL] [EOL] def get_factories ( self , request ) : [EOL] res = { } [EOL] for k in self . names : [EOL] res [ k ] = self . get ( k , request ) [EOL] return res [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0
from typing import Any , Dict [EOL] import typing [EOL] class ApplicationBehaviorRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . behaviors = [ ] [EOL] [EOL] def register_behavior ( self , name ) : [EOL] if name not in self . behaviors : [EOL] self . behaviors . append ( name ) [EOL] [EOL] def get_behavior ( self , name , request ) : [EOL] try : [EOL] factory = request . app . get_application_behavior_factory ( name ) [EOL] except NotImplementedError : [EOL] factory = None [EOL] [EOL] if factory is None : [EOL] raise KeyError ( [string] % name ) [EOL] [EOL] result = factory ( request ) [EOL] result . __name__ = name [EOL] return result [EOL] [EOL] def get_behaviors ( self , request ) : [EOL] res = { } [EOL] for k in self . behaviors : [EOL] res [ k ] = self . get_behavior ( k , request ) [EOL] return res [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0
	0
from typing import List , Any , Dict [EOL] import typing [EOL] from morepath . toposort import Info , toposorted [EOL] [EOL] from . . util import permits [EOL] [EOL] [EOL] class PortletRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _portlets = { } [EOL] self . _portlet_options = { } [EOL] [EOL] def register ( self , portlet_factory , name , template , permission ) : [EOL] self . _portlets [ name ] = { [string] : portlet_factory , [string] : template , [string] : name , [string] : permission , } [EOL] [EOL] def get_portlet ( self , name ) : [EOL] info = self . _portlets [ name ] [EOL] return Portlet ( ** info ) [EOL] [EOL] [EOL] class PortletProviderRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _providers = { } [EOL] [EOL] def register ( self , provider_factory , name , permission ) : [EOL] self . _providers [ name ] = { [string] : provider_factory , [string] : permission , [string] : name , } [EOL] [EOL] def get_provider ( self , name ) : [EOL] if name not in self . _providers : [EOL] return None [EOL] [EOL] info = self . _providers [ name ] [EOL] return PortletProvider ( ** info ) [EOL] [EOL] [EOL] class Portlet ( object ) : [EOL] def __init__ ( self , name , factory , template , permission ) : [EOL] self . name = name [EOL] self . factory = factory [EOL] self . template = template [EOL] self . permission = permission [EOL] [EOL] def render ( self , context , request , load_template ) : [EOL] portletdata = self . factory ( context , request ) [EOL] [EOL] def _permits ( permission , request = request , context = context ) : [EOL] return permits ( request , context , permission ) [EOL] [EOL] if self . permission and not permits ( request , context , self . permission ) : [EOL] return [string] [EOL] [EOL] if self . template is None : [EOL] assert isinstance ( portletdata , str ) [EOL] return portletdata [EOL] else : [EOL] template = load_template ( self . template ) [EOL] data = { [string] : _permits , [string] : request . app , [string] : request . app . settings , [string] : request , [string] : context , [string] : load_template , } [EOL] data . update ( portletdata ) [EOL] return template . render ( ** data ) [EOL] [EOL] [EOL] class PortletProvider ( object ) : [EOL] def __init__ ( self , factory , permission , name ) : [EOL] self . name = name [EOL] self . factory = factory [EOL] self . permission = permission [EOL] [EOL] def render ( self , context , request , load_template ) : [EOL] [EOL] if self . permission and not permits ( request , context , self . permission ) : [EOL] return [string] [EOL] [EOL] portletnames = self . factory ( context , request ) [EOL] [EOL] portlets = [ ] [EOL] for pname in portletnames : [EOL] portlet = request . app . config . portlet_registry . get_portlet ( pname ) [EOL] portlets . append ( portlet ) [EOL] [EOL] result = [ ] [EOL] [EOL] for portlet in portlets : [EOL] result . append ( portlet . render ( context , request , load_template ) ) [EOL] [EOL] return [string] . join ( result ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import dataclasses [EOL] [EOL] import colander [EOL] import deform [EOL] import morepath [EOL] from inverter import dc2colander , dc2colanderjson [EOL] from morepath . toposort import Info , toposorted [EOL] from morpfw . crud . errors import AlreadyExistsError , ValidationError [EOL] from morpfw . exc import ConfigurationError [EOL] [EOL] from . . util import permits [EOL] [EOL] [EOL] class SettingPageRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _setting_pages = { } [EOL] [EOL] def register ( self , factory , name , title , permission , order = [number] ) : [EOL] self . _setting_pages [ name ] = { [string] : factory , [string] : title , [string] : name , [string] : permission , [string] : order , } [EOL] [EOL] def get ( self , request , name ) : [EOL] info = self . _setting_pages [ name ] [EOL] return SettingPage ( ** info ) [EOL] [EOL] def keys ( self ) : [EOL] return [ i [ [string] ] for i in sorted ( self . _setting_pages . values ( ) , key = lambda x : x [ [string] ] ) ] [EOL] [EOL] def values ( self , request ) : [EOL] return [ self . get ( request , k ) for k in self . keys ( ) ] [EOL] [EOL] def items ( self , request ) : [EOL] return [ ( k , self . get ( request , k ) ) for k in self . keys ( ) ] [EOL] [EOL] [EOL] class SettingPage ( object ) : [EOL] def __init__ ( self , factory , name , title , permission , order = [number] ) : [EOL] self . factory = factory [EOL] self . name = name [EOL] self . title = title [EOL] self . permission = permission [EOL] self . order = order [EOL] [EOL] def enabled ( self , context , request ) : [EOL] if self . factory ( request ) : [EOL] if self . permission : [EOL] if request . permits ( context , self . permission ) : [EOL] return True [EOL] else : [EOL] return True [EOL] return False [EOL] [EOL] def formschema ( self , context , request ) : [EOL] schema = self . factory ( request ) [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) ) ( ) [EOL] formschema . bind ( context = context , request = request ) [EOL] return formschema [EOL] [EOL] def jsonformschema ( self , context , request ) : [EOL] schema = self . factory ( request ) [EOL] field_metadata = { } [EOL] for fname , field in schema . __dataclass_fields__ . items ( ) : [EOL] field_factory = field . metadata . get ( [string] , None ) [EOL] if field_factory : [EOL] field_metadata . setdefault ( fname , { } ) [EOL] field_metadata [ fname ] [ [string] ] = field_factory [EOL] formschema = dc2colanderjson . convert ( schema , request = request , default_tzinfo = request . timezone ( ) , field_metadata = field_metadata , ) ( ) [EOL] formschema . bind ( context = context , request = request ) [EOL] return formschema [EOL] [EOL] def form ( self , context , request ) : [EOL] return deform . Form ( self . formschema ( context , request ) , buttons = ( [string] , ) ) [EOL] [EOL] def form_data ( self , context , request ) : [EOL] settings = request . get_collection ( [string] ) [EOL] schema = self . factory ( request ) [EOL] jsonformschema = self . jsonformschema ( context , request ) [EOL] data = { } [EOL] for name , field in schema . __dataclass_fields__ . items ( ) : [EOL] setting_key = field . metadata [ [string] ] [EOL] setting = settings . get_by_key ( setting_key ) [EOL] value = ( setting [ [string] ] or { } ) . get ( [string] , None ) [EOL] form_field = jsonformschema [ name ] [EOL] if value is None : [EOL] if not isinstance ( field . default , dataclasses . _MISSING_TYPE ) : [EOL] value = field . default [EOL] elif not isinstance ( field . default_factory , dataclasses . _MISSING_TYPE ) : [EOL] value = field . default_factory ( ) [EOL] else : [EOL] try : [EOL] value = form_field . deserialize ( value ) [EOL] except colander . Invalid : [EOL] value = None [EOL] data [ name ] = value [EOL] return data [EOL] [comment] [EOL] [EOL] def process_form ( self , context , request ) : [EOL] settings = request . get_collection ( [string] ) [EOL] failed = False [EOL] controls = list ( request . POST . items ( ) ) [EOL] form = self . form ( context , request ) [EOL] jsonformschema = self . jsonformschema ( context , request ) [EOL] data = self . form_data ( context , request ) [EOL] schema = self . factory ( request ) [EOL] keys = schema . __dataclass_fields__ . keys ( ) [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] [EOL] if not failed : [EOL] for k , v in data . items ( ) : [EOL] if k in keys : [EOL] field = schema . __dataclass_fields__ [ k ] [EOL] setting_key = field . metadata [ [string] ] [EOL] setting = settings . get_by_key ( setting_key ) [EOL] form_field = jsonformschema [ k ] [EOL] if v is not None : [EOL] value = form_field . serialize ( v ) [EOL] else : [EOL] value = v [EOL] setting . update ( { [string] : setting_key , [string] : { [string] : value } } ) [EOL] [EOL] return None [EOL] [EOL] return { [string] : form , [string] : data } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $None$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from . wizard import Wizard , WizardStep , FormWizardStep , AgreementWizardStep [EOL] from . wizard import ConditionalBlockerWizardStep [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import deform [EOL] import morepath [EOL] import morpfw [EOL] from inverter import dc2colander [EOL] from morpfw . crud . errors import ValidationError [EOL] [EOL] [EOL] class WizardStep ( object ) : [EOL] title = [string] [EOL] template = ... [EOL] index = ... [EOL] wizard = ... [EOL] [EOL] def __init__ ( self , context , request , wizard , index ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . wizard = wizard [EOL] self . index = index [EOL] [EOL] def macro ( self , load_template ) : [EOL] return load_template ( self . template ) . macros . step [EOL] [EOL] def handler_macro ( self , load_template ) : [EOL] return load_template ( self . template ) . macros [ [string] ] [EOL] [EOL] def can_handle ( self ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] def finalize ( self ) : [EOL] [docstring] [EOL] return True [EOL] [EOL] def completed ( self ) : [EOL] return True [EOL] [EOL] @ property def sessiondata ( self ) : [EOL] req = self . request [EOL] req . session . setdefault ( [string] , { } ) [EOL] req . session [ [string] ] . setdefault ( self . wizard . id , { } ) [EOL] req . session [ [string] ] [ self . wizard . id ] . setdefault ( [string] , { } ) [EOL] data = req . session [ [string] ] [ self . wizard . id ] [ [string] ] . get ( self . index , None ) [EOL] return data [EOL] [EOL] @ sessiondata . setter def sessiondata ( self , data ) : [EOL] req = self . request [EOL] req . session . setdefault ( [string] , { } ) [EOL] req . session [ [string] ] . setdefault ( self . wizard . id , { } ) [EOL] req . session [ [string] ] [ self . wizard . id ] . setdefault ( [string] , { } ) [EOL] req . session [ [string] ] [ self . wizard . id ] [ [string] ] [ self . index ] = data [EOL] req . session . save ( ) [EOL] [EOL] def clear_sessiondata ( self ) : [EOL] req = self . request [EOL] req . session . setdefault ( [string] , { } ) [EOL] if self . sessiondata : [EOL] del req . session [ [string] ] [ self . wizard . id ] [ [string] ] [ self . index ] [EOL] req . session . save ( ) [EOL] [EOL] def handle ( self ) : [EOL] return { } [EOL] [EOL] [EOL] class FormWizardStep ( WizardStep ) : [EOL] [EOL] template = [string] [EOL] schema = ... [EOL] [EOL] def get_form ( self , formid ) : [EOL] formschema = dc2colander . convert ( self . schema , request = self . request , default_tzinfo = self . request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = self . context , request = self . request ) [EOL] return deform . Form ( fs , formid = formid ) [EOL] [EOL] def can_handle ( self ) : [EOL] request = self . request [EOL] formid = request . POST . get ( [string] ) [EOL] if formid : [EOL] try : [EOL] step = int ( formid . split ( [string] ) [ - [number] ] ) [EOL] except : [EOL] return False [EOL] [EOL] if step == self . index : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def process_form ( self ) : [EOL] request = self . request [EOL] formschema = dc2colander . convert ( self . schema , request = self . request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = self . context , request = self . request ) [EOL] controls = request . POST . items ( ) [EOL] form = deform . Form ( fs , formid = request . POST . get ( [string] ) ) [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] data = controls [EOL] [EOL] if not failed : [EOL] self . sessiondata = data [EOL] [EOL] return { [string] : form , [string] : failed , [string] : data } [EOL] [EOL] def completed ( self ) : [EOL] try : [EOL] self . schema . validate ( self . request , self . sessiondata ) [EOL] except ValidationError : [EOL] return False [EOL] return True [EOL] [EOL] def handle ( self ) : [EOL] result = self . process_form ( ) [EOL] [EOL] [comment] [EOL] if result [ [string] ] : [EOL] return { [string] : self , [string] : result [ [string] ] } [EOL] [EOL] return { [string] : self , [string] : result [ [string] ] } [EOL] [EOL] [EOL] class ConditionalBlockerWizardStep ( WizardStep ) : [EOL] [EOL] template = [string] [EOL] [EOL] def can_handle ( self ) : [EOL] request = self . request [EOL] formid = request . POST . get ( [string] ) [EOL] if formid : [EOL] try : [EOL] step = int ( formid . split ( [string] ) [ - [number] ] ) [EOL] except : [EOL] return False [EOL] [EOL] if step == self . index : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def validate ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] def completed ( self ) : [EOL] if not self . validate ( ) : [EOL] return False [EOL] return True [EOL] [EOL] def handle ( self ) : [EOL] if not self . validate ( ) : [EOL] return { [string] : self , [string] : True } [EOL] [EOL] return { [string] : self , [string] : False } [EOL] [EOL] [EOL] @ dataclass class AgreementForm ( morpfw . BaseSchema ) : [EOL] [EOL] agree = field ( metadata = { [string] : { [string] : deform . widget . CheckboxWidget ( ) } } ) [EOL] [EOL] [EOL] class AgreementWizardStep ( FormWizardStep ) : [EOL] [EOL] agreement_text = ... [EOL] agreement_checkbox_label = ... [EOL] agreement_error_msg = ... [EOL] [EOL] template = [string] [EOL] schema = AgreementForm [EOL] [EOL] def completed ( self ) : [EOL] if not super ( ) . completed ( ) : [EOL] return False [EOL] [EOL] if self . sessiondata . get ( [string] , False ) : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def handle ( self ) : [EOL] result = self . process_form ( ) [EOL] data = result [ [string] ] [EOL] [EOL] if result [ [string] ] : [EOL] return { [string] : self , [string] : True } [EOL] [EOL] if not data [ [string] ] : [EOL] return { [string] : self , [string] : True } [EOL] [EOL] return { [string] : self , [string] : False } [EOL] [EOL] [EOL] class Wizard ( object ) : [EOL] steps = [ ] [EOL] style = ... [EOL] [EOL] def __init__ ( self , context , request , identifier , style = [string] ) : [EOL] self . id = identifier [EOL] self . context = context [EOL] self . style = style [EOL] self . request = request [EOL] steps = [ ] [EOL] for idx , step in enumerate ( self . steps ) : [EOL] s = step ( context , request , self , idx ) [EOL] steps . append ( s ) [EOL] self . steps = steps [EOL] [EOL] def macro ( self , load_template , macro = [string] ) : [EOL] template = [string] [EOL] return load_template ( template ) . macros [ macro ] [EOL] [EOL] def finalize ( self ) : [EOL] self . clear ( ) [EOL] return morepath . redirect ( self . request . link ( self . context ) ) [EOL] [EOL] def clear ( self ) : [EOL] del self . request . session [ [string] ] [ self . id ] [EOL] self . request . session . save ( ) [EOL] [EOL] def handle ( self ) : [EOL] request = self . request [EOL] for step in self . steps : [EOL] if step . can_handle ( ) : [EOL] return step . handle ( ) [EOL] [EOL] finalize_form = [string] % self . id [EOL] if request . POST . get ( [string] ) == finalize_form : [EOL] for step in self . steps : [EOL] assert step . completed ( ) == True [EOL] step . finalize ( ) [EOL] [EOL] return self . finalize ( ) [EOL] [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $"Wizard"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $morpcc.wizard.wizard.Wizard$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $morpcc.wizard.wizard.Wizard$ 0 $morpcc.wizard.wizard.Wizard$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[morpcc.wizard.wizard.AgreementForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[WizardStep]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[morpcc.wizard.wizard.WizardStep]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[morpcc.wizard.wizard.WizardStep]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[morpcc.wizard.wizard.WizardStep]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[morpcc.wizard.wizard.WizardStep]$ 0 $typing.List[morpcc.wizard.wizard.WizardStep]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class AttributeValidatorModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class AttributeValidatorCollectionUI ( CollectionUI ) : [EOL] modelui_class = AttributeValidatorModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidator.modelui.AttributeValidatorModelUI]$ 0 0 0
	0
from . . app import App [EOL] from . model import AttributeValidatorCollection , AttributeValidatorModel [EOL] [EOL] [comment] [EOL] from . modelui import AttributeValidatorCollectionUI , AttributeValidatorModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import AttributeValidatorSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = AttributeValidatorSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : AttributeValidatorSchema , [string] : AttributeValidatorCollection , [string] : get_collection , [string] : AttributeValidatorModel , [string] : get_model , [string] : AttributeValidatorCollectionUI , [string] : AttributeValidatorModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] from RestrictedPython import compile_restricted [EOL] [EOL] from . . import log [EOL] from . . restrictedpython import get_restricted_function [EOL] from . modelui import AttributeValidatorCollectionUI , AttributeValidatorModelUI [EOL] from . schema import AttributeValidatorSchema [EOL] [EOL] [EOL] class AttributeValidatorWrapper ( object ) : [EOL] def __init__ ( self , validator , message ) : [EOL] self . validator = validator [EOL] self . message = message [EOL] [EOL] def __call__ ( self , request , schema , field , value , mode = None ) : [EOL] if not self . validator ( value ) : [EOL] return self . message [EOL] [EOL] [EOL] class AttributeValidatorModel ( morpfw . Model ) : [EOL] schema = AttributeValidatorSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeValidatorModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . memoize ( ) def bytecode ( self ) : [EOL] bytecode = compile_restricted ( self [ [string] ] , filename = [string] . format ( self [ [string] ] ) , mode = [string] , ) [EOL] return bytecode [EOL] [EOL] @ morpfw . memoize ( ) def function ( self ) : [EOL] restricted = self . app . get_config ( [string] , True ) [EOL] if not restricted : [EOL] return self . unrestricted_function ( ) [EOL] function = get_restricted_function ( self . request . app , self . bytecode ( ) , [string] ) [EOL] return function [EOL] [EOL] def unrestricted_function ( self ) : [EOL] log . warn ( [string] ) [EOL] bytecode = compile ( self [ [string] ] , filename = [string] . format ( self [ [string] ] ) , mode = [string] , ) [EOL] name = [string] [EOL] local_vars = { } [EOL] exec ( bytecode , { } , local_vars ) [EOL] func = local_vars [ name ] [EOL] del local_vars [ name ] [EOL] func . __globals__ . update ( local_vars ) [EOL] return func [EOL] [EOL] def field_validator ( self ) : [EOL] return AttributeValidatorWrapper ( self . function ( ) , self [ [string] ] ) [EOL] [EOL] [EOL] class AttributeValidatorCollection ( morpfw . Collection ) : [EOL] schema = AttributeValidatorSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeValidatorCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidator.model.AttributeValidatorModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidator.model.AttributeValidatorCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import json [EOL] [EOL] import deform [EOL] import morpfw [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] from pygments import highlight [EOL] from pygments . formatters import HtmlFormatter [EOL] from pygments . lexers import PythonLexer [EOL] [EOL] from . . app import App [EOL] from . modelui import EntityCollectionUI , EntityModelUI [EOL] [EOL] [EOL] @ App . html ( model = EntityModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def edit ( context , request ) : [EOL] return default_edit ( context , request ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . . app import App [EOL] from . modelui import EntityModelUI [EOL] [EOL] [EOL] @ App . breadcrumb ( model = EntityModelUI ) def get_entity_model_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] model_crumb = { [string] : model . model [ [string] ] , [string] : request . link ( model ) , [string] : False , } [EOL] [EOL] schema_typeinfo = request . app . get_typeinfo ( [string] , request ) [EOL] schema = model . model . entity_schema ( ) [EOL] schema_crumb = { [string] : schema [ [string] ] , [string] : request . link ( schema . ui ( ) ) , [string] : False , } [EOL] [EOL] schema_collection_crumb = { [string] : schema_typeinfo [ [string] ] , [string] : request . link ( schema . collection . ui ( ) ) , [string] : False , } [EOL] crumbs = [ schema_collection_crumb , schema_crumb , model_crumb ] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] model_crumb [ [string] ] = True [EOL] return crumbs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . . application . path import get_model as get_application [EOL] from . . entitycontent . model import content_collection_factory [EOL] from . path import get_model as get_entity [EOL] [EOL] [EOL] @ App . indexresolver ( [string] ) def resolve ( context , request ) : [EOL] app = get_application ( request , context [ [string] ] ) [EOL] dm = get_entity ( request , context [ [string] ] ) [EOL] col = content_collection_factory ( dm , app ) [EOL] return col . get ( context [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Pattern [EOL] import typing [EOL] import re [EOL] import string [EOL] [EOL] from inverter . common import dataclass_get_type [EOL] [EOL] from . . app import App [EOL] from . . entitycontent . model import EntityContentModel [EOL] [EOL] html_tag = re . compile ( [string] ) [EOL] [EOL] [EOL] def remove_html_tags ( text ) : [EOL] return re . sub ( html_tag , [string] , text ) [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def title ( context , name ) : [EOL] entity = context . collection . __parent__ [EOL] application = context . collection . __application__ [EOL] [EOL] return [string] . format ( application [ [string] ] , entity [ [string] ] , context . uuid ) [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def description ( context , name ) : [EOL] return None [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def index_resolver ( context , name ) : [EOL] return [string] [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def searchabletext ( context , name ) : [EOL] entity = context . collection . __parent__ [EOL] text = [ ] [EOL] for name , attr in entity . dataclass ( ) . __dataclass_fields__ . items ( ) : [EOL] dctype = dataclass_get_type ( attr ) [EOL] if dctype [ [string] ] == str : [EOL] dformat = dctype [ [string] ] . get ( [string] , None ) [EOL] if dformat == [string] : [EOL] continue [EOL] [EOL] value = context [ name ] [EOL] [EOL] if dformat == [string] : [EOL] value = remove_html_tags ( value ) [EOL] [EOL] if value : [EOL] text . append ( value . lower ( ) ) [EOL] searchabletext = [string] . join ( text ) [EOL] searchabletext = searchabletext . translate ( str . maketrans ( [string] , [string] , string . punctuation ) ) . lower ( ) [EOL] return searchabletext [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def application_uuid ( context , name ) : [EOL] return context . collection . __application__ . uuid [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def entity_uuid ( context , name ) : [EOL] return context . collection . __parent__ . uuid [EOL] [EOL] [EOL] @ App . indexer ( model = EntityContentModel , name = [string] ) def entity_content_uuid ( context , name ) : [EOL] return context . uuid [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from morpcc . crud . columns import get_buttons_column as default_get_buttons_column [EOL] from morpcc . util import permits [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . . entitycontent . model import EntityContentModel [EOL] from . . entitycontent . modelui import EntityContentModelUI [EOL] from . model import EntityModel [EOL] [EOL] [EOL] @ App . structure_column ( model = EntityContentModel , name = [string] ) def get_content_buttons_column ( model , request , name ) : [EOL] uiobj = model . ui ( ) [EOL] [EOL] buttons = [ ] [EOL] [EOL] if permits ( request , uiobj , crudperm . View ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] % uiobj . default_view ) , [string] : [string] , } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Edit ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Delete ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } ) [EOL] [EOL] render = request . app . get_template ( [string] ) [EOL] return render ( { [string] : buttons } , request ) [EOL] [EOL] [EOL] @ App . structure_column ( model = EntityModel , name = [string] ) def get_buttons_column ( model , request , name ) : [EOL] uiobj = model . ui ( ) [EOL] [EOL] buttons = [ ] [EOL] [EOL] if permits ( request , uiobj , crudperm . View ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] % uiobj . default_view ) , [string] : [string] , } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Edit ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , } ) [EOL] [EOL] if permits ( request , uiobj , crudperm . Delete ) : [EOL] buttons . append ( { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } ) [EOL] [EOL] render = request . app . get_template ( [string] ) [EOL] return render ( { [string] : buttons } , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import EntityCollection , EntityModel [EOL] [EOL] [comment] [EOL] from . modelui import EntityCollectionUI , EntityModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import EntitySchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = EntitySchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : EntitySchema , [string] : EntityCollection , [string] : get_collection , [string] : EntityModel , [string] : get_model , [string] : EntityCollectionUI , [string] : EntityModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import typing [EOL] from dataclasses import field , make_dataclass [EOL] [EOL] import morpfw [EOL] import rulez [EOL] from morpfw . crud . storage . pgsqlstorage import PgSQLStorage [EOL] from sqlalchemy import MetaData [EOL] [EOL] from . . deform . refdatawidget import ReferenceDataWidget [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] from . modelui import EntityCollectionUI , EntityModelUI [EOL] from . schema import EntitySchema [EOL] [EOL] [EOL] class EntityModel ( morpfw . Model ) : [EOL] schema = EntitySchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] def title ( self ) : [EOL] return self [ [string] ] [EOL] [EOL] def icon ( self ) : [EOL] return self [ [string] ] or [string] [EOL] [EOL] def dataclass ( self , validators = None , widgets = None , allow_invalid = False ) : [EOL] validators = validators or { } [EOL] widgets = widgets or { } [EOL] attrs = [ ] [EOL] primary_key = [ ] [EOL] brels = [ b [ [string] ] for b in self . backrelationships ( ) . values ( ) ] [EOL] [EOL] allow_invalid = allow_invalid or self [ [string] ] [EOL] for k , attr in self . attributes ( ) . items ( ) : [EOL] if not allow_invalid : [EOL] metadata = attr . field_metadata ( ) [EOL] else : [EOL] metadata = attr . field_metadata_allow_invalid ( ) [EOL] [EOL] if attr . uuid in brels : [EOL] metadata [ [string] ] = True [EOL] [EOL] name = attr [ [string] ] [EOL] if validators . get ( name , [ ] ) : [EOL] metadata . setdefault ( [string] , [ ] ) [EOL] metadata [ [string] ] += validators [ name ] [EOL] if widgets . get ( k , None ) : [EOL] metadata [ [string] ] = widgets [ name ] [EOL] attrs . append ( ( attr [ [string] ] , attr . datatype ( ) , field ( default = None , metadata = metadata ) ) ) [EOL] if attr [ [string] ] : [EOL] primary_key . append ( attr [ [string] ] ) [EOL] [EOL] for r , rel in self . relationships ( ) . items ( ) : [EOL] refsearch = rel . reference_search_attribute ( ) [EOL] ref = rel . reference_attribute ( ) [EOL] dm = ref . entity ( ) [EOL] [EOL] if refsearch : [EOL] [comment] [EOL] assert dm [ [string] ] == refsearch . entity ( ) [ [string] ] [EOL] metadata = { [string] : rel [ [string] ] , [string] : rel [ [string] ] , [string] : rel [ [string] ] , [string] : [ ] , [string] : True , } [EOL] [EOL] name = rel [ [string] ] [EOL] if validators . get ( name , [ ] ) : [EOL] metadata . setdefault ( [string] , [ ] ) [EOL] metadata [ [string] ] += validators [ name ] [EOL] if widgets . get ( name , None ) : [EOL] metadata [ [string] ] = widgets [ name ] [EOL] [EOL] attrs . append ( ( rel [ [string] ] , rel . datatype ( ) , field ( default = None , metadata = metadata ) ) ) [EOL] [EOL] if rel [ [string] ] : [EOL] primary_key . append ( rel [ [string] ] ) [EOL] [EOL] name = self [ [string] ] or [string] [EOL] [EOL] bases = [ ] [EOL] for behavior in self . behaviors ( ) : [EOL] bases . append ( behavior . schema ) [EOL] [EOL] bases . append ( morpfw . Schema ) [EOL] [EOL] dc = make_dataclass ( name , fields = attrs , bases = tuple ( bases ) ) [EOL] if primary_key : [EOL] dc . __unique_constraint__ = tuple ( primary_key ) [EOL] [EOL] if not allow_invalid : [EOL] dc . __validators__ = [ ev . schema_validator ( ) for ev in self . entity_validators ( ) ] [EOL] return dc [EOL] [EOL] @ morpfw . requestmemoize ( ) def attributes ( self ) : [EOL] attrcol = self . request . get_collection ( [string] ) [EOL] attrs = attrcol . search ( rulez . field [ [string] ] == self . uuid ) [EOL] result = { } [EOL] [EOL] for attr in attrs : [EOL] result [ attr [ [string] ] ] = attr [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def effective_attributes ( self ) : [EOL] [EOL] result = { } [EOL] [EOL] attrs = self . attributes ( ) [EOL] [EOL] for behavior in self . behaviors ( ) : [EOL] for n , attr in behavior . schema . __dataclass_fields__ . items ( ) : [EOL] if n in attrs . keys ( ) : [EOL] continue [EOL] [EOL] title = n [EOL] if attr . metadata . get ( [string] , None ) : [EOL] title = attr . metadata [ [string] ] [EOL] result [ n ] = { [string] : title , [string] : n } [EOL] [EOL] for n , attr in attrs . items ( ) : [EOL] result [ n ] = { [string] : attr [ [string] ] , [string] : n } [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def relationships ( self ) : [EOL] relcol = self . request . get_collection ( [string] ) [EOL] rels = relcol . search ( rulez . field [ [string] ] == self . uuid ) [EOL] [EOL] result = { } [EOL] [EOL] for rel in rels : [EOL] result [ rel [ [string] ] ] = rel [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def backrelationships ( self ) : [EOL] brelcol = self . request . get_collection ( [string] ) [EOL] brels = brelcol . search ( rulez . field [ [string] ] == self . uuid ) [EOL] result = { } [EOL] for brel in brels : [EOL] result [ brel [ [string] ] ] = brel [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def behaviors ( self ) : [EOL] bhvcol = self . request . get_collection ( [string] ) [EOL] assignments = bhvcol . search ( rulez . field [ [string] ] == self . uuid ) [EOL] behaviors = [ ] [EOL] for assignment in assignments : [EOL] behavior = self . request . app . config . behavior_registry . get_behavior ( assignment [ [string] ] , self . request ) [EOL] behaviors . append ( behavior ) [EOL] [EOL] return behaviors [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity_schema ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] schema = col . get ( self [ [string] ] ) [EOL] return schema [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity_validators ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] assignments = col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] validators = [ v . validator ( ) for v in assignments ] [EOL] return validators [EOL] [EOL] @ morpfw . requestmemoize ( ) def get_entity_validator ( self , name ) : [EOL] for v in self . entity_validators ( ) : [EOL] if v [ [string] ] == name : [EOL] return v [EOL] [EOL] [EOL] class EntityCollection ( morpfw . Collection ) : [EOL] schema = EntitySchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entity.schema.EntitySchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entity.schema.EntitySchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from morpfw . crud . storage . pgsqlstorage import PgSQLStorage [EOL] [EOL] from . . app import App [EOL] from . model import EntityCollection , EntityModel [EOL] [EOL] [comment] [EOL] from . modelui import EntityCollectionUI , EntityModelUI [EOL] [EOL] [comment] [EOL] from . storage import EntityStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = EntityStorage ( request ) [EOL] return EntityCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = EntityCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = EntityModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = EntityCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = EntityModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class EntityModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class EntityCollectionUI ( CollectionUI ) : [EOL] modelui_class = EntityModelUI [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entity.modelui.EntityModelUI]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from morpfw . crud . field import Field [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . deform . vocabularywidget import VocabularyWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] from . . validator . vocabulary import VocabularyValidator [EOL] [EOL] [EOL] def only_one_primary ( request , schema , data , mode = None , ** kw ) : [EOL] if data [ [string] ] is True : [EOL] schema_uuid = data [ [string] ] [EOL] schemacol = request . get_collection ( [string] ) [EOL] schema = schemacol . get ( schema_uuid ) [EOL] for entity in schema . entities ( ) : [EOL] if entity [ [string] ] != data [ [string] ] : [EOL] if entity [ [string] ] : [EOL] return { [string] : [string] , [string] : ( [string] [string] ) . format ( entity [ [string] ] ) , } [EOL] [EOL] [EOL] @ dataclass class EntitySchema ( morpfw . Schema ) : [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False , [string] : [ valid_identifier ] , } , ) [EOL] title = Field ( ) . default ( None ) . required ( ) . init ( ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] icon = field ( default = None , metadata = { [string] : [ VocabularyValidator ( [string] ) ] , [string] : VocabularyWidget ( [string] ) , } , ) [EOL] [EOL] allow_invalid = False [EOL] [EOL] schema_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : False , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] is_primary = field ( default = False , metadata = { [string] : [string] , [string] : False } , ) [EOL] [EOL] __validators__ = [ only_one_primary ] [EOL] __unique_constraint__ = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import ReferenceDataCollection , ReferenceDataModel [EOL] [EOL] [comment] [EOL] from . modelui import ReferenceDataCollectionUI , ReferenceDataModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ReferenceDataSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ReferenceDataSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ReferenceDataSchema , [string] : ReferenceDataCollection , [string] : get_collection , [string] : ReferenceDataModel , [string] : get_model , [string] : ReferenceDataCollectionUI , [string] : ReferenceDataModelUI , [string] : True , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import ReferenceDataModel [EOL] [EOL] [EOL] class ReferenceData ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] title = sa . Column ( sa . String ( length = [number] ) ) [EOL] description = sa . Column ( sa . Text ( ) ) [EOL] name = sa . Column ( sa . String ( length = [number] ) , index = True ) [EOL] [EOL] [EOL] class ReferenceDataStorage ( morpfw . SQLStorage ) : [EOL] model = ReferenceDataModel [EOL] orm_model = ReferenceData [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.referencedata.storage.ReferenceData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.storage.ReferenceData]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.storage.ReferenceData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.model.ReferenceDataModel]$ 0 0 0 $typing.Type[morpcc.referencedata.storage.ReferenceData]$ 0 0 0
	0
from typing import Any , List , Dict [EOL] import typing [EOL] import rulez [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . app import App [EOL] from . . referencedatakey . path import get_collection as get_refdatakey_collection [EOL] from . . referencedataproperty . path import get_collection as get_refdataprop_collection [EOL] from . modelui import ReferenceDataCollectionUI , ReferenceDataModelUI [EOL] from . path import get_collection as get_refdata_collection [EOL] [EOL] [EOL] @ App . html ( model = ReferenceDataCollectionUI , name = [string] , template = [string] , permission = crudperms . Search , ) def view ( context , request ) : [EOL] return default_listing ( context , request ) [EOL] [EOL] [EOL] @ App . json ( model = ReferenceDataCollectionUI , name = [string] , permission = crudperms . Search ) def export ( context , request ) : [EOL] result = { } [EOL] for refdata in context . collection . search ( ) : [EOL] [EOL] result [ refdata [ [string] ] ] = refdata . export ( ) [EOL] [EOL] return result [EOL] [EOL] [EOL] @ App . json ( model = ReferenceDataModelUI , name = [string] , permission = crudperms . Search ) def export_model ( context , request ) : [EOL] return context . model . export ( ) [EOL] [EOL] [EOL] @ App . json ( model = ReferenceDataCollectionUI , name = [string] , permission = crudperms . Search , ) def vocabulary_search ( context , request ) : [EOL] refdata_name = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not refdata_name : [EOL] return { } [EOL] [EOL] refdata_property = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] [EOL] if not refdata_property : [EOL] return { } [EOL] [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] [EOL] refdatas = get_refdata_collection ( request ) [EOL] [EOL] col = get_refdata_collection ( request ) [EOL] refdatas = col . search ( rulez . field [ [string] ] == refdata_name ) [EOL] if not refdatas : [EOL] return { } [EOL] refdata = refdatas [ [number] ] [EOL] [EOL] keys = refdata . referencedatakeys ( ) [EOL] [EOL] key_props = [ ] [EOL] [EOL] prop_col = get_refdataprop_collection ( request ) [EOL] for key in keys : [EOL] props = prop_col . search ( rulez . and_ ( rulez . field [ [string] ] == key . uuid , rulez . field [ [string] ] == refdata_property , { [string] : [string] , [string] : [string] , [string] : term } , ) ) [EOL] if props : [EOL] prop = props [ [number] ] [EOL] key_props . append ( { [string] : key [ [string] ] , [string] : prop [ [string] ] } ) [EOL] [EOL] if not key_props : [EOL] return { } [EOL] return { [string] : key_props } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] [EOL] @ dataclass class ReferenceDataSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : [ valid_identifier ] , [string] : False , } , ) [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] [EOL] __unique_constraint__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class ReferenceDataModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ReferenceDataCollectionUI ( CollectionUI ) : [EOL] modelui_class = ReferenceDataModelUI [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.modelui.ReferenceDataModelUI]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . . referencedatakey . path import get_collection as get_keys_collection [EOL] from . modelui import ReferenceDataCollectionUI , ReferenceDataModelUI [EOL] from . schema import ReferenceDataSchema [EOL] [EOL] [EOL] class ReferenceDataModel ( morpfw . Model ) : [EOL] schema = ReferenceDataSchema [EOL] [EOL] def ui ( self ) : [EOL] return ReferenceDataModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedatakeys ( self ) : [EOL] col = get_keys_collection ( self . request ) [EOL] return col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def lookup_key ( self , key ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] res = col . search ( rulez . and_ ( rulez . field [ [string] ] == self . uuid , rulez . field [ [string] ] == key , ) ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] def export ( self ) : [EOL] result = { [string] : self [ [string] ] , [string] : self [ [string] ] , [string] : { } } [EOL] for k in self . referencedatakeys ( ) : [EOL] result [ [string] ] [ k [ [string] ] ] = k . export ( ) [EOL] return result [EOL] [EOL] def validator ( self ) : [EOL] refdata = self . export ( ) [EOL] [EOL] def refdata_validate ( value ) : [EOL] if value is None : [EOL] return True [EOL] marker = object ( ) [EOL] properties = refdata [ [string] ] . get ( value , marker ) [EOL] if properties is marker : [EOL] return False [EOL] return True [EOL] [EOL] return refdata_validate [EOL] [EOL] def before_delete ( self ) : [EOL] for k in self . referencedatakeys ( ) : [EOL] k . delete ( ) [EOL] [EOL] [EOL] class ReferenceDataCollection ( morpfw . Collection ) : [EOL] schema = ReferenceDataSchema [EOL] [EOL] def ui ( self ) : [EOL] return ReferenceDataCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.schema.ReferenceDataSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $typing.Any$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedata.schema.ReferenceDataSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . . app import App [EOL] from . model import ReferenceDataModel [EOL] [EOL] [EOL] @ App . structure_column ( model = ReferenceDataModel , name = [string] ) def get_buttons_column ( model , request , name ) : [EOL] uiobj = model . ui ( ) [EOL] [EOL] buttons = [ { [string] : [string] , [string] : request . relative_url ( [string] . format ( model . uuid ) ) , [string] : request . relative_url ( [string] . format ( model . uuid ) ) , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , } , { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } , ] [EOL] render = request . app . get_template ( [string] ) [EOL] return render ( { [string] : buttons } , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import DictionaryElementCollection , DictionaryElementModel [EOL] [EOL] [comment] [EOL] from . modelui import DictionaryElementCollectionUI , DictionaryElementModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import DictionaryElementSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = DictionaryElementSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : DictionaryElementSchema , [string] : DictionaryElementCollection , [string] : get_collection , [string] : DictionaryElementModel , [string] : get_model , [string] : DictionaryElementCollectionUI , [string] : DictionaryElementModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import DictionaryElementCollection , DictionaryElementModel [EOL] [EOL] [comment] [EOL] from . modelui import DictionaryElementCollectionUI , DictionaryElementModelUI [EOL] [EOL] [comment] [EOL] from . storage import DictionaryElementStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = DictionaryElementStorage ( request ) [EOL] return DictionaryElementCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import DictionaryElementCollectionUI , DictionaryElementModelUI [EOL] from . schema import DictionaryElementSchema [EOL] [EOL] [EOL] class DictionaryElementModel ( morpfw . Model ) : [EOL] schema = DictionaryElementSchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryElementModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def validators ( self ) : [EOL] assignments = self . validator_assignments ( ) [EOL] validators = [ a . validator ( ) for a in assignments ] [EOL] return validators [EOL] [EOL] @ morpfw . requestmemoize ( ) def validator_assignments ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] assignments = col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] return assignments [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedata ( self ) : [EOL] if not self [ [string] ] : [EOL] return None [EOL] col = self . request . get_collection ( [string] ) [EOL] res = col . search ( rulez . field [ [string] ] == self [ [string] ] ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedata_resolve ( self , key ) : [EOL] refdata = self . referencedata ( ) [EOL] if not refdata : [EOL] return None [EOL] rdkey = refdata . lookup_key ( key ) [EOL] if not rdkey : [EOL] return None [EOL] rdprop = rdkey . lookup_property ( self [ [string] ] ) [EOL] if not rdprop : [EOL] return None [EOL] return rdprop [ [string] ] [EOL] [EOL] def before_delete ( self ) : [EOL] for va in self . validator_assignments ( ) : [EOL] va . delete ( ) [EOL] [EOL] [EOL] class DictionaryElementCollection ( morpfw . Collection ) : [EOL] schema = DictionaryElementSchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryElementCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelement.schema.DictionaryElementSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelement.schema.DictionaryElementSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from deform . widget import SelectWidget [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] from . . attribute . schema import ACCEPTED_TYPES , valid_type [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . deform . richtextwidget import RichTextWidget [EOL] from . . preparer . html import HTMLSanitizer [EOL] from . . referencedataproperty . schema import PROPERTY_TYPES , valid_property_types [EOL] from . . validator . reference import ReferenceValidator [EOL] from . . validator . vocabulary import VocabularyValidator [EOL] from . form_validator import valid_refdata [EOL] [EOL] [EOL] @ dataclass class DictionaryElementSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : [ valid_identifier ] } ) [EOL] dictionaryentity_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] type = field ( default = None , metadata = { [string] : True , [string] : [ valid_type ] , [string] : SelectWidget ( values = ACCEPTED_TYPES ) , } , ) [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] notes = field ( default = None , metadata = { [string] : [string] , [string] : [ HTMLSanitizer ( ) ] , [string] : RichTextWidget ( ) , } , ) [EOL] referencedata_name = field ( default = None , metadata = { [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] referencedata_property = field ( default = None , metadata = { [string] : [ valid_property_types ] , [string] : SelectWidget ( values = PROPERTY_TYPES ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] ] [EOL] [EOL] __validators__ = [ valid_refdata ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def valid_refdata ( request , schema , data , mode = None , ** kw ) : [EOL] refdataname = ( data . get ( [string] , None ) or [string] ) . strip ( ) [EOL] if refdataname : [EOL] if data [ [string] ] != [string] : [EOL] return { [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class DictionaryElementModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class DictionaryElementCollectionUI ( CollectionUI ) : [EOL] modelui_class = DictionaryElementModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelement.modelui.DictionaryElementModelUI]$ 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import DictionaryElementCollection , DictionaryElementModel [EOL] from . modelui import DictionaryElementCollectionUI , DictionaryElementModelUI [EOL] [EOL] [EOL] @ App . html ( model = DictionaryElementModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def edit ( context , request ) : [EOL] return default_edit ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] class BaseBehavior ( object ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] from . . app import App [EOL] from . base import BaseBehavior [EOL] from dataclasses import dataclass , field [EOL] import typing [EOL] [EOL] @ dataclass class TitledDocumentSchema ( object ) : [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] [EOL] class TitledDocumentModel ( object ) : [EOL] pass [EOL] [EOL] class TitledDocumentModelUI ( object ) : [EOL] pass [EOL] [EOL] class TitledDocumentCollection ( object ) : [EOL] pass [EOL] [EOL] class TitledDocumentCollectionUI ( object ) : [EOL] pass [EOL] [EOL] class TitledDocumentBehavior ( BaseBehavior ) : [EOL] [EOL] schema = TitledDocumentSchema [EOL] model_marker = TitledDocumentModel [EOL] modelui_marker = TitledDocumentModelUI [EOL] collection_marker = TitledDocumentCollection [EOL] collectionui_marker = TitledDocumentCollectionUI [EOL] [EOL] [EOL] @ App . behavior ( [string] ) def get_behavior ( request ) : [EOL] return TitledDocumentBehavior [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.behavior.titled_document.TitledDocumentSchema]$ 0 0 0 $typing.Type[morpcc.behavior.titled_document.TitledDocumentModel]$ 0 0 0 $typing.Type[morpcc.behavior.titled_document.TitledDocumentModelUI]$ 0 0 0 $typing.Type[morpcc.behavior.titled_document.TitledDocumentCollection]$ 0 0 0 $typing.Type[morpcc.behavior.titled_document.TitledDocumentCollectionUI]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import smtplib [EOL] import email [EOL] import typing [EOL] import smtplib [EOL] import socket [EOL] [EOL] [comment] [EOL] from email . message import EmailMessage [EOL] [EOL] import morpfw [EOL] [EOL] from . . app import App [EOL] [EOL] SIGNAL = [string] [EOL] [EOL] [EOL] class EmailMessagingProvider ( object ) : [EOL] def __init__ ( self , request ) : [EOL] self . request = request [EOL] self . app = request . app [EOL] [EOL] def send ( self , to , subject , message ) : [EOL] ( self . app . async_dispatcher ( SIGNAL ) . dispatch ( self . request , obj = { [string] : to , [string] : subject , [string] : message } ) ) [EOL] [EOL] [EOL] @ App . async_subscribe ( SIGNAL ) def send_email ( request_options , obj ) : [EOL] with morpfw . request_factory ( ** request_options ) as request : [EOL] app = request . app [EOL] from_ = app . get_config ( [string] , f" [string] { socket . gethostname ( ) }" ) [EOL] smtphost = app . get_config ( [string] , [string] ) [EOL] smtpport = app . get_config ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] msg = EmailMessage ( ) [EOL] msg . set_content ( obj [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = from_ [EOL] msg [ [string] ] = obj [ [string] ] [EOL] [EOL] [comment] [EOL] s = smtplib . SMTP ( smtphost , smtpport ) [EOL] s . send_message ( msg ) [EOL] s . quit ( ) [EOL] [EOL] return { } [EOL] [EOL] [EOL] @ App . periodic ( name = SIGNAL , seconds = [number] ) def retry_send_email ( request ) : [EOL] return { } [EOL] [EOL] [EOL] @ App . messagingprovider ( [string] ) def get_email_provider ( request , name ) : [EOL] return EmailMessagingProvider ( request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import html [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import colander [EOL] import deform . widget [EOL] import morepath [EOL] from inverter import dc2colander [EOL] from morpfw . authn . pas . group . model import DEFAULT_VALID_ROLES [EOL] from morpfw . crud import permission as crudperms [EOL] from morpfw . crud . errors import AlreadyExistsError , ValidationError [EOL] [EOL] from . . app import App [EOL] from . model import GroupModelUI [EOL] [EOL] [EOL] def member_select_widget ( request ) : [EOL] usercol = request . get_collection ( [string] ) [EOL] choices = [ ] [EOL] for user in usercol . all ( ) : [EOL] if user [ [string] ] in [ [string] , [string] ] : [EOL] choices . append ( ( user . userid , user [ [string] ] ) ) [EOL] return deform . widget . Select2Widget ( values = choices , multiple = True ) [EOL] [EOL] [EOL] def group_schema ( context , request ) : [EOL] [EOL] valid_roles = request . app . get_config ( [string] , DEFAULT_VALID_ROLES ) [EOL] roles_c = len ( valid_roles ) [EOL] [EOL] class RoleAssignment ( colander . Schema ) : [EOL] role = colander . SchemaNode ( colander . String ( ) , widget = deform . widget . TextInputWidget ( template = [string] ) , ) [EOL] members = colander . SchemaNode ( colander . List ( ) , widget = member_select_widget ( request ) ) [EOL] [EOL] class Roles ( colander . SequenceSchema ) : [EOL] roles = RoleAssignment ( ) [EOL] [EOL] class GroupForm ( colander . Schema ) : [EOL] groupname = colander . SchemaNode ( colander . String ( ) , missing = colander . drop , widget = deform . widget . TextInputWidget ( template = [string] ) , ) [EOL] memberships = Roles ( widget = deform . widget . SequenceWidget ( min_len = roles_c , max_len = roles_c ) ) [EOL] [EOL] return GroupForm ( ) [EOL] [EOL] [EOL] @ App . html ( model = GroupModelUI , name = [string] , permission = crudperms . Edit , template = [string] , ) def edit ( context , request ) : [EOL] schema = group_schema ( context , request ) [EOL] form = deform . Form ( schema , buttons = ( [string] , ) ) [EOL] role_members = { } [EOL] for role in request . app . get_config ( [string] , DEFAULT_VALID_ROLES ) : [EOL] role_members . setdefault ( role , [ ] ) [EOL] [EOL] for member in context . model . members ( ) : [EOL] for role in context . model . get_member_roles ( member . userid ) : [EOL] if role not in role_members : [EOL] continue [EOL] role_members [ role ] . append ( member . userid ) [EOL] [EOL] memberships = [ { [string] : r , [string] : m } for r , m in role_members . items ( ) ] [EOL] data = { [string] : context . model [ [string] ] , [string] : memberships , } [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : form , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = GroupModelUI , name = [string] , permission = crudperms . Edit , template = [string] , request_method = [string] , ) def process_edit ( context , request ) : [EOL] fs = group_schema ( context , request ) [EOL] controls = list ( request . POST . items ( ) ) [EOL] form = deform . Form ( fs , buttons = ( [string] , ) ) [EOL] [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] [EOL] if not failed : [EOL] try : [EOL] context . model . remove_members ( [ m . userid for m in context . model . members ( ) ] ) [EOL] for m in data [ [string] ] : [EOL] for member_id in m [ [string] ] : [EOL] context . model . grant_member_role ( member_id , m [ [string] ] ) [EOL] except ValidationError as e : [EOL] failed = True [EOL] for fe in e . field_errors : [EOL] node = form [EOL] if fe . path in form : [EOL] node = form [ fe . path ] [EOL] node_error = colander . Invalid ( node . widget , fe . message ) [EOL] node . widget . handle_error ( node , node_error ) [EOL] if not failed : [EOL] return morepath . redirect ( request . link ( context ) ) [EOL] [EOL] @ request . after def set_header ( response ) : [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] return { [string] : [string] % html . escape ( str ( context . model . __class__ . __name__ ) ) , [string] : [string] , [string] : form , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from morpfw . authn . pas . group . typeinfo import get_typeinfo as get_basetypeinfo [EOL] from morpfw . authn . pas . group . schema import GroupSchema [EOL] [EOL] from . model import GroupCollectionUI , GroupModelUI [EOL] from . path import get_group_collection_ui , get_group_model_ui [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = GroupSchema ) def get_typeinfo ( request ) : [EOL] ti = get_basetypeinfo ( request ) [EOL] ti [ [string] ] = GroupCollectionUI [EOL] ti [ [string] ] = GroupModelUI [EOL] ti [ [string] ] = get_group_collection_ui [EOL] ti [ [string] ] = get_group_model_ui [EOL] return ti [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from morpfw . authn . pas . group . path import get_group , get_group_collection [EOL] [EOL] from . . app import App [EOL] from . model import GroupCollectionUI , GroupModelUI [EOL] [EOL] [EOL] @ App . path ( model = GroupCollectionUI , path = [string] ) def get_group_collection_ui ( request ) : [EOL] col = get_group_collection ( request ) [EOL] return GroupCollectionUI ( request , col ) [EOL] [EOL] [EOL] @ App . path ( model = GroupModelUI , path = [string] , variables = lambda obj : { [string] : obj . model . data [ [string] ] } ) def get_group_model_ui ( request , groupname ) : [EOL] col = get_group_collection ( request ) [EOL] group = col . get_by_groupname ( groupname ) [EOL] return GroupModelUI ( request , group , GroupCollectionUI ( request , col ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from morpfw . authn . pas . group . schema import GroupSchema [EOL] [EOL] from . . crud . model import CollectionUI , ModelUI [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class GroupModelUI ( ModelUI ) : [EOL] [EOL] edit_include_fields = [ [string] ] [EOL] [EOL] [EOL] class GroupCollectionUI ( CollectionUI ) : [EOL] [EOL] modelui_class = GroupModelUI [EOL] [EOL] create_include_fields = [ [string] ] [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.group.model.GroupModelUI]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class BackRelationshipModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class BackRelationshipCollectionUI ( CollectionUI ) : [EOL] modelui_class = BackRelationshipModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.backrelationship.modelui.BackRelationshipModelUI]$ 0 0 0
from typing import Any , Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] from . . attribute . form_validator import unique_attribute [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] [EOL] [EOL] def relationship_search_url ( widget , context , request ) : [EOL] entity_uuid = request . GET . get ( [string] , None ) [EOL] baseurl = request . relative_url ( [string] ) [EOL] if entity_uuid : [EOL] return [string] . format ( baseurl , entity_uuid ) [EOL] return baseurl [EOL] [EOL] [EOL] @ dataclass class BackRelationshipSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False , [string] : [ valid_identifier ] , } , ) [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] entity_uuid = field ( default = None , metadata = { [string] : [string] , [string] : True , [string] : False , [string] : [string] , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] reference_relationship_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : False , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] , get_search_url = relationship_search_url , ) , } , ) [EOL] [EOL] single_relation = False [EOL] [EOL] __validators__ = [ unique_attribute ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import rulez [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . . entitycontent . model import ( EntityContentModelUI , content_collection_factory ) [EOL] from . modelui import BackRelationshipCollectionUI , BackRelationshipModelUI [EOL] from . path import get_model as get_backrelationship [EOL] [EOL] [EOL] def _relationship_search ( context , request ) : [EOL] [comment] [EOL] entity_resource_type = [string] [EOL] relationship_resource_type = [string] [EOL] value_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not value_field : [EOL] return { } [EOL] [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term : [EOL] return { } [EOL] [EOL] entity_uuid = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] [EOL] reltypeinfo = request . app . config . type_registry . get_typeinfo ( name = relationship_resource_type , request = request ) [EOL] [EOL] dmtypeinfo = request . app . config . type_registry . get_typeinfo ( name = entity_resource_type , request = request ) [EOL] [EOL] relcol = reltypeinfo [ [string] ] ( request ) [EOL] dmcol = dmtypeinfo [ [string] ] ( request ) [EOL] [EOL] term = term . split ( [string] ) [EOL] if len ( term ) == [number] : [EOL] term . append ( None ) [EOL] [EOL] dmterm = term [ [number] ] [EOL] relterm = term [ [number] ] [EOL] [EOL] dms = dmcol . search ( query = { [string] : [string] , [string] : [string] , [string] : dmterm } ) [EOL] rels = [ ] [EOL] [EOL] for dm in dms : [EOL] query = rulez . field [ [string] ] == dm . uuid [EOL] if relterm : [EOL] query = rulez . and_ ( query , { [string] : [string] , [string] : [string] , [string] : relterm } ) [EOL] rels += [ ( dm , rel ) for rel in relcol . search ( query = query ) ] [EOL] [EOL] if entity_uuid : [EOL] newrels = [ ] [EOL] for dm , rel in rels : [EOL] if rel . reference_attribute ( ) [ [string] ] == entity_uuid : [EOL] newrels . append ( ( dm , rel ) ) [EOL] rels = newrels [EOL] [EOL] result = { [string] : [ ] } [EOL] for dm , rel in rels : [EOL] text = [string] . format ( dm [ [string] ] , rel [ [string] ] ) [EOL] result [ [string] ] . append ( { [string] : rel [ value_field ] , [string] : text } ) [EOL] return result [EOL] [EOL] [EOL] @ App . json ( model = BackRelationshipCollectionUI , name = [string] , permission = crudperm . Search ) def relationship_search ( context , request ) : [EOL] return _relationship_search ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from pytest_postgresql import factories [EOL] [EOL] pgsql_proc = factories . postgresql_proc ( executable = [string] , host = [string] , port = [number] , user = [string] ) [EOL] pgsql_db = factories . postgresql ( [string] , db_name = [string] ) [EOL] pgsql_db_warehouse = factories . postgresql ( [string] , db_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import os [EOL] import tempfile [EOL] [EOL] import morpfw . sql as morpsql [EOL] import yaml [EOL] from morpfw . tests . common import create_admin , get_client , make_request [EOL] [EOL] from . democms . app import App [EOL] [EOL] pages = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def follow ( resp ) : [EOL] while resp . status_code == [number] : [EOL] resp = resp . follow ( ) [EOL] [EOL] return resp [EOL] [EOL] [EOL] def test_democms ( pgsql_db , pgsql_db_warehouse ) : [EOL] settings_file = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] with open ( settings_file ) as sf : [EOL] settings = yaml . load ( sf , Loader = yaml . Loader ) [EOL] [EOL] settings [ [string] ] [ [string] ] = [string] [EOL] [EOL] settings [ [string] ] [ [string] ] = [string] [EOL] [EOL] test_settings = tempfile . mktemp ( ) [EOL] with open ( test_settings , [string] ) as ts : [EOL] yaml . dump ( settings , ts ) [EOL] [EOL] c = get_client ( test_settings ) [EOL] os . unlink ( test_settings ) [EOL] [EOL] req = make_request ( c . app . app ) [EOL] morpsql . Base . metadata . create_all ( bind = req . db_session . bind ) [EOL] [EOL] create_admin ( c , [string] , [string] , [string] ) [EOL] [EOL] r = c . get ( [string] ) [EOL] [comment] [EOL] assert r . status_code == [number] [EOL] assert r . headers [ [string] ] . split ( [string] ) [ [number] ] . endswith ( [string] ) [EOL] [EOL] [comment] [EOL] r = c . post ( r . headers [ [string] ] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] assert [string] in c . cookies . keys ( ) [EOL] [EOL] [comment] [EOL] r = c . get ( [string] ) [EOL] [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] for p in pages : [EOL] r = c . get ( p ) [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] assert r . status_code == [number] [EOL] [EOL] page_url = r . headers [ [string] ] [EOL] [EOL] r = r . follow ( ) . follow ( ) [EOL] [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] [EOL] r = c . post ( page_url + [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] assert r . status_code == [number] [EOL] [EOL] r = follow ( r ) [EOL] [EOL] assert r . status_code == [number] [EOL] [EOL] [comment] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] app_loc = r . headers [ [string] ] [EOL] app_uuid = app_loc . split ( [string] ) [ - [number] ] [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [comment] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : app_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] person_loc = r . headers [ [string] ] [EOL] person_uuid = person_loc . split ( [string] ) [ - [number] ] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] [comment] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : person_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] [EOL] person_id_loc = r . headers [ [string] ] [EOL] person_id_uuid = person_id_loc . split ( [string] ) [ - [number] ] [EOL] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : person_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] [EOL] person_name_loc = r . headers [ [string] ] [EOL] person_name_uuid = person_name_loc . split ( [string] ) [ - [number] ] [EOL] [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : person_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : app_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] address_loc = r . headers . get ( [string] ) [EOL] address_uuid = address_loc . split ( [string] ) [ - [number] ] [EOL] [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : address_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : address_uuid , [string] : person_id_uuid , [string] : person_name_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] person_address_rel_loc = r . headers . get ( [string] ) [EOL] person_address_rel_uuid = person_address_rel_loc . split ( [string] ) [ - [number] ] [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL] [EOL] r = c . post ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : address_uuid , [string] : person_address_rel_uuid , } , ) [EOL] [EOL] assert r . headers . get ( [string] , None ) is None [EOL] assert r . status_code == [number] [EOL] assert follow ( r ) . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str
from typing import Any [EOL] import typing [EOL] from . app import App [EOL] from morpcc . portlet import navigation_portlet as old_nav [EOL] [EOL] [EOL] @ App . portlet ( name = [string] , template = [string] ) def new_main_nav ( context , request ) : [EOL] result = old_nav ( context , request ) [EOL] result [ [string] ] [ [number] ] [ [string] ] . append ( { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import morpfw [EOL] import morpcc [EOL] from morpcc import permission as ccperm [EOL] [EOL] [EOL] class App ( morpcc . App ) : [EOL] pass [EOL] [EOL] [EOL] class AppRoot ( morpcc . Root ) : [EOL] pass [EOL] [EOL] [EOL] @ App . path ( model = AppRoot , path = [string] ) def get_approot ( request ) : [EOL] return AppRoot ( request ) [EOL] [EOL] [EOL] @ App . template_directory ( ) def get_template_directory ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] [EOL] from . modelui import PageCollectionUI , PageModelUI [EOL] from . schema import PageSchema [EOL] [EOL] [EOL] class PageModel ( morpfw . Model ) : [EOL] schema = PageSchema [EOL] [EOL] blob_fields = [ [string] , [string] ] [EOL] [EOL] def ui ( self ) : [EOL] return PageModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] class PageCollection ( morpfw . Collection ) : [EOL] schema = PageSchema [EOL] [EOL] def ui ( self ) : [EOL] return PageCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.schema.PageSchema]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.schema.PageSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict [EOL] import typing [EOL] import morpfw [EOL] from . model import PageModel [EOL] from . . app import App [EOL] [EOL] [EOL] class PageStateMachine ( morpfw . StateMachine ) : [EOL] states = [ [string] , [string] , [string] ] [EOL] [EOL] transitions = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] [EOL] @ App . statemachine ( model = PageModel ) def get_dataasset_statemachine ( obj ) : [EOL] return PageStateMachine ( obj ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import PageCollection , PageModel [EOL] from . modelui import PageCollectionUI , PageModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import PageSchema [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = PageSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : PageCollection , [string] : get_collection , [string] : PageCollectionUI , [string] : PageModel , [string] : get_model , [string] : PageModelUI , [string] : PageSchema , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import PageModel , PageCollection [EOL] from . modelui import PageCollectionUI , PageModelUI [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] [EOL] @ App . permission_rule ( model = PageCollection , permission = crudperm . All ) def allow_collection_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] [EOL] @ App . permission_rule ( model = PageModel , permission = crudperm . All ) def allow_model_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] [EOL] @ App . permission_rule ( model = PageCollectionUI , permission = crudperm . All ) def allow_collection_ui_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] [EOL] @ App . permission_rule ( model = PageModelUI , permission = crudperm . All ) def allow_model_ui_access ( identity , model , permission ) : [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import morpfw [EOL] from dataclasses import dataclass [EOL] import typing [EOL] [EOL] [EOL] @ dataclass class PageSchema ( morpfw . Schema ) : [EOL] [EOL] title = None [EOL] description = None [EOL] location = None [EOL] body = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] from . model import PageModel [EOL] [EOL] [EOL] class Page ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] title = sa . Column ( sa . String ( length = [number] ) ) [EOL] description = sa . Column ( sa . Text ( ) ) [EOL] location = sa . Column ( sa . String ( length = [number] ) ) [EOL] body = sa . Column ( sa . Text ( ) ) [EOL] [EOL] [EOL] class PageStorage ( morpfw . SQLStorage ) : [EOL] model = PageModel [EOL] orm_model = Page [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.tests.democms.page.storage.Page]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.storage.Page]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.storage.Page]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.storage.Page]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.model.PageModel]$ 0 0 0 $typing.Type[morpcc.tests.democms.page.storage.Page]$ 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from morpfw import FSBlobStorage [EOL] [EOL] from . . app import App [EOL] from . model import PageCollection , PageModel [EOL] from . modelui import PageCollectionUI , PageModelUI [EOL] from . storage import PageStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] blobstorage = request . app . get_config_blobstorage ( request ) [EOL] storage = PageStorage ( request , blobstorage = blobstorage ) [EOL] return PageCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = PageCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = PageModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = PageCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] col = get_collection ( request ) [EOL] return col . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = PageModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class PageModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class PageCollectionUI ( CollectionUI ) : [EOL] modelui_class = PageModelUI [EOL] [EOL] columns = [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.tests.democms.page.modelui.PageModelUI]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Dict [EOL] import typing [EOL] from html_sanitizer import Sanitizer as _Sanitizer [EOL] [EOL] [EOL] class HTMLSanitizer ( object ) : [EOL] def __init__ ( self , settings = None ) : [EOL] if settings is None : [EOL] settings = { [string] : ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , } [EOL] self . sanitizer = _Sanitizer ( settings ) [EOL] [EOL] def __call__ ( self , request , schema , value , mode = None ) : [EOL] if value : [EOL] return self . sanitizer . sanitize ( value ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . field import valid_refdatakey [EOL] from . . validator . reference import ReferenceValidator [EOL] [EOL] [EOL] @ dataclass class ReferenceDataKeySchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : False , [string] : [ valid_refdatakey ] , [string] : True , } , ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] referencedata_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : False , [string] : True , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import ReferenceDataKeyCollectionUI , ReferenceDataKeyModelUI [EOL] from . schema import ReferenceDataKeySchema [EOL] [EOL] [EOL] class ReferenceDataKeyModel ( morpfw . Model ) : [EOL] schema = ReferenceDataKeySchema [EOL] [EOL] def ui ( self ) : [EOL] return ReferenceDataKeyModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] def export ( self ) : [EOL] result = { [string] : self [ [string] ] , [string] : self [ [string] ] , [string] : { } , } [EOL] for v in self . referencedataproperties ( ) : [EOL] result [ [string] ] [ v [ [string] ] ] = v [ [string] ] [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedataproperties ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def lookup_property ( self , prop ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] res = col . search ( rulez . and_ ( rulez . field [ [string] ] == self . uuid , rulez . field [ [string] ] == prop , ) ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] def before_delete ( self ) : [EOL] for p in self . referencedataproperties ( ) : [EOL] p . delete ( ) [EOL] [EOL] [EOL] class ReferenceDataKeyCollection ( morpfw . Collection ) : [EOL] schema = ReferenceDataKeySchema [EOL] [EOL] def ui ( self ) : [EOL] return ReferenceDataKeyCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedatakey.schema.ReferenceDataKeySchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedatakey.schema.ReferenceDataKeySchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class ReferenceDataKeyModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ReferenceDataKeyCollectionUI ( CollectionUI ) : [EOL] modelui_class = ReferenceDataKeyModelUI [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedatakey.modelui.ReferenceDataKeyModelUI]$ 0 0 0 0
from . . app import App [EOL] from . model import ReferenceDataKeyCollection , ReferenceDataKeyModel [EOL] [EOL] [comment] [EOL] from . modelui import ReferenceDataKeyCollectionUI , ReferenceDataKeyModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ReferenceDataKeySchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ReferenceDataKeySchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ReferenceDataKeySchema , [string] : ReferenceDataKeyCollection , [string] : get_collection , [string] : ReferenceDataKeyModel , [string] : get_model , [string] : ReferenceDataKeyCollectionUI , [string] : ReferenceDataKeyModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] from . schema import ObjectPermissionAssignmentSchema [EOL] [comment] [EOL] from . modelui import ObjectPermissionAssignmentModelUI , ObjectPermissionAssignmentCollectionUI [EOL] [comment] [EOL] [EOL] class ObjectPermissionAssignmentModel ( morpfw . Model ) : [EOL] schema = ObjectPermissionAssignmentSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ObjectPermissionAssignmentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [comment] [EOL] [EOL] [EOL] class ObjectPermissionAssignmentCollection ( morpfw . Collection ) : [EOL] schema = ObjectPermissionAssignmentSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ObjectPermissionAssignmentCollectionUI ( self . request , self ) [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.objectpermissionassignment.schema.ObjectPermissionAssignmentSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.objectpermissionassignment.schema.ObjectPermissionAssignmentSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import rulez [EOL] from morpcc . crud . model import ModelUI [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . . permission import ManagePermission [EOL] from . model import ObjectPermissionAssignmentCollection , ObjectPermissionAssignmentModel [EOL] [EOL] [comment] [EOL] from . modelui import ( ObjectPermissionAssignmentCollectionUI , ObjectPermissionAssignmentModelUI , ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . html ( model = ModelUI , name = [string] , template = [string] , permission = ManagePermission , ) def manage_permission ( context , request ) : [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class ObjectPermissionAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ObjectPermissionAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = ObjectPermissionAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.objectpermissionassignment.modelui.ObjectPermissionAssignmentModelUI]$ 0 0 0
from . . app import App [EOL] from . model import ObjectPermissionAssignmentCollection , ObjectPermissionAssignmentModel [EOL] [EOL] [comment] [EOL] from . modelui import ( ObjectPermissionAssignmentCollectionUI , ObjectPermissionAssignmentModelUI , ) [EOL] from . path import get_collection , get_model [EOL] from . schema import ObjectPermissionAssignmentSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ObjectPermissionAssignmentSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ObjectPermissionAssignmentSchema , [string] : ObjectPermissionAssignmentCollection , [string] : get_collection , [string] : ObjectPermissionAssignmentModel , [string] : get_model , [string] : ObjectPermissionAssignmentCollectionUI , [string] : ObjectPermissionAssignmentModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import deform . widget [EOL] import morpfw [EOL] [EOL] from . . permissionassignment . schema import ( group_select_widget , permission_select_widget , roles_select_widget , user_select_widget , ) [EOL] [EOL] [EOL] @ dataclass class ObjectPermissionAssignmentSchema ( morpfw . Schema ) : [EOL] [EOL] object_uuid = field ( default = None , metadata = { [string] : [string] , [string] : True } ) [EOL] permission = field ( default = None , metadata = { [string] : [string] , [string] : permission_select_widget , } , ) [EOL] [EOL] roles = field ( default_factory = list , metadata = { [string] : roles_select_widget } ) [EOL] [EOL] rule = field ( default = [string] , metadata = { [string] : True , [string] : deform . widget . SelectWidget ( values = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) , } , ) [EOL] [EOL] enabled = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.list]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0
	0
from typing import List , Any , Dict [EOL] import typing [EOL] from . . app import App [EOL] from . model import ReferenceDataPropertyModel [EOL] [EOL] [EOL] @ App . structure_column ( model = ReferenceDataPropertyModel , name = [string] ) def get_buttons_column ( model , request , name ) : [EOL] uiobj = model . ui ( ) [EOL] buttons = [ { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : request . link ( uiobj , [string] ) , [string] : [string] , [string] : [string] , } , ] [EOL] [EOL] render = request . app . get_template ( [string] ) [EOL] return render ( { [string] : buttons } , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import ReferenceDataPropertyCollection , ReferenceDataPropertyModel [EOL] [EOL] [comment] [EOL] from . modelui import ReferenceDataPropertyCollectionUI , ReferenceDataPropertyModelUI [EOL] [EOL] [comment] [EOL] from . storage import ReferenceDataPropertyStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = ReferenceDataPropertyStorage ( request ) [EOL] return ReferenceDataPropertyCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = ReferenceDataPropertyCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = ReferenceDataPropertyModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = ReferenceDataPropertyCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = ReferenceDataPropertyModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class ReferenceDataPropertyModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ReferenceDataPropertyCollectionUI ( CollectionUI ) : [EOL] modelui_class = ReferenceDataPropertyModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.referencedataproperty.modelui.ReferenceDataPropertyModelUI]$ 0 0 0
	0
from . . app import App [EOL] from . model import ReferenceDataPropertyCollection , ReferenceDataPropertyModel [EOL] [EOL] [comment] [EOL] from . modelui import ReferenceDataPropertyCollectionUI , ReferenceDataPropertyModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ReferenceDataPropertySchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ReferenceDataPropertySchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ReferenceDataPropertySchema , [string] : ReferenceDataPropertyCollection , [string] : get_collection , [string] : ReferenceDataPropertyModel , [string] : get_model , [string] : ReferenceDataPropertyCollectionUI , [string] : ReferenceDataPropertyModelUI , [string] : True , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from deform . widget import SelectWidget [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] [EOL] PROPERTY_TYPES = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [EOL] def valid_property_types ( request , schema , field , value , mode = None ) : [EOL] if value not in [ k for k , v in PROPERTY_TYPES ] : [EOL] return [string] . format ( value ) [EOL] [EOL] [EOL] @ dataclass class ReferenceDataPropertySchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : [ valid_property_types ] , [string] : SelectWidget ( values = PROPERTY_TYPES ) , } , ) [EOL] value = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] referencedatakey_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : False , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import IndexCollection , IndexModel [EOL] [EOL] [comment] [EOL] from . modelui import IndexCollectionUI , IndexModelUI [EOL] [EOL] [comment] [EOL] from . storage import IndexStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = IndexStorage ( request ) [EOL] return IndexCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = IndexCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = IndexModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = IndexCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = IndexModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import morpcc [EOL] import builtins [EOL] import model [EOL] import typing [EOL] import json [EOL] import os [EOL] import pprint [EOL] import tempfile [EOL] import typing [EOL] [EOL] import morpfw . crud . storage . sqlstorage [EOL] import rulez [EOL] import sqlalchemy [EOL] import sqlalchemy_jsonfield . jsonfield [EOL] import sqlalchemy_utils . types [EOL] from alembic import command [EOL] from alembic . autogenerate . api import ( AutogenContext , compare_metadata , produce_migrations , render , ) [EOL] from alembic . autogenerate . compare import comparators [EOL] from alembic . config import Config [EOL] from alembic . migration import MigrationContext [EOL] from alembic . operations import Operations [EOL] from alembic . operations . ops import UpgradeOps [EOL] from inverter import dc2pgsqla [EOL] from RestrictedPython import compile_restricted , safe_globals [EOL] from sqlalchemy import MetaData , create_engine [EOL] from sqlalchemy . schema import CreateSchema [EOL] [EOL] from . model import IndexCollection [EOL] [EOL] [EOL] def render_python_code ( up_or_down_op , sqlalchemy_module_prefix = [string] , alembic_module_prefix = [string] , render_as_batch = False , imports = ( ) , render_item = None , ) : [EOL] [docstring] [EOL] opts = { [string] : sqlalchemy_module_prefix , [string] : alembic_module_prefix , [string] : None , [string] : render_item , [string] : render_as_batch , } [EOL] [EOL] autogen_context = AutogenContext ( None , opts = opts ) [EOL] autogen_context . imports = set ( imports ) [EOL] return render . _indent ( render . _render_cmd_body ( up_or_down_op , autogen_context ) ) [EOL] [EOL] [EOL] def _get_migrate_function ( code ) : [EOL] byte_code = compile_restricted ( code , filename = [string] , mode = [string] ) [EOL] glob = safe_globals . copy ( ) [EOL] glob . update ( { [string] : sqlalchemy , [string] : sqlalchemy_jsonfield , [string] : morpfw , [string] : sqlalchemy_utils , } ) [EOL] loc = { } [EOL] exec ( byte_code , glob , loc ) [EOL] return loc [ [string] ] [EOL] [EOL] [EOL] class IndexDatabaseSyncAdapter ( object ) : [EOL] def __init__ ( self , context , request ) : [EOL] self . context = context [EOL] self . request = request [EOL] self . session = self . request . get_db_session ( [string] ) [EOL] self . engine = create_engine ( self . session . bind . url ) [EOL] [EOL] self . content_metadata = context . content_metadata ( ) [EOL] [EOL] with self . engine . connect ( ) as conn : [EOL] [comment] [EOL] migration_context = MigrationContext . configure ( conn , opts = { [string] : False } ) [EOL] self . upgrade_steps = self . get_upgrade_steps ( migration_context ) [EOL] if len ( self . upgrade_steps . ops ) : [EOL] self . need_update = True [EOL] else : [EOL] self . need_update = False [EOL] self . migration_code = self . get_migration_code ( ) [EOL] [EOL] def get_upgrade_steps ( self , migration_context ) : [EOL] content_metadata = self . context . content_metadata ( ) [EOL] content_metadata . clear ( ) [EOL] idx_dc = self . context . dataclass ( ) [EOL] tbl = dc2pgsqla . convert ( idx_dc , content_metadata ) [EOL] upgrade_ops = UpgradeOps ( [ ] ) [EOL] autogen_context = AutogenContext ( migration_context , content_metadata ) [EOL] schemas = [ content_metadata . schema ] [EOL] comparators . dispatch ( [string] , autogen_context . dialect . name ) ( autogen_context , upgrade_ops , schemas ) [EOL] return upgrade_ops [EOL] [EOL] def get_migration_code ( self ) : [EOL] ops = self . upgrade_steps [EOL] mcode = render_python_code ( ops ) [EOL] code = [string] [EOL] for l in mcode . split ( [string] ) : [EOL] if not l . strip ( ) . startswith ( [string] ) : [EOL] code += l + [string] [EOL] code = [string] . format ( code ) [EOL] [EOL] return code [EOL] [EOL] def update ( self ) : [EOL] code = self . migration_code [EOL] migrate = _get_migrate_function ( code ) [EOL] schema_name = self . context . content_metadata ( ) . schema [EOL] [EOL] with self . engine . connect ( ) as conn : [EOL] migration_context = MigrationContext . configure ( conn , opts = { [string] : False } ) [EOL] op = Operations ( migration_context ) [EOL] if not self . engine . dialect . has_schema ( self . engine , schema_name ) : [EOL] conn . execute ( CreateSchema ( schema_name ) ) [EOL] migrate ( op ) [EOL] [EOL] def list_update_actions ( self ) : [EOL] return self . upgrade_steps . as_diffs ( ) [EOL] [EOL] def close ( self ) : [EOL] migration_context = MigrationContext . configure ( conn , opts = { [string] : False } ) [EOL] self . conn . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from deform . widget import SelectWidget , TextAreaWidget [EOL] from morpcc . deform . referencewidget import ReferenceWidget [EOL] [EOL] [EOL] @ dataclass class IndexSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False } ) [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] type = field ( default = None , metadata = { [string] : True , [string] : False , [string] : SelectWidget ( values = [ ( [string] , [string] ) , ( [string] , [string] ) , ] ) , } , ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import string [EOL] [EOL] import nltk [EOL] import rulez [EOL] from morpfw . crud . searchprovider . base import SearchProvider [EOL] [EOL] from . . app import App [EOL] from . . entity . path import get_collection as get_dm_collection [EOL] from . model import IndexContentCollection [EOL] [EOL] [EOL] [EOL] class IndexSearchProvider ( SearchProvider ) : [EOL] def parse_query ( self , qs ) : [EOL] if qs is None : [EOL] return None [EOL] if not qs . strip ( ) : [EOL] return None [EOL] [EOL] query = qs . translate ( str . maketrans ( [string] , [string] , string . punctuation ) ) . lower ( ) [EOL] [EOL] if not query . strip ( ) : [EOL] return None [EOL] [EOL] query = [string] . join ( nltk . word_tokenize ( query ) ) [EOL] return { [string] : [string] , [string] : [string] , [string] : query } [EOL] [EOL] def search ( self , query = None , offset = [number] , limit = None , order_by = None ) : [EOL] idxcol = self . context [EOL] lorder_by = [ ] [EOL] order_by = order_by or [ ] [EOL] indexes = [ idx [ [string] ] for idx in idxcol . __parent__ . search ( ) ] [EOL] for ob in order_by : [EOL] if ob [ [number] ] in indexes : [EOL] lorder_by . append ( ob ) [EOL] if not lorder_by : [EOL] lorder_by = None [EOL] return idxcol . search ( query , offset , limit , order_by = lorder_by ) [EOL] [EOL] [EOL] @ App . searchprovider ( model = IndexContentCollection ) def get_searchprovider ( context ) : [EOL] return IndexSearchProvider ( context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class IndexModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class IndexCollectionUI ( CollectionUI ) : [EOL] modelui_class = IndexModelUI [EOL] [EOL] [EOL] class IndexContentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class IndexContentCollectionUI ( CollectionUI ) : [EOL] modelui_class = IndexContentModelUI [EOL] [EOL] @ property def columns ( self ) : [EOL] columns = [ ] [EOL] [EOL] for n , attr in self . collection . __parent__ . attributes ( ) . items ( ) : [EOL] columns . append ( { [string] : attr [ [string] ] , [string] : n } ) [EOL] columns . append ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] return columns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.modelui.IndexModelUI]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.modelui.IndexContentModelUI]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from . . app import App [EOL] from . model import IndexCollection , IndexModel [EOL] [EOL] [comment] [EOL] from . modelui import IndexCollectionUI , IndexModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import IndexSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = IndexSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : IndexSchema , [string] : IndexCollection , [string] : get_collection , [string] : IndexModel , [string] : get_model , [string] : IndexCollectionUI , [string] : IndexModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Collection , List , Type , Optional , Any , Tuple , Dict [EOL] import morpcc [EOL] import typing [EOL] import typing [EOL] from dataclasses import field , make_dataclass [EOL] [EOL] import morpfw [EOL] from morpfw . crud . storage . pgsqlstorage import PgSQLStorage [EOL] from sqlalchemy import MetaData [EOL] [EOL] from . modelui import ( IndexCollectionUI , IndexContentCollectionUI , IndexContentModelUI , IndexModelUI , ) [EOL] from . schema import IndexSchema [EOL] [EOL] [EOL] class IndexContentModel ( morpfw . Model ) : [EOL] def ui ( self ) : [EOL] return IndexContentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] def json ( self ) : [EOL] idxcol = self . collection . __parent__ [EOL] res = { } [EOL] for idx in idxcol . index_attrs ( ) : [EOL] res [ idx [ [number] ] ] = self [ idx [ [number] ] ] [EOL] return res [EOL] [EOL] def get_object ( self ) : [EOL] resolver = self [ [string] ] [EOL] if not resolver : [EOL] raise ValueError ( [string] ) [EOL] [EOL] resolve = self . request . app . get_index_resolver ( resolver ) [EOL] [EOL] return resolve ( self , self . request ) [EOL] [EOL] [EOL] class IndexContentCollection ( morpfw . Collection ) : [EOL] pass [EOL] [EOL] [EOL] class IndexModel ( morpfw . Model ) : [EOL] schema = IndexSchema [EOL] [EOL] def ui ( self ) : [EOL] return IndexModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] class IndexCollection ( morpfw . Collection ) : [EOL] schema = IndexSchema [EOL] [EOL] def ui ( self ) : [EOL] return IndexCollectionUI ( self . request , self ) [EOL] [EOL] def content_metadata ( self ) : [EOL] return MetaData ( schema = [string] ) [EOL] [EOL] def content_collection ( self ) : [EOL] class Model ( IndexContentModel ) : [EOL] schema = self . dataclass ( ) [EOL] [EOL] __path_model__ = IndexContentModel [EOL] [EOL] class Collection ( IndexContentCollection ) : [EOL] schema = self . dataclass ( ) [EOL] [EOL] __path_model__ = IndexContentCollection [EOL] [EOL] def __init__ ( self , parent , * args , ** kwargs ) : [EOL] self . __parent__ = parent [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] class Storage ( PgSQLStorage ) : [EOL] model = Model [EOL] [EOL] @ property def session ( self ) : [EOL] return self . request . get_db_session ( [string] ) [EOL] [EOL] return Collection ( self , self . request , storage = Storage ( self . request , metadata = self . content_metadata ( ) ) , ) [EOL] [EOL] def index_attrs ( self ) : [EOL] attrs = [ ( [string] , typing . Optional [ str ] , field ( default = None ) ) , ( [string] , typing . Optional [ str ] , field ( default = None ) ) , ( [string] , typing . Optional [ str ] , field ( default = None ) ) , ( [string] , typing . Optional [ str ] , field ( default = None , metadata = { [string] : [string] , [string] : True } ) , ) , ( [string] , typing . Optional [ str ] , field ( default = None , metadata = { [string] : [string] , [string] : True } ) , ) , ( [string] , typing . Optional [ str ] , field ( default = None , metadata = { [string] : [string] , [string] : True } ) , ) , ( [string] , typing . Optional [ str ] , field ( default = None , metadata = { [string] : [string] , [string] : True } ) , ) , ] [EOL] [EOL] for idx in self . search ( ) : [EOL] metadata = { [string] : True } [EOL] if idx [ [string] ] == [string] : [EOL] metadata [ [string] ] = [string] [EOL] [EOL] attrs . append ( ( idx [ [string] ] , typing . Optional [ str ] , field ( default = None , metadata = metadata ) , ) ) [EOL] [EOL] return attrs [EOL] [EOL] def dataclass ( self ) : [EOL] attrs = self . index_attrs ( ) [EOL] return make_dataclass ( [string] , attrs , bases = ( morpfw . Schema , ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.schema.IndexSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.schema.IndexSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.model.IndexCollection.content_collection.Collection]$ 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.model.IndexContentCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.index.model.IndexCollection.content_collection.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[typing.Optional[builtins.str]],None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[typing.Optional[builtins.str]],None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[typing.Optional[builtins.str]],None]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] from morpcc import permission as mccperm [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] from pygments import highlight [EOL] from pygments . formatters import HtmlFormatter [EOL] from pygments . lexers import PythonLexer [EOL] [EOL] from . . app import App [EOL] from . . root import Root [EOL] from . adapter import IndexDatabaseSyncAdapter [EOL] from . model import IndexCollectionUI [EOL] from . path import get_collection [EOL] [EOL] [EOL] @ App . html ( model = IndexCollectionUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def schema_upgrade ( context , request ) : [EOL] dbsync = IndexDatabaseSyncAdapter ( context . collection , request ) [EOL] if not dbsync . need_update : [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] code = dbsync . migration_code [EOL] formatter = HtmlFormatter ( ) [EOL] highlighted = highlight ( code , PythonLexer ( ) , formatter ) [EOL] return { [string] : dbsync . need_update , [string] : code , [string] : highlighted , [string] : formatter . get_style_defs ( [string] ) , } [EOL] [EOL] [EOL] @ App . view ( model = IndexCollectionUI , name = [string] , permission = crudperm . Edit , request_method = [string] , ) def process_schema_upgrade ( context , request ) : [EOL] run = request . POST . get ( [string] , [string] ) . lower ( ) [EOL] if run != [string] : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] dbsync = IndexDatabaseSyncAdapter ( context . collection , request ) [EOL] if dbsync . need_update : [EOL] dbsync . update ( ) [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] [EOL] [EOL] def _search ( context , request ) : [EOL] col = get_collection ( request ) . content_collection ( ) [EOL] prov = col . searchprovider ( ) [EOL] search = prov . parse_query ( request . GET . get ( [string] , None ) ) [EOL] res = [ ] [EOL] if search is None : [EOL] return { [string] : [ ] , [string] : [number] } [EOL] for entry in prov . search ( search , limit = [number] ) : [EOL] obj = entry . get_object ( ) [EOL] if obj is None : [EOL] continue [EOL] uiobj = obj . ui ( ) [EOL] preview = request . app . render_view ( uiobj , request , [string] ) [EOL] if preview is None : [EOL] continue [EOL] r = { [string] : entry [ [string] ] , [string] : entry [ [string] ] , [string] : preview . body . decode ( [string] ) , [string] : request . link ( uiobj ) , } [EOL] res . append ( r ) [EOL] return { [string] : res , [string] : len ( res ) } [EOL] [EOL] [EOL] @ App . json ( model = Root , name = [string] , permission = mccperm . SiteSearch , ) def search_json ( context , request ) : [EOL] return _search ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = Root , name = [string] , template = [string] , permission = mccperm . SiteSearch , ) def search ( context , request ) : [EOL] return { [string] : request . link ( context , [string] . format ( request . query_string ) ) } [EOL] [EOL] [EOL] @ App . html ( model = IndexCollectionUI , name = [string] , permission = crudperm . View , template = [string] , ) def listing ( context , request ) : [EOL] result = default_listing ( context , request ) [EOL] dbsync = IndexDatabaseSyncAdapter ( context . collection , request ) [EOL] result [ [string] ] = dbsync . need_update [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import morepath [EOL] import typing [EOL] import morepath [EOL] from morpfw . authn . pas . path import get_user_collection [EOL] [EOL] from . . app import App [EOL] [EOL] EXCLUDE_PREFIXES = [ [string] ] [EOL] EXCLUDE_PATHS = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ App . tween_factory ( ) def make_tween ( app , handler ) : [EOL] verify_email = app . get_config ( [string] , False ) [EOL] if not verify_email : [EOL] return handler [EOL] [EOL] def redirect_to_firstlogin ( request ) : [EOL] for path in EXCLUDE_PREFIXES : [EOL] if request . path . startswith ( path ) : [EOL] return handler ( request ) [EOL] [EOL] for path in EXCLUDE_PATHS : [EOL] if request . path == path : [EOL] return handler ( request ) [EOL] [EOL] userid = request . identity . userid [EOL] if userid : [EOL] col = get_user_collection ( request ) [EOL] userobj = col . get_by_userid ( userid ) [EOL] if userobj [ [string] ] == [string] and not request . path . startswith ( [string] ) : [EOL] resp = morepath . redirect ( request . relative_url ( [string] ) ) [EOL] resp . headers [ [string] ] = [string] [EOL] return resp [EOL] return handler ( request ) [EOL] [EOL] return redirect_to_firstlogin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class SchemaModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class SchemaCollectionUI ( CollectionUI ) : [EOL] modelui_class = SchemaModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.schema.modelui.SchemaModelUI]$ 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . modelui import SchemaModelUI [EOL] [EOL] [EOL] @ App . html ( model = SchemaModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def edit ( context , request ) : [EOL] return default_edit ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import SchemaCollection , SchemaModel [EOL] [comment] [EOL] from . modelui import SchemaCollectionUI , SchemaModelUI [EOL] [comment] [EOL] from . storage import SchemaStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = SchemaStorage ( request ) [EOL] return SchemaCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = SchemaCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = SchemaModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [EOL] @ App . path ( model = SchemaCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] @ App . path ( model = SchemaModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import SchemaCollection , SchemaModel [EOL] [EOL] [comment] [EOL] from . modelui import SchemaCollectionUI , SchemaModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import SchemaSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = SchemaSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : SchemaSchema , [string] : SchemaCollection , [string] : get_collection , [string] : SchemaModel , [string] : get_model , [string] : SchemaCollectionUI , [string] : SchemaModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] [EOL] [EOL] @ dataclass class SchemaSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : True } ) [EOL] title = None [EOL] description = None [EOL] [EOL] __unique_constraint__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import SchemaCollectionUI , SchemaModelUI [EOL] from . schema import SchemaSchema [EOL] [EOL] [EOL] class SchemaModel ( morpfw . Model ) : [EOL] schema = SchemaSchema [EOL] [EOL] def ui ( self ) : [EOL] return SchemaModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def entities ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] [EOL] [EOL] class SchemaCollection ( morpfw . Collection ) : [EOL] schema = SchemaSchema [EOL] [EOL] def ui ( self ) : [EOL] return SchemaCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.schema.schema.SchemaSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.schema.schema.SchemaSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class ActivityLogModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ActivityLogCollectionUI ( CollectionUI ) : [EOL] modelui_class = ActivityLogModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.activitylog.modelui.ActivityLogModelUI]$ 0 0 0
from morpfw . crud import permission as crudperm [EOL] from . . app import App [EOL] from . model import ActivityLogModel , ActivityLogCollection [EOL] from . modelui import ActivityLogModelUI , ActivityLogCollectionUI [EOL] [EOL] [EOL] @ App . permission_rule ( model = ActivityLogCollection , permission = crudperm . All ) def allow_collection_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] @ App . permission_rule ( model = ActivityLogModel , permission = crudperm . All ) def allow_model_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] [comment] [EOL] [EOL] @ App . permission_rule ( model = ActivityLogCollectionUI , permission = crudperm . All ) def allow_collection_ui_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] @ App . permission_rule ( model = ActivityLogModelUI , permission = crudperm . All ) def allow_model_ui_access ( identity , model , permission ) : [EOL] return True [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import ActivityLogModel , ActivityLogCollection [EOL] [comment] [EOL] from . modelui import ActivityLogModelUI , ActivityLogCollectionUI [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] [EOL] [EOL] @ dataclass class ActivityLogSchema ( morpfw . Schema ) : [EOL] [EOL] userid = field ( default = None , metadata = { [string] : [string] , [string] : ReferenceWidget ( [string] , term_field = [string] , value_field = [string] ) , } , ) [EOL] source_ip = None [EOL] resource_type = None [EOL] resource_uuid = field ( default = None , metadata = { [string] : [string] } ) [EOL] view_name = None [EOL] activity = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
from . . app import App [EOL] from . model import ActivityLogCollection , ActivityLogModel [EOL] [EOL] [comment] [EOL] from . modelui import ActivityLogCollectionUI , ActivityLogModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ActivityLogSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ActivityLogSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ActivityLogSchema , [string] : ActivityLogCollection , [string] : get_collection , [string] : ActivityLogModel , [string] : get_model , [string] : ActivityLogCollectionUI , [string] : ActivityLogModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import ActivityLogModel , ActivityLogCollection [EOL] [comment] [EOL] from . modelui import ActivityLogModelUI , ActivityLogCollectionUI [EOL] [comment] [EOL] from . storage import ActivityLogStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = ActivityLogStorage ( request ) [EOL] return ActivityLogCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = ActivityLogCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = ActivityLogModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = ActivityLogCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = ActivityLogModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] from morpcc . authn import Identity [EOL] [EOL] from . . entitycontent . model import EntityContentModel [EOL] from . modelui import ActivityLogCollectionUI , ActivityLogModelUI [EOL] from . schema import ActivityLogSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ActivityLogModel ( morpfw . Model ) : [EOL] schema = ActivityLogSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ActivityLogModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ActivityLogCollection ( morpfw . Collection ) : [EOL] schema = ActivityLogSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return ActivityLogCollectionUI ( self . request , self ) [EOL] [EOL] [comment] [EOL] [EOL] def log ( self , context , activity ) : [EOL] if isinstance ( context , ActivityLogModel ) : [EOL] return [EOL] request = self . request [EOL] if isinstance ( request . identity , Identity ) : [EOL] userid = request . identity . userid [EOL] else : [EOL] userid = None [EOL] if isinstance ( context , EntityContentModel ) : [EOL] app = context . application ( ) [EOL] entity = context . entity ( ) [EOL] type_name = [string] % ( app . uuid , app [ [string] ] , entity [ [string] ] , ) [EOL] else : [EOL] type_name = request . app . get_typeinfo_by_schema ( context . schema , request = request ) [ [string] ] [EOL] view_name = getattr ( request , [string] , None ) [EOL] self . create ( { [string] : userid , [string] : context . uuid , [string] : type_name , [string] : view_name , [string] : activity , [string] : request . client_addr , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.activitylog.schema.ActivityLogSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.activitylog.schema.ActivityLogSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import morepath [EOL] from morpfw . crud import model , signals [EOL] [EOL] from . . app import App [EOL] from . model import ActivityLogModel [EOL] [EOL] [EOL] @ App . subscribe ( signal = signals . OBJECT_CREATED , model = model . Model ) def log_create ( app , request , obj , signal ) : [EOL] log = request . get_collection ( [string] ) [EOL] log . log ( obj , [string] ) [EOL] [EOL] [EOL] @ App . subscribe ( signal = signals . OBJECT_UPDATED , model = model . Model ) def log_updated ( app , request , obj , signal ) : [EOL] log = request . get_collection ( [string] ) [EOL] log . log ( obj , [string] ) [EOL] [EOL] [EOL] @ App . subscribe ( signal = signals . OBJECT_TOBEDELETED , model = model . Model ) def log_deleted ( app , request , obj , signal ) : [EOL] log = request . get_collection ( [string] ) [EOL] log . log ( obj , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] import six [EOL] [EOL] from RestrictedPython import compile_restricted [EOL] from RestrictedPython import safe_builtins as orig_safe_builtins [EOL] from RestrictedPython import safe_globals as orig_safe_globals [EOL] from RestrictedPython . Eval import default_guarded_getitem , default_guarded_getiter [EOL] from RestrictedPython . Guards import ( full_write_guard , guarded_iter_unpack_sequence , safer_getattr , ) [EOL] from RestrictedPython . PrintCollector import PrintCollector [EOL] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def default_inplacevar ( op , x , y ) : [EOL] if op == [string] : [EOL] return x + y [EOL] raise Exception ( [string] . format ( op ) ) [EOL] [EOL] [EOL] if six . PY3 : [EOL] import_default_level = [number] [EOL] else : [EOL] import_default_level = - [number] [EOL] [EOL] [EOL] class RestrictedImportError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ImportGuard ( object ) : [EOL] def __init__ ( self , app ) : [EOL] self . app = app [EOL] [EOL] def __call__ ( self , name , globals = None , locals = None , fromlist = None , level = import_default_level ) : [EOL] if self . app is None : [EOL] raise RestrictedImportError ( [string] ) [EOL] [EOL] if fromlist is None : [EOL] fromlist = ( ) [EOL] if globals is None : [EOL] globals = { } [EOL] if locals is None : [EOL] locals = { } [EOL] [EOL] if level != import_default_level : [EOL] raise RestrictedImportError ( [string] % name ) [EOL] [EOL] return self . app . get_restricted_module ( name ) [EOL] [EOL] [EOL] class Print ( PrintCollector ) : [EOL] def _call_print ( self , * objects , ** kwargs ) : [EOL] log . info ( [string] . join ( objects ) ) [EOL] [EOL] [EOL] safe_builtins = orig_safe_builtins . copy ( ) [EOL] safe_globals = orig_safe_globals . copy ( ) [EOL] safe_globals [ [string] ] = dir [EOL] safe_globals [ [string] ] = default_guarded_getiter [EOL] safe_globals [ [string] ] = default_guarded_getitem [EOL] safe_globals [ [string] ] = guarded_iter_unpack_sequence [EOL] safe_globals [ [string] ] = full_write_guard [EOL] safe_globals [ [string] ] = default_inplacevar [EOL] safe_globals [ [string] ] = safe_builtins [EOL] safe_globals [ [string] ] = safer_getattr [EOL] safe_globals [ [string] ] = enumerate [EOL] safe_globals [ [string] ] = log [EOL] [EOL] [EOL] def get_restricted_function ( app , bytecode , name , local_vars = None ) : [EOL] local_vars = local_vars or { } [EOL] glob = safe_globals . copy ( ) [EOL] glob [ [string] ] [ [string] ] = ImportGuard ( app ) [EOL] exec ( bytecode , glob , local_vars ) [EOL] func = local_vars [ name ] [EOL] del local_vars [ name ] [EOL] func . __globals__ . update ( local_vars ) [EOL] return func [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.tuple$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.tuple$ 0 0 0 0 $typing.tuple$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . compiler import get_restricted_function [EOL]	0 0 0 0 0 0
import datetime [EOL] import time [EOL] [EOL] from . . app import App [EOL] [EOL] [EOL] @ App . restricted_module ( [string] ) def get_datetime ( name ) : [EOL] return datetime [EOL] [EOL] [EOL] @ App . restricted_module ( [string] ) def get_time ( name ) : [EOL] return time [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import ( ApplicationBehaviorAssignmentCollection , ApplicationBehaviorAssignmentModel , ) [EOL] [EOL] [comment] [EOL] from . modelui import ( ApplicationBehaviorAssignmentCollectionUI , ApplicationBehaviorAssignmentModelUI , ) [EOL] [EOL] [comment] [EOL] from . storage import ApplicationBehaviorAssignmentStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = ApplicationBehaviorAssignmentStorage ( request ) [EOL] return ApplicationBehaviorAssignmentCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = ApplicationBehaviorAssignmentCollection , path = [string] , ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = ApplicationBehaviorAssignmentModel , path = [string] , ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = ApplicationBehaviorAssignmentCollectionUI , path = [string] , ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = ApplicationBehaviorAssignmentModelUI , path = [string] , ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class ApplicationBehaviorAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class ApplicationBehaviorAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = ApplicationBehaviorAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.applicationbehaviorassignment.modelui.ApplicationBehaviorAssignmentModelUI]$ 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import ApplicationBehaviorAssignmentModel [EOL] [EOL] [EOL] class ApplicationBehaviorAssignment ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] behavior = sa . Column ( sa . String ( length = [number] ) ) [EOL] application_uuid = sa . Column ( morpfw . sql . GUID ( ) , index = True ) [EOL] [EOL] [EOL] class ApplicationBehaviorAssignmentStorage ( morpfw . SQLStorage ) : [EOL] model = ApplicationBehaviorAssignmentModel [EOL] orm_model = ApplicationBehaviorAssignment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.applicationbehaviorassignment.storage.ApplicationBehaviorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.applicationbehaviorassignment.storage.ApplicationBehaviorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.applicationbehaviorassignment.storage.ApplicationBehaviorAssignmentStorage]$ 0 0 0 $typing.Type[morpcc.applicationbehaviorassignment.storage.ApplicationBehaviorAssignment]$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import rulez [EOL] [EOL] [EOL] class ReferenceValidator ( object ) : [EOL] def __init__ ( self , resource_type , attribute ) : [EOL] self . resource_type = resource_type [EOL] self . attribute = attribute [EOL] [EOL] def __call__ ( self , request , schema , field , value , mode = None ) : [EOL] resource = self . get_resource ( request , value ) [EOL] if not resource : [EOL] return [string] . format ( value ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] typeinfo = request . app . config . type_registry . get_typeinfo ( name = self . resource_type , request = request ) [EOL] if not ( identifier or [string] ) . strip ( ) : [EOL] return None [EOL] col = typeinfo [ [string] ] ( request ) [EOL] models = col . search ( rulez . field [ self . attribute ] == identifier ) [EOL] if models : [EOL] return models [ [number] ] [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Pattern [EOL] import typing [EOL] import re [EOL] [EOL] valid_refdatakey_pattern = re . compile ( [string] ) [EOL] [EOL] [EOL] def valid_refdatakey ( request , schema , field , value , mode = None ) : [EOL] if not valid_refdatakey_pattern . match ( value ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] class VocabularyValidator ( object ) : [EOL] def __init__ ( self , vocabulary ) : [EOL] self . vocabulary = vocabulary [EOL] [EOL] def __call__ ( self , request , schema , field , value , mode = None ) : [EOL] vocab = request . app . get_vocabulary ( request = request , name = self . vocabulary ) [EOL] if vocab is None : [EOL] return [string] . format ( self . vocabulary ) [EOL] [EOL] found = False [EOL] for v in vocab : [EOL] if v [ [string] ] == value : [EOL] found = True [EOL] break [EOL] [EOL] if not found : [EOL] return [string] . format ( value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] [EOL] import rulez [EOL] [EOL] [EOL] class ReferenceDataValidator ( object ) : [EOL] def __init__ ( self , referencedata_name , referencedata_property ) : [EOL] self . referencedata_name = referencedata_name [EOL] self . referencedata_property = referencedata_property [EOL] [EOL] def __call__ ( self , request , schema , field , value , mode = None ) : [EOL] resource = self . get_resource ( request , value ) [EOL] if not resource : [EOL] return [string] . format ( value ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] col = request . get_collection ( [string] ) [EOL] refdatas = col . search ( rulez . field [ [string] ] == self . referencedata_name ) [EOL] if not refdatas : [EOL] return None [EOL] refdata = refdatas [ [number] ] [EOL] [EOL] keycol = request . get_collection ( [string] ) [EOL] keys = keycol . search ( rulez . and_ ( rulez . field [ [string] ] == refdata . uuid , rulez . field [ [string] ] == identifier , ) ) [EOL] if not keys : [EOL] return None [EOL] return keys [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import rulez [EOL] from colander import Invalid , null [EOL] from deform . compat import string_types [EOL] from deform . widget import SelectWidget , Widget [EOL] [EOL] [EOL] class EntityContentReferenceWidget ( SelectWidget ) : [EOL] template = [string] [EOL] readonly_template = [string] [EOL] null_value = [string] [EOL] values = ( ) [EOL] multiple = False [EOL] [EOL] def __init__ ( self , application_uuid , entity_uuid , term_field , value_field , ** kwargs ) : [EOL] self . application_uuid = application_uuid [EOL] self . entity_uuid = entity_uuid [EOL] self . term_field = term_field [EOL] self . value_field = value_field [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def get_resource_search_url ( self , context , request ) : [EOL] from . . entitycontent . path import get_content_collection [EOL] [EOL] col = get_content_collection ( request , self . application_uuid , self . entity_uuid ) . ui ( ) [EOL] baselink = request . link ( col , [string] ) [EOL] [EOL] return baselink + [string] % ( self . term_field , self . value_field , ) [EOL] [EOL] def get_resource_url ( self , request , identifier ) : [EOL] m = self . get_resource ( request , identifier ) [EOL] if not m : [EOL] return None [EOL] return request . link ( m ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] from . . entitycontent . path import get_content_collection [EOL] [EOL] col = get_content_collection ( request , self . application_uuid , self . entity_uuid ) . ui ( ) [EOL] res = col . search ( rulez . field [ self . value_field ] == identifier ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] def get_resource_term ( self , request , identifier ) : [EOL] m = self . get_resource ( request , identifier ) [EOL] if not m : [EOL] return None [EOL] return m . model [ self . term_field ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] import rulez [EOL] [EOL] [EOL] class EntityContentReferenceValidator ( object ) : [EOL] def __init__ ( self , application_uuid , entity_uuid , attribute ) : [EOL] self . application_uuid = application_uuid [EOL] self . entity_uuid = entity_uuid [EOL] self . attribute = attribute [EOL] [EOL] def __call__ ( self , request , schema , field , value , mode = None ) : [EOL] resource = self . get_resource ( request , value ) [EOL] if not resource : [EOL] return [string] . format ( value ) [EOL] [EOL] def get_resource ( self , request , identifier ) : [EOL] from . . entitycontent . path import get_content_collection [EOL] [EOL] col = get_content_collection ( request , self . application_uuid , self . entity_uuid ) [EOL] models = col . search ( rulez . field [ self . attribute ] == identifier ) [EOL] if models : [EOL] return models [ [number] ] [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $morpcc.entitycontent.model.EntityContentCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $morpcc.entitycontent.model.EntityContentCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import rulez [EOL] from morpfw . crud import permission as crudperms [EOL] [EOL] from . . app import App [EOL] from . modelui import RelationshipCollectionUI [EOL] [EOL] [EOL] def _attribute_search ( context , request ) : [EOL] [comment] [EOL] entity_resource_type = [string] [EOL] attribute_resource_type = [string] [EOL] schema_resource_type = [string] [EOL] [EOL] schema_uuid = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not schema_uuid : [EOL] return { } [EOL] [EOL] value_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not value_field : [EOL] return { } [EOL] [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term : [EOL] return { } [EOL] [EOL] attrcol = request . get_collection ( attribute_resource_type ) [EOL] dmcol = request . get_collection ( entity_resource_type ) [EOL] [EOL] term = term . split ( [string] ) [EOL] if len ( term ) == [number] : [EOL] term . append ( None ) [EOL] [EOL] dmterm = term [ [number] ] [EOL] attrterm = term [ [number] ] [EOL] [EOL] dms = dmcol . search ( query = rulez . and_ ( { [string] : [string] , [string] : [string] , [string] : dmterm } , rulez . field [ [string] ] == schema_uuid , ) ) [EOL] [EOL] attrs = [ ] [EOL] [EOL] for dm in dms : [EOL] query = rulez . field [ [string] ] == dm . uuid [EOL] if attrterm : [EOL] query = rulez . and_ ( query , { [string] : [string] , [string] : [string] , [string] : attrterm } ) [EOL] attrs += [ ( dm , attr ) for attr in attrcol . search ( query = query ) ] [EOL] [EOL] result = { [string] : [ ] } [EOL] for dm , attr in attrs : [EOL] text = [string] . format ( dm [ [string] ] , attr [ [string] ] ) [EOL] result [ [string] ] . append ( { [string] : attr [ value_field ] , [string] : text } ) [EOL] return result [EOL] [EOL] [EOL] @ App . json ( model = RelationshipCollectionUI , name = [string] , permission = crudperms . Search ) def attribute_search ( context , request ) : [EOL] return _attribute_search ( context , request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . . entitycontent . path import content_collection_factory [EOL] from . modelui import RelationshipCollectionUI , RelationshipModelUI [EOL] from . schema import RelationshipSchema [EOL] [EOL] [EOL] class RelationshipModel ( morpfw . Model ) : [EOL] schema = RelationshipSchema [EOL] [EOL] def ui ( self ) : [EOL] return RelationshipModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def reference_attribute ( self ) : [EOL] typeinfo = self . request . app . config . type_registry . get_typeinfo ( name = [string] , request = self . request ) [EOL] [EOL] col = typeinfo [ [string] ] ( self . request ) [EOL] attr = col . get ( self [ [string] ] ) [EOL] return attr [EOL] [EOL] @ morpfw . requestmemoize ( ) def reference_search_attribute ( self ) : [EOL] typeinfo = self . request . app . config . type_registry . get_typeinfo ( name = [string] , request = self . request ) [EOL] [EOL] col = typeinfo [ [string] ] ( self . request ) [EOL] attr = col . get ( self [ [string] ] ) [EOL] return attr [EOL] [EOL] @ morpfw . requestmemoize ( ) def datatype ( self ) : [EOL] refattr = self . reference_attribute ( ) [EOL] return refattr . datatype ( ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity ( self ) : [EOL] typeinfo = self . request . app . config . type_registry . get_typeinfo ( name = [string] , request = self . request ) [EOL] [EOL] col = typeinfo [ [string] ] ( self . request ) [EOL] dm = col . get ( self [ [string] ] ) [EOL] return dm [EOL] [EOL] @ morpfw . requestmemoize ( ) def reference_entity ( self ) : [EOL] return self . reference_attribute ( ) . entity ( ) [EOL] [EOL] [EOL] class RelationshipCollection ( morpfw . Collection ) : [EOL] schema = RelationshipSchema [EOL] [EOL] def ui ( self ) : [EOL] return RelationshipCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.relationship.schema.RelationshipSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.relationship.schema.RelationshipSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class RelationshipModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class RelationshipCollectionUI ( CollectionUI ) : [EOL] modelui_class = RelationshipModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.relationship.modelui.RelationshipModelUI]$ 0 0 0
	0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] [EOL] from . modelui import EndpointCollectionUI , EndpointModelUI [EOL] from . schema import EndpointSchema [EOL] [EOL] [EOL] class EndpointModel ( morpfw . Model ) : [EOL] schema = EndpointSchema [EOL] [EOL] def ui ( self ) : [EOL] return EndpointModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] class EndpointCollection ( morpfw . Collection ) : [EOL] schema = EndpointSchema [EOL] [EOL] def ui ( self ) : [EOL] return EndpointCollectionUI ( self . request , self ) [EOL] [EOL] [EOL] class NamedEndpointModel ( EndpointModel ) : [EOL] @ property def identifier ( self ) : [EOL] return self [ [string] ] [EOL] [EOL] [EOL] class NamedEndpointCollection ( EndpointCollection ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpoint.schema.EndpointSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpoint.schema.EndpointSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import rulez [EOL] [EOL] from . . app import App [EOL] from . model import ( EndpointCollection , EndpointModel , NamedEndpointCollection , NamedEndpointModel , ) [EOL] [EOL] [comment] [EOL] from . modelui import EndpointCollectionUI , EndpointModelUI [EOL] [EOL] [comment] [EOL] from . storage import EndpointStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = EndpointStorage ( request ) [EOL] return EndpointCollection ( request , storage ) [EOL] [EOL] [EOL] def get_named_collection ( request ) : [EOL] storage = EndpointStorage ( request ) [EOL] storage . model = NamedEndpointModel [EOL] return NamedEndpointCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] def get_named_model ( request , identifier ) : [EOL] col = get_named_collection ( request ) [EOL] items = col . search ( rulez . field [ [string] ] == identifier ) [EOL] if items : [EOL] return items [ [number] ] [EOL] return None [EOL] [EOL] [EOL] @ App . path ( model = EndpointCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = NamedEndpointCollection , path = [string] ) def _get_named_collection ( request ) : [EOL] return get_named_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = NamedEndpointModel , path = [string] ) def _get_named_model ( request , identifier ) : [EOL] return get_named_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from morpfw . validator . field import valid_namespaced_identifier [EOL] [EOL] from . . deform . codewidget import CodeWidget [EOL] from . . deform . richtextwidget import RichTextWidget [EOL] from . . preparer . html import HTMLSanitizer [EOL] [EOL] [EOL] @ dataclass class EndpointSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False , [string] : [ valid_namespaced_identifier ] , } , ) [EOL] [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] notes = field ( default = None , metadata = { [string] : [string] , [string] : [ HTMLSanitizer ( ) ] , [string] : RichTextWidget ( ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] import os [EOL] import traceback [EOL] [EOL] import rulez [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] from morpfw . crud . errors import ValidationError [EOL] from RestrictedPython import compile_restricted [EOL] from webob . exc import HTTPNotFound [EOL] [EOL] from . . app import App [EOL] from . . endpointhandler . schema import ALLOWED_METHODS [EOL] from . . restrictedpython import get_restricted_function [EOL] from . model import EndpointCollectionUI , EndpointModel , NamedEndpointModel [EOL] from . modelui import EndpointModelUI [EOL] from . restrictedcontext import RestrictedContext , RestrictedRequest [EOL] [EOL] [EOL] @ App . html ( model = EndpointCollectionUI , name = [string] , template = [string] , permission = crudperm . Search , ) def view ( context , request ) : [EOL] return default_listing ( context , request ) [EOL] [EOL] [EOL] def _handle ( context , request ) : [EOL] hcol = request . get_collection ( [string] ) [EOL] handlers = hcol . search ( rulez . and_ ( rulez . field [ [string] ] == context . uuid , rulez . field [ [string] ] == request . method , ) ) [EOL] if not handlers : [EOL] raise HTTPNotFound ( ) [EOL] handler = handlers [ [number] ] . function ( ) [EOL] ctx = RestrictedContext ( request ) [EOL] req = RestrictedRequest ( request ) [EOL] return handler ( ctx , req ) [EOL] [EOL] [EOL] for method in ALLOWED_METHODS : [EOL] [EOL] App . json ( model = EndpointModel , name = [string] , permission = crudperm . View , request_method = method , ) ( _handle ) [EOL] App . json ( model = NamedEndpointModel , permission = crudperm . View , request_method = method ) ( _handle ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from . . application . path import get_collection as get_app_col [EOL] from . . entity . path import get_collection as get_entity_col [EOL] from . . entitycontent . path import content_collection_factory [EOL] [EOL] [EOL] class RestrictedEntityContent ( object ) : [EOL] def __init__ ( self , context ) : [EOL] self . data = context . data [EOL] [EOL] def update ( data , deserialize = True ) : [EOL] return context . update ( data , deserialize = deserialize ) [EOL] [EOL] self . update = update [EOL] self . save = context . save [EOL] self . as_json = lambda : context . as_json ( ) [EOL] [EOL] def __guarded_setitem__ ( self , key , value ) : [EOL] self . __setitem__ ( key , value ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . data [ key ] [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] self . data [ key ] = value [EOL] [EOL] def keys ( self ) : [EOL] return self . data . keys ( ) [EOL] [EOL] def values ( self ) : [EOL] return self . data . values ( ) [EOL] [EOL] [EOL] class RestrictedEntityContentCollection ( object ) : [EOL] def __init__ ( self , context ) : [EOL] def search ( query = None , offset = [number] , limit = None , order_by = None ) : [EOL] objs = context . search ( query , offset , limit , order_by ) [EOL] return [ RestrictedEntityContent ( obj ) for obj in objs ] [EOL] [EOL] def create ( data , deserialize = True ) : [EOL] obj = context . create ( data , deserialize = deserialize ) [EOL] return RestrictedEntityContent ( obj ) [EOL] [EOL] self . search = search [EOL] self . create = create [EOL] [EOL] [EOL] class RestrictedApplication ( object ) : [EOL] def __init__ ( self , application , allow_invalid = False ) : [EOL] self . _application = application [EOL] restricted_entities = { } [EOL] for entity in application . application_schema ( ) . entities ( ) : [EOL] restricted_entities [ entity [ [string] ] ] = RestrictedEntityContentCollection ( content_collection_factory ( entity , application , allow_invalid ) ) [EOL] [EOL] self . entities = restricted_entities [EOL] [EOL] def allow_invalid ( self ) : [EOL] [comment] [EOL] return RestrictedApplication ( self . _application , allow_invalid = True ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . entities [ key ] [EOL] [EOL] def keys ( self ) : [EOL] return self . entities . keys ( ) [EOL] [EOL] def values ( self ) : [EOL] return self . entities . values ( ) [EOL] [EOL] [EOL] class RestrictedContext ( object ) : [EOL] def __init__ ( self , request ) : [EOL] [EOL] app_col = get_app_col ( request ) [EOL] apps = app_col . search ( ) [EOL] [EOL] restricted_apps = { } [EOL] for app in apps : [EOL] restricted_apps [ app [ [string] ] ] = RestrictedApplication ( app ) [EOL] [EOL] self . apps = restricted_apps [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . apps [ key ] [EOL] [EOL] def keys ( self ) : [EOL] return self . apps . keys ( ) [EOL] [EOL] def values ( self ) : [EOL] return self . apps . values ( ) [EOL] [EOL] [EOL] class RestrictedRequest ( object ) : [EOL] def __init__ ( self , request ) : [EOL] [EOL] self . GET = request . GET [EOL] self . POST = request . POST [EOL] self . body = request . body [EOL] self . headers = request . headers [EOL] self . method = request . method [EOL] self . json = lambda : request . json [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class NotificationModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class NotificationCollectionUI ( CollectionUI ) : [EOL] modelui_class = NotificationModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.modelui.NotificationModelUI]$ 0 0 0
from typing import Optional [EOL] import builtins [EOL] import datetime [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from datetime import datetime [EOL] [EOL] import morpfw [EOL] from morpcc . deform . referencewidget import UserReferenceWidget [EOL] [EOL] [EOL] @ dataclass class NotificationSchema ( morpfw . Schema ) : [EOL] [EOL] message = None [EOL] userid = field ( default = None , metadata = { [string] : UserReferenceWidget ( ) } ) [EOL] read = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import NotificationCollection , NotificationModel [EOL] [EOL] [comment] [EOL] from . modelui import NotificationCollectionUI , NotificationModelUI [EOL] [EOL] [comment] [EOL] from . storage import NotificationStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = NotificationStorage ( request ) [EOL] return NotificationCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = NotificationCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = NotificationModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = NotificationCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = NotificationModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import NotificationCollectionUI , NotificationModelUI [EOL] from . schema import NotificationSchema [EOL] [EOL] [EOL] class NotificationModel ( morpfw . Model ) : [EOL] schema = NotificationSchema [EOL] [EOL] def ui ( self ) : [EOL] return NotificationModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] class NotificationCollection ( morpfw . Collection ) : [EOL] schema = NotificationSchema [EOL] [EOL] def ui ( self ) : [EOL] return NotificationCollectionUI ( self . request , self ) [EOL] [EOL] def search ( self , query = None , * args , ** kwargs ) : [EOL] if kwargs . get ( [string] , True ) : [EOL] if query : [EOL] rulez . and_ ( rulez . field [ [string] ] == self . request . identity . userid , query ) [EOL] else : [EOL] query = rulez . field [ [string] ] == self . request . identity . userid [EOL] return super ( ) . search ( query , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.schema.NotificationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.schema.NotificationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] from . model import NotificationModel [EOL] [EOL] [EOL] class Notification ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] message = sa . Column ( sa . Text ( ) ) [EOL] userid = sa . Column ( morpfw . sql . GUID ) [EOL] read = sa . Column ( sa . DateTime ) [EOL] [EOL] [EOL] class NotificationStorage ( morpfw . SQLStorage ) : [EOL] model = NotificationModel [EOL] orm_model = Notification [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.notification.storage.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.storage.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.storage.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.notification.model.NotificationModel]$ 0 0 0 $typing.Type[morpcc.notification.storage.Notification]$ 0 0 0
	0
from . . app import App [EOL] from . model import NotificationCollection , NotificationModel [EOL] [EOL] [comment] [EOL] from . modelui import NotificationCollectionUI , NotificationModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import NotificationSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = NotificationSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : NotificationSchema , [string] : NotificationCollection , [string] : get_collection , [string] : NotificationModel , [string] : get_model , [string] : True , [string] : NotificationCollectionUI , [string] : NotificationModelUI , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import DictionaryEntityModel [EOL] [EOL] [EOL] class DictionaryEntity ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] name = sa . Column ( sa . String ( length = [number] ) , index = True ) [EOL] title = sa . Column ( sa . String ( length = [number] ) ) [EOL] description = sa . Column ( sa . Text ( ) ) [EOL] notes = sa . Column ( sa . Text ( ) ) [EOL] [EOL] [EOL] class DictionaryEntityStorage ( morpfw . SQLStorage ) : [EOL] model = DictionaryEntityModel [EOL] orm_model = DictionaryEntity [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.dictionaryentity.storage.DictionaryEntity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.storage.DictionaryEntity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.storage.DictionaryEntity]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.storage.DictionaryEntity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.model.DictionaryEntityModel]$ 0 0 0 $typing.Type[morpcc.dictionaryentity.storage.DictionaryEntity]$ 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class DictionaryEntityModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class DictionaryEntityCollectionUI ( CollectionUI ) : [EOL] modelui_class = DictionaryEntityModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.modelui.DictionaryEntityModelUI]$ 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import DictionaryEntityCollectionUI , DictionaryEntityModelUI [EOL] from . schema import DictionaryEntitySchema [EOL] [EOL] [EOL] class DictionaryEntityModel ( morpfw . Model ) : [EOL] schema = DictionaryEntitySchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryEntityModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def dictionary_elements ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . search ( { rulez . field [ [string] ] == self . uuid } ) [EOL] [EOL] def before_delete ( self ) : [EOL] for el in self . dictionary_elements ( ) : [EOL] el . delete ( ) [EOL] [EOL] [EOL] class DictionaryEntityCollection ( morpfw . Collection ) : [EOL] schema = DictionaryEntitySchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryEntityCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.model.DictionaryEntityModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryentity.model.DictionaryEntityCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import rulez [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpfw . crud import permission as crudperms [EOL] from . . app import App [EOL] from . modelui import DictionaryEntityCollectionUI [EOL] [EOL] @ App . html ( model = DictionaryEntityCollectionUI , name = [string] , template = [string] , permission = crudperms . Search , ) def view ( context , request ) : [EOL] return default_listing ( context , request ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] from . form_validator import valid_assignment [EOL] [EOL] [EOL] @ dataclass class DictionaryElementValidatorAssignmentSchema ( morpfw . Schema ) : [EOL] [EOL] dictionaryelement_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] attributevalidator_name = field ( default = None , metadata = { [string] : True , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] __validators__ = [ valid_assignment ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import ( DictionaryElementValidatorAssignmentCollectionUI , DictionaryElementValidatorAssignmentModelUI , ) [EOL] from . schema import DictionaryElementValidatorAssignmentSchema [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignmentModel ( morpfw . Model ) : [EOL] schema = DictionaryElementValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryElementValidatorAssignmentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def validator ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] res = col . search ( rulez . field [ [string] ] == self [ [string] ] ) [EOL] if res : [EOL] return res [ [number] ] [EOL] [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def dictionaryelement ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . get ( self [ [string] ] ) [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignmentCollection ( morpfw . Collection ) : [EOL] schema = DictionaryElementValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return DictionaryElementValidatorAssignmentCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.schema.DictionaryElementValidatorAssignmentSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.schema.DictionaryElementValidatorAssignmentSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import DictionaryElementValidatorAssignmentModel [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignment ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] dictionaryelement_uuid = sa . Column ( morpfw . sql . GUID ( ) , index = True ) [EOL] attributevalidator_name = sa . Column ( sa . String ( [number] ) , index = True ) [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignmentStorage ( morpfw . SQLStorage ) : [EOL] model = DictionaryElementValidatorAssignmentModel [EOL] orm_model = DictionaryElementValidatorAssignment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.storage.DictionaryElementValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.storage.DictionaryElementValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.model.DictionaryElementValidatorAssignmentModel]$ 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.storage.DictionaryElementValidatorAssignment]$ 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class DictionaryElementValidatorAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = DictionaryElementValidatorAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.dictionaryelementvalidatorassignment.modelui.DictionaryElementValidatorAssignmentModelUI]$ 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import ( DictionaryElementValidatorAssignmentCollection , DictionaryElementValidatorAssignmentModel , ) [EOL] [EOL] [comment] [EOL] from . modelui import ( DictionaryElementValidatorAssignmentCollectionUI , DictionaryElementValidatorAssignmentModelUI , ) [EOL] [EOL] [comment] [EOL] from . storage import DictionaryElementValidatorAssignmentStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = DictionaryElementValidatorAssignmentStorage ( request ) [EOL] return DictionaryElementValidatorAssignmentCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementValidatorAssignmentCollection , path = [string] , ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementValidatorAssignmentModel , path = [string] , ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementValidatorAssignmentCollectionUI , path = [string] , ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = DictionaryElementValidatorAssignmentModelUI , path = [string] , ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . . app import App [EOL] from . model import ( DictionaryElementValidatorAssignmentCollection , DictionaryElementValidatorAssignmentModel , ) [EOL] [EOL] [comment] [EOL] from . modelui import ( DictionaryElementValidatorAssignmentCollectionUI , DictionaryElementValidatorAssignmentModelUI , ) [EOL] from . path import get_collection , get_model [EOL] from . schema import DictionaryElementValidatorAssignmentSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = DictionaryElementValidatorAssignmentSchema , ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : DictionaryElementValidatorAssignmentSchema , [string] : DictionaryElementValidatorAssignmentCollection , [string] : get_collection , [string] : DictionaryElementValidatorAssignmentModel , [string] : get_model , [string] : DictionaryElementValidatorAssignmentCollectionUI , [string] : DictionaryElementValidatorAssignmentModelUI , [string] : True , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import rulez [EOL] [EOL] [EOL] def valid_assignment ( request , schema , data , mode = None , ** kw ) : [EOL] ddelcol = request . get_collection ( [string] ) [EOL] valcol = request . get_collection ( [string] ) [EOL] [EOL] ddel = ddelcol . get ( data [ [string] ] ) [EOL] [EOL] res = valcol . search ( rulez . field [ [string] ] == data [ [string] ] ) [EOL] if not res : [EOL] return { [string] : [string] , [string] : [string] } [EOL] [EOL] validator = res [ [number] ] [EOL] [EOL] if ddel [ [string] ] != validator [ [string] ] : [EOL] return { [string] : [string] , [string] : [string] . format ( ddel [ [string] ] , validator [ [string] ] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import SettingModel [EOL] [EOL] [EOL] class Setting ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] key = sa . Column ( sa . String ( length = [number] ) , index = True ) [EOL] data = sa . Column ( sajson . JSONField ( ) ) [EOL] [EOL] [EOL] class SettingStorage ( morpfw . SQLStorage ) : [EOL] model = SettingModel [EOL] orm_model = Setting [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.settings.storage.Setting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.settings.storage.Setting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.settings.model.SettingModel]$ 0 0 0 $typing.Type[morpcc.settings.storage.Setting]$ 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from datetime import date , datetime [EOL] [EOL] import deform . widget [EOL] from inverter . dc2colander import dc2colander [EOL] [EOL] from . . import permission as perm [EOL] from . . app import App [EOL] [EOL] [EOL] @ dataclass class GeneralSetting ( object ) : [EOL] [EOL] ldap_enabled = field ( default = False , metadata = { [string] : [string] , [string] : False , [string] : [string] , } , ) [EOL] [EOL] [EOL] @ App . setting_page ( name = [string] , title = [string] , order = - [number] ) def get_schema ( request ) : [EOL] return GeneralSetting [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class SettingModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class SettingCollectionUI ( CollectionUI ) : [EOL] modelui_class = SettingModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.settings.modelui.SettingModelUI]$ 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import SettingCollection , SettingModel [EOL] [EOL] [comment] [EOL] from . modelui import SettingCollectionUI , SettingModelUI [EOL] [EOL] [comment] [EOL] from . storage import SettingStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = SettingStorage ( request ) [EOL] return SettingCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = SettingCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = SettingModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = SettingCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = SettingModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass [EOL] [EOL] import morpfw [EOL] [EOL] [EOL] @ dataclass class SettingSchema ( morpfw . Schema ) : [EOL] [EOL] key = None [EOL] data = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0
from . . app import App [EOL] from . model import SettingCollection , SettingModel [EOL] [EOL] [comment] [EOL] from . modelui import SettingCollectionUI , SettingModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import SettingSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = SettingSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : SettingSchema , [string] : SettingCollection , [string] : get_collection , [string] : SettingModel , [string] : get_model , [string] : SettingCollectionUI , [string] : SettingModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import morpfw [EOL] [EOL] from . . import permission as perm [EOL] from . . app import App [EOL] from . modelui import SettingCollectionUI [EOL] [EOL] [EOL] @ App . html ( model = SettingCollectionUI , name = [string] , permission = perm . ManageSite , template = [string] , ) def listing ( context , request ) : [EOL] page_name = request . GET . get ( [string] , [string] ) [EOL] page = request . app . config . setting_page_registry . get ( request , page_name ) [EOL] pages = request . app . config . setting_page_registry . values ( request ) [EOL] pages = [ v for v in pages if v . enabled ( context , request ) ] [EOL] form = page . form ( context , request ) [EOL] data = page . form_data ( context , request ) [EOL] return { [string] : page_name , [string] : pages , [string] : [string] , [string] : page . title , [string] : form , [string] : data , } [EOL] [EOL] [EOL] @ App . html ( model = SettingCollectionUI , name = [string] , permission = perm . ManageSite , template = [string] , request_method = [string] , ) def process_listing ( context , request ) : [EOL] page_name = request . GET . get ( [string] , [string] ) [EOL] page = request . app . config . setting_page_registry . get ( request , page_name ) [EOL] pages = request . app . config . setting_page_registry . values ( request ) [EOL] pages = [ v for v in pages if v . enabled ( context , request ) ] [EOL] error = page . process_form ( context , request ) [EOL] if not error : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morpfw . redirect ( request . url ) [EOL] return { [string] : page_name , [string] : pages , [string] : [string] , [string] : page . title , [string] : error [ [string] ] , [string] : error [ [string] ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import dataclasses [EOL] [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import SettingCollectionUI , SettingModelUI [EOL] from . schema import SettingSchema [EOL] [EOL] _marker = object ( ) [EOL] [EOL] [EOL] class SettingModel ( morpfw . Model ) : [EOL] schema = SettingSchema [EOL] [EOL] def ui ( self ) : [EOL] return SettingModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] class SettingCollection ( morpfw . Collection ) : [EOL] schema = SettingSchema [EOL] [EOL] def ui ( self ) : [EOL] return SettingCollectionUI ( self . request , self ) [EOL] [EOL] def get_by_key ( self , key ) : [EOL] items = self . search ( rulez . field [ [string] ] == key ) [EOL] if items : [EOL] return items [ [number] ] [EOL] return self . create ( { [string] : key , [string] : { [string] : None } } ) [EOL] [EOL] def resolve_raw ( self , key , default = _marker ) : [EOL] [docstring] [EOL] item = self . get_by_key ( key ) [EOL] if default is not _marker : [EOL] return item [ [string] ] . get ( [string] , default ) [EOL] return item [ [string] ] . get ( [string] ) [EOL] [EOL] def resolve ( self , key , default = _marker ) : [EOL] [docstring] [EOL] item = self . get_by_key ( key ) [EOL] pages = self . request . app . config . setting_page_registry . values ( self . request ) [EOL] for p in pages : [EOL] schema = p . factory ( self . request ) [EOL] for fname , field in schema . __dataclass_fields__ . items ( ) : [EOL] if field . metadata . get ( [string] , None ) == key : [EOL] fschema = p . jsonformschema ( self , self . request ) [EOL] serde = fschema [ fname ] [EOL] value = item [ [string] ] [ [string] ] [EOL] if value is None : [EOL] if not isinstance ( field . default , dataclasses . _MISSING_TYPE ) : [EOL] value = field . default [EOL] elif not isinstance ( field . default_factory , dataclasses . _MISSING_TYPE ) : [EOL] value = field . default_factory ( ) [EOL] else : [EOL] value = serde . deserialize ( value ) [EOL] return value [EOL] if default is _marker : [EOL] raise KeyError ( key ) [EOL] return default [EOL] [EOL] def store ( self , key , value ) : [EOL] item = self . get_by_key ( key ) [EOL] pages = self . request . app . config . setting_page_registry . values ( self . request ) [EOL] for p in pages : [EOL] schema = p . factory ( self . request ) [EOL] for fname , field in schema . __dataclass_fields__ . items ( ) : [EOL] if field . metadata . get ( [string] , None ) == key : [EOL] fschema = p . jsonformschema ( self , self . request ) [EOL] serde = fschema [ fname ] [EOL] value = serde . serialize ( value ) [EOL] item . update ( { [string] : { [string] : value } } ) [EOL] return [EOL] raise KeyError ( key ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.settings.schema.SettingSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.settings.schema.SettingSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . import permission as perm [EOL] from . . app import App [EOL] from . . root import Root [EOL] [EOL] [EOL] @ App . html ( model = Root , name = [string] , template = [string] , permission = perm . ManageSite , ) def site_settings ( context , request ) : [EOL] modules = [ ] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } , ) [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } , ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] if request . permits ( [string] , crudperm . Search ) : [EOL] modules . append ( { [string] : [string] , [string] : [string] , [string] : request . relative_url ( [string] ) , } ) [EOL] return { [string] : modules } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import ApplicationCollection , ApplicationModel [EOL] [EOL] [comment] [EOL] from . modelui import ApplicationCollectionUI , ApplicationModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import ApplicationSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = ApplicationSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : ApplicationSchema , [string] : ApplicationCollection , [string] : get_collection , [string] : ApplicationModel , [string] : get_model , [string] : ApplicationCollectionUI , [string] : ApplicationModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] from pygments import highlight [EOL] from pygments . formatters import HtmlFormatter [EOL] from pygments . lexers import PythonLexer [EOL] [EOL] from . . app import App [EOL] from . . entity . path import get_collection as get_dm_collection [EOL] from . . entitycontent . model import content_collection_factory [EOL] from . . index . path import get_collection as get_index_collection [EOL] from . adapters import ApplicationDatabaseSyncAdapter [EOL] from . model import ApplicationModel [EOL] from . modelui import ApplicationModelUI [EOL] [EOL] [EOL] @ App . html ( model = ApplicationModelUI , name = [string] , template = [string] , permission = crudperm . View , ) def view ( context , request ) : [EOL] result = default_view ( context , request ) [EOL] dmcol = get_dm_collection ( request ) [EOL] dbsync = ApplicationDatabaseSyncAdapter ( context . model , request ) [EOL] entities = dmcol . search ( rulez . field [ [string] ] == context . model [ [string] ] ) [EOL] entities = [ content_collection_factory ( entity , context . model ) for entity in entities ] [EOL] result [ [string] ] = sorted ( entities , key = lambda x : x . __parent__ [ [string] ] ) [EOL] result [ [string] ] = dbsync . need_update [EOL] return result [EOL] [EOL] [EOL] @ App . html ( model = ApplicationModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def edit ( context , request ) : [EOL] return default_edit ( context , request ) [EOL] [EOL] [EOL] @ App . html ( model = ApplicationModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def schema_upgrade ( context , request ) : [EOL] dbsync = ApplicationDatabaseSyncAdapter ( context . model , request ) [EOL] if not dbsync . need_update : [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] code = dbsync . migration_code [EOL] formatter = HtmlFormatter ( ) [EOL] highlighted = highlight ( code , PythonLexer ( ) , formatter ) [EOL] return { [string] : dbsync . need_update , [string] : code , [string] : highlighted , [string] : formatter . get_style_defs ( [string] ) , } [EOL] [EOL] [EOL] @ App . view ( model = ApplicationModelUI , name = [string] , permission = crudperm . Edit , request_method = [string] , ) def process_schema_upgrade ( context , request ) : [EOL] run = request . POST . get ( [string] , [string] ) . lower ( ) [EOL] if run != [string] : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] dbsync = ApplicationDatabaseSyncAdapter ( context . model , request ) [EOL] if dbsync . need_update : [EOL] dbsync . update ( ) [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morpfw . redirect ( request . link ( context ) ) [EOL] [EOL] [EOL] @ App . json ( model = ApplicationModelUI , name = [string] , permission = crudperm . View ) def search ( context , request ) : [EOL] col = get_index_collection ( request ) . content_collection ( ) [EOL] prov = col . searchprovider ( ) [EOL] qs = prov . parse_query ( request . GET . get ( [string] , None ) ) [EOL] res = [ ] [EOL] search = rulez . field [ [string] ] == context . model . uuid [EOL] if qs : [EOL] search = rulez . and_ ( search , qs ) [EOL] for obj in prov . search ( search ) : [EOL] res . append ( obj . json ( ) ) [EOL] return res [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] [EOL] [comment] [EOL] from deform . widget import TextAreaWidget [EOL] from morpfw . validator . field import valid_identifier [EOL] [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . deform . vocabularywidget import VocabularyWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] from . . validator . vocabulary import VocabularyValidator [EOL] [EOL] [EOL] @ dataclass class ApplicationSchema ( morpfw . Schema ) : [EOL] [EOL] name = field ( default = None , metadata = { [string] : True , [string] : False , [string] : [ valid_identifier ] , } , ) [EOL] title = field ( default = None , metadata = { [string] : True } ) [EOL] [EOL] description = field ( default = None , metadata = { [string] : [string] } ) [EOL] icon = field ( default = None , metadata = { [string] : [ VocabularyValidator ( [string] ) ] , [string] : VocabularyWidget ( [string] ) , } , ) [EOL] schema_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : [ ReferenceValidator ( [string] , [string] ) ] , [string] : ReferenceWidget ( [string] , [string] , [string] ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import model [EOL] import typing [EOL] import morpfw [EOL] import morpfw . crud . signals as signals [EOL] from morpcc . navigator import Navigator [EOL] [EOL] from . . app import App [EOL] from . . entitycontent . model import ( EntityContentCollection , EntityContentModel , content_collection_factory , ) [EOL] from . model import ApplicationModel [EOL] [EOL] [EOL] @ App . async_subscribe ( [string] ) def index ( request_options , app_uuid , entity_uuid , uuid ) : [EOL] with morpfw . request_factory ( ** request_options ) as request : [EOL] appcol = request . get_collection ( [string] ) [EOL] entitycol = request . get_collection ( [string] ) [EOL] app = appcol . get ( app_uuid ) [EOL] entity = entitycol . get ( entity_uuid ) [EOL] content_col = content_collection_factory ( entity , app ) [EOL] context = content_col . get ( uuid ) [EOL] app . index_sync ( context ) [EOL] [EOL] [EOL] @ App . async_subscribe ( [string] ) def index ( request_options , app_uuid , entity_uuid , uuid ) : [EOL] with morpfw . request_factory ( ** request_options ) as request : [EOL] appcol = request . get_collection ( [string] ) [EOL] entitycol = request . get_collection ( [string] ) [EOL] app = appcol . get ( app_uuid ) [EOL] entity = entitycol . get ( entity_uuid ) [EOL] content_col = content_collection_factory ( entity , app ) [EOL] context = content_col . get ( uuid ) [EOL] app . unindex ( context ) [EOL] [EOL] [EOL] @ App . subscribe ( model = EntityContentModel , signal = signals . OBJECT_CREATED ) def index_on_create ( app , request , context , signal ) : [EOL] if request . environ . get ( [string] , False ) : [EOL] return [EOL] app_uuid = context . collection . __application__ . uuid [EOL] entity = context . collection . entity ( ) [EOL] request . async_dispatch ( [string] , app_uuid = app_uuid , entity_uuid = entity . uuid , uuid = context . uuid , ) [EOL] [EOL] [EOL] @ App . subscribe ( model = EntityContentModel , signal = signals . OBJECT_UPDATED ) def index_on_update ( app , request , context , signal ) : [EOL] if request . environ . get ( [string] , False ) : [EOL] return [EOL] app_uuid = context . collection . __application__ . uuid [EOL] entity = context . collection . entity ( ) [EOL] request . async_dispatch ( [string] , app_uuid = app_uuid , entity_uuid = entity . uuid , uuid = context . uuid , ) [EOL] [EOL] [EOL] @ App . subscribe ( model = EntityContentModel , signal = signals . OBJECT_TOBEDELETED ) def unindex_on_delete ( app , request , context , signal ) : [EOL] app_uuid = context . collection . __application__ . uuid [EOL] entity = context . collection . entity ( ) [EOL] request . async_dispatch ( [string] , app_uuid = app_uuid , entity_uuid = entity . uuid , uuid = context . uuid , ) [EOL] [EOL] [EOL] @ App . subscribe ( model = ApplicationModel , signal = signals . OBJECT_TOBEDELETED ) def delete_schema ( app , request , context , signal ) : [EOL] app_uuid = context . uuid [EOL] context = context [EOL] context . drop_all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import morpcc [EOL] import typing [EOL] from dataclasses import field , make_dataclass [EOL] [EOL] import morpfw [EOL] import rulez [EOL] from morpfw . crud import signals [EOL] from morpfw . crud . storage . pgsqlstorage import PgSQLStorage [EOL] from sqlalchemy import DDL , MetaData [EOL] [EOL] from . . entitycontent . path import content_collection_factory [EOL] from . . index . model import IndexContentCollection , IndexContentModel [EOL] from . modelui import ( ApplicationCollectionUI , ApplicationModelUI , BehaviorableApplicationModelUI , ) [EOL] from . schema import ApplicationSchema [EOL] [EOL] [EOL] def get_behaviors ( request , app_uuid ) : [EOL] col = request . get_collection ( [string] ) [EOL] assignments = col . search ( rulez . field [ [string] ] == app_uuid ) [EOL] behaviors = [ ] [EOL] for assignment in assignments : [EOL] behavior = request . app . config . application_behavior_registry . get_behavior ( assignment [ [string] ] , request ) [EOL] behaviors . append ( behavior ) [EOL] return behaviors [EOL] [EOL] [EOL] class ApplicationModel ( morpfw . Model ) : [EOL] schema = ApplicationSchema [EOL] [EOL] def ui ( self ) : [EOL] return BehaviorableApplicationModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] def title ( self ) : [EOL] return self [ [string] ] [EOL] [EOL] @ morpfw . requestmemoize ( ) def application_schema ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . get ( self [ [string] ] ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def entities ( self ) : [EOL] return self . application_schema ( ) . entities ( ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity_collections ( self ) : [EOL] result = { } [EOL] for entity in self . application_schema ( ) . entities ( ) : [EOL] result [ entity [ [string] ] ] = content_collection_factory ( entity , self ) [EOL] return result [EOL] [EOL] def content_metadata ( self ) : [EOL] return MetaData ( schema = self [ [string] ] ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def behaviors ( self ) : [EOL] return get_behaviors ( self . request , self . uuid ) [EOL] [EOL] def reindex ( self ) : [EOL] for dm in self . entities ( ) : [EOL] col = dm . content_collection ( ) [EOL] agg = col . aggregate ( group = { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] total = agg [ [string] ] [EOL] offset = [number] [EOL] while True : [EOL] dms = dm . search ( offset = offset , limit = [number] , secure = False ) [EOL] if len ( dms ) == [number] : [EOL] break [EOL] [EOL] for dmc in dms : [EOL] self . index_sync ( dmc ) [EOL] count += [number] [EOL] [EOL] offset += [number] [EOL] [EOL] def index_sync ( self , model ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] idxcol = col . content_collection ( ) [EOL] existing = idxcol . search ( rulez . and_ ( rulez . field [ [string] ] == model . collection . __application__ . uuid , rulez . field [ [string] ] == model . entity ( ) . uuid , rulez . field [ [string] ] == model . uuid , ) ) [EOL] [EOL] data = { } [EOL] for keyidx in [ i [ [number] ] for i in col . index_attrs ( ) ] : [EOL] res = self . request . app . get_indexer ( model , keyidx ) [EOL] data [ keyidx ] = res [EOL] [EOL] if existing : [EOL] existing [ [number] ] . update ( data ) [EOL] result = existing [ [number] ] [EOL] else : [EOL] result = idxcol . create ( data , deserialize = False ) [EOL] [EOL] return result [EOL] [EOL] def unindex ( self , model ) : [EOL] idxcol = self . request . get_collection ( [string] ) . content_collection ( ) [EOL] [EOL] existing = idxcol . search ( rulez . and_ ( rulez . field [ [string] ] == model . entity ( ) . application ( ) . uuid , rulez . field [ [string] ] == model . entity ( ) . uuid , rulez . field [ [string] ] == model . uuid , ) ) [EOL] [EOL] if existing : [EOL] existing [ [number] ] . delete ( permanent = True ) [EOL] [EOL] def drop_all ( self ) : [EOL] for ec in self . entity_collections ( ) . values ( ) : [EOL] ec . drop_all ( ) [EOL] [EOL] [EOL] class BehaviorableApplicationModel ( ApplicationModel ) : [EOL] def __new__ ( cls , request , collection , data ) : [EOL] prov = request . app . get_dataprovider ( cls . schema , data , collection . storage ) [EOL] [EOL] behaviors = get_behaviors ( request , prov [ [string] ] ) [EOL] if not behaviors : [EOL] return ApplicationModel ( request , collection , data ) [EOL] [EOL] markers = [ behavior . model_marker for behavior in behaviors ] [EOL] markers . append ( ApplicationModel ) [EOL] klass = type ( [string] , tuple ( markers ) , { [string] : ApplicationModel } ) [EOL] return klass ( request , collection , data ) [EOL] [EOL] [EOL] class ApplicationCollection ( morpfw . Collection ) : [EOL] schema = ApplicationSchema [EOL] [EOL] def ui ( self ) : [EOL] return ApplicationCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.application.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.list$ 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.application.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import rulez [EOL] [EOL] [EOL] def valid_assignment ( request , schema , data , mode = None , ** kw ) : [EOL] attrcol = request . get_collection ( [string] ) [EOL] valcol = request . get_collection ( [string] ) [EOL] [EOL] attr = attrcol . get ( data [ [string] ] ) [EOL] res = valcol . search ( rulez . field [ [string] ] == data [ [string] ] ) [EOL] if not res : [EOL] return { [string] : [string] , [string] : [string] } [EOL] [EOL] validator = res [ [number] ] [EOL] [EOL] if attr [ [string] ] != validator [ [string] ] : [EOL] return { [string] : [string] , [string] : [string] . format ( attr [ [string] ] , validator [ [string] ] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class AttributeValidatorAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class AttributeValidatorAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = AttributeValidatorAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.modelui.AttributeValidatorAssignmentModelUI]$ 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import AttributeValidatorAssignmentModel , AttributeValidatorAssignmentCollection [EOL] [comment] [EOL] from . modelui import AttributeValidatorAssignmentModelUI , AttributeValidatorAssignmentCollectionUI [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import AttributeValidatorAssignmentModel [EOL] [EOL] [EOL] class AttributeValidatorAssignment ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] attribute_uuid = sa . Column ( morpfw . sql . GUID ( ) , index = True ) [EOL] attributevalidator_name = sa . Column ( sa . String ( [number] ) , index = True ) [EOL] [EOL] [EOL] class AttributeValidatorAssignmentStorage ( morpfw . SQLStorage ) : [EOL] model = AttributeValidatorAssignmentModel [EOL] orm_model = AttributeValidatorAssignment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.storage.AttributeValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.storage.AttributeValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.model.AttributeValidatorAssignmentModel]$ 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.storage.AttributeValidatorAssignment]$ 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import ( AttributeValidatorAssignmentCollectionUI , AttributeValidatorAssignmentModelUI , ) [EOL] from . schema import AttributeValidatorAssignmentSchema [EOL] [EOL] [EOL] class AttributeValidatorAssignmentModel ( morpfw . Model ) : [EOL] schema = AttributeValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeValidatorAssignmentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def validator ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] validators = col . search ( rulez . field [ [string] ] == self [ [string] ] ) [EOL] if validators : [EOL] return validators [ [number] ] [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def attribute ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . get ( self [ [string] ] ) [EOL] [EOL] [EOL] class AttributeValidatorAssignmentCollection ( morpfw . Collection ) : [EOL] schema = AttributeValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeValidatorAssignmentCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.model.AttributeValidatorAssignmentModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attributevalidatorassignment.model.AttributeValidatorAssignmentCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import ( AttributeValidatorAssignmentCollection , AttributeValidatorAssignmentModel , ) [EOL] [EOL] [comment] [EOL] from . modelui import ( AttributeValidatorAssignmentCollectionUI , AttributeValidatorAssignmentModelUI , ) [EOL] [EOL] [comment] [EOL] from . storage import AttributeValidatorAssignmentStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = AttributeValidatorAssignmentStorage ( request ) [EOL] return AttributeValidatorAssignmentCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeValidatorAssignmentCollection , path = [string] , ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeValidatorAssignmentModel , path = [string] , ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = AttributeValidatorAssignmentCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeValidatorAssignmentModelUI , path = [string] , ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from . . app import App [EOL] from . modelui import AttributeModelUI [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] [EOL] @ App . html ( model = AttributeModelUI , name = [string] , template = [string] , permission = crudperm . Edit ) def edit ( request , context ) : [EOL] return default_edit ( request , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . . app import App [EOL] from . model import AttributeCollection , AttributeModel [EOL] [EOL] [comment] [EOL] from . modelui import AttributeCollectionUI , AttributeModelUI [EOL] from . path import get_collection , get_model [EOL] from . schema import AttributeSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = AttributeSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : AttributeSchema , [string] : AttributeCollection , [string] : get_collection , [string] : AttributeModel , [string] : get_model , [string] : AttributeCollectionUI , [string] : AttributeModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] [EOL] def unique_attribute ( request , schema , data , mode = None , ** kw ) : [EOL] if mode == [string] : [EOL] return [EOL] [EOL] builtins = [ f . lower ( ) for f in morpfw . Schema . __dataclass_fields__ . keys ( ) ] [EOL] [EOL] if data [ [string] ] in builtins : [EOL] return { [string] : [string] , [string] : [string] . format ( data [ [string] ] ) , } [EOL] [EOL] message = [string] [EOL] [EOL] for restype in [ [string] , [string] , [string] , ] : [EOL] col = request . get_collection ( restype ) [EOL] if col . search ( rulez . and_ ( rulez . field [ [string] ] == data [ [string] ] , rulez . field [ [string] ] == data [ [string] ] , ) ) : [EOL] return { [string] : [string] , [string] : message } [EOL] [EOL] [EOL] def required_if_primary_key ( request , schema , data , mode = None , ** kw ) : [EOL] if data [ [string] ] : [EOL] if not data [ [string] ] : [EOL] return { [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def valid_dictionary_element ( request , schema , data , mode = None , ** kw ) : [EOL] [EOL] de_uuid = data . get ( [string] , None ) [EOL] if not de_uuid : [EOL] return [EOL] [EOL] col = request . get_collection ( [string] ) [EOL] de = col . get ( de_uuid ) [EOL] [EOL] if data [ [string] ] != de [ [string] ] : [EOL] return { [string] : [string] , [string] : [string] . format ( data [ [string] ] ) , } [EOL] [EOL] [EOL] def valid_searchable_type ( request , schema , data , mode = None , ** kw ) : [EOL] typ = data . get ( [string] ) [EOL] searchable = data . get ( [string] ) [EOL] [EOL] if searchable and typ not in [ [string] ] : [EOL] return { [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , List , Type , Any , Dict [EOL] import morpcc [EOL] import datetime [EOL] import typing [EOL] from datetime import date , datetime [EOL] [EOL] import morpfw [EOL] import rulez [EOL] from deform . widget import TextAreaWidget [EOL] [EOL] from . . deform . refdatawidget import ReferenceDataWidget [EOL] from . . deform . richtextwidget import RichTextWidget [EOL] from . . preparer . html import HTMLSanitizer [EOL] from . . validator . refdata import ReferenceDataValidator [EOL] from . modelui import AttributeCollectionUI , AttributeModelUI [EOL] from . schema import ACCEPTED_TYPES , AttributeSchema [EOL] [EOL] DATATYPE_MAPPING = { [string] : { [string] : str , [string] : [string] } , [string] : { [string] : str , [string] : [string] } , [string] : { [string] : str , [string] : [string] } , [string] : { [string] : int , [string] : [string] } , [string] : { [string] : int , [string] : [string] } , [string] : { [string] : float , [string] : [string] } , [string] : { [string] : float , [string] : [string] } , [string] : { [string] : date , [string] : [string] } , [string] : { [string] : datetime , [string] : [string] } , [string] : { [string] : bool , [string] : [string] } , } [EOL] [EOL] [EOL] class AttributeModel ( morpfw . Model ) : [EOL] schema = AttributeSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def datatype ( self ) : [EOL] key = self [ [string] ] [EOL] return DATATYPE_MAPPING [ key ] [ [string] ] [EOL] [EOL] @ morpfw . requestmemoize ( ) def field_metadata ( self ) : [EOL] return self . _field_metadata ( ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def field_metadata_allow_invalid ( self ) : [EOL] return self . _field_metadata ( allow_invalid = True ) [EOL] [EOL] def _field_metadata ( self , allow_invalid = False ) : [EOL] metadata = { [string] : self [ [string] ] , [string] : self [ [string] ] , [string] : self [ [string] ] , [string] : self [ [string] ] , [string] : [ ] , } [EOL] [EOL] allow_invalid = allow_invalid or self [ [string] ] [EOL] [EOL] if self [ [string] ] : [EOL] metadata [ [string] ] = True [EOL] [EOL] if allow_invalid : [EOL] metadata [ [string] ] = False [EOL] [EOL] if not allow_invalid : [EOL] for v in self . validators ( ) : [EOL] metadata [ [string] ] . append ( v . field_validator ( ) ) [EOL] [EOL] rel_collection = self . request . get_collection ( [string] ) [EOL] if rel_collection . search ( rulez . field [ [string] ] == self . uuid ) : [EOL] metadata [ [string] ] = True [EOL] [EOL] de = self . dictionaryelement ( ) [EOL] if de and not allow_invalid : [EOL] for v in de . validators ( ) : [EOL] metadata [ [string] ] . append ( v . field_validator ( ) ) [EOL] [EOL] if self [ [string] ] : [EOL] factory_name = self [ [string] ] [EOL] factory = self . request . app . config . default_factory_registry . get ( factory_name , self . request ) [EOL] metadata [ [string] ] = factory [EOL] [EOL] if self [ [string] ] == [string] : [EOL] if de and de [ [string] ] : [EOL] metadata [ [string] ] = ReferenceDataWidget ( de [ [string] ] , de [ [string] ] , placeholder = [string] % self [ [string] ] , ) [EOL] if not allow_invalid : [EOL] metadata [ [string] ] . append ( ReferenceDataValidator ( de [ [string] ] , de [ [string] ] ) ) [EOL] return metadata [EOL] if self [ [string] ] == [string] : [EOL] metadata . update ( { [string] : [string] , [string] : TextAreaWidget ( ) } ) [EOL] return metadata [EOL] if self [ [string] ] == [string] : [EOL] metadata . update ( { [string] : [string] , [string] : [ HTMLSanitizer ( ) ] , [string] : RichTextWidget ( ) , } ) [EOL] return metadata [EOL] [EOL] return metadata [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] dm = col . get ( self [ [string] ] ) [EOL] return dm [EOL] [EOL] @ morpfw . requestmemoize ( ) def dictionaryelement ( self ) : [EOL] if not self [ [string] ] : [EOL] return None [EOL] col = self . request . get_collection ( [string] ) [EOL] dictel = col . get ( self [ [string] ] ) [EOL] return dictel [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedata ( self ) : [EOL] de = self . dictionaryelement ( ) [EOL] if de : [EOL] return de . referencedata ( ) [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def referencedata_resolve ( self , key ) : [EOL] de = self . dictionaryelement ( ) [EOL] if de : [EOL] return de . referencedata_resolve ( key ) [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def validators ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] assignments = col . search ( rulez . field [ [string] ] == self . uuid ) [EOL] validators = [ a . validator ( ) for a in assignments if a . validator ( ) ] [EOL] ddel = self . dictionaryelement ( ) [EOL] if ddel : [EOL] ddvalidators = self . dictionaryelement ( ) . validators ( ) [EOL] validators += ddvalidators [EOL] return validators [EOL] [EOL] @ morpfw . requestmemoize ( ) def builtin_validators ( self ) : [EOL] result = [ ] [EOL] if self [ [string] ] : [EOL] result . append ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : lambda x : x is not None , [string] : [string] , } ) [EOL] if self . referencedata ( ) : [EOL] [comment] [EOL] refdata = self . referencedata ( ) [EOL] refdata_validate = refdata . validator ( ) [EOL] result . append ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : refdata_validate , [string] : [string] , } ) [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def get_validator ( self , name ) : [EOL] for v in self . validators ( ) : [EOL] if v [ [string] ] == name : [EOL] return v [EOL] [EOL] @ morpfw . requestmemoize ( ) def get_builtin_validator ( self , name ) : [EOL] for v in self . builtin_validators ( ) : [EOL] if v [ [string] ] == name : [EOL] return v [EOL] [EOL] [EOL] class AttributeCollection ( morpfw . Collection ) : [EOL] schema = AttributeSchema [EOL] [EOL] def ui ( self ) : [EOL] return AttributeCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attribute.schema.AttributeSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attribute.schema.AttributeSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class AttributeModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class AttributeCollectionUI ( CollectionUI ) : [EOL] modelui_class = AttributeModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.attribute.modelui.AttributeModelUI]$ 0 0 0
from typing import Any [EOL] import typing [EOL] from . . app import App [EOL] from . model import AttributeCollection , AttributeModel [EOL] [comment] [EOL] from . modelui import AttributeCollectionUI , AttributeModelUI [EOL] [comment] [EOL] from . storage import AttributeStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = AttributeStorage ( request ) [EOL] return AttributeCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] if collection : [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = AttributeModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Type , Dict [EOL] import builtins [EOL] import deform [EOL] import typing [EOL] import morpcc [EOL] import morepath [EOL] import pytz [EOL] [EOL] import colander [EOL] import deform [EOL] import deform . widget [EOL] import morepath [EOL] import morpfw . authn . pas . exc [EOL] import webob . exc [EOL] from inverter import dc2colander [EOL] from morpfw . authn . pas . user . path import get_user_collection [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . import permission [EOL] from . . app import App [EOL] from . . crud . tempstore import FSBlobFileUploadTempStore [EOL] from . . root import Root [EOL] from . . users . model import CurrentUserModelUI , UserModelUI [EOL] [EOL] [EOL] class UserInfoSchema ( colander . MappingSchema ) : [EOL] username = colander . SchemaNode ( colander . String ( ) , oid = [string] , missing = [string] , widget = deform . widget . TextInputWidget ( template = [string] ) , ) [EOL] email = colander . SchemaNode ( colander . String ( ) , oid = [string] , validator = colander . Email ( msg = [string] ) , ) [EOL] timezone = colander . SchemaNode ( colander . String ( ) , oid = [string] , widget = deform . widget . Select2Widget ( values = [ ( x , x ) for x in pytz . all_timezones ] ) , ) [EOL] [EOL] state = colander . SchemaNode ( colander . String ( ) , oid = [string] , missing = [string] , widget = deform . widget . TextInputWidget ( template = [string] ) , ) [EOL] created = colander . SchemaNode ( colander . DateTime ( ) , oid = [string] , missing = None , widget = deform . widget . DateTimeInputWidget ( template = [string] ) , ) [EOL] [EOL] [EOL] class PasswordSchema ( colander . MappingSchema ) : [EOL] password_current = colander . SchemaNode ( colander . String ( ) , oid = [string] , title = [string] , widget = deform . widget . PasswordWidget ( ) , missing = [string] , ) [EOL] [EOL] password = colander . SchemaNode ( colander . String ( ) , oid = [string] , title = [string] , widget = deform . widget . PasswordWidget ( ) , missing = [string] , validator = colander . Length ( min = [number] ) , ) [EOL] password_confirm = colander . SchemaNode ( colander . String ( ) , oid = [string] , widget = deform . widget . PasswordWidget ( ) , title = [string] , missing = [string] , ) [EOL] [EOL] def validator ( self , node , appstruct ) : [EOL] if appstruct [ [string] ] != appstruct [ [string] ] : [EOL] raise colander . Invalid ( node [ [string] ] , [string] ) [EOL] [EOL] [EOL] class AdminPasswordSchema ( colander . MappingSchema ) : [EOL] [EOL] password = colander . SchemaNode ( colander . String ( ) , oid = [string] , title = [string] , widget = deform . widget . PasswordWidget ( ) , missing = [string] , validator = colander . Length ( min = [number] ) , ) [EOL] password_confirm = colander . SchemaNode ( colander . String ( ) , oid = [string] , widget = deform . widget . PasswordWidget ( ) , title = [string] , missing = [string] , ) [EOL] [EOL] def validator ( self , node , appstruct ) : [EOL] if appstruct [ [string] ] != appstruct [ [string] ] : [EOL] raise colander . Invalid ( node [ [string] ] , [string] ) [EOL] [EOL] [EOL] def userinfo_form ( request ) : [EOL] return deform . Form ( UserInfoSchema ( ) , buttons = ( [string] , ) , formid = [string] ) [EOL] [EOL] [EOL] def attributes_form ( context , request , mode = [string] ) : [EOL] schema = context . xattrprovider ( ) . schema [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) , mode = mode , exclude_fields = [ [string] , [string] ] , ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] return deform . Form ( fs , buttons = ( [string] , ) , formid = [string] ) [EOL] [EOL] [EOL] def password_form ( request ) : [EOL] userid = request . identity . userid [EOL] users = request . get_collection ( [string] ) [EOL] user = users . get_by_userid ( userid ) [EOL] if user [ [string] ] : [EOL] return deform . Form ( AdminPasswordSchema ( ) , buttons = ( [string] , ) , formid = [string] ) [EOL] return deform . Form ( PasswordSchema ( ) , buttons = ( [string] , ) , formid = [string] ) [EOL] [EOL] [EOL] def upload_form ( context , request ) : [EOL] tempstore = FSBlobFileUploadTempStore ( [string] , context , request , [string] ) [EOL] [EOL] class FileUpload ( colander . Schema ) : [EOL] upload = colander . SchemaNode ( deform . FileData ( ) , missing = colander . drop , widget = deform . widget . FileUploadWidget ( tempstore ) , oid = [string] , ) [EOL] [EOL] return deform . Form ( FileUpload ( ) , buttons = ( [string] , ) , formid = [string] ) [EOL] [EOL] [EOL] @ App . html ( model = UserModelUI , name = [string] , template = [string] , permission = crudperm . Edit , ) def profile ( context , request ) : [EOL] user = context . model [EOL] has_photo = user . get_blob ( [string] ) [EOL] forms = [ { [string] : [string] , [string] : attributes_form ( user , request ) , [string] : False , [string] : user . data [ [string] ] , } , { [string] : [string] , [string] : userinfo_form ( request ) , [string] : False , [string] : user . data . as_dict ( ) , } , ] [EOL] if user [ [string] ] == [string] : [EOL] forms . append ( { [string] : [string] , [string] : password_form ( request ) , [string] : False , } ) [EOL] [EOL] return { [string] : [string] , [string] : request . link ( context , [string] ) [EOL] if has_photo [EOL] else None , [string] : forms , } [EOL] [EOL] [EOL] @ App . html ( model = UserModelUI , name = [string] , request_method = [string] , template = [string] , permission = crudperm . Edit , ) def process_profile ( context , request ) : [EOL] userinfo_f = userinfo_form ( request ) [EOL] password_f = password_form ( request ) [EOL] controls = list ( request . POST . items ( ) ) [EOL] controls_dict = dict ( controls ) [EOL] active_form = controls_dict [ [string] ] [EOL] [EOL] user = context . model [EOL] [EOL] attributes_f = attributes_form ( user , request , mode = [string] ) [EOL] [EOL] failed = False [EOL] if active_form == [string] : [EOL] try : [EOL] data = userinfo_f . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] failed = True [EOL] userinfo_f = e [EOL] userdata = userinfo_f . field . schema . serialize ( user . data . as_dict ( ) ) [EOL] for k in userdata . keys ( ) : [EOL] if userinfo_f . cstruct [ k ] is not colander . null : [EOL] userdata [ k ] = userinfo_f . cstruct [ k ] [EOL] userinfo_f . field . cstruct = userdata [EOL] [EOL] if not failed : [EOL] updatedata = { } [EOL] for f in [ [string] , [string] ] : [EOL] updatedata [ f ] = data [ f ] [EOL] user . update ( updatedata ) [EOL] [EOL] if not failed : [EOL] request . notify ( [string] , [string] , [string] , ) [EOL] return morepath . redirect ( request . url ) [EOL] elif active_form == [string] : [EOL] if user [ [string] ] != [string] : [EOL] raise webob . exc . HTTPUnprocessableEntity ( [string] ) [EOL] try : [EOL] data = password_f . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] failed = True [EOL] password_f = e [EOL] [EOL] if not failed : [EOL] users = request . get_collection ( [string] ) [EOL] current_user = users . get_by_userid ( request . identity . userid ) [EOL] if not current_user [ [string] ] and not user . validate ( data [ [string] ] ) : [EOL] exc = colander . Invalid ( password_f , [string] ) [EOL] password_f . widget . handle_error ( password_f , exc ) [EOL] failed = True [EOL] [EOL] if not failed : [EOL] try : [EOL] user . change_password ( data . get ( [string] , [string] ) , data [ [string] ] , secure = False ) [EOL] except morpfw . authn . pas . exc . InvalidPasswordError as e : [EOL] exc = colander . Invalid ( password_f , [string] ) [EOL] password_f . widget . handle_error ( password_f , exc ) [EOL] failed = True [EOL] [EOL] if not failed : [EOL] request . notify ( [string] , [string] , [string] , ) [EOL] return morepath . redirect ( request . url ) [EOL] else : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] elif active_form == [string] : [EOL] try : [EOL] data = attributes_f . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] failed = True [EOL] attributes_f = e [EOL] [EOL] if not failed : [EOL] xattrprovider = user . xattrprovider ( ) [EOL] xattrprovider . update ( data ) [EOL] request . notify ( [string] , [string] , [string] , ) [EOL] return morepath . redirect ( request . url ) [EOL] [EOL] else : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] [EOL] return morepath . redirect ( request . url ) [EOL] [EOL] has_photo = user . get_blob ( [string] ) [EOL] return { [string] : [string] , [string] : request . link ( context , [string] ) [EOL] if has_photo [EOL] else None , [string] : [ { [string] : [string] , [string] : attributes_f , [string] : False , [string] : user [ [string] ] [EOL] if active_form != [string] [EOL] else None , } , { [string] : [string] , [string] : userinfo_f , [string] : False , [string] : user . data . as_dict ( ) [EOL] if active_form != [string] [EOL] else None , } , { [string] : [string] , [string] : password_f , [string] : False , } , ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.UserInfoSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.UserInfoSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.UserInfoSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.UserInfoSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.UserInfoSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.PasswordSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.PasswordSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.PasswordSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"PasswordSchema"$ 0 $builtins.dict$ 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $"PasswordSchema"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.AdminPasswordSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.view.personal_settings.AdminPasswordSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"PasswordSchema"$ 0 $builtins.dict$ 0 0 0 0 $builtins.dict$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $"PasswordSchema"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morepath [EOL] import logging [EOL] import typing [EOL] import logging [EOL] import traceback [EOL] import urllib . parse [EOL] [EOL] import morepath [EOL] import morpfw [EOL] from morepath . authentication import NO_IDENTITY [EOL] from morpfw . authn . pas . exc import UserDoesNotExistsError [EOL] from pygments import highlight [EOL] from pygments . formatters import HtmlFormatter [EOL] from pygments . lexers . python import PythonTracebackLexer [EOL] from webob . exc import ( HTTPForbidden , HTTPInternalServerError , HTTPNotFound , HTTPUnauthorized , ) [EOL] [EOL] from . . app import App [EOL] from . . root import Root [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] @ App . view ( model = HTTPNotFound ) def httpnotfound_error ( context , request ) : [EOL] @ request . after def adjust_status ( response ) : [EOL] response . status = [number] [EOL] [EOL] if request . path . startswith ( [string] ) : [EOL] return morepath . render_json ( { [string] : [string] , [string] : [string] % request . path } , request , ) [EOL] else : [EOL] render = request . app . config . template_engine_registry . get_template_render ( [string] , morepath . render_html ) [EOL] return render ( { } , request ) [EOL] [EOL] [EOL] @ App . view ( model = HTTPForbidden ) def forbidden_error ( context , request ) : [EOL] @ request . after def nocache ( response ) : [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] if request . identity is NO_IDENTITY and not request . path . startswith ( [string] ) : [EOL] [EOL] @ request . after def forget ( response ) : [EOL] request . app . forget_identity ( response , request ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] % urllib . parse . quote ( request . url ) ) ) [EOL] [EOL] @ request . after def adjust_status ( response ) : [EOL] response . status = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if request . path . startswith ( [string] ) : [EOL] return morepath . render_json ( { [string] : [string] , [string] : [string] % request . path } , request ) [EOL] else : [EOL] render = request . app . config . template_engine_registry . get_template_render ( [string] , morepath . render_html ) [EOL] return render ( { } , request ) [EOL] [EOL] [EOL] @ App . view ( model = Exception ) def internalserver_error ( context , request ) : [EOL] @ request . after def adjust_status ( response ) : [EOL] response . status = [number] [EOL] [EOL] tb = traceback . format_exc ( ) [EOL] logger . error ( [string] + tb ) [EOL] [EOL] if request . path . startswith ( [string] ) : [EOL] return morepath . render_json ( { [string] : [string] , [string] : [string] , [string] : tb . split ( [string] ) , } , request , ) [EOL] else : [EOL] render = request . app . config . template_engine_registry . get_template_render ( [string] , morepath . render_html ) [EOL] formatter = HtmlFormatter ( ) [EOL] highlighted = highlight ( tb , PythonTracebackLexer ( ) , formatter ) [EOL] return render ( { [string] : highlighted } , request ) [EOL] [EOL] [EOL] @ App . view ( model = HTTPUnauthorized ) def unauthorized_error ( context , request ) : [EOL] @ request . after def nocache ( response ) : [EOL] request . app . forget_identity ( response , request ) [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] % urllib . parse . quote ( request . url ) ) ) [EOL] [EOL] [EOL] @ App . view ( model = UserDoesNotExistsError ) def unauthorized_nouser_error ( context , request ) : [EOL] @ request . after def nocache ( response ) : [EOL] request . app . forget_identity ( response , request ) [EOL] response . headers . add ( [string] , [string] ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] % urllib . parse . quote ( request . url ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import builtins [EOL] import typing [EOL] import html [EOL] import urllib . parse [EOL] from dataclasses import dataclass , field [EOL] [EOL] import deform [EOL] import morepath [EOL] from inverter import dc2colander [EOL] from morpfw . authn . pas import permission as authperm [EOL] from morpfw . authn . pas . user . path import get_user_collection [EOL] from webob . exc import HTTPNotFound [EOL] [EOL] from . . app import App [EOL] from . . root import Root [EOL] [EOL] [EOL] @ dataclass class LoginForm ( object ) : [EOL] [EOL] username = field ( metadata = { [string] : True } ) [EOL] password = field ( metadata = { [string] : True , [string] : deform . widget . PasswordWidget ( ) } ) [EOL] [EOL] [EOL] @ App . html ( model = Root , name = [string] , template = [string] ) def login ( context , request ) : [EOL] schema = request . app . get_schemaextender ( LoginForm ) [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] return { [string] : [string] , [string] : deform . Form ( fs , buttons = ( [string] , deform . Button ( [string] , title = [string] , type = [string] , value = request . relative_url ( [string] ) , ) , ) , ) , } [EOL] [EOL] [EOL] @ App . html ( model = Root , name = [string] , template = [string] , request_method = [string] ) def process_login ( context , request ) : [EOL] controls = list ( request . POST . items ( ) ) [EOL] schema = request . app . get_schemaextender ( LoginForm ) [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] form = deform . Form ( fs ) [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] [EOL] if not failed : [EOL] username = data [ [string] ] . lower ( ) [EOL] password = data [ [string] ] [EOL] collection = request . get_collection ( [string] ) [EOL] [EOL] if not collection . authenticate ( username , password ) : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] @ request . after def remember ( response ) : [EOL] [docstring] [EOL] [comment] [EOL] response . headers . add ( [string] , [string] ) [EOL] u = collection . get_by_username ( username ) [EOL] identity = morepath . Identity ( u . userid ) [EOL] request . app . remember_identity ( response , request , identity ) [EOL] [EOL] came_from = request . GET . get ( [string] , [string] ) [EOL] if came_from : [EOL] came_from = urllib . parse . unquote ( came_from ) [EOL] else : [EOL] came_from = request . relative_url ( [string] ) [EOL] return morepath . redirect ( came_from ) [EOL] [EOL] request . notify ( [string] , [string] , [string] ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] [EOL] @ App . view ( model = Root , name = [string] ) def logout ( context , request ) : [EOL] @ request . after def forget ( response ) : [EOL] request . app . forget_identity ( response , request ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] [EOL] @ dataclass class RegistrationForm ( object ) : [EOL] username = field ( metadata = { [string] : True } ) [EOL] email = field ( metadata = { [string] : True } ) [EOL] password = field ( metadata = { [string] : True , [string] : deform . widget . PasswordWidget ( ) , } ) [EOL] password_validate = field ( metadata = { [string] : True , [string] : deform . widget . PasswordWidget ( ) , } ) [EOL] [EOL] [EOL] @ App . html ( model = Root , name = [string] , template = [string] , ) def register ( context , request ) : [EOL] if not request . app . get_config ( [string] , True ) : [EOL] raise HTTPNotFound ( ) [EOL] schema = request . app . get_schemaextender ( RegistrationForm ) [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] return { [string] : [string] , [string] : deform . Form ( fs , buttons = ( [string] , deform . Button ( [string] , title = [string] , type = [string] , value = request . relative_url ( [string] ) , ) , ) , ) , } [EOL] [EOL] [EOL] @ App . view ( model = Root , name = [string] , request_method = [string] ) def process_register ( context , request ) : [EOL] controls = list ( request . POST . items ( ) ) [EOL] schema = request . app . get_schemaextender ( RegistrationForm ) [EOL] formschema = dc2colander . convert ( schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = context , request = request ) [EOL] form = deform . Form ( fs ) [EOL] failed = False [EOL] try : [EOL] data = form . validate ( controls ) [EOL] except deform . ValidationFailure as e : [EOL] form = e [EOL] failed = True [EOL] [EOL] if not failed : [EOL] collection = get_user_collection ( request ) [EOL] if data [ [string] ] != data [ [string] ] : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] username = data [ [string] ] . lower ( ) [EOL] email = data [ [string] ] [EOL] if collection . get_by_username ( username ) : [EOL] request . notify ( [string] , [string] , [string] ) [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] if collection . get_by_email ( email ) : [EOL] request . notify ( [string] , [string] , [string] , ) [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL] [EOL] del data [ [string] ] [EOL] data [ [string] ] = data [ [string] ] . lower ( ) [EOL] user = collection . create ( data ) [EOL] [EOL] @ request . after def remember ( response ) : [EOL] [docstring] [EOL] [comment] [EOL] response . headers . add ( [string] , [string] ) [EOL] identity = morepath . Identity ( user . userid ) [EOL] request . app . remember_identity ( response , request , identity ) [EOL] [EOL] return morepath . redirect ( request . relative_url ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import model [EOL] import typing [EOL] from . . app import App [EOL] from . model import ( EntityContentCollection , EntityContentModel , content_collection_factory , ) [EOL] from . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] [EOL] [EOL] def get_content_collection ( request , appidentifier , entityidentifier ) : [EOL] entity = request . get_collection ( [string] ) . get ( entityidentifier ) [EOL] applicaton = request . get_collection ( [string] ) . get ( appidentifier ) [EOL] return content_collection_factory ( entity , applicaton ) [EOL] [EOL] [EOL] @ App . path ( model = EntityContentCollection , path = [string] , variables = lambda obj : { [string] : obj . __application__ . identifier , [string] : obj . __parent__ . identifier , } , ) def _get_collection ( request , identifier , entityidentifier ) : [EOL] return get_content_collection ( request , identifier , entityidentifier ) [EOL] [EOL] [EOL] @ App . path ( model = EntityContentModel , path = [string] , variables = lambda obj : { [string] : obj . collection . __application__ . identifier , [string] : obj . collection . __parent__ . identifier , [string] : obj . identifier , } , ) def _get_content_model ( request , identifier , entityidentifier , recordidentifier ) : [EOL] col = get_content_collection ( request , identifier , entityidentifier ) [EOL] return col . get ( recordidentifier ) [EOL] [EOL] [EOL] @ App . path ( model = EntityContentCollectionUI , path = [string] , variables = lambda obj : { [string] : obj . collection . __application__ . identifier , [string] : obj . collection . __parent__ . identifier , } , ) def get_model_content_collection_ui ( request , identifier , entityidentifier ) : [EOL] col = get_content_collection ( request , identifier , entityidentifier ) [EOL] return col . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = EntityContentModelUI , path = [string] , variables = lambda obj : { [string] : obj . collection_ui . collection . __application__ . identifier , [string] : obj . collection_ui . collection . __parent__ . identifier , [string] : obj . model . identifier , } , ) def get_model_content_model ( request , identifier , entityidentifier , recordidentifier ) : [EOL] col = get_content_collection ( request , identifier , entityidentifier ) [EOL] return col . ui ( ) . get ( recordidentifier ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $model.EntityContentCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Type , Any , Dict [EOL] import typing [EOL] import copy [EOL] [EOL] import morpfw [EOL] import rulez [EOL] from inverter import dc2avsc , dc2colanderavro [EOL] from morpfw . crud . storage . pgsqlstorage import PgSQLStorage [EOL] [EOL] from . . relationship . validator import EntityContentReferenceValidator [EOL] from . . relationship . widget import EntityContentReferenceWidget [EOL] from . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] [EOL] [EOL] class EntityContentCollection ( morpfw . Collection ) : [EOL] def __init__ ( self , application , parent , request , storage , data = None ) : [EOL] self . __application__ = application [EOL] self . __parent__ = parent [EOL] super ( ) . __init__ ( request , storage , data = data ) [EOL] [EOL] def ui ( self ) : [EOL] return EntityContentCollectionUI ( self . request , self ) [EOL] [EOL] def entity ( self ) : [EOL] return self . __parent__ [EOL] [EOL] def application ( self ) : [EOL] return self . __application__ [EOL] [EOL] def base_avro_schema ( self ) : [EOL] entity = self . __parent__ [EOL] result = dc2avsc . convert ( self . schema , self . request , namespace = entity [ [string] ] ) [EOL] return result [EOL] [EOL] def avro_schema ( self ) : [EOL] entity = self . __parent__ [EOL] result = dc2avsc . convert ( self . schema , self . request , namespace = entity [ [string] ] ) [EOL] for name , rel in self . relationships ( ) . items ( ) : [EOL] ref_entity = rel . reference_attribute ( ) . entity ( ) [EOL] item_schema = dc2avsc . convert ( content_collection_factory ( ref_entity , self . __application__ ) . schema , request = self . request , namespace = [string] % ( entity [ [string] ] , ref_entity [ [string] ] ) , ) [EOL] [EOL] field = { [string] : name , [string] : [ item_schema , [string] ] } [EOL] [EOL] for idx , v in enumerate ( result [ [string] ] ) : [EOL] if v [ [string] ] == name : [EOL] result [ [string] ] [ idx ] = field [EOL] [EOL] for name , brel in self . backrelationships ( ) . items ( ) : [EOL] ref_entity = brel . reference_entity ( ) [EOL] item_schema = dc2avsc . convert ( content_collection_factory ( ref_entity , self . __application__ ) . schema , request = self . request , namespace = [string] % ( entity [ [string] ] , ref_entity [ [string] ] ) , ) [EOL] [EOL] if brel [ [string] ] : [EOL] field = { [string] : name , [string] : [ item_schema , [string] ] } [EOL] else : [EOL] field = { [string] : name , [string] : { [string] : [string] , [string] : item_schema } , } [EOL] [comment] [EOL] result [ [string] ] . append ( field ) [EOL] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def memoize_call ( self , func , * args ) : [EOL] return func ( self , * args ) [EOL] [EOL] def attributes ( self ) : [EOL] return self . __parent__ . attributes ( ) [EOL] [EOL] def relationships ( self ) : [EOL] return self . __parent__ . relationships ( ) [EOL] [EOL] def backrelationships ( self ) : [EOL] return self . __parent__ . backrelationships ( ) [EOL] [EOL] def validation_dict ( self , data ) : [EOL] result = copy . deepcopy ( data ) [EOL] for name , rel in self . relationships ( ) . items ( ) : [EOL] item = self . resolve_relationship ( rel , data ) [EOL] if item : [EOL] result [ name ] = item . as_dict ( ) [EOL] for name , brel in self . backrelationships ( ) . items ( ) : [EOL] items = self . resolve_backrelationship ( brel , data ) [EOL] if brel [ [string] ] : [EOL] if items : [EOL] result [ name ] = items [ [number] ] . as_dict ( ) [EOL] else : [EOL] result [ name ] = { } [EOL] else : [EOL] result [ name ] = [ item . as_dict ( ) for item in items if item is not None ] [EOL] return result [EOL] [EOL] def resolve_relationship ( self , relationship , data ) : [EOL] [docstring] [EOL] if not relationship [ [string] ] in data : [EOL] return None [EOL] attr = relationship . reference_attribute ( ) [EOL] entity = attr . entity ( ) [EOL] [EOL] col = content_collection_factory ( entity , self . __application__ ) [EOL] res = col . search ( rulez . field [ attr [ [string] ] ] == data [ relationship [ [string] ] ] ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] def resolve_backrelationship ( self , backrelationship , data ) : [EOL] rel = backrelationship . reference_relationship ( ) [EOL] dm = rel . entity ( ) [EOL] col = content_collection_factory ( dm , self . __application__ ) [EOL] [EOL] attr = rel . reference_attribute ( ) [EOL] [EOL] if not attr [ [string] ] in data : [EOL] return [ ] [EOL] [EOL] result = col . search ( rulez . field [ rel [ [string] ] ] == data [ attr [ [string] ] ] ) [EOL] return result [EOL] [EOL] def drop_all ( self ) : [EOL] app = self . application ( ) [EOL] meta = app . content_metadata ( ) [EOL] bind = self . storage . session . bind [EOL] meta . reflect ( bind ) [EOL] meta . tables [ [string] % ( app [ [string] ] , self . entity ( ) [ [string] ] ) ] . drop ( bind ) [EOL] [EOL] [EOL] class EntityContentModel ( morpfw . Model ) : [EOL] @ property def schema ( self ) : [EOL] return self . collection . schema [EOL] [EOL] def ui ( self ) : [EOL] return EntityContentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] def title ( self ) : [EOL] title_parts = [ ] [EOL] for attrname , attr in self . attributes ( ) . items ( ) : [EOL] if attr [ [string] ] : [EOL] title_parts . append ( self [ attrname ] ) [EOL] if not title_parts : [EOL] return self [ [string] ] [EOL] return [string] . join ( title_parts ) [EOL] [EOL] def application ( self ) : [EOL] return self . collection . application ( ) [EOL] [EOL] def attributes ( self ) : [EOL] entity = self . collection . __parent__ [EOL] return entity . attributes ( ) [EOL] [EOL] def relationships ( self ) : [EOL] entity = self . collection . __parent__ [EOL] return entity . relationships ( ) [EOL] [EOL] def backrelationships ( self ) : [EOL] entity = self . collection . __parent__ [EOL] return entity . backrelationships ( ) [EOL] [EOL] def entity ( self ) : [EOL] return self . collection . __parent__ [EOL] [EOL] def resolve_relationship ( self , relationship ) : [EOL] [docstring] [EOL] attr = relationship . reference_attribute ( ) [EOL] entity = attr . entity ( ) [EOL] [EOL] col = content_collection_factory ( entity , self . collection . __application__ ) [EOL] res = col . search ( rulez . field [ attr [ [string] ] ] == self [ relationship [ [string] ] ] ) [EOL] if res : [EOL] return res [ [number] ] [EOL] return None [EOL] [EOL] def resolve_backrelationship ( self , backrelationship ) : [EOL] rel = backrelationship . reference_relationship ( ) [EOL] dm = rel . entity ( ) [EOL] col = content_collection_factory ( dm , self . collection . __application__ ) [EOL] [EOL] attr = rel . reference_attribute ( ) [EOL] [EOL] result = col . search ( rulez . field [ rel [ [string] ] ] == self [ attr [ [string] ] ] ) [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def json ( self ) : [EOL] result = self . base_json ( ) [EOL] for name , rel in self . relationships ( ) . items ( ) : [EOL] item = self . resolve_relationship ( rel ) [EOL] if item : [EOL] result [ name ] = item . base_json ( ) [EOL] else : [EOL] result [ name ] = None [EOL] for name , brel in self . backrelationships ( ) . items ( ) : [EOL] items = self . resolve_backrelationship ( brel ) [EOL] if brel [ [string] ] : [EOL] if items : [EOL] result [ name ] = items [ [number] ] . base_json ( ) [EOL] else : [EOL] result [ name ] = { } [EOL] else : [EOL] result [ name ] = [ item . base_json ( ) for item in items ] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def base_avro_json ( self ) : [EOL] exclude_fields = self . hidden_fields [EOL] cschema = dc2colanderavro . convert ( self . schema , exclude_fields = exclude_fields , request = self . request ) [EOL] cs = cschema ( ) [EOL] cs = cs . bind ( context = self , request = self . request ) [EOL] return cs . serialize ( self . data . as_dict ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def avro_json ( self ) : [EOL] result = self . base_avro_json ( ) [EOL] for name , rel in self . relationships ( ) . items ( ) : [EOL] item = self . resolve_relationship ( rel ) [EOL] if item : [EOL] result [ name ] = item . base_avro_json ( ) [EOL] for name , brel in self . backrelationships ( ) . items ( ) : [EOL] items = self . resolve_backrelationship ( brel ) [EOL] if brel [ [string] ] : [EOL] if items : [EOL] result [ name ] = items [ [number] ] . base_avro_json ( ) [EOL] else : [EOL] result [ name ] = None [EOL] else : [EOL] result [ name ] = [ item . base_avro_json ( ) for item in items ] [EOL] return result [EOL] [EOL] @ morpfw . requestmemoize ( ) def validation_dict ( self ) : [EOL] result = self . as_dict ( ) [EOL] for name , rel in self . relationships ( ) . items ( ) : [EOL] item = self . resolve_relationship ( rel ) [EOL] if item : [EOL] result [ name ] = item . as_dict ( ) [EOL] for name , brel in self . backrelationships ( ) . items ( ) : [EOL] items = self . resolve_backrelationship ( brel ) [EOL] if brel [ [string] ] : [EOL] if items : [EOL] result [ name ] = items [ [number] ] . as_dict ( ) [EOL] else : [EOL] result [ name ] = { } [EOL] else : [EOL] result [ name ] = [ item . as_dict ( ) for item in items if item is not None ] [EOL] return result [EOL] [EOL] def validation_failures ( self ) : [EOL] entity = self . entity ( ) [EOL] data = self . validation_dict ( ) [EOL] result = { [string] : [ ] , [string] : { } } [EOL] for validator in entity . entity_validators ( ) : [EOL] validate = validator . function ( ) [EOL] if not validate ( data ) : [EOL] result [ [string] ] . append ( validator [ [string] ] ) [EOL] [EOL] for attrname , attr in entity . attributes ( ) . items ( ) : [EOL] for validator in attr . builtin_validators ( ) : [EOL] validate = validator [ [string] ] [EOL] if not validate ( self [ attrname ] ) : [EOL] result [ [string] ] . setdefault ( attrname , [ ] ) [EOL] result [ [string] ] [ attrname ] . append ( validator [ [string] ] ) [EOL] [EOL] for validator in attr . validators ( ) : [EOL] validate = validator . function ( ) [EOL] if not validate ( self [ attrname ] ) : [EOL] result [ [string] ] . setdefault ( attrname , [ ] ) [EOL] result [ [string] ] [ attrname ] . append ( validator [ [string] ] ) [EOL] return result [EOL] [EOL] [EOL] def content_collection_factory ( entity , application , allow_invalid = False ) : [EOL] behaviors = entity . behaviors ( ) [EOL] model_markers = [ ] [EOL] modelui_markers = [ ] [EOL] collection_markers = [ ] [EOL] collectionui_markers = [ ] [EOL] [EOL] for appbehavior in application . behaviors ( ) : [EOL] entity_behaviors = getattr ( appbehavior , [string] , { } ) [EOL] entity_behavior = entity_behaviors . get ( entity [ [string] ] , None ) [EOL] [EOL] all_entity_behavior = entity_behaviors . get ( [string] , None ) [EOL] if all_entity_behavior : [EOL] model_markers . append ( all_entity_behavior . model_marker ) [EOL] modelui_markers . append ( all_entity_behavior . modelui_marker ) [EOL] collection_markers . append ( all_entity_behavior . collection_marker ) [EOL] collectionui_markers . append ( all_entity_behavior . collectionui_marker ) [EOL] if entity_behavior : [EOL] model_markers . append ( entity_behavior . model_marker ) [EOL] modelui_markers . append ( entity_behavior . modelui_marker ) [EOL] collection_markers . append ( entity_behavior . collection_marker ) [EOL] collectionui_markers . append ( entity_behavior . collectionui_marker ) [EOL] [EOL] for behavior in behaviors : [EOL] model_markers . append ( behavior . model_marker ) [EOL] modelui_markers . append ( behavior . modelui_marker ) [EOL] collection_markers . append ( behavior . collection_marker ) [EOL] collectionui_markers . append ( behavior . collectionui_marker ) [EOL] [EOL] modelui_markers . append ( EntityContentModelUI ) [EOL] [EOL] ModelUI = type ( [string] , tuple ( modelui_markers ) , { } ) [EOL] [EOL] [comment] [EOL] field_widgets = { } [EOL] field_validators = { } [EOL] for relname , rel in entity . relationships ( ) . items ( ) : [EOL] refsearch = rel . reference_search_attribute ( ) [EOL] ref = rel . reference_attribute ( ) [EOL] ref_field = ref [ [string] ] [EOL] if refsearch : [EOL] refsearch_field = refsearch [ [string] ] [EOL] else : [EOL] refsearch_field = ref [ [string] ] [EOL] [EOL] field_validators . setdefault ( relname , [ ] ) [EOL] [EOL] if not allow_invalid : [EOL] field_validators [ relname ] . append ( EntityContentReferenceValidator ( application_uuid = application . uuid , entity_uuid = ref [ [string] ] , attribute = ref_field , ) ) [EOL] [EOL] field_widgets [ relname ] = EntityContentReferenceWidget ( application_uuid = application . uuid , entity_uuid = ref [ [string] ] , term_field = refsearch_field , value_field = ref_field , ) [EOL] [EOL] dc_schema = entity . dataclass ( validators = field_validators , widgets = field_widgets , allow_invalid = allow_invalid ) [EOL] [EOL] class ContentCollectionUI ( EntityContentCollectionUI ) : [EOL] schema = dc_schema [EOL] modelui_class = ModelUI [EOL] [EOL] collectionui_markers . append ( ContentCollectionUI ) [EOL] [EOL] CollectionUI = type ( [string] , tuple ( collectionui_markers ) , { } ) [EOL] [EOL] class ContentModel ( EntityContentModel ) : [EOL] [EOL] schema = dc_schema [EOL] __path_model__ = EntityContentModel [EOL] [EOL] def ui ( self ) : [EOL] return ModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] model_markers . append ( ContentModel ) [EOL] [EOL] Model = type ( [string] , tuple ( model_markers ) , { } ) [EOL] [EOL] class ContentCollection ( EntityContentCollection ) : [EOL] [EOL] schema = dc_schema [EOL] [EOL] __path_model__ = EntityContentCollection [EOL] [EOL] def ui ( self ) : [EOL] return CollectionUI ( self . request , self ) [EOL] [EOL] collection_markers . append ( ContentCollection ) [EOL] [EOL] Collection = type ( [string] , tuple ( collection_markers ) , { } ) [EOL] [EOL] class Storage ( PgSQLStorage ) : [EOL] model = Model [EOL] [EOL] @ property def session ( self ) : [EOL] return self . request . get_db_session ( [string] ) [EOL] [EOL] return Collection ( application , entity , entity . request , storage = Storage ( entity . request , metadata = application . content_metadata ( ) ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . . app import App [EOL] from . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] [EOL] [EOL] @ App . breadcrumb ( model = EntityContentCollectionUI ) def get_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] app_typeinfo = request . app . get_typeinfo ( [string] , request ) [EOL] [EOL] app = model . collection . application ( ) [EOL] appcol = app . collection [EOL] entity = model . collection . entity ( ) [EOL] [EOL] crumbs = [ { [string] : app_typeinfo [ [string] ] , [string] : request . link ( appcol . ui ( ) ) , [string] : False , } , { [string] : app . title ( ) , [string] : request . link ( app . ui ( ) ) , [string] : False } , { [string] : entity . title ( ) , [string] : request . link ( model ) , [string] : False } , ] [EOL] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] crumbs [ - [number] ] [ [string] ] = True [EOL] return crumbs [EOL] [EOL] [EOL] @ App . breadcrumb ( model = EntityContentModelUI ) def get_breadcrumb ( model , request ) : [EOL] view_title = None [EOL] if request . view_name : [EOL] view_title = request . view_name . replace ( [string] , [string] ) . title ( ) [EOL] [EOL] app_typeinfo = request . app . get_typeinfo ( [string] , request ) [EOL] [EOL] app = model . collection_ui . collection . application ( ) [EOL] appcol = app . collection [EOL] entity = model . collection_ui . collection . entity ( ) [EOL] [EOL] entity_col = app . entity_collections ( ) [ entity [ [string] ] ] [EOL] [EOL] crumbs = [ { [string] : app_typeinfo [ [string] ] , [string] : request . link ( appcol . ui ( ) ) , [string] : False , } , { [string] : app . title ( ) , [string] : request . link ( app . ui ( ) ) , [string] : False } , { [string] : entity . title ( ) , [string] : request . link ( entity_col . ui ( ) ) , [string] : False , } , { [string] : model . model . title ( ) , [string] : request . link ( model ) , [string] : False } , ] [EOL] [EOL] if view_title : [EOL] return crumbs + [ { [string] : view_title , [string] : request . link ( model , [string] + request . view_name ) , [string] : True , } ] [EOL] [EOL] crumbs [ - [number] ] [ [string] ] = True [EOL] return crumbs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Dict [EOL] import morpcc [EOL] import typing [EOL] import json [EOL] [EOL] import colander [EOL] import deform [EOL] import rulez [EOL] from inverter import dc2colander [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import datatable_search [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . . application . model import ApplicationModel [EOL] from . model import content_collection_factory [EOL] from . modelui import EntityContentCollectionUI , EntityContentModelUI [EOL] [EOL] [EOL] @ App . json ( model = EntityContentCollectionUI , name = [string] , permission = crudperm . View ) def term_search ( context , request ) : [EOL] value_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not value_field : [EOL] return { } [EOL] term_field = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term_field : [EOL] return { } [EOL] term = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not term : [EOL] return { } [EOL] [EOL] col = context . collection [EOL] objs = col . search ( query = { [string] : term_field , [string] : [string] , [string] : term } ) [EOL] result = { [string] : [ ] } [EOL] for obj in objs : [EOL] result [ [string] ] . append ( { [string] : obj [ value_field ] , [string] : obj [ term_field ] } ) [EOL] return result [EOL] [EOL] [EOL] @ App . html ( model = EntityContentModelUI , name = [string] , template = [string] , permission = crudperm . View , ) def content_view ( context , request ) : [EOL] result = default_view ( context , request ) [EOL] entity = context . model . entity ( ) [EOL] result [ [string] ] = entity [ [string] ] [EOL] result [ [string] ] = entity [ [string] ] [EOL] result [ [string] ] = [ ] [EOL] for r , rel in sorted ( context . model . relationships ( ) . items ( ) , key = lambda x : x [ [number] ] ) : [EOL] relmodel = context . model . resolve_relationship ( rel ) [EOL] if relmodel : [EOL] colui = EntityContentCollectionUI ( request , relmodel . collection ) [EOL] relmodelui = EntityContentModelUI ( request , relmodel , colui ) [EOL] reldata = default_view ( relmodelui , request ) [EOL] reldata [ [string] ] = rel [ [string] ] [EOL] reldata [ [string] ] = relmodelui [EOL] reldata [ [string] ] = relmodel [EOL] result [ [string] ] . append ( reldata ) [EOL] result [ [string] ] = [ ] [EOL] for br , brel in sorted ( context . model . backrelationships ( ) . items ( ) , key = lambda x : x [ [number] ] ) : [EOL] refmodel = brel . reference_relationship ( ) . entity ( ) [EOL] columns = [ ] [EOL] column_options = [ ] [EOL] for colname , col in refmodel . effective_attributes ( ) . items ( ) : [EOL] columns . append ( col [ [string] ] ) [EOL] column_options . append ( { [string] : colname , [string] : True } ) [EOL] breldata = { [string] : brel [ [string] ] , [string] : brel [ [string] ] , [string] : brel [ [string] ] , [string] : brel [ [string] ] or False , [string] : request . link ( context , [string] . format ( brel [ [string] ] ) , ) , [string] : columns , [string] : json . dumps ( column_options ) , [string] : context . model . resolve_backrelationship ( brel ) , } [EOL] [EOL] if brel [ [string] ] : [EOL] if breldata [ [string] ] : [EOL] item = breldata [ [string] ] [ [number] ] [EOL] itemui = item . ui ( ) [EOL] formschema = dc2colander . convert ( item . schema , request = request , include_fields = itemui . view_include_fields , exclude_fields = itemui . view_exclude_fields , default_tzinfo = request . timezone ( ) , ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = item , request = request ) [EOL] breldata [ [string] ] = deform . Form ( fs ) [EOL] breldata [ [string] ] = item . as_dict ( ) [EOL] breldata [ [string] ] = item [EOL] validate_form ( item , request , breldata [ [string] ] , breldata [ [string] ] ) [EOL] result [ [string] ] . append ( breldata ) [EOL] result [ [string] ] = sorted ( result [ [string] ] , key = lambda x : ( [number] if x [ [string] ] else [number] , x [ [string] ] ) , ) [EOL] [EOL] validate_form ( context . model , request , result [ [string] ] , result [ [string] ] ) [EOL] return result [EOL] [EOL] [EOL] def validate_form ( context , request , form , form_data ) : [EOL] entity = context . entity ( ) [EOL] [EOL] form_errors = [ ] [EOL] for attrname , attr in entity . attributes ( ) . items ( ) : [EOL] field_errors = [ ] [EOL] if attr [ [string] ] : [EOL] if form_data . get ( attrname , None ) is None : [EOL] field_errors . append ( [string] ) [EOL] [EOL] validators = attr . validators ( ) [EOL] for validator in validators : [EOL] validate = validator . function ( ) [EOL] if not validate ( form_data . get ( attrname , None ) ) : [EOL] field_errors . append ( validator [ [string] ] ) [EOL] [EOL] if field_errors : [EOL] field_error = colander . Invalid ( form [ attrname ] . widget , field_errors ) [EOL] form [ attrname ] . widget . handle_error ( form [ attrname ] , field_error ) [EOL] [EOL] for validator in entity . entity_validators ( ) : [EOL] validate = validator . function ( ) [EOL] if not validate ( context . validation_dict ( ) ) : [EOL] form_errors . append ( validator [ [string] ] ) [EOL] [EOL] if form_errors : [EOL] form_error = colander . Invalid ( form . widget , form_errors ) [EOL] form . widget . handle_error ( form , form_error ) [EOL] [EOL] [EOL] def _entity_dt_result_render ( context , request , columns , objs ) : [EOL] rows = [ ] [EOL] collection = context . collection [EOL] for o in objs : [EOL] row = [ ] [EOL] formschema = dc2colander . convert ( collection . schema , request = request , default_tzinfo = request . timezone ( ) ) [EOL] fs = formschema ( ) [EOL] fs = fs . bind ( context = o , request = request ) [EOL] form = deform . Form ( fs ) [EOL] validate_form ( o , request , form , o . as_dict ( ) ) [EOL] for c in columns : [EOL] if c [ [string] ] . startswith ( [string] ) : [EOL] row . append ( context . get_structure_column ( o , request , c [ [string] ] ) ) [EOL] else : [EOL] field = form [ c [ [string] ] ] [EOL] value = o . data [ c [ [string] ] ] [EOL] if value is None : [EOL] value = colander . null [EOL] out = field . render ( value , readonly = True , request = request , context = context ) [EOL] if field . error : [EOL] for msg in field . error . messages ( ) : [EOL] out += ( [string] [string] [string] ) . format ( msg ) [EOL] row . append ( out ) [EOL] rows . append ( row ) [EOL] return rows [EOL] [EOL] [EOL] @ App . json ( model = EntityContentModelUI , name = [string] , permission = crudperm . View , ) def relationship_content_search ( context , request ) : [EOL] brel_uuid = request . GET . get ( [string] , [string] ) . strip ( ) [EOL] if not brel_uuid : [EOL] return { } [EOL] [EOL] brel = request . get_collection ( [string] ) . get ( brel_uuid ) [EOL] rel = brel . reference_relationship ( ) [EOL] attr = rel . reference_attribute ( ) [EOL] collectionui = content_collection_factory ( brel . reference_entity ( ) , context . model . collection . __application__ ) . ui ( ) [EOL] [EOL] return datatable_search ( collectionui , request , additional_filters = rulez . field [ rel [ [string] ] ] == context . model [ attr [ [string] ] ] , renderer = _entity_dt_result_render , ) [EOL]	
from typing import List , Any , Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] [EOL] [EOL] class EntityContentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class EntityContentCollectionUI ( CollectionUI ) : [EOL] modelui_class = EntityContentModelUI [EOL] [EOL] @ property def columns ( self ) : [EOL] columns = [ ] [EOL] [EOL] attrs = self . collection . __parent__ . effective_attributes ( ) [EOL] rels = self . collection . __parent__ . relationships ( ) [EOL] for n , attr in attrs . items ( ) : [EOL] columns . append ( { [string] : attr [ [string] ] , [string] : n } ) [EOL] [EOL] for n , rel in rels . items ( ) : [EOL] columns . append ( { [string] : rel [ [string] ] , [string] : n } ) [EOL] [EOL] [comment] [EOL] columns = sorted ( columns , key = lambda x : x [ [string] ] ) [EOL] columns = columns [ : [number] ] [EOL] columns . append ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] return columns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entitycontent.modelui.EntityContentModelUI]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] [EOL] [comment] [EOL] from . modelui import BehaviorAssignmentCollectionUI , BehaviorAssignmentModelUI [EOL] from . schema import BehaviorAssignmentSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class BehaviorAssignmentModel ( morpfw . Model ) : [EOL] schema = BehaviorAssignmentSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return BehaviorAssignmentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class BehaviorAssignmentCollection ( morpfw . Collection ) : [EOL] schema = BehaviorAssignmentSchema [EOL] [EOL] [comment] [EOL] [EOL] def ui ( self ) : [EOL] return BehaviorAssignmentCollectionUI ( self . request , self ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.behaviorassignment.model.BehaviorAssignmentModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.behaviorassignment.model.BehaviorAssignmentCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class BehaviorAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class BehaviorAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = BehaviorAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.behaviorassignment.modelui.BehaviorAssignmentModelUI]$ 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class PermissionAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class PermissionAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = PermissionAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.permissionassignment.modelui.PermissionAssignmentModelUI]$ 0 0 0
	0
import rulez [EOL] from morpcc . crud . model import CollectionUI , ModelUI [EOL] from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] from morpfw . crud . model import Collection , Model [EOL] [EOL] from . . app import App [EOL] from . . permission import ManagePermission [EOL] from . model import PermissionAssignmentCollection , PermissionAssignmentModel [EOL] [EOL] [comment] [EOL] from . modelui import PermissionAssignmentCollectionUI , PermissionAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import morpcc [EOL] import typing [EOL] from . . app import App [EOL] from . model import EndpointHandlerModel , EndpointHandlerCollection [EOL] [comment] [EOL] from . modelui import EndpointHandlerModelUI , EndpointHandlerCollectionUI [EOL] [comment] [EOL] from . storage import EndpointHandlerStorage [EOL] [EOL] [EOL] def get_collection ( request ) : [EOL] storage = EndpointHandlerStorage ( request ) [EOL] return EndpointHandlerCollection ( request , storage ) [EOL] [EOL] [EOL] def get_model ( request , identifier ) : [EOL] col = get_collection ( request ) [EOL] return col . get ( identifier ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointHandlerCollection , path = [string] ) def _get_collection ( request ) : [EOL] return get_collection ( request ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointHandlerModel , path = [string] ) def _get_model ( request , identifier ) : [EOL] return get_model ( request , identifier ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ App . path ( model = EndpointHandlerCollectionUI , path = [string] ) def _get_collection_ui ( request ) : [EOL] collection = get_collection ( request ) [EOL] return collection . ui ( ) [EOL] [EOL] [EOL] @ App . path ( model = EndpointHandlerModelUI , path = [string] ) def _get_model_ui ( request , identifier ) : [EOL] model = get_model ( request , identifier ) [EOL] if model : [EOL] return model . ui ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional [EOL] import morpcc [EOL] import builtins [EOL] import typing [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] [EOL] import morpfw [EOL] from deform . widget import SelectWidget [EOL] [EOL] from . . deform . codewidget import CodeWidget [EOL] from . . deform . referencewidget import ReferenceWidget [EOL] from . . validator . reference import ReferenceValidator [EOL] [EOL] ALLOWED_METHODS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def valid_method ( request , schema , field , value , mode = None ) : [EOL] if value not in ALLOWED_METHODS : [EOL] return [string] [EOL] [EOL] [EOL] @ dataclass class EndpointHandlerSchema ( morpfw . Schema ) : [EOL] [EOL] endpoint_uuid = field ( default = None , metadata = { [string] : [string] , [string] : [string] , [string] : True , [string] : True , [string] : ReferenceWidget ( [string] , term_field = [string] , value_field = [string] ) , [string] : [ ReferenceValidator ( [string] , [string] ) ] , } , ) [EOL] [EOL] method = field ( default = None , metadata = { [string] : True , [string] : True , [string] : SelectWidget ( values = [ ( k , k ) for k in ALLOWED_METHODS ] ) , [string] : [ valid_method ] , } , ) [EOL] code = field ( default = [string] , metadata = { [string] : [string] , [string] : True , [string] : CodeWidget ( ) , } , ) [EOL] [EOL] __unique_constraint__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import EndpointHandlerModel [EOL] [EOL] [EOL] class EndpointHandler ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] endpoint_uuid = sa . Column ( morpfw . sql . GUID ( ) ) [EOL] method = sa . Column ( sa . String ( length = [number] ) ) [EOL] code = sa . Column ( sa . Text ( ) ) [EOL] [EOL] [EOL] class EndpointHandlerStorage ( morpfw . SQLStorage ) : [EOL] model = EndpointHandlerModel [EOL] orm_model = EndpointHandler [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.endpointhandler.storage.EndpointHandler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.storage.EndpointHandler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.storage.EndpointHandler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.model.EndpointHandlerModel]$ 0 0 0 $typing.Type[morpcc.endpointhandler.storage.EndpointHandler]$ 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] from RestrictedPython import compile_restricted [EOL] [EOL] from . . restrictedpython import get_restricted_function [EOL] [EOL] [comment] [EOL] from . modelui import EndpointHandlerCollectionUI , EndpointHandlerModelUI [EOL] from . schema import EndpointHandlerSchema [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class EndpointHandlerModel ( morpfw . Model ) : [EOL] schema = EndpointHandlerSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return EndpointHandlerModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] [comment] [EOL] @ morpfw . requestmemoize ( ) def endpoint ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . get ( self [ [string] ] ) [EOL] [EOL] @ morpfw . memoize ( ) def bytecode ( self ) : [EOL] bytecode = compile_restricted ( self [ [string] ] , filename = [string] . format ( self [ [string] ] , self . endpoint ( ) [ [string] ] ) , mode = [string] , ) [EOL] return bytecode [EOL] [EOL] @ morpfw . memoize ( ) def function ( self ) : [EOL] function = get_restricted_function ( self . request . app , self . bytecode ( ) , [string] ) [EOL] return function [EOL] [EOL] [EOL] class EndpointHandlerCollection ( morpfw . Collection ) : [EOL] schema = EndpointHandlerSchema [EOL] [EOL] [comment] [EOL] def ui ( self ) : [EOL] return EndpointHandlerCollectionUI ( self . request , self ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.schema.EndpointHandlerSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.schema.EndpointHandlerSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class EndpointHandlerModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class EndpointHandlerCollectionUI ( CollectionUI ) : [EOL] modelui_class = EndpointHandlerModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.endpointhandler.modelui.EndpointHandlerModelUI]$ 0 0 0
	0
from . . app import App [EOL] from . model import EndpointHandlerCollection [EOL] from . model import EndpointHandlerModel [EOL] from . schema import EndpointHandlerSchema [EOL] from . path import get_collection , get_model [EOL] [comment] [EOL] from . modelui import EndpointHandlerCollectionUI [EOL] from . modelui import EndpointHandlerModelUI [EOL] [comment] [EOL] [EOL] [EOL] @ App . typeinfo ( name = [string] , schema = EndpointHandlerSchema ) def get_typeinfo ( request ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : EndpointHandlerSchema , [string] : EndpointHandlerCollection , [string] : get_collection , [string] : EndpointHandlerModel , [string] : get_model , [string] : EndpointHandlerCollectionUI , [string] : EndpointHandlerModelUI , [string] : True } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import EndpointHandlerCollection , EndpointHandlerModel [EOL] [EOL] [comment] [EOL] from . modelui import EndpointHandlerCollectionUI , EndpointHandlerModelUI [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] from morpcc . crud . model import ModelUI , CollectionUI [EOL] [EOL] [EOL] class EntityValidatorAssignmentModelUI ( ModelUI ) : [EOL] pass [EOL] [EOL] [EOL] class EntityValidatorAssignmentCollectionUI ( CollectionUI ) : [EOL] modelui_class = EntityValidatorAssignmentModelUI [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.modelui.EntityValidatorAssignmentModelUI]$ 0 0 0
from typing import Any , Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import rulez [EOL] [EOL] from . modelui import ( EntityValidatorAssignmentCollectionUI , EntityValidatorAssignmentModelUI , ) [EOL] from . schema import EntityValidatorAssignmentSchema [EOL] [EOL] [EOL] class EntityValidatorAssignmentModel ( morpfw . Model ) : [EOL] schema = EntityValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityValidatorAssignmentModelUI ( self . request , self , self . collection . ui ( ) ) [EOL] [EOL] @ morpfw . requestmemoize ( ) def validator ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] validators = col . search ( rulez . field [ [string] ] == self [ [string] ] ) [EOL] if validators : [EOL] return validators [ [number] ] [EOL] return None [EOL] [EOL] @ morpfw . requestmemoize ( ) def entity ( self ) : [EOL] col = self . request . get_collection ( [string] ) [EOL] return col . get ( self [ [string] ] ) [EOL] [EOL] [EOL] class EntityValidatorAssignmentCollection ( morpfw . Collection ) : [EOL] schema = EntityValidatorAssignmentSchema [EOL] [EOL] def ui ( self ) : [EOL] return EntityValidatorAssignmentCollectionUI ( self . request , self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.model.EntityValidatorAssignmentModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.model.EntityValidatorAssignmentCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import morpcc [EOL] import typing [EOL] import morpfw [EOL] import morpfw . sql [EOL] import sqlalchemy as sa [EOL] import sqlalchemy_jsonfield as sajson [EOL] [EOL] from . model import EntityValidatorAssignmentModel [EOL] [EOL] [EOL] class EntityValidatorAssignment ( morpfw . sql . Base ) : [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] entity_uuid = sa . Column ( morpfw . sql . GUID ( ) , index = True ) [EOL] entityvalidator_name = sa . Column ( sa . String ( [number] ) , index = True ) [EOL] [EOL] [EOL] class EntityValidatorAssignmentStorage ( morpfw . SQLStorage ) : [EOL] model = EntityValidatorAssignmentModel [EOL] orm_model = EntityValidatorAssignment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.storage.EntityValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.storage.EntityValidatorAssignment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.model.EntityValidatorAssignmentModel]$ 0 0 0 $typing.Type[morpcc.entityvalidatorassignment.storage.EntityValidatorAssignment]$ 0 0 0
from morpcc . crud . view . edit import edit as default_edit [EOL] from morpcc . crud . view . listing import listing as default_listing [EOL] from morpcc . crud . view . view import view as default_view [EOL] from morpfw . crud import permission as crudperm [EOL] [EOL] from . . app import App [EOL] from . model import EntityValidatorAssignmentModel , EntityValidatorAssignmentCollection [EOL] [comment] [EOL] from . modelui import EntityValidatorAssignmentModelUI , EntityValidatorAssignmentCollectionUI [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] class BaseBehavior ( object ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0