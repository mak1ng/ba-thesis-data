from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import click [EOL] [EOL] from twit2toot import get_mastodon , get_twitter [EOL] [EOL] [EOL] @ click . command ( ) def toot_latest_tweet ( ) : [EOL] [docstring] [EOL] twitter = get_twitter ( ) [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] tweet = twitter . user_timeline ( count = [number] ) [ [number] ] [EOL] response = mastodon . toot ( tweet . text ) [EOL] [EOL] click . echo ( response ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [docstring] [EOL] toot_latest_tweet ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type [EOL] import typing [EOL] import twit2toot [EOL] import datetime [EOL] [docstring] [EOL] import datetime [EOL] [EOL] import factory [EOL] [EOL] from tweepy import models [EOL] [EOL] [EOL] class User ( models . User ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , api = None , id = None ) : [EOL] [comment] [EOL] self . id = id [EOL] [EOL] [EOL] class Status ( models . Status ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , id = None , created_at = None , author = None , text = [string] , entities = [ ] , in_reply_to_status_id = False , in_reply_to_user_id = False ) : [EOL] super ( Status , self ) . __init__ ( ) [EOL] [EOL] self . id = id [EOL] self . created_at = created_at [EOL] self . author = author [EOL] self . text = text [EOL] self . entities = entities [EOL] self . in_reply_to_status_id = in_reply_to_status_id [EOL] self . in_reply_to_user_id = in_reply_to_user_id [EOL] [EOL] [EOL] class UserFactory ( factory . Factory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = User [EOL] [EOL] id = [number] [EOL] [EOL] [EOL] class StatusFactory ( factory . Factory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Status [EOL] [EOL] id = [number] [EOL] created_at = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] author = factory . SubFactory ( UserFactory ) [EOL] text = [string] [EOL] entities = { [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] in_reply_to_status_id = False [EOL] in_reply_to_user_id = False [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import json [EOL] [EOL] from mastodon import Mastodon [EOL] [EOL] import tweepy [EOL] [EOL] from . utils import process_tweet [EOL] [EOL] [EOL] try : [EOL] with open ( [string] ) as f : [EOL] secrets = json . loads ( f . read ( ) ) [EOL] except FileNotFoundError : [comment] [EOL] error_msg = [string] [EOL] raise FileNotFoundError ( error_msg ) [EOL] [EOL] [EOL] [comment] [EOL] def get_twitter ( ) : [EOL] [docstring] [EOL] auth = tweepy . OAuthHandler ( secrets [ [string] ] [ [string] ] , secrets [ [string] ] [ [string] ] , ) [EOL] auth . set_access_token ( secrets [ [string] ] [ [string] ] , secrets [ [string] ] [ [string] ] , ) [EOL] [EOL] return tweepy . API ( auth ) [EOL] [EOL] [EOL] [comment] [EOL] def get_mastodon ( ) : [EOL] [docstring] [EOL] mastodon = Mastodon ( client_id = secrets [ [string] ] [ [string] ] , client_secret = secrets [ [string] ] [ [string] ] , access_token = secrets [ [string] ] [ [string] ] , api_base_url = secrets [ [string] ] [ [string] ] , ) [EOL] [EOL] return mastodon [EOL] [EOL] [EOL] def toot_latest_tweet ( ) : [EOL] [docstring] [EOL] twitter = get_twitter ( ) [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] tweet = twitter . user_timeline ( count = [number] ) [ [number] ] [EOL] response = mastodon . toot ( tweet . text ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def crosspost_to_mastodon ( tweet , mastodon ) : [EOL] [docstring] [EOL] toot_dict = process_tweet ( tweet ) [EOL] [EOL] response = mastodon . status_post ( status = toot_dict [ [string] ] , ) [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Pattern , List , Any [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] from html import escape [EOL] [EOL] from tweepy . models import Status [EOL] [EOL] [EOL] def normalize_newlines ( text ) : [EOL] [docstring] [EOL] re_newlines = re . compile ( [string] ) [EOL] [EOL] return re_newlines . sub ( [string] , str ( text ) ) [EOL] [EOL] [EOL] def linebreaks ( value , autoescape = False ) : [EOL] [docstring] [EOL] value = normalize_newlines ( value ) [EOL] paras = re . split ( [string] , str ( value ) ) [EOL] if autoescape : [EOL] paras = [ [string] % escape ( p ) . replace ( [string] , [string] ) for p in paras ] [EOL] else : [EOL] paras = [ [string] % p . replace ( [string] , [string] ) for p in paras ] [EOL] [EOL] return [string] . join ( paras ) [EOL] [EOL] [EOL] def process_tweet ( tweet ) : [EOL] [docstring] [EOL] assert isinstance ( tweet , Status ) [EOL] [EOL] urls = tweet . entities . get ( [string] ) [EOL] [EOL] try : [EOL] [comment] [EOL] url = urls [ [number] ] [EOL] [EOL] expanded_url = url [ [string] ] [EOL] url = url [ [string] ] [EOL] text = tweet . text . replace ( url , expanded_url ) [EOL] except IndexError : [EOL] text = tweet . text [EOL] [EOL] result = { [string] : text , [string] : None , [string] : None , [string] : False , [string] : [string] , [string] : None , } [EOL] [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from twit2toot import get_mastodon , get_twitter [EOL] [EOL] [EOL] @ pytest . fixture ( ) def mastodon ( ) : [EOL] [docstring] [EOL] return get_mastodon ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def sample_tweets ( ) : [EOL] [docstring] [EOL] with patch ( [string] ) as mock_response : [EOL] with open ( [string] ) as f : [EOL] json_data = f . read ( ) [EOL] mock_response . return_value . status_code = [number] [EOL] mock_response . return_value . text = json_data [EOL] [EOL] twitter = get_twitter ( ) [EOL] [EOL] return twitter . user_timeline ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern , Any [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] [EOL] from twit2toot . factories import StatusFactory [EOL] from twit2toot . utils import process_tweet [EOL] [EOL] [EOL] [comment] [EOL] t_co = re . compile ( [string] ) [EOL] [EOL] [EOL] class TestProcessing : [EOL] [docstring] [EOL] [EOL] def test_tweet_with_link ( self ) : [comment] [EOL] [comment] [EOL] tweet = StatusFactory . build ( text = [string] , entities = { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , } , ] , } , ) [EOL] [EOL] [comment] [EOL] toot_dict = process_tweet ( tweet ) [EOL] text = toot_dict [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert not t_co . match ( text ) [EOL] assert [string] in text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0
from typing import Pattern , Any [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] [EOL] import pytest [EOL] [EOL] from tweepy . models import Status [EOL] [EOL] from twit2toot import crosspost_to_mastodon [EOL] from twit2toot . utils import linebreaks [EOL] [EOL] [comment] [EOL] t_co = re . compile ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_can_read_tweets_from_sample_file ( sample_tweets ) : [comment] [EOL] [comment] [EOL] tweets = sample_tweets [EOL] [EOL] [comment] [EOL] assert len ( tweets ) > [number] [EOL] assert isinstance ( tweets [ - [number] ] , Status ) [EOL] [EOL] [EOL] @ pytest . mark . api def test_can_toot_a_simple_tweet ( mastodon , sample_tweets ) : [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tweet = sample_tweets [ [number] ] [EOL] [EOL] assert not tweet . retweeted [EOL] assert not tweet . in_reply_to_user_id [EOL] assert not tweet . in_reply_to_status_id [EOL] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] [EOL] [comment] [EOL] response = crosspost_to_mastodon ( tweet , mastodon ) [EOL] [EOL] [comment] [EOL] assert type ( response [ [string] ] ) == int [EOL] [EOL] assert response [ [string] ] == linebreaks ( tweet . text ) [EOL] assert response [ [string] ] == [ ] [EOL] [EOL] assert not response [ [string] ] [EOL] assert not response [ [string] ] [EOL] [EOL] mastodon . status_delete ( response [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . api def test_can_toot_a_tweet_with_one_link ( mastodon , sample_tweets ) : [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tweet = sample_tweets [ [number] ] [EOL] [EOL] assert not tweet . in_reply_to_user_id [EOL] assert not tweet . in_reply_to_status_id [EOL] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert tweet . entities [ [string] ] == [ ] [EOL] assert len ( tweet . entities [ [string] ] ) == [number] [EOL] [EOL] link = tweet . entities [ [string] ] [ [number] ] [EOL] assert link [ [string] ] . startswith ( [string] ) [EOL] [EOL] [comment] [EOL] response = crosspost_to_mastodon ( tweet , mastodon ) [EOL] [EOL] [comment] [EOL] assert not t_co . match ( response [ [string] ] ) [EOL] assert tweet . entities [ [string] ] [ [number] ] [ [string] ] in response [ [string] ] [EOL] [EOL] mastodon . status_delete ( response [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from tweepy . models import Status [EOL] [EOL] from twit2toot import get_mastodon , get_twitter [EOL] [EOL] [EOL] class TestUserTimeline : [comment] [EOL] [EOL] @ pytest . mark . api def test_get_user_timeline ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] twitter = get_twitter ( ) [EOL] response = twitter . user_timeline ( count = [number] ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response , list ) [EOL] assert len ( response ) == [number] [EOL] [EOL] [comment] [EOL] tweet = response [ [number] ] [EOL] assert isinstance ( tweet , Status ) [EOL] [EOL] @ patch ( [string] ) def test_get_user_timeline_while_mocking_the_api_response ( self , mock_response ) : [EOL] [docstring] [EOL] with open ( [string] ) as f : [EOL] json_data = f . read ( ) [EOL] [EOL] mock_response . return_value . status_code = [number] [EOL] mock_response . return_value . text = json_data [EOL] [EOL] [comment] [EOL] [comment] [EOL] twitter = get_twitter ( ) [EOL] response = twitter . user_timeline ( ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response , list ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response [ [number] ] , Status ) [EOL] [EOL] [EOL] class TestWritingToMastodon : [comment] [EOL] [EOL] @ pytest . mark . api def test_can_send_toot ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] [comment] [EOL] text = [string] [EOL] response = mastodon . toot ( text ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response . id , int ) [EOL] assert text in response [ [string] ] [EOL] [EOL] mastodon . status_delete ( response [ [string] ] ) [EOL] [EOL] @ patch ( [string] ) def test_can_send_toot_with_mock ( self , mock_response ) : [EOL] [docstring] [EOL] from . data . toots import TOOT_SIMPLE [EOL] mock_response . return_value = TOOT_SIMPLE [EOL] [EOL] [comment] [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] [comment] [EOL] text = [string] [EOL] response = mastodon . toot ( text ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response [ [string] ] , int ) [EOL] assert text in response [ [string] ] [EOL] [EOL] [EOL] class TestTwitter2MastodonBridge : [comment] [EOL] [EOL] @ pytest . mark . api def test_bridge_latest_tweet_to_mastodon ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] twitter = get_twitter ( ) [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] [comment] [EOL] tweet = twitter . user_timeline ( count = [number] ) [ [number] ] [EOL] text = tweet . text [EOL] response = mastodon . toot ( text ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response . id , int ) [EOL] [comment] [EOL] [EOL] mastodon . status_delete ( response [ [string] ] ) [EOL] [EOL] def test_bridge_latest_tweet_to_mastodon_using_mocks ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] twitter = get_twitter ( ) [EOL] [EOL] [comment] [EOL] with patch ( [string] ) as mock_response : [EOL] with open ( [string] ) as f : [EOL] json_data = f . read ( ) [EOL] mock_response . return_value . status_code = [number] [EOL] mock_response . return_value . text = json_data [EOL] [EOL] tweet = twitter . user_timeline ( count = [number] ) [ [number] ] [EOL] text = tweet . text [EOL] [EOL] mastodon = get_mastodon ( ) [EOL] [EOL] with patch ( [string] ) as mock_response : [EOL] from . data . toots import TOOT_SIMPLE [EOL] mock_response . return_value = TOOT_SIMPLE [EOL] [EOL] response = mastodon . toot ( text ) [EOL] [EOL] [comment] [EOL] assert isinstance ( response [ [string] ] , int ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Union , Dict , List , Any [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] import datetime [EOL] [EOL] from dateutil import tz [EOL] [EOL] [EOL] [comment] [EOL] TOOT_SIMPLE = { [string] : [number] , [string] : datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tz . tzutc ( ) ) , [string] : None , [string] : None , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : False , [string] : False , [string] : False , [string] : None , [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = tz . tzutc ( ) ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , } , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0