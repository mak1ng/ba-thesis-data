from typing import Any [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from jsonschema import validate [EOL] from os import path [EOL] from os import listdir [EOL] import pytest [EOL] [EOL] from virgene . common_defs import FEATURES_DIR [EOL] from virgene . common_defs import SRC_DIR [EOL] [EOL] [EOL] def _load_json_path ( json_path ) : [EOL] with open ( json_path ) as json_file : [EOL] return json . load ( json_file ) [EOL] [EOL] def _find_feature_paths ( ) : [EOL] return [ path . join ( FEATURES_DIR , x ) for x in listdir ( FEATURES_DIR ) ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , _find_feature_paths ( ) ) def test_validate_feature_schema ( feature_path ) : [EOL] feature_schema = _load_json_path ( path . join ( SRC_DIR , [string] ) ) [EOL] feature = _load_json_path ( feature_path ) [EOL] validate ( feature , feature_schema ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import jinja2 [EOL] import typing [EOL] import jinja2 [EOL] from os import path [EOL] [EOL] from virgene . common_defs import TEMPLATES_DIR [EOL] from virgene . common_defs import FEATURES_DIR [EOL] from virgene . builtin_feature import BuiltinFeature [EOL] from virgene . plugin_feature import PluginFeature [EOL] from virgene . snippet_feature import SnippetFeature [EOL] [EOL] jinja_env = jinja2 . Environment ( loader = jinja2 . FileSystemLoader ( TEMPLATES_DIR ) , keep_trailing_newline = True , trim_blocks = True , lstrip_blocks = True , line_statement_prefix = [string] , line_comment_prefix = [string] ) [EOL] [EOL] [EOL] def test_one_line_feature ( ) : [EOL] number_path = path . join ( FEATURES_DIR , [string] ) [EOL] feature = BuiltinFeature . from_feature_path ( number_path ) [EOL] output = feature . render ( jinja_env ) [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert len ( output . splitlines ( ) ) == [number] [EOL] [EOL] [EOL] def test_plugin_feature ( ) : [EOL] ctrlp_path = path . join ( FEATURES_DIR , [string] ) [EOL] feature = PluginFeature . from_feature_path ( ctrlp_path ) [EOL] output = feature . render ( jinja_env ) [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert len ( output . splitlines ( ) ) > [number] [EOL] [EOL] [EOL] def test_snippet_feature ( ) : [EOL] disable_arrow_keys_path = path . join ( FEATURES_DIR , [string] ) [EOL] feature = SnippetFeature . from_feature_path ( disable_arrow_keys_path ) [EOL] output = feature . render ( jinja_env ) [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert [string] in output [EOL] assert len ( output . splitlines ( ) ) > [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import virgene [EOL] import typing [EOL] import builtins [EOL] import pytest [EOL] import json [EOL] import jsonschema [EOL] from os import path [EOL] [EOL] from virgene . common_defs import SRC_DIR [EOL] from virgene . feature_base import FeatureBase [EOL] from virgene . plugin_feature import PluginFeature [EOL] from virgene . default_encoder import DefaultEncoder [EOL] from virgene . config_mgr import ConfigMgr [EOL] [EOL] [EOL] def _load_json_path ( json_path ) : [EOL] with open ( json_path ) as json_file : [EOL] return json . load ( json_file ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( FeatureBase , [string] ) , ( PluginFeature , [string] ) ] ) def test_feature_encode_decode ( feature_class , feature_feature_path ) : [EOL] feature = feature_class . from_feature_path ( feature_feature_path ) [EOL] encoded = json . dumps ( feature , cls = DefaultEncoder , indent = [number] ) [EOL] decoded_feature_json = json . loads ( encoded ) [EOL] feature_schema = _load_json_path ( path . join ( SRC_DIR , [string] ) ) [EOL] jsonschema . validate ( decoded_feature_json , feature_schema ) [EOL] decoded_feature = feature_class . from_feature_json ( decoded_feature_json ) [EOL] assert ( feature == decoded_feature ) [EOL] [EOL] [EOL] def test_generate_default_vimrc ( ) : [EOL] config_mgr = ConfigMgr ( ) [EOL] default_config = config_mgr . build_default_config ( ) [EOL] vimrc = config_mgr . generate ( default_config ) [EOL] print ( vimrc ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import virgene [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] [EOL] from virgene . default_encoder import DefaultEncoder [EOL] from virgene . options import BooleanOption [EOL] from virgene . options import ChoiceOption [EOL] from virgene . options import MultipleSelectionOption [EOL] from virgene . options import OptionDecoder [EOL] [EOL] [EOL] def test_boolean_option_set ( ) : [EOL] bool_opt = BooleanOption ( [string] , [string] , True , None , [string] ) [EOL] bool_opt . set_value ( False ) [EOL] assert bool_opt . value is False [EOL] [EOL] [EOL] def test_choice_option_set ( ) : [EOL] choice_opt = ChoiceOption ( [string] , [string] , [string] , None , [string] , [ [string] , [string] , [string] ] ) [EOL] choice_opt . set_value ( [string] ) [EOL] assert choice_opt . value == [string] [EOL] [EOL] [EOL] def test_boolean_option_set_bad_value ( ) : [EOL] bool_opt = BooleanOption ( [string] , [string] , True , None , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] bool_opt . set_value ( [string] ) [EOL] [EOL] [EOL] def test_choice_option_set_bad_value ( ) : [EOL] choice_opt = ChoiceOption ( [string] , [string] , [string] , None , [string] , [ [string] , [string] , [string] ] ) [EOL] with pytest . raises ( ValueError ) : [EOL] choice_opt . set_value ( [string] ) [EOL] [EOL] [EOL] def test_boolean_option_bad_default_value ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] BooleanOption ( [string] , [string] , [string] , None , [string] ) [EOL] [EOL] [EOL] def test_choice_option_bad_default_value ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] ChoiceOption ( [string] , [string] , [string] , None , [string] , [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def test_bool_encode_decode ( ) : [EOL] bool_opt = BooleanOption ( [string] , [string] , True , None , [string] ) [EOL] encoded = json . dumps ( bool_opt , cls = DefaultEncoder ) [EOL] decoded = OptionDecoder . from_json ( json . loads ( encoded ) ) [EOL] assert bool_opt == decoded [EOL] [EOL] [EOL] def test_choice_encode_decode ( ) : [EOL] choice_opt = ChoiceOption ( [string] , [string] , [string] , None , [string] , [ [string] , [string] , [string] ] ) [EOL] encoded = json . dumps ( choice_opt , cls = DefaultEncoder ) [EOL] decoded = OptionDecoder . from_json ( json . loads ( encoded ) ) [EOL] assert choice_opt == decoded [EOL] [EOL] [EOL] def test_multiple_selection_encode_decode ( ) : [EOL] ms_opt = MultipleSelectionOption ( [string] , [string] , ( [string] , [string] ) , None , [string] , [ [string] , [string] , [string] ] ) [EOL] encoded = json . dumps ( ms_opt , cls = DefaultEncoder ) [EOL] decoded = OptionDecoder . from_json ( json . loads ( encoded ) ) [EOL] assert ms_opt == decoded [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from os import path [EOL] import json [EOL] from virgene . common_defs import SRC_DIR [EOL] from virgene . feature_base import FeatureBase [EOL] [EOL] [EOL] class BuiltinFeature ( FeatureBase ) : [EOL] [EOL] def __init__ ( self , name , identifier , feature_type , description , enabled , category , installed , template ) : [EOL] super ( ) . __init__ ( name , identifier , feature_type , description , enabled , category , installed , template , [ ] ) [EOL] [comment] [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , self . __class__ ) : [EOL] return self . __dict__ == other . __dict__ [EOL] return NotImplemented [EOL] [EOL] def __ne__ ( self , other ) : [EOL] if isinstance ( other , self . __class__ ) : [EOL] return not self . __eq__ ( other ) [EOL] return NotImplemented [EOL] [EOL] def __hash__ ( self ) : [EOL] return hash ( tuple ( sorted ( self . __dict__ . items ( ) ) ) ) [EOL] [EOL] def __repr__ ( self , * args , ** kwargs ) : [EOL] return [string] [string] [string] % ( self . name , self . feature_type , self . description , self . enabled , self . category , self . installed , self . template ) [EOL] [EOL] @ staticmethod def from_feature_json ( feature_json ) : [EOL] return BuiltinFeature ( feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] ) [EOL] [EOL] @ staticmethod def from_feature_path ( feature_path ) : [EOL] with open ( path . join ( SRC_DIR , [string] , feature_path ) ) as feature_file : [EOL] feature_json = json . load ( feature_file ) [EOL] [EOL] return BuiltinFeature . from_feature_json ( feature_json ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import virgene [EOL] import typing [EOL] from typing import Dict [EOL] from typing import List [EOL] [EOL] from virgene . feature_decoder import FeatureDecoder [EOL] [EOL] [EOL] class Config : [EOL] [EOL] def __init__ ( self ) : [EOL] self . features = [ ] [EOL] self . _features_by_id = { } [EOL] [EOL] @ staticmethod def from_json ( config_json ) : [EOL] features_json = config_json [ [string] ] [EOL] config = Config ( ) [EOL] for feature_json in features_json : [EOL] feature = FeatureDecoder . decode ( feature_json ) [EOL] config . add_feature ( feature ) [EOL] return config [EOL] [EOL] def add_feature ( self , feature ) : [EOL] self . features . append ( feature ) [EOL] self . _features_by_id [ feature . identifier ] = feature [EOL] [EOL] def apply_config ( self , config ) : [EOL] for feature_config in config : [EOL] feature = self . _features_by_id [ feature_config ] [EOL] feature . apply_config ( config [ feature_config ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $virgene.config.Config$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $virgene.config.Config$ 0 0 0 $typing.Any$ 0 0 0 $virgene.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import jinja2 [EOL] import virgene [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import os [EOL] from os import path [EOL] from typing import List [EOL] import jinja2 [EOL] [EOL] from virgene . common_defs import SRC_DIR , TEMPLATES_DIR , FEATURES_DIR [EOL] from virgene . config import Config [EOL] from virgene . default_encoder import DefaultEncoder [EOL] from virgene . feature_decoder import FeatureDecoder [EOL] [EOL] [EOL] class ConfigMgr : [EOL] [EOL] def __init__ ( self ) : [EOL] self . jinja_env = jinja2 . Environment ( loader = jinja2 . FileSystemLoader ( path . join ( SRC_DIR , [string] ) ) , keep_trailing_newline = True , trim_blocks = True , lstrip_blocks = True , line_statement_prefix = [string] , line_comment_prefix = [string] ) [EOL] self . config = None [EOL] [EOL] @ staticmethod def load_config_path ( config_path ) : [EOL] return Config . from_json ( ConfigMgr . read_json_path ( config_path ) ) [EOL] [EOL] @ staticmethod def read_json_path ( json_path ) : [EOL] with open ( json_path ) as json_file : [EOL] return json . load ( json_file ) [EOL] [EOL] [comment] [EOL] def get_template ( self , template_string_or_path ) : [EOL] if path . exists ( path . join ( TEMPLATES_DIR , template_string_or_path ) ) : [EOL] template = self . jinja_env . get_template ( template_string_or_path ) [EOL] else : [EOL] template = jinja2 . Template ( template_string_or_path ) [EOL] return template [EOL] [EOL] def generate ( self , config ) : [EOL] [docstring] [EOL] snippets = [ ] [EOL] plugins = [ ] [EOL] plugin_configs = [ ] [EOL] builtins = [ ] [EOL] [EOL] for feature in config . features : [EOL] if not feature . is_enabled ( ) : [EOL] continue [EOL] rendered_feature = feature . render ( self . jinja_env ) [EOL] if feature . feature_type == [string] : [EOL] snippets . append ( rendered_feature ) [EOL] if feature . feature_type == [string] : [EOL] plugins . append ( feature ) [EOL] plugin_configs . append ( rendered_feature ) [EOL] if feature . feature_type == [string] : [EOL] builtins . append ( rendered_feature ) [EOL] [EOL] vimrc_template = self . jinja_env . get_template ( [string] ) [EOL] return vimrc_template . render ( snippets = snippets , plugins = plugins , plugin_configurations = plugin_configs , builtins = builtins ) [EOL] [EOL] @ staticmethod def build_default_config ( ) : [EOL] installed_features = ConfigMgr . read_installed_features ( ) [EOL] config = Config ( ) [EOL] for feature in installed_features : [EOL] config . add_feature ( feature ) [EOL] return config [EOL] [EOL] @ staticmethod def write_config ( config , output_path ) : [EOL] [docstring] [EOL] if output_path is None : [EOL] return json . dumps ( config , cls = DefaultEncoder , indent = [number] ) [EOL] else : [EOL] with open ( output_path , [string] ) as output_file : [EOL] output_file . write ( json . dumps ( config , cls = DefaultEncoder , indent = [number] ) ) [EOL] [EOL] @ staticmethod def write_default_config ( output_path = None ) : [EOL] config = ConfigMgr . build_default_config ( ) [EOL] ConfigMgr . write_config ( config , output_path ) [EOL] [EOL] @ staticmethod def read_installed_features ( ) : [EOL] feature_paths = [ path . join ( FEATURES_DIR , x ) for x in os . listdir ( FEATURES_DIR ) ] [EOL] features = [ FeatureDecoder . decode_from_path ( x ) for x in feature_paths ] [EOL] return [ x for x in features if x . installed ] [EOL] [EOL] def render_plugin_configs ( self , plugin_jsons ) : [EOL] [docstring] [EOL] templates = [ self . jinja_env . get_template ( x . template_path ) for x in plugin_jsons ] [EOL] return [ template . render ( plugin = plugin_json ) for template , plugin_json in zip ( templates , plugin_jsons ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $virgene.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 $virgene.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[jinja2.environment.Template]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[jinja2.environment.Template]$ 0 0 0 0 0
from os import path [EOL] [EOL] SRC_DIR = path . abspath ( path . dirname ( __file__ ) ) [EOL] FEATURES_DIR = path . join ( SRC_DIR , [string] ) [EOL] TEMPLATES_DIR = path . join ( SRC_DIR , [string] ) [EOL] BUILD_DIR = path . join ( SRC_DIR , [string] ) [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0
from json import JSONEncoder [EOL] [EOL] [EOL] class DefaultEncoder ( JSONEncoder ) : [EOL] [EOL] [comment] [EOL] def default ( self , o ) : [EOL] return { x : o . __dict__ [ x ] for x in o . __dict__ if not x . startswith ( [string] ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import jinja2 [EOL] import typing [EOL] import builtins [EOL] from os import path [EOL] import json [EOL] from typing import List [EOL] [EOL] import jinja2 [EOL] [EOL] from virgene . common_defs import FEATURES_DIR [EOL] from virgene . common_defs import TEMPLATES_DIR [EOL] [EOL] [EOL] class FeatureBase : [EOL] [EOL] def __init__ ( self , name , identifier , feature_type , description , enabled , category , installed , template , options ) : [EOL] self . name = name [EOL] self . identifier = identifier [EOL] self . feature_type = feature_type [EOL] self . description = description [EOL] self . enabled = enabled [EOL] self . category = category [EOL] self . installed = installed [EOL] self . template = template [EOL] self . options = options [EOL] self . _options_dict = { x . identifier : x for x in self . options } [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , self . __class__ ) : [EOL] return self . __dict__ == other . __dict__ [EOL] return NotImplemented [EOL] [EOL] def __ne__ ( self , other ) : [EOL] if isinstance ( other , self . __class__ ) : [EOL] return not self . __eq__ ( other ) [EOL] return NotImplemented [EOL] [EOL] def __hash__ ( self ) : [EOL] return hash ( tuple ( sorted ( self . __dict__ . items ( ) ) ) ) [EOL] [EOL] def __repr__ ( self , * args , ** kwargs ) : [EOL] return [string] [string] % ( self . name , self . feature_type , self . description , self . enabled , self . category , self . installed ) [EOL] [EOL] @ staticmethod def from_feature_json ( feature_json ) : [EOL] return FeatureBase ( feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , feature_json [ [string] ] , [ ] ) [EOL] [EOL] @ staticmethod def from_feature_path ( feature_path ) : [EOL] with open ( path . join ( FEATURES_DIR , feature_path ) ) as feature_file : [EOL] feature_json = json . load ( feature_file ) [EOL] [EOL] return FeatureBase . from_feature_json ( feature_json ) [EOL] [EOL] def apply_config ( self , feature_config ) : [EOL] for option_id in feature_config : [comment] [EOL] if option_id == [string] : [EOL] enabled = True if feature_config [ option_id ] == [string] else False [EOL] self . enabled = enabled [EOL] else : [EOL] option = self . get_option ( option_id ) [EOL] option . set_value ( feature_config [ option_id ] ) [EOL] [EOL] [EOL] def fill_in_defaults ( self ) : [EOL] for option in self . options : [EOL] option . realize ( ) [EOL] [EOL] def get_options_dict ( self ) : [EOL] return self . _options_dict [EOL] [EOL] def get_template ( self ) : [EOL] if path . exists ( path . join ( TEMPLATES_DIR , self . template ) ) : [EOL] return self . template [EOL] else : [EOL] return [string] [EOL] [EOL] def render ( self , jinja_env ) : [EOL] self . fill_in_defaults ( ) [EOL] template = jinja_env . get_template ( self . get_template ( ) ) [EOL] return template . render ( feature = self , options = self . get_options_dict ( ) ) [EOL] [EOL] def is_enabled ( self ) : [EOL] return self . enabled [EOL] [EOL] def get_option ( self , identifier ) : [EOL] return self . _options_dict [ identifier ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.Environment$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 $jinja2.Environment$ 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Any , List [EOL] import flask [EOL] import typing [EOL] import itertools [EOL] import html [EOL] [EOL] from flask import Flask , render_template , request [EOL] [EOL] from config_mgr import ConfigMgr [EOL] app = Flask ( __name__ ) [EOL] [EOL] config_mgr = ConfigMgr ( ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def home ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def configure ( ) : [EOL] default_config = config_mgr . build_default_config ( ) [EOL] [EOL] builtins = [ x for x in default_config . features if x . feature_type == [string] ] [EOL] builtins_html = [ render_template ( [string] , feature = x ) for x in builtins ] [EOL] [EOL] plugins = [ x for x in default_config . features if x . feature_type == [string] ] [EOL] plugins_html = [ render_template ( [string] , feature = x ) for x in plugins ] [EOL] [EOL] snippets = [ x for x in default_config . features if x . feature_type == [string] ] [EOL] snippets_html = [ render_template ( [string] , feature = x ) for x in snippets ] [EOL] [EOL] result = render_template ( [string] , builtins = builtins_html , plugins = plugins_html , snippets = snippets_html ) [EOL] return result [EOL] [EOL] [EOL] def form_to_json ( form ) : [EOL] feature_configs = { } [EOL] for key in form : [EOL] feature_name , option_identifier = key . replace ( [string] , [string] ) . split ( [string] ) [EOL] value = form . getlist ( key ) [EOL] if len ( value ) == [number] : [EOL] value = value [ [number] ] [EOL] if feature_name not in feature_configs . keys ( ) : [EOL] feature_configs [ feature_name ] = { } [EOL] feature_configs [ feature_name ] [ option_identifier ] = value [EOL] return feature_configs [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def vimrc ( ) : [EOL] default_config = config_mgr . build_default_config ( ) [EOL] form_dict = form_to_json ( request . form ) [EOL] default_config . apply_config ( form_dict ) [EOL] vimrc_str = config_mgr . generate ( default_config ) [EOL] return [string] + html . escape ( vimrc_str ) + [string] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0