	0
	0
import cincoconfig [EOL] import pytest [EOL] from cincoconfig . formats . ini import IniConfigFormat [EOL] [EOL] [EOL] class TestIniConfigFormat : [EOL] [EOL] def test_init ( self ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] x = IniConfigFormat ( ) [EOL] [EOL] def test_loads ( self ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] IniConfigFormat . loads ( None , None , [string] ) [EOL] [EOL] def test_dumps ( self ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] IniConfigFormat . dumps ( None , None , { [string] : [number] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.ini.IniConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import cincoconfig [EOL] import typing [EOL] import yaml as yaml_lib [EOL] from unittest . mock import patch [EOL] import pytest [EOL] from cincoconfig . formats import yaml [EOL] [EOL] [EOL] class TestYamlConfigFormat : [EOL] [EOL] def test_available ( self ) : [EOL] assert yaml . IS_AVAILABLE [EOL] yaml . YamlConfigFormat ( ) [EOL] [EOL] @ patch ( [string] , False ) def test_not_available ( self ) : [EOL] with pytest . raises ( TypeError ) : [EOL] x = yaml . YamlConfigFormat ( ) [EOL] [EOL] def test_dumps ( self ) : [EOL] fmt = yaml . YamlConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == yaml_lib . dump ( obj , Dumper = yaml_lib . Dumper ) . encode ( ) [EOL] [EOL] def test_loads ( self ) : [EOL] fmt = yaml . YamlConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] bobj = yaml_lib . dump ( obj , Dumper = yaml_lib . Dumper ) . encode ( ) [EOL] assert fmt . loads ( None , bobj ) == obj [EOL] [EOL] def test_dumps_root_key ( self ) : [EOL] fmt = yaml . YamlConfigFormat ( root_key = [string] ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == yaml_lib . dump ( { [string] : obj } , Dumper = yaml_lib . Dumper ) . encode ( ) [EOL] [EOL] def test_loads_root_key ( self ) : [EOL] fmt = yaml . YamlConfigFormat ( root_key = [string] ) [EOL] obj = { [string] : [number] } [EOL] root_obj = { [string] : obj } [EOL] bobj = yaml_lib . dump ( root_obj , Dumper = yaml_lib . Dumper ) . encode ( ) [EOL] assert fmt . loads ( None , bobj ) == obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.yaml.YamlConfigFormat$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0
from typing import Any , Dict [EOL] import cincoconfig [EOL] import typing [EOL] import bson as bson_lib [EOL] from unittest . mock import patch [EOL] import pytest [EOL] from cincoconfig . formats import bson [EOL] [EOL] [EOL] class TestBsonConfigFormat : [EOL] [EOL] def test_available ( self ) : [EOL] assert bson . IS_AVAILABLE [EOL] bson . BsonConfigFormat ( ) [EOL] [EOL] @ patch ( [string] , False ) def test_not_available ( self ) : [EOL] with pytest . raises ( TypeError ) : [EOL] x = bson . BsonConfigFormat ( ) [EOL] [EOL] def test_dumps ( self ) : [EOL] fmt = bson . BsonConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == bson_lib . dumps ( obj ) [EOL] [EOL] def test_loads ( self ) : [EOL] fmt = bson . BsonConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] bobj = bson_lib . dumps ( obj ) [EOL] assert fmt . loads ( None , bobj ) == obj [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.bson.BsonConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.bson.BsonConfigFormat$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.bson.BsonConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.bson.BsonConfigFormat$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $cincoconfig.formats.bson.BsonConfigFormat$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0
from typing import Dict [EOL] import cincoconfig [EOL] import typing [EOL] import pickle [EOL] from cincoconfig . formats . pickle import PickleConfigFormat [EOL] [EOL] [EOL] class TestPickleConfigFormat : [EOL] [EOL] def test_dumps ( self ) : [EOL] fmt = PickleConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == pickle . dumps ( obj ) [EOL] [EOL] def test_loads ( self ) : [EOL] fmt = PickleConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] pobj = pickle . dumps ( obj ) [EOL] assert fmt . loads ( None , pobj ) == obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.pickle.PickleConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.pickle.PickleConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.pickle.PickleConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $cincoconfig.formats.pickle.PickleConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0
from typing import List , Union , Any , Dict [EOL] import cincoconfig [EOL] import typing [EOL] import pytest [EOL] from cincoconfig . formats . xml import XmlConfigFormat [EOL] [EOL] TEST_DOC = [string] [EOL] [EOL] TEST_TREE = { [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : True , [string] : False , [string] : [string] , [string] : [string] , [string] : None , [string] : [ [number] , [number] ] , [string] : { [string] : [string] , [string] : [string] } , [string] : [string] } [EOL] [EOL] [EOL] class BadType : [EOL] pass [EOL] [EOL] [EOL] class TestXmlConfigFormat : [EOL] [EOL] def test_loads ( self ) : [EOL] fmt = XmlConfigFormat ( ) [EOL] obj = fmt . loads ( None , TEST_DOC ) [EOL] [EOL] assert obj == TEST_TREE [EOL] [EOL] def test_dumps ( self ) : [EOL] fmt = XmlConfigFormat ( ) [EOL] content = fmt . dumps ( None , TEST_TREE ) [EOL] obj = fmt . loads ( None , content ) [EOL] assert obj == TEST_TREE [EOL] [EOL] def test_loads_incorrect_root ( self ) : [EOL] fmt = XmlConfigFormat ( root_tag = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] fmt . loads ( None , TEST_DOC ) [EOL] [EOL] def test_non_basic_type ( self ) : [EOL] fmt = XmlConfigFormat ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] fmt . dumps ( None , { [string] : BadType ( ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,builtins.str],typing.List[builtins.int],builtins.float,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,builtins.str],typing.List[builtins.int],builtins.float,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,builtins.str],typing.List[builtins.int],builtins.float,builtins.str]]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,builtins.str],typing.List[builtins.int],builtins.float,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.xml.XmlConfigFormat$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import cincoconfig [EOL] import typing [EOL] import json [EOL] from cincoconfig . formats . json import JsonConfigFormat [EOL] [EOL] [EOL] class TestJsonConfigFormat : [EOL] [EOL] def test_dumps ( self ) : [EOL] fmt = JsonConfigFormat ( pretty = False ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == json . dumps ( obj ) . encode ( ) [EOL] [EOL] def test_loads ( self ) : [EOL] fmt = JsonConfigFormat ( ) [EOL] obj = { [string] : [number] } [EOL] jobj = json . dumps ( obj ) . encode ( ) [EOL] assert fmt . loads ( None , jobj ) == obj [EOL] [EOL] def test_dumps_pretty ( self ) : [EOL] fmt = JsonConfigFormat ( pretty = True ) [EOL] obj = { [string] : [number] } [EOL] assert fmt . dumps ( None , obj ) == json . dumps ( obj , indent = [number] ) . encode ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 $builtins.bytes$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $cincoconfig.formats.json.JsonConfigFormat$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0