from typing import Any [EOL] import typing [EOL] from flask_script import Manager [EOL] from flask_migrate import Migrate , MigrateCommand [EOL] from src import app , db , models [EOL] [comment] [EOL] from sqlalchemy . exc import InvalidRequestError [EOL] import os [EOL] [EOL] [comment] [EOL] manager = Manager ( app ) [EOL] [EOL] [comment] [EOL] migrate = Migrate ( app , db ) [EOL] [EOL] [comment] [EOL] manager . add_command ( [string] , MigrateCommand ) [EOL] [EOL] [EOL] @ manager . command def init ( ) : [EOL] db . create_all ( ) [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] manager . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import os [EOL] from src import app [EOL] from flask_socketio import SocketIO as socketio [EOL] [EOL] if __name__ == [string] : [EOL] port = int ( os . environ . get ( [string] , [number] ) ) [EOL] socketio . run ( app , host = [string] , port = port )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0
from typing import Any , Dict , List [EOL] import typing [EOL] from sqlalchemy . ext . declarative import DeclarativeMeta [EOL] import json [EOL] [EOL] [comment] [EOL] [comment] [EOL] user_model = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class AlchemyEncoder ( json . JSONEncoder ) : [EOL] [EOL] def default ( self , obj ) : [EOL] if isinstance ( obj . __class__ , DeclarativeMeta ) : [EOL] [comment] [EOL] fields = { } [EOL] [EOL] [comment] [EOL] for field in [ x for x in dir ( obj ) if not x . startswith ( [string] ) and x != [string] and x in user_model ] : [EOL] data = obj . __getattribute__ ( field ) [EOL] try : [EOL] [comment] [EOL] json . dumps ( data ) [EOL] fields [ field ] = data [EOL] except TypeError : [EOL] fields [ field ] = None [EOL] [comment] [EOL] return fields [EOL] [EOL] return json . JSONEncoder . default ( self , obj ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type [EOL] import typing [EOL] import src [EOL] import os [EOL] [EOL] base_dir = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] postgres_local_base = [string] [EOL] database_name = [string] [EOL] [EOL] [EOL] class BaseConfig : [EOL] [docstring] [EOL] DEBUG = False [EOL] SECRET_KEY = os . getenv ( [string] , [string] ) [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] AUTH_TOKEN_EXPIRY_DAYS = [number] [EOL] AUTH_TOKEN_EXPIRY_SECONDS = [number] [EOL] [EOL] [EOL] class DevelopmentConfig ( BaseConfig ) : [EOL] [docstring] [EOL] DEBUG = True [EOL] SQLALCHEMY_DATABASE_URI = os . getenv ( [string] , postgres_local_base + database_name ) [EOL] AUTH_TOKEN_EXPIRY_DAYS = [number] [EOL] AUTH_TOKEN_EXPIRY_SECONDS = [number] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import src [EOL] from sqlalchemy import Column , Integer , Sequence , String , DateTime , func [EOL] from src . main import db [EOL] import datetime [EOL] import jwt [EOL] [EOL] [EOL] class Base ( db . Model ) : [EOL] __abstract__ = True [EOL] [EOL] created_on = db . Column ( db . DateTime , default = db . func . now ( ) ) [EOL] updated_on = db . Column ( db . DateTime , default = db . func . now ( ) , onupdate = db . func . now ( ) ) [EOL] [EOL] [EOL] class User ( Base ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True , autoincrement = True ) [EOL] email = Column ( String ( [number] ) , unique = True , nullable = False ) [EOL] password = Column ( String ( [number] ) , nullable = False ) [EOL] [EOL] def __init__ ( self , email , password ) : [EOL] self . email = email [EOL] self . password = password [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . id , self . email , self . password ) [EOL] [EOL] def save ( self ) : [EOL] [docstring] [EOL] print ( [string] . format ( self , self . __table__ ) ) [EOL] try : [EOL] db . session . add ( self ) [EOL] db . session . commit ( ) [EOL] except : [EOL] db . session . rollback ( ) [EOL] return False [EOL] [EOL] print ( [string] . format ( self . id ) ) [EOL] [EOL] return self . id [EOL] [EOL] def update ( user_id , data ) : [EOL] [docstring] [EOL] user = User . query . filter_by ( id = user_id ) . first ( ) [EOL] if user : [EOL] for k , v in data . items ( ) : [EOL] if k == [string] : [EOL] user . email = v [EOL] if k == [string] : [EOL] user . password = v [EOL] [EOL] try : [EOL] db . session . commit ( ) [EOL] except : [EOL] db . session . rollback ( ) [EOL] return False [EOL] [EOL] return True [EOL] [EOL] @ staticmethod def get_by_id ( user_id ) : [EOL] [docstring] [EOL] return User . query . filter_by ( id = user_id ) . first ( ) [EOL] [EOL] @ staticmethod def get_by_email ( email ) : [EOL] [docstring] [EOL] return User . query . filter_by ( email = email ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[src.models.Base]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.models.Base]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[src.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from src . main import app , db	0 0 0 0 0 0 0 0
from typing import Any , Literal , Type , Union [EOL] import typing_extensions [EOL] import typing [EOL] import flask [EOL] import src [EOL] import os [EOL] from flask import Flask [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import TextField [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from flask import Flask , request , render_template , flash , jsonify , make_response [EOL] import datetime [EOL] import json [EOL] import jwt [EOL] [EOL] from src . serialization import AlchemyEncoder [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] app = Flask ( __name__ , static_folder = [string] ) [EOL] [comment] [EOL] app_settings = os . getenv ( [string] , [string] ) [EOL] app . config . from_object ( app_settings ) [EOL] [EOL] db = SQLAlchemy ( app ) [EOL] [EOL] from src . models import User [EOL] [EOL] [comment] [EOL] [EOL] class AuthForm ( FlaskForm ) : [EOL] email = TextField ( [string] ) [EOL] password = TextField ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def index ( ) : [EOL] [docstring] [EOL] form = AuthForm ( request . form ) [EOL] [EOL] if request . method == [string] : [EOL] user = User ( form . email . data , form . password . data ) [EOL] user_id = user . save ( ) [EOL] [EOL] if not user_id : [EOL] return [string] [EOL] [EOL] return make_response ( jsonify ( { [string] : user_id , } ) ) , [number] [EOL] [EOL] return render_template ( [string] , form = form ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def user_interact ( user_id ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if request . method == [string] : [EOL] form = AuthForm ( request . form ) [EOL] User . update ( user_id , { [string] : form . email . data , [string] : form . password . data } ) [EOL] return f" [string] { user_id } [string] " [EOL] [EOL] [comment] [EOL] user = User . get_by_id ( user_id ) [EOL] return make_response ( json . dumps ( user , cls = AlchemyEncoder ) ) [EOL] [EOL] [EOL] @ app . errorhandler ( [number] ) def page_not_found ( e ) : [EOL] return [string] , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.main.AuthForm]$ 0 0 0 0 0 0 $typing.Type[src.main.AuthForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0