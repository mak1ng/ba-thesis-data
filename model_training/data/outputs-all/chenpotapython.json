[comment] [EOL] [EOL] from typing import Union , Tuple , Callable [EOL] import requests [EOL] import typing [EOL] import requests [EOL] from requests . auth import HTTPDigestAuth [EOL] [EOL] [comment] [EOL] rsp = requests . get ( [string] , auth = HTTPDigestAuth ( [string] , [string] ) ) [EOL] [EOL] print ( rsp . status_code ) [EOL] print ( rsp . text ) [EOL] [EOL] [comment] [EOL] session = requests . Session ( ) [EOL] session . auth = HTTPDigestAuth ( [string] , [string] ) [EOL] [EOL] rsp = session . get ( [string] ) [EOL] [EOL] print ( rsp . status_code ) [EOL] print ( rsp . text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask [EOL] from flask import g [EOL] from flask_httpauth import HTTPBasicAuth [EOL] from flask_httpauth import HTTPDigestAuth [EOL] from flask_httpauth import MultiAuth [EOL] from werkzeug . security import generate_password_hash , check_password_hash [EOL] [EOL] APP = Flask ( __name__ ) [EOL] APP . config [ [string] ] = [string] [EOL] [EOL] BASIC_AUTH = HTTPBasicAuth ( ) [EOL] DIGEST_AUTH = HTTPDigestAuth ( ) [EOL] MULTI_AUTH = MultiAuth ( DIGEST_AUTH , BASIC_AUTH ) [EOL] [EOL] [EOL] @ BASIC_AUTH . verify_password def verify_password ( username , password ) : [EOL] g . user = username [EOL] return username == [string] and check_password_hash ( generate_password_hash ( [string] ) , password ) [EOL] [EOL] [EOL] @ DIGEST_AUTH . get_password def get_pw ( username ) : [EOL] if username == [string] : [EOL] g . user = username [EOL] return [string] [EOL] [EOL] return None [EOL] [EOL] [EOL] @ APP . route ( [string] ) @ MULTI_AUTH . login_required def index ( ) : [EOL] return [string] . format ( g . user ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] APP . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Tuple , Callable [EOL] import requests [EOL] import typing [EOL] import requests [EOL] from requests . auth import HTTPBasicAuth [EOL] [EOL] [comment] [EOL] rsp = requests . get ( [string] , auth = HTTPBasicAuth ( [string] , [string] ) ) [EOL] [EOL] print ( rsp . status_code ) [EOL] print ( rsp . text ) [EOL] [EOL] [comment] [EOL] session = requests . Session ( ) [EOL] session . auth = HTTPBasicAuth ( [string] , [string] ) [EOL] [EOL] rsp = session . get ( [string] ) [EOL] [EOL] print ( rsp . status_code ) [EOL] print ( rsp . text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import connexion [EOL] [EOL] [EOL] app = connexion . App ( __name__ , specification_dir = [string] ) [EOL] app . add_api ( [string] ) [EOL] app . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , List , Dict [EOL] import typing [EOL] import flask [EOL] from flask import Flask , abort , jsonify , request [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] players = [ { [string] : [number] , [string] : [string] , [string] : [number] } ] [EOL] player_id = [number] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_players ( ) : [EOL] global players [EOL] return jsonify ( players ) , [number] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_player ( pid ) : [EOL] global player_id , players [EOL] [EOL] for player in players : [EOL] if player [ [string] ] == pid : [EOL] return jsonify ( player ) , [number] [EOL] [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_player ( ) : [EOL] if ( not request . json ) or ( not [string] in request . json ) or ( not [string] in request . json ) : [EOL] abort ( [number] ) [EOL] [EOL] global player_id , players [EOL] [EOL] player = { [string] : player_id , [string] : request . json [ [string] ] , [string] : request . json [ [string] ] } [EOL] [EOL] players . append ( player ) [EOL] [EOL] player_id += [number] [EOL] [EOL] return jsonify ( player ) , [number] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_player ( pid ) : [EOL] index = [number] [EOL] [EOL] global players [EOL] [EOL] for player in players : [EOL] if player [ [string] ] == pid : [EOL] del players [ index ] [EOL] return [string] , [number] [EOL] [EOL] index += [number] [EOL] [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def replace_player ( pid ) : [EOL] if ( not request . json ) or ( not [string] in request . json ) or ( not [string] in request . json ) : [EOL] abort ( [number] ) [EOL] [EOL] global players [EOL] [EOL] for player in players : [EOL] if player [ [string] ] == pid : [EOL] player [ [string] ] = request . json . get ( [string] ) [EOL] player [ [string] ] = request . json . get ( [string] ) [EOL] return jsonify ( player ) , [number] [EOL] [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def update_player ( pid ) : [EOL] if ( not request . json ) or ( ( not [string] in request . json ) and ( not [string] in request . json ) ) : [EOL] abort ( [number] ) [EOL] [EOL] global players [EOL] [EOL] for player in players : [EOL] if player [ [string] ] == pid : [EOL] player [ [string] ] = request . json . get ( [string] , player [ [string] ] ) [EOL] player [ [string] ] = request . json . get ( [string] , player [ [string] ] ) [EOL] return jsonify ( player ) , [number] [EOL] [EOL] abort ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] , port = [number] , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import requests [EOL] import requests [EOL] import json [EOL] [EOL] [EOL] def get_players ( ) : [EOL] print ( [string] ) [EOL] rsp = requests . get ( url = [string] ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def create_player ( name , score ) : [EOL] print ( [string] ) [EOL] rsp = requests . post ( url = [string] , json = { [string] : name , [string] : score } ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def get_player ( id ) : [EOL] print ( [string] ) [EOL] rsp = requests . get ( url = [string] + str ( id ) ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def delete_player ( id ) : [EOL] print ( [string] ) [EOL] rsp = requests . delete ( url = [string] + str ( id ) ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def update_player ( id , data ) : [EOL] print ( [string] ) [EOL] rsp = requests . patch ( url = [string] + str ( id ) , json = data ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def replace_player ( id , name , score ) : [EOL] print ( [string] ) [EOL] rsp = requests . put ( url = [string] + str ( id ) , json = { [string] : name , [string] : score } ) [EOL] print ( rsp . text ) [EOL] [EOL] [EOL] def main ( ) : [EOL] get_players ( ) [EOL] get_player ( [number] ) [EOL] get_player ( [number] ) [EOL] create_player ( [string] , [number] ) [EOL] get_players ( ) [EOL] get_player ( [number] ) [EOL] update_player ( [number] , { [string] : [number] } ) [EOL] get_players ( ) [EOL] replace_player ( [number] , [string] , [number] ) [EOL] get_players ( ) [EOL] delete_player ( [number] ) [EOL] get_players ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask [EOL] from flask_socketio import SocketIO [EOL] from flask_socketio import disconnect [EOL] from flask_socketio import emit [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = [string] [EOL] socketio = SocketIO ( app ) [EOL] [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def do_connect ( ) : [EOL] print ( [string] ) [EOL] emit ( [string] , [string] , broadcast = True ) [EOL] [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def do_msg_from_client ( msg ) : [EOL] print ( [string] , msg ) [EOL] disconnect ( ) [EOL] [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def do_disconnect ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] socketio . run ( app , host = [string] , port = [number] , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] [EOL] from socketIO_client import BaseNamespace [EOL] from socketIO_client import SocketIO [EOL] [EOL] [EOL] class MyNamespace ( BaseNamespace ) : [EOL] [EOL] def on_connect ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def on_reconnect ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def on_disconnect ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def on_event ( self , event , * args ) : [EOL] print ( [string] ) [EOL] [EOL] def on_error ( self , data ) : [EOL] print ( [string] ) [EOL] [EOL] def on_msg_from_server ( self , data ) : [EOL] print ( [string] , data ) [EOL] self . emit ( [string] , [string] ) [EOL] [EOL] [EOL] logging . getLogger ( [string] ) . setLevel ( logging . DEBUG ) [EOL] logging . basicConfig ( ) [EOL] [EOL] sio = SocketIO ( [string] , [number] , MyNamespace ) [EOL] myns = sio . define ( MyNamespace , [string] ) [EOL] [EOL] sio . wait ( seconds = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Union , Optional [EOL] import builtins [EOL] import typing [EOL] from typing import TYPE_CHECKING , Optional , Union [EOL] [comment] [EOL] [EOL] [EOL] def this_is_a_function_to_be_barabara1 ( v ) : [EOL] pass [EOL] [comment] [EOL] [EOL] [EOL] MYTYPE = Union [ Union [ int , str , Optional [ int ] ] , Union [ int , str , Optional [ int ] ] ] [EOL] [EOL] [EOL] def this_is_a_function_to_be_barabara2 ( v ) : [EOL] pass [EOL] [comment] [EOL] [EOL] [EOL] if TYPE_CHECKING : [EOL] MYTYPE2 = Union [ Union [ int , str , Optional [ int ] ] , Union [ int , str , Optional [ int ] ] ] [EOL] [EOL] [EOL] def this_is_a_function_to_be_barabara3 ( v ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0
from typing import Any , Union , List [EOL] import builtins [EOL] import typing [EOL] from typing import Any , List , TypeVar , Union [EOL] [comment] [EOL] [EOL] [EOL] def pass_bulitin_list_v1 ( v ) : [EOL] pass [EOL] [EOL] pass_bulitin_list_v1 ( [ ] ) [EOL] pass_bulitin_list_v1 ( [ [number] , [string] ] ) [EOL] [EOL] [EOL] def pass_bulitin_list_v2 ( v ) : [EOL] pass [EOL] [EOL] pass_bulitin_list_v2 ( [ ] ) [EOL] pass_bulitin_list_v2 ( [ [number] , [string] ] ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_list_with_int ( v ) : [EOL] pass [EOL] [EOL] pass_list_with_int ( [ ] ) [EOL] pass_list_with_int ( [ [number] , [number] ] ) [EOL] pass_list_with_int ( [ [number] , [string] ] ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_list_with_str_int ( v ) : [EOL] pass [EOL] [EOL] pass_list_with_str_int ( [ ] ) [EOL] pass_list_with_str_int ( [ [number] , [number] ] ) [EOL] pass_list_with_str_int ( [ [number] , [string] ] ) [EOL] pass_list_with_str_int ( [ [number] , [string] , [number] ] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] def pass_int ( v ) : [EOL] pass [EOL] [EOL] pass_int ( [number] ) [comment] [EOL] pass_int ( [number] ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_float ( v ) : [EOL] pass [EOL] [EOL] pass_float ( [number] ) [EOL] pass_float ( [number] ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_str ( v ) : [EOL] pass [EOL] [EOL] pass_str ( [string] ) [EOL] pass_str ( [number] ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_bool ( v ) : [EOL] pass [EOL] [EOL] pass_bool ( [number] == [number] ) [EOL] pass_bool ( [number] ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_list ( v ) : [EOL] pass [EOL] [EOL] pass_list ( [ ] ) [EOL] pass_list ( [ [number] , [string] ] ) [EOL] pass_list ( ( ) ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_tuple ( v ) : [EOL] pass [EOL] [EOL] pass_tuple ( ( ) ) [EOL] pass_tuple ( ( [number] , [string] ) ) [EOL] pass_tuple ( [ ] ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def get_int_v1 ( ) : [EOL] return [number] [EOL] [EOL] [EOL] def get_int_v2 ( ) : [EOL] return [number] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def get_float_v1 ( ) : [EOL] return [number] [EOL] [EOL] [EOL] def get_float_v2 ( ) : [EOL] return [number] [EOL] [comment] [EOL] [EOL] [EOL] def get_str ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import builtins [EOL] import typing [EOL] from typing import Any , Tuple [EOL] [comment] [EOL] [EOL] [EOL] def pass_builtin_tuple_v1 ( v ) : [EOL] pass [EOL] [EOL] pass_builtin_tuple_v1 ( ( ) ) [EOL] pass_builtin_tuple_v1 ( ( [number] , [string] ) ) [EOL] [EOL] [EOL] def pass_builtin_tuple_v2 ( v ) : [EOL] pass [EOL] [EOL] pass_builtin_tuple_v2 ( ( ) ) [EOL] pass_builtin_tuple_v2 ( ( [number] , [string] ) ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_tuple_with_str ( v ) : [EOL] pass [EOL] [EOL] pass_tuple_with_str ( ( ) ) [comment] [EOL] pass_tuple_with_str ( ( [string] , ) ) [EOL] pass_tuple_with_str ( ( [string] , [number] ) ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_empty_tuple ( v ) : [EOL] pass [EOL] [EOL] pass_empty_tuple ( ( ) ) [EOL] pass_empty_tuple ( ( [string] , ) ) [comment] [EOL] pass_empty_tuple ( ( [string] , [number] ) ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] def pass_tuple_with_str_int ( v ) : [EOL] pass [EOL] [EOL] pass_tuple_with_str_int ( ( ) ) [comment] [EOL] pass_tuple_with_str_int ( ( [string] , ) ) [comment] [EOL] pass_tuple_with_str_int ( ( [string] , [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import builtins [EOL] import typing [EOL] from typing import List , Union , cast [EOL] [comment] [EOL] [EOL] [EOL] def merge_list1 ( lhs , rhs ) : [EOL] return lhs + rhs [comment] [EOL] [EOL] print ( merge_list1 ( [ [number] , [number] ] , [ [string] , [string] ] ) ) [EOL] [comment] [EOL] [EOL] [EOL] def merge_list2 ( lhs , rhs ) : [EOL] return lhs + rhs [comment] [EOL] [EOL] print ( merge_list2 ( [ [number] , [number] ] , [ [string] , [string] ] ) ) [EOL] [comment] [EOL] [EOL] [EOL] def merge_list3 ( lhs , rhs ) : [EOL] cast_lhs = cast ( List [ Union [ int , str ] ] , lhs ) [EOL] cast_rhs = cast ( List [ Union [ int , str ] ] , rhs ) [EOL] return cast_lhs + cast_rhs [EOL] [EOL] print ( merge_list3 ( [ [number] , [number] ] , [ [string] , [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Optional [EOL] import builtins [EOL] import typing [EOL] from typing import Optional , Union [EOL] [comment] [EOL] [EOL] [EOL] def func_pass_int ( v ) : [EOL] pass [EOL] [EOL] [EOL] def func_pass_int_or_none_v1 ( v ) : [comment] [EOL] pass [EOL] [EOL] [EOL] def func_pass_int_or_none_v2 ( v ) : [EOL] pass [EOL] [EOL] func_pass_int ( None ) [comment] [EOL] func_pass_int_or_none_v1 ( None ) [EOL] func_pass_int_or_none_v2 ( None ) [EOL] [comment] [EOL] [EOL] [EOL] def func_with_default_args_v1 ( v = None ) : [comment] [EOL] pass [EOL] [EOL] func_with_default_args_v1 ( ) [EOL] func_with_default_args_v1 ( None ) [comment] [EOL] [EOL] [EOL] def func_with_default_args_v2 ( v = None ) : [EOL] pass [EOL] [EOL] func_with_default_args_v2 ( ) [EOL] func_with_default_args_v2 ( None ) [EOL] [comment] [EOL] [EOL] [EOL] def func_return_int ( ) : [EOL] return None [comment] [EOL] [EOL] [EOL] def func_return_int_or_none_v1 ( ) : [comment] [EOL] return None [EOL] [EOL] [EOL] def func_return_int_or_none_v2 ( ) : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,None]$ 0 0 0 0 0 0 0
import builtins [EOL] from typing import NewType [EOL] [comment] [EOL] [EOL] [EOL] class INT ( int ) : [EOL] pass [EOL] [EOL] [EOL] class NEW_INT ( INT ) : [EOL] pass [EOL] [comment] [EOL] [EOL] [EOL] def pass_int ( v ) : [EOL] pass [EOL] [EOL] pass_int ( [number] ) [EOL] pass_int ( INT ( ) ) [EOL] pass_int ( NEW_INT ( ) ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_INT ( v ) : [EOL] pass [EOL] [EOL] [EOL] pass_INT ( [number] ) [comment] [EOL] pass_INT ( INT ( ) ) [EOL] pass_INT ( NEW_INT ( ) ) [EOL] [comment] [EOL] [EOL] [EOL] def pass_NEW_INT ( v ) : [EOL] pass [EOL] [EOL] pass_NEW_INT ( [number] ) [comment] [EOL] pass_NEW_INT ( INT ( ) ) [comment] [EOL] pass_NEW_INT ( NEW_INT ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] from typing import Optional [EOL] [comment] [EOL] [EOL] [EOL] class BinaryTree ( object ) : [EOL] [EOL] def __init__ ( self , left , right ) : [EOL] self . _left = left [EOL] self . _right = right [EOL] [EOL] def do_something ( v ) : [EOL] pass [EOL] [EOL] left = BinaryTree ( None , None ) [EOL] right = BinaryTree ( None , None ) [EOL] root1 = BinaryTree ( left , right ) [EOL] root2 = BinaryTree ( left , [number] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $'BinaryTree'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from typing import List [EOL] [comment] [EOL] [EOL] [EOL] def func1 ( ) : [EOL] v = [ ] [comment] [EOL] [comment] [EOL] v = [ [number] ] [EOL] [comment] [EOL] [EOL] [EOL] def func2 ( ) : [EOL] v = [ ] [comment] [EOL] [comment] [EOL] v = [ [number] ] [EOL] [comment] [EOL] [EOL] [EOL] def func3 ( ) : [EOL] v = [ ] [comment] [EOL] [comment] [EOL] v = [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator [EOL] import builtins [EOL] import typing [EOL] from typing import Iterator [EOL] [comment] [EOL] [EOL] [EOL] def fib ( n ) : [EOL] a , b = [number] , [number] [EOL] for _ in range ( n ) : [EOL] yield a [EOL] a , b = b , a + b [EOL] [EOL] [EOL] print ( list ( fib ( [number] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Literal , Tuple , List [EOL] import typing [EOL] import typing_extensions [EOL] import sqlite3 [EOL] import os [EOL] from os . path import isfile [EOL] from os . path import getsize [EOL] import sqlite3 [EOL] [EOL] MAX_RECORD_SIZE = [number] [EOL] [EOL] [EOL] def is_sqlite3_file ( file ) : [EOL] [docstring] [EOL] [EOL] if not isfile ( file ) or getsize ( file ) < [number] : [EOL] return False [EOL] [EOL] with open ( file , [string] ) as fd : [EOL] return fd . read ( [number] ) == [string] [EOL] [EOL] [EOL] def create_db ( file ) : [EOL] try : [EOL] os . remove ( file ) [EOL] except : [EOL] pass [EOL] [EOL] with sqlite3 . connect ( file ) as db : [EOL] cur = db . cursor ( ) [EOL] [EOL] cur . executescript ( [string] ) [EOL] [EOL] [EOL] def insert_student ( db , student ) : [EOL] cur = db . cursor ( ) [EOL] [EOL] cur . execute ( [string] , ( student , ) ) [EOL] [EOL] return cur . lastrowid [EOL] [EOL] [EOL] def insert_scores ( db , student_id , scores ) : [EOL] datas = [ ] [EOL] [EOL] for score in scores : [EOL] data = [ student_id ] [EOL] data . extend ( score ) [EOL] datas . append ( tuple ( data ) ) [EOL] [EOL] cur = db . cursor ( ) [EOL] [EOL] cur . executemany ( [string] , datas ) [EOL] [EOL] [EOL] def insert ( file , infos ) : [EOL] with sqlite3 . connect ( file ) as db : [EOL] student_id = insert_student ( db , infos [ [number] ] ) [EOL] insert_scores ( db , student_id , infos [ [number] ] ) [EOL] [EOL] [EOL] def query_all ( file ) : [EOL] with sqlite3 . connect ( file ) as db : [EOL] cur = db . cursor ( ) [EOL] [EOL] cur_students = cur . execute ( [string] ) [EOL] [EOL] for id_ , name_ in cur_students . fetchall ( ) : [EOL] print ( [string] , id_ , name_ ) [EOL] [EOL] cur_scores = cur . execute ( [string] , ( id_ , ) ) [EOL] [EOL] for id_ , student_id_ , class_ , score_ in cur_scores . fetchall ( ) : [EOL] print ( [string] , id_ , student_id_ , class_ , score_ ) [EOL] [EOL] [EOL] def query_student ( file , student ) : [EOL] with sqlite3 . connect ( file ) as db : [EOL] cur = db . cursor ( ) [EOL] [EOL] cur_student = cur . execute ( [string] , ( student , ) ) [EOL] [EOL] row_student = cur_student . fetchone ( ) [EOL] [EOL] cur_scores = cur . execute ( [string] , ( row_student [ [number] ] , ) ) [EOL] [EOL] print ( [string] , row_student [ [number] ] , row_student [ [number] ] ) [EOL] [EOL] for id_ , student_id_ , class_ , score_ in cur_scores . fetchall ( ) : [EOL] print ( [string] , id_ , student_id_ , class_ , score_ ) [EOL] [EOL] [EOL] def query_student_with_index_size ( file , student , next_record_index = [number] , record_size = MAX_RECORD_SIZE ) : [EOL] if next_record_index < [number] : [EOL] next_record_index = [number] [EOL] [EOL] if record_size < [number] or record_size > [number] : [EOL] record_size = MAX_RECORD_SIZE [EOL] [EOL] with sqlite3 . connect ( file ) as db : [EOL] cur = db . cursor ( ) [EOL] [EOL] cur_scores = cur . execute ( [string] , ( next_record_index , student ) ) [EOL] [EOL] row_scores = cur_scores . fetchmany ( record_size ) [EOL] [EOL] cur_id = [number] [EOL] [EOL] for cur_id , student_id_ , class_ , score_ in row_scores : [EOL] print ( [string] , cur_id , student_id_ , class_ , score_ ) [EOL] [EOL] return cur_id + [number] if cur_id != [number] else [number] [EOL] [EOL] [EOL] def main ( ) : [EOL] file = [string] [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] create_db ( file ) [EOL] print ( [string] , is_sqlite3_file ( file ) == True ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] students = ( ( [string] , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( [string] , ( ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) ) ) [EOL] [EOL] for student in students : [EOL] insert ( file , student ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] students = ( ( [string] , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ) [EOL] [EOL] try : [EOL] for student in students : [EOL] insert ( file , student ) [EOL] except sqlite3 . IntegrityError as ex : [EOL] print ( [string] , ex ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] query_all ( file ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] query_student ( file , [string] ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] next_record_index = [number] [EOL] record_size = [number] [EOL] times = [number] [EOL] [EOL] while True : [EOL] print ( [string] , times ) [EOL] [EOL] next_record_index = query_student_with_index_size ( file , [string] , next_record_index , record_size ) [EOL] [EOL] if next_record_index == [number] : [EOL] break [EOL] [EOL] times += [number] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import urllib [EOL] import json [EOL] import urllib . error [EOL] import urllib . parse [EOL] import urllib . request [EOL] [EOL] [EOL] req = urllib . request . Request ( [string] % urllib . parse . urlencode ( { [string] : [string] } ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( req . full_url ) [EOL] [EOL] print ( [string] ) [EOL] print ( req . get_method ( ) ) [EOL] [EOL] try : [EOL] rsp = urllib . request . urlopen ( req ) [EOL] except urllib . error . HTTPError as e : [EOL] print ( e ) [EOL] exit ( [number] ) [EOL] [EOL] rspHeader = rsp . info ( ) [EOL] rspContent = rsp . read ( ) [EOL] [EOL] rsp . close ( ) [EOL] [EOL] print ( [string] ) [EOL] print ( rsp . url ) [EOL] [EOL] print ( [string] ) [EOL] print ( rsp . getcode ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspHeader . items ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspHeader . get_content_charset ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspContent ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspContent . decode ( [string] ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( json . loads ( rspContent . decode ( [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.request.Request$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $urllib.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import http [EOL] import http . client [EOL] import json [EOL] import socket [EOL] [EOL] [EOL] conn = http . client . HTTPConnection ( host = [string] , port = [number] ) [EOL] [EOL] try : [EOL] conn . request ( [string] , [string] ) [EOL] except socket . gaierror as e : [EOL] print ( e ) [EOL] exit ( [number] ) [EOL] [EOL] httpRsp = conn . getresponse ( ) [EOL] rspHeader = httpRsp . msg [EOL] rspContent = httpRsp . read ( ) [EOL] [EOL] conn . close ( ) [EOL] [EOL] print ( [string] ) [EOL] print ( httpRsp . status ) [EOL] [EOL] print ( [string] ) [EOL] print ( httpRsp . getheaders ( ) ) [EOL] print ( rspHeader . items ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspHeader . get_content_charset ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspContent ) [EOL] [EOL] print ( [string] ) [EOL] print ( rspContent . decode ( [string] ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( json . loads ( rspContent . decode ( [string] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 $http.client.HTTPConnection$ 0 0 0 0 0 $http.client.HTTPMessage$ 0 $http.client.HTTPResponse$ 0 0 0 $builtins.bytes$ 0 $http.client.HTTPResponse$ 0 0 0 0 0 0 $http.client.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 0 0 0 0 0 0 0 $http.client.HTTPMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import requests [EOL] import requests [EOL] [EOL] [EOL] try : [EOL] r = requests . get ( url = [string] , params = { [string] : [string] } ) [EOL] except requests . exceptions . ConnectionError as e : [EOL] print ( e ) [EOL] exit ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . url ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . status_code ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . headers ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . encoding ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . content ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . text ) [EOL] [EOL] print ( [string] ) [EOL] print ( r . json ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0
[comment] [EOL] [EOL] import ssl [EOL] import http [EOL] import http . client [EOL] import json [EOL] import socket [EOL] import ssl [EOL] [EOL] ctx = ssl . create_default_context ( cafile = [string] ) [EOL] ctx . check_hostname = False [EOL] ctx . verify_mode = ssl . CERT_REQUIRED [EOL] [EOL] conn = http . client . HTTPSConnection ( host = [string] , port = [number] , context = ctx ) [EOL] [EOL] try : [EOL] conn . request ( [string] , [string] ) [EOL] except socket . gaierror as e : [EOL] print ( e ) [EOL] exit ( [number] ) [EOL] [EOL] httpRsp = conn . getresponse ( ) [EOL] [EOL] conn . close ( ) [EOL] [EOL] print ( [string] ) [EOL] print ( httpRsp . status ) [EOL] [EOL] print ( [string] ) [EOL] print ( httpRsp . getheaders ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( httpRsp . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPSConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPSConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 $http.client.HTTPSConnection$ 0 0 0 0 0 0 $http.client.HTTPSConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.client.HTTPResponse$ 0 0 0 0 0 0
[comment] [EOL] [EOL] import http [EOL] import http . server [EOL] import json [EOL] import ssl [EOL] [EOL] [EOL] class MyHttpHandler ( http . server . BaseHTTPRequestHandler ) : [EOL] [EOL] def do_GET ( self ) : [EOL] self . send_response ( [number] ) [EOL] self . send_header ( [string] , [string] ) [EOL] self . end_headers ( ) [EOL] [EOL] msg = json . dumps ( { [string] : [string] , [string] : [string] } , indent = [number] , separators = ( [string] , [string] ) ) [EOL] [EOL] self . wfile . write ( bytes ( msg , [string] ) ) [EOL] [EOL] httpd = http . server . HTTPServer ( ( [string] , [number] ) , MyHttpHandler ) [EOL] [EOL] httpd . socket = ssl . wrap_socket ( httpd . socket , keyfile = [string] , certfile = [string] , server_side = True ) [EOL] [EOL] httpd . serve_forever ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0
[comment] [EOL] [EOL] import flask [EOL] import flask [EOL] [EOL] [EOL] app = flask . Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def my_get_handler ( ) : [EOL] return flask . make_response ( flask . jsonify ( { [string] : [string] , [string] : [string] } ) , [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] , port = [number] , ssl_context = ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import ssl [EOL] import typing [EOL] import urllib [EOL] import json [EOL] import ssl [EOL] import urllib . error [EOL] import urllib . parse [EOL] import urllib . request [EOL] [EOL] [EOL] req = urllib . request . Request ( [string] ) [EOL] [EOL] ctx = ssl . create_default_context ( cafile = [string] ) [EOL] ctx . check_hostname = False [EOL] ctx . verify_mode = ssl . CERT_REQUIRED [EOL] [EOL] try : [EOL] rsp = urllib . request . urlopen ( req , context = ctx ) [EOL] except urllib . error . HTTPError as e : [EOL] print ( e ) [EOL] exit ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] print ( rsp . getcode ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rsp . info ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( rsp . read ( ) ) [EOL] [EOL] rsp . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict [EOL] import unitest [EOL] import typing [EOL] import unittest [EOL] import json [EOL] import unittest [EOL] from unittest import mock [EOL] from unittest . mock import ( Mock , mock_open ) [EOL] [EOL] [EOL] class DUT : [EOL] [EOL] _PATH = [string] [EOL] [EOL] def __init__ ( self ) : [EOL] self . _path = DUT . _PATH [EOL] [EOL] def get ( self ) : [EOL] return self . _load ( self . _path ) [EOL] [EOL] def set ( self , key , value ) : [EOL] content = self . _load ( self . _path ) [EOL] content [ key ] = value [EOL] self . _store ( self . _path , content ) [EOL] [EOL] def delete ( self , key ) : [EOL] content = self . _load ( self . _path ) [EOL] del content [ key ] [EOL] self . _store ( self . _path , content ) [EOL] [EOL] @ classmethod def _load ( cls , path ) : [EOL] with open ( path , [string] , encoding = [string] ) as data_file : [EOL] return json . load ( data_file ) [EOL] [EOL] @ classmethod def _store ( cls , path , content ) : [EOL] with open ( path , [string] , encoding = [string] ) as data_file : [EOL] json . dump ( content , data_file , ensure_ascii = False ) [EOL] [EOL] [EOL] class OutputStream : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _result = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . _result [EOL] [EOL] def write ( self , obj ) : [EOL] self . _result += obj [EOL] [EOL] [EOL] class TestDUT ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def tearDown ( self ) : [EOL] pass [EOL] [EOL] @ mock . patch ( [string] , mock . mock_open ( read_data = [string] ) ) def test_get_ShouldPass ( self ) : [EOL] [comment] [EOL] dut = DUT ( ) [EOL] content = dut . get ( ) [EOL] [EOL] [comment] [EOL] golden_unit = { [string] : [string] } [EOL] [EOL] self . assertEqual ( content , golden_unit ) [EOL] [EOL] @ mock . patch ( [string] , return_value = Mock ( ) ) def test_set_ShouldPass ( self , mock_open ) : [EOL] [comment] [EOL] output = OutputStream ( ) [EOL] [EOL] file_mock = Mock ( ) [EOL] file_mock . read . return_value = [string] [EOL] file_mock . write = output . write [EOL] [EOL] mock_open . return_value . __enter__ = Mock ( return_value = file_mock ) [EOL] mock_open . return_value . __exit__ = Mock ( ) [EOL] [EOL] [comment] [EOL] dut = DUT ( ) [EOL] dut . set ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] golden_unit = { [string] : [string] } [EOL] [EOL] self . assertEqual ( json . loads ( str ( output ) ) , golden_unit ) [EOL] [EOL] @ mock . patch ( [string] , return_value = Mock ( ) ) def test_delete_ShouldPass ( self , mock_open ) : [EOL] [comment] [EOL] output = OutputStream ( ) [EOL] [EOL] file_mock = Mock ( ) [EOL] file_mock . read . return_value = [string] [EOL] file_mock . write = output . write [EOL] [EOL] mock_open . return_value . __enter__ = Mock ( return_value = file_mock ) [EOL] mock_open . return_value . __exit__ = Mock ( ) [EOL] [EOL] [comment] [EOL] dut = DUT ( ) [EOL] dut . delete ( [string] ) [EOL] [EOL] [comment] [EOL] golden_unit = { } [EOL] [EOL] self . assertEqual ( json . loads ( str ( output ) ) , golden_unit ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.DUT$ 0 0 0 0 0 $typing.Any$ 0 $unitest.mock_open.DUT$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.OutputStream$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 $typing.Any$ 0 $unitest.mock_open.OutputStream$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.DUT$ 0 0 0 0 0 $unitest.mock_open.DUT$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.OutputStream$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.OutputStream$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 $typing.Any$ 0 $unitest.mock_open.OutputStream$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.DUT$ 0 0 0 0 0 $unitest.mock_open.DUT$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unitest.mock_open.OutputStream$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0
import logging [EOL] import logging [EOL] [EOL] from external_module import LOGGER_NAME [EOL] [EOL] [EOL] def external_library ( ) : [EOL] logger = logging . getLogger ( LOGGER_NAME ) [EOL] [EOL] logger . debug ( [string] ) [EOL] [EOL] logger . debug ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] [EOL] [EOL] LOGGER_NAME = __name__ [EOL] [EOL] [EOL] logging . getLogger ( LOGGER_NAME ) . addHandler ( logging . NullHandler ( ) ) [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [EOL] from external_module . library import external_library [EOL] [EOL] [EOL] def do_something ( ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] logger . debug ( [string] ) [EOL] [EOL] external_library ( ) [EOL] [EOL] logger . debug ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] import flask [EOL] import flask [EOL] [EOL] [EOL] app = flask . Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def my_root_handler ( ) : [EOL] print ( [string] + flask . request . query_string . decode ( [string] ) ) [EOL] [EOL] return flask . make_response ( flask . jsonify ( { [string] : [string] , [string] : [string] } ) , [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import flask [EOL] import os [EOL] from flask import Flask , redirect , render_template , request , send_from_directory [EOL] [EOL] [EOL] APP = Flask ( __name__ ) [EOL] [EOL] [EOL] @ APP . route ( [string] , methods = [ [string] ] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ APP . route ( [string] , methods = [ [string] ] ) def redirect_url ( ) : [EOL] return redirect ( request . url_root + [string] ) [EOL] [EOL] [EOL] @ APP . route ( [string] , methods = [ [string] ] ) def download_file ( filename ) : [EOL] return send_from_directory ( [string] , filename ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] APP . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from app import create_server [EOL] [EOL] server = create_server ( ) [EOL] [EOL] if __name__ == [string] : [EOL] server . run ( host = [string] , port = [number] , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] [EOL] student = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ student . route ( [string] ) def show ( ) : [EOL] return [string] , [number] [EOL]	0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Flask [EOL] from app . teacher import teacher [EOL] from app . student import student [EOL] [EOL] [EOL] def create_server ( ) : [EOL] app = Flask ( __name__ ) [EOL] app . register_blueprint ( teacher ) [EOL] app . register_blueprint ( student ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] [EOL] teacher = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ teacher . route ( [string] ) def show ( ) : [EOL] return [string] , [number] [EOL]	0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] from flask import current_app [EOL] from app import create_server [EOL] [EOL] [EOL] class TestApp ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . app = create_server ( ) [EOL] self . app_ctx = self . app . app_context ( ) [EOL] self . app_ctx . push ( ) [EOL] self . client = self . app . test_client ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . app_ctx . pop ( ) [EOL] [EOL] def test_teacher ( self ) : [EOL] rsp = self . client . get ( [string] ) [EOL] self . assertEqual ( rsp . get_data ( as_text = True ) , [string] ) [EOL] self . assertEqual ( rsp . status_code , [number] ) [EOL] [EOL] def test_student ( self ) : [EOL] rsp = self . client . get ( [string] ) [EOL] self . assertEqual ( rsp . get_data ( as_text = True ) , [string] ) [EOL] self . assertEqual ( rsp . status_code , [number] ) [EOL] [EOL] def test_strenger ( self ) : [EOL] rsp = self . client . get ( [string] ) [EOL] self . assertEqual ( rsp . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] import os [EOL] from flask import Flask , redirect , render_template , request [EOL] from werkzeug . utils import secure_filename [EOL] [EOL] [EOL] APP = Flask ( __name__ ) [EOL] APP . config [ [string] ] = [number] [EOL] [EOL] [EOL] @ APP . route ( [string] , methods = [ [string] , [string] ] ) def upload_file ( ) : [EOL] if request . method == [string] : [EOL] return render_template ( [string] ) [EOL] [EOL] file = request . files [ [string] ] [EOL] [EOL] if file . filename == [string] : [EOL] return redirect ( request . url ) [EOL] [EOL] file . save ( os . path . join ( [string] , file . filename ) ) [EOL] return [string] . format ( file . filename ) , [number] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] APP . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import http [EOL] import http . server [EOL] import json [EOL] [EOL] [EOL] class MyHttpHandler ( http . server . BaseHTTPRequestHandler ) : [EOL] [EOL] def do_GET ( self ) : [EOL] print ( [string] + self . path ) [EOL] self . send_response ( [number] ) [EOL] self . send_header ( [string] , [string] ) [EOL] self . end_headers ( ) [EOL] [EOL] msg = json . dumps ( { [string] : [string] , [string] : [string] } , indent = [number] , separators = ( [string] , [string] ) ) [EOL] [EOL] self . wfile . write ( bytes ( msg , [string] ) ) [EOL] [EOL] httpd = http . server . HTTPServer ( ( [string] , [number] ) , MyHttpHandler ) [EOL] [EOL] httpd . serve_forever ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $http.server.HTTPServer$ 0 0 0 0 0