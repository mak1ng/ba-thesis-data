	0
from typing import Dict , Any [EOL] import typing [EOL] import pydynasync [EOL] import test [EOL] import gc [EOL] from unittest . mock import patch [EOL] import weakref [EOL] [EOL] import pytest [EOL] [EOL] import pydynasync . models as M [EOL] import pydynasync . attributes as A [EOL] [EOL] from test import StringTest , IntegerTest , Person [EOL] [EOL] [EOL] def test_changes_none ( person1 ) : [EOL] p = person1 . person [EOL] changes = M . Changes ( ) [EOL] assert changes . get ( p ) == { } [EOL] [EOL] [EOL] def test_changes_update_hash_key ( person1 ) : [EOL] p = person1 . person [EOL] changes = M . Changes ( ) [EOL] assert not changes . get ( p ) [EOL] [EOL] new_value = [number] [EOL] assert p . id != new_value [EOL] p . id = new_value [EOL] changes . set ( p , person1 . members . index ( [string] ) ) [EOL] assert changes . get ( p ) == { [string] : new_value } [EOL] [EOL] [EOL] def test_changes_update ( person1 ) : [EOL] p = person1 . person [EOL] changes = M . Changes ( ) [EOL] assert not changes . get ( p ) [EOL] [EOL] new_name = p . name_ + [string] [EOL] p . name_ = new_name [EOL] changes . set ( p , person1 . members . index ( [string] ) ) [EOL] assert changes . get ( p ) == { [string] : new_name } [EOL] [EOL] new_nickname = ( p . nickname or [string] ) + [string] [EOL] p . nickname = new_nickname [EOL] changes . set ( p , person1 . members . index ( [string] ) ) [EOL] assert changes . get ( p ) == { [string] : new_name , [string] : new_nickname , } [EOL] [EOL] changes . unset ( p , person1 . members . index ( [string] ) ) [EOL] assert changes . get ( p ) == { [string] : new_name , } [EOL] [EOL] [EOL] def test_clear_changed ( person1 ) : [EOL] p = person1 . person [EOL] p . name_ += [string] [EOL] assert M . ModelMeta . get_changed ( p ) [EOL] M . ModelMeta . clear_changed ( p ) [EOL] assert not M . ModelMeta . get_changed ( p ) [EOL] [EOL] [EOL] def test_get_changed ( person1 ) : [EOL] p = person1 . person [EOL] changes = { } [EOL] [EOL] assert M . ModelMeta . get_changed ( p ) == changes [EOL] [EOL] original = p . name_ [EOL] [EOL] p . name_ = original [EOL] assert M . ModelMeta . get_changed ( p ) == changes [EOL] [EOL] p . name_ = original + [string] [EOL] changes [ [string] ] = original + [string] [EOL] assert M . ModelMeta . get_changed ( p ) == changes [EOL] [EOL] p . nickname = [string] [EOL] changes [ [string] ] = [string] [EOL] assert M . ModelMeta . get_changed ( p ) == changes [EOL] [EOL] [EOL] def test_change_undo ( person1 ) : [EOL] p = person1 . person [EOL] [EOL] M . ModelMeta . clear_changed ( p ) [EOL] original_name = p . name_ [EOL] type ( p ) . name_ . reset ( p , p . name_ ) [EOL] p . name_ = original_name + [string] [EOL] assert M . ModelMeta . get_changed ( p ) == { [string] : original_name + [string] } [EOL] [EOL] [comment] [EOL] p . name_ = original_name [EOL] assert M . ModelMeta . get_changed ( p ) == { } [EOL] [EOL] [EOL] def test_change_undo_multiple ( person1 ) : [EOL] p = person1 . person [EOL] [EOL] M . ModelMeta . clear_changed ( p ) [EOL] original_name = p . name_ [EOL] type ( p ) . name_ . reset ( p , p . name_ ) [EOL] new_name1 = original_name + [string] [EOL] new_name2 = new_name1 + [string] [EOL] p . name_ = new_name1 [EOL] p . name_ = new_name2 [EOL] assert M . ModelMeta . get_changed ( p ) == { [string] : new_name2 , } [EOL] [EOL] p . name_ = original_name [EOL] assert not M . ModelMeta . get_changed ( p ) [EOL] [EOL] [EOL] def test_model_members ( ) : [EOL] assert Person . _members == ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def test_model_ddb_name_provided ( ) : [EOL] name = [string] [EOL] [EOL] class ModelWithDDBName ( M . Model , ddb_name = name ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr = A . String ( ) [EOL] [EOL] assert ModelWithDDBName . _ddb_name == name [EOL] [EOL] [EOL] def test_model_invalid_class_params ( ) : [EOL] [EOL] with pytest . raises ( TypeError ) as e : [EOL] [EOL] class MyModel ( M . Model , foo = [string] , bar = [string] ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr = A . String ( ) [EOL] [EOL] assert str ( e . value ) == ( [string] ) [EOL] [EOL] [EOL] def test_model_hash_key ( ) : [EOL] [EOL] class MyModel ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] [EOL] assert MyModel . _hash_key is MyModel . id [EOL] [EOL] [EOL] def test_model_range_key ( ) : [EOL] [EOL] class MyModel1 ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] [EOL] assert MyModel1 . _range_key is None [EOL] [EOL] class MyModel2 ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr = A . String ( range_key = True ) [EOL] [EOL] assert MyModel2 . _range_key is MyModel2 . attr [EOL] assert MyModel2 . _hash_key is MyModel2 . id [EOL] [EOL] [EOL] def test_model_init_keyword_args ( ) : [EOL] [EOL] class MyModel ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr1 = A . String ( ) [EOL] attr2 = A . String ( ) [EOL] [EOL] m = MyModel ( attr1 = [string] , attr2 = [string] ) [EOL] assert m . attr1 == [string] [EOL] assert m . attr2 == [string] [EOL] [EOL] [EOL] def test_model_key_when_not_weakref_call ( ) : [EOL] [docstring] [EOL] [EOL] class P ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr1 = A . String ( ) [EOL] attr2 = A . String ( ) [EOL] [EOL] p = P ( ) [EOL] assert p . _key ( ) == ( None , None , None ) [EOL] [EOL] p . attr2 = [string] [EOL] assert p . _key ( ) == ( None , None , [string] ) [EOL] [EOL] p . attr1 = [string] [EOL] assert p . _key ( ) == ( None , [string] , [string] ) [EOL] [EOL] p . id = [number] [EOL] assert p . _key ( ) == ( [number] , [string] , [string] ) [EOL] [EOL] [EOL] def test_model_key_when_weakref_call ( ) : [EOL] [docstring] [EOL] [EOL] class P ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr1 = A . String ( ) [EOL] [EOL] p1 , p2 = P ( ) , P ( ) [EOL] [EOL] with patch ( [string] ) as is_weakref_call : [EOL] is_weakref_call . return_value = True [EOL] assert p1 . _key ( ) is p1 [EOL] assert p2 . _key ( ) is p2 [EOL] [EOL] [EOL] def test_model_equality_empty ( ) : [EOL] a1 , a2 = StringTest ( ) , StringTest ( ) [EOL] assert a1 == a2 [EOL] assert a2 == a1 [EOL] [EOL] i1 = IntegerTest ( ) [EOL] assert a1 . _key ( ) == i1 . _key ( ) [EOL] assert a1 != i1 [EOL] assert i1 != a1 [EOL] [EOL] a1 . required = [string] [EOL] i1 . required = [number] [EOL] assert a1 != i1 [EOL] assert i1 != a1 [EOL] [EOL] [EOL] def test_model_equality_nonempty ( ) : [EOL] name = [string] [EOL] p1 , p2 = Person ( ) , Person ( ) [EOL] p1 . name_ = name [EOL] [EOL] assert p1 == p1 [EOL] assert p1 != p2 [EOL] assert p2 != p1 [EOL] [EOL] p2 . name_ = name [EOL] [EOL] assert p1 == p2 [EOL] assert p2 == p1 [EOL] [EOL] p1 . name_ = p1 . name_ + [string] [EOL] assert p2 != p1 [EOL] assert p1 != p2 [EOL] [EOL] [EOL] def test_model_equality_when_weakref_call ( ) : [EOL] [EOL] class P ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr1 = A . String ( ) [EOL] [EOL] p1 , p2 = P ( ) , P ( ) [EOL] [EOL] assert p1 == p2 [EOL] assert p2 == p1 [EOL] [EOL] [comment] [EOL] [comment] [EOL] with patch ( [string] ) as is_weakref_call : [EOL] is_weakref_call . return_value = True [EOL] assert p1 != p2 [EOL] assert p2 != p1 [EOL] [EOL] assert p1 == p2 [EOL] assert p2 == p1 [EOL] [EOL] [EOL] def test_garbage_collection_of_model ( ) : [EOL] [EOL] class P1 ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr = A . String ( ) [EOL] [EOL] class P2 ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr = A . String ( ) [EOL] [EOL] ref1 = weakref . ref ( P1 ) [EOL] ref2 = weakref . ref ( P2 ) [EOL] [EOL] p1 , p2 = P1 ( ) , P2 ( ) [EOL] p1 . attr = [string] [EOL] p2 . attr = [string] [EOL] assert ref1 ( ) [EOL] assert ref2 ( ) [EOL] [EOL] del p1 [EOL] del P1 [EOL] gc . collect ( ) [EOL] assert not ref1 ( ) [EOL] assert ref2 ( ) [EOL] [EOL] del p2 [EOL] del P2 [EOL] gc . collect ( ) [EOL] assert not ref2 ( ) [EOL] [EOL] [EOL] def test_model_requires_hash_key ( ) : [EOL] [EOL] with pytest . raises ( TypeError ) as e : [EOL] [EOL] class MyModel ( M . Model ) : [EOL] [EOL] id = A . Integer ( ) [EOL] [EOL] assert str ( e . value ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_model_more_than_one_range_key ( ) : [EOL] [EOL] with pytest . raises ( TypeError ) as e : [EOL] [EOL] class MyModel ( M . Model ) : [EOL] id = A . Integer ( hash_key = True ) [EOL] attr1 = A . Integer ( range_key = True ) [EOL] attr2 = A . Integer ( range_key = True ) [EOL] [EOL] assert str ( e . value ) == ( [string] [string] ) [EOL]	
from typing import Any [EOL] import typing [EOL] from botocore . exceptions import ClientError [EOL] [EOL] import pytest [EOL] [EOL] import pydynasync . exp as exp [EOL] [EOL] [EOL] def test_create_delete_table ( client ) : [EOL] name = [string] [EOL] spec = exp . make_table_spec ( name ) [EOL] with pytest . raises ( ClientError ) : [EOL] client . describe_table ( TableName = name ) [EOL] resp = exp . create_table ( client , spec ) [EOL] try : [EOL] assert resp [ [string] ] [EOL] finally : [EOL] client . delete_table ( TableName = name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from pydynasync . types import AttrType , KeyType , ProjectionType [EOL] import pydynasync . exp as exp [EOL] [EOL] [EOL] def test_product_catalog_spec ( product_catalog_spec ) : [EOL] spec = product_catalog_spec [EOL] assert spec . TableName == [string] [EOL] assert len ( spec . AttributeDefinitions ) == [number] [EOL] assert len ( spec . KeySchema ) == [number] [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . N [EOL] [EOL] [EOL] def test_forum_spec ( forum_spec ) : [EOL] spec = forum_spec [EOL] assert spec . TableName == [string] [EOL] assert len ( spec . AttributeDefinitions ) == [number] [EOL] assert len ( spec . KeySchema ) == [number] [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . S [EOL] [EOL] [EOL] def test_thread_spec ( thread_spec ) : [EOL] spec = thread_spec [EOL] assert spec . TableName == [string] [EOL] assert len ( spec . AttributeDefinitions ) == [number] [EOL] assert len ( spec . KeySchema ) == [number] [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . S [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . S [EOL] [EOL] [EOL] def test_reply_spec ( reply_spec ) : [EOL] spec = reply_spec [EOL] assert spec . TableName == [string] [EOL] assert spec . AttributeDefinitions == [ exp . Attribute ( [string] , AttrType . S ) , exp . Attribute ( [string] , AttrType . S ) , exp . Attribute ( [string] , AttrType . S ) , ] [EOL] assert spec . KeySchema == [ exp . Key ( [string] , KeyType . HASH ) , exp . Key ( [string] , KeyType . RANGE ) , ] [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . S [EOL] assert spec . AttributeDefinitions [ [number] ] . AttributeType == AttrType . S [EOL] assert spec . LocalSecondaryIndexes [EOL] hkey , rkey = spec . KeySchema [EOL] assert hkey . KeyType == KeyType . HASH [EOL] assert rkey . KeyType == KeyType . RANGE [EOL] lsi = spec . LocalSecondaryIndexes [EOL] assert len ( lsi ) == [number] [EOL] index = lsi [ [number] ] [EOL] assert index . IndexName == [string] [EOL] assert index . KeySchema == [ exp . Key ( [string] , KeyType . HASH ) , exp . Key ( [string] , KeyType . RANGE ) , ] [EOL] assert index . Projection == exp . Projection ( ProjectionType = ProjectionType . KEYS_ONLY , NonKeyAttributes = None ) [EOL] [EOL] [EOL] def test_product_catalog_table ( product_catalog_table , client ) : [EOL] t = product_catalog_table [EOL] assert client . describe_table ( TableName = t [ [string] ] ) [EOL] [EOL] [EOL] def test_forum_table ( forum_table , client ) : [EOL] t = forum_table [EOL] assert client . describe_table ( TableName = t [ [string] ] ) [EOL] [EOL] [EOL] def test_thread_table ( thread_table , client ) : [EOL] t = thread_table [EOL] assert client . describe_table ( TableName = t [ [string] ] ) [EOL] [EOL] [EOL] def test_reply_table ( reply_table , client ) : [EOL] t = reply_table [EOL] assert client . describe_table ( TableName = t [ [string] ] ) [EOL] [EOL] [EOL] def test_test_table ( test_table , client ) : [EOL] t = test_table [EOL] assert client . describe_table ( TableName = t [ [string] ] ) [EOL] import pprint [EOL] [EOL] result = client . put_item ( TableName = [string] , Item = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , } ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . get_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . get_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ProjectionExpression = [string] , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . delete_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . put_item ( TableName = [string] , Item = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . get_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . get_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ProjectionExpression = [string] , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [EOL] result = client . delete_item ( TableName = [string] , Key = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } , ReturnConsumedCapacity = [string] , ) [EOL] print ( [string] ) [EOL] pprint . pprint ( result ) [EOL] print ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pydynasync [EOL] from pydynasync import attributes as A , models as M [EOL] [EOL] [EOL] class Person ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] name_ = A . String ( ) [EOL] nickname = A . String ( nullable = True ) [EOL] age = A . Integer ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class BinaryTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Binary ( ) [EOL] optional = A . Binary ( nullable = True ) [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] class BooleanTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Boolean ( ) [EOL] optional = A . Boolean ( nullable = True ) [EOL] [EOL] [EOL] class DecimalTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Decimal ( ) [EOL] optional = A . Decimal ( nullable = True ) [EOL] [EOL] [EOL] class IntegerTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Integer ( ) [EOL] optional = A . Integer ( nullable = True ) [EOL] [EOL] [EOL] class NullTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Null ( ) [EOL] optional = A . Null ( nullable = True ) [EOL] [EOL] [EOL] class NumberTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . Number ( ) [EOL] optional = A . Number ( nullable = True ) [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] class StringTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . String ( ) [EOL] optional = A . String ( nullable = True ) [EOL] [EOL] [EOL] class StringSetTest ( M . Model ) : [EOL] [EOL] id = A . Integer ( hash_key = True ) [EOL] required = A . StringSet ( ) [EOL] optional = A . StringSet ( nullable = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.String$ 0 0 0 0 0 0 0 $pydynasync.attributes.String$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Binary$ 0 0 0 0 0 0 0 $pydynasync.attributes.Binary$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Boolean$ 0 0 0 0 0 0 0 $pydynasync.attributes.Boolean$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Decimal$ 0 0 0 0 0 0 0 $pydynasync.attributes.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Null$ 0 0 0 0 0 0 0 $pydynasync.attributes.Null$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Number$ 0 0 0 0 0 0 0 $pydynasync.attributes.Number$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.String$ 0 0 0 0 0 0 0 $pydynasync.attributes.String$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.Integer$ 0 0 0 0 0 0 0 0 0 0 $pydynasync.attributes.StringSet$ 0 0 0 0 0 0 0 $pydynasync.attributes.StringSet$ 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Dict , Any , Set , List , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] import base64 [EOL] import decimal [EOL] import botocore . loaders [EOL] import botocore . session [EOL] [EOL] import pytest [EOL] [EOL] import pydynasync . types as T [EOL] [EOL] [EOL] def assert_success ( response ) : [EOL] code = response [ [string] ] [ [string] ] [EOL] assert [number] <= code <= [number] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def boto_loader ( ) : [EOL] return botocore . loaders . Loader ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def ddb_model ( boto_loader ) : [EOL] return boto_loader . load_service_model ( type_name = [string] , service_name = [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def ddb_operations ( ddb_model ) : [EOL] return ddb_model [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def ddb_shapes ( ddb_model ) : [EOL] return ddb_model [ [string] ] [EOL] [EOL] [EOL] def test_attr_type ( ddb_shapes ) : [EOL] [docstring] [EOL] expected = set ( a . value for a in T . AttrType ) [EOL] actual = set ( ddb_shapes [ [string] ] [ [string] ] . keys ( ) ) [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_key_type ( ddb_shapes ) : [EOL] expected = set ( k . value for k in T . KeyType ) [EOL] actual = set ( ddb_shapes [ [string] ] [ [string] ] ) [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_stream_view_type ( ddb_shapes ) : [EOL] expected = set ( s . value for s in T . StreamViewType ) [EOL] actual = set ( ddb_shapes [ [string] ] [ [string] ] ) [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_projection_type ( ddb_shapes ) : [EOL] expected = set ( p . value for p in T . ProjectionType ) [EOL] actual = set ( ddb_shapes [ [string] ] [ [string] ] ) [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_attrtype_string_call ( ) : [EOL] assert T . AttrType . S ( ) == { } [EOL] [EOL] assert T . AttrType . S ( foo = [string] ) == { [string] : { [string] : [string] } } [EOL] [EOL] assert T . AttrType . S ( a = [string] , c = [string] , b = [string] ) == { [string] : { [string] : [string] , } , [string] : { [string] : [string] , } , [string] : { [string] : [string] , } } [EOL] [EOL] [EOL] def test_attrtype_number_call ( ) : [EOL] assert T . AttrType . N ( ) == { } [EOL] [EOL] assert T . AttrType . N ( bar = [number] ) == { [string] : { [string] : [string] , } } [EOL] [EOL] assert T . AttrType . N ( foo = [number] , bar1 = [number] , qux = decimal . Decimal ( [string] ) ) == { [string] : { [string] : [string] , } , [string] : { [string] : [string] , } , [string] : { [string] : [string] , } } [EOL] [EOL] [EOL] def test_attrtype_binary_call ( ) : [EOL] data = [string] , [string] , [string] [EOL] expected = list ( map ( base64 . b64encode , data ) ) [EOL] [EOL] assert T . AttrType . B ( ) == { } [EOL] [EOL] assert T . AttrType . B ( foo = data [ [number] ] ) == { [string] : { [string] : expected [ [number] ] , } } [EOL] [EOL] assert T . AttrType . B ( blah = data [ [number] ] , blip = data [ [number] ] , pvit = data [ [number] ] ) == { [string] : { [string] : expected [ [number] ] , } , [string] : { [string] : expected [ [number] ] , } , [string] : { [string] : expected [ [number] ] , } } [EOL] [EOL] [EOL] def test_attrtype_bool_call ( ) : [EOL] assert T . AttrType . BOOL ( ) == { } [EOL] [EOL] assert T . AttrType . BOOL ( b = True ) == { [string] : { [string] : True , } } [EOL] [EOL] assert T . AttrType . BOOL ( b = False , c = True ) == { [string] : { [string] : False , } , [string] : { [string] : True , } } [EOL] [EOL] [EOL] def test_attrtype_null_call ( ) : [EOL] assert T . AttrType . NULL ( ) == { } [EOL] [EOL] assert T . AttrType . NULL ( a = True ) == { [string] : { [string] : True , } } [EOL] [EOL] assert T . AttrType . NULL ( a = True , c = True ) == { [string] : { [string] : True , } , [string] : { [string] : True , } } [EOL] [EOL] with pytest . raises ( TypeError ) as e : [EOL] T . AttrType . NULL ( a = False ) [EOL] assert str ( e . value ) == [string] [EOL] [EOL] [EOL] def test_attrtype_stringset_call ( ) : [EOL] assert T . AttrType . SS ( ) == { } [EOL] [EOL] assert T . AttrType . SS ( foo = [ [string] , [string] , [string] ] ) == { [string] : { [string] : [ [string] , [string] , [string] ] , } } [EOL] [EOL] assert T . AttrType . SS ( b = ( [string] , [string] , [string] , [string] ) , a = [ [string] , [string] , [string] ] ) == { [string] : { [string] : [ [string] , [string] , [string] , [string] ] , } , [string] : { [string] : [ [string] , [string] , [string] ] , } } [EOL] [EOL] [EOL] def test_attrtype_numberset_call ( ) : [EOL] assert T . AttrType . NS ( ) == { } [EOL] [EOL] assert T . AttrType . NS ( a = [ [number] , decimal . Decimal ( [string] ) , [number] ] ) == { [string] : { [string] : [ [string] , [string] , [string] ] , } } [EOL] [EOL] assert T . AttrType . NS ( a = [ [number] , [number] ] , b = ( [number] , [number] ) ) == { [string] : { [string] : [ [string] , [string] ] , } , [string] : { [string] : [ [string] , [string] ] , } } [EOL] [EOL] [EOL] def test_attrtype_binaryset_call ( ) : [EOL] data = [string] , [string] , [string] , [string] , [string] [EOL] expected = list ( map ( base64 . b64encode , data ) ) [EOL] [EOL] assert T . AttrType . BS ( ) == { } [EOL] [EOL] assert T . AttrType . BS ( a = [ data [ [number] ] ] ) == { [string] : { [string] : [ expected [ [number] ] ] , } } [EOL] [EOL] assert T . AttrType . BS ( a = data [ : [number] ] , b = data [ [number] : [number] ] , c = data [ [number] : [number] ] ) == { [string] : { [string] : expected [ : [number] ] , } , [string] : { [string] : expected [ [number] : [number] ] , } , [string] : { [string] : expected [ [number] : [number] ] , } } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( T . AttrType . S , [string] ) , ( T . AttrType . N , [number] ) , ( T . AttrType . B , [string] ) , ( T . AttrType . BOOL , True ) , ( T . AttrType . BOOL , False ) , ( T . AttrType . NULL , True ) , ( T . AttrType . SS , [ [string] , [string] , [string] ] ) , ( T . AttrType . NS , [ [number] , decimal . Decimal ( [string] ) , [string] ] ) , ( T . AttrType . BS , [ [string] , [string] ] ) , ( T . AttrType . L , [ { [string] : [string] } , { [string] : [string] } ] ) , ( T . AttrType . M , { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [ [string] , [string] , [string] ] } } ) , ( T . AttrType . M , { [string] : { [string] : { [string] : { [string] : { [string] : { [string] : [string] } } } } } } ) , ] ) def test_attrtype_ddb_ops ( client , test1_table , test1_spec , attr_type , value ) : [EOL] tablename = test1_spec . TableName [EOL] pk = [string] [EOL] item = { [string] : { [string] : pk , } } [EOL] serialized = attr_type ( MyValue = value ) [EOL] item . update ( serialized ) [EOL] put_result = client . put_item ( TableName = tablename , Item = item , ) [EOL] print ( [string] , put_result ) [EOL] assert_success ( put_result ) [EOL] [EOL] try : [EOL] result_item = client . get_item ( TableName = tablename , Key = { [string] : { [string] : pk } } , ) [EOL] assert_success ( result_item ) [EOL] assert result_item [ [string] ] == item [EOL] print ( [string] , result_item ) [EOL] finally : [EOL] delete_result = client . delete_item ( TableName = tablename , Key = { [string] : { [string] : [string] , } } ) [EOL] print ( [string] , delete_result ) [EOL] assert_success ( delete_result ) [EOL]	
from typing import Any [EOL] import typing [EOL] import test [EOL] import types [EOL] [EOL] import pytest [EOL] [EOL] from pydynasync import devguide , exp [EOL] from pydynasync import models as M [EOL] [EOL] from test import StringTest , IntegerTest , Person [EOL] [EOL] [EOL] @ pytest . fixture def str1 ( ) : [EOL] m = StringTest ( ) [EOL] m . required = [string] [EOL] assert StringTest . _members == ( [string] , [string] , [string] ) [EOL] return types . SimpleNamespace ( model = m , required = m . required , members = ( [string] , [string] , [string] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def intattr1 ( ) : [EOL] m = IntegerTest ( ) [EOL] m . required = [number] [EOL] M . ModelMeta . clear_changed ( m ) [EOL] return types . SimpleNamespace ( model = m , required = m . required , members = ( [string] , [string] , [string] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def person1 ( ) : [EOL] person = Person ( ) [EOL] person . id = [number] [EOL] person . name_ = [string] [EOL] person . age = [number] [EOL] M . ModelMeta . clear_changed ( person ) [EOL] return types . SimpleNamespace ( person = person , id = person . id , name_ = person . name_ , nickname = person . nickname , age = person . age , members = ( [string] , [string] , [string] , [string] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def product_catalog_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def forum_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def thread_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def reply_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def test_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def test1_spec ( ) : [EOL] return devguide . specs [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def product_catalog_table ( product_catalog_spec , client ) : [EOL] yield exp . create_table ( client , product_catalog_spec ) [EOL] client . delete_table ( TableName = product_catalog_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def forum_table ( forum_spec , client ) : [EOL] yield exp . create_table ( client , forum_spec ) [EOL] client . delete_table ( TableName = forum_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def thread_table ( thread_spec , client ) : [EOL] yield exp . create_table ( client , thread_spec ) [EOL] client . delete_table ( TableName = thread_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def reply_table ( reply_spec , client ) : [EOL] yield exp . create_table ( client , reply_spec ) [EOL] client . delete_table ( TableName = reply_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def test_table ( test_spec , client ) : [EOL] yield exp . create_table ( client , test_spec ) [EOL] client . delete_table ( TableName = test_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def test1_table ( test1_spec , client ) : [EOL] yield exp . create_table ( client , test1_spec ) [EOL] client . delete_table ( TableName = test1_spec . TableName ) [EOL] [EOL] [EOL] @ pytest . fixture def session ( ) : [EOL] return exp . make_session ( ) [EOL] [EOL] [EOL] @ pytest . fixture def client ( session ) : [EOL] return exp . get_client ( session = session ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . types import KeyType , StreamViewType , AttrType [EOL] [EOL] [EOL] def list_of ( validate1 ) : [EOL] def check ( seq ) : [EOL] for elem in seq : [EOL] validate1 ( elem ) [EOL] return check [EOL] [EOL] [EOL] def attribute_name ( cls , attrib , val ) : [EOL] if not isinstance ( val , str ) or not ( [number] <= len ( val ) <= [number] ) : [EOL] raise ValueError ( [string] % ( val , ) ) [EOL] [EOL] [EOL] def attribute_type ( cls , attrib , val ) : [EOL] if val not in ( AttrType . S , AttrType . N , AttrType . B ) : [EOL] raise ValueError ( [string] % ( val , ) ) [EOL] [EOL] [EOL] def key_type ( cls , attrib , val ) : [EOL] if val not in KeyType : [EOL] raise ValueError ( [string] % ( val , ) ) [EOL] [EOL] [EOL] def stream_view_type ( cls , attrib , val ) : [EOL] if val is not None and val not in StreamViewType : [EOL] raise ValueError ( [string] % ( val , ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] NUMBER_RANGE = ( - [number] , [number] ) [EOL] [EOL] [EOL] def is_reserved_word ( word ) : [EOL] [docstring] [EOL] return word . upper ( ) in ddb_reserved_words [EOL] [EOL] [EOL] [comment] [EOL] ddb_reserved_words = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import pydynasync [EOL] import attr [EOL] from . types import ProjectionType [EOL] [EOL] [EOL] def to_boto ( obj ) : [EOL] if attr . has ( type ( obj ) ) : [EOL] obj = attr . asdict ( obj , filter = lambda a , v : v not in ( None , [ ] , ( ) ) ) [EOL] elif not isinstance ( obj , dict ) : [EOL] raise TypeError ( [string] ) [EOL] return obj [EOL] [EOL] [EOL] def list_of ( convert1 ) : [EOL] def convert_all ( obj ) : [EOL] return [ ] if obj is None else list ( map ( convert1 , obj ) ) [EOL] return convert_all [EOL] [EOL] [EOL] def attribute_definition ( obj ) : [EOL] from . exp import Attribute [EOL] if not isinstance ( obj , Attribute ) : [EOL] if not isinstance ( obj , dict ) : [EOL] raise TypeError ( [string] ) [EOL] obj = Attribute ( ** obj ) [EOL] return obj [EOL] [EOL] [EOL] def provisioned_throughput ( obj ) : [EOL] from . exp import ProvisionedThroughput [EOL] if obj is False : [EOL] obj = ProvisionedThroughput ( False , None ) [EOL] elif not isinstance ( obj , ProvisionedThroughput ) : [EOL] if isinstance ( obj , dict ) : [EOL] obj = ProvisionedThroughput ( ** obj ) [EOL] elif isinstance ( obj , int ) : [EOL] obj = ProvisionedThroughput ( obj , obj ) [EOL] elif isinstance ( obj , tuple ) : [EOL] valid = len ( obj ) == [number] [EOL] if valid : [EOL] valid = all ( map ( lambda x : isinstance ( x , int ) and x > [number] , obj ) ) [EOL] if not valid : [EOL] msg = ( [string] [string] ) [EOL] raise ValueError [EOL] obj = ProvisionedThroughput ( * obj ) [EOL] else : [EOL] msg = ( [string] [string] ) [EOL] raise TypeError ( msg ) [EOL] return obj [EOL] [EOL] [EOL] def lsi ( obj ) : [EOL] from . exp import LSI [EOL] if not isinstance ( obj , LSI ) : [EOL] if isinstance ( obj , dict ) : [EOL] obj = LSI ( ** obj ) [EOL] else : [EOL] raise TypeError ( [string] ) [EOL] return obj [EOL] [EOL] [EOL] def gsi ( obj ) : [EOL] from . exp import GSI [EOL] if not isinstance ( obj , GSI ) : [EOL] if isinstance ( obj , dict ) : [EOL] obj = GSI ( ** obj ) [EOL] else : [EOL] raise TypeError ( [string] ) [EOL] return obj [EOL] [EOL] [EOL] def key ( obj ) : [EOL] from . exp import Key [EOL] if not isinstance ( obj , Key ) : [EOL] if isinstance ( obj , dict ) : [EOL] obj = Key ( ** obj ) [EOL] elif isinstance ( obj , tuple ) and len ( obj ) == [number] : [EOL] obj = Key ( * obj ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] return obj [EOL] [EOL] [EOL] def stream_specification ( obj ) : [EOL] from . exp import StreamSpecification [EOL] if obj is None : [EOL] obj = StreamSpecification ( False , None ) [EOL] elif not isinstance ( obj , StreamSpecification ) : [EOL] if isinstance ( obj , dict ) : [EOL] obj = StreamSpecification ( ** obj ) [EOL] elif isinstance ( obj , tuple ) : [EOL] if len ( obj ) == [number] : [EOL] if obj [ [number] ] is not False : [EOL] raise ValueError ( [string] [string] ) [EOL] obj = StreamSpecification ( False , None ) [EOL] elif len ( obj ) != [number] : [EOL] raise ValueError ( [string] [string] ) [EOL] else : [EOL] obj = StreamSpecification ( * obj ) [EOL] else : [EOL] raise ValueError ( [string] [string] ) [EOL] return obj [EOL] [EOL] [EOL] def projection ( obj ) : [EOL] from . exp import Projection [EOL] if obj is None : [EOL] return Projection ( ProjectionType = ProjectionType . KEYS_ONLY , NonKeyAttributes = [ ] , ) [EOL] elif isinstance ( obj , dict ) : [EOL] return Projection ( ProjectionType = obj [ [string] ] , NonKeyAttributes = obj . get ( [string] , [ ] ) , ) [EOL] return obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from . import exp [EOL] from . types import KeyType , ProjectionType , AttrType [EOL] [EOL] [EOL] specs = { [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . N ) , ) , [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . S ) , ) , [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . S ) , range = ( [string] , AttrType . S ) , ) , [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . S ) , range = ( [string] , AttrType . S ) , extra_attrs = [ { [string] : [string] , [string] : AttrType . S } ] , local_secondary_indexes = [ { [string] : [string] , [string] : [ { [string] : [string] , [string] : KeyType . HASH } , { [string] : [string] , [string] : KeyType . RANGE } , ] , [string] : { [string] : ProjectionType . KEYS_ONLY , } } ] ) , [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . N ) , range = ( [string] , AttrType . S ) , ) , [string] : exp . make_table_spec ( [string] , id = ( [string] , AttrType . N ) , ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type , Any [EOL] import typing [EOL] def null_converter ( value ) : [EOL] if value is not True : [EOL] raise TypeError ( [string] ) [EOL] return value [EOL] [EOL] [EOL] def make_scalar_converter ( cls , tests , * , force = False ) : [EOL] if type ( cls ) is not type : [EOL] raise TypeError ( cls ) [EOL] [EOL] if not tests : [EOL] def convert ( value ) : [EOL] if not isinstance ( value , cls ) : [EOL] raise TypeError ( [string] . format ( cls . __name__ , type ( value ) . __name__ ) ) [EOL] return value [EOL] [EOL] return convert [EOL] [EOL] for k , v in tests . items ( ) : [EOL] if type ( k ) is not type : [EOL] raise TypeError ( k ) [EOL] if not callable ( v ) : [EOL] raise TypeError ( v ) [EOL] [EOL] def convert ( value ) : [EOL] if force or not isinstance ( value , cls ) : [EOL] type_ = type ( value ) [EOL] try : [EOL] func = tests [ type_ ] [EOL] except KeyError : [EOL] valid_types = [string] . join ( t . __name__ for t in tests ) [EOL] raise TypeError ( f" [string] { valid_types } [string] " f" [string] { type_ . __name__ } [string] { value }" ) [EOL] else : [EOL] value = func ( value ) [EOL] return value [EOL] [EOL] return convert [EOL] [EOL] [EOL] def make_set_converter ( scalar_converter ) : [EOL] return lambda value : list ( map ( scalar_converter , value ) ) [EOL] [EOL] [EOL] def make_serialization_helpers ( attr_type , convert_to , convert_from ) : [EOL] [EOL] descriptor = attr_type . value [EOL] [EOL] def serialize ( name , value ) : [EOL] return { name : { descriptor : convert_to ( value ) } } [EOL] [EOL] def deserialize ( name , value ) : [EOL] try : [EOL] attr_value = value [ name ] [EOL] except KeyError : [EOL] raise ValueError ( [string] [string] . format ( name , value ) ) [EOL] try : [EOL] result = attr_value [ descriptor ] [EOL] except KeyError : [EOL] raise ValueError ( [string] [string] . format ( descriptor , attr_value ) ) [EOL] return convert_from ( result ) [EOL] [EOL] return serialize , deserialize [EOL] [EOL] [EOL] def pack_set ( attr_type , attr_name , attr_value ) : [EOL] if not isinstance ( attr_name , str ) : [EOL] raise TypeError ( attr_name ) [EOL] if not attr_type . is_set_type ( ) : [EOL] raise ValueError ( attr_type ) [EOL] [EOL] return { attr_name : { attr_type . value : attr_value , } } [EOL] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] [docstring] [EOL] import inspect [EOL] import sys [EOL] import traceback [EOL] import weakref [EOL] [EOL] NOTFOUND = object ( ) [EOL] NOTSET = object ( ) [EOL] [EOL] _weakkeydict_codes = tuple ( func . __code__ for _ , func in inspect . getmembers ( weakref . WeakKeyDictionary , inspect . isfunction ) ) [EOL] [EOL] [EOL] def is_weakref_call ( * , framenum = [number] ) : [EOL] [docstring] [EOL] for frame , _ in traceback . walk_stack ( sys . _getframe ( framenum ) ) : [EOL] try : [EOL] if frame . f_code in _weakkeydict_codes : [EOL] return True [EOL] except AttributeError : [EOL] pass [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import json [EOL] import sys [EOL] import time [EOL] [EOL] from botocore . exceptions import ClientError [EOL] [EOL] from . . import exp , devguide [EOL] [EOL] [EOL] def read_json ( path ) : [EOL] with open ( path , [string] ) as f : [EOL] return json . load ( f ) [EOL] [EOL] [EOL] def delete_table ( client , table_name , * , wait = True ) : [EOL] try : [EOL] client . delete_table ( TableName = table_name ) [EOL] except ClientError as e : [EOL] if e . response [ [string] ] [ [string] ] == [string] : [EOL] return [EOL] raise [EOL] else : [EOL] waiter = client . get_waiter ( [string] ) [EOL] while waiter . wait ( TableName = table_name ) : [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] def put_json ( client , data ) : [EOL] for table_name , elems in data . items ( ) : [EOL] print ( [string] % ( table_name , ) , sep = [string] , end = [string] ) [EOL] delete_table ( client , table_name , wait = True ) [EOL] spec = devguide . specs [ table_name ] [EOL] exp . create_table ( client , spec , wait = True ) [EOL] for elem in elems : [EOL] params = elem [ [string] ] [EOL] params [ [string] ] = table_name [EOL] params [ [string] ] = [string] [EOL] resp = client . put_item ( ** params ) [EOL] assert resp [ [string] ] [ [string] ] == [number] [EOL] print ( [string] , sep = [string] , end = [string] ) [EOL] print ( ) [EOL] [EOL] [EOL] def main ( argv = None ) : [EOL] if argv is None : [EOL] argv = sys . argv [ [number] : ] [EOL] if len ( argv ) != [number] or argv [ [number] ] in ( [string] , [string] ) : [EOL] msg = [string] [EOL] raise ValueError ( msg ) [EOL] path = argv [ [number] ] [EOL] data = read_json ( path ) [EOL] client = exp . get_client ( ) [EOL] put_json ( client , data ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0