from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] collect_ignore = [ ] [EOL] [EOL] [EOL] def pytest_cmdline_preparse ( args ) : [EOL] [docstring] [EOL] [EOL] additional_pytest_args = [ ] [EOL] args [ : ] = list ( set ( args + additional_pytest_args ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . lib_platform import * [EOL] [EOL] [comment] [EOL] from . import __init__conf__ [EOL] __title__ = __init__conf__ . title [EOL] __version__ = __init__conf__ . version [EOL] __name__ = __init__conf__ . name [EOL] __url__ = __init__conf__ . url [EOL] __author__ = __init__conf__ . author [EOL] __author_email__ = __init__conf__ . author_email [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
name = [string] [EOL] title = [string] [EOL] version = [string] [EOL] url = [string] [EOL] author = [string] [EOL] author_email = [string] [EOL] shell_command = [string] [EOL] [EOL] [EOL] def print_info ( ) : [EOL] print ( [string] ) [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Any [EOL] import typing [EOL] import builtins [EOL] import ctypes [EOL] import getpass [EOL] import os [EOL] import platform [EOL] import socket [EOL] import subprocess [EOL] [EOL] [EOL] [comment] [EOL] import lib_registry [EOL] [EOL] [EOL] def get_hostname ( ) : [EOL] [docstring] [EOL] [EOL] if get_is_platform_windows_wine ( ) : [comment] [EOL] [comment] [EOL] try : [EOL] result_wine_reg = lib_registry . Registry ( ) . get_value ( key = [string] , value_name = [string] ) [EOL] assert isinstance ( result_wine_reg , str ) [EOL] _hostname = result_wine_reg [EOL] except Exception : [EOL] result_wine_env = os . getenv ( [string] ) [comment] [EOL] if result_wine_env is None : [EOL] raise RuntimeError ( [string] ) [EOL] else : [EOL] _hostname = result_wine_env [EOL] [EOL] elif get_is_platform_windows ( ) : [EOL] _hostname = socket . getfqdn ( ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] _hostname = subprocess . getoutput ( [string] ) [EOL] [EOL] _hostname = str ( _hostname . lower ( ) ) [EOL] return str ( _hostname ) [EOL] [EOL] [EOL] def get_hostname_short ( ) : [EOL] [docstring] [EOL] [EOL] _hostname = get_hostname ( ) [EOL] _hostname_short = _hostname . split ( [string] , [number] ) [ [number] ] [EOL] return _hostname_short [EOL] [EOL] [EOL] def get_system ( ) : [EOL] [docstring] [EOL] if get_is_platform_windows ( ) : [EOL] s_system = _get_system_windows ( ) [EOL] else : [EOL] s_system = platform . system ( ) . lower ( ) [EOL] return s_system [EOL] [EOL] [EOL] def _get_system_windows ( ) : [EOL] _is_platform_windows_wine = get_is_platform_windows_wine ( ) [EOL] if _is_platform_windows_wine : [EOL] s_system = _get_system_windows_wine ( ) [EOL] else : [EOL] s_system = _get_system_windows_not_wine ( ) [EOL] return s_system [EOL] [EOL] [EOL] def _get_system_windows_wine ( ) : [EOL] _is_platform_windows_xp = get_is_platform_windows_xp ( ) [EOL] if _is_platform_windows_xp : [EOL] s_system = [string] [EOL] else : [EOL] s_system = [string] [EOL] return s_system [EOL] [EOL] [EOL] def _get_system_windows_not_wine ( ) : [EOL] _is_platform_windows_xp = get_is_platform_windows_xp ( ) [EOL] if _is_platform_windows_xp : [EOL] s_system = [string] [EOL] else : [EOL] s_system = [string] [EOL] return s_system [EOL] [EOL] [EOL] def get_username ( ) : [EOL] [docstring] [EOL] _username = getpass . getuser ( ) . lower ( ) [EOL] return _username [EOL] [EOL] [EOL] def get_is_platform_windows ( ) : [EOL] [docstring] [EOL] is_platform_windows = platform . system ( ) . lower ( ) == [string] [EOL] return is_platform_windows [EOL] [EOL] [EOL] def get_is_platform_windows_xp ( ) : [EOL] [docstring] [EOL] [EOL] if get_is_platform_windows ( ) and platform . release ( ) . lower ( ) == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_is_platform_windows_wine ( ) : [EOL] [docstring] [EOL] [EOL] if get_is_platform_windows ( ) : [EOL] _is_platform_windows_wine = lib_registry . Registry ( ) . key_exist ( [string] ) [EOL] else : [EOL] _is_platform_windows_wine = False [EOL] return bool ( _is_platform_windows_wine ) [EOL] [EOL] [EOL] def get_path_userhome ( ) : [EOL] [docstring] [EOL] [EOL] s_userhome = os . path . realpath ( os . path . expanduser ( [string] ) ) [EOL] return s_userhome [EOL] [EOL] [EOL] def get_is_user_admin ( ) : [EOL] [EOL] [docstring] [EOL] [EOL] if get_is_platform_windows ( ) : [EOL] [comment] [EOL] _is_user_admin = ctypes . windll . shell32 . IsUserAnAdmin ( ) == [number] [comment] [EOL] else : [EOL] [comment] [EOL] _is_user_admin = os . getuid ( ) == [number] [comment] [EOL] [EOL] return bool ( _is_user_admin ) [EOL] [EOL] [EOL] is_platform_windows = get_is_platform_windows ( ) [EOL] is_platform_linux = platform . system ( ) . lower ( ) == [string] [EOL] is_platform_darwin = platform . system ( ) . lower ( ) == [string] [EOL] is_platform_posix = not get_is_platform_windows ( ) [EOL] is_platform_windows_xp = get_is_platform_windows_xp ( ) [EOL] is_platform_windows_wine = get_is_platform_windows_wine ( ) [EOL] is_platform_windows_wine_xp = is_platform_windows_xp and is_platform_windows_wine [EOL] is_user_admin = get_is_user_admin ( ) [EOL] [comment] [EOL] system = get_system ( ) [EOL] username = get_username ( ) [EOL] hostname = get_hostname ( ) [EOL] hostname_short = get_hostname_short ( ) [EOL] path_userhome = get_path_userhome ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
[comment] [EOL] from typing import Callable , List , Any [EOL] import typing [EOL] import builtins [EOL] import platform [EOL] import platform [EOL] [EOL] [comment] [EOL] import dill [comment] [EOL] [EOL] [comment] [EOL] import lib_platform [comment] [EOL] [EOL] [EOL] def test_system_values ( ) : [EOL] [docstring] [EOL] [EOL] if lib_platform . is_platform_linux : [EOL] assert lib_platform . system == [string] [EOL] assert lib_platform . is_platform_posix [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_windows_xp [EOL] if lib_platform . is_platform_darwin : [EOL] assert lib_platform . system == [string] [EOL] assert lib_platform . is_platform_posix [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_windows_xp [EOL] [EOL] if lib_platform . is_platform_posix : [EOL] assert lib_platform . system == [string] or lib_platform . system == [string] [EOL] assert lib_platform . is_platform_darwin or lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_windows_xp [EOL] [EOL] if lib_platform . is_platform_windows : [EOL] windows_flavours = [ [string] , [string] , [string] , [string] ] [EOL] assert lib_platform . system in windows_flavours [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] [EOL] if lib_platform . is_platform_windows_wine : [EOL] assert lib_platform . system == [string] or [string] [EOL] assert lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] [EOL] if lib_platform . is_platform_windows_xp : [EOL] assert lib_platform . system == [string] or [string] [EOL] assert lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] [EOL] if lib_platform . is_platform_windows_xp and lib_platform . is_platform_windows_wine : [EOL] assert lib_platform . system == [string] [EOL] assert lib_platform . is_platform_windows [EOL] assert lib_platform . is_platform_windows_xp [EOL] assert lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] [EOL] if lib_platform . is_platform_windows and not lib_platform . is_platform_windows_wine and not lib_platform . is_platform_windows_xp : [EOL] assert lib_platform . system == [string] [EOL] assert lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_windows_xp [EOL] assert not lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] [EOL] [EOL] def test_function_to_pickle ( ) : [EOL] if lib_platform . is_platform_windows : [EOL] print ( [string] ) [EOL] if lib_platform . get_system ( ) == [string] : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def test_if_pickable ( ) : [EOL] pickled_object = dill . dumps ( test_function_to_pickle ) [EOL] dill . loads ( pickled_object ) [EOL] [EOL] [EOL] def test_fake_xp_function ( ) : [EOL] return [string] [EOL] [EOL] [EOL] def test_fake_xp ( ) : [EOL] if lib_platform . is_platform_windows and not lib_platform . is_platform_windows_wine : [EOL] save_platform_release_function = platform . release [EOL] platform . release = test_fake_xp_function [EOL] assert lib_platform . get_is_platform_windows_xp ( ) is True [EOL] assert lib_platform . get_system ( ) == [string] [EOL] assert lib_platform . is_platform_windows [EOL] assert not lib_platform . is_platform_windows_wine [EOL] assert not lib_platform . is_platform_linux [EOL] assert not lib_platform . is_platform_darwin [EOL] assert not lib_platform . is_platform_posix [EOL] platform . release = save_platform_release_function [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import logging [EOL] import pathlib [EOL] import builtins [EOL] import logging [EOL] import pathlib [EOL] import subprocess [EOL] import sys [EOL] [EOL] logger = logging . getLogger ( ) [EOL] package_dir = [string] [EOL] cli_filename = [string] [EOL] [EOL] path_cli_command = pathlib . Path ( __file__ ) . resolve ( ) . parent . parent / package_dir / cli_filename [EOL] [EOL] [EOL] def call_cli_command ( commandline_args = [string] ) : [EOL] command = [string] . join ( [ sys . executable , str ( path_cli_command ) , commandline_args ] ) [EOL] try : [EOL] subprocess . run ( command , shell = True , check = True ) [EOL] except subprocess . CalledProcessError : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def test_cli_commands ( ) : [EOL] [comment] [EOL] if sys . version_info < ( [number] , [number] , [number] ) or sys . version_info >= ( [number] , [number] , [number] ) : [EOL] assert not call_cli_command ( [string] ) [EOL] assert call_cli_command ( [string] ) [EOL] assert call_cli_command ( [string] ) [EOL] assert call_cli_command ( [string] ) [EOL] assert call_cli_command ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0