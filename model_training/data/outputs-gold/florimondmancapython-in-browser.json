from typing import Any [EOL] import typing [EOL] import dom [EOL] [EOL] print ( [string] ) [EOL] [EOL] dom . document . title = [string] [EOL] div = dom . document . getElementById ( [string] ) [EOL] div . innerHTML = div . innerHTML + [string] [EOL] [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import starlette [EOL] import os [EOL] [EOL] from starlette . applications import Starlette [EOL] from starlette . requests import Request [EOL] from starlette . responses import Response [EOL] from starlette . templating import Jinja2Templates [EOL] from starlette . staticfiles import StaticFiles [EOL] [EOL] from . utils import bytecode [EOL] [EOL] app = Starlette ( debug = True ) [EOL] app . mount ( [string] , StaticFiles ( directory = [string] ) , name = [string] ) [EOL] [EOL] templates = Jinja2Templates ( directory = [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) async def homepage ( request ) : [EOL] context = { [string] : request , [string] : bytecode ( os . path . join ( [string] , [string] ) ) } [EOL] return templates . TemplateResponse ( [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette.responses.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . app import app [EOL]	0 0 0 0 0 0
import builtins [EOL] import os [EOL] import base64 [EOL] import py_compile [EOL] import tempfile [EOL] [EOL] [EOL] def bytecode ( sourcefile ) : [EOL] fd , tempname = tempfile . mkstemp ( ) [EOL] [comment] [EOL] [comment] [EOL] os . close ( fd ) [EOL] [EOL] py_compile . compile ( sourcefile , cfile = tempname , doraise = True ) [EOL] try : [EOL] with open ( os . path . join ( os . path . dirname ( sourcefile ) , tempname ) , [string] ) as compiled : [EOL] payload = base64 . encodebytes ( compiled . read ( ) ) . decode ( ) [EOL] return { [string] : payload , [string] : sourcefile } [EOL] finally : [EOL] if os . path . exists ( tempname ) : [EOL] os . remove ( tempname ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0