from typing import Dict , List , Tuple , Any [EOL] import typing [EOL] import tower_defense [EOL] from copy import deepcopy [EOL] from unittest import TestCase [EOL] [EOL] import os [EOL] [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import TileType , GameMode [EOL] from tower_defense . helper import Vector , MouseClick [EOL] from tower_defense . tiles . tile_map import Tile , TileMap , EditorTileMap , GameTileMap [EOL] [EOL] [EOL] class Object ( object ) : [EOL] pass [EOL] [EOL] [EOL] class TileMapTest ( TestCase ) : [EOL] def test_generate_tiles ( self ) : [EOL] tile_size = Vector ( [number] , [number] ) [EOL] [EOL] def tile ( x , y ) : [EOL] return Tile ( Vector ( x , y ) , tile_size , TileType . BUILDING_GROUND ) [EOL] [EOL] expected = { ( [number] , [number] ) : tile ( [number] , [number] ) , ( [number] , [number] ) : tile ( [number] , [number] ) , ( [number] , [number] ) : tile ( [number] , [number] ) , ( [number] , [number] ) : tile ( [number] , [number] ) } [EOL] max_tiles = Vector ( [number] , [number] ) [EOL] actual = TileMap . generate_tiles ( max_tiles , tile_size ) [EOL] [EOL] self . assertEqual ( expected , actual ) [EOL] [EOL] def test_new ( self ) : [EOL] tile_map = TileMap ( ) [EOL] game_state = GameState ( ) [EOL] test_path = [string] [EOL] size = Vector ( [number] , [number] ) [EOL] tile_map . new ( game_state , test_path , size ) [EOL] self . assertEqual ( [number] , len ( tile_map . tiles ) ) [EOL] self . assertEqual ( test_path , tile_map . path ) [EOL] self . assertEqual ( size , tile_map . max_tiles ) [EOL] os . remove ( test_path ) [EOL] [EOL] def test_save ( self ) : [EOL] game_state = GameState ( ) [EOL] test_map = [string] [EOL] tile_map = TileMap ( ) [EOL] tile_map . path = test_map [EOL] tile_map . max_tiles = Vector ( [number] , [number] ) [EOL] try : [EOL] tile_map . save ( ) [EOL] self . assertTrue ( os . path . exists ( test_map ) ) [EOL] [comment] [EOL] tile_map . load ( game_state , test_map ) [EOL] finally : [EOL] os . remove ( test_map ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] tile_map = TileMap ( ) [EOL] was_called = [ ] [EOL] [EOL] def render ( game_state , batch ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] tile = Object ( ) [EOL] tile . render = render [EOL] tile . render_arrow = render [EOL] tile_map . tiles = { ( [number] , [number] ) : tile } [EOL] tile_map . render ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] @ staticmethod def test_update_building ( ) : [EOL] [comment] [EOL] game_state = GameState ( ) [EOL] tile_map = TileMap ( ) [EOL] tile_map . update ( game_state ) [EOL] [EOL] @ staticmethod def test_update_not_building ( ) : [EOL] [comment] [EOL] game_state = GameState ( ) [EOL] game_state . mode = GameMode . EDITOR [EOL] tile_map = TileMap ( ) [EOL] tile_map . update ( game_state ) [EOL] [EOL] def test_mouse_click_handler_not_on_map ( self ) : [EOL] tile_map = TileMap ( ) [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( - [number] , - [number] ) [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] expected = False [EOL] self . assertEqual ( expected , actual ) [EOL] [EOL] def test_path_finding_no_start ( self ) : [EOL] tile_map = TileMap ( ) [EOL] tiles = deepcopy ( tile_map . tiles ) [EOL] tile_map . path_finding ( ) [EOL] [EOL] for tile in tiles : [EOL] self . assertEqual ( tiles [ tile ] , tile_map . tiles [ tile ] ) [EOL] [EOL] def test_path_finding_no_finish ( self ) : [EOL] tile_map = TileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . START [EOL] tiles = deepcopy ( tile_map . tiles ) [EOL] tile_map . path_finding ( ) [EOL] [EOL] for tile in tiles : [EOL] self . assertEqual ( tiles [ tile ] , tile_map . tiles [ tile ] ) [EOL] [EOL] def test_path_finding_no_path ( self ) : [EOL] tile_map = TileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . START [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . FINISH [EOL] [EOL] tiles = deepcopy ( tile_map . tiles ) [EOL] tile_map . path_finding ( ) [EOL] [EOL] for tile in tiles : [EOL] self . assertEqual ( tiles [ tile ] , tile_map . tiles [ tile ] ) [EOL] [EOL] def test_path_finding ( self ) : [EOL] tile_map = TileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . START [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . FINISH [EOL] [EOL] tiles = deepcopy ( tile_map . tiles ) [EOL] tiles [ ( [number] , [number] ) ] . directions = [ ( [number] , [number] ) ] [EOL] tiles [ ( [number] , [number] ) ] . directions = [ ( [number] , [number] ) ] [EOL] tiles [ ( [number] , [number] ) ] . directions = [ ( [number] , [number] ) ] [EOL] tiles [ ( [number] , [number] ) ] . directions = [ ( [number] , [number] ) ] [EOL] tile_map . path_finding ( ) [EOL] [EOL] for tile in tiles : [EOL] self . assertEqual ( tiles [ tile ] , tile_map . tiles [ tile ] ) [EOL] [EOL] def test_has_start_node ( self ) : [EOL] tile_map = TileMap ( ) [EOL] self . assertFalse ( tile_map . has_start_node ) [EOL] [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . START [EOL] self . assertTrue ( tile_map . has_start_node ) [EOL] [EOL] def test_has_finish_node ( self ) : [EOL] tile_map = TileMap ( ) [EOL] self . assertFalse ( tile_map . has_finish_node ) [EOL] [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . FINISH [EOL] self . assertTrue ( tile_map . has_finish_node ) [EOL] [EOL] [EOL] class EditorTileMapTest ( TestCase ) : [EOL] def test_mouse_click_handler_on_map ( self ) : [EOL] tile_map = EditorTileMap ( ) [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( [number] , [number] ) [EOL] click . button = [number] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertFalse ( actual ) [EOL] [EOL] tile_map = EditorTileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . START [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . FINISH [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( [number] , [number] ) [EOL] click . button = [number] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertTrue ( actual ) [EOL] self . assertEqual ( TileType . PATH , tile_map . tiles [ ( [number] , [number] ) ] . tile_type ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] was_called = [ ] [EOL] [EOL] def dummy ( * args ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] tile_map = EditorTileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . render_arrow = dummy [EOL] tile_map . render ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] [EOL] class GameTileMapTest ( TestCase ) : [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] was_called = [ ] [EOL] [EOL] def dummy ( * args ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] tile_map = GameTileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . render_highlight = dummy [EOL] tile_map . tiles [ ( [number] , [number] ) ] . highlighted = True [EOL] tile_map . render ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] def test_mouse_click_handler ( self ) : [EOL] tile_map = GameTileMap ( ) [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( [number] , [number] ) [EOL] click . button = [number] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertFalse ( actual ) [EOL] [EOL] tile_map = GameTileMap ( ) [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( [number] , [number] ) [EOL] click . button = [number] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertTrue ( actual ) [EOL] self . assertTrue ( tile_map . tiles [ ( [number] , [number] ) ] . highlighted ) [EOL] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertTrue ( actual ) [EOL] self . assertFalse ( tile_map . tiles [ ( [number] , [number] ) ] . highlighted ) [EOL] [EOL] tile_map = GameTileMap ( ) [EOL] tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] click = MouseClick ( ) [EOL] click . position = Vector ( [number] , [number] ) [EOL] click . button = [number] [EOL] actual = tile_map . mouse_click_handler ( None , click ) [EOL] self . assertTrue ( actual ) [EOL] self . assertFalse ( tile_map . tiles [ ( [number] , [number] ) ] . highlighted ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $builtins.str$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 $builtins.str$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $builtins.str$ 0 $builtins.str$ 0 $tower_defense.tiles.tile_map.TileMap$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.EditorTileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $builtins.bool$ 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $tower_defense.tiles.tile_map.GameTileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Literal , Tuple [EOL] import typing [EOL] import tests [EOL] import tower_defense [EOL] import typing_extensions [EOL] import unittest [EOL] [EOL] import pyglet [EOL] [EOL] from tower_defense . helper import Vector [EOL] from tower_defense . graphics import Textures , Renderer , MovementGroup [EOL] [EOL] [EOL] class Object ( object ) : [EOL] pass [EOL] [EOL] [EOL] class TexturesTest ( unittest . TestCase ) : [EOL] def test_init ( self ) : [EOL] textures = Textures ( ) [EOL] textures . load ( [string] ) [EOL] self . assertIsNotNone ( textures ) [EOL] [EOL] [EOL] class MethodTest ( unittest . TestCase ) : [EOL] def test_render_colored_rectangle ( self ) : [EOL] def add ( count , mode , group , * data ) : [EOL] self . assertEqual ( [number] , count ) [EOL] self . assertEqual ( pyglet . graphics . GL_QUADS , mode ) [EOL] self . assertEqual ( MovementGroup , type ( group ) ) [EOL] expected = ( ( [string] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) ) [EOL] self . assertEqual ( expected , data ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] color = ( [number] , [number] , [number] ) [EOL] batch = Object ( ) [EOL] batch . add = add [EOL] Renderer . colored_rectangle ( batch , color , position , size ) [EOL] [EOL] def test_render_textured_rectangle ( self ) : [EOL] def add ( count , mode , group , * data ) : [EOL] self . assertEqual ( [number] , count ) [EOL] self . assertEqual ( pyglet . graphics . GL_QUADS , mode ) [EOL] self . assertEqual ( [string] , group ) [EOL] expected = ( ( [string] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) ) [EOL] self . assertEqual ( expected , data ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] texture = [string] [EOL] batch = Object ( ) [EOL] batch . add = add [EOL] Renderer . textured_rectangle ( batch , texture , position , size , tex_max = [number] , tex_min = [number] ) [EOL] [EOL] [EOL] class MovementGroupTest ( unittest . TestCase ) : [EOL] @ staticmethod def test_set_state ( ) : [EOL] group = MovementGroup ( [number] , Vector ( ) ) [EOL] group . set_state ( ) [EOL] [EOL] @ staticmethod def test_unset_state ( ) : [EOL] group = MovementGroup ( [number] , Vector ( ) ) [EOL] group . unset_state ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.Textures$ 0 0 0 0 0 $tower_defense.graphics.Textures$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.Textures$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]],typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]],typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]]$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 $tests.test_graphics.Object$ 0 0 0 0 0 $tests.test_graphics.Object$ 0 0 0 0 0 0 0 0 0 $tests.test_graphics.Object$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]],typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]],typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]]$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $tests.test_graphics.Object$ 0 0 0 0 0 $tests.test_graphics.Object$ 0 0 0 0 0 0 0 0 0 $tests.test_graphics.Object$ 0 $builtins.str$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tower_defense [EOL] import unittest [EOL] [EOL] import pyglet [EOL] [EOL] from tower_defense . entities . bullet import Bullet [EOL] from tower_defense . entities . entity import Entity [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import EntityType [EOL] from tower_defense . helper import Vector [EOL] [EOL] [EOL] class BulletTest ( unittest . TestCase ) : [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] bullet = Bullet ( Vector ( ) , Vector ( [number] , [number] ) , Vector ( ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] bullet . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] bullet = Bullet ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , Vector ( ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] bullet . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_update ( self ) : [EOL] game_state = GameState ( ) [EOL] [EOL] bullet = Bullet ( Vector ( ) , Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] result = bullet . update ( game_state ) [EOL] self . assertFalse ( result ) [EOL] [EOL] bullet = Bullet ( Vector ( ) , Vector ( [number] , [number] ) , Vector ( - [number] , - [number] ) ) [EOL] result = bullet . update ( game_state ) [EOL] self . assertTrue ( result ) [EOL] [EOL] def test_update_with_entity_hit ( self ) : [EOL] game_state = GameState ( ) [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] game_state . entity_manager . entities = [ entity ] [EOL] [EOL] bullet = Bullet ( Vector ( ) , Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] result = bullet . update ( game_state ) [EOL] self . assertTrue ( result ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import tower_defense [EOL] import unittest [EOL] [EOL] import pyglet [EOL] [EOL] from tower_defense . entities . entity import Entity [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import TileType , EntityType [EOL] from tower_defense . helper import Vector [EOL] [EOL] [EOL] class EntityTest ( unittest . TestCase ) : [EOL] @ staticmethod def test_update_cancel ( ) : [EOL] game_state = GameState ( ) [EOL] [EOL] entity = Entity ( Vector ( - [number] , - [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] entity . update ( game_state ) [EOL] [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] entity . update ( game_state ) [EOL] [EOL] def test_update ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . directions = [ ( [number] , [number] ) ] [EOL] game_state . entity_manager . update ( game_state ) [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] entity . update ( game_state ) [EOL] self . assertEqual ( ( [number] , [number] ) , entity . next_tile_index ) [EOL] [EOL] def test_calculate_movement ( self ) : [EOL] game_state = GameState ( ) [EOL] [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] entity . next_tile_index = ( [number] , [number] ) [EOL] entity . calculate_movement ( game_state ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , entity . velocity , str ( entity . velocity ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , entity . position , str ( entity . position ) ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] entity . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] entity = Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] entity . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_take_damage ( self ) : [EOL] entity = Entity ( Vector ( ) , Vector ( ) , EntityType . LARGE_BOULDER ) [EOL] entity . take_damage ( [number] ) [EOL] self . assertEqual ( [number] , entity . health ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.Entity$ 0 0 0 0
import tower_defense [EOL] import unittest [EOL] [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . helper import Vector , rect_contains_point , constrain_rect_to_bounds , MouseClick , process_clicks [EOL] [EOL] [EOL] class MouseClickTest ( unittest . TestCase ) : [EOL] def test_eq ( self ) : [EOL] mc1 = MouseClick ( ) [EOL] mc2 = MouseClick ( ) [EOL] self . assertEqual ( mc1 , mc2 ) [EOL] self . assertNotEqual ( mc1 , [string] ) [EOL] [EOL] [EOL] class VectorTest ( unittest . TestCase ) : [EOL] def test_init ( self ) : [EOL] vec = Vector ( ) [EOL] self . assertEqual ( [number] , vec . x ) [EOL] self . assertEqual ( [number] , vec . y ) [EOL] [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( [number] , vec . x ) [EOL] self . assertEqual ( [number] , vec . y ) [EOL] [EOL] vec = Vector ( point = ( [number] , [number] ) ) [EOL] self . assertEqual ( [number] , vec . x ) [EOL] self . assertEqual ( [number] , vec . y ) [EOL] [EOL] def test_add ( self ) : [EOL] vec1 = Vector ( [number] , [number] ) [EOL] vec2 = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec1 + vec2 ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec2 + vec1 ) [EOL] [EOL] def test_add_tuple ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec + ( [number] , [number] ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , ( [number] , [number] ) + vec ) [EOL] [EOL] def test_sub ( self ) : [EOL] vec1 = Vector ( [number] , [number] ) [EOL] vec2 = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( - [number] , - [number] ) , vec1 - vec2 ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec2 - vec1 ) [EOL] [EOL] def test_sub_tuple ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( - [number] , - [number] ) , vec - ( [number] , [number] ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , ( [number] , [number] ) - vec ) [EOL] [EOL] def test_mul ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec * [number] ) [EOL] [EOL] def test_divide ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec / [number] ) [EOL] [EOL] def test_floor_divide ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , vec // [number] ) [EOL] [EOL] def test_not_equal ( self ) : [EOL] vec1 = Vector ( [number] , [number] ) [EOL] vec2 = Vector ( [number] , [number] ) [EOL] self . assertTrue ( vec1 != vec2 ) [EOL] [EOL] def test_str ( self ) : [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( [string] , str ( vec ) ) [EOL] [EOL] def test_length ( self ) : [EOL] vec = Vector ( ) [EOL] self . assertEqual ( [number] , vec . length ( ) ) [EOL] [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( [number] , vec . length ( ) ) [EOL] [EOL] vec = Vector ( [number] , [number] ) [EOL] self . assertEqual ( [number] , vec . length ( ) ) [EOL] [EOL] [EOL] class MethodTest ( unittest . TestCase ) : [EOL] def test_rect_contains_point ( self ) : [EOL] point = Vector ( [number] , [number] ) [EOL] rect_position = Vector ( [number] , [number] ) [EOL] rect_size = Vector ( [number] , [number] ) [EOL] self . assertTrue ( rect_contains_point ( point , rect_position , rect_size ) ) [EOL] [EOL] point = Vector ( [number] , [number] ) [EOL] rect_position = Vector ( [number] , [number] ) [EOL] rect_size = Vector ( [number] , [number] ) [EOL] self . assertFalse ( rect_contains_point ( point , rect_position , rect_size ) ) [EOL] [EOL] def test_constrain_to_bounds ( self ) : [EOL] window_size = Vector ( [number] , [number] ) [EOL] position = Vector ( [number] , [number] ) [EOL] rect_size = Vector ( [number] , [number] ) [EOL] actual = constrain_rect_to_bounds ( window_size , position , rect_size ) [EOL] self . assertEqual ( position , actual ) [EOL] [EOL] window_size = Vector ( [number] , [number] ) [EOL] position = Vector ( [number] , [number] ) [EOL] rect_size = Vector ( [number] , [number] ) [EOL] actual = constrain_rect_to_bounds ( window_size , position , rect_size ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual ) [EOL] [EOL] window_size = Vector ( [number] , [number] ) [EOL] position = Vector ( [number] , [number] ) [EOL] rect_size = Vector ( [number] , [number] ) [EOL] actual = constrain_rect_to_bounds ( window_size , position , rect_size ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual ) [EOL] [EOL] def test_process_clicks ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . mouse_clicks . append ( MouseClick ( ) ) [EOL] [EOL] def false_processor ( game_state , mouse_click ) : [EOL] return False [EOL] [EOL] process_clicks ( game_state , false_processor ) [EOL] self . assertEqual ( [number] , len ( game_state . mouse_clicks ) ) [EOL] [EOL] def offset_processor ( game_state , mouse_click ) : [EOL] self . assertEqual ( Vector ( - [number] , - [number] ) , mouse_click . position ) [EOL] return False [EOL] [EOL] process_clicks ( game_state , offset_processor , map_to_world_space = False , offset = Vector ( [number] , [number] ) ) [EOL] self . assertEqual ( [number] , len ( game_state . mouse_clicks ) ) [EOL] [EOL] def true_processor ( game_state , mouse_click ) : [EOL] return True [EOL] [EOL] process_clicks ( game_state , true_processor ) [EOL] self . assertEqual ( [number] , len ( game_state . mouse_clicks ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 $tower_defense.helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0
[EOL] def my_function ( ) : [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Literal , Tuple , Any , Dict , List [EOL] import typing [EOL] import tower_defense [EOL] import typing_extensions [EOL] import unittest [EOL] [EOL] from tower_defense . buildings . building import Laser , Drill , Hammer , Building [EOL] from tower_defense . buildings . building_manager import BuildingManager [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import BuildingType [EOL] from tower_defense . helper import Vector [EOL] [EOL] [EOL] class Object ( object ) : [EOL] pass [EOL] [EOL] [EOL] class BuildingManagerTest ( unittest . TestCase ) : [EOL] def test_update ( self ) : [EOL] game_state = GameState ( ) [EOL] was_called = [ ] [EOL] [EOL] def dummy ( * _ ) : [EOL] was_called . append ( [number] ) [EOL] return True [EOL] [EOL] building = Object ( ) [EOL] building . update = dummy [EOL] [EOL] bullet = Object ( ) [EOL] bullet . update = dummy [EOL] [EOL] building_manager = BuildingManager ( ) [EOL] building_manager . buildings = { [string] : building } [EOL] building_manager . bullets = [ bullet ] [EOL] building_manager . update ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] self . assertEqual ( [number] , len ( building_manager . bullets ) ) [EOL] self . assertEqual ( [number] , len ( building_manager . buildings ) ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] was_called = [ ] [EOL] [EOL] def dummy ( * _ , ** kwargs ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] building = Object ( ) [EOL] building . render = dummy [EOL] [EOL] bullet = Object ( ) [EOL] bullet . render = dummy [EOL] [EOL] building_manager = BuildingManager ( ) [EOL] building_manager . buildings = { [string] : building } [EOL] building_manager . bullets = [ bullet ] [EOL] building_manager . render ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] def test_shoot ( self ) : [EOL] building_manager = BuildingManager ( ) [EOL] world_position = Vector ( ) [EOL] direction = Vector ( [number] , [number] ) [EOL] building_manager . shoot ( world_position , direction ) [EOL] self . assertEqual ( [number] , len ( building_manager . bullets ) ) [EOL] bullet = building_manager . bullets [ [number] ] [EOL] self . assertEqual ( world_position , bullet . position ) [EOL] self . assertEqual ( direction * [number] , bullet . velocity ) [EOL] [EOL] def test_spawn_building ( self ) : [EOL] game_state = GameState ( ) [EOL] tile_index = ( [number] , [number] ) [EOL] [EOL] building_manager = BuildingManager ( ) [EOL] building_manager . spawn_building ( game_state , tile_index , BuildingType . LASER ) [EOL] self . assertEqual ( [number] , len ( building_manager . buildings ) ) [EOL] self . assertEqual ( ( [number] , [number] ) , list ( building_manager . buildings . keys ( ) ) [ [number] ] ) [EOL] [EOL] building = building_manager . buildings [ ( [number] , [number] ) ] [EOL] self . assertEqual ( Vector ( [number] , [number] ) , building . position ) [EOL] self . assertEqual ( Laser , type ( building ) ) [EOL] [EOL] building_manager . spawn_building ( game_state , tile_index , BuildingType . DRILL ) [EOL] self . assertEqual ( Drill , type ( building_manager . buildings [ ( [number] , [number] ) ] ) ) [EOL] [EOL] building_manager . spawn_building ( game_state , tile_index , BuildingType . HAMMER ) [EOL] self . assertEqual ( Hammer , type ( building_manager . buildings [ ( [number] , [number] ) ] ) ) [EOL] [EOL] building_manager . spawn_building ( game_state , tile_index , - [number] ) [EOL] self . assertEqual ( Building , type ( building_manager . buildings [ ( [number] , [number] ) ] ) ) [EOL] [EOL] building_manager = BuildingManager ( ) [EOL] building_manager . gold = [number] [EOL] building_manager . spawn_building ( game_state , tile_index , BuildingType . HAMMER ) [EOL] self . assertEqual ( [number] , len ( building_manager . buildings . keys ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 0 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 0 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 0 0 $typing.Dict[unknown,tower_defense.buildings.building.Building]$ 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 $typing.List[tower_defense.entities.bullet.Bullet]$ 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.entities.bullet.Bullet$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] import tests [EOL] import tower_defense [EOL] import unittest [EOL] [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . helper import Vector [EOL] from tower_defense . user_interface . menu import MapMenu [EOL] [EOL] [EOL] class Object ( object ) : [EOL] pass [EOL] [EOL] [EOL] class TestGameState ( unittest . TestCase ) : [EOL] def test_window_to_world_space ( self ) : [EOL] game_state = GameState ( ) [EOL] actual = game_state . window_to_world_space ( Vector ( ) ) [EOL] self . assertEqual ( Vector ( - [number] , - [number] ) , actual , str ( actual ) ) [EOL] [EOL] def test_world_to_window_space ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( [number] , [number] ) [EOL] size = Vector ( [number] , [number] ) [EOL] self . assertEqual ( None , game_state . world_to_window_space ( position , size ) ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , game_state . world_to_window_space ( position , size ) ) [EOL] [EOL] game_state . world_offset = Vector ( - [number] , [number] ) [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] self . assertEqual ( None , game_state . world_to_window_space ( position , size ) ) [EOL] [EOL] def test_world_to_index_space ( self ) : [EOL] game_state = GameState ( ) [EOL] [EOL] actual = game_state . world_to_index_space ( Vector ( ) ) [EOL] self . assertEqual ( ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] actual = game_state . world_to_index_space ( Vector ( [number] , [number] ) ) [EOL] self . assertEqual ( ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] actual = game_state . world_to_index_space ( Vector ( [number] , [number] ) ) [EOL] self . assertEqual ( ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] def test_index_to_world_space ( self ) : [EOL] game_state = GameState ( ) [EOL] actual = game_state . index_to_world_space ( ( [number] , [number] ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] actual = game_state . index_to_world_space ( ( [number] , [number] ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] actual = game_state . index_to_world_space ( Vector ( [number] , [number] ) ) [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual , str ( actual ) ) [EOL] [EOL] def test_init ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] [EOL] self . assertIsNotNone ( Vector ( [number] , [number] ) , game_state . tile_map . max_tiles ) [EOL] self . assertIsNotNone ( [number] , len ( game_state . tile_map . tiles ) ) [EOL] [EOL] def test_clean_up ( self ) : [EOL] game_state = GameState ( ) [EOL] [EOL] game_state . clean_up ( ) [EOL] [EOL] self . assertEqual ( [number] , len ( game_state . mouse_clicks ) ) [EOL] self . assertEqual ( [string] , game_state . key_presses . text ) [EOL] self . assertEqual ( False , game_state . key_presses . back_space ) [EOL] [EOL] def test_update_no_key_event ( self ) : [EOL] game_state = GameState ( ) [EOL] world_offset_before = game_state . world_offset [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] game_state . update ( ) [EOL] self . assertEqual ( world_offset_before , game_state . world_offset ) [EOL] [EOL] def test_update_key_event_top_left ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . key_presses . up = True [EOL] game_state . key_presses . left = True [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] game_state . update ( ) [EOL] [EOL] actual = game_state . world_offset [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual ) [EOL] [EOL] def test_update_key_event_bottom_right ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . key_presses . down = True [EOL] game_state . key_presses . right = True [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] game_state . update ( ) [EOL] [EOL] actual = game_state . world_offset [EOL] self . assertEqual ( Vector ( [number] , [number] ) , actual ) [EOL] [EOL] def test_tick ( self ) : [EOL] def dummy ( ) : [EOL] return - [number] , - [number] [EOL] [EOL] window = Object ( ) [EOL] window . get_size = dummy [EOL] game_state = GameState ( ) [EOL] [comment] [EOL] game_state . tick ( window ) [EOL] self . assertEqual ( Vector ( - [number] , - [number] ) , game_state . window_size ) [EOL] [EOL] def test_tick_game ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . tick_game ( ) [EOL] [EOL] def test_tick_editor ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . tick_editor ( ) [EOL] [EOL] def test_tick_main_menu ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . tick_main_menu ( ) [EOL] [EOL] def test_tick_map_menu ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . map_menu = MapMenu ( [string] ) [EOL] game_state . tick_map_menu ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_game_state.Object$ 0 0 0 0 0 $tests.test_game_state.Object$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 $tests.test_game_state.Object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.user_interface.menu.MapMenu$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import tower_defense [EOL] import unittest [EOL] [EOL] import pyglet [EOL] [EOL] from tower_defense . buildings . building import Building , Laser , Hammer , Drill [EOL] from tower_defense . entities . entity import Entity [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import BuildingType , EntityType , TileType [EOL] from tower_defense . graphics import MovementGroup [EOL] from tower_defense . helper import Vector [EOL] [EOL] [EOL] class BuildingTest ( unittest . TestCase ) : [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Building ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [comment] [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] building . mouse_over = True [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [comment] [EOL] [EOL] def test_range ( self ) : [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] self . assertEqual ( [number] , building . range ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . HAMMER ) [EOL] self . assertEqual ( [number] , building . range ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . DRILL ) [EOL] self . assertEqual ( [number] , building . range ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , - [number] ) [EOL] self . assertEqual ( - [number] , building . range ) [EOL] [EOL] def test_cost ( self ) : [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] self . assertEqual ( [number] , building . cost ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . HAMMER ) [EOL] self . assertEqual ( [number] , building . cost ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . DRILL ) [EOL] self . assertEqual ( [number] , building . cost ) [EOL] [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , - [number] ) [EOL] self . assertEqual ( - [number] , building . cost ) [EOL] [EOL] def test_shooting_frequency ( self ) : [EOL] building = Building ( Vector ( ) , Vector ( [number] , [number] ) , BuildingType . LASER ) [EOL] self . assertEqual ( [number] / [number] , building . shooting_frequency ) [EOL] [EOL] [EOL] class LaserTest ( unittest . TestCase ) : [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Laser ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] building = Laser ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] [EOL] @ unittest . skip ( [string] ) class CatapultTest ( unittest . TestCase ) : [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Hammer ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] building = Hammer ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_update ( self ) : [EOL] was_called = [ ] [EOL] [EOL] def shoot ( * _ ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] game_state . building_manager . shoot = shoot [EOL] [EOL] [comment] [EOL] building = Laser ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . cool_down = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] [comment] [EOL] building = Laser ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . cool_down = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] [comment] [EOL] game_state . entity_manager . entities = [ Entity ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) ] [EOL] building = Laser ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . cool_down = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] [EOL] class DrillTest ( unittest . TestCase ) : [EOL] def test_rotate_towards ( self ) : [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . rotate_towards ( [number] ) [EOL] self . assertEqual ( [number] , building . rotation_angle ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Drill ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] building . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] self . assertEqual ( MovementGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] def test_update_reset_animation_speed ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . animation_speed = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , building . animation_speed ) [EOL] [EOL] def test_update_animation_angle ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . animation_speed = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , building . animation_angle ) [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] building . animation_speed = [number] [EOL] building . animation_angle = [number] [EOL] building . update ( game_state ) [EOL] self . assertEqual ( [number] , building . animation_angle ) [EOL] [EOL] def test_check_for_entities ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] result = building . check_for_entities ( game_state ) [EOL] self . assertEqual ( False , result ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] game_state . entity_manager . entities = [ Entity ( Vector ( ) , Vector ( [number] , [number] ) , EntityType . LARGE_BOULDER ) ] [EOL] [EOL] building = Drill ( Vector ( ) , Vector ( [number] , [number] ) ) [EOL] result = building . check_for_entities ( game_state ) [EOL] self . assertEqual ( True , result ) [EOL] self . assertEqual ( [number] , building . animation_speed ) [EOL] self . assertEqual ( [number] , game_state . entity_manager . entities [ [number] ] . health ) [EOL] [EOL] def test_closest_tile_angle ( self ) : [EOL] game_state = GameState ( ) [EOL] building = Drill ( Vector ( [number] , [number] ) , Vector ( [number] , [number] ) ) [EOL] actual = building . closest_tile_angle ( game_state ) [EOL] self . assertEqual ( [number] , actual ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] actual = building . closest_tile_angle ( game_state ) [EOL] self . assertEqual ( [number] , actual ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] actual = building . closest_tile_angle ( game_state ) [EOL] self . assertEqual ( - [number] , actual ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] actual = building . closest_tile_angle ( game_state ) [EOL] self . assertEqual ( [number] , actual ) [EOL] [EOL] game_state = GameState ( ) [EOL] game_state . tile_map . tiles [ ( [number] , [number] ) ] . tile_type = TileType . PATH [EOL] actual = building . closest_tile_angle ( game_state ) [EOL] self . assertEqual ( [number] , actual ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 $builtins.bool$ 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Building$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Hammer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Hammer$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Hammer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Hammer$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 0 0 $tower_defense.buildings.building.Laser$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.buildings.building.Drill$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $tower_defense.buildings.building.Drill$ 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0
[EOL] def my_function ( ) : [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0
import unittest [EOL] import os [EOL] from tower_defense . hot_reload import reload_all [EOL] [EOL] script_path = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] [EOL] [EOL] def write_module ( file_name , time ) : [EOL] with open ( file_name , [string] ) as f : [EOL] f . write ( f""" [string] { time } [string] """ ) [EOL] [comment] [EOL] os . utime ( file_name , ( os . stat ( file_name ) . st_atime , os . stat ( file_name ) . st_mtime + time ) ) [EOL] [EOL] [EOL] class HotReloadTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] global __package__ [EOL] __package__ = [string] [EOL] [EOL] def test_normal_reload ( self ) : [EOL] file_name = os . path . join ( script_path , [string] ) [EOL] time = [number] [EOL] write_module ( file_name , time ) [EOL] self . assertTrue ( os . path . exists ( file_name ) ) [EOL] [EOL] import tests . my_module_normal [EOL] self . assertEqual ( time , tests . my_module_normal . my_function ( ) ) [EOL] [EOL] time = [number] [EOL] write_module ( file_name , time ) [EOL] [EOL] reload_all ( [ [string] ] ) [EOL] self . assertEqual ( time , tests . my_module_normal . my_function ( ) ) [EOL] [EOL] def test_relative_import ( self ) : [EOL] file_name = os . path . join ( script_path , [string] ) [EOL] time = [number] [EOL] write_module ( file_name , time ) [EOL] self . assertTrue ( os . path . exists ( file_name ) ) [EOL] [EOL] from . my_module_relative import my_function [EOL] self . assertEqual ( time , my_function ( ) ) [EOL] [EOL] time = [number] [EOL] write_module ( file_name , time ) [EOL] [EOL] reload_all ( [ [string] ] ) [EOL] self . assertEqual ( time , my_function ( ) ) [EOL] [EOL] def test_multiple_relative_import ( self ) : [EOL] directory_path = os . path . join ( script_path , [string] ) [EOL] if not os . path . exists ( directory_path ) : [EOL] os . mkdir ( directory_path ) [EOL] init_path = os . path . join ( directory_path , [string] ) [EOL] with open ( init_path , [string] ) as f : [EOL] f . write ( [string] ) [EOL] file_path = os . path . join ( directory_path , [string] ) [EOL] time = [number] [EOL] write_module ( file_path , time ) [EOL] [EOL] from . sub_directory . my_module_multiple_relative import my_function [EOL] self . assertEqual ( time , my_function ( ) ) [EOL] [EOL] time = [number] [EOL] write_module ( file_path , time ) [EOL] [EOL] reload_all ( [ [string] ] ) [EOL] self . assertEqual ( time , my_function ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0
from typing import List , Tuple , Any [EOL] import typing [EOL] import tower_defense [EOL] import unittest [EOL] [EOL] import pyglet [EOL] [EOL] from tower_defense . game_state import GameState [EOL] from tower_defense . game_types import TileType [EOL] from tower_defense . graphics import MovementGroup [EOL] from tower_defense . helper import Vector [EOL] from tower_defense . tiles . tile import Tile [EOL] [EOL] [EOL] class Object ( object ) : [EOL] pass [EOL] [EOL] [EOL] class TileTest ( unittest . TestCase ) : [EOL] def test_eq ( self ) : [EOL] position = Vector ( ) [EOL] size = Vector ( ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] self . assertEqual ( tile , tile ) [EOL] self . assertNotEqual ( [string] , tile ) [EOL] [EOL] def test_str ( self ) : [EOL] position = Vector ( ) [EOL] size = Vector ( ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] self . assertEqual ( [string] , str ( tile ) ) [EOL] [EOL] def test_next_type ( self ) : [EOL] position = Vector ( ) [EOL] size = Vector ( ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] tile . next_type ( True , True ) [EOL] expected = TileType . PATH [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . next_type ( True , True ) [EOL] expected = TileType . START [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . next_type ( True , True ) [EOL] expected = TileType . FINISH [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . next_type ( True , True ) [EOL] expected = TileType . BUILDING_GROUND [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] def test_next_type_not_allowed ( self ) : [EOL] position = Vector ( ) [EOL] size = Vector ( ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] tile . next_type ( False , False ) [EOL] expected = TileType . PATH [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . next_type ( False , False ) [EOL] expected = TileType . BUILDING_GROUND [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . tile_type = TileType . PATH [EOL] tile . next_type ( True , False ) [EOL] expected = TileType . START [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] tile . tile_type = TileType . PATH [EOL] tile . next_type ( False , True ) [EOL] expected = TileType . FINISH [EOL] self . assertEqual ( expected , tile . tile_type ) [EOL] [EOL] def test_render_label ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_label ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . text . layout . TextLayoutGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] def test_render_no_label ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( [number] , [number] ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_label ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . tile_type = TileType . START [EOL] tile . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( MovementGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] def test_no_render ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( [number] , [number] ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_render_no_arrow ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( [number] , [number] ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] tile . position = Vector ( ) [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] [EOL] def test_render_arrow ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . init ( [string] ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] tile . direction_index = [number] [EOL] tile . timer = [number] [EOL] [EOL] tile . directions = [ ( [number] , [number] ) ] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] tile . directions = [ ( - [number] , [number] ) ] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] tile . directions = [ ( [number] , [number] ) ] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] tile . directions = [ ( [number] , - [number] ) ] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] tile . render_arrow ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( batch . top_groups ) ) [EOL] self . assertEqual ( pyglet . graphics . TextureGroup , type ( batch . top_groups [ [number] ] ) ) [EOL] [EOL] def test_render_highlight ( self ) : [EOL] game_state = GameState ( ) [EOL] game_state . window_size = Vector ( [number] , [number] ) [EOL] was_called = [ ] [EOL] [EOL] def dummy ( * args ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] batch . add = dummy [EOL] [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] tile . render_highlight ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL] [EOL] def dummy ( * args ) : [EOL] was_called . append ( [number] ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] batch . add = dummy [EOL] [EOL] game_state = GameState ( ) [EOL] was_called . clear ( ) [EOL] position = Vector ( ) [EOL] size = Vector ( [number] , [number] ) [EOL] tile_type = TileType . BUILDING_GROUND [EOL] tile = Tile ( position , size , tile_type ) [EOL] tile . render_highlight ( game_state , batch ) [EOL] self . assertEqual ( [number] , len ( was_called ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_types.TileType$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_types.TileType$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.game_types.TileType$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.int$ 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $builtins.int$ 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $tower_defense.game_state.GameState$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.str$ 0 0 $tower_defense.tiles.tile.Tile$ 0 0 0 $tower_defense.game_state.GameState$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0
	0
[EOL] def my_function ( ) : [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from enum import Enum [EOL] [EOL] [EOL] class GameMode ( Enum ) : [EOL] MAIN_MENU = [number] [EOL] EDITOR = [number] [EOL] GAME = [number] [EOL] MAP_CHOICE_EDITOR = [number] [EOL] MAP_CHOICE_GAME = [number] [EOL] [EOL] [EOL] class TileType ( Enum ) : [EOL] BUILDING_GROUND = [number] [EOL] PATH = [number] [EOL] START = [number] [EOL] FINISH = [number] [EOL] [EOL] [EOL] class EntityType ( Enum ) : [EOL] LARGE_BOULDER = [number] [EOL] SMALL_BOULDER = [number] [EOL] MINERAL = [number] [EOL] [EOL] [EOL] class BuildingType ( Enum ) : [EOL] LASER = [number] [EOL] HAMMER = [number] [EOL] DRILL = [number] [EOL] PLATFORM = [number] [EOL] [EOL] [EOL] class BulletType ( Enum ) : [EOL] STANDARD = [number] [EOL] DYNAMITE = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Tuple [EOL] import graphics [EOL] import pyglet [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import buildings [EOL] import tiles [EOL] import entities [EOL] import user_interface [EOL] from typing import List , Tuple , Optional [EOL] [EOL] import pyglet [EOL] [EOL] from . buildings import building_manager as bm [EOL] from . entities import entity_manager as em [EOL] from . tiles import tile_map as tm [EOL] from . user_interface import menu as menu [EOL] from . user_interface import user_interface as ui [EOL] from . game_types import GameMode [EOL] from . graphics import Textures [EOL] from . helper import KeyPresses , MouseClick , Vector , constrain_rect_to_bounds [EOL] [EOL] [EOL] class GameState : [EOL] def __init__ ( self ) : [EOL] self . mode = GameMode . MAIN_MENU [EOL] [EOL] self . window_size = Vector ( ) [EOL] self . key_presses = KeyPresses ( ) [EOL] self . mouse_clicks = [ ] [EOL] self . mouse_position = Vector ( ) [EOL] [EOL] self . main_menu = menu . MainMenu ( ) [EOL] self . map_menu = menu . MapMenu ( ) [EOL] [EOL] self . editor_ui = ui . EditorUI ( ) [EOL] self . game_ui = ui . GameUI ( ) [EOL] [EOL] self . textures = Textures ( ) [EOL] self . tile_map = tm . TileMap ( ) [EOL] self . entity_manager = em . EntityManager ( ) [EOL] self . building_manager = bm . BuildingManager ( ) [EOL] [EOL] self . player_health = [number] [EOL] [EOL] self . world_offset = Vector ( self . tile_map . border_width * [number] , self . tile_map . border_width * [number] ) [EOL] [EOL] self . tickers = { GameMode . GAME : self . tick_game , GameMode . EDITOR : self . tick_editor , GameMode . MAIN_MENU : self . tick_main_menu , GameMode . MAP_CHOICE_GAME : self . tick_map_menu , GameMode . MAP_CHOICE_EDITOR : self . tick_map_menu , } [EOL] [EOL] def init ( self , base_path = [string] ) : [EOL] self . tile_map . load ( self , base_path + [string] ) [EOL] self . textures . load ( base_path ) [EOL] [EOL] def world_to_window_space ( self , position , size , center_position = False ) : [EOL] if center_position : [EOL] position = Vector ( position . x - size . x / [number] , position . y - size . y / [number] ) [EOL] [EOL] position += self . world_offset [EOL] if position . x + size . x < [number] or position . y + size . y < [number] : [EOL] return None [EOL] if position . x > self . window_size . x or position . y - size . y > self . window_size . y : [EOL] return None [EOL] [EOL] return position [EOL] [EOL] def world_to_index_space ( self , position ) : [EOL] return int ( position . x / self . tile_map . tile_size . x ) , int ( position . y / self . tile_map . tile_size . y ) [EOL] [EOL] def index_to_world_space ( self , index ) : [EOL] [comment] [EOL] if isinstance ( index , tuple ) : [EOL] index = Vector ( point = index ) [comment] [EOL] x = index . x [EOL] y = index . y [EOL] return Vector ( x * self . tile_map . tile_size . x , y * self . tile_map . tile_size . y ) [EOL] [EOL] def window_to_world_space ( self , position ) : [EOL] return position - self . world_offset [EOL] [EOL] def clean_up ( self ) : [EOL] self . mouse_clicks = [ ] [EOL] self . key_presses . text = [string] [EOL] self . key_presses . back_space = False [EOL] [EOL] def update ( self ) : [EOL] scroll_speed = [number] [EOL] if self . key_presses . up : [EOL] self . world_offset . y -= scroll_speed [EOL] if self . key_presses . down : [EOL] self . world_offset . y += scroll_speed [EOL] if self . key_presses . left : [EOL] self . world_offset . x += scroll_speed [EOL] if self . key_presses . right : [EOL] self . world_offset . x -= scroll_speed [EOL] [EOL] rect_size = Vector ( self . tile_map . tile_map_width , self . tile_map . tile_map_height ) [EOL] self . world_offset = constrain_rect_to_bounds ( self . window_size , self . world_offset , rect_size ) [EOL] [EOL] def tick_editor ( self ) : [EOL] if not isinstance ( self . entity_manager , em . EditorEntityManager ) : [EOL] self . entity_manager = em . EditorEntityManager ( ) [EOL] if not isinstance ( self . tile_map , tm . EditorTileMap ) : [EOL] path = self . tile_map . path [EOL] self . tile_map = tm . EditorTileMap ( ) [EOL] self . tile_map . load ( self , path ) [EOL] [EOL] self . update ( ) [EOL] [EOL] self . editor_ui . update ( self ) [EOL] self . entity_manager . update ( self ) [EOL] self . tile_map . update ( self ) [EOL] [EOL] self . tile_map . render ( self ) [EOL] self . entity_manager . render ( self ) [EOL] self . editor_ui . render ( ) [EOL] [EOL] def tick_game ( self ) : [EOL] if not isinstance ( self . entity_manager , em . GameEntityManager ) : [EOL] self . entity_manager = em . GameEntityManager ( ) [EOL] if not isinstance ( self . tile_map , tm . GameTileMap ) : [EOL] path = self . tile_map . path [EOL] self . tile_map = tm . GameTileMap ( ) [EOL] self . tile_map . load ( self , path ) [EOL] [EOL] self . update ( ) [EOL] [EOL] self . game_ui . update ( self ) [EOL] self . entity_manager . update ( self ) [EOL] self . building_manager . update ( self ) [EOL] self . tile_map . update ( self ) [EOL] [EOL] self . tile_map . render ( self ) [EOL] self . building_manager . render ( self ) [EOL] self . entity_manager . render ( self ) [EOL] self . game_ui . render ( self ) [EOL] [EOL] def tick_main_menu ( self ) : [EOL] self . main_menu . update ( self ) [EOL] self . main_menu . render ( ) [EOL] [EOL] def tick_map_menu ( self ) : [EOL] self . map_menu . update ( self ) [EOL] self . map_menu . render ( self ) [EOL] [EOL] def tick ( self , window ) : [EOL] self . window_size = Vector ( * window . get_size ( ) ) [EOL] [EOL] self . tickers [ self . mode ] ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $helper.KeyPresses$ 0 0 0 0 0 0 0 $typing.List[helper.MouseClick]$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $user_interface.menu.MainMenu$ 0 0 0 0 0 0 0 0 0 $user_interface.menu.MapMenu$ 0 0 0 0 0 0 0 0 0 0 $user_interface.user_interface.EditorUI$ 0 0 0 0 0 0 0 0 0 $user_interface.user_interface.GameUI$ 0 0 0 0 0 0 0 0 0 0 $graphics.Textures$ 0 0 0 0 0 0 0 $tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 $buildings.building_manager.BuildingManager$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 $tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 $tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[helper.Vector]$ 0 0 0 $tower_defense.helper.Vector$ 0 $helper.Vector$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 $helper.Vector$ 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 $helper.Vector$ 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tower_defense.helper.MouseClick]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.int$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 $builtins.str$ 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 $tower_defense.tiles.tile_map.TileMap$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity_manager.EntityManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.window.Window$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $pyglet.window.Window$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyglet [EOL] import typing [EOL] import tower_defense [EOL] import helper [EOL] import pyglet [EOL] [EOL] from . . game_types import BulletType [EOL] from . . graphics import Renderer [EOL] from . . helper import Vector , rect_contains_point [EOL] [EOL] [EOL] class Bullet : [EOL] def __init__ ( self , position , size , velocity ) : [EOL] self . position = position [EOL] self . size = size [EOL] self . velocity = velocity [EOL] self . bullet_type = BulletType . STANDARD [EOL] [EOL] @ property def damage ( self ) : [EOL] [comment] [EOL] return [number] [EOL] [EOL] def render ( self , game_state , batch ) : [EOL] position = game_state . world_to_window_space ( self . position , self . size , True ) [EOL] if position is None : [EOL] return [EOL] [EOL] Renderer . textured_rectangle ( batch , game_state . textures . bullets [ self . bullet_type ] , position , self . size , tex_max = [number] ) [EOL] [EOL] def update ( self , game_state ) : [EOL] self . position += self . velocity [EOL] [EOL] for entity in game_state . entity_manager . entities : [EOL] position = Vector ( entity . position . x , entity . position . y ) [EOL] position . x -= entity . size . x / [number] [EOL] position . y += entity . size . y / [number] [EOL] if rect_contains_point ( self . position , position , entity . size ) : [EOL] entity . take_damage ( self . damage ) [EOL] return True [EOL] [EOL] return not game_state . tile_map . is_on_map ( self . position ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0
	0
from typing import Tuple , Any [EOL] import pyglet [EOL] import game_types [EOL] import typing [EOL] import tower_defense [EOL] import helper [EOL] import builtins [EOL] import pyglet [EOL] [EOL] from . . game_types import EntityType [EOL] from . . graphics import Renderer [EOL] from . . helper import Vector [EOL] [EOL] [EOL] class Entity : [EOL] def __init__ ( self , position , size , entity_type ) : [EOL] self . entity_type = entity_type [EOL] self . position = position [comment] [EOL] self . size = size [EOL] self . velocity = Vector ( ) [EOL] self . acceleration = Vector ( ) [EOL] self . max_speed = [number] [EOL] self . next_tile_index = None [EOL] self . health = [number] [EOL] self . player_damage = [number] [EOL] [EOL] def update ( self , game_state ) : [EOL] if not game_state . tile_map . is_on_map ( self . position ) : [EOL] return [EOL] [EOL] tile_index = game_state . world_to_index_space ( self . position ) [EOL] tile = game_state . tile_map . tiles [ tile_index ] [EOL] [EOL] if not tile . directions : [EOL] return [EOL] if self . next_tile_index is None : [EOL] self . next_tile_index = game_state . world_to_index_space ( self . position ) [EOL] [EOL] self . update_next_tile_index ( game_state ) [EOL] [EOL] self . calculate_movement ( game_state ) [EOL] [EOL] def get_movement_target ( self , game_state ) : [EOL] tile = game_state . tile_map . tiles [ self . next_tile_index ] [EOL] half_tile_size = tile . size / [number] [EOL] return tile . world_position + half_tile_size [EOL] [EOL] def calculate_movement ( self , game_state ) : [EOL] target = self . get_movement_target ( game_state ) [EOL] [EOL] desired_velocity = target - self . position [EOL] desired_speed = desired_velocity . length ( ) [EOL] desired_velocity /= desired_speed [EOL] desired_velocity *= self . max_speed [EOL] steer = desired_velocity - self . velocity [EOL] [EOL] self . acceleration += steer [EOL] self . velocity += self . acceleration [EOL] self . position += self . velocity [EOL] self . acceleration = Vector ( ) [EOL] [EOL] def update_next_tile_index ( self , game_state ) : [EOL] if game_state . world_to_index_space ( self . position ) == self . next_tile_index : [EOL] min_d = None [EOL] for direction in game_state . entity_manager . directions_graph [ self . next_tile_index ] : [EOL] if min_d is None : [EOL] min_d = direction , game_state . entity_manager . directions_graph [ self . next_tile_index ] [ direction ] [EOL] elif min_d [ [number] ] > game_state . entity_manager . directions_graph [ self . next_tile_index ] [ direction ] : [EOL] min_d = direction , game_state . entity_manager . directions_graph [ self . next_tile_index ] [ direction ] [EOL] if min_d : [EOL] direction = min_d [ [number] ] [EOL] game_state . entity_manager . directions_graph [ self . next_tile_index ] [ direction ] = min_d [ [number] ] + [number] [EOL] self . next_tile_index = self . next_tile_index [ [number] ] + direction [ [number] ] , self . next_tile_index [ [number] ] + direction [ [number] ] [EOL] [EOL] def render ( self , game_state , batch ) : [EOL] position = game_state . world_to_window_space ( self . position , self . size , True ) [EOL] if position is None : [EOL] return [EOL] [EOL] Renderer . textured_rectangle ( batch , game_state . textures . entities [ self . entity_type ] , position , self . size , tex_max = [number] ) [EOL] [EOL] def take_damage ( self , damage ) : [EOL] self . health -= damage [EOL] [EOL] [EOL] class SmallBoulder ( Entity ) : [EOL] def __init__ ( self , position , size , path_side ) : [EOL] super ( ) . __init__ ( position , size , EntityType . SMALL_BOULDER ) [EOL] self . path_side = path_side [EOL] [EOL] def get_movement_target ( self , game_state ) : [EOL] tile = game_state . tile_map . tiles [ self . next_tile_index ] [EOL] half_tile_size = tile . size / [number] [EOL] center = tile . world_position + half_tile_size [EOL] quarter_tile_size = half_tile_size / [number] [EOL] return center + quarter_tile_size * self . path_side [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_types.EntityType$ 0 0 0 0 0 $tower_defense.game_types.EntityType$ 0 $tower_defense.game_types.EntityType$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $typing.Any$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0
from typing import List , Dict , Tuple , Any [EOL] import game_types [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import entity [EOL] from typing import List , Dict , Tuple [EOL] [EOL] import pyglet [EOL] [EOL] from . entity import Entity , SmallBoulder [EOL] from . . game_types import TileType , EntityType [EOL] from . . helper import Vector [EOL] [EOL] [EOL] class EntityManager : [EOL] def __init__ ( self ) : [EOL] self . entities = [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . directions_graph = { } [EOL] self . spawn_delay = [number] [EOL] self . spawn_timer = self . spawn_delay [EOL] [EOL] def render ( self , game_state ) : [EOL] batch = pyglet . graphics . Batch ( ) [EOL] for entity in self . entities : [EOL] entity . render ( game_state , batch ) [EOL] batch . draw ( ) [EOL] [EOL] def reset ( self ) : [EOL] self . directions_graph = { } [EOL] self . entities = [ ] [EOL] [EOL] def spawn_entity ( self , game_state , entity_type , position = None , path_side = [number] ) : [EOL] if position is None : [EOL] for tile_index in game_state . tile_map . tiles : [EOL] tile = game_state . tile_map . tiles [ tile_index ] [EOL] if tile . tile_type == TileType . START : [EOL] position = tile . world_position + ( game_state . tile_map . tile_size / [number] ) [EOL] break [EOL] [EOL] if position is None : [EOL] [comment] [EOL] return [EOL] [EOL] entity = Entity ( position , game_state . tile_map . tile_size , entity_type ) [EOL] if entity_type == EntityType . SMALL_BOULDER : [EOL] entity = SmallBoulder ( position , game_state . tile_map . tile_size / [number] , path_side ) [EOL] self . entities . append ( entity ) [EOL] [EOL] def update ( self , game_state ) : [EOL] self . generate_directions_graph ( game_state ) [EOL] self . update_entities ( game_state ) [EOL] [EOL] def next_wave ( self ) : [EOL] pass [EOL] [EOL] def update_entities ( self , game_state ) : [EOL] for entity in self . entities . copy ( ) : [EOL] entity . update ( game_state ) [EOL] [EOL] tile_index = game_state . world_to_index_space ( entity . position ) [EOL] if game_state . tile_map . tiles [ tile_index ] . tile_type == TileType . FINISH : [EOL] game_state . player_health -= entity . player_damage [EOL] self . entities . remove ( entity ) [EOL] elif entity . health <= [number] : [EOL] if entity . entity_type == EntityType . LARGE_BOULDER : [EOL] self . spawn_entity ( game_state , EntityType . SMALL_BOULDER , entity . position , path_side = - [number] ) [EOL] self . spawn_entity ( game_state , EntityType . SMALL_BOULDER , entity . position , path_side = [number] ) [EOL] self . entities . remove ( entity ) [EOL] [EOL] def generate_directions_graph ( self , game_state ) : [EOL] for tile in game_state . tile_map . tiles : [EOL] if tile not in self . directions_graph : [EOL] self . directions_graph [ tile ] = { } [EOL] [EOL] for direction in self . directions_graph [ tile ] . copy ( ) : [EOL] if direction not in game_state . tile_map . tiles [ tile ] . directions : [EOL] del self . directions_graph [ tile ] [ direction ] [EOL] [EOL] for direction in game_state . tile_map . tiles [ tile ] . directions : [EOL] if direction not in self . directions_graph [ tile ] : [EOL] self . directions_graph [ tile ] [ direction ] = [number] [EOL] [EOL] [EOL] class EditorEntityManager ( EntityManager ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . should_spawn = True [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] [EOL] if not self . should_spawn : [EOL] return [EOL] [EOL] self . spawn_timer += [number] [EOL] if self . spawn_timer < self . spawn_delay : [EOL] return [EOL] [EOL] if not game_state . tile_map . has_finish_node : [EOL] return [EOL] [EOL] self . spawn_timer = [number] [EOL] self . spawn_entity ( game_state , EntityType . LARGE_BOULDER ) [EOL] [EOL] def reset ( self ) : [EOL] super ( ) . reset ( ) [EOL] self . spawn_timer = self . spawn_delay [EOL] [EOL] [EOL] class GameEntityManager ( EntityManager ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . wave_count = [number] [EOL] self . wave = [ ] [EOL] [EOL] @ property def wave_running ( self ) : [EOL] return len ( self . wave ) > [number] [EOL] [EOL] def next_wave ( self ) : [EOL] self . wave_count += [number] [EOL] self . wave = [ ] [EOL] for _ in range ( [number] ) : [EOL] self . wave . append ( [number] ) [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] [EOL] if not self . wave_running : [EOL] return [EOL] [EOL] self . spawn_timer += [number] [EOL] if self . spawn_timer < self . spawn_delay : [EOL] return [EOL] [EOL] self . spawn_timer = [number] [EOL] self . wave = self . wave [ : - [number] ] [EOL] self . spawn_entity ( game_state , EntityType . LARGE_BOULDER ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[entity.Entity]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],typing.List[typing.Tuple[typing.Tuple[builtins.int,builtins.int],builtins.int]]]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.int,builtins.int],typing.List[typing.Tuple[typing.Tuple[builtins.int,builtins.int],builtins.int]]]$ 0 0 0 0 0 0 $typing.List[tower_defense.entities.entity.Entity]$ 0 0 0 0 0 0 0 0 0 0 0 0 $game_types.EntityType$ 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.SmallBoulder$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $game_types.EntityType$ 0 0 0 $game_types.EntityType$ 0 0 0 0 0 0 $tower_defense.entities.entity.SmallBoulder$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $tower_defense.entities.entity.SmallBoulder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Tuple , Any [EOL] import tile [EOL] import typing [EOL] import tower_defense [EOL] import helper [EOL] import builtins [EOL] import copy [EOL] import os [EOL] import pickle [EOL] from typing import Dict , Tuple [EOL] [EOL] import pyglet [EOL] [EOL] from . . game_types import TileType [EOL] from . . graphics import Renderer [EOL] from . . helper import Vector , rect_contains_point , process_clicks , MouseClick [EOL] from . tile import Tile [EOL] [EOL] [EOL] class TileMap : [EOL] def __init__ ( self ) : [EOL] self . path = [string] [EOL] self . border_width = [number] [EOL] self . tile_size = Vector ( [number] , [number] ) [EOL] self . max_tiles = Vector ( [number] , [number] ) [EOL] self . tiles = self . generate_tiles ( self . max_tiles , self . tile_size ) [EOL] [EOL] @ staticmethod def generate_tiles ( max_tiles , tile_size ) : [EOL] tiles = { } [EOL] for x in range ( int ( max_tiles . x ) ) : [EOL] for y in range ( int ( max_tiles . y ) ) : [EOL] tile = Tile ( Vector ( x , y ) , tile_size , TileType . BUILDING_GROUND ) [EOL] tiles [ ( x , y ) ] = tile [EOL] return tiles [EOL] [EOL] def new ( self , game_state , path , size ) : [EOL] game_state . entity_manager . reset ( ) [EOL] self . path = path . strip ( ) [EOL] self . max_tiles = size . copy ( ) [EOL] self . tiles = self . generate_tiles ( self . max_tiles , self . tile_size ) [EOL] self . save ( ) [EOL] [EOL] def load ( self , game_state , path ) : [EOL] game_state . entity_manager . reset ( ) [EOL] self . path = path . strip ( ) [EOL] if os . path . isfile ( self . path ) : [EOL] with open ( self . path , [string] ) as f : [EOL] self . tiles , self . max_tiles = pickle . load ( f ) [EOL] print ( [string] , self . path ) [EOL] [EOL] [comment] [EOL] for tile in self . tiles : [EOL] self . tiles [ tile ] . size = self . tile_size [EOL] [EOL] def save ( self ) : [EOL] if self . path : [EOL] with open ( self . path , [string] ) as f : [EOL] pickle . dump ( ( self . tiles , self . max_tiles ) , f ) [EOL] print ( [string] , self . path ) [EOL] [EOL] @ property def tile_map_width ( self ) : [EOL] return self . tile_size . x * self . max_tiles . x [EOL] [EOL] @ property def tile_map_height ( self ) : [EOL] return self . tile_size . y * self . max_tiles . y [EOL] [EOL] @ property def has_start_node ( self ) : [EOL] for tile in self . tiles : [EOL] if self . tiles [ tile ] . tile_type == TileType . START : [EOL] return True [EOL] return False [EOL] [EOL] @ property def has_finish_node ( self ) : [EOL] for tile in self . tiles : [EOL] if self . tiles [ tile ] . tile_type == TileType . FINISH : [EOL] return True [EOL] return False [EOL] [EOL] def is_on_map ( self , position ) : [EOL] return [number] < position . x < self . tile_map_width and [number] < position . y < self . tile_map_height [EOL] [EOL] def render ( self , game_state ) : [EOL] batch = pyglet . graphics . Batch ( ) [EOL] [EOL] size = Vector ( self . tile_map_width + self . border_width * [number] , self . tile_map_height + self . border_width * [number] ) [EOL] position = game_state . world_offset - Vector ( self . border_width , self . border_width ) [EOL] Renderer . rectangle_border ( batch , position , size , ( [number] , [number] , [number] ) , border_width = self . border_width ) [EOL] [EOL] for tile in self . tiles . values ( ) : [EOL] tile . render ( game_state , batch ) [EOL] [EOL] batch . draw ( ) [EOL] [EOL] def update ( self , game_state ) : [EOL] process_clicks ( game_state , self . mouse_click_handler ) [EOL] [EOL] def mouse_click_handler ( self , _ , click ) : [EOL] return False [EOL] [EOL] def path_finding ( self ) : [EOL] for tile in self . tiles : [EOL] self . tiles [ tile ] . directions = [ ] [EOL] [EOL] graph = self . get_tile_graph ( ) [EOL] paths = { } [EOL] for node in graph : [EOL] paths [ node ] = { } [EOL] paths [ node ] [ [string] ] = graph [ node ] [EOL] paths [ node ] [ [string] ] = [ ] [EOL] paths [ node ] [ [string] ] = [ ] [EOL] [EOL] starting_node = None [EOL] finish_node = None [EOL] for tile in self . tiles : [EOL] if self . tiles [ tile ] . tile_type == TileType . START : [EOL] starting_node = tile [EOL] elif self . tiles [ tile ] . tile_type == TileType . FINISH : [EOL] finish_node = tile [EOL] if starting_node is None : [EOL] return [EOL] if finish_node is None : [EOL] return [EOL] [EOL] paths [ starting_node ] [ [string] ] = [ starting_node ] [EOL] paths [ finish_node ] [ [string] ] = [ ] [EOL] [EOL] while True : [EOL] start_node = self . select_start_node ( paths ) [EOL] if start_node is None : [EOL] [comment] [EOL] break [EOL] [EOL] path = [ start_node ] [EOL] [comment] [EOL] temp_paths = copy . deepcopy ( paths ) [EOL] current_node = start_node [EOL] while True : [EOL] open_directions = temp_paths [ current_node ] [ [string] ] [EOL] if open_directions : [EOL] [comment] [EOL] [EOL] direction = open_directions [ [number] ] [EOL] next_node = direction [ [number] ] [EOL] path . append ( next_node ) [EOL] [EOL] [comment] [EOL] temp_paths [ current_node ] [ [string] ] = self . remove_node_from_open_directions ( next_node , open_directions ) [EOL] next_open_directions = temp_paths [ next_node ] [ [string] ] [EOL] temp_paths [ next_node ] [ [string] ] = self . remove_node_from_open_directions ( current_node , next_open_directions ) [EOL] [EOL] current_node = next_node [EOL] elif current_node == finish_node : [EOL] [comment] [EOL] break [EOL] elif paths [ current_node ] [ [string] ] : [EOL] [comment] [EOL] break [EOL] elif current_node == start_node : [EOL] [comment] [EOL] path = None [EOL] break [EOL] else : [EOL] [comment] [EOL] while not temp_paths [ current_node ] [ [string] ] : [EOL] if current_node == start_node : [EOL] path = None [EOL] break [EOL] path = path [ : - [number] ] [EOL] current_node = path [ - [number] ] [EOL] [EOL] if path is None : [EOL] [comment] [EOL] paths [ start_node ] [ [string] ] = [ ] [EOL] continue [EOL] [EOL] [comment] [EOL] rest_path = path [EOL] for index , node in enumerate ( path ) : [EOL] paths [ node ] [ [string] ] = path [ : index + [number] ] [EOL] if rest_path not in paths [ node ] [ [string] ] : [EOL] paths [ node ] [ [string] ] . append ( rest_path ) [EOL] [EOL] if rest_path : [EOL] rest_path = rest_path [ [number] : ] [EOL] [EOL] if index > [number] : [EOL] [comment] [EOL] previous_node = path [ index - [number] ] [EOL] paths [ node ] [ [string] ] = self . remove_node_from_open_directions ( previous_node , paths [ node ] [ [string] ] ) [EOL] paths [ previous_node ] [ [string] ] = self . remove_node_from_open_directions ( node , paths [ previous_node ] [ [string] ] ) [EOL] else : [EOL] [comment] [EOL] paths [ node ] [ [string] ] = self . remove_node_from_open_directions ( start_node , paths [ node ] [ [string] ] ) [EOL] paths [ start_node ] [ [string] ] = self . remove_node_from_open_directions ( node , paths [ start_node ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] for node in paths : [EOL] directions = [ ] [EOL] for p in paths [ node ] [ [string] ] : [EOL] if len ( p ) > [number] : [EOL] d = p [ [number] ] [ [number] ] - p [ [number] ] [ [number] ] , p [ [number] ] [ [number] ] - p [ [number] ] [ [number] ] [EOL] directions . append ( d ) [EOL] self . tiles [ node ] . directions = directions [EOL] [EOL] @ staticmethod def remove_node_from_open_directions ( node , open_directions ) : [EOL] for n in open_directions . copy ( ) : [EOL] if n [ [number] ] == node : [EOL] open_directions . remove ( n ) [EOL] return open_directions [EOL] [EOL] @ staticmethod def select_start_node ( paths ) : [EOL] for node in paths : [EOL] if paths [ node ] [ [string] ] and paths [ node ] [ [string] ] : [EOL] return node [EOL] return None [EOL] [EOL] def get_tile_graph ( self ) : [EOL] graph = { } [EOL] for position in self . tiles : [EOL] if self . tiles [ position ] . is_walkable : [EOL] graph [ position ] = [ ] [EOL] [EOL] x , y = position [EOL] left_pos = ( x - [number] , y ) [EOL] right_pos = ( x + [number] , y ) [EOL] top_pos = ( x , y - [number] ) [EOL] bottom_pos = ( x , y + [number] ) [EOL] [EOL] if top_pos in self . tiles and self . tiles [ top_pos ] . is_walkable : [EOL] graph [ position ] . append ( ( top_pos , ( [number] , - [number] ) ) ) [EOL] [EOL] if right_pos in self . tiles and self . tiles [ right_pos ] . is_walkable : [EOL] graph [ position ] . append ( ( right_pos , ( [number] , [number] ) ) ) [EOL] [EOL] if bottom_pos in self . tiles and self . tiles [ bottom_pos ] . is_walkable : [EOL] graph [ position ] . append ( ( bottom_pos , ( [number] , [number] ) ) ) [EOL] [EOL] if left_pos in self . tiles and self . tiles [ left_pos ] . is_walkable : [EOL] graph [ position ] . append ( ( left_pos , ( - [number] , [number] ) ) ) [EOL] [EOL] return graph [EOL] [EOL] [EOL] class EditorTileMap ( TileMap ) : [EOL] def render ( self , game_state ) : [EOL] super ( ) . render ( game_state ) [EOL] [EOL] arrow_batch = pyglet . graphics . Batch ( ) [EOL] for tile in self . tiles . values ( ) : [EOL] tile . render_arrow ( game_state , arrow_batch ) [EOL] arrow_batch . draw ( ) [EOL] [EOL] def mouse_click_handler ( self , _ , click ) : [EOL] if not self . is_on_map ( click . position ) or click . button != [number] : [EOL] return False [EOL] [EOL] for tile in self . tiles . values ( ) : [EOL] if rect_contains_point ( click . position , Vector ( tile . world_position . x , tile . world_position . y + tile . size . y ) , tile . size ) : [EOL] allow_start = True [EOL] allow_finish = True [EOL] for key in self . tiles : [EOL] if self . tiles [ key ] . tile_type == TileType . START : [EOL] allow_start = False [EOL] elif self . tiles [ key ] . tile_type == TileType . FINISH : [EOL] allow_finish = False [EOL] [EOL] tile . next_type ( allow_start , allow_finish ) [EOL] [EOL] self . path_finding ( ) [EOL] [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] class GameTileMap ( TileMap ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . path_finding ( ) [EOL] self . highlighted_tile = None [EOL] [EOL] def render ( self , game_state ) : [EOL] super ( ) . render ( game_state ) [EOL] [EOL] highlight_batch = pyglet . graphics . Batch ( ) [EOL] for tile in self . tiles . values ( ) : [EOL] if tile . highlighted : [EOL] tile . render_highlight ( game_state , highlight_batch ) [EOL] break [EOL] highlight_batch . draw ( ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] if not self . is_on_map ( click . position ) or click . button != [number] : [EOL] return False [EOL] [EOL] for tile in self . tiles : [EOL] if rect_contains_point ( click . position , Vector ( self . tiles [ tile ] . world_position . x , self . tiles [ tile ] . world_position . y + self . tiles [ tile ] . size . y ) , self . tiles [ tile ] . size ) : [EOL] if self . tiles [ tile ] . tile_type == TileType . BUILDING_GROUND : [EOL] self . tiles [ tile ] . highlighted = not self . tiles [ tile ] . highlighted [EOL] if self . tiles [ tile ] . highlighted : [EOL] self . highlighted_tile = tile [EOL] else : [EOL] self . highlighted_tile = None [EOL] else : [EOL] self . highlighted_tile = None [EOL] [EOL] for other_tile in self . tiles : [EOL] if tile == other_tile : [EOL] continue [EOL] self . tiles [ other_tile ] . highlighted = False [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,tower_defense.tiles.tile.Tile]$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $builtins.list$ 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 $builtins.list$ 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Generator , Any [EOL] import pyglet [EOL] import game_types [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import math [EOL] from typing import Generator [EOL] [EOL] import pyglet [EOL] [EOL] from . . game_types import BuildingType , TileType [EOL] from . . graphics import Renderer , MovementGroup [EOL] from . . helper import Vector , rect_contains_point [EOL] [EOL] [EOL] class Building : [EOL] def __init__ ( self , position , size , building_type ) : [EOL] self . position = position [EOL] self . size = size [EOL] self . building_type = building_type [EOL] self . mouse_over = False [EOL] [EOL] @ property def world_position ( self ) : [EOL] return Vector ( self . position . x * self . size . x , self . position . y * self . size . y ) [EOL] [EOL] @ property def shooting_frequency ( self ) : [EOL] if self . building_type == BuildingType . LASER : [EOL] return [number] / [number] [EOL] [EOL] raise Exception ( [string] , self . building_type ) [EOL] [EOL] @ property def range ( self ) : [EOL] if self . building_type == BuildingType . LASER : [EOL] return [number] [EOL] elif self . building_type == BuildingType . HAMMER : [EOL] return [number] [EOL] elif self . building_type == BuildingType . DRILL : [EOL] return [number] [EOL] [EOL] print ( [string] , self . building_type ) [EOL] return - [number] [EOL] [EOL] @ property def cost ( self ) : [EOL] if self . building_type == BuildingType . LASER : [EOL] return [number] [EOL] elif self . building_type == BuildingType . HAMMER : [EOL] return [number] [EOL] elif self . building_type == BuildingType . DRILL : [EOL] return [number] [EOL] [EOL] print ( [string] , self . building_type ) [EOL] return - [number] [EOL] [EOL] def render ( self , game_state , batch , tex_max = [number] , foreground = None , background = None ) : [EOL] position = game_state . world_to_window_space ( self . world_position , self . size ) [EOL] if position is None : [EOL] return None [EOL] [EOL] if self . mouse_over : [EOL] size = self . size / self . size . length ( ) [EOL] [comment] [EOL] size *= self . range * [number] [EOL] ring_position = position - size / [number] [EOL] ring_position += self . size / [number] [EOL] Renderer . textured_rectangle ( batch , game_state . textures . other [ [string] ] , ring_position , size ) [EOL] [EOL] return position [EOL] [EOL] def update ( self , game_state ) : [EOL] position = game_state . world_to_window_space ( self . world_position , self . size ) [EOL] if position : [comment] [EOL] position += Vector ( [number] , self . size . y ) [EOL] self . mouse_over = rect_contains_point ( game_state . mouse_position , position , self . size ) [EOL] [EOL] def get_center_world_position ( self , game_state ) : [EOL] world_position = game_state . index_to_world_space ( self . position ) [EOL] return world_position + self . size / [number] [EOL] [EOL] def get_target ( self , game_state ) : [EOL] [docstring] [EOL] for entity in game_state . entity_manager . entities : [EOL] direction = entity . position - self . get_center_world_position ( game_state ) [EOL] [EOL] distance = direction . length ( ) [EOL] if distance < self . range : [EOL] yield entity [EOL] return None [EOL] [EOL] [EOL] class Laser ( Building ) : [EOL] def __init__ ( self , position , size ) : [EOL] super ( ) . __init__ ( position , size , BuildingType . LASER ) [EOL] self . target = None [EOL] [EOL] def render ( self , game_state , batch , tex_max = [number] , foreground = None , background = None ) : [EOL] position = super ( ) . render ( game_state , batch ) [EOL] if position is None : [EOL] return [EOL] [EOL] texture = game_state . textures . buildings [ self . building_type ] . texture [EOL] group = pyglet . graphics . TextureGroup ( texture , parent = foreground ) [EOL] Renderer . textured_rectangle ( batch , group , position , self . size , tex_max = [number] ) [EOL] [EOL] if self . target is None : [EOL] return [EOL] [EOL] size = Vector ( self . target [ [number] ] . length ( ) , [number] ) [EOL] angle = self . target [ [number] ] . angle ( ) / math . pi * [number] [EOL] position += self . size / [number] + Vector ( [number] , [number] ) [EOL] Renderer . colored_rectangle ( batch , ( [number] , [number] , [number] ) , position , size , angle , background ) [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] [EOL] self . target = self . get_target ( game_state ) [EOL] [EOL] [EOL] class Hammer ( Building ) : [EOL] def __init__ ( self , position , size ) : [EOL] super ( ) . __init__ ( position , size , BuildingType . HAMMER ) [EOL] self . rotation_angle = [number] [EOL] self . hammer_size = Vector ( [number] , [number] ) [EOL] [EOL] def update ( self , game_state ) : [EOL] [comment] [EOL] targets = list ( self . get_target ( game_state ) ) [EOL] if targets : [EOL] rotation_speed = [number] [EOL] else : [EOL] rotation_speed = [number] [EOL] self . rotation_angle -= rotation_speed [EOL] [EOL] def render ( self , game_state , batch , tex_max = [number] , foreground = None , background = None ) : [EOL] position = super ( ) . render ( game_state , batch ) [EOL] if position is None : [EOL] return [EOL] [EOL] texture = game_state . textures . buildings [ BuildingType . PLATFORM ] . texture [EOL] group = pyglet . graphics . TextureGroup ( texture , parent = background ) [EOL] Renderer . textured_rectangle ( batch , group , position , self . size , tex_max = [number] ) [EOL] [EOL] texture = game_state . textures . buildings [ self . building_type ] . texture [EOL] position += self . size / [number] [EOL] movement_group = MovementGroup ( self . rotation_angle , position , foreground ) [EOL] texture_group = pyglet . graphics . TextureGroup ( texture , movement_group ) [EOL] [EOL] offset = Vector ( self . hammer_size . x / - [number] , [number] ) [EOL] Renderer . textured_rectangle ( batch , texture_group , offset , self . hammer_size ) [EOL] [EOL] [EOL] class Drill ( Building ) : [EOL] def __init__ ( self , position , size ) : [EOL] super ( ) . __init__ ( position , size , BuildingType . DRILL ) [EOL] self . rotation_angle = [number] [EOL] self . rotation_speed = [number] [EOL] [EOL] self . animation_angle = [number] [EOL] self . animation_speed = [number] [EOL] self . max_animation_speed = [number] [EOL] [EOL] self . drill_size = Vector ( [number] , [number] ) [EOL] [EOL] self . damage_range = [number] [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] [EOL] self . animation_angle += self . animation_speed [EOL] if self . animation_angle > [number] : [EOL] self . animation_angle = [number] [EOL] [EOL] something_in_sight = self . check_for_entities ( game_state ) [EOL] [EOL] if not something_in_sight : [EOL] if self . animation_speed > [number] : [EOL] self . animation_speed -= [number] [EOL] [EOL] self . rotate_towards ( self . closest_tile_angle ( game_state ) ) [EOL] [EOL] def closest_tile_angle ( self , game_state ) : [EOL] def test_tile ( x , y ) : [EOL] x += self . position . x [EOL] y += self . position . y [EOL] if ( x , y ) not in game_state . tile_map . tiles : [EOL] return False [EOL] return game_state . tile_map . tiles [ ( x , y ) ] . tile_type != TileType . BUILDING_GROUND [EOL] [EOL] if test_tile ( - [number] , [number] ) : [EOL] return - [number] [EOL] elif test_tile ( [number] , [number] ) : [EOL] return [number] [EOL] elif test_tile ( [number] , - [number] ) : [EOL] return [number] [EOL] elif test_tile ( [number] , [number] ) : [EOL] return [number] [EOL] return [number] [EOL] [EOL] def check_for_entities ( self , game_state ) : [EOL] something_in_sight = False [EOL] for target in self . get_target ( game_state ) : [EOL] direction = target . position - self . get_center_world_position ( game_state ) [EOL] [EOL] distance = direction . length ( ) [EOL] angle = direction . angle ( ) * [number] / math . pi + [number] [EOL] self . rotate_towards ( angle ) [EOL] [EOL] if self . animation_speed < self . max_animation_speed : [EOL] self . animation_speed += [number] [EOL] something_in_sight = True [EOL] [EOL] if distance < self . damage_range : [EOL] target . take_damage ( [number] ) [EOL] break [EOL] [EOL] return something_in_sight [EOL] [EOL] def rotate_towards ( self , angle ) : [EOL] angle -= self . rotation_angle [EOL] if angle != [number] : [EOL] self . rotation_angle += angle / abs ( angle ) * self . rotation_speed [EOL] [EOL] def render ( self , game_state , batch , tex_max = [number] , foreground = None , background = None ) : [EOL] position = super ( ) . render ( game_state , batch ) [EOL] if position is None : [EOL] return [EOL] [EOL] texture = game_state . textures . buildings [ BuildingType . PLATFORM ] . texture [EOL] group = pyglet . graphics . TextureGroup ( texture , parent = background ) [EOL] Renderer . textured_rectangle ( batch , group , position , self . size , tex_max = [number] ) [EOL] [EOL] texture = game_state . textures . buildings [ self . building_type ] . texture [EOL] position += self . size / [number] [EOL] movement_group = MovementGroup ( self . rotation_angle , position , foreground ) [EOL] texture_group = pyglet . graphics . TextureGroup ( texture , movement_group ) [EOL] [EOL] drilling = math . sin ( self . animation_angle * math . pi / [number] ) * [number] [EOL] offset = Vector ( self . drill_size . x / - [number] , self . drill_size . y / - [number] + drilling ) [EOL] Renderer . textured_rectangle ( batch , texture_group , offset , self . drill_size ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $tower_defense.game_types.BuildingType$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.game_types.BuildingType$ 0 $tower_defense.game_types.BuildingType$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $builtins.float$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 $pyglet.graphics.Group$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tower_defense.helper.Vector$ 0 $typing.Any$ 0 $pyglet.graphics.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 0 0 $pyglet.graphics.Group$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0 0 0 $typing.Any$ 0 $pyglet.graphics.Group$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $typing.Any$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $builtins.float$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pyglet.graphics.Group$ 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 0 0 0 0 $typing.Any$ 0 $pyglet.graphics.Group$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tower_defense.graphics.MovementGroup$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $pyglet.graphics.Batch$ 0 $typing.Any$ 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import pyglet [EOL] from . . graphics import Renderer [EOL] from . . helper import Vector , MouseClick , KeyPresses , rect_contains_point [EOL] [EOL] [EOL] class Widget : [EOL] def __init__ ( self , position , size , visible = True ) : [EOL] self . position = position [EOL] self . size = size [EOL] self . visible = visible [EOL] self . _disabled = False [EOL] [EOL] @ property def disabled ( self ) : [EOL] return self . _disabled [EOL] [EOL] def toggle_visibility ( self ) : [EOL] self . visible = not self . visible [EOL] [EOL] def is_clicked ( self , mouse_click ) : [EOL] return False [EOL] [EOL] def render ( self , offset ) : [EOL] pass [EOL] [EOL] [EOL] class Label ( Widget ) : [EOL] def __init__ ( self , text , position , size , font_size = [number] , visible = True ) : [EOL] super ( ) . __init__ ( position , size , visible ) [EOL] self . _text = text [EOL] self . _label = pyglet . text . Label ( self . _text , font_name = [string] , font_size = font_size , color = ( [number] , [number] , [number] , [number] ) , width = self . size . x , height = self . size . y , anchor_x = [string] , anchor_y = [string] ) [EOL] [EOL] @ property def text ( self ) : [EOL] return self . _text [EOL] [EOL] def update ( self , text = None , disabled = None ) : [EOL] updated = False [EOL] [EOL] if text is not None and text != self . _text : [EOL] self . _text = text [EOL] self . _label . begin_update ( ) [EOL] self . _label . text = self . _text [EOL] updated = True [EOL] [EOL] if disabled is not None and disabled != self . _disabled : [EOL] if not updated : [EOL] self . _label . begin_update ( ) [EOL] [EOL] self . _disabled = disabled [EOL] if self . _disabled : [EOL] self . _label . color = ( [number] , [number] , [number] , [number] ) [EOL] else : [EOL] self . _label . color = ( [number] , [number] , [number] , [number] ) [EOL] updated = True [EOL] [EOL] if updated : [EOL] self . _label . end_update ( ) [EOL] [EOL] def render ( self , offset ) : [EOL] if not self . visible : [EOL] return [EOL] [EOL] pos = self . position + offset [EOL] self . _label . x = pos . x + self . size . x / [number] [EOL] self . _label . y = pos . y - self . size . y / [number] [EOL] [EOL] bottom_right = Vector ( pos . x + self . size . x , pos . y - self . size . y ) [EOL] pyglet . graphics . draw ( [number] , pyglet . gl . GL_QUADS , ( [string] , [ pos . x , pos . y , bottom_right . x , pos . y , bottom_right . x , bottom_right . y , pos . x , bottom_right . y ] ) ) [EOL] self . _label . draw ( ) [EOL] [EOL] [EOL] class HighlightableLabel ( Label ) : [EOL] def __init__ ( self , text , position , size , font_size = [number] , visible = True , is_highlighted = False ) : [EOL] super ( ) . __init__ ( text , position , size , font_size , visible ) [EOL] self . is_highlighted = is_highlighted [EOL] [EOL] def is_clicked ( self , mouse_click ) : [EOL] if rect_contains_point ( mouse_click . position , self . position , self . size ) : [EOL] self . is_highlighted = True [EOL] return True [EOL] return False [EOL] [EOL] def render ( self , offset ) : [EOL] if not self . visible : [EOL] return [EOL] [EOL] super ( ) . render ( offset ) [EOL] self . render_highlight ( offset ) [EOL] [EOL] def render_highlight ( self , offset ) : [EOL] if not self . is_highlighted : [EOL] return [EOL] [EOL] position = self . position + offset - Vector ( [number] , self . size . y ) [EOL] [EOL] batch = pyglet . graphics . Batch ( ) [EOL] Renderer . rectangle_border ( batch , position , self . size ) [EOL] batch . draw ( ) [EOL] [EOL] [EOL] class Button ( Label ) : [EOL] def __init__ ( self , text , position , size , font_size = [number] , visible = True ) : [EOL] super ( ) . __init__ ( text , position , size , font_size , visible = visible ) [EOL] [EOL] def is_clicked ( self , mouse_click ) : [EOL] if not self . visible : [EOL] return False [EOL] return rect_contains_point ( mouse_click . position , self . position , self . size ) [EOL] [EOL] [EOL] class Input ( Button ) : [EOL] def __init__ ( self , position , size , font_size = [number] , has_focus = False ) : [EOL] super ( ) . __init__ ( [string] , position , size , font_size ) [EOL] self . has_focus = has_focus [EOL] [EOL] def is_clicked ( self , mouse_click ) : [EOL] if super ( ) . is_clicked ( mouse_click ) : [EOL] self . has_focus = True [EOL] return True [EOL] return False [EOL] [EOL] def add_text ( self , key_presses ) : [EOL] if not self . has_focus : [EOL] return [EOL] [EOL] if key_presses . back_space : [EOL] self . update ( text = self . text [ : - [number] ] ) [EOL] else : [EOL] self . update ( text = self . text + key_presses . text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 $tower_defense.helper.Vector$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $typing.Any$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 $typing.Any$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.Vector$ 0 $helper.Vector$ 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.KeyPresses$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.KeyPresses$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.KeyPresses$ 0 0 0 0
from typing import Dict , Literal , Union [EOL] import typing_extensions [EOL] import typing [EOL] import tower_defense [EOL] import dialogs [EOL] import helper [EOL] import builtins [EOL] from . . game_types import GameMode [EOL] from . . helper import Vector , process_clicks , MouseClick [EOL] from . components import Button , Label [EOL] from . dialogs import Dialog , NewMapDialog , LoadMapDialog , BuildingDialog [EOL] [EOL] [EOL] class EditorUI : [EOL] def __init__ ( self ) : [EOL] button_height = [number] [EOL] size = Vector ( [number] , button_height ) [EOL] self . components = { [string] : Button ( [string] , Vector ( [number] , [number] ) , size ) , [string] : Button ( [string] , Vector ( [number] , - [number] * button_height ) , size , visible = False ) , [string] : Button ( [string] , Vector ( [number] , - [number] * button_height ) , size , visible = False ) , [string] : Button ( [string] , Vector ( [number] , - [number] * button_height ) , size , visible = False ) , [string] : Button ( [string] , Vector ( [number] , - [number] * button_height ) , size , visible = False ) , [string] : Button ( [string] , Vector ( size . x , [number] ) , size + Vector ( [number] , [number] ) ) , } [EOL] self . handlers = { [string] : self . menu_func , [string] : self . save_func , [string] : self . new_func , [string] : self . load_func , [string] : self . back_func , [string] : self . entities_func , } [EOL] self . new_dialog = NewMapDialog ( ) [EOL] self . load_dialog = LoadMapDialog ( ) [EOL] self . offset = Vector ( [number] , [number] ) [EOL] [EOL] def menu_func ( self , _ ) : [EOL] self . toggle_map_menu ( ) [EOL] [EOL] def save_func ( self , game_state ) : [EOL] game_state . tile_map . save ( ) [EOL] self . toggle_map_menu ( ) [EOL] [EOL] def new_func ( self , game_state ) : [EOL] self . toggle_map_menu ( ) [EOL] self . new_dialog . open ( game_state ) [EOL] [EOL] def load_func ( self , game_state ) : [EOL] self . toggle_map_menu ( ) [EOL] self . load_dialog . open ( game_state ) [EOL] [EOL] @ staticmethod def back_func ( game_state ) : [EOL] game_state . mode = GameMode . MAIN_MENU [EOL] [EOL] @ staticmethod def entities_func ( game_state ) : [EOL] game_state . entity_manager . should_spawn = not game_state . entity_manager . should_spawn [EOL] game_state . entity_manager . reset ( ) [EOL] [EOL] def update ( self , game_state ) : [EOL] self . offset . y = game_state . window_size . y [EOL] [EOL] if self . new_dialog . visible : [EOL] self . new_dialog . update ( game_state ) [EOL] elif self . load_dialog . visible : [EOL] self . load_dialog . update ( game_state ) [EOL] else : [EOL] text = [string] if game_state . entity_manager . should_spawn else [string] [EOL] self . components [ [string] ] . update ( text = text ) [EOL] process_clicks ( game_state , self . mouse_click_handler , False , offset = self . offset ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] for component in self . handlers : [EOL] if self . components [ component ] . is_clicked ( click ) : [EOL] self . handlers [ component ] ( game_state ) [EOL] return True [EOL] return False [EOL] [EOL] def toggle_map_menu ( self ) : [EOL] self . components [ [string] ] . toggle_visibility ( ) [EOL] self . components [ [string] ] . toggle_visibility ( ) [EOL] self . components [ [string] ] . toggle_visibility ( ) [EOL] self . components [ [string] ] . toggle_visibility ( ) [EOL] [EOL] def render ( self ) : [EOL] for component in self . components : [EOL] self . components [ component ] . render ( self . offset ) [EOL] [EOL] self . new_dialog . render ( ) [EOL] self . load_dialog . render ( ) [EOL] [EOL] [EOL] class GameUI : [EOL] def __init__ ( self ) : [EOL] self . offset = Vector ( ) [EOL] button_height = [number] [EOL] size = Vector ( [number] , button_height ) [EOL] self . components = { [string] : Button ( [string] , Vector ( ) , size ) , [string] : Label ( [string] , Vector ( size . x , [number] ) , size ) , [string] : Label ( [string] , Vector ( size . x * [number] , [number] ) , size ) , [string] : Label ( [string] , Vector ( size . x * [number] , [number] ) , size ) , [string] : Label ( [string] , Vector ( [number] , - [number] ) , Vector ( [number] , [number] ) , font_size = [number] , visible = False ) } [EOL] self . handlers = { [string] : self . next_wave_func } [EOL] self . building_dialog = BuildingDialog ( ) [EOL] [EOL] def update ( self , game_state ) : [EOL] self . offset . y = game_state . window_size . y [EOL] self . components [ [string] ] . update ( text = str ( game_state . player_health ) ) [EOL] self . components [ [string] ] . update ( text = str ( game_state . building_manager . gold ) ) [EOL] self . components [ [string] ] . update ( text = str ( game_state . entity_manager . wave_count ) ) [EOL] [EOL] self . components [ [string] ] . update ( disabled = game_state . entity_manager . wave_running ) [EOL] [EOL] self . components [ [string] ] . position . x = game_state . window_size . x / [number] - self . components [ [string] ] . size . x / [number] [EOL] self . components [ [string] ] . visible = game_state . player_health <= [number] [EOL] [EOL] if game_state . tile_map . highlighted_tile and not self . building_dialog . visible : [EOL] self . building_dialog . open ( game_state ) [EOL] elif self . building_dialog . visible and not game_state . tile_map . highlighted_tile : [EOL] self . building_dialog . close ( ) [EOL] [EOL] self . building_dialog . update ( game_state ) [EOL] [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . offset ) [EOL] [EOL] @ staticmethod def next_wave_func ( game_state ) : [EOL] game_state . entity_manager . next_wave ( ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] for component in self . components : [EOL] if self . components [ component ] . is_clicked ( click ) and not self . components [ component ] . disabled : [EOL] if component in self . handlers : [EOL] self . handlers [ component ] ( game_state ) [EOL] return True [EOL] return False [EOL] [EOL] def render ( self , _ ) : [EOL] for component in self . components : [EOL] self . components [ component ] . render ( self . offset ) [EOL] [EOL] self . building_dialog . render ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.str,tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dialogs.Dialog$ 0 0 0 0 0 0 0 $dialogs.Dialog$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.int$ 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.str,tower_defense.user_interface.components.Label]$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.user_interface.dialogs.BuildingDialog$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import components [EOL] import os [EOL] from typing import List [EOL] [EOL] from . . game_types import GameMode [EOL] from . . helper import Vector , process_clicks , MouseClick , maps_list , get_maps_path [EOL] from . components import Button [EOL] from . dialogs import NewMapDialog [EOL] [EOL] [EOL] class MainMenu : [EOL] def __init__ ( self ) : [EOL] self . position = Vector ( ) [EOL] button_size = Vector ( [number] , [number] ) [EOL] [EOL] self . components = { [string] : Button ( [string] , Vector ( ) , button_size ) , [string] : Button ( [string] , Vector ( [number] , - [number] ) , button_size ) , [string] : Button ( [string] , Vector ( [number] , - [number] ) , button_size ) } [EOL] [EOL] self . handlers = { [string] : self . game_func , [string] : self . editor_func , [string] : self . exit_func } [EOL] [EOL] def render ( self ) : [EOL] for component in self . components : [EOL] self . components [ component ] . render ( self . position ) [EOL] [EOL] def update ( self , game_state ) : [EOL] self . position = Vector ( game_state . window_size . x / [number] - [number] , game_state . window_size . y / [number] + [number] ) [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . position ) [EOL] [EOL] @ staticmethod def game_func ( game_state ) : [EOL] game_state . mode = GameMode . MAP_CHOICE_GAME [EOL] [EOL] @ staticmethod def editor_func ( game_state ) : [EOL] game_state . mode = GameMode . MAP_CHOICE_EDITOR [EOL] [EOL] @ staticmethod def exit_func ( game_state ) : [EOL] exit ( [number] ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] for component in self . components : [EOL] if self . components [ component ] . is_clicked ( click ) : [EOL] if component in self . handlers : [EOL] self . handlers [ component ] ( game_state ) [EOL] return True [EOL] return False [EOL] [EOL] [EOL] class MapMenu : [EOL] def __init__ ( self , map_path = None ) : [EOL] self . position = Vector ( ) [EOL] self . map_path = map_path [EOL] if self . map_path is None : [EOL] self . map_path = get_maps_path ( ) [EOL] [EOL] self . button_size = Vector ( [number] , [number] ) [EOL] self . back_button = Button ( [string] , Vector ( ) , self . button_size ) [EOL] self . new_button = Button ( [string] , Vector ( ) , self . button_size ) [EOL] self . new_dialog = NewMapDialog ( ) [EOL] [EOL] self . maps = [ ] [EOL] [EOL] @ staticmethod def back_func ( game_state ) : [EOL] game_state . mode = GameMode . MAIN_MENU [EOL] [EOL] def new_func ( self , game_state ) : [EOL] self . new_dialog . open ( game_state ) [EOL] [EOL] @ staticmethod def load_func ( game_state , path ) : [EOL] map_path = os . path . join ( get_maps_path ( ) , path ) [EOL] game_state . tile_map . load ( game_state , map_path ) [EOL] if game_state . mode == GameMode . MAP_CHOICE_GAME : [EOL] game_state . mode = GameMode . GAME [EOL] elif game_state . mode == GameMode . MAP_CHOICE_EDITOR : [EOL] game_state . mode = GameMode . EDITOR [EOL] [EOL] def update ( self , game_state ) : [EOL] self . position = Vector ( game_state . window_size . x / [number] - [number] , game_state . window_size . y / [number] + [number] ) [EOL] [EOL] if game_state . mode == GameMode . MAP_CHOICE_EDITOR and self . new_dialog . visible : [EOL] self . new_dialog . update ( game_state ) [EOL] return [EOL] [EOL] if not self . maps : [EOL] self . refresh_maps ( self . map_path ) [EOL] [EOL] offset = [number] [EOL] if game_state . mode == GameMode . MAP_CHOICE_EDITOR : [EOL] self . new_button . position = Vector ( y = - self . button_size . y * len ( self . maps ) ) [EOL] offset = [number] [EOL] [EOL] self . back_button . position = Vector ( y = - self . button_size . y * ( len ( self . maps ) + offset ) ) [EOL] [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . position ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] if self . back_button . is_clicked ( click ) : [EOL] self . back_func ( game_state ) [EOL] return True [EOL] [EOL] if game_state . mode == GameMode . MAP_CHOICE_EDITOR and self . new_button . is_clicked ( click ) : [EOL] self . new_func ( game_state ) [EOL] return True [EOL] [EOL] for map_ in self . maps : [EOL] if map_ . is_clicked ( click ) : [EOL] self . load_func ( game_state , map_ . text ) [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def refresh_maps ( self , maps_path ) : [EOL] maps = maps_list ( maps_path ) [EOL] self . maps = [ ] [EOL] [EOL] for index , map_ in enumerate ( maps ) : [EOL] self . maps . append ( Button ( map_ , Vector ( y = - self . button_size . y * index ) , self . button_size ) ) [EOL] [EOL] def render ( self , game_state ) : [EOL] if game_state . mode == GameMode . MAP_CHOICE_EDITOR : [EOL] self . new_dialog . position = Vector ( [number] , self . position . y ) [EOL] self . new_dialog . render ( ) [EOL] self . new_button . render ( self . position ) [EOL] [EOL] self . back_button . render ( self . position ) [EOL] [EOL] for map_ in self . maps : [EOL] map_ . render ( self . position ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.user_interface.components.Button$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.user_interface.components.Button$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $tower_defense.user_interface.dialogs.NewMapDialog$ 0 0 0 0 0 0 0 0 $typing.List[components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Tuple , Any , Dict , List , Optional [EOL] import typing_extensions [EOL] import typing [EOL] import tower_defense [EOL] import builtins [EOL] import helper [EOL] import components [EOL] import os [EOL] from typing import List , Optional , Dict [EOL] [EOL] import pyglet [EOL] [EOL] from . . game_types import BuildingType [EOL] from . . graphics import Renderer [EOL] from . . helper import Vector , MouseClick , process_clicks , rect_contains_point , get_maps_path [EOL] from . components import Input , Label , Button , HighlightableLabel [EOL] [EOL] [EOL] class Dialog : [EOL] def __init__ ( self , visible ) : [EOL] self . position = Vector ( ) [EOL] self . visible = visible [EOL] [EOL] def open ( self , game_state ) : [EOL] self . visible = True [EOL] self . position . y = game_state . window_size . y - [number] [EOL] [EOL] def close ( self ) : [EOL] self . visible = False [EOL] [EOL] def render ( self ) : [EOL] pass [EOL] [EOL] def update ( self , game_state ) : [EOL] game_state . key_presses . up = False [EOL] game_state . key_presses . down = False [EOL] game_state . key_presses . left = False [EOL] game_state . key_presses . right = False [EOL] [EOL] [EOL] class NewMapDialog ( Dialog ) : [EOL] def __init__ ( self , visible = False ) : [EOL] super ( ) . __init__ ( visible ) [EOL] self . position = Vector ( [number] , [number] ) [EOL] text_width = [number] [EOL] text_height = [number] [EOL] self . labels = { [string] : Label ( [string] , Vector ( [number] , [number] ) , Vector ( text_width , text_height ) ) , [string] : Label ( [string] , Vector ( [number] , - text_height ) , Vector ( text_width , text_height ) ) , [string] : Label ( [string] , Vector ( [number] , - text_height * [number] ) , Vector ( text_width , text_height ) ) , } [EOL] self . inputs = { [string] : Input ( Vector ( text_width , [number] ) , Vector ( [number] , text_height ) , has_focus = True ) , [string] : Input ( Vector ( text_width , - text_height ) , Vector ( [number] , text_height ) ) , [string] : Input ( Vector ( text_width , - text_height * [number] ) , Vector ( [number] , text_height ) ) , } [EOL] self . buttons = { [string] : Button ( [string] , Vector ( [number] , - text_height * [number] ) , Vector ( text_width , text_height ) ) , [string] : Button ( [string] , Vector ( text_width , - text_height * [number] ) , Vector ( text_width , text_height ) ) } [EOL] [EOL] self . handlers = { [string] : self . submit_func , [string] : self . cancel_func } [EOL] [EOL] def open ( self , game_state ) : [EOL] super ( ) . open ( game_state ) [EOL] self . inputs [ [string] ] . update ( text = [string] ) [EOL] self . inputs [ [string] ] . update ( text = [string] ) [EOL] self . inputs [ [string] ] . update ( text = [string] ) [EOL] [EOL] def render ( self ) : [EOL] if self . visible : [EOL] for label in self . labels : [EOL] self . labels [ label ] . render ( self . position ) [EOL] for input_ in self . inputs : [EOL] self . inputs [ input_ ] . render ( self . position ) [EOL] for button in self . buttons : [EOL] self . buttons [ button ] . render ( self . position ) [EOL] [EOL] def submit_func ( self , game_state ) : [EOL] try : [EOL] new_width = int ( self . inputs [ [string] ] . text ) [EOL] new_height = int ( self . inputs [ [string] ] . text ) [EOL] except Exception as err : [EOL] print ( err ) [EOL] return [EOL] if self . inputs [ [string] ] . text : [EOL] file_name = os . path . join ( get_maps_path ( ) , self . inputs [ [string] ] . text + [string] ) [EOL] game_state . tile_map . new ( game_state , file_name , Vector ( new_width , new_height ) ) [EOL] self . visible = False [EOL] [EOL] def cancel_func ( self , _ ) : [EOL] self . visible = False [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] [EOL] for input_ in self . inputs : [EOL] self . inputs [ input_ ] . add_text ( game_state . key_presses ) [EOL] [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . position ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] for button in self . buttons : [EOL] if self . buttons [ button ] . is_clicked ( click ) : [EOL] self . handlers [ button ] ( game_state ) [EOL] return True [EOL] for input_ in self . inputs : [EOL] if self . inputs [ input_ ] . is_clicked ( click ) : [EOL] self . give_exclusive_focus ( input_ ) [EOL] return True [EOL] return False [EOL] [EOL] def give_exclusive_focus ( self , input_ ) : [EOL] for other_input in self . inputs : [EOL] if input_ == other_input : [EOL] continue [EOL] self . inputs [ other_input ] . has_focus = False [EOL] [EOL] [EOL] class LoadMapDialog ( Dialog ) : [EOL] def __init__ ( self , visible = False ) : [EOL] super ( ) . __init__ ( visible ) [EOL] self . maps = [ ] [EOL] self . cancel_button = None [EOL] [EOL] def refresh_maps ( self , maps_path ) : [EOL] self . maps = [ ] [EOL] current_index = [number] [EOL] height = [number] [EOL] for file in os . listdir ( maps_path ) : [EOL] if [string] in file : [EOL] text_component = Button ( file , Vector ( [number] , [number] - height * current_index ) , Vector ( [number] , height ) ) [EOL] self . maps . append ( text_component ) [EOL] current_index += [number] [EOL] return current_index , height [EOL] [EOL] def update_cancel_button ( self , current_index , height ) : [EOL] self . cancel_button = Button ( [string] , Vector ( [number] , [number] - height * current_index ) , Vector ( [number] , height ) ) [EOL] [EOL] def open ( self , game_state ) : [EOL] super ( ) . open ( game_state ) [EOL] current_index , height = self . refresh_maps ( get_maps_path ( ) ) [EOL] self . update_cancel_button ( current_index , height ) [EOL] [EOL] def update ( self , game_state ) : [EOL] super ( ) . update ( game_state ) [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . position ) [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] if self . cancel_button . is_clicked ( click ) : [EOL] self . visible = False [EOL] return True [EOL] for tile_map in self . maps : [EOL] if tile_map . is_clicked ( click ) : [EOL] file_name = os . path . join ( get_maps_path ( ) , tile_map . text ) [EOL] game_state . tile_map . load ( game_state , file_name ) [EOL] self . visible = False [EOL] return True [EOL] return False [EOL] [EOL] def render ( self ) : [EOL] if self . visible : [EOL] for tile_map in self . maps : [EOL] tile_map . render ( self . position ) [EOL] self . cancel_button . render ( self . position ) [EOL] [EOL] [EOL] class BuildingDialog ( Dialog ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( False ) [EOL] self . background_size = Vector ( [number] , [number] ) [EOL] self . button_size = Vector ( [number] , [number] ) [EOL] self . components = { [string] : Button ( [string] , Vector ( [number] , self . button_size . y ) , self . button_size ) , [string] : Button ( [string] , Vector ( [number] , self . button_size . y ) , self . button_size , visible = False ) } [EOL] self . handlers = { [string] : self . build_func , [string] : self . upgrade_func } [EOL] self . building_types = { BuildingType . LASER : HighlightableLabel ( [string] , Vector ( ) , Vector ( ) ) , BuildingType . HAMMER : HighlightableLabel ( [string] , Vector ( ) , Vector ( ) ) , } [EOL] [comment] [EOL] [EOL] def open ( self , game_state ) : [EOL] super ( ) . open ( game_state ) [EOL] self . position = Vector ( ) [EOL] [EOL] position = Vector ( [number] , game_state . window_size . y ) [EOL] for index , building_type in enumerate ( BuildingType ) : [EOL] highlight = index == [number] [EOL] self . building_types [ building_type ] = HighlightableLabel ( str ( building_type ) [ [number] : ] , position , self . button_size , is_highlighted = highlight ) [EOL] position -= Vector ( [number] , self . button_size . y ) [EOL] [EOL] def build_func ( self , game_state ) : [EOL] building_type = None [EOL] for building_type in self . building_types : [EOL] if self . building_types [ building_type ] . is_highlighted : [EOL] building_type = building_type [EOL] break [EOL] game_state . building_manager . spawn_building ( game_state , game_state . tile_map . highlighted_tile , building_type ) [EOL] [EOL] @ staticmethod def upgrade_func ( game_state ) : [EOL] pass [EOL] [EOL] def render_background ( self ) : [EOL] batch = pyglet . graphics . Batch ( ) [EOL] color = ( [number] , [number] , [number] ) [EOL] Renderer . colored_rectangle ( batch , color , self . position , self . background_size ) [EOL] batch . draw ( ) [EOL] [EOL] def render ( self ) : [EOL] if not self . visible : [EOL] return [EOL] [EOL] self . render_background ( ) [EOL] for component in self . components : [EOL] self . components [ component ] . render ( self . position ) [EOL] [EOL] for building_type in self . building_types : [EOL] self . building_types [ building_type ] . render ( self . position ) [EOL] [EOL] def update ( self , game_state ) : [EOL] if not self . visible : [EOL] return [EOL] [EOL] self . background_size = Vector ( self . background_size . x , game_state . window_size . y ) [EOL] self . position = Vector ( game_state . window_size . x - self . background_size . x , [number] ) [EOL] [EOL] if game_state . tile_map . highlighted_tile in game_state . building_manager . buildings : [EOL] self . components [ [string] ] . visible = False [EOL] self . components [ [string] ] . visible = True [EOL] else : [EOL] self . components [ [string] ] . visible = True [EOL] self . components [ [string] ] . visible = False [EOL] [EOL] process_clicks ( game_state , self . mouse_click_handler , False , self . position ) [EOL] [EOL] def highlight_building ( self , building_type ) : [EOL] for b_type in self . building_types : [EOL] self . building_types [ b_type ] . is_highlighted = b_type == building_type [EOL] [EOL] def mouse_click_handler ( self , game_state , click ) : [EOL] for component in self . components : [EOL] if self . components [ component ] . is_clicked ( click ) : [EOL] self . handlers [ component ] ( game_state ) [EOL] return True [EOL] [EOL] for building_type in self . building_types : [EOL] if self . building_types [ building_type ] . is_clicked ( click ) : [EOL] self . highlight_building ( building_type ) [EOL] return True [EOL] [EOL] return rect_contains_point ( click . position , Vector ( [number] , game_state . window_size . y ) , self . background_size ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Dict[builtins.str,components.Label]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,components.Input]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[components.Button]$ 0 0 0 0 0 0 $typing.Optional[components.Button]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $tower_defense.user_interface.components.Button$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[tower_defense.user_interface.components.Button]$ 0 0 0 $tower_defense.user_interface.components.Button$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,tower_defense.user_interface.components.Button]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tower_defense.helper.Vector$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helper.MouseClick$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0