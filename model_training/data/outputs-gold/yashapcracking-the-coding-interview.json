from typing import Any [EOL] import typing [EOL] from ch03 . stack import Stack [EOL] [EOL] [EOL] def main ( ) : [EOL] stack = Stack [ int ] ( [number] , [number] , [number] ) [EOL] stack . push ( [number] ) [EOL] for item in stack : [EOL] print ( item ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import ch01 . matrix as m [EOL] [EOL] [EOL] def test_rotate_matrix ( ) : [EOL] matrix = [ [ [number] ] , [ [number] ] , ] [EOL] rotated = [ [ [number] , [number] ] , ] [EOL] assert m . rotate_matrix ( matrix ) == rotated [EOL] [EOL] matrix = [ [ [number] , [number] , [number] ] , ] [EOL] rotated = [ [ [number] ] , [ [number] ] , [ [number] ] , ] [EOL] assert m . rotate_matrix ( matrix ) == rotated [EOL] [EOL] matrix = [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] [EOL] rotated = [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , ] [EOL] assert m . rotate_matrix ( matrix ) == rotated [EOL] [EOL] [EOL] def test_rotate_matrix_edge_cases ( ) : [EOL] assert m . rotate_matrix ( [ ] ) == [ ] [EOL] assert m . rotate_matrix ( [ [ ] ] ) == [ ] [comment] [EOL] assert m . rotate_matrix ( [ [ ] , [ ] ] ) == [ ] [comment] [EOL] [EOL] [EOL] def test_zero_matrix ( ) : [EOL] matrix = [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] [EOL] zeroed_matrix = [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] [EOL] m . zero_matrix ( matrix ) [EOL] assert matrix == zeroed_matrix [EOL] [EOL] [EOL] def test_zero_matrix_edge_cases ( ) : [EOL] [comment] [EOL] matrix = [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] m . zero_matrix ( matrix ) [EOL] assert matrix == [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] [EOL] [comment] [EOL] matrix = [ [ ] , [ ] ] [EOL] m . zero_matrix ( matrix ) [EOL] assert matrix == [ [ ] , [ ] ] [EOL] [EOL] [comment] [EOL] matrix = [ ] [EOL] m . zero_matrix ( matrix ) [EOL] assert matrix == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import ch01 [EOL] import ch01 . string as s [EOL] [EOL] [EOL] def test_all_unique_chars ( ) : [EOL] assert s . all_unique_chars ( [string] ) is True [EOL] assert s . all_unique_chars ( [string] ) is True [EOL] assert s . all_unique_chars ( [string] ) is True [EOL] assert s . all_unique_chars ( [string] ) is False [EOL] assert s . all_unique_chars ( [string] ) is False [EOL] [EOL] [EOL] def test_is_permutation ( ) : [EOL] assert s . is_permutation ( [string] , [string] ) is True [EOL] assert s . is_permutation ( [string] , [string] ) is False [EOL] assert s . is_permutation ( [string] , [string] ) is False [EOL] assert s . is_permutation ( [string] , [string] ) is True [EOL] assert s . is_permutation ( [string] , [string] ) is True [EOL] assert s . is_permutation ( [string] , [string] ) is False [EOL] [EOL] [EOL] def test_url_encode_spaces ( ) : [EOL] assert s . url_encode_spaces ( [string] ) == [string] [EOL] assert s . url_encode_spaces ( [string] ) == [string] [EOL] assert s . url_encode_spaces ( [string] ) == [string] [EOL] assert s . url_encode_spaces ( [string] ) == [string] [EOL] [EOL] [EOL] def test_is_palindrome_permutation ( ) : [EOL] assert s . is_palindrome_permutation ( [string] ) is True [EOL] assert s . is_palindrome_permutation ( [string] ) is True [EOL] assert s . is_palindrome_permutation ( [string] ) is True [EOL] assert s . is_palindrome_permutation ( [string] ) is False [EOL] assert s . is_palindrome_permutation ( [string] ) is True [comment] [EOL] assert s . is_palindrome_permutation ( [string] ) is True [EOL] assert s . is_palindrome_permutation ( [string] ) is True [EOL] [EOL] [EOL] def test_within_one_edit ( ) : [EOL] assert s . within_one_edit ( [string] , [string] ) is True [EOL] assert s . within_one_edit ( [string] , [string] ) is True [EOL] assert s . within_one_edit ( [string] , [string] ) is True [EOL] assert s . within_one_edit ( [string] , [string] ) is True [EOL] assert s . within_one_edit ( [string] , [string] ) is False [EOL] [EOL] [EOL] def test_compressed_string ( ) : [EOL] compressed = s . CompressedString ( [string] ) [EOL] assert str ( compressed ) == [string] [EOL] assert compressed . _compressed == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] compressed = s . CompressedString ( [string] ) [EOL] assert str ( compressed ) == [string] [EOL] assert compressed . _compressed == [ ] [EOL] [EOL] compressed = s . CompressedString ( [string] ) [EOL] assert str ( compressed ) == [string] [EOL] assert compressed . _compressed == [ ( [string] , [number] ) ] [EOL] [EOL] [EOL] def test_is_rotation ( ) : [EOL] assert s . is_rotation ( [string] , [string] ) is True [EOL] assert s . is_rotation ( [string] , [string] ) is False [EOL] assert s . is_rotation ( [string] , [string] ) is False [EOL] assert s . is_rotation ( [string] , [string] ) is True [EOL] assert s . is_rotation ( [string] , [string] ) is True [EOL] assert s . is_rotation ( [string] , [string] ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import TypeVar , Tuple , List , Optional [EOL] import ch01 [EOL] import typing [EOL] from typing import Generic , List , Optional , Tuple , TypeVar [EOL] [EOL] K = TypeVar ( [string] ) [EOL] V = TypeVar ( [string] ) [EOL] [EOL] [EOL] class HashMap ( Generic [ K , V ] ) : [EOL] def __init__ ( self , * entries ) : [EOL] num_buckets = int ( len ( entries ) / [number] ) [EOL] num_buckets = num_buckets if num_buckets >= [number] else [number] [EOL] self . _buckets = [ [ ] for _ in range ( num_buckets ) ] [EOL] self . _MAX_BUCKET_LENGTH = [number] [EOL] for key , value in entries : [EOL] self . put ( key , value ) [EOL] [EOL] def get ( self , key ) : [EOL] hash_code = hash ( key ) [EOL] num_buckets = len ( self . _buckets ) [EOL] bucket = self . _buckets [ hash_code % num_buckets ] [EOL] for k , v in bucket : [EOL] if k == key : [EOL] return v [EOL] return None [EOL] [EOL] def put ( self , key , value ) : [EOL] hash_code = hash ( key ) [EOL] num_buckets = len ( self . _buckets ) [EOL] bucket = self . _buckets [ hash_code % num_buckets ] [EOL] value_added = False [EOL] for idx , ( k , v ) in enumerate ( bucket ) : [EOL] if k == key : [EOL] bucket [ idx ] = ( key , value ) [EOL] value_added = True [EOL] break [EOL] if not value_added : [EOL] bucket . append ( ( key , value ) ) [EOL] if len ( bucket ) > self . _MAX_BUCKET_LENGTH : [EOL] self . _rebalance ( ) [EOL] [EOL] def _rebalance ( self ) : [EOL] prev_buckets = self . _buckets [EOL] self . _buckets = [ [ ] for _ in range ( len ( prev_buckets ) * [number] ) ] [EOL] for bucket in prev_buckets : [EOL] for key , value in bucket : [EOL] self . put ( key , value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal [EOL] import ch01 [EOL] import typing [EOL] import typing_extensions [EOL] from ch01 . hash_map import HashMap [EOL] [EOL] [EOL] def test_get ( ) : [EOL] hash_map = HashMap ( ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ) [EOL] assert hash_map . get ( [string] ) == [number] [EOL] assert hash_map . get ( [string] ) == [number] [EOL] assert hash_map . get ( [string] ) == [number] [EOL] [EOL] [EOL] def test_get_missing_key ( ) : [EOL] hash_map = HashMap ( ( [string] , [number] ) , ) [EOL] assert hash_map . get ( [string] ) is None [EOL] [EOL] [EOL] def test_empty_hash_map ( ) : [EOL] hash_map = HashMap ( ) [EOL] assert hash_map . get ( [string] ) is None [EOL] [EOL] [EOL] def test_put ( ) : [EOL] hash_map = HashMap ( ) [EOL] assert hash_map . get ( [string] ) is None [EOL] hash_map . put ( [string] , [number] ) [EOL] assert hash_map . get ( [string] ) == [number] [EOL] hash_map . put ( [string] , [number] ) [EOL] assert hash_map . get ( [string] ) == [number] [EOL] hash_map . put ( [string] , [number] ) [EOL] assert hash_map . get ( [string] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import ch02 [EOL] from ch02 . linked_list import LinkedList [EOL] import pytest [EOL] [EOL] [EOL] def test_iter ( ) : [EOL] ll_iter = LinkedList ( [number] , [number] , [number] ) . __iter__ ( ) [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] [EOL] [EOL] def test_to_list ( ) : [EOL] assert list ( LinkedList ( [number] , [number] , [number] ) ) == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_to_str ( ) : [EOL] assert str ( LinkedList ( ) ) == [string] [EOL] assert str ( LinkedList ( [number] ) ) == [string] [EOL] assert str ( LinkedList ( [number] , [number] ) ) == [string] [EOL] [EOL] [EOL] def test_len ( ) : [EOL] assert len ( LinkedList ( [number] , [number] , [number] , [number] ) ) == [number] [EOL] [EOL] [EOL] def test_eq ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] , [number] ) == LinkedList ( [number] , [number] , [number] , [number] ) [EOL] assert LinkedList ( ) == LinkedList ( ) [EOL] assert LinkedList ( ) != LinkedList ( [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] , [number] ) != LinkedList ( [number] , [number] , [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] , [number] ) != LinkedList ( [number] , [number] , [number] ) [EOL] assert LinkedList ( ) != [ ] [EOL] assert LinkedList ( ) is not None [EOL] [EOL] [EOL] def test_head ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] ) . head ( ) == [number] [EOL] assert LinkedList ( [number] ) . head ( ) == [number] [EOL] assert LinkedList ( ) . head ( ) is None [EOL] [EOL] [EOL] def test_tail ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] ) . tail ( ) == LinkedList ( [number] , [number] ) [EOL] assert LinkedList ( [number] ) . tail ( ) == LinkedList ( ) [EOL] assert LinkedList ( ) . tail ( ) is None [EOL] [EOL] [EOL] def test_is_empty ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] ) . is_empty ( ) is False [EOL] assert LinkedList ( [number] ) . is_empty ( ) is False [EOL] assert LinkedList ( ) . is_empty ( ) is True [EOL] [EOL] [EOL] def test_append ( ) : [EOL] ll = LinkedList ( ) [EOL] assert ll . append ( [number] ) == LinkedList ( [number] ) [EOL] assert ll . append ( [number] ) == LinkedList ( [number] , [number] ) [EOL] assert ll . append ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] ll . append ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_prepend ( ) : [EOL] ll = LinkedList ( ) [EOL] assert ll . prepend ( [number] ) == LinkedList ( [number] ) [EOL] assert ll . prepend ( [number] ) == LinkedList ( [number] , [number] ) [EOL] assert ll . prepend ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] ll . prepend ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_get ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) is None [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get ( [number] ) is None [EOL] assert LinkedList ( ) . get ( [number] ) is None [EOL] assert LinkedList ( ) . get ( [number] ) is None [EOL] assert LinkedList ( [number] ) . get ( [number] ) == [number] [EOL] assert LinkedList ( [number] ) . get ( [number] ) is None [EOL] [EOL] [EOL] def test_get_kth_to_last ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) is None [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . get_kth_to_last ( [number] ) is None [EOL] assert LinkedList ( ) . get_kth_to_last ( [number] ) is None [EOL] assert LinkedList ( ) . get_kth_to_last ( [number] ) is None [EOL] assert LinkedList ( [number] ) . get_kth_to_last ( [number] ) == [number] [EOL] assert LinkedList ( [number] ) . get_kth_to_last ( [number] ) is None [EOL] [EOL] [EOL] def test_delete ( ) : [EOL] ll = LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] , [number] , [number] , [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] , [number] , [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] , [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( [number] , [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( [number] ) [EOL] ll . delete ( [number] ) [EOL] assert ll == LinkedList ( ) [EOL] [EOL] [EOL] def test_delete_out_of_bounds ( ) : [EOL] with pytest . raises ( IndexError ) : [EOL] LinkedList ( ) . delete ( [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] LinkedList ( [number] ) . delete ( - [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] LinkedList ( ) . delete ( [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] LinkedList ( [number] ) . delete ( [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] LinkedList ( [number] , [number] ) . delete ( [number] ) [EOL] [EOL] [EOL] def test_distinct ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . distinct ( ) == LinkedList ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert LinkedList ( ) . distinct ( ) == LinkedList ( ) [EOL] assert LinkedList ( [number] ) . distinct ( ) == LinkedList ( [number] ) [EOL] assert LinkedList ( [number] , [number] ) . distinct ( ) == LinkedList ( [number] , [number] ) [EOL] assert LinkedList ( [number] , [number] ) . distinct ( ) == LinkedList ( [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . distinct ( ) == LinkedList ( [number] , [number] ) [EOL] [EOL] [EOL] def test_partition ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) . partition ( [number] ) == LinkedList ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] assert LinkedList [ int ] ( ) . partition ( [number] ) == LinkedList [ int ] ( ) [EOL] assert LinkedList ( [number] ) . partition ( [number] ) == LinkedList ( [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] ) . partition ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] ) . partition ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] ) . partition ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] assert LinkedList ( [number] , [number] , [number] ) . partition ( [number] ) == LinkedList ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_is_palindrome ( ) : [EOL] assert LinkedList ( ) . is_palindrome ( ) is True [EOL] assert LinkedList ( [number] ) . is_palindrome ( ) is True [EOL] assert LinkedList ( [number] , [number] ) . is_palindrome ( ) is True [EOL] assert LinkedList ( [number] , [number] ) . is_palindrome ( ) is False [EOL] assert LinkedList ( [number] , [number] , [number] ) . is_palindrome ( ) is True [EOL] assert LinkedList ( [number] , [number] , [number] , [number] ) . is_palindrome ( ) is True [EOL] assert LinkedList ( [number] , [number] , [number] , [number] , [number] ) . is_palindrome ( ) is True [EOL] [EOL] [EOL] def test_intersects_with ( ) : [EOL] assert LinkedList ( [number] , [number] , [number] ) . intersects_with ( LinkedList ( [number] , [number] ) ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] ) . intersects_with ( LinkedList ( [number] , [number] ) ) is None [EOL] assert LinkedList ( [number] , [number] , [number] ) . intersects_with ( LinkedList ( [number] ) ) == [number] [EOL] assert LinkedList ( [number] , [number] , [number] ) . intersects_with ( LinkedList ( ) ) is None [EOL] assert LinkedList ( ) . intersects_with ( LinkedList ( ) ) is None [EOL] assert LinkedList ( ) . intersects_with ( LinkedList ( [number] , [number] ) ) is None [EOL] [EOL] [EOL] def test_has_loop ( ) : [EOL] assert LinkedList ( ) . has_loop ( ) is False [EOL] assert LinkedList ( [number] ) . has_loop ( ) is False [EOL] assert LinkedList ( [number] , [number] , [number] ) . has_loop ( ) is False [EOL] [EOL] ll = LinkedList ( [number] , [number] , [number] ) [EOL] first_node = ll . _get_node ( [number] ) [EOL] last_node = ll . _get_node ( [number] ) [EOL] last_node . set_next ( first_node ) [EOL] assert ll . has_loop ( ) is True [EOL] [EOL] ll = LinkedList ( [number] , [number] , [number] , [number] , [number] ) [EOL] second_node = ll . _get_node ( [number] ) [EOL] second_last_node = ll . _get_node ( [number] ) [EOL] second_last_node . set_next ( second_node ) [EOL] assert ll . has_loop ( ) is True [EOL]	
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import ch03 [EOL] from ch03 . stack import Stack [EOL] import pytest [EOL] [EOL] [EOL] def test_iter ( ) : [EOL] ll_iter = Stack ( [number] , [number] , [number] ) . __iter__ ( ) [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] [EOL] [EOL] def test_to_list ( ) : [EOL] assert list ( Stack ( [number] , [number] , [number] ) ) == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_to_str ( ) : [EOL] assert str ( Stack ( ) ) == [string] [EOL] assert str ( Stack ( [number] ) ) == [string] [EOL] assert str ( Stack ( [number] , [number] ) ) == [string] [EOL] [EOL] [EOL] def test_len ( ) : [EOL] assert len ( Stack ( [number] , [number] , [number] , [number] ) ) == [number] [EOL] [EOL] [EOL] def test_eq ( ) : [EOL] assert Stack ( [number] , [number] , [number] , [number] ) == Stack ( [number] , [number] , [number] , [number] ) [EOL] assert Stack ( ) == Stack ( ) [EOL] assert Stack ( ) != Stack ( [number] ) [EOL] assert Stack ( [number] , [number] , [number] , [number] ) != Stack ( [number] , [number] , [number] ) [EOL] assert Stack ( [number] , [number] , [number] , [number] ) != Stack ( [number] , [number] , [number] ) [EOL] assert Stack ( ) != [ ] [EOL] assert Stack ( ) is not None [EOL] [EOL] [EOL] def test_is_empty ( ) : [EOL] assert Stack ( [number] , [number] , [number] ) . is_empty ( ) is False [EOL] assert Stack ( [number] ) . is_empty ( ) is False [EOL] assert Stack ( ) . is_empty ( ) is True [EOL] [EOL] [EOL] def test_push ( ) : [EOL] stack = Stack [ int ] ( ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack == Stack ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_pop ( ) : [EOL] stack = Stack [ int ] ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack . pop ( ) == [number] [EOL] assert stack . pop ( ) == [number] [EOL] assert stack . pop ( ) == [number] [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] [EOL] [EOL] def test_peek ( ) : [EOL] stack = Stack [ int ] ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . peek ( ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack . peek ( ) == [number] [EOL] assert stack . peek ( ) == [number] [EOL] [EOL] [EOL] def test_sorted ( ) : [EOL] assert Stack ( [number] , [number] , [number] , [number] ) . sorted ( ) == Stack ( [number] , [number] , [number] , [number] ) [EOL] assert Stack ( [number] , [number] , [number] , [number] , [number] ) . sorted ( ) == Stack ( [number] , [number] , [number] , [number] , [number] ) [EOL] assert Stack ( ) . sorted ( ) == Stack ( ) [EOL] assert Stack ( [number] ) . sorted ( ) == Stack ( [number] ) [EOL] assert Stack ( [number] , [number] ) . sorted ( ) == Stack ( [number] , [number] ) [EOL] assert Stack ( [number] , [number] ) . sorted ( ) == Stack ( [number] , [number] ) [EOL] [EOL] [EOL] def test_sorted_does_not_mutate ( ) : [EOL] stack = Stack ( [number] , [number] , [number] , [number] ) [EOL] stack . sorted ( ) [EOL] assert stack == Stack ( [number] , [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import ch03 [EOL] from ch03 . set_of_stacks import SetOfStacks [EOL] import pytest [EOL] [EOL] [EOL] def test_iter ( ) : [EOL] ll_iter = SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) . __iter__ ( ) [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] [EOL] [EOL] def test_to_list ( ) : [EOL] assert list ( SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) ) == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_to_str ( ) : [EOL] assert str ( SetOfStacks ( [number] ) ) == [string] [EOL] assert str ( SetOfStacks ( [number] , [ [number] ] ) ) == [string] [EOL] assert str ( SetOfStacks ( [number] , [ [number] , [number] ] ) ) == [string] [EOL] [EOL] [EOL] def test_len ( ) : [EOL] assert len ( SetOfStacks ( [number] , [ [number] , [number] , [number] , [number] ] ) ) == [number] [EOL] [EOL] [EOL] def test_eq ( ) : [EOL] assert SetOfStacks ( [number] , [ [number] , [number] , [number] , [number] ] ) == SetOfStacks ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] assert SetOfStacks ( [number] ) == SetOfStacks ( [number] ) [EOL] [comment] [EOL] assert SetOfStacks ( [number] ) != SetOfStacks ( [number] , [ [number] ] ) [EOL] assert SetOfStacks ( [number] , [ [number] , [number] , [number] , [number] ] ) != SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) [EOL] assert SetOfStacks ( [number] , [ [number] , [number] , [number] , [number] ] ) != SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) [EOL] assert SetOfStacks ( [number] ) != [ ] [EOL] assert SetOfStacks ( [number] ) is not None [EOL] [EOL] [EOL] def test_is_empty ( ) : [EOL] assert SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) . is_empty ( ) is False [EOL] assert SetOfStacks ( [number] , [ [number] ] ) . is_empty ( ) is False [EOL] assert SetOfStacks ( [number] ) . is_empty ( ) is True [EOL] [EOL] [EOL] def test_push ( ) : [EOL] stack = SetOfStacks [ int ] ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack == SetOfStacks ( [number] , [ [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_pop ( ) : [EOL] stack = SetOfStacks [ int ] ( [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack . pop ( ) == [number] [EOL] assert stack . pop ( ) == [number] [EOL] assert stack . pop ( ) == [number] [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . pop ( ) [EOL] [EOL] [EOL] def test_peek ( ) : [EOL] stack = SetOfStacks [ int ] ( [number] ) [EOL] with pytest . raises ( IndexError ) : [EOL] stack . peek ( ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] stack . push ( [number] ) [EOL] assert stack . peek ( ) == [number] [EOL] assert stack . peek ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import ch03 [EOL] from ch03 . queue import Queue [EOL] import pytest [EOL] [EOL] [EOL] def test_iter ( ) : [EOL] ll_iter = Queue ( [number] , [number] , [number] ) . __iter__ ( ) [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] assert ll_iter . __next__ ( ) == [number] [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] with pytest . raises ( StopIteration ) : [EOL] ll_iter . __next__ ( ) [EOL] [EOL] [EOL] def test_to_list ( ) : [EOL] assert list ( Queue ( [number] , [number] , [number] ) ) == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_to_str ( ) : [EOL] assert str ( Queue ( ) ) == [string] [EOL] assert str ( Queue ( [number] ) ) == [string] [EOL] assert str ( Queue ( [number] , [number] ) ) == [string] [EOL] [EOL] [EOL] def test_len ( ) : [EOL] assert len ( Queue ( [number] , [number] , [number] , [number] ) ) == [number] [EOL] [EOL] [EOL] def test_eq ( ) : [EOL] assert Queue ( [number] , [number] , [number] , [number] ) == Queue ( [number] , [number] , [number] , [number] ) [EOL] assert Queue ( ) == Queue ( ) [EOL] assert Queue ( ) != Queue ( [number] ) [EOL] assert Queue ( [number] , [number] , [number] , [number] ) != Queue ( [number] , [number] , [number] ) [EOL] assert Queue ( [number] , [number] , [number] , [number] ) != Queue ( [number] , [number] , [number] ) [EOL] assert Queue ( ) != [ ] [EOL] assert Queue ( ) is not None [EOL] [EOL] [EOL] def test_is_empty ( ) : [EOL] assert Queue ( [number] , [number] , [number] ) . is_empty ( ) is False [EOL] assert Queue ( [number] ) . is_empty ( ) is False [EOL] assert Queue ( ) . is_empty ( ) is True [EOL] [EOL] [EOL] def test_add ( ) : [EOL] queue = Queue [ int ] ( ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] assert queue == Queue ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_remove ( ) : [EOL] queue = Queue [ int ] ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] queue . remove ( ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] assert queue . remove ( ) == [number] [EOL] assert queue . remove ( ) == [number] [EOL] assert queue . remove ( ) == [number] [EOL] with pytest . raises ( IndexError ) : [EOL] queue . remove ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] queue . remove ( ) [EOL] [EOL] [EOL] def test_peek ( ) : [EOL] queue = Queue [ int ] ( ) [EOL] with pytest . raises ( IndexError ) : [EOL] queue . peek ( ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] queue . add ( [number] ) [EOL] assert queue . peek ( ) == [number] [EOL] assert queue . peek ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0