import unittest [EOL] [EOL] from my_project . module import add , even , hello [EOL] [EOL] [EOL] class TestModule ( unittest . TestCase ) : [EOL] [EOL] def test_add ( self ) : [EOL] self . assertEqual ( add ( [number] ) , [number] ) [EOL] [EOL] def test_even ( self ) : [EOL] self . assertEqual ( even ( range ( [number] ) ) , [ [number] , [number] , [number] ] ) [EOL] [EOL] def test_hello ( self ) : [EOL] self . assertEqual ( hello ( [string] ) , [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] [EOL] [EOL] def add ( i ) : [EOL] return i + [number] [EOL] [EOL] [EOL] def hello ( name ) : [EOL] return f" [string] { name } [string] " [EOL] [EOL] [EOL] def even ( li ) : [EOL] return [ i for i in li if i % [number] == [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from module import add , even , hello [EOL] [EOL] [EOL] def main ( ) : [EOL] li = [ i for i in range ( add ( [number] ) ) ] [EOL] print ( hello ( f" [string] { even ( li ) [ [number] ] }" ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import shutil [EOL] import subprocess [EOL] from pathlib import Path [EOL] [EOL] import PyInstaller . __main__ [EOL] [EOL] [EOL] def build ( ) : [EOL] PyInstaller . __main__ . run ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def rm_cache ( ) : [EOL] shutil . rmtree ( [string] , True ) [EOL] [EOL] [EOL] def rm_spec ( ) : [EOL] p = Path ( [string] ) [EOL] if p . is_file ( ) : [EOL] p . unlink ( ) [EOL] [EOL] [EOL] def clean_build ( ) : [EOL] build ( ) [EOL] rm_cache ( ) [EOL] rm_spec ( ) [EOL] [EOL] [EOL] def run_exe ( ) : [EOL] subprocess . run ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0