import builtins [EOL] from typing import Union , Literal , List , Any [EOL] import typing [EOL] import redis [EOL] import typing_extensions [EOL] import os [EOL] import redis [EOL] from rq import Worker , Queue , Connection [EOL] [EOL] [EOL] REDIS_HOST = os . environ . get ( [string] , [string] ) [EOL] REDIS_PORT = os . environ . get ( [string] , [number] ) [EOL] REDIS_DB = os . environ . get ( [string] , [number] ) [EOL] [EOL] listen = [ [string] , [string] , [string] ] [EOL] [EOL] redis_url = f" [string] { REDIS_HOST } [string] { REDIS_PORT } [string] { REDIS_DB }" [EOL] [EOL] conn = redis . from_url ( redis_url ) [EOL] [EOL] if __name__ == [string] : [EOL] with Connection ( conn ) : [EOL] worker = Worker ( map ( Queue , listen ) ) [EOL] worker . work ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $redis.client.Redis[builtins.bytes]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $redis.client.Redis[builtins.bytes]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] from invoke import task , call [EOL] [EOL] [EOL] @ task def clean ( c ) : [EOL] files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] print ( [string] ) [EOL] for f in files : [EOL] c . run ( [string] . format ( f ) ) [EOL] [EOL] [EOL] @ task def upload ( c , internal = False , external = False ) : [EOL] [docstring] [EOL] if internal : [EOL] c . run ( [string] ) [EOL] if external : [EOL] c . run ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] import logging [EOL] [EOL] [EOL] logging . basicConfig ( filename = [string] , format = [string] , datefmt = [string] , level = os . environ . get ( [string] , [string] ) , ) [EOL] [EOL] logging . getLogger ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , Dict , Literal , Any [EOL] import typing [EOL] import typing_extensions [EOL] import smonit [EOL] import os [EOL] import falcon [EOL] from apscheduler . schedulers . background import BackgroundScheduler [EOL] from apscheduler . executors . pool import ProcessPoolExecutor [EOL] [EOL] from smonit . views import Index [EOL] from smonit . execution import Run [EOL] [EOL] [EOL] run = Run ( ) [EOL] interval = os . environ . get ( [string] , [number] ) [EOL] [EOL] executors = { [string] : { [string] : [string] , [string] : [number] } , [string] : ProcessPoolExecutor ( max_workers = [number] ) , } [EOL] job_defaults = { [string] : False , [string] : [number] } [EOL] [EOL] [EOL] scheduler = BackgroundScheduler ( executors = executors , job_defaults = job_defaults ) [EOL] scheduler . add_job ( run . job_global , [string] , minutes = [number] , id = [string] ) [EOL] scheduler . add_job ( run . job_respond , [string] , minutes = [number] , id = [string] ) [EOL] scheduler . add_job ( run . job_info , [string] , minutes = int ( interval ) , id = [string] ) [EOL] scheduler . start ( ) [EOL] [EOL] app = falcon . API ( ) [EOL] app . add_route ( [string] , Index ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
class GeneralExceptions ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class SaltExceptions ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Literal [EOL] import typing [EOL] import typing_extensions [EOL] import smonit [EOL] import os [EOL] from rq import Queue [EOL] from redis import Redis [EOL] [EOL] from smonit . tasks import connected , pending , denied , rejected , respond_minion [EOL] from smonit . tasks import check_changes , respond_minion_db [EOL] from smonit . views import Index [EOL] from smonit . services . api import Salt [EOL] [EOL] [EOL] class Run ( object ) : [EOL] def __init__ ( self ) : [EOL] redis_host = os . environ . get ( [string] , [string] ) [EOL] redis_port = os . environ . get ( [string] , [number] ) [EOL] [EOL] self . redis_conn = Redis ( host = redis_host , port = redis_port ) [EOL] self . queue = Queue ( connection = self . redis_conn ) [EOL] self . salt = Salt ( ) [EOL] self . minions_list = self . salt . minions_accepted [EOL] [EOL] def job_global ( self ) : [EOL] self . queue . enqueue ( connected ) [EOL] self . queue . enqueue ( pending ) [EOL] self . queue . enqueue ( denied ) [EOL] self . queue . enqueue ( rejected ) [EOL] [EOL] def job_info ( self ) : [EOL] for minion in self . minions_list : [EOL] self . queue . enqueue ( check_changes , minion ) [EOL] [EOL] def job_respond ( self ) : [EOL] self . queue . enqueue ( respond_minion ) [EOL] [EOL] for minion in self . minions_list : [EOL] self . queue . enqueue ( respond_minion_db , minion ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Union[typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] [EOL] [EOL] def time ( time_format = None ) : [EOL] if not time_format : [EOL] time_format = [string] [EOL] [EOL] return datetime . utcnow ( ) . strftime ( time_format ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import json [EOL] import falcon [EOL] [EOL] [EOL] class Index ( object ) : [EOL] def __init__ ( self ) : [EOL] pass [EOL] [EOL] def on_get ( self , req , resp ) : [EOL] resp . status = falcon . HTTP_200 [EOL] resp . body = json . dumps ( { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] from smonit . utils import time [EOL] [EOL] [EOL] class Data ( object ) : [EOL] def __init__ ( self ) : [EOL] pass [EOL] [EOL] def default ( self , mesurement , value ) : [EOL] data = [ { [string] : mesurement , [string] : time ( ) , [string] : { [string] : value } } ] [EOL] [EOL] return data [EOL] [EOL] def with_tag ( self , table_name , tag , value ) : [EOL] data = [ { [string] : table_name , [string] : time ( ) , [string] : { [string] : tag } , [string] : { [string] : value } , } ] [EOL] [EOL] return data [EOL] [EOL] def responding ( self , mesurement , minion , response ) : [EOL] data = [ { [string] : mesurement , [string] : time ( ) , [string] : { [string] : minion } , [string] : { [string] : response } , } ] [EOL] [EOL] return data [EOL] [EOL] def state_changes ( self , minion , state , value ) : [EOL] data = [ { [string] : [string] , [string] : time ( ) , [string] : { [string] : minion } , [string] : { [string] : state , [string] : value } , } ] [EOL] [EOL] return data [EOL] [EOL] def failure_changes ( self , minion , state , value ) : [EOL] data = [ { [string] : [string] , [string] : time ( ) , [string] : { [string] : minion } , [string] : { [string] : state , [string] : value } , } ] [EOL] [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0
from typing import List , Any [EOL] import typing [EOL] import smonit [EOL] from os import path , mkdir [EOL] from datetime import datetime [EOL] from time import sleep [EOL] from tinydb import TinyDB , Query [EOL] [EOL] from smonit . services . api import Salt [EOL] from smonit . services . api import InfluxDb [EOL] from smonit . schema import Data [EOL] [EOL] [EOL] salt = Salt ( ) [EOL] influxdb = InfluxDb ( ) [EOL] schema = Data ( ) [EOL] [EOL] [EOL] def connected ( ) : [EOL] status = salt . minions_accepted [EOL] data = schema . default ( [string] , len ( status ) ) [EOL] [EOL] return influxdb . write_multiple_data ( data ) [EOL] [EOL] [EOL] def pending ( ) : [EOL] status = salt . minions_pending [EOL] data = schema . default ( [string] , len ( status ) ) [EOL] [EOL] return influxdb . write_multiple_data ( data ) [EOL] [EOL] [EOL] def denied ( ) : [EOL] status = salt . minions_denied [EOL] data = schema . default ( [string] , len ( status ) ) [EOL] [EOL] return influxdb . write_multiple_data ( data ) [EOL] [EOL] [EOL] def rejected ( ) : [EOL] status = salt . minions_rejected [EOL] data = schema . default ( [string] , len ( status ) ) [EOL] [EOL] return influxdb . write_multiple_data ( data ) [EOL] [EOL] [EOL] def respond_minion_db ( minion ) : [EOL] db_path = [string] [EOL] success_respond = salt . respond_minion ( minion ) [EOL] response = False [EOL] [EOL] if not path . isdir ( db_path ) : [EOL] mkdir ( db_path ) [EOL] [EOL] if success_respond : [EOL] response = True [EOL] [EOL] db = TinyDB ( f"{ db_path } [string] " ) [EOL] host_query = Query ( ) [EOL] check_minion = db . search ( host_query . host == minion ) [EOL] [EOL] if len ( check_minion ) < [number] : [EOL] db . insert ( { [string] : minion , [string] : response } ) [EOL] else : [EOL] db . update ( { [string] : response } , host_query . host == minion ) [EOL] [EOL] return [EOL] [EOL] [EOL] def respond_minion ( ) : [EOL] db_path = [string] [EOL] [EOL] if path . isfile ( db_path ) : [EOL] db = TinyDB ( db_path ) [EOL] response_query = Query ( ) [EOL] [EOL] check_response = db . search ( response_query . response == [number] ) [EOL] check_not_response = db . search ( response_query . response == [number] ) [EOL] [EOL] count_minions_response = [number] [EOL] count_minions_not_response = [number] [EOL] [EOL] if len ( check_response ) >= [number] : [EOL] count_minions_response = len ( check_response ) [EOL] if len ( check_not_response ) >= [number] : [EOL] count_minions_not_response = len ( check_not_response ) [EOL] [EOL] data_count_response = schema . default ( [string] , count_minions_response ) [EOL] influxdb . write_multiple_data ( data_count_response ) [EOL] [EOL] data_count_not_response = schema . default ( [string] , count_minions_not_response ) [EOL] influxdb . write_multiple_data ( data_count_not_response ) [EOL] [EOL] for data in db : [EOL] response = data . get ( [string] ) [EOL] host = data . get ( [string] ) [EOL] [EOL] data_response = schema . responding ( [string] , host , response ) [EOL] influxdb . write_multiple_data ( data_response ) [EOL] [EOL] return [EOL] [EOL] [EOL] def check_changes ( minion ) : [EOL] respond = salt . respond_minion ( minion ) [EOL] [EOL] if respond : [EOL] result = salt . changes ( minion ) [EOL] states_list = [ ] [EOL] states_changes_list = [ ] [EOL] failure_state_changes = [ ] [EOL] time_list = [ ] [EOL] [EOL] highstate_value = [number] [EOL] highstate_issue = [number] [EOL] [EOL] if len ( result ) > [number] : [EOL] if [string] not in result : [EOL] [comment] [EOL] highstate_value = [number] [EOL] [EOL] for identification_id , states in result . items ( ) : [EOL] for state in states : [EOL] if state not in states_list : [EOL] states_list . append ( state ) [EOL] [EOL] state_info = states . get ( state ) [EOL] stdout = state_info . get ( [string] ) [EOL] stderr = state_info . get ( [string] ) [EOL] [EOL] if stdout != [string] or stderr != [string] : [EOL] [comment] [EOL] states_changes_list . append ( state ) [EOL] time_list . append ( state_info . get ( [string] ) ) [EOL] if stderr != [string] : [EOL] [comment] [EOL] failure_state_changes . append ( state ) [EOL] [EOL] [comment] [EOL] data_number_states = schema . with_tag ( [string] , minion , len ( states_list ) ) [EOL] influxdb . write_multiple_data ( data_number_states ) [EOL] [EOL] [comment] [EOL] for state in states_list : [EOL] changes_number = states_changes_list . count ( state ) [EOL] data_number_states_changes = schema . state_changes ( minion , state , changes_number ) [EOL] influxdb . write_points ( data_number_states_changes ) [EOL] [comment] [EOL] failure_number = failure_state_changes . count ( state ) [EOL] data_number_failure_changes = schema . failure_changes ( minion , state , failure_number ) [EOL] influxdb . write_points ( data_number_failure_changes ) [EOL] sleep ( [number] ) [EOL] [EOL] if len ( failure_state_changes ) >= [number] : [EOL] highstate_issue = [number] [EOL] [EOL] [comment] [EOL] data_highstate_issue = schema . with_tag ( [string] , minion , highstate_issue ) [EOL] influxdb . write_multiple_data ( data_highstate_issue ) [EOL] [EOL] [comment] [EOL] data_total_failure_number = schema . with_tag ( [string] , minion , len ( failure_state_changes ) ) [EOL] influxdb . write_multiple_data ( data_total_failure_number ) [EOL] [EOL] [comment] [EOL] data_total_changes = schema . with_tag ( [string] , minion , len ( states_changes_list ) ) [EOL] influxdb . write_multiple_data ( data_total_changes ) [EOL] [EOL] [comment] [EOL] data_highstate_disabled = schema . with_tag ( [string] , minion , highstate_value ) [EOL] influxdb . write_multiple_data ( data_highstate_disabled ) [EOL] [EOL] [comment] [EOL] duration_time = schema . with_tag ( [string] , minion , sum ( time_list ) ) [EOL] influxdb . write_multiple_data ( duration_time ) [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.Salt$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0 0 0 0 $smonit.schema.Data$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $smonit.services.api.InfluxDb$ 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import logging [EOL] import os [EOL] import logging [EOL] [EOL] try : [EOL] import salt . config [EOL] import salt . client [EOL] import salt . utils [EOL] except ImportError : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] try : [EOL] from influxdb import InfluxDBClient [EOL] except ImportError : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] from salt . key import Key [EOL] from smonit . exceptions import SaltExceptions [EOL] from smonit . exceptions import GeneralExceptions [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Salt ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _opts = salt . config . master_config ( [string] ) [EOL] self . _lc = salt . client . LocalClient ( ) [EOL] self . keys = Key ( self . _opts ) [EOL] [EOL] @ property def get_minions ( self ) : [EOL] return self . keys . list_keys ( ) [EOL] [EOL] @ property def minions_accepted ( self ) : [EOL] [comment] [EOL] minions_list = [ ] [EOL] for minion in self . get_minions [ [string] ] : [EOL] if minion : [EOL] minions_list . append ( minion ) [EOL] [EOL] return minions_list [EOL] [EOL] @ property def minions_pending ( self ) : [EOL] [comment] [EOL] return [ minion for minion in self . get_minions [ [string] ] ] [EOL] [EOL] @ property def minions_rejected ( self ) : [EOL] [comment] [EOL] return [ minion for minion in self . get_minions [ [string] ] ] [EOL] [EOL] @ property def minions_denied ( self ) : [EOL] [comment] [EOL] return [ minion for minion in self . get_minions [ [string] ] ] [EOL] [EOL] def respond_minion ( self , minion ) : [EOL] [docstring] [EOL] check_respond = self . _lc . cmd ( minion , [string] , timeout = [number] ) [EOL] [EOL] for minion , res in check_respond . items ( ) : [EOL] if res is True : [EOL] return True [EOL] return [EOL] [EOL] def cmd ( self , minion , function , arg = [ ] , return_key = [string] ) : [EOL] [docstring] [EOL] ret = self . _lc . cmd ( minion , function , arg , full_return = True ) [EOL] [EOL] if not ret [ minion ] [ return_key ] : [EOL] log . error ( [string] ) [EOL] raise SaltExceptions ( ) [EOL] [EOL] return ret [EOL] [EOL] def states ( self , minion , return_key = [string] , number = True ) : [EOL] [docstring] [EOL] result = self . cmd ( minion , [string] ) [EOL] states_list = [ ] [EOL] [EOL] if result [ minion ] [ return_key ] : [EOL] for info in result [ minion ] [ return_key ] . values ( ) : [EOL] if info [ [string] ] not in states_list : [EOL] states_list . append ( info [ [string] ] ) [EOL] [EOL] if number : [EOL] states = len ( states_list ) [EOL] else : [EOL] states = states_list [EOL] [EOL] return states [EOL] [EOL] def _minion_info ( self , minion , return_key = [string] ) : [EOL] [docstring] [EOL] result = self . cmd ( minion , [string] ) [EOL] result = result [ minion ] [ return_key ] [EOL] [EOL] if result : [EOL] try : [EOL] values = result . values ( ) [EOL] except AttributeError : [EOL] log . critical ( f" [string] { minion } [string] " ) [EOL] values = None [EOL] [EOL] return values [EOL] [EOL] def changes ( self , minion ) : [EOL] [docstring] [EOL] values = self . _minion_info ( minion ) [EOL] changes_list = { } [EOL] [EOL] if values : [EOL] if [string] . capitalize ( ) not in values : [EOL] for info in values : [EOL] changes = info [ [string] ] [EOL] [EOL] if len ( changes ) >= [number] : [EOL] [comment] [EOL] if changes [ [string] ] != [string] or changes [ [string] ] != [string] : [EOL] [comment] [EOL] changes . update ( { [string] : info [ [string] ] } ) [EOL] [EOL] changes_list . update ( { info [ [string] ] : { info [ [string] ] : changes } } ) [EOL] else : [EOL] changes_list . update ( { [string] : [string] } ) [EOL] [EOL] return changes_list [EOL] [EOL] [EOL] class InfluxDb ( object ) : [EOL] def __init__ ( self ) : [EOL] self . host , self . port = os . environ . get ( [string] , [string] ) . split ( [string] ) [EOL] self . user = os . environ . get ( [string] , [string] ) [EOL] self . password = os . environ . get ( [string] , [string] ) [EOL] self . database = os . environ . get ( [string] , [string] ) [EOL] [EOL] @ property def _connection ( self ) : [EOL] return InfluxDBClient ( self . host , self . port , self . user , self . password , self . database ) [EOL] [EOL] @ property def _ping ( self ) : [EOL] import urllib3 [EOL] import requests [EOL] [EOL] status = None [EOL] try : [EOL] self . _connection . ping ( ) [EOL] status = True [EOL] except ( urllib3 . exceptions . NewConnectionError , urllib3 . exceptions . MaxRetryError , requests . exceptions . ConnectionError , ) : [EOL] log . critical ( f" [string] " ) [EOL] return status [EOL] [EOL] @ property def list_databases ( self ) : [EOL] if self . _ping : [EOL] return self . _connection . get_list_database ( ) [EOL] [EOL] def create_database ( self , database = None ) : [EOL] _db = self . database [EOL] [EOL] if self . _ping : [EOL] if database : [EOL] _db = database [EOL] return self . _connection . create_database ( _db ) [EOL] [EOL] def write_multiple_data ( self , data ) : [EOL] if self . _ping : [EOL] return self . _connection . write_points ( data ) [EOL] [EOL] def query ( self , sql ) : [EOL] if self . _ping : [EOL] return self . _connection . query ( sql ) [EOL] [EOL] def drop_database ( self , database ) : [EOL] if self . _ping : [EOL] return self . _connection . drop_database ( database ) [EOL] [EOL] def write_points ( self , data ) : [EOL] if self . _ping : [EOL] return self . _connection . write_points ( data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0