from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] conn = await aioredis . create_connection ( [string] , encoding = [string] ) [EOL] [EOL] ok = await conn . execute ( [string] , [string] , [string] ) [EOL] assert ok == [string] , ok [EOL] [EOL] str_value = await conn . execute ( [string] , [string] ) [EOL] raw_value = await conn . execute ( [string] , [string] , encoding = None ) [EOL] assert str_value == [string] [EOL] assert raw_value == [string] [EOL] [EOL] print ( [string] , str_value ) [EOL] print ( [string] , raw_value ) [EOL] [EOL] [comment] [EOL] conn . close ( ) [EOL] await conn . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def pubsub ( ) : [EOL] sub = await aioredis . create_redis ( [string] ) [EOL] [EOL] ch1 , ch2 = await sub . subscribe ( [string] , [string] ) [EOL] assert isinstance ( ch1 , aioredis . Channel ) [EOL] assert isinstance ( ch2 , aioredis . Channel ) [EOL] [EOL] async def async_reader ( channel ) : [EOL] while await channel . wait_message ( ) : [EOL] msg = await channel . get ( encoding = [string] ) [EOL] [comment] [EOL] print ( [string] . format ( channel . name , msg ) ) [EOL] [EOL] tsk1 = asyncio . ensure_future ( async_reader ( ch1 ) ) [EOL] [EOL] [comment] [EOL] [EOL] async def async_reader2 ( channel ) : [EOL] while True : [EOL] msg = await channel . get ( encoding = [string] ) [EOL] if msg is None : [EOL] break [EOL] [comment] [EOL] print ( [string] . format ( channel . name , msg ) ) [EOL] [EOL] tsk2 = asyncio . ensure_future ( async_reader2 ( ch2 ) ) [EOL] [EOL] [comment] [EOL] pub = await aioredis . create_redis ( [string] ) [EOL] while True : [EOL] channels = await pub . pubsub_channels ( [string] ) [EOL] if len ( channels ) == [number] : [EOL] break [EOL] [EOL] for msg in ( [string] , [string] , [string] ) : [EOL] for ch in ( [string] , [string] ) : [EOL] await pub . publish ( ch , msg ) [EOL] await asyncio . sleep ( [number] ) [EOL] pub . close ( ) [EOL] sub . close ( ) [EOL] await pub . wait_closed ( ) [EOL] await sub . wait_closed ( ) [EOL] await asyncio . gather ( tsk1 , tsk2 ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import os [EOL] if [string] not in os . environ . get ( [string] , [string] ) : [EOL] asyncio . run ( pubsub ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] STOPWORD = [string] [EOL] [EOL] [EOL] async def pubsub ( ) : [EOL] pool = await aioredis . create_pool ( [string] , minsize = [number] , maxsize = [number] ) [EOL] [EOL] async def reader ( channel ) : [EOL] while ( await channel . wait_message ( ) ) : [EOL] msg = await channel . get ( encoding = [string] ) [EOL] [comment] [EOL] print ( [string] . format ( channel . name , msg ) ) [EOL] [EOL] if msg == STOPWORD : [EOL] return [EOL] [EOL] with await pool as conn : [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] channel = conn . pubsub_channels [ [string] ] [EOL] await reader ( channel ) [comment] [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] conn = await pool . acquire ( ) [EOL] try : [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] channel = conn . pubsub_channels [ [string] ] [EOL] await reader ( channel ) [comment] [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] finally : [EOL] pool . release ( conn ) [EOL] [EOL] pool . close ( ) [EOL] await pool . wait_closed ( ) [comment] [EOL] [EOL] [EOL] def main ( ) : [EOL] loop = asyncio . get_event_loop ( ) [EOL] tsk = asyncio . ensure_future ( pubsub ( ) , loop = loop ) [EOL] [EOL] async def publish ( ) : [EOL] pub = await aioredis . create_redis ( [string] ) [EOL] while not tsk . done ( ) : [EOL] [comment] [EOL] while True : [EOL] subs = await pub . pubsub_numsub ( [string] ) [EOL] if subs [ [string] ] == [number] : [EOL] break [EOL] await asyncio . sleep ( [number] , loop = loop ) [EOL] [comment] [EOL] for msg in [ [string] , [string] , [string] ] : [EOL] await pub . publish ( [string] , msg ) [EOL] [comment] [EOL] await pub . publish ( [string] , STOPWORD ) [EOL] pub . close ( ) [EOL] await pub . wait_closed ( ) [EOL] [EOL] loop . run_until_complete ( asyncio . gather ( publish ( ) , tsk , loop = loop ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import os [EOL] if [string] not in os . environ . get ( [string] , [string] ) : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] [docstring] [EOL] redis = await aioredis . create_redis ( [string] ) [EOL] [EOL] await redis . mset ( [string] , [string] , [string] , [string] ) [EOL] cur = [string] [comment] [EOL] while cur : [EOL] cur , keys = await redis . scan ( cur , match = [string] ) [EOL] print ( [string] , keys ) [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import os [EOL] if [string] not in os . environ . get ( [string] , [string] ) : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] [comment] [EOL] redis = await aioredis . create_redis ( [string] ) [EOL] await redis . set ( [string] , [string] ) [EOL] val = await redis . get ( [string] ) [EOL] print ( val ) [EOL] [EOL] [comment] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] async def redis_pool ( ) : [EOL] [comment] [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] await redis . set ( [string] , [string] ) [EOL] val = await redis . get ( [string] ) [EOL] print ( val ) [EOL] [EOL] [comment] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL] asyncio . run ( redis_pool ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] pool = await aioredis . create_pool ( [string] , minsize = [number] , maxsize = [number] ) [EOL] with await pool as conn : [comment] [EOL] await conn . execute ( [string] , [string] , [string] ) [EOL] val = await conn . execute ( [string] , [string] ) [EOL] print ( [string] , val ) [EOL] pool . close ( ) [EOL] await pool . wait_closed ( ) [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] sentinel_client = await aioredis . create_sentinel ( [ ( [string] , [number] ) ] ) [EOL] [EOL] master_redis = sentinel_client . master_for ( [string] ) [EOL] info = await master_redis . role ( ) [EOL] print ( [string] , info ) [EOL] assert info . role == [string] [EOL] [EOL] sentinel_client . close ( ) [EOL] await sentinel_client . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis ( [string] ) [EOL] [EOL] [comment] [EOL] async def wait_each_command ( ) : [EOL] val = await redis . get ( [string] ) [comment] [EOL] cnt = await redis . incr ( [string] ) [comment] [EOL] return val , cnt [EOL] [EOL] [comment] [EOL] async def pipelined ( ) : [EOL] fut1 = redis . get ( [string] ) [comment] [EOL] fut2 = redis . incr ( [string] ) [comment] [EOL] [comment] [EOL] val , cnt = await asyncio . gather ( fut1 , fut2 ) [EOL] return val , cnt [EOL] [EOL] [comment] [EOL] async def explicit_pipeline ( ) : [EOL] pipe = redis . pipeline ( ) [EOL] fut1 = pipe . get ( [string] ) [EOL] fut2 = pipe . incr ( [string] ) [EOL] result = await pipe . execute ( ) [EOL] val , cnt = await asyncio . gather ( fut1 , fut2 ) [EOL] assert result == [ val , cnt ] [EOL] return val , cnt [EOL] [EOL] res = await wait_each_command ( ) [EOL] print ( res ) [EOL] res = await pipelined ( ) [EOL] print ( res ) [EOL] res = await explicit_pipeline ( ) [EOL] print ( res ) [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def reader ( ch ) : [EOL] while ( await ch . wait_message ( ) ) : [EOL] msg = await ch . get_json ( ) [EOL] print ( [string] , msg ) [EOL] [EOL] [EOL] async def main ( ) : [EOL] pub = await aioredis . create_redis ( [string] ) [EOL] sub = await aioredis . create_redis ( [string] ) [EOL] res = await sub . subscribe ( [string] ) [EOL] ch1 = res [ [number] ] [EOL] [EOL] tsk = asyncio . ensure_future ( reader ( ch1 ) ) [EOL] [EOL] res = await pub . publish_json ( [string] , [ [string] , [string] ] ) [EOL] assert res == [number] [EOL] [EOL] await sub . unsubscribe ( [string] ) [EOL] await tsk [EOL] sub . close ( ) [EOL] pub . close ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis ( [string] ) [EOL] [EOL] async def transaction ( ) : [EOL] tr = redis . multi_exec ( ) [EOL] future1 = tr . set ( [string] , [string] ) [EOL] future2 = tr . set ( [string] , [string] ) [EOL] result = await tr . execute ( ) [EOL] assert result == await asyncio . gather ( future1 , future2 ) [EOL] return result [EOL] [EOL] await transaction ( ) [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis ( [string] ) [EOL] await redis . delete ( [string] , [string] ) [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . incr ( [string] ) [EOL] fut2 = tr . incr ( [string] ) [EOL] res = await tr . execute ( ) [EOL] res2 = await asyncio . gather ( fut1 , fut2 ) [EOL] print ( res ) [EOL] assert res == res2 [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] [EOL] await redis . hmset_dict ( [string] , key1 = [string] , key2 = [string] , key3 = [number] ) [EOL] [EOL] result = await redis . hgetall ( [string] , encoding = [string] ) [EOL] assert result == { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] await redis . set ( [string] , [string] ) [EOL] value = await redis . get ( [string] , encoding = [string] ) [EOL] print ( value ) [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] await redis . set ( [string] , [string] ) [EOL] bin_value = await redis . get ( [string] ) [EOL] assert bin_value == [string] [EOL] [EOL] str_value = await redis . get ( [string] , encoding = [string] ) [EOL] assert str_value == [string] [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] [EOL] ch1 , ch2 = await redis . subscribe ( [string] , [string] ) [EOL] assert isinstance ( ch1 , aioredis . Channel ) [EOL] assert isinstance ( ch2 , aioredis . Channel ) [EOL] [EOL] async def reader ( channel ) : [EOL] async for message in channel . iter ( ) : [EOL] print ( [string] , message ) [EOL] asyncio . get_running_loop ( ) . create_task ( reader ( ch1 ) ) [EOL] asyncio . get_running_loop ( ) . create_task ( reader ( ch2 ) ) [EOL] [EOL] await redis . publish ( [string] , [string] ) [EOL] await redis . publish ( [string] , [string] ) [EOL] [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] redis = await aioredis . create_redis_pool ( [string] ) [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] tr . set ( [string] , [string] ) [EOL] tr . set ( [string] , [string] ) [EOL] ok1 , ok2 = await tr . execute ( ) [EOL] assert ok1 [EOL] assert ok2 [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import aioredis [EOL] [EOL] [EOL] async def main ( ) : [EOL] sentinel = await aioredis . create_sentinel ( [ [string] , [string] ] ) [EOL] redis = sentinel . master_for ( [string] ) [EOL] [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok [EOL] val = await redis . get ( [string] , encoding = [string] ) [EOL] assert val == [string] [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Dict , List , Any [EOL] import typing [EOL] import sys [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sys . path . insert ( [number] , os . path . join ( os . path . abspath ( [string] ) , [string] ) ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] spelling_lang = [string] [EOL] spelling_word_list_filename = [string] [EOL] spelling_ignore_pypi_package_names = False [EOL] spelling_ignore_wiki_words = False [EOL] spelling_ignore_acronyms = False [EOL] spelling_ignore_python_builtins = False [EOL] spelling_ignore_importable_modules = False [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] on_rtd = os . environ . get ( [string] , None ) == [string] [EOL] [EOL] if not on_rtd : [comment] [EOL] try : [EOL] import sphinx_rtd_theme [EOL] except ImportError : [EOL] pass [EOL] else : [EOL] html_theme = [string] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] [EOL] html_context = { [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( [string] , [string] , [string] , [ [string] ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : None } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0
from typing import Set , Union , Tuple , Any , Literal , List [EOL] import typing [EOL] import typing_extensions [EOL] import itertools [EOL] [EOL] import pytest [EOL] [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_bzpopmax ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] [EOL] pairs = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] await redis . zadd ( key1 , * pairs [ [number] ] ) [EOL] await redis . zadd ( key2 , * itertools . chain . from_iterable ( pairs ) ) [EOL] [EOL] res = await redis . bzpopmax ( key1 , timeout = [number] ) [EOL] assert res == [ key1 , [string] , [string] ] [EOL] res = await redis . bzpopmax ( key1 , key2 , timeout = [number] ) [EOL] assert res == [ key2 , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bzpopmax ( key1 , timeout = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . bzpopmax ( key2 , timeout = - [number] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_bzpopmin ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] [EOL] pairs = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] await redis . zadd ( key1 , * pairs [ [number] ] ) [EOL] await redis . zadd ( key2 , * itertools . chain . from_iterable ( pairs ) ) [EOL] [EOL] res = await redis . bzpopmin ( key1 , timeout = [number] ) [EOL] assert res == [ key1 , [string] , [string] ] [EOL] res = await redis . bzpopmin ( key1 , key2 , timeout = [number] ) [EOL] assert res == [ key2 , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bzpopmin ( key1 , timeout = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . bzpopmin ( key2 , timeout = - [number] ) [EOL] [EOL] [EOL] async def test_zadd ( redis ) : [EOL] key = [string] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zadd ( key , [number] , [string] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrange ( key , [number] , - [number] , withscores = False ) [EOL] assert res == [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zadd ( None , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zadd ( key , [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zadd ( key , [number] , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zadd ( key , [number] , [string] , [string] , [number] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] , ) async def test_zadd_options ( redis ) : [EOL] key = [string] [EOL] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zadd ( key , [number] , [string] , [number] , [string] , exist = redis . ZSET_IF_EXIST , ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zscore ( key , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zscore ( key , [string] ) [EOL] assert res is None [EOL] [EOL] res = await redis . zadd ( key , [number] , [string] , [number] , [string] , exist = redis . ZSET_IF_NOT_EXIST , ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zscore ( key , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zscore ( key , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrange ( key , [number] , - [number] , withscores = False ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . zadd ( key , [number] , [string] , changed = True ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zadd ( key , [number] , [string] , incr = True ) [EOL] assert int ( res ) == [number] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . zadd ( key , [number] , [string] , [number] , [string] , incr = True ) [EOL] [EOL] [EOL] async def test_zcard ( redis ) : [EOL] key = [string] [EOL] pairs = [ [number] , [string] , [number] , [string] , [number] , [string] ] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] res = await redis . zcard ( key ) [EOL] assert res == [number] [EOL] res = await redis . zadd ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zcard ( key ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zcard ( None ) [EOL] [EOL] [EOL] async def test_zcount ( redis ) : [EOL] key = [string] [EOL] pairs = [ [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] ] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res_zcount = await redis . zcount ( key ) [EOL] res_zcard = await redis . zcard ( key ) [EOL] assert res_zcount == res_zcard [EOL] [EOL] res = await redis . zcount ( key , [number] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , [number] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , [number] , [number] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zcount ( key , [number] , [number] , exclude = redis . ZSET_EXCLUDE_BOTH ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , [number] , [number] , exclude = redis . ZSET_EXCLUDE_MIN ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , [number] , [number] , exclude = redis . ZSET_EXCLUDE_MAX ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , [number] , exclude = redis . ZSET_EXCLUDE_MAX ) [EOL] assert res == [number] [EOL] res = await redis . zcount ( key , float ( [string] ) , [number] , exclude = redis . ZSET_EXCLUDE_MIN ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zcount ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zcount ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zcount ( key , [number] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . zcount ( key , [number] , [number] ) [EOL] [EOL] [EOL] async def test_zincrby ( redis ) : [EOL] key = [string] [EOL] pairs = [ [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] ] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] res = await redis . zincrby ( key , [number] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zincrby ( key , - [number] , [string] ) [EOL] assert res == - [number] [EOL] res = await redis . zincrby ( key , [number] , [string] ) [EOL] assert abs ( res - [number] ) <= [number] [EOL] res = await redis . zincrby ( key , - [number] , [string] ) [EOL] assert abs ( res - - [number] ) <= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zincrby ( None , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zincrby ( key , [string] , [number] ) [EOL] [EOL] [EOL] async def test_zinterstore ( redis ) : [EOL] zset1 = [ [number] , [string] , [number] , [string] ] [EOL] zset2 = [ [number] , [string] , [number] , [string] ] [EOL] [EOL] await redis . zadd ( [string] , * zset1 ) [EOL] await redis . zadd ( [string] , * zset2 ) [EOL] [EOL] res = await redis . zinterstore ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zinterstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_SUM ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zinterstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_MIN ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zinterstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_MAX ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) ] [EOL] [EOL] [comment] [EOL] [EOL] with pytest . raises ( AssertionError ) : [EOL] await redis . zinterstore ( [string] , [string] , [string] , with_weights = True ) [EOL] [EOL] res = await redis . zinterstore ( [string] , ( [string] , [number] ) , ( [string] , [number] ) , with_weights = True ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zlexcount ( redis ) : [EOL] key = [string] [EOL] pairs = [ [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] , [number] , [string] ] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] res = await redis . zlexcount ( key ) [EOL] assert res == [number] [EOL] res = await redis . zlexcount ( key , min = [string] , max = [string] ) [EOL] assert res == [number] [EOL] res = await redis . zlexcount ( key , min = [string] , max = [string] , include_min = False , include_max = False ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zlexcount ( None , [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zlexcount ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zlexcount ( key , [string] , [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , [string] ] ) async def test_zrange ( redis , encoding ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] if encoding : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] rev_pairs = list ( zip ( members , scores ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrange ( key , [number] , - [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [EOL] res = await redis . zrange ( key , [number] , - [number] , withscores = True , encoding = encoding ) [EOL] assert res == rev_pairs [EOL] res = await redis . zrange ( key , - [number] , - [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ - [number] : ] [EOL] res = await redis . zrange ( key , [number] , [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ [number] : [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrange ( None , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrange ( key , [string] , - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrange ( key , [number] , [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zrangebylex ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] ] * [number] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] strings = [ x . decode ( [string] ) for x in members ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] res = await redis . zrangebylex ( key ) [EOL] assert res == members [EOL] res = await redis . zrangebylex ( key , encoding = [string] ) [EOL] assert res == strings [EOL] res = await redis . zrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == members [ : - [number] ] [EOL] res = await redis . zrangebylex ( key , min = [string] , max = [string] , include_min = False , include_max = False ) [EOL] assert res == members [ [number] : - [number] ] [EOL] res = await redis . zrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == [ ] [EOL] res = await redis . zrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == [ ] [EOL] res = await redis . zrangebylex ( key , offset = [number] , count = [number] ) [EOL] assert res == members [ [number] : [number] ] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( None , [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [string] , [string] , offset = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [string] , [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [string] , [string] , offset = [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebylex ( key , [string] , [string] , offset = [number] , count = [string] ) [EOL] [EOL] [EOL] async def test_zrank ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] for i , m in enumerate ( members ) : [EOL] res = await redis . zrank ( key , m ) [EOL] assert res == i [EOL] [EOL] res = await redis . zrank ( key , [string] ) [EOL] assert res is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrank ( None , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , [string] ] ) async def test_zrangebyscore ( redis , encoding ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] if encoding : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] rev_pairs = list ( zip ( members , scores ) ) [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrangebyscore ( key , [number] , [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [EOL] res = await redis . zrangebyscore ( key , [number] , [number] , withscores = False , exclude = redis . ZSET_EXCLUDE_BOTH , encoding = encoding ) [EOL] assert res == members [ [number] : - [number] ] [EOL] res = await redis . zrangebyscore ( key , [number] , [number] , withscores = True , encoding = encoding ) [EOL] assert res == rev_pairs [EOL] [EOL] res = await redis . zrangebyscore ( key , [number] , [number] , offset = [number] , count = [number] , encoding = encoding ) [EOL] assert res == members [ [number] : [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [number] , [number] , offset = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [number] , [number] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [number] , [number] , offset = [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrangebyscore ( key , [number] , [number] , offset = [number] , count = [string] ) [EOL] [EOL] [EOL] async def test_zrem ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrem ( key , [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == members [ [number] : ] [EOL] [EOL] res = await redis . zrem ( key , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrem ( [string] + key , [string] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrem ( None , [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zremrangebylex ( redis ) : [EOL] key = [string] [EOL] members = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] scores = [ [number] ] * len ( members ) [EOL] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zremrangebylex ( key , [string] , [string] , include_max = True , include_min = True ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] res = await redis . zremrangebylex ( key , [string] , [string] , include_max = False , include_min = False ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] res = await redis . zremrangebylex ( key ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == [ ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebylex ( None , [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebylex ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebylex ( key , [string] , [number] ) [EOL] [EOL] [EOL] async def test_zremrangebyrank ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zremrangebyrank ( key , [number] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == members [ [number] : ] [EOL] [EOL] res = await redis . zremrangebyrank ( key , - [number] , - [number] ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == members [ [number] : - [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyrank ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyrank ( key , [string] , - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyrank ( key , [number] , [string] ) [EOL] [EOL] [EOL] async def test_zremrangebyscore ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zremrangebyscore ( key , [number] , [number] , exclude = redis . ZSET_EXCLUDE_MIN ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == members [ : - [number] ] [EOL] [EOL] res = await redis . zremrangebyscore ( key , [number] , [number] , exclude = redis . ZSET_EXCLUDE_BOTH ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] res = await redis . zremrangebyscore ( key ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( key , [number] , - [number] ) [EOL] assert res == [ ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyscore ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyscore ( key , [string] , - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zremrangebyscore ( key , [number] , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , [string] ] ) async def test_zrevrange ( redis , encoding ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] if encoding : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] rev_pairs = list ( zip ( members , scores ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrevrange ( key , [number] , - [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ : : - [number] ] [EOL] res = await redis . zrevrange ( key , [number] , - [number] , withscores = True , encoding = encoding ) [EOL] assert res == rev_pairs [ : : - [number] ] [EOL] res = await redis . zrevrange ( key , - [number] , - [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ [number] : : - [number] ] [EOL] res = await redis . zrevrange ( key , [number] , [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ [number] : [number] : - [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrange ( None , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrange ( key , [string] , - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrange ( key , [number] , [string] ) [EOL] [EOL] [EOL] async def test_zrevrank ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] for i , m in enumerate ( members ) : [EOL] res = await redis . zrevrank ( key , m ) [EOL] assert res == len ( members ) - i - [number] [EOL] [EOL] res = await redis . zrevrank ( key , [string] ) [EOL] assert res is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrank ( None , [string] ) [EOL] [EOL] [EOL] async def test_zscore ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] for s , m in zip ( scores , members ) : [EOL] res = await redis . zscore ( key , m ) [EOL] assert res == s [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zscore ( None , [string] ) [EOL] [comment] [EOL] res = await redis . zscore ( key , [string] ) [EOL] assert res is None [EOL] [EOL] [EOL] async def test_zunionstore ( redis ) : [EOL] zset1 = [ [number] , [string] , [number] , [string] ] [EOL] zset2 = [ [number] , [string] , [number] , [string] ] [EOL] [EOL] await redis . zadd ( [string] , * zset1 ) [EOL] await redis . zadd ( [string] , * zset2 ) [EOL] [EOL] res = await redis . zunionstore ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zunionstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_SUM ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zunionstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_MIN ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] res = await redis . zunionstore ( [string] , [string] , [string] , aggregate = redis . ZSET_AGGREGATE_MAX ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] [comment] [EOL] [EOL] with pytest . raises ( AssertionError ) : [EOL] await redis . zunionstore ( [string] , [string] , [string] , with_weights = True ) [EOL] [EOL] res = await redis . zunionstore ( [string] , ( [string] , [number] ) , ( [string] , [number] ) , with_weights = True ) [EOL] assert res == [number] [EOL] res = await redis . zrange ( [string] , withscores = True ) [EOL] assert res == [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , [string] ] ) async def test_zrevrangebyscore ( redis , encoding ) : [EOL] key = [string] [EOL] scores = [ [number] , [number] , [number] , [number] , [number] ] [EOL] if encoding : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] rev_pairs = list ( zip ( members [ : : - [number] ] , scores [ : : - [number] ] ) ) [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . zrevrangebyscore ( key , [number] , [number] , withscores = False , encoding = encoding ) [EOL] assert res == members [ : : - [number] ] [EOL] res = await redis . zrevrangebyscore ( key , [number] , [number] , withscores = False , exclude = redis . ZSET_EXCLUDE_BOTH , encoding = encoding ) [EOL] assert res == members [ - [number] : [number] : - [number] ] [EOL] res = await redis . zrevrangebyscore ( key , [number] , [number] , withscores = True , encoding = encoding ) [EOL] assert res == rev_pairs [EOL] [EOL] res = await redis . zrevrangebyscore ( key , [number] , [number] , offset = [number] , count = [number] , encoding = encoding ) [EOL] assert res == members [ - [number] : - [number] : - [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [number] , [number] , offset = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [number] , [number] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [number] , [number] , offset = [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebyscore ( key , [number] , [number] , offset = [number] , count = [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zrevrangebylex ( redis ) : [EOL] key = [string] [EOL] scores = [ [number] ] * [number] [EOL] members = [ [string] , [string] , [string] , [string] , [string] ] [EOL] strings = [ x . decode ( [string] ) for x in members ] [EOL] rev_members = members [ : : - [number] ] [EOL] rev_strings = strings [ : : - [number] ] [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] [EOL] res = await redis . zadd ( key , * pairs ) [EOL] assert res == [number] [EOL] res = await redis . zrevrangebylex ( key ) [EOL] assert res == rev_members [EOL] res = await redis . zrevrangebylex ( key , encoding = [string] ) [EOL] assert res == rev_strings [EOL] res = await redis . zrevrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == rev_members [ [number] : ] [EOL] res = await redis . zrevrangebylex ( key , min = [string] , max = [string] , include_min = False , include_max = False ) [EOL] assert res == rev_members [ [number] : - [number] ] [EOL] res = await redis . zrevrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == [ ] [EOL] res = await redis . zrevrangebylex ( key , min = [string] , max = [string] ) [EOL] assert res == [ ] [EOL] res = await redis . zrevrangebylex ( key , offset = [number] , count = [number] ) [EOL] assert res == rev_members [ [number] : [number] ] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( None , [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [string] , [string] , offset = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [string] , [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [string] , [string] , offset = [string] , count = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zrevrangebylex ( key , [string] , [string] , offset = [number] , count = [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zscan ( redis ) : [EOL] key = [string] [EOL] scores , members = [ ] , [ ] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] members . append ( [string] . format ( foo_or_bar , i ) . encode ( [string] ) ) [EOL] scores . append ( i ) [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] rev_pairs = set ( zip ( members , scores ) ) [EOL] await redis . zadd ( key , * pairs ) [EOL] [EOL] cursor , values = await redis . zscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] [EOL] cursor , values = await redis . zscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cursor = [string] [EOL] test_values = set ( ) [EOL] while cursor : [EOL] cursor , values = await redis . zscan ( key , cursor , count = [number] ) [EOL] test_values . update ( values ) [EOL] assert test_values == rev_pairs [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zscan ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_izscan ( redis ) : [EOL] key = [string] [EOL] scores , members = [ ] , [ ] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] members . append ( [string] . format ( foo_or_bar , i ) . encode ( [string] ) ) [EOL] scores . append ( i ) [EOL] pairs = list ( itertools . chain ( * zip ( scores , members ) ) ) [EOL] await redis . zadd ( key , * pairs ) [EOL] vals = set ( zip ( members , scores ) ) [EOL] [EOL] async def coro ( cmd ) : [EOL] res = set ( ) [EOL] async for key , score in cmd : [EOL] res . add ( ( key , score ) ) [EOL] return res [EOL] [EOL] ret = await coro ( redis . izscan ( key ) ) [EOL] assert set ( ret ) == set ( vals ) [EOL] [EOL] ret = await coro ( redis . izscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == set ( v for v in vals if [string] in v [ [number] ] ) [EOL] [EOL] ret = await coro ( redis . izscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == set ( v for v in vals if [string] in v [ [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] ret = await coro ( redis . izscan ( key , count = [number] ) ) [EOL] assert set ( ret ) == set ( vals ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . izscan ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zpopmax ( redis ) : [EOL] key = [string] [EOL] [EOL] pairs = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] await redis . zadd ( key , * itertools . chain . from_iterable ( pairs ) ) [EOL] [EOL] assert await redis . zpopmax ( key ) == [ [string] , [string] ] [EOL] assert await redis . zpopmax ( key , [number] ) == [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zpopmax ( key , [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_zpopmin ( redis ) : [EOL] key = [string] [EOL] [EOL] pairs = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] await redis . zadd ( key , * itertools . chain . from_iterable ( pairs ) ) [EOL] [EOL] assert await redis . zpopmin ( key ) == [ [string] , [string] ] [EOL] assert await redis . zpopmin ( key , [number] ) == [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . zpopmin ( key , [string] ) [EOL]	
import pytest [EOL] [EOL] from aioredis . util import parse_url [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { } ) , ( [string] , ( [string] , [number] ) , { [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [string] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , ( [string] , [number] ) , { [string] : True , [string] : [number] } ) , ( [string] , [string] , { } ) , ( [string] , [string] , { [string] : [number] } ) , ( [string] , [string] , { [string] : [string] } ) , ( [string] , [string] , { [string] : True } ) , ( [string] , [string] , { [string] : [number] } ) , ( [string] , [string] , { } ) , ( [string] , [string] , { } ) , ] ) def test_good_url ( url , expected_address , expected_options ) : [EOL] address , options = parse_url ( url ) [EOL] assert address == expected_address [EOL] assert options == expected_options [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] , [string] ) ) , ( [string] , ( [string] , [string] , [string] ) ) , ( [string] , ( [string] , [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [number] , [number] ) ) , ( [string] , ( [string] , [number] , [number] ) ) , ( [string] , ( [string] ) ) , ( [string] , ( [string] , [string] ) ) , ( [string] , ( [string] , [string] ) ) , ] ) def test_url_assertions ( url , expected_error ) : [EOL] with pytest . raises ( AssertionError ) as exc_info : [EOL] parse_url ( url ) [EOL] assert exc_info . value . args == ( expected_error , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , ] ) def test_db_num_assertions ( url ) : [EOL] with pytest . raises ( AssertionError , match = [string] ) : [EOL] parse_url ( url ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] async def test_ssl_connection ( create_connection , server , ssl_proxy ) : [EOL] ssl_port , ssl_ctx = ssl_proxy ( server . tcp_address . port ) [EOL] [EOL] conn = await create_connection ( ( [string] , ssl_port ) , ssl = ssl_ctx ) [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_ssl_redis ( create_redis , server , ssl_proxy ) : [EOL] ssl_port , ssl_ctx = ssl_proxy ( server . tcp_address . port ) [EOL] [EOL] redis = await create_redis ( ( [string] , ssl_port ) , ssl = ssl_ctx ) [EOL] res = await redis . ping ( ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_ssl_pool ( create_pool , server , ssl_proxy ) : [EOL] ssl_port , ssl_ctx = ssl_proxy ( server . tcp_address . port ) [EOL] [EOL] pool = await create_pool ( ( [string] , ssl_port ) , ssl = ssl_ctx ) [EOL] with ( await pool ) as conn : [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Tuple , Union , Any , Literal , List [EOL] import typing [EOL] import typing_extensions [EOL] import pytest [EOL] [EOL] from aioredis import ReplyError [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def add ( redis , key , members ) : [EOL] ok = await redis . connection . execute ( [string] , key , members ) [EOL] assert ok == [number] [EOL] [EOL] [EOL] async def test_sadd ( redis ) : [EOL] key , member = [string] , [string] [EOL] [comment] [EOL] test_result = await redis . sadd ( key , member ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sadd ( key , [string] ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sadd ( key , member ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sadd ( None , [number] ) [EOL] [EOL] [EOL] async def test_scard ( redis ) : [EOL] key , member = [string] , [string] [EOL] [EOL] [comment] [EOL] empty_size = await redis . scard ( key ) [EOL] assert empty_size == [number] [EOL] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] incr = str ( i ) . encode ( [string] ) [EOL] await add ( redis , key , member + incr ) [EOL] current_size = await redis . scard ( key ) [EOL] assert current_size == i [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . scard ( None ) [EOL] [EOL] [EOL] async def test_sdiff ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] key3 = [string] [EOL] [EOL] members1 = ( [string] , [string] , [string] , [string] ) [EOL] members2 = ( [string] , ) [EOL] members3 = ( [string] , [string] , [string] ) [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] await redis . sadd ( key3 , * members3 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sdiff ( key1 , key2 , key3 ) [EOL] assert set ( test_result ) == { [string] , [string] } [EOL] [EOL] [comment] [EOL] test_result = await redis . sdiff ( key2 ) [EOL] assert set ( test_result ) == { [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sdiff ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sdiff ( key1 , None ) [EOL] [EOL] [EOL] async def test_sdiffstore ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] destkey = [string] [EOL] members1 = ( [string] , [string] , [string] ) [EOL] members2 = ( [string] , [string] , [string] ) [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sdiffstore ( destkey , key1 , key2 ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . scard ( destkey ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sdiffstore ( [string] + destkey , [string] + key1 , [string] + key2 ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sdiffstore ( None , key1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sdiffstore ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sdiffstore ( destkey , key1 , None ) [EOL] [EOL] [EOL] async def test_sinter ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] key3 = [string] [EOL] [EOL] members1 = ( [string] , [string] , [string] , [string] ) [EOL] members2 = ( [string] , ) [EOL] members3 = ( [string] , [string] , [string] ) [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] await redis . sadd ( key3 , * members3 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sinter ( key1 , key2 , key3 ) [EOL] assert set ( test_result ) == { [string] } [EOL] [EOL] [comment] [EOL] test_result = await redis . sinter ( key2 ) [EOL] assert set ( test_result ) == { [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sinter ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sinter ( key1 , None ) [EOL] [EOL] [EOL] async def test_sinterstore ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] destkey = [string] [EOL] members1 = ( [string] , [string] , [string] ) [EOL] members2 = ( [string] , [string] , [string] ) [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sinterstore ( destkey , key1 , key2 ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . scard ( destkey ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sinterstore ( [string] + destkey , [string] + key1 , [string] + key2 ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sinterstore ( None , key1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sinterstore ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sinterstore ( destkey , key1 , None ) [EOL] [EOL] [EOL] async def test_sismember ( redis ) : [EOL] key , member = [string] , [string] [EOL] [comment] [EOL] test_result = await redis . sadd ( key , member ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sismember ( key , member ) [EOL] assert test_result == [number] [EOL] [comment] [EOL] test_result = await redis . sismember ( key , [string] ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sismember ( None , [string] ) [EOL] [EOL] [EOL] async def test_smembers ( redis ) : [EOL] key = [string] [EOL] member1 = [string] [EOL] member2 = [string] [EOL] [EOL] await redis . sadd ( key , member1 ) [EOL] await redis . sadd ( key , member2 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . smembers ( key ) [EOL] assert set ( test_result ) == { member1 , member2 } [EOL] [EOL] [comment] [EOL] test_result = await redis . smembers ( [string] + key ) [EOL] assert test_result == [ ] [EOL] [EOL] [comment] [EOL] test_result = await redis . smembers ( key , encoding = [string] ) [EOL] assert set ( test_result ) == { [string] , [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . smembers ( None ) [EOL] [EOL] [EOL] async def test_smove ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] member1 = [string] [EOL] member2 = [string] [EOL] member3 = [string] [EOL] await redis . sadd ( key1 , member1 , member2 ) [EOL] await redis . sadd ( key2 , member3 ) [EOL] [comment] [EOL] test_result = await redis . smove ( key1 , key2 , member2 ) [EOL] assert test_result == [number] [EOL] [comment] [EOL] test_result = await redis . smembers ( key1 ) [EOL] assert test_result == [ member1 ] [EOL] [comment] [EOL] test_result = await redis . smembers ( key2 ) [EOL] assert set ( test_result ) == { member2 , member3 } [EOL] [EOL] [comment] [EOL] test_result = await redis . smove ( key1 , [string] + key2 , member1 ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . smove ( key1 , [string] + key2 , member1 ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . smove ( [string] + key1 , [string] + key2 , member1 ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . smove ( None , key1 , member1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . smove ( key1 , None , member1 ) [EOL] [EOL] [EOL] async def test_spop ( redis ) : [EOL] key = [string] [EOL] members = [string] , [string] , [string] [EOL] await redis . sadd ( key , * members ) [EOL] [EOL] for _ in members : [EOL] test_result = await redis . spop ( key ) [EOL] assert test_result in members [EOL] [EOL] [comment] [EOL] members = [string] , [string] , [string] [EOL] await redis . sadd ( key , * members ) [EOL] [EOL] for _ in members : [EOL] test_result = await redis . spop ( key , encoding = [string] ) [EOL] assert test_result in members [EOL] [EOL] [comment] [EOL] test_result = await redis . smembers ( key ) [EOL] assert test_result == [ ] [EOL] [EOL] [comment] [EOL] test_result = await redis . spop ( [string] + key ) [EOL] assert test_result is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . spop ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_spop_count ( redis ) : [EOL] key = [string] [EOL] members1 = [string] , [string] , [string] [EOL] await redis . sadd ( key , * members1 ) [EOL] [EOL] [comment] [EOL] test_result1 = await redis . spop ( key , [number] ) [EOL] assert len ( test_result1 ) == [number] [EOL] assert set ( test_result1 ) . issubset ( members1 ) is True [EOL] [EOL] members2 = [string] , [string] , [string] [EOL] await redis . sadd ( key , * members2 ) [EOL] [EOL] [comment] [EOL] test_result2 = await redis . spop ( key , [number] , encoding = [string] ) [EOL] assert len ( test_result2 ) == [number] [EOL] assert set ( test_result2 ) . issubset ( members2 ) is True [EOL] [EOL] [comment] [EOL] test_result = await redis . spop ( [string] + key , [number] ) [EOL] assert len ( test_result ) == [number] [EOL] [EOL] [comment] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . spop ( key , - [number] ) [EOL] [EOL] [comment] [EOL] test_result3 = await redis . spop ( key , [number] ) [EOL] assert len ( test_result3 ) == [number] [EOL] [EOL] [EOL] async def test_srandmember ( redis ) : [EOL] key = [string] [EOL] members = [string] , [string] , [string] , [string] , [string] , [string] , [string] [EOL] await redis . sadd ( key , * members ) [EOL] [EOL] for _ in members : [EOL] test_result = await redis . srandmember ( key ) [EOL] assert test_result in members [EOL] [EOL] [comment] [EOL] test_result = await redis . srandmember ( key , encoding = [string] ) [EOL] strings = { [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL] assert test_result in strings [EOL] [EOL] [comment] [EOL] test_result = await redis . smembers ( key ) [EOL] assert set ( test_result ) == set ( members ) [EOL] [EOL] [comment] [EOL] test_result1 = await redis . srandmember ( key , [number] ) [EOL] assert len ( test_result1 ) == [number] [EOL] assert set ( test_result1 ) . issubset ( members ) is True [EOL] [EOL] [comment] [EOL] test_result2 = await redis . srandmember ( key , - [number] ) [EOL] assert len ( test_result2 ) == [number] [EOL] assert set ( test_result2 ) . issubset ( members ) is True [EOL] assert len ( set ( test_result2 ) ) <= len ( members ) [EOL] [EOL] [comment] [EOL] test_result = await redis . srandmember ( [string] + key ) [EOL] assert test_result is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . srandmember ( None ) [EOL] [EOL] [EOL] async def test_srem ( redis ) : [EOL] key = [string] [EOL] members = [string] , [string] , [string] , [string] , [string] , [string] , [string] [EOL] await redis . sadd ( key , * members ) [EOL] [EOL] [comment] [EOL] test_result = await redis . srem ( key , members [ - [number] ] ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . srem ( key , [string] ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . srem ( [string] + key , [string] ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . srem ( key , * members [ : - [number] ] ) [EOL] assert test_result == [number] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . srem ( None , members ) [EOL] [EOL] [EOL] async def test_sunion ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] key3 = [string] [EOL] [EOL] members1 = [ [string] , [string] , [string] , [string] ] [EOL] members2 = [ [string] ] [EOL] members3 = [ [string] , [string] , [string] ] [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] await redis . sadd ( key3 , * members3 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sunion ( key1 , key2 , key3 ) [EOL] assert set ( test_result ) == set ( members1 + members2 + members3 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sunion ( key2 ) [EOL] assert set ( test_result ) == { [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sunion ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sunion ( key1 , None ) [EOL] [EOL] [EOL] async def test_sunionstore ( redis ) : [EOL] key1 = [string] [EOL] key2 = [string] [EOL] destkey = [string] [EOL] members1 = ( [string] , [string] , [string] ) [EOL] members2 = ( [string] , [string] , [string] ) [EOL] [EOL] await redis . sadd ( key1 , * members1 ) [EOL] await redis . sadd ( key2 , * members2 ) [EOL] [EOL] [comment] [EOL] test_result = await redis . sunionstore ( destkey , key1 , key2 ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . scard ( destkey ) [EOL] assert test_result == [number] [EOL] [EOL] [comment] [EOL] test_result = await redis . sunionstore ( [string] + destkey , [string] + key1 , [string] + key2 ) [EOL] assert test_result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sunionstore ( None , key1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sunionstore ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sunionstore ( destkey , key1 , None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_sscan ( redis ) : [EOL] key = [string] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] member = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] await add ( redis , key , member ) [EOL] [EOL] cursor , values = await redis . sscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] [EOL] cursor , values = await redis . sscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cursor = [string] [EOL] test_values = [ ] [EOL] while cursor : [EOL] cursor , values = await redis . sscan ( key , cursor , count = [number] ) [EOL] test_values . extend ( values ) [EOL] assert len ( test_values ) == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . sscan ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_isscan ( redis ) : [EOL] key = [string] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] member = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] assert await redis . sadd ( key , member ) == [number] [EOL] [EOL] async def coro ( cmd ) : [EOL] lst = [ ] [EOL] async for i in cmd : [EOL] lst . append ( i ) [EOL] return lst [EOL] [EOL] ret = await coro ( redis . isscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == { [string] , [string] , [string] } [EOL] [EOL] ret = await coro ( redis . isscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == { [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ret = await coro ( redis . isscan ( key , count = [number] ) ) [EOL] assert set ( ret ) == { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . isscan ( None ) [EOL]	
import aioredis [EOL] import asyncio [EOL] import asyncio [EOL] [EOL] from aioredis . locks import Lock [EOL] [EOL] [EOL] async def test_finished_waiter_cancelled ( ) : [EOL] lock = Lock ( ) [EOL] [EOL] ta = asyncio . ensure_future ( lock . acquire ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert lock . locked ( ) [EOL] [EOL] tb = asyncio . ensure_future ( lock . acquire ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert len ( lock . _waiters ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] asyncio . ensure_future ( lock . acquire ( ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] lock . release ( ) [EOL] tb . cancel ( ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert ta . done ( ) [EOL] assert tb . cancelled ( ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] assert lock . locked ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from _testutils import redis_version [EOL] [EOL] pytestmark = redis_version ( [number] , [number] , [number] , reason = [string] ) [EOL] [EOL] [EOL] async def test_pfcount ( redis ) : [EOL] key = [string] [EOL] other_key = [string] [EOL] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( key , [string] , [string] , [string] ) [EOL] assert is_changed == [number] [EOL] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( key , [string] , [string] , [string] ) [EOL] assert is_changed == [number] [EOL] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( key , [string] , [string] ) [EOL] assert is_changed == [number] [EOL] [EOL] [comment] [EOL] cardinality = await redis . pfcount ( key ) [EOL] assert cardinality == [number] [EOL] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( other_key , [number] , [number] , [number] ) [EOL] assert is_changed == [number] [EOL] [EOL] [comment] [EOL] cardinality = await redis . pfcount ( key , other_key ) [EOL] assert cardinality == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfcount ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfcount ( key , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfcount ( key , key , None ) [EOL] [EOL] [EOL] async def test_pfadd ( redis ) : [EOL] key = [string] [EOL] values = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( key , * values ) [EOL] assert is_changed == [number] [EOL] [comment] [EOL] is_changed = await redis . pfadd ( key , [string] , [string] ) [EOL] assert is_changed == [number] [EOL] [EOL] [EOL] async def test_pfadd_wrong_input ( redis ) : [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfadd ( None , [string] ) [EOL] [EOL] [EOL] async def test_pfmerge ( redis ) : [EOL] key = [string] [EOL] key_other = [string] [EOL] [EOL] key_dest = [string] [EOL] [EOL] values = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] values_other = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] data_set = set ( values + values_other ) [EOL] cardinality_merged = len ( data_set ) [EOL] [EOL] [comment] [EOL] await redis . pfadd ( key , * values ) [EOL] await redis . pfadd ( key_other , * values_other ) [EOL] [EOL] [comment] [EOL] cardinality = await redis . pfcount ( key ) [EOL] assert cardinality == len ( set ( values_other ) ) [EOL] [EOL] cardinality_other = await redis . pfcount ( key_other ) [EOL] assert cardinality_other == len ( set ( values_other ) ) [EOL] [EOL] await redis . pfmerge ( key_dest , key , key_other ) [EOL] cardinality_dest = await redis . pfcount ( key_dest ) [EOL] assert cardinality_dest == cardinality_merged [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfmerge ( None , key ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfmerge ( key_dest , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfmerge ( key_dest , key , None ) [EOL] [EOL] [EOL] async def test_pfmerge_wrong_input ( redis ) : [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pfmerge ( None , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] import asyncio [EOL] import pytest [EOL] import sys [EOL] import logging [EOL] [EOL] from aioredis import RedisError , ReplyError , PoolClosedError [EOL] from aioredis . errors import MasterReplyError [EOL] from aioredis . sentinel . commands import RedisSentinel [EOL] from aioredis . abc import AbcPool [EOL] from _testutils import redis_version [EOL] [EOL] pytestmark = redis_version ( [number] , [number] , [number] , reason = [string] ) [EOL] if sys . platform == [string] : [EOL] pytestmark = pytest . mark . skip ( reason = [string] ) [EOL] [EOL] BPO_30399 = sys . version_info >= ( [number] , [number] , [number] , [string] , [number] ) [EOL] [EOL] [EOL] async def test_client_close ( redis_sentinel ) : [EOL] assert isinstance ( redis_sentinel , RedisSentinel ) [EOL] assert not redis_sentinel . closed [EOL] [EOL] redis_sentinel . close ( ) [EOL] assert redis_sentinel . closed [EOL] with pytest . raises ( PoolClosedError ) : [EOL] assert ( await redis_sentinel . ping ( ) ) != [string] [EOL] [EOL] await redis_sentinel . wait_closed ( ) [EOL] [EOL] [EOL] async def test_ping ( redis_sentinel ) : [EOL] assert [string] == ( await redis_sentinel . ping ( ) ) [EOL] [EOL] [EOL] async def test_master_info ( redis_sentinel , sentinel ) : [EOL] info = await redis_sentinel . master ( [string] ) [EOL] assert isinstance ( info , dict ) [EOL] assert info [ [string] ] == [string] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] in info [ [string] ] [EOL] [EOL] for key in [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] : [EOL] assert key in info [EOL] if sentinel . version < ( [number] , [number] , [number] ) : [EOL] assert [string] in info [EOL] else : [EOL] assert [string] in info [EOL] assert [string] in info [EOL] [EOL] [EOL] async def test_master__auth ( create_sentinel , start_sentinel , start_server ) : [EOL] master = start_server ( [string] , password = [string] ) [EOL] start_server ( [string] , slaveof = master , password = [string] ) [EOL] [EOL] sentinel = start_sentinel ( [string] , master ) [EOL] client1 = await create_sentinel ( [ sentinel . tcp_address ] , password = [string] , timeout = [number] ) [EOL] [EOL] client2 = await create_sentinel ( [ sentinel . tcp_address ] , password = [string] , timeout = [number] ) [EOL] [EOL] client3 = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] [EOL] m1 = client1 . master_for ( master . name ) [EOL] await m1 . set ( [string] , [string] ) [EOL] [EOL] with pytest . raises ( MasterReplyError ) as exc_info : [EOL] m2 = client2 . master_for ( master . name ) [EOL] await m2 . set ( [string] , [string] ) [EOL] if BPO_30399 : [EOL] expected = ( [string] ) [EOL] else : [EOL] expected = ( [string] ) [EOL] assert str ( exc_info . value ) == expected [EOL] [EOL] with pytest . raises ( MasterReplyError ) : [EOL] m3 = client3 . master_for ( master . name ) [EOL] await m3 . set ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_master__no_auth ( create_sentinel , sentinel ) : [EOL] client = await create_sentinel ( [ sentinel . tcp_address ] , password = [string] , timeout = [number] ) [EOL] [EOL] master = client . master_for ( [string] ) [EOL] with pytest . raises ( MasterReplyError ) : [EOL] await master . set ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_master__unknown ( redis_sentinel ) : [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis_sentinel . master ( [string] ) [EOL] [EOL] [EOL] async def test_master_address ( redis_sentinel , sentinel ) : [EOL] _ , port = await redis_sentinel . master_address ( [string] ) [EOL] assert port == sentinel . masters [ [string] ] . tcp_address . port [EOL] [EOL] [EOL] async def test_master_address__unknown ( redis_sentinel ) : [EOL] res = await redis_sentinel . master_address ( [string] ) [EOL] assert res is None [EOL] [EOL] [EOL] async def test_masters ( redis_sentinel ) : [EOL] masters = await redis_sentinel . masters ( ) [EOL] assert isinstance ( masters , dict ) [EOL] assert len ( masters ) >= [number] , [string] [EOL] assert [string] in masters [EOL] assert isinstance ( masters [ [string] ] , dict ) [EOL] [EOL] [EOL] async def test_slave_info ( sentinel , redis_sentinel ) : [EOL] info = await redis_sentinel . slaves ( [string] ) [EOL] assert len ( info ) == [number] [EOL] info = info [ [number] ] [EOL] assert isinstance ( info , dict ) [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] assert [string] not in info [ [string] ] [EOL] [comment] [EOL] assert [string] in info [ [string] ] [EOL] [EOL] keys_set = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] if sentinel . version < ( [number] , [number] , [number] ) : [EOL] keys_set . add ( [string] ) [EOL] else : [EOL] keys_set . add ( [string] ) [EOL] keys_set . add ( [string] ) [EOL] [EOL] missing = keys_set - set ( info ) [EOL] assert not missing [EOL] [EOL] [EOL] async def test_slave__unknown ( redis_sentinel ) : [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis_sentinel . slaves ( [string] ) [EOL] [EOL] [EOL] async def test_sentinels_empty ( redis_sentinel ) : [EOL] res = await redis_sentinel . sentinels ( [string] ) [EOL] assert res == [ ] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis_sentinel . sentinels ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_sentinels__exist ( create_sentinel , start_sentinel , start_server ) : [EOL] m1 = start_server ( [string] ) [EOL] s1 = start_sentinel ( [string] , m1 , quorum = [number] , noslaves = True ) [EOL] s2 = start_sentinel ( [string] , m1 , quorum = [number] , noslaves = True ) [EOL] [EOL] redis_sentinel = await create_sentinel ( [ s1 . tcp_address , s2 . tcp_address ] , timeout = [number] ) [EOL] [EOL] while True : [EOL] info = await redis_sentinel . master ( [string] ) [EOL] if info [ [string] ] > [number] : [EOL] break [EOL] await asyncio . sleep ( [number] ) [EOL] info = await redis_sentinel . sentinels ( [string] ) [EOL] assert len ( info ) == [number] [EOL] assert [string] in info [ [number] ] [ [string] ] [EOL] assert info [ [number] ] [ [string] ] in ( s1 . tcp_address . port , s2 . tcp_address . port ) [EOL] [EOL] [EOL] async def test_ckquorum ( redis_sentinel ) : [EOL] assert ( await redis_sentinel . check_quorum ( [string] ) ) [EOL] [EOL] [comment] [EOL] [EOL] assert ( await redis_sentinel . set ( [string] , [string] , [number] ) ) [EOL] [EOL] with pytest . raises ( RedisError ) : [EOL] await redis_sentinel . check_quorum ( [string] ) [EOL] [EOL] assert ( await redis_sentinel . set ( [string] , [string] , [number] ) ) [EOL] assert ( await redis_sentinel . check_quorum ( [string] ) ) [EOL] [EOL] [EOL] async def test_set_option ( redis_sentinel ) : [EOL] assert ( await redis_sentinel . set ( [string] , [string] , [number] ) ) [EOL] master = await redis_sentinel . master ( [string] ) [EOL] assert master [ [string] ] == [number] [EOL] [EOL] assert ( await redis_sentinel . set ( [string] , [string] , [number] ) ) [EOL] master = await redis_sentinel . master ( [string] ) [EOL] assert master [ [string] ] == [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis_sentinel . set ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] async def test_sentinel_role ( sentinel , create_redis ) : [EOL] redis = await create_redis ( sentinel . tcp_address ) [EOL] info = await redis . role ( ) [EOL] assert info . role == [string] [EOL] assert isinstance ( info . masters , list ) [EOL] assert [string] in info . masters [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_remove ( redis_sentinel , start_server ) : [EOL] m1 = start_server ( [string] ) [EOL] ok = await redis_sentinel . monitor ( m1 . name , [string] , m1 . tcp_address . port , [number] ) [EOL] assert ok [EOL] [EOL] ok = await redis_sentinel . remove ( m1 . name ) [EOL] assert ok [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis_sentinel . remove ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_monitor ( redis_sentinel , start_server , unused_port ) : [EOL] m1 = start_server ( [string] ) [EOL] ok = await redis_sentinel . monitor ( m1 . name , [string] , m1 . tcp_address . port , [number] ) [EOL] assert ok [EOL] [EOL] _ , port = await redis_sentinel . master_address ( [string] ) [EOL] assert port == m1 . tcp_address . port [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_sentinel_master_pool_size ( sentinel , create_sentinel , caplog ) : [EOL] redis_s = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] , minsize = [number] , maxsize = [number] ) [EOL] master = redis_s . master_for ( [string] ) [EOL] assert isinstance ( master . connection , AbcPool ) [EOL] assert master . connection . size == [number] [EOL] [EOL] caplog . clear ( ) [EOL] with caplog . at_level ( [string] , [string] ) : [EOL] assert await master . ping ( ) [EOL] assert len ( caplog . record_tuples ) == [number] [EOL] assert caplog . record_tuples == [ ( [string] , logging . DEBUG , [string] . format ( master . address ) ) , ] [EOL] assert master . connection . size == [number] [EOL] assert master . connection . freesize == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool
from typing import Any [EOL] import typing [EOL] import aioredis [EOL] import pytest [EOL] [EOL] from aioredis . errors import ( ProtocolError , ReplyError , AuthError , MaxClientsError , ) [EOL] from aioredis . parser import PyReader [EOL] [EOL] [EOL] @ pytest . fixture def reader ( ) : [EOL] return PyReader ( ) [EOL] [EOL] [EOL] def test_nothing ( reader ) : [EOL] assert reader . gets ( ) is False [EOL] [EOL] [EOL] def test_error_when_feeding_non_string ( reader ) : [EOL] with pytest . raises ( TypeError ) : [EOL] reader . feed ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] , ids = [ [string] , [string] , [string] , [string] , [string] , ] ) def test_protocol_error ( reader , data ) : [EOL] reader . feed ( data ) [EOL] with pytest . raises ( ProtocolError ) : [EOL] reader . gets ( ) [EOL] [comment] [EOL] with pytest . raises ( ProtocolError ) : [EOL] reader . gets ( ) [EOL] [EOL] [EOL] class CustomExc ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( RuntimeError , RuntimeError ) , ( CustomExc , lambda e : CustomExc ( e ) ) , ] , ids = [ [string] , [string] ] ) def test_protocol_error_with_custom_class ( exc , arg ) : [EOL] reader = PyReader ( protocolError = arg ) [EOL] reader . feed ( [string] ) [EOL] with pytest . raises ( exc ) : [EOL] reader . gets ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ dict ( protocolError = [string] ) , dict ( replyError = [string] ) , ] , ids = [ [string] , [string] ] ) def test_fail_with_wrong_error_class ( init ) : [EOL] with pytest . raises ( TypeError ) : [EOL] PyReader ( ** init ) [EOL] [EOL] [EOL] def test_error_string ( reader ) : [EOL] reader . feed ( [string] ) [EOL] error = reader . gets ( ) [EOL] [EOL] assert isinstance ( error , ReplyError ) [EOL] assert error . args == ( [string] , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( AuthError , [string] ) , ( AuthError , [string] ) , ( MaxClientsError , [string] ) , ] ) def test_error_construction ( reader , error_kind , data ) : [EOL] reader . feed ( data ) [EOL] error = reader . gets ( ) [EOL] assert isinstance ( error , ReplyError ) [EOL] assert isinstance ( error , error_kind ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( RuntimeError , RuntimeError ) , ( CustomExc , lambda e : CustomExc ( e ) ) , ] , ids = [ [string] , [string] ] ) def test_error_string_with_custom_class ( exc , arg ) : [EOL] reader = PyReader ( replyError = arg ) [EOL] reader . feed ( [string] ) [EOL] error = reader . gets ( ) [EOL] [EOL] assert isinstance ( error , exc ) [EOL] assert error . args == ( [string] , ) [EOL] [EOL] [EOL] def test_errors_in_nested_multi_bulk ( reader ) : [EOL] reader . feed ( [string] ) [EOL] [EOL] for r , error in zip ( ( [string] , [string] ) , reader . gets ( ) ) : [EOL] assert isinstance ( error , ReplyError ) [EOL] assert error . args == ( r , ) [EOL] [EOL] [EOL] def test_integer ( reader ) : [EOL] value = [number] ** [number] - [number] [comment] [EOL] reader . feed ( ( [string] % value ) . encode ( [string] ) ) [EOL] assert reader . gets ( ) == value [EOL] [EOL] [EOL] def test_status_string ( reader ) : [EOL] reader . feed ( [string] ) [EOL] assert reader . gets ( ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , None ) , ( [string] , [string] ) , ] , ids = [ [string] , [string] , [string] ] ) def test_bulk_string ( reader , data , expected ) : [EOL] reader . feed ( data ) [EOL] assert reader . gets ( ) == expected [EOL] [EOL] [EOL] def test_bulk_string_without_encoding ( reader ) : [EOL] snowman = [string] [EOL] reader . feed ( [string] + snowman + [string] ) [EOL] assert reader . gets ( ) == snowman [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] . decode ( [string] ) ) , ( [string] , [string] ) , ] , ids = [ [string] , [string] ] ) def test_bulk_string_with_encoding ( encoding , expected ) : [EOL] snowman = [string] [EOL] reader = PyReader ( encoding = encoding ) [EOL] reader . feed ( [string] + snowman + [string] ) [EOL] assert reader . gets ( ) == expected [EOL] [EOL] [EOL] def test_bulk_string_with_invalid_encoding ( ) : [EOL] reader = PyReader ( encoding = [string] ) [EOL] reader . feed ( [string] ) [EOL] with pytest . raises ( LookupError ) : [EOL] reader . gets ( ) [EOL] [EOL] [EOL] def test_bulk_string_wait_buffer ( reader ) : [EOL] reader . feed ( [string] ) [EOL] assert not reader . gets ( ) [EOL] reader . feed ( [string] ) [EOL] assert not reader . gets ( ) [EOL] reader . feed ( [string] ) [EOL] assert reader . gets ( ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , None ) , ( [string] , [ ] ) , ( [string] , [ [string] , [string] ] ) , ] , ids = [ [string] , [string] , [string] ] ) def test_null_multi_bulk ( reader , data , expected ) : [EOL] reader . feed ( data ) [EOL] assert reader . gets ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , ) , ( [string] , ) , ] , ids = [ [string] , [string] , [string] , [string] ] ) def test_multi_bulk_with_invalid_encoding_and_partial_reply ( data ) : [EOL] reader = PyReader ( encoding = [string] ) [EOL] for chunk in data : [EOL] reader . feed ( chunk ) [EOL] assert reader . gets ( ) is False [EOL] reader . feed ( [string] ) [EOL] with pytest . raises ( LookupError ) : [EOL] reader . gets ( ) [EOL] [EOL] reader . feed ( [string] ) [EOL] assert reader . gets ( ) == [number] [EOL] [EOL] [EOL] def test_nested_multi_bulk ( reader ) : [EOL] reader . feed ( [string] ) [EOL] assert reader . gets ( ) == [ [ [string] , [string] ] , [string] ] [EOL] [EOL] [EOL] def test_nested_multi_bulk_depth ( reader ) : [EOL] reader . feed ( [string] ) [EOL] assert reader . gets ( ) == [ [ [ [ [string] ] ] ] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] . decode ( [string] ) ) , ( [string] , [string] ) , ] , ids = [ [string] , [string] ] ) def test_simple_string_with_encoding ( encoding , expected ) : [EOL] snowman = [string] [EOL] reader = PyReader ( encoding = encoding ) [EOL] reader . feed ( [string] + snowman + [string] ) [EOL] assert reader . gets ( ) == expected [EOL] [EOL] [EOL] def test_invalid_offset ( reader ) : [EOL] data = [string] [EOL] with pytest . raises ( ValueError ) : [EOL] reader . feed ( data , [number] ) [EOL] [EOL] [EOL] def test_invalid_length ( reader ) : [EOL] data = [string] [EOL] with pytest . raises ( ValueError ) : [EOL] reader . feed ( data , [number] , [number] ) [EOL] [EOL] [EOL] def test_ok_offset ( reader ) : [EOL] data = [string] [EOL] reader . feed ( data , [number] ) [EOL] assert reader . gets ( ) == [string] [EOL] [EOL] [EOL] def test_ok_length ( reader ) : [EOL] data = [string] [EOL] reader . feed ( data , [number] , len ( data ) - [number] ) [EOL] assert reader . gets ( ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . xfail ( ) def test_maxbuf ( reader ) : [EOL] defaultmaxbuf = reader . getmaxbuf ( ) [EOL] reader . setmaxbuf ( [number] ) [EOL] assert [number] == reader . getmaxbuf ( ) [EOL] reader . setmaxbuf ( [number] ) [EOL] assert [number] == reader . getmaxbuf ( ) [EOL] reader . setmaxbuf ( None ) [EOL] assert defaultmaxbuf == reader . getmaxbuf ( ) [EOL] with pytest . raises ( ValueError ) : [EOL] reader . setmaxbuf ( - [number] ) [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from aioredis import GeoPoint , GeoMember [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geoadd ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geodist ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geodist ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geodist ( [string] , [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geohash ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geohash ( [string] , [string] , encoding = [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] res = await redis . geohash ( [string] , [string] , [string] , encoding = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geopos ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geopos ( [string] , [string] ) [EOL] assert res == [ GeoPoint ( longitude = [number] , latitude = [number] ) ] [EOL] [EOL] res = await redis . geopos ( [string] , [string] , [string] ) [EOL] assert res == [ GeoPoint ( longitude = [number] , latitude = [number] ) , GeoPoint ( longitude = [number] , latitude = [number] ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geo_not_exist_members ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geohash ( [string] , [string] ) [EOL] assert res == [ None ] [EOL] [EOL] res = await redis . geodist ( [string] , [string] , [string] ) [EOL] assert res is None [EOL] [EOL] res = await redis . geopos ( [string] , [string] , [string] , [string] ) [EOL] assert res == [ GeoPoint ( longitude = [number] , latitude = [number] ) , None , GeoPoint ( longitude = [number] , latitude = [number] ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_georadius_validation ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , count = [number] , encoding = [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] res = await redis . georadius ( [string] , [number] , [number] , [string] , [string] , encoding = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , encoding = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , sort = [string] , encoding = [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_georadius ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , encoding = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , count = [number] , encoding = [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , sort = [string] , encoding = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) , GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True , with_coord = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True , with_coord = True , with_hash = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_coord = True , with_hash = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = None , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_coord = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = None , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , count = [number] , sort = [string] , with_hash = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = [number] , coord = None ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_georadiusbymember ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) , GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) ] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , encoding = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True , with_coord = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( [number] , [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( [number] , [number] ) ) ] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True , with_coord = True , with_hash = True , encoding = [string] ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( [number] , [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( [number] , [number] ) ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_geohash_binary ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . geohash ( [string] , [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] res = await redis . geohash ( [string] , [string] , [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_georadius_binary ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , count = [number] ) [EOL] assert res == [ [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , sort = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) , GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True , with_coord = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_dist = True , with_coord = True , with_hash = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_coord = True , with_hash = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = None , hash = [number] , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , with_coord = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) ) , GeoMember ( member = [string] , dist = None , hash = None , coord = GeoPoint ( longitude = [number] , latitude = [number] ) , ) ] [EOL] [EOL] res = await redis . georadius ( [string] , [number] , [number] , [number] , [string] , count = [number] , sort = [string] , with_hash = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = None , hash = [number] , coord = None ) ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_georadiusbymember_binary ( redis ) : [EOL] res = await redis . geoadd ( [string] , [number] , [number] , [string] , [number] , [number] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) , GeoMember ( member = [string] , dist = [number] , coord = None , hash = None ) ] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True , with_coord = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( [number] , [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = None , coord = GeoPoint ( [number] , [number] ) ) ] [EOL] [EOL] res = await redis . georadiusbymember ( [string] , [string] , [number] , [string] , with_dist = True , with_coord = True , with_hash = True ) [EOL] assert res == [ GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( [number] , [number] ) ) , GeoMember ( member = [string] , dist = [number] , hash = [number] , coord = GeoPoint ( [number] , [number] ) ) ] [EOL]	
from typing import List , Dict , Any [EOL] import typing [EOL] import time [EOL] import pytest [EOL] import sys [EOL] [EOL] from unittest import mock [EOL] [EOL] from aioredis import ReplyError [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def test_client_list ( redis , server , request ) : [EOL] name = request . node . callspec . id [EOL] assert ( await redis . client_setname ( name ) ) [EOL] res = await redis . client_list ( ) [EOL] assert isinstance ( res , list ) [EOL] res = [ dict ( i . _asdict ( ) ) for i in res ] [EOL] expected = { [string] : mock . ANY , [string] : mock . ANY , [string] : mock . ANY , [string] : mock . ANY , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : mock . ANY , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : name , } [EOL] if server . version >= ( [number] , [number] , [number] ) : [EOL] expected [ [string] ] = mock . ANY [EOL] if server . version >= ( [number] , ) : [EOL] expected [ [string] ] = [string] [EOL] assert expected in res [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_client_list__unixsocket ( create_redis , server , request ) : [EOL] redis = await create_redis ( server . unixsocket ) [EOL] name = request . node . callspec . id [EOL] assert ( await redis . client_setname ( name ) ) [EOL] res = await redis . client_list ( ) [EOL] info = [ dict ( i . _asdict ( ) ) for i in res ] [EOL] expected = { [string] : [string] . format ( server . unixsocket ) , [string] : mock . ANY , [string] : mock . ANY , [string] : mock . ANY , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : mock . ANY , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : name , } [EOL] if server . version >= ( [number] , [number] , [number] ) : [EOL] expected [ [string] ] = mock . ANY [EOL] if server . version >= ( [number] , ) : [EOL] expected [ [string] ] = [string] [EOL] assert expected in info [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_client_pause ( redis ) : [EOL] tr = redis . pipeline ( ) [EOL] tr . time ( ) [EOL] tr . client_pause ( [number] ) [EOL] tr . time ( ) [EOL] t1 , ok , t2 = await tr . execute ( ) [EOL] assert ok [EOL] assert t2 - t1 >= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . client_pause ( [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . client_pause ( - [number] ) [EOL] [EOL] [EOL] async def test_client_getname ( redis ) : [EOL] res = await redis . client_getname ( ) [EOL] assert res is None [EOL] ok = await redis . client_setname ( [string] ) [EOL] assert ok is True [EOL] [EOL] res = await redis . client_getname ( ) [EOL] assert res == [string] [EOL] res = await redis . client_getname ( encoding = [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_command ( redis ) : [EOL] res = await redis . command ( ) [EOL] assert isinstance ( res , list ) [EOL] assert len ( res ) > [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_command_count ( redis ) : [EOL] res = await redis . command_count ( ) [EOL] assert res > [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_command_getkeys ( redis ) : [EOL] res = await redis . command_getkeys ( [string] , [string] ) [EOL] assert res == [ [string] ] [EOL] res = await redis . command_getkeys ( [string] , [string] , encoding = None ) [EOL] assert res == [ [string] ] [EOL] res = await redis . command_getkeys ( [string] , [string] , [string] , [string] , [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] res = await redis . command_getkeys ( [string] , [string] , [string] , [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] assert ( await redis . command_getkeys ( [string] ) ) [EOL] with pytest . raises ( TypeError ) : [EOL] assert not ( await redis . command_getkeys ( None ) ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_command_info ( redis ) : [EOL] res = await redis . command_info ( [string] ) [EOL] assert res == [ [ [string] , [number] , [ [string] , [string] ] , [number] , [number] , [number] ] , ] [EOL] [EOL] res = await redis . command_info ( [string] ) [EOL] assert res == [ None ] [EOL] res = await redis . command_info ( [string] , [string] ) [EOL] assert res == [ None , None ] [EOL] [EOL] [EOL] async def test_config_get ( redis , server ) : [EOL] res = await redis . config_get ( [string] ) [EOL] assert res == { [string] : str ( server . tcp_address . port ) } [EOL] [EOL] res = await redis . config_get ( ) [EOL] assert len ( res ) > [number] [EOL] [EOL] res = await redis . config_get ( [string] ) [EOL] assert res == { } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . config_get ( [string] ) [EOL] [EOL] [EOL] async def test_config_rewrite ( redis ) : [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . config_rewrite ( ) [EOL] [EOL] [EOL] async def test_config_set ( redis ) : [EOL] cur_value = await redis . config_get ( [string] ) [EOL] res = await redis . config_set ( [string] , [string] ) [EOL] assert res is True [EOL] res = await redis . config_set ( [string] , cur_value [ [string] ] ) [EOL] assert res is True [EOL] [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] await redis . config_set ( [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . config_set ( [number] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] async def test_debug_object ( redis ) : [EOL] with pytest . raises ( ReplyError ) : [EOL] assert ( await redis . debug_object ( [string] ) ) is None [EOL] [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok [EOL] res = await redis . debug_object ( [string] ) [EOL] assert res is not None [EOL] [EOL] [EOL] async def test_debug_sleep ( redis ) : [EOL] t1 = await redis . time ( ) [EOL] ok = await redis . debug_sleep ( [number] ) [EOL] assert ok [EOL] t2 = await redis . time ( ) [EOL] assert t2 - t1 >= [number] [EOL] [EOL] [EOL] async def test_dbsize ( redis ) : [EOL] res = await redis . dbsize ( ) [EOL] assert res == [number] [EOL] [EOL] await redis . set ( [string] , [string] ) [EOL] [EOL] res = await redis . dbsize ( ) [EOL] assert res > [number] [EOL] [EOL] await redis . flushdb ( ) [EOL] res = await redis . dbsize ( ) [EOL] assert res == [number] [EOL] await redis . set ( [string] , [string] ) [EOL] res = await redis . dbsize ( ) [EOL] assert res == [number] [EOL] [EOL] [EOL] async def test_info ( redis ) : [EOL] res = await redis . info ( ) [EOL] assert isinstance ( res , dict ) [EOL] [EOL] res = await redis . info ( [string] ) [EOL] assert isinstance ( res , dict ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . info ( [string] ) [EOL] [EOL] [EOL] async def test_lastsave ( redis ) : [EOL] res = await redis . lastsave ( ) [EOL] assert res > [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_role ( redis ) : [EOL] res = await redis . role ( ) [EOL] assert dict ( res . _asdict ( ) ) == { [string] : [string] , [string] : mock . ANY , [string] : [ ] , } [EOL] [EOL] [EOL] async def test_save ( redis ) : [EOL] res = await redis . dbsize ( ) [EOL] assert res == [number] [EOL] t1 = await redis . lastsave ( ) [EOL] ok = await redis . save ( ) [EOL] assert ok [EOL] t2 = await redis . lastsave ( ) [EOL] assert t2 >= t1 [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ pytest . param ( None , id = [string] ) , pytest . param ( [string] , id = [string] ) , ] ) async def test_time ( create_redis , server , encoding ) : [EOL] redis = await create_redis ( server . tcp_address , encoding = [string] ) [EOL] now = time . time ( ) [EOL] res = await redis . time ( ) [EOL] assert isinstance ( res , float ) [EOL] assert res == pytest . approx ( now , abs = [number] ) [EOL] [EOL] [EOL] async def test_slowlog_len ( redis ) : [EOL] res = await redis . slowlog_len ( ) [EOL] assert res >= [number] [EOL] [EOL] [EOL] async def test_slowlog_get ( redis ) : [EOL] res = await redis . slowlog_get ( ) [EOL] assert isinstance ( res , list ) [EOL] assert len ( res ) >= [number] [EOL] [EOL] res = await redis . slowlog_get ( [number] ) [EOL] assert isinstance ( res , list ) [EOL] assert [number] <= len ( res ) <= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] assert not ( await redis . slowlog_get ( [number] ) ) [EOL] with pytest . raises ( TypeError ) : [EOL] assert not ( await redis . slowlog_get ( [string] ) ) [EOL] [EOL] [EOL] async def test_slowlog_reset ( redis ) : [EOL] ok = await redis . slowlog_reset ( ) [EOL] assert ok is True [EOL]	
from typing import Tuple , Any , List [EOL] import typing [EOL] import asyncio [EOL] import pytest [EOL] import asyncio [EOL] [EOL] from aioredis import ReplyError [EOL] [EOL] [EOL] async def push_data_with_sleep ( redis , key , * values ) : [EOL] await asyncio . sleep ( [number] ) [EOL] result = await redis . lpush ( key , * values ) [EOL] return result [EOL] [EOL] [EOL] async def test_blpop ( redis ) : [EOL] key1 , value1 = [string] , [string] [EOL] key2 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . rpush ( key1 , value1 , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] test_value = await redis . blpop ( key1 ) [EOL] assert test_value == [ key1 , value1 ] [EOL] [comment] [EOL] test_value = await redis . blpop ( key1 ) [EOL] assert test_value == [ key1 , value2 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . blpop ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . blpop ( key1 , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . blpop ( key1 , timeout = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . blpop ( key2 , timeout = - [number] ) [EOL] [EOL] [comment] [EOL] await redis . rpush ( key2 , value1 ) [EOL] test_value = await redis . blpop ( key2 , encoding = [string] ) [EOL] assert test_value == [ [string] , [string] ] [EOL] [EOL] [EOL] async def test_blpop_blocking_features ( redis , create_redis , server ) : [EOL] key1 , key2 = [string] , [string] [EOL] value = [string] [EOL] [EOL] other_redis = await create_redis ( server . tcp_address ) [EOL] [EOL] [comment] [EOL] consumer = other_redis . blpop ( key1 , key2 ) [EOL] [EOL] producer_task = asyncio . ensure_future ( push_data_with_sleep ( redis , key2 , value ) ) [EOL] results = await asyncio . gather ( consumer , producer_task ) [EOL] [EOL] assert results [ [number] ] == [ key2 , value ] [EOL] assert results [ [number] ] == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] waiter = redis . blpop ( key1 , key2 , timeout = [number] ) [EOL] test_value = await waiter [EOL] assert test_value is None [EOL] other_redis . close ( ) [EOL] [EOL] [EOL] async def test_brpop ( redis ) : [EOL] key1 , value1 = [string] , [string] [EOL] key2 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . rpush ( key1 , value1 , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] test_value = await redis . brpop ( key1 ) [EOL] assert test_value == [ key1 , value2 ] [EOL] [comment] [EOL] test_value = await redis . brpop ( key1 ) [EOL] assert test_value == [ key1 , value1 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpop ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpop ( key1 , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpop ( key1 , timeout = [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . brpop ( key2 , timeout = - [number] ) [EOL] [EOL] [comment] [EOL] await redis . rpush ( key2 , value1 ) [EOL] test_value = await redis . brpop ( key2 , encoding = [string] ) [EOL] assert test_value == [ [string] , [string] ] [EOL] [EOL] [EOL] async def test_brpop_blocking_features ( redis , create_redis , server ) : [EOL] key1 , key2 = [string] , [string] [EOL] value = [string] [EOL] [EOL] other_redis = await create_redis ( server . tcp_address ) [EOL] [comment] [EOL] consumer_task = other_redis . brpop ( key1 , key2 ) [EOL] [EOL] producer_task = asyncio . ensure_future ( push_data_with_sleep ( redis , key2 , value ) ) [EOL] [EOL] results = await asyncio . gather ( consumer_task , producer_task ) [EOL] [EOL] assert results [ [number] ] == [ key2 , value ] [EOL] assert results [ [number] ] == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] waiter = redis . brpop ( key1 , key2 , timeout = [number] ) [EOL] test_value = await waiter [EOL] assert test_value is None [EOL] [EOL] [EOL] async def test_brpoplpush ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] destkey = [string] [EOL] [EOL] [comment] [EOL] await redis . rpush ( key , value1 , value2 ) [EOL] [EOL] [comment] [EOL] result = await redis . brpoplpush ( key , destkey ) [EOL] assert result == value2 [EOL] [comment] [EOL] result = await redis . brpoplpush ( key , destkey ) [EOL] assert result == value1 [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( destkey , [number] , - [number] ) [EOL] assert test_value == [ value1 , value2 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpoplpush ( None , destkey ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpoplpush ( key , None ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . brpoplpush ( key , destkey , timeout = [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . brpoplpush ( key , destkey , timeout = - [number] ) [EOL] [EOL] [comment] [EOL] result = await redis . brpoplpush ( destkey , key , encoding = [string] ) [EOL] assert result == [string] [EOL] [EOL] [EOL] async def test_brpoplpush_blocking_features ( redis , create_redis , server ) : [EOL] source = [string] [EOL] value = [string] [EOL] destkey = [string] [EOL] other_redis = await create_redis ( server . tcp_address ) [EOL] [comment] [EOL] consumer_task = other_redis . brpoplpush ( source , destkey ) [EOL] producer_task = asyncio . ensure_future ( push_data_with_sleep ( redis , source , value ) ) [EOL] results = await asyncio . gather ( consumer_task , producer_task ) [EOL] assert results [ [number] ] == value [EOL] assert results [ [number] ] == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( destkey , [number] , - [number] ) [EOL] assert test_value == [ value ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] waiter = redis . brpoplpush ( source , destkey , timeout = [number] ) [EOL] test_value = await waiter [EOL] assert test_value is None [EOL] other_redis . close ( ) [EOL] [EOL] [EOL] async def test_lindex ( redis ) : [EOL] key , value = [string] , [string] [EOL] [comment] [EOL] values = [ value . format ( i ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] await redis . rpush ( key , * values ) [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] test_value = await redis . lindex ( key , i ) [EOL] assert test_value == values [ i ] [EOL] [EOL] [comment] [EOL] test_value = await redis . lindex ( key , - [number] ) [EOL] assert test_value == [string] [EOL] [EOL] [comment] [EOL] test_value = await redis . lindex ( [string] + key , [number] ) [EOL] assert test_value is None [EOL] [EOL] [comment] [EOL] await redis . rpush ( key , [string] , [string] ) [EOL] test_value = await redis . lindex ( key , [number] , encoding = [string] ) [EOL] assert test_value == [string] [EOL] test_value = await redis . lindex ( key , [number] , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lindex ( None , - [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lindex ( key , [string] ) [EOL] [EOL] [EOL] async def test_linsert ( redis ) : [EOL] key = [string] [EOL] value1 , value2 , value3 , value4 = [string] , [string] , [string] , [string] [EOL] await redis . rpush ( key , value1 , value2 ) [EOL] [EOL] [comment] [EOL] test_value = await redis . linsert ( key , value2 , value3 , before = True ) [EOL] assert test_value == [number] [EOL] [comment] [EOL] test_value = await redis . linsert ( key , value2 , value4 , before = False ) [EOL] assert test_value == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] expected = [ value1 , value3 , value2 , value4 ] [EOL] assert test_value == expected [EOL] [EOL] [comment] [EOL] test_value = await redis . linsert ( key , [string] , value3 , before = True ) [EOL] assert test_value == - [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . linsert ( None , value1 , value3 ) [EOL] [EOL] [EOL] async def test_llen ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] await redis . rpush ( key , value1 , value2 ) [EOL] [EOL] test_value = await redis . llen ( key ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . llen ( [string] + key ) [EOL] assert test_value == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . llen ( None ) [EOL] [EOL] [EOL] async def test_lpop ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . rpush ( key , value1 , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] test_value = await redis . lpop ( key ) [EOL] assert test_value == value1 [EOL] [comment] [EOL] test_value = await redis . lpop ( key ) [EOL] assert test_value == value2 [EOL] [comment] [EOL] test_value = await redis . lpop ( key ) [EOL] assert test_value is None [EOL] [EOL] [comment] [EOL] await redis . rpush ( key , [string] ) [EOL] test_value = await redis . lpop ( key , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lpop ( None ) [EOL] [EOL] [EOL] async def test_lpush ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . lpush ( key , value1 , value2 ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ value2 , value1 ] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] , encoding = [string] ) [EOL] assert test_value == [ [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lpush ( None , value1 ) [EOL] [EOL] [EOL] async def test_lpushx ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] result = await redis . lpushx ( key , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] result = await redis . lpush ( key , value1 ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . lpushx ( key , value2 ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ value2 , value1 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lpushx ( None , value1 ) [EOL] [EOL] [EOL] async def test_lrange ( redis ) : [EOL] key , value = [string] , [string] [EOL] values = [ value . format ( i ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] await redis . rpush ( key , * values ) [EOL] [EOL] test_value = await redis . lrange ( key , [number] , [number] ) [EOL] assert test_value == values [ [number] : [number] ] [EOL] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == values [EOL] [EOL] test_value = await redis . lrange ( key , - [number] , - [number] ) [EOL] assert test_value == values [ - [number] : ] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( [string] + key , [number] , - [number] ) [EOL] assert test_value == [ ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lrange ( None , [number] , - [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lrange ( key , [string] , - [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lrange ( key , [number] , [string] ) [EOL] [EOL] [EOL] async def test_lrem ( redis ) : [EOL] key , value = [string] , [string] [EOL] values = [ value . format ( i % [number] ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] await redis . rpush ( key , * values ) [EOL] [comment] [EOL] test_value = await redis . lrem ( key , - [number] , [string] ) [EOL] assert test_value == [number] [EOL] [comment] [EOL] test_value = await redis . lrem ( key , [number] , [string] ) [EOL] assert test_value == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrem ( key , [number] , [string] ) [EOL] assert test_value == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrem ( key , [number] , [string] ) [EOL] assert test_value == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lrem ( None , [number] , [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lrem ( key , [string] , [string] ) [EOL] [EOL] [EOL] async def test_lset ( redis ) : [EOL] key , value = [string] , [string] [EOL] values = [ value . format ( i ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] await redis . rpush ( key , * values ) [EOL] [EOL] await redis . lset ( key , [number] , [string] ) [EOL] await redis . lset ( key , - [number] , [string] ) [EOL] await redis . lset ( key , - [number] , [string] ) [EOL] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ [string] , [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lset ( None , [number] , [string] ) [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . lset ( key , [number] , [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . lset ( key , [string] , [string] ) [EOL] [EOL] [EOL] async def test_ltrim ( redis ) : [EOL] key , value = [string] , [string] [EOL] values = [ value . format ( i ) . encode ( [string] ) for i in range ( [number] , [number] ) ] [EOL] await redis . rpush ( key , * values ) [EOL] [EOL] [comment] [EOL] await redis . ltrim ( key , [number] , - [number] ) [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == values [ : - [number] ] [EOL] [comment] [EOL] await redis . ltrim ( key , [number] , [number] ) [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == values [ : [number] ] [EOL] [EOL] [comment] [EOL] res = await redis . ltrim ( key , [number] , [number] ) [EOL] assert res is True [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . ltrim ( None , [number] , - [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . ltrim ( key , [string] , - [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . ltrim ( key , [number] , [string] ) [EOL] [EOL] [EOL] async def test_rpop ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . rpush ( key , value1 , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] test_value = await redis . rpop ( key ) [EOL] assert test_value == value2 [EOL] [comment] [EOL] test_value = await redis . rpop ( key ) [EOL] assert test_value == value1 [EOL] [comment] [EOL] test_value = await redis . rpop ( key ) [EOL] assert test_value is None [EOL] [EOL] [comment] [EOL] await redis . rpush ( key , [string] ) [EOL] test_value = await redis . rpop ( key , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rpop ( None ) [EOL] [EOL] [EOL] async def test_rpoplpush ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] destkey = [string] [EOL] [EOL] [comment] [EOL] await redis . rpush ( key , value1 , value2 ) [EOL] [EOL] [comment] [EOL] result = await redis . rpoplpush ( key , destkey ) [EOL] assert result == value2 [EOL] [comment] [EOL] result = await redis . rpoplpush ( key , destkey ) [EOL] assert result == value1 [EOL] [EOL] [comment] [EOL] result = await redis . lrange ( destkey , [number] , - [number] ) [EOL] assert result == [ value1 , value2 ] [EOL] [EOL] [comment] [EOL] result = await redis . rpoplpush ( destkey , key , encoding = [string] ) [EOL] assert result == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rpoplpush ( None , destkey ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rpoplpush ( key , None ) [EOL] [EOL] [EOL] async def test_rpush ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] result = await redis . rpush ( key , value1 , value2 ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ value1 , value2 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rpush ( None , value1 ) [EOL] [EOL] [EOL] async def test_rpushx ( redis ) : [EOL] key = [string] [EOL] value1 , value2 = [string] , [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] result = await redis . rpushx ( key , value2 ) [EOL] assert result == [number] [EOL] [comment] [EOL] result = await redis . rpush ( key , value1 ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . rpushx ( key , value2 ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . lrange ( key , [number] , - [number] ) [EOL] assert test_value == [ value1 , value2 ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rpushx ( None , value1 ) [EOL]	
from typing import Any [EOL] import typing [EOL] import aioredis [EOL] import unittest [EOL] import asyncio [EOL] import asyncio [EOL] from unittest import mock [EOL] from contextlib import contextmanager [EOL] [EOL] from aioredis . commands import MultiExec [EOL] from aioredis . commands import Redis [EOL] [EOL] [EOL] @ contextmanager def nullcontext ( result ) : [EOL] yield result [EOL] [EOL] [EOL] def test_global_loop ( ) : [EOL] conn = mock . Mock ( spec = ( [string] . split ( ) ) ) [EOL] try : [EOL] old_loop = asyncio . get_event_loop ( ) [EOL] except ( AssertionError , RuntimeError ) : [EOL] old_loop = None [EOL] loop = asyncio . new_event_loop ( ) [EOL] asyncio . set_event_loop ( loop ) [EOL] [EOL] tr = MultiExec ( conn , commands_factory = Redis ) [EOL] [comment] [EOL] [EOL] def make_fut ( cmd , * args , ** kw ) : [EOL] fut = asyncio . get_event_loop ( ) . create_future ( ) [EOL] if cmd == [string] : [EOL] fut . set_result ( [string] ) [EOL] elif cmd == [string] : [EOL] fut . set_result ( [ [string] ] ) [EOL] else : [EOL] fut . set_result ( [string] ) [EOL] return fut [EOL] [EOL] conn . execute . side_effect = make_fut [EOL] conn . closed = False [EOL] conn . _transaction_error = None [EOL] conn . _buffered . side_effect = lambda : nullcontext ( conn ) [EOL] [EOL] async def go ( ) : [EOL] tr . ping ( ) [EOL] res = await tr . execute ( ) [EOL] assert res == [ [string] ] [EOL] loop . run_until_complete ( go ( ) ) [EOL] asyncio . set_event_loop ( old_loop ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , Type [EOL] import typing [EOL] import aioredis [EOL] import pytest [EOL] import asyncio [EOL] [EOL] from aioredis import ConnectionClosedError , ReplyError [EOL] from aioredis . pool import ConnectionsPool [EOL] from aioredis import Redis [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def test_repr ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address , db = [number] ) [EOL] assert repr ( redis ) in { [string] , [string] , } [EOL] [EOL] redis = await create_redis ( server . tcp_address , db = [number] ) [EOL] assert repr ( redis ) in { [string] , [string] , } [EOL] [EOL] [EOL] async def test_auth ( redis ) : [EOL] expected_message = [string] [EOL] with pytest . raises ( ReplyError , match = expected_message ) : [EOL] await redis . auth ( [string] ) [EOL] [EOL] [EOL] async def test_echo ( redis ) : [EOL] resp = await redis . echo ( [string] ) [EOL] assert resp == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . echo ( None ) [EOL] [EOL] [EOL] async def test_ping ( redis ) : [EOL] assert await redis . ping ( ) == [string] [EOL] [EOL] [EOL] async def test_quit ( redis ) : [EOL] expected = ( ConnectionClosedError , ConnectionError ) [EOL] try : [EOL] assert [string] == await redis . quit ( ) [EOL] except expected : [EOL] pass [EOL] [EOL] if not isinstance ( redis . connection , ConnectionsPool ) : [EOL] [comment] [EOL] [comment] [EOL] with pytest . raises ( expected ) : [EOL] try : [EOL] await redis . ping ( ) [EOL] except asyncio . CancelledError : [EOL] assert False , [string] [EOL] [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] assert redis . connection . closed [EOL] [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await redis . ping ( ) [EOL] [EOL] [EOL] async def test_select ( redis ) : [EOL] assert redis . db == [number] [EOL] [EOL] resp = await redis . select ( [number] ) [EOL] assert resp is True [EOL] assert redis . db == [number] [EOL] assert redis . connection . db == [number] [EOL] [EOL] [EOL] async def test_encoding ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address , db = [number] , encoding = [string] ) [EOL] assert redis . encoding == [string] [EOL] [EOL] [EOL] async def test_yield_from_backwards_compatibility ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address ) [EOL] [EOL] assert isinstance ( redis , Redis ) [EOL] [comment] [EOL] [comment] [EOL] with await redis as client : [EOL] assert isinstance ( client , Redis ) [EOL] assert client is not redis [EOL] assert await client . ping ( ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_swapdb ( create_redis , start_server ) : [EOL] server = start_server ( [string] ) [EOL] cli1 = await create_redis ( server . tcp_address , db = [number] ) [EOL] cli2 = await create_redis ( server . tcp_address , db = [number] ) [EOL] [EOL] await cli1 . flushall ( ) [EOL] assert await cli1 . set ( [string] , [string] ) is True [EOL] assert await cli1 . exists ( [string] ) [EOL] assert not await cli2 . exists ( [string] ) [EOL] [EOL] assert await cli1 . swapdb ( [number] , [number] ) is True [EOL] assert not await cli1 . exists ( [string] ) [EOL] assert await cli2 . exists ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import aioredis [EOL] import pytest [EOL] [EOL] from aioredis . stream import StreamReader [EOL] from aioredis . parser import PyReader [EOL] from aioredis . errors import ( ProtocolError , ReplyError ) [EOL] [EOL] [EOL] @ pytest . fixture def reader ( loop ) : [EOL] reader = StreamReader ( loop = loop ) [EOL] reader . set_parser ( PyReader ( protocolError = ProtocolError , replyError = ReplyError ) ) [EOL] return reader [EOL] [EOL] [EOL] async def test_feed_and_parse ( reader ) : [EOL] reader . feed_data ( [string] ) [EOL] assert ( await reader . readobj ( ) ) == [string] [EOL] [EOL] [EOL] async def test_buffer_available_after_RST ( reader ) : [EOL] reader . feed_data ( [string] ) [EOL] reader . set_exception ( Exception ( ) ) [EOL] assert ( await reader . readobj ( ) ) == [string] [EOL] with pytest . raises ( Exception ) : [EOL] await reader . readobj ( ) [EOL] [EOL] [EOL] def test_feed_with_eof ( reader ) : [EOL] reader . feed_eof ( ) [EOL] with pytest . raises ( AssertionError ) : [EOL] reader . feed_data ( [string] ) [EOL] [EOL] [EOL] def test_feed_no_data ( reader ) : [EOL] assert not reader . feed_data ( None ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] ] ) async def test_read_flavors_not_supported ( reader , read_method ) : [EOL] with pytest . raises ( RuntimeError ) : [EOL] await getattr ( reader , read_method ) ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Tuple , Any , Literal , List [EOL] import typing [EOL] import asyncio [EOL] import typing_extensions [EOL] import aioredis [EOL] import unittest [EOL] import pytest [EOL] import asyncio [EOL] import json [EOL] import sys [EOL] import logging [EOL] [EOL] from unittest import mock [EOL] [EOL] from aioredis import ChannelClosedError [EOL] from aioredis . abc import AbcChannel [EOL] from aioredis . pubsub import Receiver , _Sender [EOL] [EOL] [EOL] def test_listener_channel ( ) : [EOL] mpsc = Receiver ( ) [EOL] assert not mpsc . is_active [EOL] [EOL] ch_a = mpsc . channel ( [string] ) [EOL] assert isinstance ( ch_a , AbcChannel ) [EOL] assert mpsc . is_active [EOL] [EOL] ch_b = mpsc . channel ( [string] ) [EOL] assert ch_a is ch_b [EOL] assert ch_a . name == ch_b . name [EOL] assert ch_a . is_pattern == ch_b . is_pattern [EOL] assert mpsc . is_active [EOL] [EOL] [comment] [EOL] ch_a . close ( ) [EOL] assert not ch_a . is_active [EOL] [EOL] assert not mpsc . is_active [EOL] ch = mpsc . channel ( [string] ) [EOL] assert ch is not ch_a [EOL] [EOL] assert dict ( mpsc . channels ) == { [string] : ch } [EOL] assert dict ( mpsc . patterns ) == { } [EOL] [EOL] [EOL] def test_listener_pattern ( ) : [EOL] mpsc = Receiver ( ) [EOL] assert not mpsc . is_active [EOL] [EOL] ch_a = mpsc . pattern ( [string] ) [EOL] assert isinstance ( ch_a , AbcChannel ) [EOL] assert mpsc . is_active [EOL] [EOL] ch_b = mpsc . pattern ( [string] ) [EOL] assert ch_a is ch_b [EOL] assert ch_a . name == ch_b . name [EOL] assert ch_a . is_pattern == ch_b . is_pattern [EOL] assert mpsc . is_active [EOL] [EOL] [comment] [EOL] ch_a . close ( ) [EOL] assert not ch_a . is_active [EOL] [EOL] assert not mpsc . is_active [EOL] ch = mpsc . pattern ( [string] ) [EOL] assert ch is not ch_a [EOL] [EOL] assert dict ( mpsc . channels ) == { } [EOL] assert dict ( mpsc . patterns ) == { [string] : ch } [EOL] [EOL] [EOL] async def test_sender ( ) : [EOL] receiver = mock . Mock ( ) [EOL] [EOL] sender = _Sender ( receiver , [string] , is_pattern = False ) [EOL] assert isinstance ( sender , AbcChannel ) [EOL] assert sender . name == [string] [EOL] assert sender . is_pattern is False [EOL] assert sender . is_active is True [EOL] [EOL] with pytest . raises ( RuntimeError ) : [EOL] await sender . get ( ) [EOL] assert receiver . mock_calls == [ ] [EOL] [EOL] sender . put_nowait ( [string] ) [EOL] assert receiver . mock_calls == [ mock . call . _put_nowait ( [string] , sender = sender ) , ] [EOL] [EOL] [EOL] def test_sender_close ( ) : [EOL] receiver = mock . Mock ( ) [EOL] sender = _Sender ( receiver , [string] , is_pattern = False ) [EOL] sender . close ( ) [EOL] assert receiver . mock_calls == [ mock . call . _close ( sender , exc = None ) ] [EOL] sender . close ( ) [EOL] assert receiver . mock_calls == [ mock . call . _close ( sender , exc = None ) ] [EOL] receiver . reset_mock ( ) [EOL] assert receiver . mock_calls == [ ] [EOL] sender . close ( ) [EOL] assert receiver . mock_calls == [ ] [EOL] [EOL] [EOL] async def test_subscriptions ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] pub = await create_connection ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] await sub . execute_pubsub ( [string] , mpsc . channel ( [string] ) , mpsc . channel ( [string] ) ) [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] assert mpsc . is_active [EOL] [EOL] ch , msg = await mpsc . get ( ) [EOL] assert ch . name == [string] [EOL] assert not ch . is_pattern [EOL] assert msg == [string] [EOL] [EOL] ch , msg = await mpsc . get ( ) [EOL] assert ch . name == [string] [EOL] assert not ch . is_pattern [EOL] assert msg == [string] [EOL] [EOL] [EOL] async def test_unsubscribe ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] pub = await create_connection ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] await sub . execute_pubsub ( [string] , mpsc . channel ( [string] ) , mpsc . channel ( [string] ) ) [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] assert mpsc . is_active [EOL] [EOL] assert ( await mpsc . wait_message ( ) ) is True [EOL] ch , msg = await mpsc . get ( ) [EOL] assert ch . name == [string] [EOL] assert not ch . is_pattern [EOL] assert msg == [string] [EOL] [EOL] assert ( await mpsc . wait_message ( ) ) is True [EOL] ch , msg = await mpsc . get ( ) [EOL] assert ch . name == [string] [EOL] assert not ch . is_pattern [EOL] assert msg == [string] [EOL] [EOL] await sub . execute_pubsub ( [string] , [string] ) [EOL] assert mpsc . is_active [EOL] [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] assert ( await mpsc . wait_message ( ) ) is True [EOL] ch , msg = await mpsc . get ( ) [EOL] assert ch . name == [string] [EOL] assert not ch . is_pattern [EOL] assert msg == [string] [EOL] [EOL] waiter = asyncio . ensure_future ( mpsc . get ( ) ) [EOL] await sub . execute_pubsub ( [string] , [string] ) [EOL] assert not mpsc . is_active [EOL] assert await waiter is None [EOL] [EOL] [EOL] async def test_stopped ( create_connection , server , caplog ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] pub = await create_connection ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] await sub . execute_pubsub ( [string] , mpsc . channel ( [string] ) ) [EOL] assert mpsc . is_active [EOL] mpsc . stop ( ) [EOL] [EOL] caplog . clear ( ) [EOL] with caplog . at_level ( [string] , [string] ) : [EOL] await pub . execute ( [string] , [string] , [string] ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert len ( caplog . record_tuples ) == [number] [EOL] [comment] [EOL] message = ( [string] [string] [string] ) [EOL] assert caplog . record_tuples == [ ( [string] , logging . WARNING , message ) , ] [EOL] [EOL] [comment] [EOL] with pytest . raises ( ChannelClosedError ) : [EOL] await mpsc . get ( ) [EOL] res = await mpsc . wait_message ( ) [EOL] assert res is False [EOL] [EOL] [EOL] async def test_wait_message ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] pub = await create_connection ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] await sub . execute_pubsub ( [string] , mpsc . channel ( [string] ) ) [EOL] fut = asyncio . ensure_future ( mpsc . wait_message ( ) ) [EOL] assert not fut . done ( ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert not fut . done ( ) [EOL] [EOL] await pub . execute ( [string] , [string] , [string] ) [EOL] await asyncio . sleep ( [number] ) [comment] [EOL] await asyncio . sleep ( [number] ) [comment] [EOL] assert fut . done ( ) [EOL] res = await fut [EOL] assert res is True [EOL] [EOL] [EOL] async def test_decode_message ( ) : [EOL] mpsc = Receiver ( ) [EOL] ch = mpsc . channel ( [string] ) [EOL] ch . put_nowait ( [string] ) [EOL] [EOL] res = await mpsc . get ( encoding = [string] ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == [string] [EOL] [EOL] ch . put_nowait ( [string] ) [EOL] res = await mpsc . get ( decoder = json . loads ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == { [string] : [string] } [EOL] [EOL] ch . put_nowait ( [string] ) [EOL] res = await mpsc . get ( encoding = [string] , decoder = json . loads ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == { [string] : [string] } [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . version_info >= ( [number] , [number] ) , reason = [string] ) async def test_decode_message_error ( ) : [EOL] mpsc = Receiver ( ) [EOL] ch = mpsc . channel ( [string] ) [EOL] [EOL] ch . put_nowait ( [string] ) [EOL] unexpected = ( mock . ANY , { [string] : [string] } ) [EOL] with pytest . raises ( TypeError ) : [EOL] assert ( await mpsc . get ( decoder = json . loads ) ) == unexpected [EOL] [EOL] ch = mpsc . pattern ( [string] ) [EOL] ch . put_nowait ( ( [string] , [string] ) ) [EOL] unexpected = ( mock . ANY , [string] , { [string] : [string] } ) [EOL] with pytest . raises ( TypeError ) : [EOL] assert ( await mpsc . get ( decoder = json . loads ) ) == unexpected [EOL] [EOL] [EOL] async def test_decode_message_for_pattern ( ) : [EOL] mpsc = Receiver ( ) [EOL] ch = mpsc . pattern ( [string] ) [EOL] ch . put_nowait ( ( [string] , [string] ) ) [EOL] [EOL] res = await mpsc . get ( encoding = [string] ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == ( [string] , [string] ) [EOL] [EOL] ch . put_nowait ( ( [string] , [string] ) ) [EOL] res = await mpsc . get ( decoder = json . loads ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == ( [string] , { [string] : [string] } ) [EOL] [EOL] ch . put_nowait ( ( [string] , [string] ) ) [EOL] res = await mpsc . get ( encoding = [string] , decoder = json . loads ) [EOL] assert isinstance ( res [ [number] ] , _Sender ) [EOL] assert res [ [number] ] == ( [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] async def test_pubsub_receiver_iter ( create_redis , server , loop ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] [EOL] async def coro ( mpsc ) : [EOL] lst = [ ] [EOL] async for msg in mpsc . iter ( ) : [EOL] lst . append ( msg ) [EOL] return lst [EOL] [EOL] tsk = asyncio . ensure_future ( coro ( mpsc ) ) [EOL] snd1 , = await sub . subscribe ( mpsc . channel ( [string] ) ) [EOL] snd2 , = await sub . subscribe ( mpsc . channel ( [string] ) ) [EOL] snd3 , = await sub . psubscribe ( mpsc . pattern ( [string] ) ) [EOL] [EOL] subscribers = await pub . publish_json ( [string] , { [string] : [string] } ) [EOL] assert subscribers > [number] [EOL] subscribers = await pub . publish_json ( [string] , [ [string] ] ) [EOL] assert subscribers > [number] [EOL] loop . call_later ( [number] , mpsc . stop ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert await tsk == [ ( snd1 , [string] ) , ( snd3 , ( [string] , [string] ) ) , ( snd2 , [string] ) , ( snd3 , ( [string] , [string] ) ) , ] [EOL] assert not mpsc . is_active [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_pubsub_receiver_call_stop_with_empty_queue ( create_redis , server , loop ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] [EOL] mpsc = Receiver ( ) [EOL] [EOL] [comment] [EOL] snd1 , = await sub . subscribe ( mpsc . channel ( [string] ) ) [EOL] [EOL] now = loop . time ( ) [EOL] loop . call_later ( [number] , mpsc . stop ) [EOL] async for i in mpsc . iter ( ) : [comment] [EOL] assert False , [string] [EOL] dt = loop . time ( ) - now [EOL] assert dt <= [number] [EOL] assert not mpsc . is_active [EOL] [EOL] [EOL] async def test_pubsub_receiver_stop_on_disconnect ( create_redis , server ) : [EOL] pub = await create_redis ( server . tcp_address ) [EOL] sub = await create_redis ( server . tcp_address ) [EOL] sub_name = [string] . format ( id ( sub ) ) [EOL] await sub . client_setname ( sub_name ) [EOL] for sub_info in await pub . client_list ( ) : [EOL] if sub_info . name == sub_name : [EOL] break [EOL] assert sub_info . name == sub_name [EOL] [EOL] mpsc = Receiver ( ) [EOL] await sub . subscribe ( mpsc . channel ( [string] ) ) [EOL] await sub . subscribe ( mpsc . channel ( [string] ) ) [EOL] await sub . psubscribe ( mpsc . pattern ( [string] ) ) [EOL] [EOL] q = asyncio . Queue ( ) [EOL] EOF = object ( ) [EOL] [EOL] async def reader ( ) : [EOL] async for ch , msg in mpsc . iter ( encoding = [string] ) : [EOL] await q . put ( ( ch . name , msg ) ) [EOL] await q . put ( EOF ) [EOL] [EOL] tsk = asyncio . ensure_future ( reader ( ) ) [EOL] await pub . publish_json ( [string] , [ [string] ] ) [EOL] await pub . publish_json ( [string] , [ [string] ] ) [EOL] [comment] [EOL] assert await q . get ( ) == ( [string] , [string] ) [EOL] assert await q . get ( ) == ( [string] , ( [string] , [string] ) ) [EOL] assert await q . get ( ) == ( [string] , [string] ) [EOL] assert await q . get ( ) == ( [string] , ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert await pub . execute ( [string] , [string] , sub_info . addr ) in ( [string] , [number] ) [EOL] await asyncio . wait_for ( tsk , timeout = [number] ) [EOL] assert await q . get ( ) is EOF [EOL]	
from typing import Literal , Dict , List , Any [EOL] import typing [EOL] import typing_extensions [EOL] import asyncio [EOL] import pytest [EOL] [EOL] from aioredis import ReplyError [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def add ( redis , key , value ) : [EOL] ok = await redis . set ( key , value ) [EOL] assert ok is True [EOL] [EOL] [EOL] async def test_append ( redis ) : [EOL] len_ = await redis . append ( [string] , [string] ) [EOL] assert len_ == [number] [EOL] len_ = await redis . append ( [string] , [string] ) [EOL] assert len_ == [number] [EOL] [EOL] val = await redis . connection . execute ( [string] , [string] ) [EOL] assert val == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . append ( None , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . append ( [string] , None ) [EOL] [EOL] [EOL] async def test_bitcount ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] [EOL] ret = await redis . bitcount ( [string] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , [number] ) [EOL] assert ret == [number] [EOL] ret = await redis . bitcount ( [string] , [number] , - [number] ) [EOL] assert ret == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitcount ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitcount ( [string] , None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitcount ( [string] , [number] , None ) [EOL] [EOL] [EOL] async def test_bitop_and ( redis ) : [EOL] key1 , value1 = [string] , [number] [EOL] key2 , value2 = [string] , [number] [EOL] [EOL] await add ( redis , key1 , value1 ) [EOL] await add ( redis , key2 , value2 ) [EOL] [EOL] destkey = [string] [EOL] [EOL] await redis . bitop_and ( destkey , key1 , key2 ) [EOL] test_value = await redis . get ( destkey ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_and ( None , key1 , key2 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_and ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_and ( destkey , key1 , None ) [EOL] [EOL] [EOL] async def test_bitop_or ( redis ) : [EOL] key1 , value1 = [string] , [number] [EOL] key2 , value2 = [string] , [number] [EOL] [EOL] await add ( redis , key1 , value1 ) [EOL] await add ( redis , key2 , value2 ) [EOL] [EOL] destkey = [string] [EOL] [EOL] await redis . bitop_or ( destkey , key1 , key2 ) [EOL] test_value = await redis . get ( destkey ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_or ( None , key1 , key2 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_or ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_or ( destkey , key1 , None ) [EOL] [EOL] [EOL] async def test_bitop_xor ( redis ) : [EOL] key1 , value1 = [string] , [number] [EOL] key2 , value2 = [string] , [number] [EOL] [EOL] await add ( redis , key1 , value1 ) [EOL] await add ( redis , key2 , value2 ) [EOL] [EOL] destkey = [string] [EOL] [EOL] await redis . bitop_xor ( destkey , key1 , key2 ) [EOL] test_value = await redis . get ( destkey ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_xor ( None , key1 , key2 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_xor ( destkey , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_xor ( destkey , key1 , None ) [EOL] [EOL] [EOL] async def test_bitop_not ( redis ) : [EOL] key1 , value1 = [string] , [number] [EOL] await add ( redis , key1 , value1 ) [EOL] [EOL] destkey = [string] [EOL] [EOL] await redis . bitop_not ( destkey , key1 ) [EOL] res = await redis . get ( destkey ) [EOL] assert res == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_not ( None , key1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . bitop_not ( destkey , None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_bitpos ( redis ) : [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] test_value = await redis . bitpos ( key , [number] , end = [number] ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . bitpos ( key , [number] , [number] , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] test_value = await redis . bitpos ( key , [number] , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . bitpos ( key , [number] , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] test_value = await redis . bitpos ( key , [number] , [number] ) [EOL] assert test_value == - [number] [EOL] [EOL] test_value = await redis . bitpos ( [string] + key , [number] ) [EOL] assert test_value == - [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] test_value = await redis . bitpos ( None , [number] ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] test_value = await redis . bitpos ( key , [number] ) [EOL] [EOL] [EOL] async def test_decr ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . decr ( [string] ) [EOL] assert res == - [number] [EOL] res = await redis . decr ( [string] ) [EOL] assert res == - [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . decr ( [string] ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await redis . decr ( [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . decr ( None ) [EOL] [EOL] [EOL] async def test_decrby ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . decrby ( [string] , [number] ) [EOL] assert res == - [number] [EOL] res = await redis . decrby ( [string] , [number] ) [EOL] assert res == - [number] [EOL] res = await redis . decrby ( [string] , - [number] ) [EOL] assert res == - [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . decrby ( [string] , [number] ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await redis . decrby ( [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . decrby ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . decrby ( [string] , None ) [EOL] [EOL] [EOL] async def test_get ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] ret = await redis . get ( [string] ) [EOL] assert ret == [string] [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] ret = await redis . get ( [string] ) [EOL] assert ret == [string] [EOL] [EOL] ret = await redis . get ( [string] ) [EOL] assert ret is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . get ( None ) [EOL] [EOL] [EOL] async def test_getbit ( redis ) : [EOL] key , value = [string] , [number] [EOL] await add ( redis , key , value ) [EOL] [EOL] result = await redis . setbit ( key , [number] , [number] ) [EOL] assert result == [number] [EOL] [EOL] test_value = await redis . getbit ( key , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . getbit ( key , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . getbit ( [string] + key , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . getbit ( key , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getbit ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getbit ( key , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . getbit ( key , - [number] ) [EOL] [EOL] [EOL] async def test_getrange ( redis ) : [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] [EOL] test_value = await redis . getrange ( key , [number] , [number] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getrange ( key , - [number] , - [number] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getrange ( key , [number] , - [number] ) [EOL] assert test_value == [string] [EOL] test_value = await redis . getrange ( key , [number] , - [number] , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getrange ( key , [number] , [number] ) [EOL] assert test_value == [string] [EOL] test_value = await redis . getrange ( key , [number] , [number] , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getrange ( key , [number] , [number] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getrange ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getrange ( key , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getrange ( key , [number] , [string] ) [EOL] [EOL] [EOL] async def test_getset ( redis ) : [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] [EOL] test_value = await redis . getset ( key , [string] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . get ( key ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getset ( key , [string] , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . getset ( [string] + key , [string] ) [EOL] assert test_value is None [EOL] [EOL] test_value = await redis . get ( [string] + key ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . getset ( None , [string] ) [EOL] [EOL] [EOL] async def test_incr ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . incr ( [string] ) [EOL] assert res == [number] [EOL] res = await redis . incr ( [string] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . incr ( [string] ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await redis . incr ( [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incr ( None ) [EOL] [EOL] [EOL] async def test_incrby ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . incrby ( [string] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . incrby ( [string] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . incrby ( [string] , - [number] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . incrby ( [string] , [number] ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await redis . incrby ( [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrby ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrby ( [string] , None ) [EOL] [EOL] [EOL] async def test_incrbyfloat ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . incrbyfloat ( [string] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . incrbyfloat ( [string] , [number] ) [EOL] assert res == [number] [EOL] res = await redis . incrbyfloat ( [string] , - [number] ) [EOL] assert res == [number] [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . incrbyfloat ( [string] , [number] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . incrbyfloat ( [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrbyfloat ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrbyfloat ( [string] , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrbyfloat ( [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . incrbyfloat ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_mget ( redis ) : [EOL] key1 , value1 = [string] , [string] [EOL] key2 , value2 = [string] , [string] [EOL] await add ( redis , key1 , value1 ) [EOL] await add ( redis , key2 , value2 ) [EOL] [EOL] res = await redis . mget ( [string] ) [EOL] assert res == [ None ] [EOL] res = await redis . mget ( [string] , [string] ) [EOL] assert res == [ None , None ] [EOL] [EOL] res = await redis . mget ( key1 , key2 ) [EOL] assert res == [ value1 , value2 ] [EOL] [EOL] [comment] [EOL] res = await redis . mget ( key1 , key2 , encoding = [string] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . mget ( None , key2 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . mget ( key1 , None ) [EOL] [EOL] [EOL] async def test_mset ( redis ) : [EOL] key1 , value1 = [string] , [string] [EOL] key2 , value2 = [string] , [string] [EOL] [EOL] await redis . mset ( key1 , value1 , key2 , value2 ) [EOL] [EOL] test_value = await redis . mget ( key1 , key2 ) [EOL] assert test_value == [ value1 , value2 ] [EOL] [EOL] await redis . mset ( [string] + key1 , [string] + value1 ) [EOL] test_value = await redis . get ( [string] + key1 ) [EOL] assert test_value == [string] + value1 [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . mset ( None , value1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . mset ( key1 , value1 , key1 ) [EOL] [EOL] [EOL] async def test_mset_with_dict ( redis ) : [EOL] array = [ str ( n ) for n in range ( [number] ) ] [EOL] _dict = dict . fromkeys ( array , [string] , ) [EOL] [EOL] await redis . mset ( _dict ) [EOL] [EOL] test_values = await redis . mget ( * _dict . keys ( ) ) [EOL] assert test_values == [ str . encode ( val ) for val in _dict . values ( ) ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . mset ( [string] , ) [EOL] [EOL] [EOL] async def test_msetnx ( redis ) : [EOL] key1 , value1 = [string] , [string] [EOL] key2 , value2 = [string] , [string] [EOL] key3 , value3 = [string] , [string] [EOL] [EOL] res = await redis . msetnx ( key1 , value1 , key2 , value2 ) [EOL] assert res == [number] [EOL] res = await redis . mget ( key1 , key2 ) [EOL] assert res == [ value1 , value2 ] [EOL] res = await redis . msetnx ( key2 , value2 , key3 , value3 ) [EOL] assert res == [number] [EOL] res = await redis . mget ( key1 , key2 , key3 ) [EOL] assert res == [ value1 , value2 , None ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . msetnx ( None , value1 ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . msetnx ( key1 , value1 , key2 ) [EOL] [EOL] [EOL] async def test_psetex ( redis ) : [EOL] key , value = [string] , [string] [EOL] [comment] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . psetex ( key , [number] , value ) [EOL] fut2 = tr . get ( key ) [EOL] await tr . execute ( ) [EOL] await fut1 [EOL] test_value = await fut2 [EOL] assert test_value == value [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] test_value = await redis . get ( key ) [EOL] assert test_value is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . psetex ( None , [number] , value ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . psetex ( key , [number] , value ) [EOL] [EOL] [EOL] async def test_set ( redis ) : [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok is True [EOL] [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok is True [EOL] [EOL] ok = await redis . set ( bytearray ( [string] ) , bytearray ( [string] ) ) [EOL] assert ok is True [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . set ( None , [string] ) [EOL] [EOL] [EOL] async def test_set_expire ( redis ) : [EOL] key , value = [string] , [string] [EOL] [comment] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . set ( key , value , pexpire = [number] ) [EOL] fut2 = tr . get ( key ) [EOL] await tr . execute ( ) [EOL] await fut1 [EOL] result_1 = await fut2 [EOL] assert result_1 == value [EOL] await asyncio . sleep ( [number] ) [EOL] result_2 = await redis . get ( key ) [EOL] assert result_2 is None [EOL] [EOL] [comment] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . set ( key , value , expire = [number] ) [EOL] fut2 = tr . get ( key ) [EOL] await tr . execute ( ) [EOL] await fut1 [EOL] result_3 = await fut2 [EOL] assert result_3 == value [EOL] await asyncio . sleep ( [number] ) [EOL] result_4 = await redis . get ( key ) [EOL] assert result_4 is None [EOL] [EOL] [EOL] async def test_set_only_if_not_exists ( redis ) : [EOL] key , value = [string] , [string] [EOL] await redis . set ( key , value , exist = redis . SET_IF_NOT_EXIST ) [EOL] result_1 = await redis . get ( key ) [EOL] assert result_1 == value [EOL] [EOL] [comment] [EOL] await redis . set ( key , [string] , exist = redis . SET_IF_NOT_EXIST ) [EOL] result_2 = await redis . get ( key ) [EOL] [comment] [EOL] assert result_2 == value [EOL] [EOL] [EOL] async def test_set_only_if_exists ( redis ) : [EOL] key , value = [string] , [string] [EOL] [comment] [EOL] await redis . delete ( key ) [EOL] await redis . set ( key , value , exist = redis . SET_IF_EXIST ) [EOL] result_1 = await redis . get ( key ) [EOL] assert result_1 is None [EOL] [EOL] [comment] [EOL] await redis . set ( key , value ) [EOL] await redis . set ( key , [string] , exist = redis . SET_IF_EXIST ) [EOL] result_2 = await redis . get ( key ) [EOL] assert result_2 == [string] [EOL] [EOL] [EOL] async def test_set_wrong_input ( redis ) : [EOL] key , value = [string] , [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . set ( None , value ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . set ( key , value , expire = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . set ( key , value , pexpire = [number] ) [EOL] [EOL] [EOL] async def test_setbit ( redis ) : [EOL] key = [string] [EOL] result = await redis . setbit ( key , [number] , [number] ) [EOL] assert result == [number] [EOL] test_value = await redis . getbit ( key , [number] ) [EOL] assert test_value == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setbit ( None , [number] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setbit ( key , [number] , [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . setbit ( key , - [number] , [number] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . setbit ( key , [number] , [number] ) [EOL] [EOL] [EOL] async def test_setex ( redis ) : [EOL] key , value = [string] , [string] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . setex ( key , [number] , value ) [EOL] fut2 = tr . get ( key ) [EOL] await tr . execute ( ) [EOL] await fut1 [EOL] test_value = await fut2 [EOL] assert test_value == value [EOL] await asyncio . sleep ( [number] ) [EOL] test_value = await redis . get ( key ) [EOL] assert test_value is None [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . setex ( key , [number] , value ) [EOL] fut2 = tr . get ( key ) [EOL] await tr . execute ( ) [EOL] await fut1 [EOL] test_value = await fut2 [EOL] assert test_value == value [EOL] await asyncio . sleep ( [number] ) [EOL] test_value = await redis . get ( key ) [EOL] assert test_value is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setex ( None , [number] , value ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setex ( key , [string] , value ) [EOL] [EOL] [EOL] async def test_setnx ( redis ) : [EOL] key , value = [string] , [string] [EOL] [comment] [EOL] test_value = await redis . setnx ( key , value ) [EOL] [comment] [EOL] assert test_value == [number] [EOL] [comment] [EOL] test_value = await redis . get ( key ) [EOL] assert test_value == value [EOL] [comment] [EOL] test_value = await redis . setnx ( key , [string] + value ) [EOL] [comment] [EOL] assert test_value == [number] [EOL] [comment] [EOL] test_value = await redis . get ( key ) [EOL] assert test_value == value [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setnx ( None , value ) [EOL] [EOL] [EOL] async def test_setrange ( redis ) : [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] test_value = await redis . setrange ( key , [number] , [string] ) [EOL] assert test_value == [number] [EOL] test_value = await redis . get ( key ) [EOL] assert test_value == [string] [EOL] [EOL] test_value = await redis . setrange ( [string] + key , [number] , [string] ) [EOL] assert test_value == [number] [EOL] test_value = await redis . get ( [string] + key ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setrange ( None , [number] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . setrange ( key , [number] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . setrange ( key , - [number] , [string] ) [EOL] [EOL] [EOL] async def test_strlen ( redis ) : [EOL] key , value = [string] , [string] [EOL] await add ( redis , key , value ) [EOL] test_value = await redis . strlen ( key ) [EOL] assert test_value == len ( value ) [EOL] [EOL] test_value = await redis . strlen ( [string] + key ) [EOL] assert test_value == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . strlen ( None ) [EOL] [EOL] [EOL] async def test_cancel_hang ( redis ) : [EOL] exists_coro = redis . execute ( [string] , [string] ) [EOL] exists_coro . cancel ( ) [EOL] exists_check = await redis . exists ( [string] ) [EOL] assert not exists_check [EOL] [EOL] [EOL] async def test_set_enc ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address , encoding = [string] ) [EOL] TEST_KEY = [string] [EOL] ok = await redis . set ( TEST_KEY , [string] ) [EOL] assert ok is True [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . set ( None , [string] ) [EOL] [EOL] await redis . delete ( TEST_KEY ) [EOL]	
from typing import Union , Tuple , Any , Type , List [EOL] import typing [EOL] import aioredis [EOL] import unittest [EOL] import asyncio [EOL] import pytest [EOL] import asyncio [EOL] import sys [EOL] from unittest import mock [EOL] [EOL] from unittest . mock import patch [EOL] [EOL] from aioredis import ( ConnectionClosedError , ProtocolError , RedisConnection , RedisError , ReplyError , Channel , MaxClientsError , ) [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def test_connect_tcp ( request , create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] assert conn . db == [number] [EOL] assert isinstance ( conn . address , tuple ) [EOL] assert conn . address [ [number] ] in ( [string] , [string] ) [EOL] assert conn . address [ [number] ] == server . tcp_address . port [EOL] assert str ( conn ) == [string] [EOL] [EOL] conn = await create_connection ( [ [string] , server . tcp_address . port ] ) [EOL] assert conn . db == [number] [EOL] assert isinstance ( conn . address , tuple ) [EOL] assert conn . address [ [number] ] in ( [string] , [string] ) [EOL] assert conn . address [ [number] ] == server . tcp_address . port [EOL] assert str ( conn ) == [string] [EOL] [EOL] [EOL] async def test_connect_inject_connection_cls ( request , create_connection , server ) : [EOL] [EOL] class MyConnection ( RedisConnection ) : [EOL] pass [EOL] [EOL] conn = await create_connection ( server . tcp_address , connection_cls = MyConnection ) [EOL] [EOL] assert isinstance ( conn , MyConnection ) [EOL] [EOL] [EOL] async def test_connect_inject_connection_cls_invalid ( request , create_connection , server ) : [EOL] [EOL] with pytest . raises ( AssertionError ) : [EOL] await create_connection ( server . tcp_address , connection_cls = type ) [EOL] [EOL] [EOL] async def test_connect_tcp_timeout ( request , create_connection , server ) : [EOL] with patch ( [string] ) as open_conn_mock : [EOL] open_conn_mock . side_effect = lambda * a , ** kw : asyncio . sleep ( [number] ) [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await create_connection ( server . tcp_address , timeout = [number] ) [EOL] [EOL] [EOL] async def test_connect_tcp_invalid_timeout ( request , create_connection , server ) : [EOL] with pytest . raises ( ValueError ) : [EOL] await create_connection ( server . tcp_address , timeout = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_connect_unixsocket ( create_connection , server ) : [EOL] conn = await create_connection ( server . unixsocket , db = [number] ) [EOL] assert conn . db == [number] [EOL] assert conn . address == server . unixsocket [EOL] assert str ( conn ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_connect_unixsocket_timeout ( create_connection , server ) : [EOL] with patch ( [string] ) as open_conn_mock : [EOL] open_conn_mock . side_effect = lambda * a , ** kw : asyncio . sleep ( [number] ) [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await create_connection ( server . unixsocket , db = [number] , timeout = [number] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_connect_maxclients ( create_connection , start_server ) : [EOL] server = start_server ( [string] ) [EOL] conn = await create_connection ( server . tcp_address ) [EOL] await conn . execute ( [string] , [string] , [string] , [number] ) [EOL] [EOL] errors = ( MaxClientsError , ConnectionClosedError , ConnectionError ) [EOL] with pytest . raises ( errors ) : [EOL] conn2 = await create_connection ( server . tcp_address ) [EOL] await conn2 . execute ( [string] ) [EOL] [EOL] [EOL] async def test_select_db ( create_connection , server ) : [EOL] address = server . tcp_address [EOL] conn = await create_connection ( address ) [EOL] assert conn . db == [number] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] await create_connection ( address , db = - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await create_connection ( address , db = [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await create_connection ( address , db = [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] conn = await create_connection ( address , db = None ) [EOL] await conn . select ( None ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await create_connection ( address , db = [number] ) [EOL] [EOL] await conn . select ( [number] ) [EOL] assert conn . db == [number] [EOL] await conn . select ( [number] ) [EOL] assert conn . db == [number] [EOL] await conn . execute ( [string] , [number] ) [EOL] assert conn . db == [number] [EOL] await conn . execute ( [string] , [number] ) [EOL] assert conn . db == [number] [EOL] [EOL] [EOL] async def test_protocol_error ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] reader = conn . _reader [EOL] [EOL] with pytest . raises ( ProtocolError ) : [EOL] reader . feed_data ( [string] ) [EOL] await conn . select ( [number] ) [EOL] [EOL] assert len ( conn . _waiters ) == [number] [EOL] [EOL] [EOL] def test_close_connection__tcp ( create_connection , loop , server ) : [EOL] conn = loop . run_until_complete ( create_connection ( server . tcp_address ) ) [EOL] conn . close ( ) [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] loop . run_until_complete ( conn . select ( [number] ) ) [EOL] [EOL] conn = loop . run_until_complete ( create_connection ( server . tcp_address ) ) [EOL] conn . close ( ) [EOL] fut = None [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] fut = conn . select ( [number] ) [EOL] assert fut is None [EOL] [EOL] conn = loop . run_until_complete ( create_connection ( server . tcp_address ) ) [EOL] conn . close ( ) [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] conn . execute_pubsub ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_close_connection__socket ( create_connection , server ) : [EOL] conn = await create_connection ( server . unixsocket ) [EOL] conn . close ( ) [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await conn . select ( [number] ) [EOL] [EOL] conn = await create_connection ( server . unixsocket ) [EOL] conn . close ( ) [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_closed_connection_with_none_reader ( create_connection , server ) : [EOL] address = server . tcp_address [EOL] conn = await create_connection ( address ) [EOL] stored_reader = conn . _reader [EOL] conn . _reader = None [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await conn . execute ( [string] , [string] , [number] ) [EOL] conn . _reader = stored_reader [EOL] conn . close ( ) [EOL] [EOL] conn = await create_connection ( address ) [EOL] stored_reader = conn . _reader [EOL] conn . _reader = None [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await conn . execute_pubsub ( [string] , [string] ) [EOL] conn . _reader = stored_reader [EOL] conn . close ( ) [EOL] [EOL] [EOL] async def test_wait_closed ( create_connection , server ) : [EOL] address = server . tcp_address [EOL] conn = await create_connection ( address ) [EOL] reader_task = conn . _reader_task [EOL] conn . close ( ) [EOL] assert not reader_task . done ( ) [EOL] await conn . wait_closed ( ) [EOL] assert reader_task . done ( ) [EOL] [EOL] [EOL] async def test_cancel_wait_closed ( create_connection , loop , server ) : [EOL] [comment] [EOL] address = server . tcp_address [EOL] conn = await create_connection ( address ) [EOL] reader_task = conn . _reader_task [EOL] conn . close ( ) [EOL] task = asyncio . ensure_future ( conn . wait_closed ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] loop . call_soon ( task . cancel ) [EOL] [EOL] await conn . wait_closed ( ) [EOL] assert reader_task . done ( ) [EOL] [EOL] [EOL] async def test_auth ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] res = await conn . execute ( [string] , [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] conn2 = await create_connection ( server . tcp_address ) [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await conn2 . select ( [number] ) [EOL] [EOL] res = await conn2 . auth ( [string] ) [EOL] assert res is True [EOL] res = await conn2 . select ( [number] ) [EOL] assert res is True [EOL] [EOL] conn3 = await create_connection ( server . tcp_address , password = [string] ) [EOL] [EOL] res = await conn3 . select ( [number] ) [EOL] assert res is True [EOL] [EOL] res = await conn2 . execute ( [string] , [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_decoding ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address , encoding = [string] ) [EOL] assert conn . encoding == [string] [EOL] res = await conn . execute ( [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] res = await conn . execute ( [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] res = await conn . execute ( [string] , [string] , encoding = [string] ) [EOL] assert res == [string] [EOL] res = await conn . execute ( [string] , [string] , encoding = None ) [EOL] assert res == [string] [EOL] [EOL] with pytest . raises ( UnicodeDecodeError ) : [EOL] await conn . execute ( [string] , [string] , [string] ) [EOL] await conn . execute ( [string] , [string] , encoding = [string] ) [EOL] [EOL] conn2 = await create_connection ( server . tcp_address ) [EOL] res = await conn2 . execute ( [string] , [string] , encoding = [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_execute_exceptions ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] with pytest . raises ( TypeError ) : [EOL] await conn . execute ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await conn . execute ( [string] , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await conn . execute ( [string] , ( [string] , [string] ) ) [EOL] assert len ( conn . _waiters ) == [number] [EOL] [EOL] [EOL] async def test_subscribe_unsubscribe ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] res = await conn . execute ( [string] , [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] , ] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] [EOL] async def test_psubscribe_punsubscribe ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert conn . in_pubsub == [number] [EOL] [EOL] [EOL] async def test_bad_command_in_pubsub ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] msg = [string] [EOL] with pytest . raises ( RedisError , match = msg ) : [EOL] await conn . execute ( [string] , [number] ) [EOL] with pytest . raises ( RedisError , match = msg ) : [EOL] conn . execute ( [string] ) [EOL] [EOL] [EOL] async def test_pubsub_messages ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] pub = await create_connection ( server . tcp_address ) [EOL] res = await sub . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] assert [string] in sub . pubsub_channels [EOL] chan = sub . pubsub_channels [ [string] ] [EOL] assert str ( chan ) == [string] [EOL] assert chan . name == [string] [EOL] assert chan . is_active is True [EOL] [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] msg = await chan . get ( ) [EOL] assert msg == [string] [EOL] [EOL] res = await sub . execute ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert [string] in sub . pubsub_patterns [EOL] chan2 = sub . pubsub_patterns [ [string] ] [EOL] assert chan2 . name == [string] [EOL] assert chan2 . is_active is True [EOL] [EOL] res = await pub . execute ( [string] , [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] msg = await chan . get ( ) [EOL] assert msg == [string] [EOL] dest_chan , msg = await chan2 . get ( ) [EOL] assert dest_chan == [string] [EOL] assert msg == [string] [EOL] [EOL] [EOL] async def test_multiple_subscribe_unsubscribe ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] ch = sub . pubsub_channels [ [string] ] [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert ch is sub . pubsub_channels [ [string] ] [EOL] res = await sub . execute_pubsub ( [string] , ch ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] assert ch is sub . pubsub_channels [ [string] ] [EOL] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await sub . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] [EOL] async def test_execute_pubsub_errors ( create_connection , server ) : [EOL] sub = await create_connection ( server . tcp_address ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] sub . execute_pubsub ( [string] , [string] , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] sub . execute_pubsub ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] sub . execute_pubsub ( [string] , Channel ( [string] , is_pattern = True ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] sub . execute_pubsub ( [string] , Channel ( [string] , is_pattern = True ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] sub . execute_pubsub ( [string] , Channel ( [string] , is_pattern = False ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] sub . execute_pubsub ( [string] , Channel ( [string] , is_pattern = False ) ) [EOL] [EOL] [EOL] async def test_multi_exec ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] ok = await conn . execute ( [string] , [string] , [string] ) [EOL] assert ok == [string] [EOL] [EOL] ok = await conn . execute ( [string] ) [EOL] assert ok == [string] [EOL] queued = await conn . execute ( [string] , [string] , [string] ) [EOL] assert queued == [string] [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] ok = await conn . execute ( [string] ) [EOL] assert ok == [string] [EOL] queued = await conn . execute ( [string] , [string] , [string] ) [EOL] assert queued == [string] [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_multi_exec__enc ( create_connection , server ) : [EOL] conn = await create_connection ( server . tcp_address , encoding = [string] ) [EOL] [EOL] ok = await conn . execute ( [string] , [string] , [string] ) [EOL] assert ok == [string] [EOL] [EOL] ok = await conn . execute ( [string] ) [EOL] assert ok == [string] [EOL] queued = await conn . execute ( [string] , [string] , [string] ) [EOL] assert queued == [string] [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] ok = await conn . execute ( [string] ) [EOL] assert ok == [string] [EOL] queued = await conn . execute ( [string] , [string] , [string] ) [EOL] assert queued == [string] [EOL] res = await conn . execute ( [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_connection_parser_argument ( create_connection , server ) : [EOL] klass = mock . MagicMock ( ) [EOL] klass . return_value = reader = mock . Mock ( ) [EOL] conn = await create_connection ( server . tcp_address , parser = klass ) [EOL] [EOL] assert klass . mock_calls == [ mock . call ( protocolError = ProtocolError , replyError = ReplyError ) , ] [EOL] [EOL] response = [ False ] [EOL] [EOL] def feed_gets ( data , ** kwargs ) : [EOL] response [ [number] ] = data [EOL] [EOL] reader . gets . side_effect = lambda * args , ** kwargs : response [ [number] ] [EOL] reader . feed . side_effect = feed_gets [EOL] assert [string] == await conn . execute ( [string] ) [EOL] [EOL] [EOL] async def test_connection_idle_close ( create_connection , start_server ) : [EOL] server = start_server ( [string] ) [EOL] conn = await create_connection ( server . tcp_address ) [EOL] ok = await conn . execute ( [string] , [string] , [string] , [number] ) [EOL] assert ok == [string] [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] assert await conn . execute ( [string] ) is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [number] } , { [string] : [string] } , ] , ids = repr ) async def test_create_connection__tcp_url ( create_connection , server_tcp_url , kwargs ) : [EOL] url = server_tcp_url ( ** kwargs ) [EOL] db = kwargs . get ( [string] , [number] ) [EOL] enc = kwargs . get ( [string] , None ) [EOL] conn = await create_connection ( url ) [EOL] pong = [string] if not enc else [string] . decode ( enc ) [EOL] assert await conn . execute ( [string] ) == pong [EOL] assert conn . db == db [EOL] assert conn . encoding == enc [EOL] [EOL] [EOL] @ pytest . mark . skipif ( [string] , reason = [string] ) @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [number] } , { [string] : [string] } , ] , ids = repr ) async def test_create_connection__unix_url ( create_connection , server_unix_url , kwargs ) : [EOL] url = server_unix_url ( ** kwargs ) [EOL] db = kwargs . get ( [string] , [number] ) [EOL] enc = kwargs . get ( [string] , None ) [EOL] conn = await create_connection ( url ) [EOL] pong = [string] if not enc else [string] . decode ( enc ) [EOL] assert await conn . execute ( [string] ) == pong [EOL] assert conn . db == db [EOL] assert conn . encoding == enc [EOL]	
from typing import Dict , Union , Any , Literal , List [EOL] import typing [EOL] import typing_extensions [EOL] import pytest [EOL] [EOL] from aioredis import ReplyError [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def add ( redis , key , field , value ) : [EOL] ok = await redis . connection . execute ( [string] , key , field , value ) [EOL] assert ok == [number] [EOL] [EOL] [EOL] async def test_hdel ( redis ) : [EOL] key , field , value = [string] , [string] , [string] [EOL] await add ( redis , key , field , value ) [EOL] [comment] [EOL] result = await redis . hdel ( key , field ) [EOL] assert result == [number] [EOL] [comment] [EOL] result = await redis . hdel ( key , field ) [EOL] assert result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hdel ( None , field ) [EOL] [EOL] [EOL] async def test_hexists ( redis ) : [EOL] key , field , value = [string] , [string] , [string] [EOL] await add ( redis , key , field , value ) [EOL] [comment] [EOL] result = await redis . hexists ( key , field ) [EOL] assert result == [number] [EOL] [comment] [EOL] result = await redis . hexists ( key , [string] + field ) [EOL] assert result == [number] [EOL] [comment] [EOL] result = await redis . hexists ( [string] + key , field ) [EOL] assert result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hexists ( None , field ) [EOL] [EOL] [EOL] async def test_hget ( redis ) : [EOL] [EOL] key , field , value = [string] , [string] , [string] [EOL] await add ( redis , key , field , value ) [EOL] [comment] [EOL] test_value = await redis . hget ( key , field ) [EOL] assert test_value == value [EOL] [comment] [EOL] test_value = await redis . hget ( key , [string] + field ) [EOL] assert test_value is None [EOL] [comment] [EOL] test_value = await redis . hget ( [string] + key , [string] ) [EOL] assert test_value is None [EOL] [EOL] [comment] [EOL] test_value = await redis . hget ( key , field , encoding = [string] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hget ( None , field ) [EOL] [EOL] [EOL] async def test_hgetall ( redis ) : [EOL] await add ( redis , [string] , [string] , [string] ) [EOL] await add ( redis , [string] , [string] , [string] ) [EOL] [EOL] test_value = await redis . hgetall ( [string] ) [EOL] assert isinstance ( test_value , dict ) [EOL] assert { [string] : [string] , [string] : [string] } == test_value [EOL] [comment] [EOL] test_value = await redis . hgetall ( [string] ) [EOL] assert test_value == { } [EOL] [EOL] [comment] [EOL] test_value = await redis . hgetall ( [string] , encoding = [string] ) [EOL] assert { [string] : [string] , [string] : [string] } == test_value [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hgetall ( None ) [EOL] [EOL] [EOL] async def test_hincrby ( redis ) : [EOL] key , field , value = [string] , [string] , [number] [EOL] await add ( redis , key , field , value ) [EOL] [comment] [EOL] result = await redis . hincrby ( key , field , [number] ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . hincrby ( key , field , - [number] ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . hincrby ( key , field , - [number] ) [EOL] assert result == - [number] [EOL] [EOL] result = await redis . hincrby ( key , field , - [number] ) [EOL] assert result == - [number] [EOL] [EOL] [comment] [EOL] result = await redis . hincrby ( [string] + key , field , [number] ) [EOL] assert result == [number] [EOL] result = await redis . hincrby ( key , [string] + field , [number] ) [EOL] assert result == [number] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . hincrby ( key , [string] + field , [number] ) [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] [comment] [EOL] await add ( redis , [string] + key , field , [number] ) [EOL] await redis . hincrby ( [string] + key , field , [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hincrby ( None , field , [number] ) [EOL] [EOL] [EOL] async def test_hincrbyfloat ( redis ) : [EOL] key , field , value = [string] , [string] , [number] [EOL] await add ( redis , key , field , value ) [EOL] [EOL] result = await redis . hincrbyfloat ( key , field , [number] ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . hincrbyfloat ( key , field , - [number] ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . hincrbyfloat ( key , field , - [number] ) [EOL] assert result == - [number] [EOL] [EOL] [comment] [EOL] result = await redis . hincrbyfloat ( [string] + key , field , [number] ) [EOL] assert result == [number] [EOL] [EOL] result = await redis . hincrbyfloat ( key , [string] + field , [number] ) [EOL] assert result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hincrbyfloat ( None , field , [number] ) [EOL] [EOL] [EOL] async def test_hkeys ( redis ) : [EOL] key = [string] [EOL] field1 , field2 = [string] , [string] [EOL] value1 , value2 = [string] , [string] [EOL] await add ( redis , key , field1 , value1 ) [EOL] await add ( redis , key , field2 , value2 ) [EOL] [EOL] test_value = await redis . hkeys ( key ) [EOL] assert set ( test_value ) == { field1 , field2 } [EOL] [EOL] test_value = await redis . hkeys ( [string] + key ) [EOL] assert test_value == [ ] [EOL] [EOL] test_value = await redis . hkeys ( key , encoding = [string] ) [EOL] assert set ( test_value ) == { [string] , [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hkeys ( None ) [EOL] [EOL] [EOL] async def test_hlen ( redis ) : [EOL] key = [string] [EOL] field1 , field2 = [string] , [string] [EOL] value1 , value2 = [string] , [string] [EOL] await add ( redis , key , field1 , value1 ) [EOL] await add ( redis , key , field2 , value2 ) [EOL] [EOL] test_value = await redis . hlen ( key ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . hlen ( [string] + key ) [EOL] assert test_value == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hlen ( None ) [EOL] [EOL] [EOL] async def test_hmget ( redis ) : [EOL] key = [string] [EOL] field1 , field2 = [string] , [string] [EOL] value1 , value2 = [string] , [string] [EOL] await add ( redis , key , field1 , value1 ) [EOL] await add ( redis , key , field2 , value2 ) [EOL] [EOL] test_value = await redis . hmget ( key , field1 , field2 ) [EOL] assert set ( test_value ) == { value1 , value2 } [EOL] [EOL] test_value = await redis . hmget ( key , [string] + field1 , [string] + field2 ) [EOL] assert [ None , None ] == test_value [EOL] [EOL] val = await redis . hincrby ( key , [string] ) [EOL] assert val == [number] [EOL] test_value = await redis . hmget ( key , field1 , field2 , [string] , encoding = [string] ) [EOL] assert [ [string] , [string] , [string] ] == test_value [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmget ( None , field1 , field2 ) [EOL] [EOL] [EOL] async def test_hmset ( redis ) : [EOL] key , field , value = [string] , [string] , [string] [EOL] await add ( redis , key , field , value ) [EOL] [EOL] [comment] [EOL] test_value = await redis . hmset ( key , field , [string] ) [EOL] assert test_value is True [EOL] [EOL] result = await redis . hexists ( key , field ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] test_value = await redis . hmset ( [string] + key , field , value ) [EOL] assert test_value is True [EOL] result = await redis . hexists ( [string] + key , field ) [EOL] assert result == [number] [EOL] [EOL] [comment] [EOL] pairs = [ [string] , [string] , [string] , [string] ] [EOL] test_value = await redis . hmset ( key , * pairs ) [EOL] assert test_value is True [EOL] test_value = await redis . hmget ( key , [string] , [string] ) [EOL] assert set ( test_value ) == { [string] , [string] } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset ( key , [string] , [string] , [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset ( None , * pairs ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset ( key , { [string] : [string] } , { [string] : [string] } ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset ( key ) [EOL] [EOL] [EOL] async def test_hmset_dict ( redis ) : [EOL] key = [string] [EOL] [EOL] [comment] [EOL] d1 = { [string] : [string] } [EOL] test_value = await redis . hmset_dict ( key , d1 ) [EOL] assert test_value is True [EOL] test_value = await redis . hget ( key , [string] ) [EOL] assert test_value == [string] [EOL] [EOL] [comment] [EOL] test_value = await redis . hmset_dict ( key , foo = [string] , bar = [string] ) [EOL] assert test_value is True [EOL] test_value = await redis . hmget ( key , [string] , [string] ) [EOL] assert set ( test_value ) == { [string] , [string] } [EOL] [EOL] [comment] [EOL] d1 = { [string] : [string] } [EOL] test_value = await redis . hmset_dict ( key , d1 , foo = [string] ) [EOL] assert test_value is True [EOL] test_value = await redis . hget ( key , [string] ) [EOL] assert test_value == [string] [EOL] [EOL] [comment] [EOL] test_value = await redis . hmset_dict ( key , { } , foo = [string] ) [EOL] assert test_value is True [EOL] test_value = await redis . hget ( key , [string] ) [EOL] assert test_value == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . hmset_dict ( key , { } ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key , ( [string] , [string] ) ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key , [string] , [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key , [string] , [string] , foo = [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key , { [string] : [number] } , { [string] : [number] } ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hmset_dict ( key , { [string] : [number] } , { [string] : [number] } , [string] , [number] , d = [number] ) [EOL] [EOL] [EOL] async def test_hset ( redis ) : [EOL] key , field , value = [string] , [string] , [string] [EOL] test_value = await redis . hset ( key , field , value ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . hset ( key , field , value ) [EOL] assert test_value == [number] [EOL] [EOL] test_value = await redis . hset ( [string] + key , field , value ) [EOL] assert test_value == [number] [EOL] [EOL] result = await redis . hexists ( [string] + key , field ) [EOL] assert result == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hset ( None , field , value ) [EOL] [EOL] [EOL] async def test_hsetnx ( redis ) : [EOL] key , field , value = [string] , [string] , [string] [EOL] [comment] [EOL] test_value = await redis . hsetnx ( key , field , value ) [EOL] assert test_value == [number] [EOL] [comment] [EOL] result = await redis . hget ( key , field ) [EOL] assert result == value [EOL] [comment] [EOL] test_value = await redis . hsetnx ( key , field , [string] ) [EOL] assert test_value == [number] [EOL] [comment] [EOL] result = await redis . hget ( key , field ) [EOL] assert result == value [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hsetnx ( None , field , value ) [EOL] [EOL] [EOL] async def test_hvals ( redis ) : [EOL] key = [string] [EOL] field1 , field2 = [string] , [string] [EOL] value1 , value2 = [string] , [string] [EOL] await add ( redis , key , field1 , value1 ) [EOL] await add ( redis , key , field2 , value2 ) [EOL] [EOL] test_value = await redis . hvals ( key ) [EOL] assert set ( test_value ) == { value1 , value2 } [EOL] [EOL] test_value = await redis . hvals ( [string] + key ) [EOL] assert test_value == [ ] [EOL] [EOL] test_value = await redis . hvals ( key , encoding = [string] ) [EOL] assert set ( test_value ) == { [string] , [string] } [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hvals ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_hscan ( redis ) : [EOL] key = [string] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] f = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] v = [string] . format ( i ) . encode ( [string] ) [EOL] await add ( redis , key , f , v ) [EOL] [comment] [EOL] cursor , values = await redis . hscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] assert sorted ( values ) == [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [comment] [EOL] cursor , values = await redis . hscan ( key , match = [string] ) [EOL] assert len ( values ) == [number] [EOL] assert sorted ( values ) == [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cursor = [string] [EOL] test_values = [ ] [EOL] while cursor : [EOL] cursor , values = await redis . hscan ( key , cursor , count = [number] ) [EOL] test_values . extend ( values ) [EOL] assert len ( test_values ) == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . hscan ( None ) [EOL] [EOL] [EOL] async def test_hgetall_enc ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address , encoding = [string] ) [EOL] TEST_KEY = [string] [EOL] await redis . hmset ( TEST_KEY , [string] , [string] , [string] , [string] ) [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] tr . hgetall ( TEST_KEY ) [EOL] res = await tr . execute ( ) [EOL] assert res == [ { [string] : [string] , [string] : [string] } ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_hstrlen ( redis ) : [EOL] ok = await redis . hset ( [string] , [string] , [string] ) [EOL] assert ok == [number] [EOL] ok = await redis . hincrby ( [string] , [string] , [number] ) [EOL] assert ok == [number] [EOL] [EOL] ok = await redis . hincrby ( [string] , [string] , - [number] ) [EOL] assert ok == - [number] [EOL] [EOL] l = await redis . hstrlen ( [string] , [string] ) [EOL] assert l == [number] [EOL] l = await redis . hstrlen ( [string] , [string] ) [EOL] assert l == [number] [EOL] l = await redis . hstrlen ( [string] , [string] ) [EOL] assert l == [number] [EOL] [EOL] l = await redis . hstrlen ( [string] , [string] ) [EOL] assert l == [number] [EOL] [EOL] l = await redis . hstrlen ( [string] , [string] ) [EOL] assert l == [number] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_ihscan ( redis ) : [EOL] key = [string] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] f = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] v = [string] . format ( i ) . encode ( [string] ) [EOL] assert await redis . hset ( key , f , v ) == [number] [EOL] [EOL] async def coro ( cmd ) : [EOL] lst = [ ] [EOL] async for i in cmd : [EOL] lst . append ( i ) [EOL] return lst [EOL] [EOL] [comment] [EOL] ret = await coro ( redis . ihscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) } [EOL] [EOL] [comment] [EOL] ret = await coro ( redis . ihscan ( key , match = [string] ) ) [EOL] assert set ( ret ) == { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ret = await coro ( redis . ihscan ( key , count = [number] ) ) [EOL] assert set ( ret ) == { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) } [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . ihscan ( None ) [EOL]	
from typing import Set , Union , Any , Literal , List [EOL] import typing [EOL] import typing_extensions [EOL] import asyncio [EOL] import time [EOL] import math [EOL] import pytest [EOL] import sys [EOL] [EOL] from unittest import mock [EOL] [EOL] from aioredis import ReplyError [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def add ( redis , key , value ) : [EOL] ok = await redis . connection . execute ( [string] , key , value ) [EOL] assert ok == [string] [EOL] [EOL] [EOL] async def test_delete ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . delete ( [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . delete ( [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . delete ( None ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . delete ( [string] , [string] , None ) [EOL] [EOL] [EOL] async def test_dump ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] data = await redis . dump ( [string] ) [EOL] assert data == mock . ANY [EOL] assert isinstance ( data , ( bytes , bytearray ) ) [EOL] assert len ( data ) > [number] [EOL] [EOL] data = await redis . dump ( [string] ) [EOL] assert data is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . dump ( None ) [EOL] [EOL] [EOL] async def test_exists ( redis , server ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . exists ( [string] ) [EOL] assert isinstance ( res , int ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . exists ( [string] ) [EOL] assert isinstance ( res , int ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . exists ( None ) [EOL] if server . version < ( [number] , [number] , [number] ) : [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . exists ( [string] , [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_exists_multiple ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . exists ( [string] , [string] ) [EOL] assert isinstance ( res , int ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . exists ( [string] , [string] ) [EOL] assert isinstance ( res , int ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . exists ( [string] , [string] ) [EOL] assert isinstance ( res , int ) [EOL] assert res == [number] [EOL] [EOL] [EOL] async def test_expire ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . expire ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] res = await redis . connection . execute ( [string] , [string] ) [EOL] assert res >= [number] [EOL] [EOL] await redis . expire ( [string] , - [number] ) [EOL] res = await redis . exists ( [string] ) [EOL] assert not res [EOL] [EOL] res = await redis . expire ( [string] , [number] ) [EOL] assert res is False [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . expire ( [string] , [number] ) [EOL] assert res is True [EOL] res = await redis . connection . execute ( [string] , [string] ) [EOL] assert res >= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . expire ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . expire ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_expireat ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] now = math . ceil ( time . time ( ) ) [EOL] [EOL] fut1 = redis . expireat ( [string] , now + [number] ) [EOL] fut2 = redis . connection . execute ( [string] , [string] ) [EOL] assert ( await fut1 ) is True [EOL] assert ( await fut2 ) >= [number] [EOL] [EOL] now = time . time ( ) [EOL] fut1 = redis . expireat ( [string] , now + [number] ) [EOL] fut2 = redis . connection . execute ( [string] , [string] ) [EOL] assert ( await fut1 ) is True [EOL] assert ( await fut2 ) >= [number] [EOL] [EOL] res = await redis . expireat ( [string] , - [number] ) [EOL] assert res is True [EOL] [EOL] res = await redis . exists ( [string] ) [EOL] assert not res [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . expireat ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] res = await redis . exists ( [string] ) [EOL] assert not res [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . expireat ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . expireat ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_keys ( redis ) : [EOL] res = await redis . keys ( [string] ) [EOL] assert res == [ ] [EOL] [EOL] await redis . connection . execute ( [string] ) [EOL] res = await redis . keys ( [string] ) [EOL] assert res == [ ] [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . keys ( [string] ) [EOL] assert res == [ [string] ] [EOL] res = await redis . keys ( [string] ) [EOL] assert sorted ( res ) == [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] res = await redis . keys ( [string] , encoding = [string] ) [EOL] assert sorted ( res ) == [ [string] , [string] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . keys ( None ) [EOL] [EOL] [EOL] async def test_migrate ( create_redis , server , serverB ) : [EOL] redisA = await create_redis ( server . tcp_address ) [EOL] redisB = await create_redis ( serverB . tcp_address , db = [number] ) [EOL] [EOL] await add ( redisA , [string] , [number] ) [EOL] [EOL] await redisB . delete ( [string] ) [EOL] assert ( await redisA . exists ( [string] ) ) [EOL] assert not ( await redisB . exists ( [string] ) ) [EOL] [EOL] ok = await redisA . migrate ( [string] , serverB . tcp_address . port , [string] , [number] , [number] ) [EOL] assert ok is True [EOL] assert not ( await redisA . exists ( [string] ) ) [EOL] assert ( await redisB . exists ( [string] ) ) [EOL] [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redisA . migrate ( None , [number] , [string] , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [string] , None , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [number] , [string] , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [string] , [string] , [number] , None ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [string] , [string] , [number] , [number] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [number] , [string] , - [number] , [number] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redisA . migrate ( [string] , [number] , [string] , [number] , - [number] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_migrate_copy_replace ( create_redis , server , serverB ) : [EOL] redisA = await create_redis ( server . tcp_address ) [EOL] redisB = await create_redis ( serverB . tcp_address , db = [number] ) [EOL] [EOL] await add ( redisA , [string] , [number] ) [EOL] await redisB . delete ( [string] ) [EOL] [EOL] ok = await redisA . migrate ( [string] , serverB . tcp_address . port , [string] , [number] , [number] , copy = True ) [EOL] assert ok is True [EOL] assert ( await redisA . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] [EOL] assert ( await redisA . set ( [string] , [string] ) ) [EOL] ok = await redisA . migrate ( [string] , serverB . tcp_address . port , [string] , [number] , [number] , replace = True ) [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] assert ( await redisB . get ( [string] ) ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_migrate_keys ( create_redis , server , serverB ) : [EOL] redisA = await create_redis ( server . tcp_address ) [EOL] redisB = await create_redis ( serverB . tcp_address , db = [number] ) [EOL] [EOL] await add ( redisA , [string] , [number] ) [EOL] await add ( redisA , [string] , [number] ) [EOL] await add ( redisA , [string] , [number] ) [EOL] await redisB . delete ( [string] , [string] , [string] ) [EOL] [EOL] ok = await redisA . migrate_keys ( [string] , serverB . tcp_address . port , ( [string] , [string] , [string] , [string] ) , dest_db = [number] , timeout = [number] ) [EOL] assert ok is True [EOL] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] [EOL] ok = await redisA . migrate_keys ( [string] , serverB . tcp_address . port , ( [string] , [string] , [string] ) , dest_db = [number] , timeout = [number] ) [EOL] assert not ok [EOL] ok = await redisB . migrate_keys ( [string] , server . tcp_address . port , ( [string] , [string] , [string] ) , dest_db = [number] , timeout = [number] , copy = True ) [EOL] assert ok [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisA . get ( [string] ) ) == [string] [EOL] assert ( await redisA . get ( [string] ) ) == [string] [EOL] assert ( await redisA . get ( [string] ) ) == [string] [EOL] [EOL] assert ( await redisA . set ( [string] , [string] ) ) [EOL] assert ( await redisA . set ( [string] , [string] ) ) [EOL] assert ( await redisA . set ( [string] , [string] ) ) [EOL] ok = await redisA . migrate_keys ( [string] , serverB . tcp_address . port , ( [string] , [string] , [string] , [string] ) , dest_db = [number] , timeout = [number] , replace = True ) [EOL] assert ok is True [EOL] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisB . get ( [string] ) ) == [string] [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] assert ( await redisA . get ( [string] ) ) is None [EOL] [EOL] [EOL] async def test_migrate__exceptions ( redis , server , unused_port ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] assert ( await redis . exists ( [string] ) ) [EOL] [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] assert not ( await redis . migrate ( [string] , unused_port ( ) , [string] , dest_db = [number] , timeout = [number] ) ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_migrate_keys__errors ( redis ) : [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redis . migrate_keys ( None , [number] , [string] , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [string] , None , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [number] , ( [string] , ) , [number] , [number] ) [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [string] , ( [string] , ) , [number] , None ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [string] , ( [string] , ) , [number] , [number] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [number] , ( [string] , ) , - [number] , [number] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [number] , ( [string] , ) , [number] , - [number] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] await redis . migrate_keys ( [string] , [string] , ( ) , [number] , [number] ) [EOL] [EOL] [EOL] async def test_move ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] assert redis . db == [number] [EOL] res = await redis . move ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . move ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . move ( [string] , None ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . move ( [string] , - [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . move ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_object_refcount ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] [EOL] res = await redis . object_refcount ( [string] ) [EOL] assert res == [number] [EOL] res = await redis . object_refcount ( [string] ) [EOL] assert res is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . object_refcount ( None ) [EOL] [EOL] [EOL] async def test_object_encoding ( redis , server ) : [EOL] await add ( redis , [string] , [string] ) [EOL] [EOL] res = await redis . object_encoding ( [string] ) [EOL] [EOL] if server . version < ( [number] , [number] , [number] ) : [EOL] assert res == [string] [EOL] else : [EOL] assert res == [string] [EOL] [EOL] res = await redis . incr ( [string] ) [EOL] assert res == [number] [EOL] res = await redis . object_encoding ( [string] ) [EOL] assert res == [string] [EOL] res = await redis . object_encoding ( [string] ) [EOL] assert res is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . object_encoding ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) @ pytest . mark . timeout ( [number] ) async def test_object_idletime ( redis , server ) : [EOL] await add ( redis , [string] , [string] ) [EOL] [EOL] res = await redis . object_idletime ( [string] ) [EOL] [comment] [EOL] assert res >= [number] [EOL] [EOL] res = [number] [EOL] while not res : [EOL] res = await redis . object_idletime ( [string] ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert res >= [number] [EOL] [EOL] res = await redis . object_idletime ( [string] ) [EOL] assert res is None [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . object_idletime ( None ) [EOL] [EOL] [EOL] async def test_persist ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . expire ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] res = await redis . persist ( [string] ) [EOL] assert res is True [EOL] [EOL] res = await redis . connection . execute ( [string] , [string] ) [EOL] assert res == - [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . persist ( None ) [EOL] [EOL] [EOL] async def test_pexpire ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . pexpire ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] res = await redis . connection . execute ( [string] , [string] ) [EOL] assert res == [number] [EOL] res = await redis . connection . execute ( [string] , [string] ) [EOL] assert res > [number] [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . pexpire ( [string] , [number] ) [EOL] assert res is True [EOL] [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] res = await redis . exists ( [string] ) [EOL] assert not res [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pexpire ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pexpire ( [string] , [number] ) [EOL] [EOL] [EOL] async def test_pexpireat ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] now = int ( ( await redis . time ( ) ) * [number] ) [EOL] fut1 = redis . pexpireat ( [string] , now + [number] ) [EOL] fut2 = redis . ttl ( [string] ) [EOL] fut3 = redis . pttl ( [string] ) [EOL] assert await fut1 is True [EOL] assert await fut2 == [number] [EOL] assert [number] < await fut3 <= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pexpireat ( None , [number] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pexpireat ( [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pexpireat ( [string] , [number] ) [EOL] [EOL] [EOL] async def test_pttl ( redis , server ) : [EOL] await add ( redis , [string] , [string] ) [EOL] res = await redis . pttl ( [string] ) [EOL] assert res == - [number] [EOL] res = await redis . pttl ( [string] ) [EOL] if server . version < ( [number] , [number] , [number] ) : [EOL] assert res == - [number] [EOL] else : [EOL] assert res == - [number] [EOL] [EOL] await redis . pexpire ( [string] , [number] ) [EOL] res = await redis . pttl ( [string] ) [EOL] assert [number] < res <= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . pttl ( None ) [EOL] [EOL] [EOL] async def test_randomkey ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await add ( redis , [string] , [number] ) [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . randomkey ( ) [EOL] assert res in [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] res = await redis . randomkey ( encoding = [string] ) [EOL] assert res in [ [string] , [string] , [string] ] [EOL] [EOL] await redis . connection . execute ( [string] ) [EOL] res = await redis . randomkey ( ) [EOL] assert res is None [EOL] [EOL] [EOL] async def test_rename ( redis , server ) : [EOL] await add ( redis , [string] , [string] ) [EOL] await redis . delete ( [string] ) [EOL] [EOL] res = await redis . rename ( [string] , [string] ) [EOL] assert res is True [EOL] [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] await redis . rename ( [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rename ( None , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . rename ( [string] , None ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . rename ( [string] , [string] ) [EOL] [EOL] if server . version < ( [number] , [number] ) : [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] await redis . rename ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_renamenx ( redis , server ) : [EOL] await redis . delete ( [string] , [string] ) [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . renamenx ( [string] , [string] ) [EOL] assert res is True [EOL] [EOL] await add ( redis , [string] , [number] ) [EOL] res = await redis . renamenx ( [string] , [string] ) [EOL] assert res is False [EOL] [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] await redis . renamenx ( [string] , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . renamenx ( None , [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . renamenx ( [string] , None ) [EOL] with pytest . raises ( ValueError ) : [EOL] await redis . renamenx ( [string] , [string] ) [EOL] [EOL] if server . version < ( [number] , [number] ) : [EOL] with pytest . raises ( ReplyError , match = [string] ) : [EOL] await redis . renamenx ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_restore ( redis ) : [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok [EOL] dump = await redis . dump ( [string] ) [EOL] assert dump is not None [EOL] ok = await redis . delete ( [string] ) [EOL] assert ok [EOL] assert [string] == ( await redis . restore ( [string] , [number] , dump ) ) [EOL] assert ( await redis . get ( [string] ) ) == [string] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_scan ( redis ) : [EOL] for i in range ( [number] , [number] ) : [EOL] foo_or_bar = [string] if i % [number] else [string] [EOL] key = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] await add ( redis , key , i ) [EOL] [EOL] cursor , values = await redis . scan ( ) [EOL] [comment] [EOL] [comment] [EOL] assert len ( values ) >= [number] [EOL] [EOL] cursor , test_values = [string] , [ ] [EOL] while cursor : [EOL] cursor , values = await redis . scan ( cursor = cursor , match = [string] ) [EOL] test_values . extend ( values ) [EOL] assert len ( test_values ) == [number] [EOL] [EOL] cursor , test_values = [string] , [ ] [EOL] while cursor : [EOL] cursor , values = await redis . scan ( cursor = cursor , match = [string] ) [EOL] test_values . extend ( values ) [EOL] assert len ( test_values ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cursor = [string] [EOL] test_values = [ ] [EOL] while cursor : [EOL] cursor , values = await redis . scan ( cursor = cursor , match = [string] , count = [number] ) [EOL] [EOL] test_values . extend ( values ) [EOL] assert len ( test_values ) == [number] [EOL] [EOL] [EOL] async def test_sort ( redis ) : [EOL] async def _make_list ( key , items ) : [EOL] await redis . delete ( key ) [EOL] for i in items : [EOL] await redis . rpush ( key , i ) [EOL] [EOL] await _make_list ( [string] , [string] ) [EOL] res = await redis . sort ( [string] ) [EOL] assert res == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] res = await redis . sort ( [string] , offset = [number] , count = [number] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] res = await redis . sort ( [string] , asc = [string] ) [EOL] assert res == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] await _make_list ( [string] , [string] ) [EOL] res = await redis . sort ( [string] , asc = [string] , alpha = True , offset = [number] , count = [number] ) [EOL] assert res == [ [string] , [string] ] [EOL] [EOL] await redis . set ( [string] , [number] ) [EOL] await redis . set ( [string] , [number] ) [EOL] await redis . set ( [string] , [number] ) [EOL] await _make_list ( [string] , [string] ) [EOL] [EOL] res = await redis . sort ( [string] , by = [string] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] res = await redis . sort ( [string] , by = [string] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] res = await redis . sort ( [string] , by = [string] , store = [string] ) [EOL] assert res == [number] [EOL] res = await redis . lrange ( [string] , [number] , - [number] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] await redis . set ( [string] , [number] ) [EOL] await redis . set ( [string] , [number] ) [EOL] await redis . set ( [string] , [number] ) [EOL] res = await redis . sort ( [string] , [string] , by = [string] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] await redis . hset ( [string] , [string] , [number] ) [EOL] res = await redis . sort ( [string] , [string] , by = [string] ) [EOL] assert res == [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) @ pytest . mark . timeout ( [number] ) async def test_touch ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] res = [number] [EOL] while not res : [EOL] res = await redis . object_idletime ( [string] ) [EOL] await asyncio . sleep ( [number] ) [EOL] assert res > [number] [EOL] assert await redis . touch ( [string] , [string] , [string] ) == [number] [EOL] res2 = await redis . object_idletime ( [string] ) [EOL] assert [number] <= res2 < res [EOL] [EOL] [EOL] async def test_ttl ( redis , server ) : [EOL] await add ( redis , [string] , [string] ) [EOL] res = await redis . ttl ( [string] ) [EOL] assert res == - [number] [EOL] res = await redis . ttl ( [string] ) [EOL] if server . version < ( [number] , [number] , [number] ) : [EOL] assert res == - [number] [EOL] else : [EOL] assert res == - [number] [EOL] [EOL] await redis . expire ( [string] , [number] ) [EOL] res = await redis . ttl ( [string] ) [EOL] assert res >= [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . ttl ( None ) [EOL] [EOL] [EOL] async def test_type ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] res = await redis . type ( [string] ) [EOL] assert res == [string] [EOL] [EOL] await redis . delete ( [string] ) [EOL] await redis . incr ( [string] ) [EOL] res = await redis . type ( [string] ) [EOL] assert res == [string] [EOL] [EOL] await redis . delete ( [string] ) [EOL] await redis . sadd ( [string] , [string] ) [EOL] res = await redis . type ( [string] ) [EOL] assert res == [string] [EOL] [EOL] res = await redis . type ( [string] ) [EOL] assert res == [string] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . type ( None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_iscan ( redis ) : [EOL] full = set ( ) [EOL] foo = set ( ) [EOL] bar = set ( ) [EOL] for i in range ( [number] , [number] ) : [EOL] is_bar = i % [number] [EOL] foo_or_bar = [string] if is_bar else [string] [EOL] key = [string] . format ( foo_or_bar , i ) . encode ( [string] ) [EOL] full . add ( key ) [EOL] if is_bar : [EOL] bar . add ( key ) [EOL] else : [EOL] foo . add ( key ) [EOL] assert await redis . set ( key , i ) is True [EOL] [EOL] async def coro ( cmd ) : [EOL] lst = [ ] [EOL] async for i in cmd : [EOL] lst . append ( i ) [EOL] return lst [EOL] [EOL] ret = await coro ( redis . iscan ( ) ) [EOL] assert len ( ret ) >= [number] [EOL] [EOL] ret = await coro ( redis . iscan ( match = [string] ) ) [EOL] assert [number] == len ( ret ) [EOL] assert set ( ret ) == full [EOL] [EOL] ret = await coro ( redis . iscan ( match = [string] ) ) [EOL] assert set ( ret ) == foo [EOL] [EOL] ret = await coro ( redis . iscan ( match = [string] ) ) [EOL] assert set ( ret ) == bar [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] ret = await coro ( redis . iscan ( match = [string] , count = [number] ) ) [EOL] assert [number] == len ( ret ) [EOL] assert set ( ret ) == full [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_unlink ( redis ) : [EOL] await add ( redis , [string] , [number] ) [EOL] await add ( redis , [string] , [number] ) [EOL] [EOL] res = await redis . unlink ( [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] res = await redis . unlink ( [string] , [string] ) [EOL] assert res == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . unlink ( None ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . unlink ( [string] , [string] , None ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_wait ( redis ) : [EOL] await add ( redis , [string] , [string] ) [EOL] start = await redis . time ( ) [EOL] res = await redis . wait ( [number] , [number] ) [EOL] end = await redis . time ( ) [EOL] assert res == [number] [EOL] assert end - start >= [number] [EOL] [EOL] await add ( redis , [string] , [string] ) [EOL] start = await redis . time ( ) [EOL] res = await redis . wait ( [number] , [number] ) [EOL] end = await redis . time ( ) [EOL] assert res == [number] [EOL] assert end - start < [number] [EOL]	
from typing import Tuple , OrderedDict , Any , List [EOL] import typing [EOL] import asyncio [EOL] import collections [EOL] import pytest [EOL] import asyncio [EOL] [EOL] from collections import OrderedDict [EOL] from unittest import mock [EOL] [EOL] from aioredis . commands . streams import parse_messages [EOL] from aioredis . errors import BusyGroupError [EOL] from _testutils import redis_version [EOL] [EOL] pytestmark = redis_version ( [number] , [number] , [number] , reason = [string] ) [EOL] [EOL] [EOL] async def add_message_with_sleep ( redis , stream , fields ) : [EOL] await asyncio . sleep ( [number] ) [EOL] result = await redis . xadd ( stream , fields ) [EOL] return result [EOL] [EOL] [EOL] async def test_xadd ( redis , server_bin ) : [EOL] fields = OrderedDict ( ( ( [string] , [string] ) , ( [string] , [string] ) , ) ) [EOL] message_id = await redis . xadd ( [string] , fields ) [EOL] [EOL] [comment] [EOL] assert [string] in message_id [EOL] timestamp , sequence = message_id . split ( [string] ) [EOL] assert timestamp . isdigit ( ) [EOL] assert sequence . isdigit ( ) [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( [string] ) [EOL] assert len ( messages ) == [number] [EOL] message = messages [ [number] ] [EOL] assert message [ [number] ] == message_id [EOL] assert message [ [number] ] == OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] [EOL] async def test_xadd_maxlen_exact ( redis , server_bin ) : [EOL] message_id1 = await redis . xadd ( [string] , { [string] : [string] } ) [comment] [EOL] [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] message_id2 = await redis . xadd ( [string] , { [string] : [string] } ) [EOL] await asyncio . sleep ( [number] ) [EOL] message_id3 = await redis . xadd ( [string] , { [string] : [string] } , max_len = [number] , exact_len = True ) [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] message2 = messages [ [number] ] [EOL] message3 = messages [ [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert message2 [ [number] ] == message_id2 [EOL] assert message2 [ [number] ] == OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] assert message3 [ [number] ] == message_id3 [EOL] assert message3 [ [number] ] == OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] [EOL] async def test_xadd_manual_message_ids ( redis , server_bin ) : [EOL] await redis . xadd ( [string] , { [string] : [string] } , message_id = [string] ) [EOL] await redis . xadd ( [string] , { [string] : [string] } , message_id = [string] ) [EOL] await redis . xadd ( [string] , { [string] : [string] } , message_id = [string] ) [EOL] [EOL] messages = await redis . xrange ( [string] ) [EOL] message_ids = [ message_id for message_id , _ in messages ] [EOL] assert message_ids == [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] async def test_xadd_maxlen_inexact ( redis , server_bin ) : [EOL] await redis . xadd ( [string] , { [string] : [string] } ) [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] await redis . xadd ( [string] , { [string] : [string] } ) [EOL] await asyncio . sleep ( [number] ) [EOL] await redis . xadd ( [string] , { [string] : [string] } , max_len = [number] , exact_len = False ) [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( [string] ) [EOL] [comment] [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] for x in range ( [number] , [number] ) : [EOL] await redis . xadd ( [string] , { [string] : [string] } , max_len = [number] ) [EOL] [EOL] messages = await redis . xrange ( [string] ) [EOL] assert len ( messages ) < [number] [EOL] [EOL] [EOL] async def test_xrange ( redis , server_bin ) : [EOL] stream = [string] [EOL] fields = OrderedDict ( ( ( [string] , [string] ) , ( [string] , [string] ) , ) ) [EOL] message_id1 = await redis . xadd ( stream , fields ) [EOL] message_id2 = await redis . xadd ( stream , fields ) [EOL] message_id3 = await redis . xadd ( stream , fields ) [comment] [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( stream ) [EOL] assert len ( messages ) == [number] [EOL] message = messages [ [number] ] [EOL] assert message [ [number] ] == message_id1 [EOL] assert message [ [number] ] == OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( stream , start = message_id2 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrange ( stream , start = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( stream , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrange ( stream , stop = message_id2 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrange ( stream , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( stream , start = message_id1 , stop = message_id2 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrange ( stream , start = [string] , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrange ( stream , count = [number] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [EOL] async def test_xrevrange ( redis , server_bin ) : [EOL] stream = [string] [EOL] fields = OrderedDict ( ( ( [string] , [string] ) , ( [string] , [string] ) , ) ) [EOL] message_id1 = await redis . xadd ( stream , fields ) [EOL] message_id2 = await redis . xadd ( stream , fields ) [EOL] message_id3 = await redis . xadd ( stream , fields ) [comment] [EOL] [EOL] [comment] [EOL] messages = await redis . xrevrange ( stream ) [EOL] assert len ( messages ) == [number] [EOL] message = messages [ [number] ] [EOL] assert message [ [number] ] == message_id3 [EOL] assert message [ [number] ] == OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] [comment] [EOL] messages = await redis . xrevrange ( stream , start = message_id2 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrevrange ( stream , start = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrevrange ( stream , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrevrange ( stream , stop = message_id2 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrevrange ( stream , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrevrange ( stream , start = message_id2 , stop = message_id1 ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xrevrange ( stream , start = [string] , stop = [string] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [comment] [EOL] messages = await redis . xrevrange ( stream , count = [number] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [EOL] async def test_xread_selection ( redis , server_bin ) : [EOL] [docstring] [EOL] stream = [string] [EOL] fields = OrderedDict ( ( ( [string] , [string] ) , ( [string] , [string] ) , ) ) [EOL] message_id1 = await redis . xadd ( stream , fields ) [EOL] message_id2 = await redis . xadd ( stream , fields ) [comment] [EOL] message_id3 = await redis . xadd ( stream , fields ) [EOL] [EOL] messages = await redis . xread ( [ stream ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xread ( [ stream ] , timeout = [number] , latest_ids = [ message_id1 ] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xread ( [ stream ] , timeout = [number] , latest_ids = [ message_id3 ] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] messages = await redis . xread ( [ stream ] , timeout = [number] , latest_ids = [ [string] ] , count = [number] ) [EOL] assert len ( messages ) == [number] [EOL] [EOL] [EOL] async def test_xread_blocking ( redis , create_redis , server , server_bin ) : [EOL] [docstring] [EOL] fields = OrderedDict ( ( ( [string] , [string] ) , ( [string] , [string] ) , ) ) [EOL] other_redis = await create_redis ( server . tcp_address ) [EOL] [EOL] [comment] [EOL] consumer = other_redis . xread ( [ [string] ] , timeout = [number] ) [EOL] [EOL] producer_task = asyncio . Task ( add_message_with_sleep ( redis , [string] , fields ) ) [EOL] results = await asyncio . gather ( consumer , producer_task ) [EOL] [EOL] received_messages , sent_message_id = results [EOL] assert len ( received_messages ) == [number] [EOL] assert sent_message_id [EOL] [EOL] received_stream , received_message_id , received_fields = received_messages [ [number] ] [EOL] [EOL] assert received_stream == [string] [EOL] assert sent_message_id == received_message_id [EOL] assert fields == received_fields [EOL] [EOL] [comment] [EOL] results = await redis . xread ( [ [string] ] , timeout = [number] ) [EOL] assert results == [ ] [EOL] [EOL] other_redis . close ( ) [EOL] [EOL] [EOL] async def test_xgroup_create ( redis , server_bin ) : [EOL] [comment] [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] info = await redis . xinfo_groups ( [string] ) [EOL] assert info == [ { [string] : [string] , [string] : mock . ANY , [string] : [number] , [string] : [number] } ] [EOL] [EOL] [EOL] async def test_xgroup_create_mkstream ( redis , server_bin ) : [EOL] await redis . xgroup_create ( [string] , [string] , mkstream = True ) [EOL] info = await redis . xinfo_groups ( [string] ) [EOL] assert info == [ { [string] : [string] , [string] : mock . ANY , [string] : [number] , [string] : [number] } ] [EOL] [EOL] [EOL] async def test_xgroup_create_already_exists ( redis , server_bin ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] with pytest . raises ( BusyGroupError ) : [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_xgroup_setid ( redis , server_bin ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] await redis . xgroup_setid ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] async def test_xgroup_destroy ( redis , server_bin ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] await redis . xgroup_destroy ( [string] , [string] ) [EOL] info = await redis . xinfo_groups ( [string] ) [EOL] assert not info [EOL] [EOL] [EOL] async def test_xread_group ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] [EOL] [comment] [EOL] messages = await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] assert len ( messages ) == [number] [EOL] stream , message_id , fields = messages [ [number] ] [EOL] assert stream == [string] [EOL] assert message_id [EOL] assert fields == { [string] : [string] } [EOL] [EOL] [EOL] async def test_xread_group_with_no_ack ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] [EOL] [comment] [EOL] messages = await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] , no_ack = True ) [EOL] assert len ( messages ) == [number] [EOL] stream , message_id , fields = messages [ [number] ] [EOL] assert stream == [string] [EOL] assert message_id [EOL] assert fields == { [string] : [string] } [EOL] [EOL] [EOL] async def test_xack_and_xpending ( redis ) : [EOL] [comment] [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] [EOL] [comment] [EOL] pending_count , min_id , max_id , count = await redis . xpending ( [string] , [string] ) [EOL] assert pending_count == [number] [EOL] [EOL] [comment] [EOL] await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] [EOL] [comment] [EOL] pending_count , min_id , max_id , pel = await redis . xpending ( [string] , [string] ) [EOL] assert pending_count == [number] [EOL] assert min_id == message_id [EOL] assert max_id == message_id [EOL] assert pel == [ [ [string] , [string] ] ] [EOL] [EOL] [comment] [EOL] await redis . xack ( [string] , [string] , message_id ) [EOL] [EOL] [comment] [EOL] pending_count , min_id , max_id , pel = await redis . xpending ( [string] , [string] ) [EOL] assert pending_count == [number] [EOL] [EOL] [EOL] async def test_xpending_get_messages ( redis ) : [EOL] [comment] [EOL] [comment] [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] response = await redis . xpending ( [string] , [string] , [string] , [string] , [number] ) [EOL] assert len ( response ) == [number] [EOL] ( message_id , consumer_name , milliseconds_since_last_delivery , num_deliveries ) = response [ [number] ] [EOL] [EOL] assert message_id [EOL] assert consumer_name == [string] [EOL] assert milliseconds_since_last_delivery >= [number] [EOL] assert num_deliveries == [number] [EOL] [EOL] [EOL] async def test_xpending_start_of_zero ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] [comment] [EOL] await redis . xpending ( [string] , [string] , [number] , [string] , [number] ) [EOL] [EOL] [EOL] async def test_xclaim_simple ( redis ) : [EOL] [comment] [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] [EOL] [comment] [EOL] pending_count , min_id , max_id , pel = await redis . xpending ( [string] , [string] ) [EOL] assert pending_count == [number] [EOL] assert pel == [ [ [string] , [string] ] ] [EOL] [EOL] [comment] [EOL] result = await redis . xclaim ( [string] , [string] , [string] , min_idle_time = [number] , id = message_id ) [EOL] assert result [EOL] claimed_message_id , fields = result [ [number] ] [EOL] assert claimed_message_id == message_id [EOL] assert fields == { [string] : [string] } [EOL] [EOL] [comment] [EOL] pending_count , min_id , max_id , pel = await redis . xpending ( [string] , [string] ) [EOL] assert pending_count == [number] [EOL] assert pel == [ [ [string] , [string] ] ] [EOL] [EOL] [EOL] async def test_xclaim_min_idle_time_includes_messages ( redis ) : [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] result = await redis . xclaim ( [string] , [string] , [string] , min_idle_time = [number] , id = message_id ) [EOL] assert result [EOL] [EOL] [EOL] async def test_xclaim_min_idle_time_excludes_messages ( redis ) : [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] , latest_id = [string] ) [EOL] await redis . xread_group ( [string] , [string] , [ [string] ] , timeout = [number] , latest_ids = [ [string] ] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] result = await redis . xclaim ( [string] , [string] , [string] , min_idle_time = [number] , id = message_id ) [EOL] [comment] [EOL] assert not result [EOL] [EOL] [EOL] async def test_xgroup_delconsumer ( redis , create_redis , server ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] await redis . xread_group ( [string] , [string] , streams = [ [string] ] , latest_ids = [ [number] ] ) [EOL] [EOL] response = await redis . xgroup_delconsumer ( [string] , [string] , [string] ) [EOL] assert response == [number] [EOL] info = await redis . xinfo_consumers ( [string] , [string] ) [EOL] assert not info [EOL] [EOL] [EOL] async def test_xdel_stream ( redis ) : [EOL] message_id = await redis . xadd ( [string] , { [string] : [number] } ) [EOL] response = await redis . xdel ( [string] , id = message_id ) [EOL] assert response >= [number] [EOL] [EOL] [EOL] async def test_xtrim_stream ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] response = await redis . xtrim ( [string] , max_len = [number] , exact_len = False ) [EOL] assert response >= [number] [EOL] [EOL] [EOL] async def test_xlen_stream ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] response = await redis . xlen ( [string] ) [EOL] assert response >= [number] [EOL] [EOL] [EOL] async def test_xinfo_consumers ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] await redis . xread_group ( [string] , [string] , streams = [ [string] ] , latest_ids = [ [number] ] ) [EOL] [EOL] info = await redis . xinfo_consumers ( [string] , [string] ) [EOL] assert info [EOL] assert isinstance ( info [ [number] ] , dict ) [EOL] [EOL] [EOL] async def test_xinfo_stream ( redis ) : [EOL] await redis . xadd ( [string] , { [string] : [number] } ) [EOL] await redis . xgroup_create ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] await redis . xread_group ( [string] , [string] , streams = [ [string] ] , latest_ids = [ [number] ] ) [EOL] [EOL] info = await redis . xinfo_stream ( [string] ) [EOL] assert info [EOL] assert isinstance ( info , dict ) [EOL] [EOL] info = await redis . xinfo ( [string] ) [EOL] assert info [EOL] assert isinstance ( info , dict ) [EOL] [EOL] [EOL] async def test_xinfo_help ( redis ) : [EOL] info = await redis . xinfo_help ( ) [EOL] assert info [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [string] ] ) async def test_xread_param_types ( redis , param ) : [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . xread ( [ [string] ] , timeout = param , latest_ids = [ [number] ] ) [EOL] [EOL] [EOL] def test_parse_messages_ok ( ) : [EOL] message = [ ( [string] , [ [string] , [string] , [string] , [string] ] ) ] [EOL] assert parse_messages ( message ) == [ ( [string] , { [string] : [string] , [string] : [string] } ) ] [EOL] [EOL] [EOL] def test_parse_messages_null_fields ( ) : [EOL] [comment] [EOL] [comment] [EOL] message = [ ( [string] , None ) ] [EOL] assert parse_messages ( message ) == [ ] [EOL] [EOL] [EOL] def test_parse_messages_null_message ( ) : [EOL] [comment] [EOL] [comment] [EOL] message = [ None ] [EOL] assert parse_messages ( message ) == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import asyncio [EOL] import sys [EOL] [EOL] from aioredis import ( SlaveNotFoundError , ReadOnlyError , ) [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] pytestmark = redis_version ( [number] , [number] , [number] , reason = [string] ) [EOL] if sys . platform == [string] : [EOL] pytestmark = pytest . mark . skip ( reason = [string] ) [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_auto_failover ( start_sentinel , start_server , create_sentinel , create_connection ) : [EOL] server1 = start_server ( [string] , [ [string] ] ) [EOL] start_server ( [string] , [ [string] ] , slaveof = server1 ) [EOL] start_server ( [string] , [ [string] ] , slaveof = server1 ) [EOL] [EOL] sentinel1 = start_sentinel ( [string] , server1 , quorum = [number] , down_after_milliseconds = [number] , failover_timeout = [number] ) [EOL] sentinel2 = start_sentinel ( [string] , server1 , quorum = [number] , down_after_milliseconds = [number] , failover_timeout = [number] ) [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] sp = await create_sentinel ( [ sentinel1 . tcp_address , sentinel2 . tcp_address ] , timeout = [number] ) [EOL] [EOL] _ , old_port = await sp . master_address ( server1 . name ) [EOL] [comment] [EOL] assert old_port == server1 . tcp_address . port [EOL] master = sp . master_for ( server1 . name ) [EOL] res = await master . role ( ) [EOL] assert res . role == [string] [EOL] assert master . address is not None [EOL] assert master . address [ [number] ] == old_port [EOL] [EOL] [comment] [EOL] conn = await create_connection ( server1 . tcp_address ) [EOL] await conn . execute ( [string] , [string] , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert ( await master . set ( [string] , [string] ) ) [EOL] assert master . address is not None [EOL] assert master . address [ [number] ] != old_port [EOL] [EOL] [EOL] async def test_sentinel_normal ( sentinel , create_sentinel ) : [EOL] redis_sentinel = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] redis = redis_sentinel . master_for ( [string] ) [EOL] [EOL] info = await redis . role ( ) [EOL] assert info . role == [string] [EOL] [EOL] key , field , value = [string] , [string] , [string] [EOL] exists = await redis . hexists ( key , field ) [EOL] if exists : [EOL] ret = await redis . hdel ( key , field ) [EOL] assert ret != [number] [EOL] [EOL] ret = await redis . hset ( key , field , value ) [EOL] assert ret == [number] [EOL] ret = await redis . hset ( key , field , value ) [EOL] assert ret == [number] [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) async def test_sentinel_slave ( sentinel , create_sentinel ) : [EOL] redis_sentinel = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] redis = redis_sentinel . slave_for ( [string] ) [EOL] [EOL] info = await redis . role ( ) [EOL] assert info . role == [string] [EOL] [EOL] key , field , value = [string] , [string] , [string] [EOL] [comment] [EOL] exists = await redis . hexists ( key , field ) [EOL] if exists : [EOL] with pytest . raises ( ReadOnlyError ) : [EOL] await redis . hdel ( key , field ) [EOL] [EOL] with pytest . raises ( ReadOnlyError ) : [EOL] await redis . hset ( key , field , value ) [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) async def test_sentinel_slave_fail ( sentinel , create_sentinel ) : [EOL] redis_sentinel = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] [EOL] key , field , value = [string] , [string] , [string] [EOL] [EOL] redis = redis_sentinel . slave_for ( [string] ) [EOL] exists = await redis . hexists ( key , field ) [EOL] if exists : [EOL] with pytest . raises ( ReadOnlyError ) : [EOL] await redis . hdel ( key , field ) [EOL] [EOL] with pytest . raises ( ReadOnlyError ) : [EOL] await redis . hset ( key , field , value ) [EOL] [EOL] ret = await redis_sentinel . failover ( [string] ) [EOL] assert ret is True [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] with pytest . raises ( ReadOnlyError ) : [EOL] await redis . hset ( key , field , value ) [EOL] [EOL] ret = await redis_sentinel . failover ( [string] ) [EOL] assert ret is True [EOL] await asyncio . sleep ( [number] ) [EOL] while True : [EOL] try : [EOL] await asyncio . sleep ( [number] ) [EOL] await redis . hset ( key , field , value ) [EOL] except SlaveNotFoundError : [EOL] continue [EOL] except ReadOnlyError : [EOL] break [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) async def test_sentinel_normal_fail ( sentinel , create_sentinel ) : [EOL] redis_sentinel = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] [EOL] key , field , value = [string] , [string] , [string] [EOL] redis = redis_sentinel . master_for ( [string] ) [EOL] exists = await redis . hexists ( key , field ) [EOL] if exists : [EOL] ret = await redis . hdel ( key , field ) [EOL] assert ret == [number] [EOL] [EOL] ret = await redis . hset ( key , field , value ) [EOL] assert ret == [number] [EOL] ret = await redis_sentinel . failover ( [string] ) [EOL] assert ret is True [EOL] await asyncio . sleep ( [number] ) [EOL] ret = await redis . hset ( key , field , value ) [EOL] assert ret == [number] [EOL] ret = await redis_sentinel . failover ( [string] ) [EOL] assert ret is True [EOL] await asyncio . sleep ( [number] ) [EOL] redis = redis_sentinel . slave_for ( [string] ) [EOL] while True : [EOL] try : [EOL] await redis . hset ( key , field , value ) [EOL] await asyncio . sleep ( [number] ) [EOL] [comment] [EOL] except ReadOnlyError : [EOL] break [EOL] [EOL] [EOL] @ pytest . mark . timeout ( [number] ) async def test_failover_command ( start_server , start_sentinel , create_sentinel ) : [EOL] server = start_server ( [string] , [ [string] ] ) [EOL] start_server ( [string] , [ [string] ] , slaveof = server ) [EOL] [EOL] sentinel = start_sentinel ( [string] , server , quorum = [number] , down_after_milliseconds = [number] , failover_timeout = [number] ) [EOL] [EOL] name = [string] [EOL] redis_sentinel = await create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) [EOL] [comment] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] orig_master = await redis_sentinel . master_address ( name ) [EOL] assert await redis_sentinel . failover ( name ) is True [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] new_master = await redis_sentinel . master_address ( name ) [EOL] assert orig_master != new_master [EOL] [EOL] ret = await redis_sentinel . failover ( name ) [EOL] assert ret is True [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] new_master = await redis_sentinel . master_address ( name ) [EOL] assert orig_master == new_master [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import asyncio [EOL] [EOL] from aioredis import ReplyError [EOL] [EOL] [EOL] async def test_eval ( redis ) : [EOL] await redis . delete ( [string] , [string] ) [EOL] [EOL] script = [string] [EOL] res = await redis . eval ( script ) [EOL] assert res == [number] [EOL] [EOL] key , value = [string] , [string] [EOL] script = [string] [EOL] res = await redis . eval ( script , keys = [ key ] , args = [ value ] ) [EOL] assert res == [string] [EOL] res = await redis . eval ( script , keys = [ key ] , args = [ value ] ) [EOL] assert res == [string] [EOL] [EOL] script = [string] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . eval ( script , keys = [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . eval ( script , keys = [ [string] , None ] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . eval ( script , args = [ [string] , None ] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . eval ( None ) [EOL] [EOL] [EOL] async def test_evalsha ( redis ) : [EOL] script = [string] [EOL] sha_hash = await redis . script_load ( script ) [EOL] assert len ( sha_hash ) == [number] [EOL] res = await redis . evalsha ( sha_hash ) [EOL] assert res == [number] [EOL] [EOL] key , arg1 , arg2 = [string] , [string] , [string] [EOL] script = [string] [EOL] sha_hash = await redis . script_load ( script ) [EOL] res = await redis . evalsha ( sha_hash , [ key ] , [ arg1 , arg2 ] ) [EOL] assert res == [ key , arg1 , arg2 ] [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . evalsha ( [string] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . evalsha ( sha_hash , keys = [ [string] , None ] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . evalsha ( sha_hash , args = [ [string] , None ] ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . evalsha ( None ) [EOL] [EOL] [EOL] async def test_script_exists ( redis ) : [EOL] sha_hash1 = await redis . script_load ( [string] ) [EOL] sha_hash2 = await redis . script_load ( [string] ) [EOL] assert len ( sha_hash1 ) == [number] [EOL] assert len ( sha_hash2 ) == [number] [EOL] [EOL] res = await redis . script_exists ( sha_hash1 , sha_hash1 ) [EOL] assert res == [ [number] , [number] ] [EOL] [EOL] no_sha = [string] [EOL] res = await redis . script_exists ( no_sha ) [EOL] assert res == [ [number] ] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . script_exists ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . script_exists ( [string] , None ) [EOL] [EOL] [EOL] async def test_script_flush ( redis ) : [EOL] sha_hash1 = await redis . script_load ( [string] ) [EOL] assert len ( sha_hash1 ) == [number] [EOL] res = await redis . script_exists ( sha_hash1 ) [EOL] assert res == [ [number] ] [EOL] res = await redis . script_flush ( ) [EOL] assert res is True [EOL] res = await redis . script_exists ( sha_hash1 ) [EOL] assert res == [ [number] ] [EOL] [EOL] [EOL] async def test_script_load ( redis ) : [EOL] sha_hash1 = await redis . script_load ( [string] ) [EOL] sha_hash2 = await redis . script_load ( [string] ) [EOL] assert len ( sha_hash1 ) == [number] [EOL] assert len ( sha_hash2 ) == [number] [EOL] res = await redis . script_exists ( sha_hash1 , sha_hash1 ) [EOL] assert res == [ [number] , [number] ] [EOL] [EOL] [EOL] async def test_script_kill ( create_redis , server , redis ) : [EOL] script = [string] [EOL] [EOL] other_redis = await create_redis ( server . tcp_address ) [EOL] [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok is True [EOL] [EOL] fut = other_redis . eval ( script , keys = [ [string] ] , args = [ [number] ] ) [EOL] await asyncio . sleep ( [number] ) [EOL] resp = await redis . script_kill ( ) [EOL] assert resp is True [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await fut [EOL] [EOL] with pytest . raises ( ReplyError ) : [EOL] await redis . script_kill ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from aioredis . util import encode_command [EOL] [EOL] [EOL] def test_encode_bytes ( ) : [EOL] res = encode_command ( [string] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( [string] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( bytearray ( [string] ) ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_bytearray ( ) : [EOL] res = encode_command ( bytearray ( [string] ) ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( bytearray ( [string] ) , bytearray ( [string] ) ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_str ( ) : [EOL] res = encode_command ( [string] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_int ( ) : [EOL] res = encode_command ( [number] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( - [number] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_float ( ) : [EOL] res = encode_command ( [number] ) [EOL] assert res == [string] [EOL] [EOL] res = encode_command ( - [number] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_empty ( ) : [EOL] res = encode_command ( ) [EOL] assert res == [string] [EOL] [EOL] [EOL] def test_encode_errors ( ) : [EOL] with pytest . raises ( TypeError ) : [EOL] encode_command ( dict ( ) ) [EOL] with pytest . raises ( TypeError ) : [EOL] encode_command ( list ( ) ) [EOL] with pytest . raises ( TypeError ) : [EOL] encode_command ( None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from aioredis . errors import ReplyError [EOL] from aioredis . errors import MaxClientsError [EOL] [EOL] [EOL] def test_return_default_class ( ) : [EOL] assert isinstance ( ReplyError ( None ) , ReplyError ) [EOL] [EOL] [EOL] def test_return_adhoc_class ( ) : [EOL] class MyError ( ReplyError ) : [EOL] MATCH_REPLY = [string] [EOL] [EOL] assert isinstance ( ReplyError ( [string] ) , MyError ) [EOL] [EOL] [EOL] def test_return_max_clients_error ( ) : [EOL] assert isinstance ( ReplyError ( [string] ) , MaxClientsError ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import pytest [EOL] [EOL] __all__ = [ [string] , ] [EOL] [EOL] [EOL] def redis_version ( * version , reason ) : [EOL] assert [number] < len ( version ) <= [number] , version [EOL] assert all ( isinstance ( v , int ) for v in version ) , version [EOL] return pytest . mark . redis_version ( version = version , reason = reason ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import asyncio [EOL] import asyncio [EOL] import pytest [EOL] import aioredis [EOL] [EOL] from _testutils import redis_version [EOL] [EOL] [EOL] async def _reader ( channel , output , waiter , conn ) : [EOL] await conn . execute ( [string] , channel ) [EOL] ch = conn . pubsub_channels [ channel ] [EOL] waiter . set_result ( conn ) [EOL] while await ch . wait_message ( ) : [EOL] msg = await ch . get ( ) [EOL] await output . put ( msg ) [EOL] [EOL] [EOL] async def test_publish ( create_connection , redis , server , loop ) : [EOL] out = asyncio . Queue ( ) [EOL] fut = loop . create_future ( ) [EOL] conn = await create_connection ( server . tcp_address ) [EOL] sub = asyncio . ensure_future ( _reader ( [string] , out , fut , conn ) ) [EOL] [EOL] await fut [EOL] await redis . publish ( [string] , [string] ) [EOL] msg = await out . get ( ) [EOL] assert msg == [string] [EOL] [EOL] sub . cancel ( ) [EOL] [EOL] [EOL] async def test_publish_json ( create_connection , redis , server , loop ) : [EOL] out = asyncio . Queue ( ) [EOL] fut = loop . create_future ( ) [EOL] conn = await create_connection ( server . tcp_address ) [EOL] sub = asyncio . ensure_future ( _reader ( [string] , out , fut , conn ) ) [EOL] [EOL] await fut [EOL] [EOL] res = await redis . publish_json ( [string] , { [string] : [string] } ) [EOL] assert res == [number] [comment] [EOL] [EOL] msg = await out . get ( ) [EOL] assert msg == [string] [EOL] sub . cancel ( ) [EOL] [EOL] [EOL] async def test_subscribe ( redis ) : [EOL] res = await redis . subscribe ( [string] , [string] ) [EOL] assert redis . in_pubsub == [number] [EOL] [EOL] ch1 = redis . channels [ [string] ] [EOL] ch2 = redis . channels [ [string] ] [EOL] [EOL] assert res == [ ch1 , ch2 ] [EOL] assert ch1 . is_pattern is False [EOL] assert ch2 . is_pattern is False [EOL] [EOL] res = await redis . unsubscribe ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ pytest . param ( aioredis . create_redis_pool , id = [string] ) , ] ) async def test_subscribe_empty_pool ( create_redis , server , _closable ) : [EOL] redis = await create_redis ( server . tcp_address ) [EOL] _closable ( redis ) [EOL] await redis . connection . clear ( ) [EOL] [EOL] res = await redis . subscribe ( [string] , [string] ) [EOL] assert redis . in_pubsub == [number] [EOL] [EOL] ch1 = redis . channels [ [string] ] [EOL] ch2 = redis . channels [ [string] ] [EOL] [EOL] assert res == [ ch1 , ch2 ] [EOL] assert ch1 . is_pattern is False [EOL] assert ch2 . is_pattern is False [EOL] [EOL] res = await redis . unsubscribe ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] ] [EOL] [EOL] [EOL] async def test_psubscribe ( redis , create_redis , server ) : [EOL] sub = redis [EOL] res = await sub . psubscribe ( [string] , [string] ) [EOL] assert sub . in_pubsub == [number] [EOL] [EOL] pat1 = sub . patterns [ [string] ] [EOL] pat2 = sub . patterns [ [string] ] [EOL] assert res == [ pat1 , pat2 ] [EOL] [EOL] pub = await create_redis ( server . tcp_address ) [EOL] await pub . publish_json ( [string] , { [string] : [string] } ) [EOL] res = await pat2 . get_json ( ) [EOL] assert res == ( [string] , { [string] : [string] } ) [EOL] [EOL] res = await sub . punsubscribe ( [string] , [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ pytest . param ( aioredis . create_redis_pool , id = [string] ) , ] ) async def test_psubscribe_empty_pool ( create_redis , server , _closable ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] _closable ( sub ) [EOL] _closable ( pub ) [EOL] await sub . connection . clear ( ) [EOL] res = await sub . psubscribe ( [string] , [string] ) [EOL] assert sub . in_pubsub == [number] [EOL] [EOL] pat1 = sub . patterns [ [string] ] [EOL] pat2 = sub . patterns [ [string] ] [EOL] assert res == [ pat1 , pat2 ] [EOL] [EOL] await pub . publish_json ( [string] , { [string] : [string] } ) [EOL] res = await pat2 . get_json ( ) [EOL] assert res == ( [string] , { [string] : [string] } ) [EOL] [EOL] res = await sub . punsubscribe ( [string] , [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] , [ [string] , [string] , [number] ] , ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pubsub_channels ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address ) [EOL] res = await redis . pubsub_channels ( ) [EOL] assert res == [ ] [EOL] [EOL] res = await redis . pubsub_channels ( [string] ) [EOL] assert res == [ ] [EOL] [EOL] sub = await create_redis ( server . tcp_address ) [EOL] await sub . subscribe ( [string] ) [EOL] [EOL] res = await redis . pubsub_channels ( ) [EOL] assert res == [ [string] ] [EOL] [EOL] res = await redis . pubsub_channels ( [string] ) [EOL] assert res == [ [string] ] [EOL] [EOL] await sub . unsubscribe ( [string] ) [EOL] await sub . psubscribe ( [string] ) [EOL] [EOL] res = await redis . pubsub_channels ( ) [EOL] assert res == [ ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pubsub_numsub ( create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address ) [EOL] res = await redis . pubsub_numsub ( ) [EOL] assert res == { } [EOL] [EOL] res = await redis . pubsub_numsub ( [string] ) [EOL] assert res == { [string] : [number] } [EOL] [EOL] sub = await create_redis ( server . tcp_address ) [EOL] await sub . subscribe ( [string] ) [EOL] [EOL] res = await redis . pubsub_numsub ( ) [EOL] assert res == { } [EOL] [EOL] res = await redis . pubsub_numsub ( [string] ) [EOL] assert res == { [string] : [number] } [EOL] [EOL] res = await redis . pubsub_numsub ( [string] ) [EOL] assert res == { [string] : [number] } [EOL] [EOL] res = await redis . pubsub_numsub ( [string] , [string] ) [EOL] assert res == { [string] : [number] , [string] : [number] } [EOL] [EOL] await sub . unsubscribe ( [string] ) [EOL] await sub . psubscribe ( [string] ) [EOL] [EOL] res = await redis . pubsub_numsub ( ) [EOL] assert res == { } [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pubsub_numpat ( create_redis , server , redis ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] [EOL] res = await redis . pubsub_numpat ( ) [EOL] assert res == [number] [EOL] [EOL] await sub . subscribe ( [string] ) [EOL] res = await redis . pubsub_numpat ( ) [EOL] assert res == [number] [EOL] [EOL] await sub . psubscribe ( [string] ) [EOL] res = await redis . pubsub_numpat ( ) [EOL] assert res == [number] [EOL] [EOL] [EOL] async def test_close_pubsub_channels ( redis ) : [EOL] ch , = await redis . subscribe ( [string] ) [EOL] [EOL] async def waiter ( ch ) : [EOL] assert not await ch . wait_message ( ) [EOL] [EOL] tsk = asyncio . ensure_future ( waiter ( ch ) ) [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] await tsk [EOL] [EOL] [EOL] async def test_close_pubsub_patterns ( redis ) : [EOL] ch , = await redis . psubscribe ( [string] ) [EOL] [EOL] async def waiter ( ch ) : [EOL] assert not await ch . wait_message ( ) [EOL] [EOL] tsk = asyncio . ensure_future ( waiter ( ch ) ) [EOL] redis . close ( ) [EOL] await redis . wait_closed ( ) [EOL] await tsk [EOL] [EOL] [EOL] async def test_close_cancelled_pubsub_channel ( redis ) : [EOL] ch , = await redis . subscribe ( [string] ) [EOL] [EOL] async def waiter ( ch ) : [EOL] with pytest . raises ( asyncio . CancelledError ) : [EOL] await ch . wait_message ( ) [EOL] [EOL] tsk = asyncio . ensure_future ( waiter ( ch ) ) [EOL] await asyncio . sleep ( [number] ) [EOL] tsk . cancel ( ) [EOL] [EOL] [EOL] async def test_channel_get_after_close ( create_redis , loop , server ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] ch , = await sub . subscribe ( [string] ) [EOL] [EOL] await pub . publish ( [string] , [string] ) [EOL] assert await ch . get ( ) == [string] [EOL] loop . call_soon ( sub . close ) [EOL] assert await ch . get ( ) is None [EOL] with pytest . raises ( aioredis . ChannelClosedError ) : [EOL] assert await ch . get ( ) [EOL] [EOL] [EOL] async def test_subscribe_concurrency ( create_redis , server ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] [EOL] async def subscribe ( * args ) : [EOL] return await sub . subscribe ( * args ) [EOL] [EOL] async def publish ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await pub . publish ( * args ) [EOL] [EOL] res = await asyncio . gather ( subscribe ( [string] ) , publish ( [string] , [string] ) , subscribe ( [string] ) , ) [EOL] ( ch1 , ) , subs , ( ch2 , ) = res [EOL] [EOL] assert ch1 . name == [string] [EOL] assert subs == [number] [EOL] assert ch2 . name == [string] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pubsub_ping ( redis ) : [EOL] await redis . subscribe ( [string] , [string] ) [EOL] [EOL] res = await redis . ping ( ) [EOL] assert res == [string] [EOL] res = await redis . ping ( [string] ) [EOL] assert res == [string] [EOL] res = await redis . ping ( [string] , encoding = [string] ) [EOL] assert res == [string] [EOL] [EOL] await redis . unsubscribe ( [string] , [string] ) [EOL] [EOL] [EOL] async def test_pubsub_channel_iter ( create_redis , server ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] [EOL] ch , = await sub . subscribe ( [string] ) [EOL] [EOL] async def coro ( ch ) : [EOL] lst = [ ] [EOL] async for msg in ch . iter ( ) : [EOL] lst . append ( msg ) [EOL] return lst [EOL] [EOL] tsk = asyncio . ensure_future ( coro ( ch ) ) [EOL] await pub . publish_json ( [string] , { [string] : [string] } ) [EOL] await pub . publish_json ( [string] , [ [string] ] ) [EOL] await asyncio . sleep ( [number] ) [EOL] ch . close ( ) [EOL] assert await tsk == [ [string] , [string] ] [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pubsub_disconnection_notification ( create_redis , server ) : [EOL] sub = await create_redis ( server . tcp_address ) [EOL] pub = await create_redis ( server . tcp_address ) [EOL] [EOL] async def coro ( ch ) : [EOL] lst = [ ] [EOL] async for msg in ch . iter ( ) : [EOL] assert ch . is_active [EOL] lst . append ( msg ) [EOL] return lst [EOL] [EOL] ch , = await sub . subscribe ( [string] ) [EOL] tsk = asyncio . ensure_future ( coro ( ch ) ) [EOL] assert ch . is_active [EOL] await pub . publish_json ( [string] , { [string] : [string] } ) [EOL] assert ch . is_active [EOL] assert await pub . execute ( [string] , [string] , [string] , [string] ) >= [number] [EOL] assert await pub . publish_json ( [string] , [ [string] ] ) == [number] [EOL] assert await tsk == [ [string] ] [EOL] assert not ch . is_active [EOL]	
from typing import Set , Tuple , Any , Type , List [EOL] import typing [EOL] import aioredis [EOL] import asyncio [EOL] import pytest [EOL] import async_timeout [EOL] import logging [EOL] import sys [EOL] [EOL] from unittest . mock import patch [EOL] [EOL] from aioredis import ( ReplyError , PoolClosedError , ConnectionClosedError , ConnectionsPool , MaxClientsError , ) [EOL] from _testutils import redis_version [EOL] [EOL] BPO_34638 = sys . version_info >= ( [number] , [number] ) [EOL] [EOL] [EOL] def _assert_defaults ( pool ) : [EOL] assert isinstance ( pool , ConnectionsPool ) [EOL] assert pool . minsize == [number] [EOL] assert pool . maxsize == [number] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert not pool . _close_state . is_set ( ) [EOL] [EOL] [EOL] def test_connect ( pool ) : [EOL] _assert_defaults ( pool ) [EOL] [EOL] [EOL] async def test_clear ( pool ) : [EOL] _assert_defaults ( pool ) [EOL] [EOL] await pool . clear ( ) [EOL] assert pool . freesize == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , - [number] , [number] , [number] ] ) async def test_minsize ( minsize , create_pool , server ) : [EOL] [EOL] with pytest . raises ( AssertionError ) : [EOL] await create_pool ( server . tcp_address , minsize = minsize , maxsize = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ None , - [number] , [number] , [number] ] ) async def test_maxsize ( maxsize , create_pool , server ) : [EOL] [EOL] with pytest . raises ( AssertionError ) : [EOL] await create_pool ( server . tcp_address , minsize = [number] , maxsize = maxsize ) [EOL] [EOL] [EOL] async def test_create_connection_timeout ( create_pool , server ) : [EOL] with patch ( [string] ) as open_conn_mock : [EOL] open_conn_mock . side_effect = lambda * a , ** kw : asyncio . sleep ( [number] ) [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await create_pool ( server . tcp_address , create_connection_timeout = [number] ) [EOL] [EOL] [EOL] def test_no_yield_from ( pool ) : [EOL] with pytest . raises ( RuntimeError ) : [EOL] with pool : [EOL] pass [comment] [EOL] [EOL] [EOL] async def test_simple_command ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] [EOL] with ( await pool ) as conn : [EOL] msg = await conn . execute ( [string] , [string] ) [EOL] assert msg == [string] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] [EOL] async def test_create_new ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) : [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) : [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] [EOL] async def test_create_constraints ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) : [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await asyncio . wait_for ( pool . acquire ( ) , timeout = [number] ) [EOL] [EOL] [EOL] async def test_create_no_minsize ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) : [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await asyncio . wait_for ( pool . acquire ( ) , timeout = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] [EOL] async def test_create_pool_cls ( create_pool , server ) : [EOL] [EOL] class MyPool ( ConnectionsPool ) : [EOL] pass [EOL] [EOL] pool = await create_pool ( server . tcp_address , pool_cls = MyPool ) [EOL] [EOL] assert isinstance ( pool , MyPool ) [EOL] [EOL] [EOL] async def test_create_pool_cls_invalid ( create_pool , server ) : [EOL] with pytest . raises ( AssertionError ) : [EOL] await create_pool ( server . tcp_address , pool_cls = type ) [EOL] [EOL] [EOL] async def test_release_closed ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) as conn : [EOL] conn . close ( ) [EOL] await conn . wait_closed ( ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] [EOL] async def test_release_pending ( create_pool , server , caplog ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] caplog . clear ( ) [EOL] with caplog . at_level ( [string] , [string] ) : [EOL] with ( await pool ) as conn : [EOL] try : [EOL] await asyncio . wait_for ( conn . execute ( [string] , [string] , [string] ) , [number] , ) [EOL] except asyncio . TimeoutError : [EOL] pass [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert caplog . record_tuples == [ ( [string] , logging . WARNING , [string] [string] ) , ] [EOL] [EOL] [EOL] async def test_release_bad_connection ( create_pool , create_redis , server ) : [EOL] pool = await create_pool ( server . tcp_address ) [EOL] conn = await pool . acquire ( ) [EOL] assert conn . address [ [number] ] in ( [string] , [string] ) [EOL] assert conn . address [ [number] ] == server . tcp_address . port [EOL] other_conn = await create_redis ( server . tcp_address ) [EOL] with pytest . raises ( AssertionError ) : [EOL] pool . release ( other_conn ) [EOL] [EOL] pool . release ( conn ) [EOL] other_conn . close ( ) [EOL] await other_conn . wait_closed ( ) [EOL] [EOL] [EOL] async def test_select_db ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address ) [EOL] [EOL] await pool . select ( [number] ) [EOL] with ( await pool ) as conn : [EOL] assert conn . db == [number] [EOL] [EOL] [EOL] async def test_change_db ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , db = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) as conn : [EOL] await conn . select ( [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with ( await pool ) : [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] await pool . select ( [number] ) [EOL] assert pool . db == [number] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert pool . db == [number] [EOL] [EOL] [EOL] async def test_change_db_errors ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , db = [number] ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await pool . select ( None ) [EOL] assert pool . db == [number] [EOL] [EOL] with ( await pool ) : [EOL] pass [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await pool . select ( None ) [EOL] assert pool . db == [number] [EOL] with pytest . raises ( ValueError ) : [EOL] await pool . select ( - [number] ) [EOL] assert pool . db == [number] [EOL] with pytest . raises ( ReplyError ) : [EOL] await pool . select ( [number] ) [EOL] assert pool . db == [number] [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] ) async def test_select_and_create ( create_pool , server ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] with async_timeout . timeout ( [number] ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , db = [number] , ) [EOL] db = [number] [EOL] while True : [EOL] db = ( db + [number] ) & [number] [EOL] _ , conn = await asyncio . gather ( pool . select ( db ) , pool . acquire ( ) ) [EOL] assert pool . db == db [EOL] pool . release ( conn ) [EOL] if conn . db == db : [EOL] break [EOL] [comment] [EOL] [EOL] [EOL] async def test_response_decoding ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , encoding = [string] ) [EOL] [EOL] assert pool . encoding == [string] [EOL] with ( await pool ) as conn : [EOL] await conn . execute ( [string] , [string] , [string] ) [EOL] with ( await pool ) as conn : [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_hgetall_response_decoding ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , encoding = [string] ) [EOL] [EOL] assert pool . encoding == [string] [EOL] with ( await pool ) as conn : [EOL] await conn . execute ( [string] , [string] ) [EOL] await conn . execute ( [string] , [string] , [string] , [string] ) [EOL] await conn . execute ( [string] , [string] , [string] , [string] ) [EOL] with ( await pool ) as conn : [EOL] res = await conn . execute ( [string] , [string] ) [EOL] assert res == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] async def test_crappy_multiexec ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , encoding = [string] , minsize = [number] , maxsize = [number] ) [EOL] [EOL] with ( await pool ) as conn : [EOL] await conn . execute ( [string] , [string] , [string] ) [EOL] await conn . execute ( [string] ) [EOL] await conn . execute ( [string] , [string] , [string] ) [EOL] assert conn . closed is True [EOL] with ( await pool ) as conn : [EOL] value = await conn . execute ( [string] , [string] ) [EOL] assert value == [string] [EOL] [EOL] [EOL] async def test_pool_size_growth ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] [EOL] done = set ( ) [EOL] tasks = [ ] [EOL] [EOL] async def task1 ( i ) : [EOL] with ( await pool ) : [EOL] assert pool . size <= pool . maxsize [EOL] assert pool . freesize == [number] [EOL] await asyncio . sleep ( [number] ) [EOL] done . add ( i ) [EOL] [EOL] async def task2 ( ) : [EOL] with ( await pool ) : [EOL] assert pool . size <= pool . maxsize [EOL] assert pool . freesize >= [number] [EOL] assert done == { [number] , [number] } [EOL] [EOL] for _ in range ( [number] ) : [EOL] tasks . append ( asyncio . ensure_future ( task1 ( _ ) ) ) [EOL] tasks . append ( asyncio . ensure_future ( task2 ( ) ) ) [EOL] await asyncio . gather ( * tasks ) [EOL] [EOL] [EOL] async def test_pool_with_closed_connections ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] assert [number] == pool . freesize [EOL] conn1 = pool . _pool [ [number] ] [EOL] conn1 . close ( ) [EOL] assert conn1 . closed is True [EOL] assert [number] == pool . freesize [EOL] with ( await pool ) as conn2 : [EOL] assert conn2 . closed is False [EOL] assert conn1 is not conn2 [EOL] [EOL] [EOL] async def test_pool_close ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address ) [EOL] [EOL] assert pool . closed is False [EOL] [EOL] with ( await pool ) as conn : [EOL] assert ( await conn . execute ( [string] ) ) == [string] [EOL] [EOL] pool . close ( ) [EOL] await pool . wait_closed ( ) [EOL] assert pool . closed is True [EOL] [EOL] with pytest . raises ( PoolClosedError ) : [EOL] with ( await pool ) as conn : [EOL] assert ( await conn . execute ( [string] ) ) == [string] [EOL] [EOL] [EOL] async def test_pool_close__used ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address ) [EOL] [EOL] assert pool . closed is False [EOL] [EOL] with ( await pool ) as conn : [EOL] pool . close ( ) [EOL] await pool . wait_closed ( ) [EOL] assert pool . closed is True [EOL] [EOL] with pytest . raises ( ConnectionClosedError ) : [EOL] await conn . execute ( [string] ) [EOL] [EOL] [EOL] @ redis_version ( [number] , [number] , [number] , reason = [string] ) async def test_pool_check_closed_when_exception ( create_pool , create_redis , start_server , caplog ) : [EOL] server = start_server ( [string] ) [EOL] redis = await create_redis ( server . tcp_address ) [EOL] await redis . config_set ( [string] , [number] ) [EOL] [EOL] errors = ( MaxClientsError , ConnectionClosedError , ConnectionError ) [EOL] caplog . clear ( ) [EOL] with caplog . at_level ( [string] , [string] ) : [EOL] with pytest . raises ( errors ) : [EOL] await create_pool ( address = tuple ( server . tcp_address ) , minsize = [number] ) [EOL] [EOL] assert len ( caplog . record_tuples ) >= [number] [EOL] connect_msg = [string] . format ( server . tcp_address . port ) [EOL] assert caplog . record_tuples [ : [number] ] == [ ( [string] , logging . DEBUG , connect_msg ) , ( [string] , logging . DEBUG , connect_msg ) , ] [EOL] assert caplog . record_tuples [ - [number] ] == ( [string] , logging . DEBUG , [string] ) [EOL] [EOL] [EOL] async def test_pool_get_connection ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] res = await pool . execute ( [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] res = await pool . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] res = await pool . execute ( [string] , [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] res = await pool . execute_pubsub ( [string] , [string] ) [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] [EOL] res = await pool . execute ( [string] , [string] ) [EOL] assert res == [string] [EOL] [EOL] [EOL] async def test_pool_get_connection_with_pipelining ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] fut1 = pool . execute ( [string] , [string] , [string] ) [EOL] fut2 = pool . execute_pubsub ( [string] , [string] ) [EOL] fut3 = pool . execute ( [string] , [string] , [string] ) [EOL] fut4 = pool . execute_pubsub ( [string] , [string] ) [EOL] fut5 = pool . execute ( [string] , [string] ) [EOL] res = await fut1 [EOL] assert res == [string] [EOL] res = await fut2 [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await fut3 [EOL] assert res == [string] [EOL] res = await fut4 [EOL] assert res == [ [ [string] , [string] , [number] ] ] [EOL] res = await fut5 [EOL] assert res == [string] [EOL] [EOL] [EOL] @ pytest . mark . skipif ( sys . platform == [string] , reason = [string] ) async def test_pool_idle_close ( create_pool , start_server , caplog ) : [EOL] server = start_server ( [string] ) [EOL] conn = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] ok = await conn . execute ( [string] , [string] , [string] , [number] ) [EOL] assert ok == [string] [EOL] [EOL] caplog . clear ( ) [EOL] with caplog . at_level ( [string] , [string] ) : [EOL] [comment] [EOL] while len ( caplog . record_tuples ) < [number] : [EOL] await asyncio . sleep ( [number] ) [EOL] expected = [ ( [string] , logging . DEBUG , [string] ) , ( [string] , logging . DEBUG , [string] ) , ] [EOL] if BPO_34638 : [EOL] expected += [ ( [string] , logging . ERROR , [string] [string] ) , ( [string] , logging . ERROR , [string] [string] ) ] [EOL] [comment] [EOL] assert sorted ( caplog . record_tuples ) == sorted ( expected ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert ( await conn . execute ( [string] ) ) == [string] [EOL] [EOL] [EOL] async def test_await ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] [EOL] with ( await pool ) as conn : [EOL] msg = await conn . execute ( [string] , [string] ) [EOL] assert msg == [string] [EOL] [EOL] [EOL] async def test_async_with ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] ) [EOL] [EOL] async with pool . get ( ) as conn : [EOL] msg = await conn . execute ( [string] , [string] ) [EOL] assert msg == [string] [EOL] [EOL] [EOL] async def test_pool__drop_closed ( create_pool , server ) : [EOL] pool = await create_pool ( server . tcp_address , minsize = [number] , maxsize = [number] ) [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] assert not pool . _pool [ [number] ] . closed [EOL] assert not pool . _pool [ [number] ] . closed [EOL] assert not pool . _pool [ [number] ] . closed [EOL] [EOL] pool . _pool [ [number] ] . close ( ) [EOL] pool . _pool [ [number] ] . close ( ) [EOL] await pool . _pool [ [number] ] . wait_closed ( ) [EOL] await pool . _pool [ [number] ] . wait_closed ( ) [EOL] [EOL] assert not pool . _pool [ [number] ] . closed [EOL] assert pool . _pool [ [number] ] . closed [EOL] assert pool . _pool [ [number] ] . closed [EOL] [EOL] assert pool . size == [number] [EOL] assert pool . freesize == [number] [EOL] [EOL] pool . _drop_closed ( ) [EOL] assert pool . freesize == [number] [EOL] assert pool . size == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.boolbuiltins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Dict , Tuple , Any , Type , List [EOL] import typing [EOL] import io [EOL] import asyncio [EOL] import subprocess [EOL] import tests [EOL] import ssl [EOL] import asyncio [EOL] import pytest [EOL] import socket [EOL] import subprocess [EOL] import sys [EOL] import contextlib [EOL] import os [EOL] import ssl [EOL] import time [EOL] import tempfile [EOL] import atexit [EOL] import inspect [EOL] [EOL] from collections import namedtuple [EOL] from urllib . parse import urlencode , urlunparse [EOL] from async_timeout import timeout as async_timeout [EOL] [EOL] import aioredis [EOL] import aioredis . sentinel [EOL] [EOL] [EOL] TCPAddress = namedtuple ( [string] , [string] ) [EOL] [EOL] RedisServer = namedtuple ( [string] , [string] ) [EOL] [EOL] SentinelServer = namedtuple ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . yield_fixture def loop ( ) : [EOL] [docstring] [EOL] loop = asyncio . new_event_loop ( ) [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] asyncio . set_event_loop ( loop ) [EOL] [EOL] try : [EOL] yield loop [EOL] finally : [EOL] if hasattr ( loop , [string] ) : [EOL] closed = loop . is_closed ( ) [EOL] else : [EOL] closed = loop . _closed [comment] [EOL] if not closed : [EOL] loop . call_soon ( loop . stop ) [EOL] loop . run_forever ( ) [EOL] loop . close ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def unused_port ( ) : [EOL] [docstring] [EOL] def fun ( ) : [EOL] with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as s : [EOL] s . bind ( ( [string] , [number] ) ) [EOL] return s . getsockname ( ) [ [number] ] [EOL] return fun [EOL] [EOL] [EOL] @ pytest . fixture def create_connection ( _closable ) : [EOL] [docstring] [EOL] [EOL] async def f ( * args , ** kw ) : [EOL] conn = await aioredis . create_connection ( * args , ** kw ) [EOL] _closable ( conn ) [EOL] return conn [EOL] return f [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ aioredis . create_redis , aioredis . create_redis_pool ] , ids = [ [string] , [string] ] ) def create_redis ( _closable , request ) : [EOL] [docstring] [EOL] factory = request . param [EOL] [EOL] async def f ( * args , ** kw ) : [EOL] redis = await factory ( * args , ** kw ) [EOL] _closable ( redis ) [EOL] return redis [EOL] return f [EOL] [EOL] [EOL] @ pytest . fixture def create_pool ( _closable ) : [EOL] [docstring] [EOL] [EOL] async def f ( * args , ** kw ) : [EOL] redis = await aioredis . create_pool ( * args , ** kw ) [EOL] _closable ( redis ) [EOL] return redis [EOL] return f [EOL] [EOL] [EOL] @ pytest . fixture def create_sentinel ( _closable ) : [EOL] [docstring] [EOL] [EOL] async def f ( * args , ** kw ) : [EOL] [comment] [EOL] kw . setdefault ( [string] , [number] ) [EOL] client = await aioredis . sentinel . create_sentinel ( * args , ** kw ) [EOL] _closable ( client ) [EOL] return client [EOL] return f [EOL] [EOL] [EOL] @ pytest . fixture def pool ( create_pool , server , loop ) : [EOL] [docstring] [EOL] return loop . run_until_complete ( create_pool ( server . tcp_address ) ) [EOL] [EOL] [EOL] @ pytest . fixture def redis ( create_redis , server , loop ) : [EOL] [docstring] [EOL] redis = loop . run_until_complete ( create_redis ( server . tcp_address ) ) [EOL] [EOL] async def clear ( ) : [EOL] await redis . flushall ( ) [EOL] loop . run_until_complete ( clear ( ) ) [EOL] return redis [EOL] [EOL] [EOL] @ pytest . fixture def redis_sentinel ( create_sentinel , sentinel , loop ) : [EOL] [docstring] [EOL] redis_sentinel = loop . run_until_complete ( create_sentinel ( [ sentinel . tcp_address ] , timeout = [number] ) ) [EOL] [EOL] async def ping ( ) : [EOL] return await redis_sentinel . ping ( ) [EOL] assert loop . run_until_complete ( ping ( ) ) == [string] [EOL] return redis_sentinel [EOL] [EOL] [EOL] @ pytest . yield_fixture def _closable ( loop ) : [EOL] conns = [ ] [EOL] [EOL] async def close ( ) : [EOL] waiters = [ ] [EOL] while conns : [EOL] conn = conns . pop ( [number] ) [EOL] conn . close ( ) [EOL] waiters . append ( conn . wait_closed ( ) ) [EOL] if waiters : [EOL] await asyncio . gather ( * waiters ) [EOL] try : [EOL] yield conns . append [EOL] finally : [EOL] loop . run_until_complete ( close ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def server ( start_server ) : [EOL] [docstring] [EOL] return start_server ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def serverB ( start_server ) : [EOL] [docstring] [EOL] return start_server ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def sentinel ( start_sentinel , request , start_server ) : [EOL] [docstring] [EOL] [comment] [EOL] master_no_fail = start_server ( [string] ) [EOL] start_server ( [string] , slaveof = master_no_fail ) [EOL] [comment] [EOL] masterA = start_server ( [string] ) [EOL] start_server ( [string] , slaveof = masterA ) [EOL] return start_sentinel ( [string] , masterA , master_no_fail ) [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ [string] , [string] ] ) def server_tcp_url ( server , request ) : [EOL] [EOL] def make ( ** kwargs ) : [EOL] netloc = [string] . format ( server . tcp_address ) [EOL] path = [string] [EOL] if request . param == [string] : [EOL] if [string] in kwargs : [EOL] netloc = [string] . format ( kwargs . pop ( [string] ) , server . tcp_address ) [EOL] if [string] in kwargs : [EOL] path = [string] . format ( kwargs . pop ( [string] ) ) [EOL] query = urlencode ( kwargs ) [EOL] return urlunparse ( ( [string] , netloc , path , [string] , query , [string] ) ) [EOL] return make [EOL] [EOL] [EOL] @ pytest . fixture def server_unix_url ( server ) : [EOL] [EOL] def make ( ** kwargs ) : [EOL] query = urlencode ( kwargs ) [EOL] return urlunparse ( ( [string] , [string] , server . unixsocket , [string] , query , [string] ) ) [EOL] return make [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def pytest_addoption ( parser ) : [EOL] parser . addoption ( [string] , default = [ ] , action = [string] , help = [string] [string] ) [EOL] parser . addoption ( [string] , default = [string] , help = [string] ) [EOL] parser . addoption ( [string] , default = [string] , help = [string] ) [EOL] parser . addoption ( [string] , default = [string] , help = [string] ) [EOL] parser . addoption ( [string] , default = False , action = [string] , help = [string] ) [EOL] [EOL] [EOL] def _read_server_version ( redis_bin ) : [EOL] args = [ redis_bin , [string] ] [EOL] with subprocess . Popen ( args , stdout = subprocess . PIPE ) as proc : [EOL] version = proc . stdout . readline ( ) . decode ( [string] ) [EOL] for part in version . split ( ) : [EOL] if part . startswith ( [string] ) : [EOL] break [EOL] else : [EOL] raise RuntimeError ( [string] . format ( version ) ) [EOL] return tuple ( map ( int , part [ [number] : ] . split ( [string] ) ) ) [EOL] [EOL] [EOL] @ contextlib . contextmanager def config_writer ( path ) : [EOL] with open ( path , [string] ) as f : [EOL] def write ( * args ) : [EOL] print ( * args , file = f ) [EOL] yield write [EOL] [EOL] [EOL] REDIS_SERVERS = [ ] [EOL] VERSIONS = { } [EOL] [EOL] [EOL] def format_version ( srv ) : [EOL] return [string] . format ( [string] . join ( map ( str , VERSIONS [ srv ] ) ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def start_server ( _proc , request , unused_port , server_bin ) : [EOL] [docstring] [EOL] [EOL] version = _read_server_version ( server_bin ) [EOL] verbose = request . config . getoption ( [string] ) > [number] [EOL] [EOL] servers = { } [EOL] [EOL] def timeout ( t ) : [EOL] end = time . time ( ) + t [EOL] while time . time ( ) <= end : [EOL] yield True [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] def maker ( name , config_lines = None , * , slaveof = None , password = None ) : [EOL] assert slaveof is None or isinstance ( slaveof , RedisServer ) , slaveof [EOL] if name in servers : [EOL] return servers [ name ] [EOL] [EOL] port = unused_port ( ) [EOL] tcp_address = TCPAddress ( [string] , port ) [EOL] if sys . platform == [string] : [EOL] unixsocket = None [EOL] else : [EOL] unixsocket = [string] . format ( port ) [EOL] dumpfile = [string] . format ( port ) [EOL] data_dir = tempfile . gettempdir ( ) [EOL] dumpfile_path = os . path . join ( data_dir , dumpfile ) [EOL] stdout_file = os . path . join ( data_dir , [string] . format ( port ) ) [EOL] tmp_files = [ dumpfile_path , stdout_file ] [EOL] if config_lines : [EOL] config = os . path . join ( data_dir , [string] . format ( port ) ) [EOL] with config_writer ( config ) as write : [EOL] write ( [string] ) [EOL] write ( [string] ) [EOL] write ( [string] , data_dir ) [EOL] write ( [string] , dumpfile ) [EOL] write ( [string] , port ) [EOL] if unixsocket : [EOL] write ( [string] , unixsocket ) [EOL] tmp_files . append ( unixsocket ) [EOL] if password : [EOL] write ( [string] . format ( password ) ) [EOL] write ( [string] ) [EOL] for line in config_lines : [EOL] write ( line ) [EOL] if slaveof is not None : [EOL] write ( [string] . format ( slaveof ) ) [EOL] if password : [EOL] write ( [string] . format ( password ) ) [EOL] args = [ config ] [EOL] tmp_files . append ( config ) [EOL] else : [EOL] args = [ [string] , [string] , [string] , [string] , [string] , data_dir , [string] , dumpfile , [string] , str ( port ) , ] [EOL] if unixsocket : [EOL] args += [ [string] , unixsocket , ] [EOL] if password : [EOL] args += [ [string] . format ( password ) ] [EOL] if slaveof is not None : [EOL] args += [ [string] , str ( slaveof . tcp_address . host ) , str ( slaveof . tcp_address . port ) , ] [EOL] if password : [EOL] args += [ [string] . format ( password ) ] [EOL] f = open ( stdout_file , [string] ) [EOL] atexit . register ( f . close ) [EOL] proc = _proc ( server_bin , * args , stdout = f , stderr = subprocess . STDOUT , _clear_tmp_files = tmp_files ) [EOL] with open ( stdout_file , [string] ) as f : [EOL] for _ in timeout ( [number] ) : [EOL] assert proc . poll ( ) is None , ( [string] , proc . returncode ) [EOL] log = f . readline ( ) [EOL] if log and verbose : [EOL] print ( name , [string] , log , end = [string] ) [EOL] if [string] in log : [EOL] break [EOL] if slaveof is not None : [EOL] for _ in timeout ( [number] ) : [EOL] log = f . readline ( ) [EOL] if log and verbose : [EOL] print ( name , [string] , log , end = [string] ) [EOL] if [string] in log : [EOL] break [EOL] info = RedisServer ( name , tcp_address , unixsocket , version , password ) [EOL] servers . setdefault ( name , info ) [EOL] return info [EOL] [EOL] return maker [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def start_sentinel ( _proc , request , unused_port , server_bin ) : [EOL] [docstring] [EOL] version = _read_server_version ( server_bin ) [EOL] verbose = request . config . getoption ( [string] ) > [number] [EOL] [EOL] sentinels = { } [EOL] [EOL] def timeout ( t ) : [EOL] end = time . time ( ) + t [EOL] while time . time ( ) <= end : [EOL] yield True [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] def maker ( name , * masters , quorum = [number] , noslaves = False , down_after_milliseconds = [number] , failover_timeout = [number] ) : [EOL] key = ( name , ) + masters [EOL] if key in sentinels : [EOL] return sentinels [ key ] [EOL] port = unused_port ( ) [EOL] tcp_address = TCPAddress ( [string] , port ) [EOL] data_dir = tempfile . gettempdir ( ) [EOL] config = os . path . join ( data_dir , [string] . format ( port ) ) [EOL] stdout_file = os . path . join ( data_dir , [string] . format ( port ) ) [EOL] tmp_files = [ config , stdout_file ] [EOL] if sys . platform == [string] : [EOL] unixsocket = None [EOL] else : [EOL] unixsocket = os . path . join ( data_dir , [string] . format ( port ) ) [EOL] tmp_files . append ( unixsocket ) [EOL] [EOL] with config_writer ( config ) as write : [EOL] write ( [string] ) [EOL] write ( [string] ) [EOL] write ( [string] , port ) [EOL] if unixsocket : [EOL] write ( [string] , unixsocket ) [EOL] write ( [string] ) [EOL] for master in masters : [EOL] write ( [string] , master . name , [string] , master . tcp_address . port , quorum ) [EOL] write ( [string] , master . name , down_after_milliseconds ) [EOL] write ( [string] , master . name , failover_timeout ) [EOL] write ( [string] , master . name , master . password ) [EOL] [EOL] f = open ( stdout_file , [string] ) [EOL] atexit . register ( f . close ) [EOL] proc = _proc ( server_bin , config , [string] , stdout = f , stderr = subprocess . STDOUT , _clear_tmp_files = tmp_files ) [EOL] [comment] [EOL] all_masters = { m . name for m in masters } [EOL] if noslaves : [EOL] all_slaves = { } [EOL] else : [EOL] all_slaves = { m . name for m in masters } [EOL] with open ( stdout_file , [string] ) as f : [EOL] for _ in timeout ( [number] ) : [EOL] assert proc . poll ( ) is None , ( [string] , proc . returncode ) [EOL] log = f . readline ( ) [EOL] if log and verbose : [EOL] print ( name , [string] , log , end = [string] ) [EOL] for m in masters : [EOL] if [string] . format ( m . name ) in log : [EOL] all_masters . discard ( m . name ) [EOL] if [string] in log and [string] . format ( m . name ) in log : [EOL] all_slaves . discard ( m . name ) [EOL] if not all_masters and not all_slaves : [EOL] break [EOL] else : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] masters = { m . name : m for m in masters } [EOL] info = SentinelServer ( name , tcp_address , unixsocket , version , masters ) [EOL] sentinels . setdefault ( key , info ) [EOL] return info [EOL] return maker [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def ssl_proxy ( _proc , request , unused_port ) : [EOL] by_port = { } [EOL] [EOL] cafile = os . path . abspath ( request . config . getoption ( [string] ) ) [EOL] certfile = os . path . abspath ( request . config . getoption ( [string] ) ) [EOL] dhfile = os . path . abspath ( request . config . getoption ( [string] ) ) [EOL] assert os . path . exists ( cafile ) , [string] [EOL] assert os . path . exists ( certfile ) , [string] [EOL] assert os . path . exists ( dhfile ) , [string] [EOL] [EOL] ssl_ctx = ssl . create_default_context ( cafile = cafile ) [EOL] ssl_ctx . check_hostname = False [EOL] ssl_ctx . verify_mode = ssl . CERT_NONE [EOL] ssl_ctx . load_dh_params ( dhfile ) [EOL] [EOL] def sockat ( unsecure_port ) : [EOL] if unsecure_port in by_port : [EOL] return by_port [ unsecure_port ] [EOL] [EOL] secure_port = unused_port ( ) [EOL] _proc ( [string] , [string] [string] [string] . format ( port = secure_port , param = dhfile , cert = certfile ) , [string] . format ( unsecure_port ) ) [EOL] time . sleep ( [number] ) [comment] [EOL] by_port [ unsecure_port ] = secure_port , ssl_ctx [EOL] return secure_port , ssl_ctx [EOL] [EOL] return sockat [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def _proc ( ) : [EOL] processes = [ ] [EOL] tmp_files = set ( ) [EOL] [EOL] def run ( * commandline , _clear_tmp_files = ( ) , ** kwargs ) : [EOL] proc = subprocess . Popen ( commandline , ** kwargs ) [EOL] processes . append ( proc ) [EOL] tmp_files . update ( _clear_tmp_files ) [EOL] return proc [EOL] [EOL] try : [EOL] yield run [EOL] finally : [EOL] while processes : [EOL] proc = processes . pop ( [number] ) [EOL] proc . terminate ( ) [EOL] proc . wait ( ) [EOL] for path in tmp_files : [EOL] try : [EOL] os . remove ( path ) [EOL] except OSError : [EOL] pass [EOL] [EOL] [EOL] @ pytest . mark . tryfirst def pytest_pyfunc_call ( pyfuncitem ) : [EOL] [docstring] [EOL] if inspect . iscoroutinefunction ( pyfuncitem . obj ) : [EOL] marker = pyfuncitem . get_closest_marker ( [string] ) [EOL] if marker is not None and marker . args : [EOL] timeout = marker . args [ [number] ] [EOL] else : [EOL] timeout = [number] [EOL] [EOL] funcargs = pyfuncitem . funcargs [EOL] loop = funcargs [ [string] ] [EOL] testargs = { arg : funcargs [ arg ] for arg in pyfuncitem . _fixtureinfo . argnames } [EOL] [EOL] loop . run_until_complete ( _wait_coro ( pyfuncitem . obj , testargs , timeout = timeout ) ) [EOL] return True [EOL] [EOL] [EOL] async def _wait_coro ( corofunc , kwargs , timeout ) : [EOL] with async_timeout ( timeout ) : [EOL] return ( await corofunc ( ** kwargs ) ) [EOL] [EOL] [EOL] def pytest_runtest_setup ( item ) : [EOL] is_coro = inspect . iscoroutinefunction ( item . obj ) [EOL] if is_coro and [string] not in item . fixturenames : [EOL] [comment] [EOL] item . fixturenames . append ( [string] ) [EOL] [EOL] [EOL] def pytest_collection_modifyitems ( session , config , items ) : [EOL] skip_by_version = [ ] [EOL] for item in items [ : ] : [EOL] marker = item . get_closest_marker ( [string] ) [EOL] if marker is not None : [EOL] try : [EOL] version = VERSIONS [ item . callspec . getparam ( [string] ) ] [EOL] except ( KeyError , ValueError , AttributeError ) : [EOL] [comment] [EOL] continue [EOL] if version < marker . kwargs [ [string] ] : [EOL] skip_by_version . append ( item ) [EOL] item . add_marker ( pytest . mark . skip ( reason = marker . kwargs [ [string] ] ) ) [EOL] if [string] in item . fixturenames : [EOL] item . add_marker ( pytest . mark . skipif ( [string] , reason = [string] ) ) [EOL] if len ( items ) != len ( skip_by_version ) : [EOL] for i in skip_by_version : [EOL] items . remove ( i ) [EOL] [EOL] [EOL] def pytest_configure ( config ) : [EOL] bins = config . getoption ( [string] ) [ : ] [EOL] cmd = [string] [EOL] if not bins : [EOL] with os . popen ( cmd ) as pipe : [EOL] path = pipe . read ( ) . rstrip ( ) [EOL] assert path , ( [string] [string] ) [EOL] REDIS_SERVERS [ : ] = [ path ] [EOL] else : [EOL] REDIS_SERVERS [ : ] = bins [EOL] [EOL] VERSIONS . update ( { srv : _read_server_version ( srv ) for srv in REDIS_SERVERS } ) [EOL] assert VERSIONS , ( [string] , REDIS_SERVERS ) [EOL] [EOL] class DynamicFixturePlugin : [EOL] @ pytest . fixture ( scope = [string] , params = REDIS_SERVERS , ids = format_version ) def server_bin ( self , request ) : [EOL] [docstring] [EOL] return request . param [EOL] config . pluginmanager . register ( DynamicFixturePlugin ( ) , [string] ) [EOL] [EOL] if config . getoption ( [string] ) : [EOL] try : [EOL] import uvloop [EOL] except ImportError : [EOL] raise RuntimeError ( [string] ) [EOL] asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.TCPAddress]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.SentinelServertyping.List[typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.TCPAddress]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.TCPAddress]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.conftest.SentinelServer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] import asyncio [EOL] import pytest [EOL] [EOL] from aioredis import ReplyError , MultiExecError , WatchVariableError [EOL] from aioredis import ConnectionClosedError [EOL] [EOL] [EOL] async def test_multi_exec ( redis ) : [EOL] await redis . delete ( [string] , [string] ) [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] f1 = tr . incr ( [string] ) [EOL] f2 = tr . incr ( [string] ) [EOL] res = await tr . execute ( ) [EOL] assert res == [ [number] , [number] ] [EOL] res2 = await asyncio . gather ( f1 , f2 ) [EOL] assert res == res2 [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] f1 = tr . incr ( [string] ) [EOL] f2 = tr . incr ( [string] ) [EOL] await tr . execute ( ) [EOL] assert ( await f1 ) == [number] [EOL] assert ( await f2 ) == [number] [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] f1 = tr . set ( [string] , [number] ) [EOL] f2 = tr . incrbyfloat ( [string] , [number] ) [EOL] res = await tr . execute ( ) [EOL] assert res == [ True , [number] ] [EOL] res2 = await asyncio . gather ( f1 , f2 ) [EOL] assert res == res2 [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] f1 = tr . incrby ( [string] , [number] ) [EOL] with pytest . raises ( MultiExecError , match = [string] ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] await f1 [EOL] [EOL] [EOL] async def test_empty ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] res = await tr . execute ( ) [EOL] assert res == [ ] [EOL] [EOL] [EOL] async def test_double_execute ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] await tr . execute ( ) [EOL] with pytest . raises ( AssertionError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( AssertionError ) : [EOL] await tr . incr ( [string] ) [EOL] [EOL] [EOL] async def test_connection_closed ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . quit ( ) [EOL] fut2 = tr . incrby ( [string] , [number] ) [EOL] fut3 = tr . incrby ( [string] , [number] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] [EOL] assert fut1 . done ( ) is True [EOL] assert fut2 . done ( ) is True [EOL] assert fut3 . done ( ) is True [EOL] assert fut1 . exception ( ) is not None [EOL] assert fut2 . exception ( ) is not None [EOL] assert fut3 . exception ( ) is not None [EOL] assert not fut1 . cancelled ( ) [EOL] assert not fut2 . cancelled ( ) [EOL] assert not fut3 . cancelled ( ) [EOL] [EOL] try : [EOL] assert ( await fut1 ) == [string] [EOL] except Exception as err : [EOL] assert isinstance ( err , ( ConnectionClosedError , ConnectionError ) ) [EOL] assert fut2 . cancelled ( ) is False [EOL] assert isinstance ( fut2 . exception ( ) , TypeError ) [EOL] [EOL] [comment] [EOL] assert fut3 . done ( ) and not fut3 . cancelled ( ) [EOL] assert isinstance ( fut3 . exception ( ) , ( ConnectionClosedError , ConnectionError ) ) [EOL] [EOL] [EOL] async def test_discard ( redis ) : [EOL] await redis . delete ( [string] ) [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . incrby ( [string] , [number] ) [EOL] fut2 = tr . connection . execute ( [string] ) [EOL] fut3 = tr . connection . execute ( [string] , [string] ) [EOL] [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] await fut1 [EOL] with pytest . raises ( ReplyError ) : [EOL] await fut2 [EOL] [comment] [EOL] res = await fut3 [EOL] assert res == [number] [EOL] [EOL] [EOL] async def test_exec_error ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] fut = tr . connection . execute ( [string] , [string] , [string] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await fut [EOL] [EOL] await redis . set ( [string] , [string] ) [EOL] tr = redis . multi_exec ( ) [EOL] fut = tr . incrbyfloat ( [string] , [number] ) [EOL] res = await tr . execute ( return_exceptions = True ) [EOL] assert isinstance ( res [ [number] ] , ReplyError ) [EOL] with pytest . raises ( ReplyError ) : [EOL] await fut [EOL] [EOL] [EOL] async def test_command_errors ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] fut = tr . incrby ( [string] , [number] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] await fut [EOL] [EOL] [EOL] async def test_several_command_errors ( redis ) : [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . incrby ( [string] , [number] ) [EOL] fut2 = tr . rename ( [string] , [string] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] await fut1 [EOL] with pytest . raises ( ValueError ) : [EOL] await fut2 [EOL] [EOL] [EOL] async def test_error_in_connection ( redis ) : [EOL] await redis . set ( [string] , [number] ) [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . mget ( [string] , None ) [EOL] fut2 = tr . incr ( [string] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( TypeError ) : [EOL] await fut1 [EOL] await fut2 [EOL] [EOL] [EOL] async def test_watch_unwatch ( redis ) : [EOL] res = await redis . watch ( [string] ) [EOL] assert res is True [EOL] res = await redis . watch ( [string] , [string] ) [EOL] assert res is True [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . watch ( None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . watch ( [string] , None ) [EOL] with pytest . raises ( TypeError ) : [EOL] await redis . watch ( [string] , [string] , None ) [EOL] [EOL] res = await redis . unwatch ( ) [EOL] assert res is True [EOL] [EOL] [EOL] async def test_encoding ( redis ) : [EOL] res = await redis . set ( [string] , [string] ) [EOL] assert res is True [EOL] res = await redis . hmset ( [string] , [string] , [string] , [string] , [string] ) [EOL] assert res is True [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . get ( [string] ) [EOL] fut2 = tr . get ( [string] , encoding = [string] ) [EOL] fut3 = tr . hgetall ( [string] , encoding = [string] ) [EOL] await tr . execute ( ) [EOL] res = await fut1 [EOL] assert res == [string] [EOL] res = await fut2 [EOL] assert res == [string] [EOL] res = await fut3 [EOL] assert res == { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] async def test_global_encoding ( redis , create_redis , server ) : [EOL] redis = await create_redis ( server . tcp_address , encoding = [string] ) [EOL] res = await redis . set ( [string] , [string] ) [EOL] assert res is True [EOL] res = await redis . hmset ( [string] , [string] , [string] , [string] , [string] ) [EOL] assert res is True [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . get ( [string] ) [EOL] fut2 = tr . get ( [string] , encoding = [string] ) [EOL] fut3 = tr . get ( [string] , encoding = None ) [EOL] fut4 = tr . hgetall ( [string] , encoding = [string] ) [EOL] await tr . execute ( ) [EOL] res = await fut1 [EOL] assert res == [string] [EOL] res = await fut2 [EOL] assert res == [string] [EOL] res = await fut3 [EOL] assert res == [string] [EOL] res = await fut4 [EOL] assert res == { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] async def test_transaction__watch_error ( redis , create_redis , server ) : [EOL] other = await create_redis ( server . tcp_address ) [EOL] [EOL] ok = await redis . set ( [string] , [string] ) [EOL] assert ok is True [EOL] [EOL] ok = await redis . watch ( [string] ) [EOL] assert ok is True [EOL] [EOL] ok = await other . set ( [string] , [string] ) [EOL] assert ok is True [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . set ( [string] , [string] ) [EOL] fut2 = tr . get ( [string] ) [EOL] with pytest . raises ( MultiExecError ) : [EOL] await tr . execute ( ) [EOL] with pytest . raises ( WatchVariableError ) : [EOL] await fut1 [EOL] with pytest . raises ( WatchVariableError ) : [EOL] await fut2 [EOL] [EOL] [EOL] async def test_multi_exec_and_pool_release ( redis ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] slow_script = [string] [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] fut1 = tr . eval ( slow_script ) [EOL] ret , = await tr . execute ( ) [EOL] assert ret is None [EOL] assert ( await fut1 ) is None [EOL] [EOL] [EOL] async def test_multi_exec_db_select ( redis ) : [EOL] await redis . set ( [string] , [string] ) [EOL] [EOL] tr = redis . multi_exec ( ) [EOL] f1 = tr . get ( [string] , encoding = [string] ) [EOL] f2 = tr . get ( [string] ) [EOL] await tr . execute ( ) [EOL] assert await f1 == [string] [EOL] assert await f2 == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import aioredis [EOL] import pytest [EOL] [EOL] from aioredis . util import coerced_keys_dict [EOL] [EOL] [EOL] def test_simple ( ) : [EOL] d = coerced_keys_dict ( ) [EOL] assert d == { } [EOL] [EOL] d = coerced_keys_dict ( { [string] : [string] , [string] : [string] } ) [EOL] assert [string] in d [EOL] assert [string] in d [EOL] assert [string] in d [EOL] assert [string] in d [EOL] assert d == { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_invalid_init ( ) : [EOL] d = coerced_keys_dict ( { [string] : [string] } ) [EOL] assert d == { [string] : [string] } [EOL] [EOL] assert [string] not in d [EOL] assert [string] not in d [EOL] with pytest . raises ( KeyError ) : [EOL] d [ [string] ] [EOL] with pytest . raises ( KeyError ) : [EOL] d [ [string] ] [EOL] [EOL] d = coerced_keys_dict ( ) [EOL] d . update ( { [string] : [string] } ) [EOL] assert d == { [string] : [string] } [EOL] [EOL] assert [string] not in d [EOL] assert [string] not in d [EOL] with pytest . raises ( KeyError ) : [EOL] d [ [string] ] [EOL] with pytest . raises ( KeyError ) : [EOL] d [ [string] ] [EOL] [EOL] [EOL] def test_valid_init ( ) : [EOL] d = coerced_keys_dict ( { [string] : [string] } ) [EOL] assert d == { [string] : [string] } [EOL] assert [string] in d [EOL] assert [string] in d [EOL] assert d [ [string] ] == [string] [EOL] assert d [ [string] ] == [string] [EOL] [EOL] d = coerced_keys_dict ( ) [EOL] d . update ( { [string] : [string] } ) [EOL] assert d == { [string] : [string] } [EOL] assert [string] in d [EOL] assert [string] in d [EOL] assert d [ [string] ] == [string] [EOL] assert d [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] import asyncio [EOL] [EOL] [EOL] async def test_future_cancellation ( create_connection , loop , server ) : [EOL] conn = await create_connection ( server . tcp_address ) [EOL] [EOL] ts = loop . time ( ) [EOL] fut = conn . execute ( [string] , [string] , [number] ) [EOL] with pytest . raises ( asyncio . TimeoutError ) : [EOL] await asyncio . wait_for ( fut , [number] ) [EOL] assert fut . cancelled ( ) [EOL] [EOL] [comment] [EOL] await conn . execute ( [string] ) [EOL] dt = int ( loop . time ( ) - ts ) [EOL] assert dt in { [number] , [number] , [number] } [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0