from typing import Optional , List , TypeVar , Dict [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass , field [EOL] from typing import Dict , FrozenSet , List , Optional , Set , Tuple , TypeVar , Union [EOL] from uuid import UUID [EOL] [EOL] A = TypeVar ( [string] ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithList : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithListStr : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithDict : [EOL] kvs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithSet : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithTuple : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithFrozenSet : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithOptional : [EOL] x = ... [EOL] [EOL] [EOL] @ dataclass class DataclassWithOptionalStr : [EOL] x = None [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithOptionalNested : [EOL] x = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithUnionIntNone : [EOL] x = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassWithDataclass : [EOL] dc_with_list = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassX : [EOL] x = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassXs : [EOL] xs = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassIntImmutableDefault : [EOL] x = [number] [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassMutableDefaultList : [EOL] xs = field ( default_factory = list ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class DataclassMutableDefaultDict : [EOL] xs = field ( default_factory = dict ) [EOL] [EOL] [EOL] @ dataclass class DataclassWithUuid : [EOL] id = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.FrozenSet[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[DataclassWithOptional]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DataclassWithList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[DataclassX]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0
	0
from typing import List , Sequence , Tuple , Any [EOL] import typing [EOL] import inspect [EOL] import inspect [EOL] from itertools import product [EOL] from typing import Tuple , Sequence [EOL] [EOL] import pytest [EOL] [EOL] [EOL] def with_ ( * collections , cartesian_product = True ) : [EOL] def _wrapped ( f ) : [EOL] signature = inspect . signature ( f ) [EOL] func_params = list ( signature . parameters ) [EOL] if len ( func_params ) and func_params [ [number] ] == [string] : [EOL] func_params . pop ( [number] ) [EOL] pytest_keys = [string] . join ( func_params ) [EOL] if len ( collections ) > [number] : [EOL] if cartesian_product : [EOL] pytest_values = list ( product ( * collections ) ) [EOL] else : [EOL] if len ( set ( map ( len , collections ) ) ) != [number] : [EOL] raise Exception ( [string] ) [EOL] pytest_values = list ( zip ( * collections ) ) [EOL] else : [EOL] pytest_values = collections [ [number] ] [EOL] return pytest . mark . parametrize ( pytest_keys , pytest_values ) ( f ) [EOL] [EOL] return _wrapped [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0