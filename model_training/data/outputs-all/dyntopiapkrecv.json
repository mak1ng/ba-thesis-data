import builtins [EOL] from . cli import cli [EOL] [EOL] [EOL] def main ( ) : [EOL] cli ( ) [comment] [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import click [EOL] import typing [EOL] import builtins [EOL] import pkrecv [EOL] import flask [EOL] import sys [EOL] [EOL] import click [EOL] from munch import Munch [EOL] [EOL] from . import app , config , wsgi [EOL] from . models import token [EOL] [EOL] [EOL] @ click . group ( ) @ click . option ( [string] , default = [string] ) @ click . pass_context def cli ( ctx , config_file ) : [EOL] cfg = config . Config ( ) [EOL] try : [EOL] cfg . read ( config_file ) [EOL] except config . ConfigError as e : [EOL] sys . stderr . write ( [string] . format ( e ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] try : [EOL] flask = app . init_app ( cfg . get_section ( [string] , { } ) ) [EOL] except app . AppError as e : [EOL] sys . stderr . write ( [string] . format ( e ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] gunicorn = wsgi . Gunicorn ( flask , cfg . get_section ( [string] , { } ) ) [EOL] ctx . obj = Munch ( gunicorn = gunicorn ) [EOL] [EOL] [EOL] @ cli . command ( [string] ) @ click . option ( [string] , required = True ) @ click . option ( [string] ) def add_token ( role , description ) : [EOL] try : [EOL] t = token . add_token ( role , description ) [EOL] except token . TokenError as e : [EOL] sys . stderr . write ( [string] . format ( e ) ) [EOL] sys . exit ( [number] ) [EOL] print ( [string] . format ( t ) ) [EOL] [EOL] [EOL] @ cli . command ( ) @ click . pass_context def serve ( ctx ) : [EOL] ctx . obj . gunicorn . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Callable , Union , Sequence , Any , List , Optional [EOL] import munch [EOL] import typing [EOL] import builtins [EOL] import configparser [EOL] import os [EOL] from typing import Any , Callable , List , Optional , Sequence , Union [EOL] [EOL] from munch import Munch [EOL] [EOL] [EOL] class ConfigError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class Config ( configparser . ConfigParser ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( dict_type = Munch ) [EOL] [EOL] def read ( self , filenames , encoding = None ) : [EOL] [docstring] [EOL] if isinstance ( filenames , str ) : [EOL] filenames = [ filenames ] [EOL] filenames = [ os . path . expanduser ( f ) for f in filenames ] [EOL] [EOL] try : [EOL] return super ( ) . read ( filenames , encoding ) [EOL] except configparser . Error as e : [EOL] raise ConfigError ( e ) [EOL] [EOL] def get_section ( self , section , default ) : [EOL] [docstring] [EOL] if not self . has_section ( section ) : [EOL] return default [EOL] [EOL] result = Munch ( ) [EOL] for option in self . options ( section ) : [EOL] value = self . _convert ( self . getboolean , section , option ) [EOL] if value is None : [EOL] value = self . _convert ( self . getint , section , option ) [EOL] if value is None : [EOL] value = self . _convert ( self . getfloat , section , option ) [EOL] if value is None : [EOL] value = self . get ( section , option ) [EOL] result [ option ] = value [EOL] return result [EOL] [EOL] @ staticmethod def _convert ( function , section , option ) : [EOL] [docstring] [EOL] try : [EOL] return function ( section , option ) [EOL] except ValueError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $munch.Munch$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Callable$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] from typing import Any , Dict [EOL] [EOL] from flask import Flask [EOL] [EOL] from . api . api import init_api [EOL] from . models . db import DBError , init_db [EOL] [EOL] [EOL] class AppError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def init_app ( options ) : [EOL] [docstring] [EOL] opts = { k . upper ( ) : v for k , v in options . items ( ) } [EOL] app = Flask ( __name__ ) [EOL] app . app_context ( ) . push ( ) [comment] [EOL] app . config . from_mapping ( opts ) [comment] [EOL] [EOL] init_api ( app ) [EOL] [EOL] try : [EOL] init_db ( app ) [EOL] except DBError as e : [EOL] raise AppError ( e ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import argparse [EOL] import typing [EOL] import flask [EOL] from argparse import ArgumentParser [EOL] from typing import Dict , List [EOL] [EOL] from flask import Flask [EOL] from gunicorn . app . base import BaseApplication [EOL] [EOL] [EOL] class Gunicorn ( BaseApplication ) : [comment] [EOL] def __init__ ( self , app , options ) : [EOL] self . app = app [EOL] self . options = options [EOL] super ( ) . __init__ ( ) [EOL] [EOL] def init ( self , parser , opts , args ) : [EOL] pass [EOL] [EOL] def load_config ( self ) : [EOL] for key , value in self . options . items ( ) : [EOL] self . cfg . set ( key . lower ( ) , value ) [EOL] [EOL] def load ( self ) : [EOL] return self . app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $flask.app.Flask$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $flask.app.Flask$ 0 $flask.app.Flask$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $argparse.ArgumentParser$ 0 $typing.Dict$ 0 $typing.List$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Flask$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask [EOL] from flask_restful import Api [EOL] [EOL] from . server import Server [EOL] from . token import Token [EOL] [EOL] [EOL] def init_api ( app ) : [EOL] [docstring] [EOL] api = Api ( app ) [EOL] api . add_resource ( Token , [string] ) [EOL] api . add_resource ( Server , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Tuple , Any [EOL] import typing [EOL] from typing import Dict , Tuple , Union [EOL] [EOL] from flask_restful import Resource , reqparse [EOL] [EOL] from . . models . token import TokenError , add_token , delete_token , get_tokens [EOL] from . auth import login_required , role_required [EOL] [EOL] [EOL] class Token ( Resource ) : [comment] [EOL] @ staticmethod @ login_required @ role_required ( [string] ) def get ( ) : [EOL] [docstring] [EOL] return { [string] : get_tokens ( ) } [EOL] [EOL] @ staticmethod @ login_required @ role_required ( [string] ) def post ( ) : [EOL] [docstring] [EOL] p = reqparse . RequestParser ( ) [EOL] p . add_argument ( [string] , type = str , required = True ) [EOL] p . add_argument ( [string] , type = str ) [EOL] args = p . parse_args ( ) [EOL] [EOL] try : [EOL] token = add_token ( args . role , args . description ) [EOL] except TokenError as e : [EOL] return { [string] : str ( e ) } , [number] [EOL] return { [string] : token } [EOL] [EOL] @ staticmethod @ login_required @ role_required ( [string] ) def delete ( ) : [EOL] [docstring] [EOL] p = reqparse . RequestParser ( ) [EOL] p . add_argument ( [string] , type = int , required = True ) [EOL] args = p . parse_args ( ) [EOL] [EOL] try : [EOL] delete_token ( args . id ) [EOL] except TokenError as e : [EOL] return { [string] : str ( e ) } , [number] [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Dict,typing.Tuple]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Dict,typing.Tuple]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , List , Any , Dict , Union [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] import pkrecv [EOL] import functools [EOL] import json [EOL] from typing import Any , Callable , Dict , Union [EOL] [EOL] from flask import Response , g [EOL] from flask_httpauth import HTTPTokenAuth [EOL] [EOL] from . . models . token import get_tokens [EOL] [EOL] auth = HTTPTokenAuth ( ) [EOL] login_required = auth . login_required [EOL] [EOL] [EOL] def role_required ( * roles ) : [EOL] [docstring] [EOL] [EOL] def decorator ( f ) : [EOL] @ functools . wraps ( f ) def wrapper ( * args , ** kwargs ) : [EOL] token = g . get ( [string] ) [EOL] if token and token . role in roles : [EOL] return f ( * args , ** kwargs ) [EOL] return Response ( response = json . dumps ( { [string] : [string] } ) , status = [number] , content_type = [string] ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] @ auth . verify_token def verify_token ( token ) : [EOL] [docstring] [EOL] t = get_tokens ( token = token ) [EOL] if len ( t ) == [number] : [EOL] g . token = t [ [number] ] [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Dict,flask.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Any , Dict , List , Union [EOL] import typing [EOL] import pkrecv [EOL] from typing import Dict , Tuple , Union [EOL] [EOL] from flask import g , request [EOL] from flask_restful import Resource , reqparse [EOL] [EOL] from . . models . server import ServerError , add_server , delete_server , get_servers [EOL] from . auth import login_required , role_required [EOL] [EOL] [EOL] class Server ( Resource ) : [comment] [EOL] @ staticmethod @ login_required @ role_required ( [string] ) def get ( ) : [EOL] [docstring] [EOL] p = reqparse . RequestParser ( ) [EOL] p . add_argument ( [string] , type = str ) [EOL] p . add_argument ( [string] , type = str ) [EOL] p . add_argument ( [string] , type = str ) [EOL] args = p . parse_args ( ) [EOL] [EOL] servers = get_servers ( ** { key : args [ key ] for key in args if args [ key ] } ) [EOL] return { [string] : servers } [EOL] [EOL] @ staticmethod @ login_required @ role_required ( [string] , [string] ) def post ( ) : [EOL] [docstring] [EOL] p = reqparse . RequestParser ( ) [EOL] p . add_argument ( [string] , type = str , required = True ) [EOL] args = p . parse_args ( ) [EOL] [EOL] ip = request . headers . get ( [string] , request . remote_addr ) [EOL] [EOL] try : [EOL] add_server ( ip , [number] , args [ [string] ] , g . token . id ) [EOL] except ServerError as e : [EOL] return { [string] : str ( e ) } , [number] [EOL] return { [string] : [string] } [EOL] [EOL] @ staticmethod @ login_required @ role_required ( [string] ) def delete ( ) : [EOL] [docstring] [EOL] p = reqparse . RequestParser ( ) [EOL] p . add_argument ( [string] , type = int , required = True ) [EOL] args = p . parse_args ( ) [EOL] [EOL] try : [EOL] delete_server ( args . id ) [EOL] except ServerError as e : [EOL] return { [string] : str ( e ) } , [number] [EOL] return { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Dict,typing.Tuple]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Dict,typing.Tuple]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Union , Any [EOL] import munch [EOL] import sqlite3 [EOL] import typing [EOL] import builtins [EOL] import functools [EOL] import flask [EOL] import sqlalchemy [EOL] import datetime [EOL] import functools [EOL] import sqlite3 [EOL] from typing import Any , List , Optional , Union [EOL] [EOL] from flask import Flask [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from munch import Munch [EOL] from sqlalchemy import Column , event [EOL] from sqlalchemy . engine import Engine [EOL] from sqlalchemy . exc import SQLAlchemyError [EOL] from sqlalchemy . pool import _ConnectionRecord [EOL] [EOL] db = SQLAlchemy ( ) [EOL] column = functools . partial ( Column , nullable = False ) [EOL] [EOL] [EOL] class DBError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class Model ( db . Model ) : [comment] [EOL] __abstract__ = True [EOL] [EOL] @ property def as_dict ( self ) : [EOL] [docstring] [EOL] return self . _to_dict ( ) [EOL] [EOL] def _to_dict ( self , exclude = None ) : [EOL] [docstring] [EOL] if not exclude : [EOL] exclude = [ ] [EOL] [EOL] return Munch ( { c . key : self . _convert_value ( self . __dict__ [ c . key ] ) for c in self . __table__ . columns if c . key not in exclude } ) [EOL] [EOL] @ staticmethod def _convert_value ( value ) : [EOL] [docstring] [EOL] if isinstance ( value , ( bool , float , int , str ) ) : [EOL] return value [EOL] [EOL] if isinstance ( value , datetime . datetime ) : [EOL] return value . strftime ( [string] ) [EOL] [EOL] raise ValueError ( [string] . format ( value ) ) [EOL] [EOL] [EOL] @ event . listens_for ( Engine , [string] ) def set_sqlite3_pragma ( dbapi_connection , _ ) : [EOL] [docstring] [EOL] if isinstance ( dbapi_connection , sqlite3 . Connection ) : [EOL] cursor = dbapi_connection . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] cursor . close ( ) [EOL] [EOL] [EOL] def init_db ( app ) : [EOL] [docstring] [EOL] db . init_app ( app ) [EOL] try : [EOL] db . create_all ( ) [EOL] except SQLAlchemyError as e : [EOL] raise DBError ( e ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $munch.Munch$ 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 $typing.Union[builtins.bool,builtins.float,builtins.int,builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Type , Any [EOL] import typing [EOL] import pkrecv [EOL] import builtins [EOL] import base64 [EOL] import binascii [EOL] import datetime [EOL] from typing import Any , List [EOL] [EOL] from sqlalchemy import DateTime , ForeignKey , Integer , String [EOL] from sqlalchemy . orm import validates [EOL] [EOL] from . db import Model , column , db [EOL] [EOL] [EOL] class ServerError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class Server ( Model ) : [EOL] id = column ( Integer , primary_key = True ) [EOL] ip = column ( String ( [number] ) ) [comment] [EOL] port = column ( Integer , default = [number] ) [EOL] key_type = column ( String ( [number] ) ) [EOL] key_data = column ( String ( [number] ) ) [EOL] key_comment = column ( String ( [number] ) ) [EOL] created = column ( DateTime , default = datetime . datetime . utcnow ) [EOL] token_id = column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] [comment] [EOL] @ validates ( [string] ) def validate_key_type ( self , _ , key_type ) : [EOL] [comment] [EOL] key_types = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] if key_type not in key_types : [EOL] raise ServerError ( [string] . format ( key_type ) ) [EOL] return key_type [EOL] [EOL] @ validates ( [string] ) def validate_key_data ( self , _ , key_data ) : [EOL] try : [EOL] base64 . b64decode ( key_data ) [EOL] except binascii . Error : [EOL] raise ServerError ( [string] . format ( key_data ) ) [EOL] return key_data [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def get_servers ( ** filters ) : [EOL] [docstring] [EOL] return [ s . as_dict for s in Server . query . filter_by ( ** filters ) . all ( ) ] [EOL] [EOL] [EOL] def add_server ( ip , port , public_key , token_id ) : [EOL] [docstring] [EOL] key_type , key_data , key_comment = split_key ( public_key ) [EOL] server = Server ( ip = ip , port = port , key_type = key_type , key_data = key_data , key_comment = key_comment , token_id = token_id , ) [EOL] db . session . add ( server ) [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] def delete_server ( identifier ) : [EOL] server = Server . query . filter_by ( id = identifier ) . all ( ) [EOL] if len ( server ) != [number] : [EOL] raise ServerError ( [string] . format ( identifier ) ) [EOL] db . session . delete ( server [ [number] ] ) [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] def split_key ( public_key ) : [EOL] [docstring] [EOL] components = public_key . split ( ) [EOL] if len ( components ) == [number] : [EOL] return components [EOL] if len ( components ) == [number] : [EOL] return components + [ [string] ] [EOL] raise ServerError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from pkrecv . app import init_app [EOL] from pkrecv . models . db import db [EOL] [EOL] [EOL] class FlaskTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] options = { [string] : [string] , [string] : False } [EOL] self . app = init_app ( options ) [EOL] self . app . testing = True [EOL] self . client = self . app . test_client ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] db . session . remove ( ) [EOL] db . drop_all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] import flask [EOL] from unittest import TestCase [EOL] [EOL] from pkrecv . app import AppError , init_app [EOL] [EOL] [EOL] class InitAppTest ( TestCase ) : [EOL] def test_upper ( self ) : [EOL] options = { [string] : [string] , [string] : False } [EOL] app = init_app ( options ) [EOL] [EOL] self . assertEqual ( app . config [ [string] ] , [string] ) [EOL] self . assertEqual ( app . config [ [string] ] , False ) [EOL] [EOL] def test_invalid_db ( self ) : [EOL] options = { [string] : [string] , [string] : False } [EOL] [EOL] with self . assertRaises ( AppError ) : [EOL] init_app ( options ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0
	0
from typing import Dict [EOL] import pkrecv [EOL] import typing [EOL] import tempfile [EOL] from unittest import TestCase [EOL] [EOL] from munch import Munch [EOL] [EOL] from pkrecv . config import Config , ConfigError [EOL] [EOL] [EOL] class ConfigReadTest ( TestCase ) : [EOL] def test_filename_list ( self ) : [EOL] cfg = Config ( ) [EOL] [EOL] with tempfile . NamedTemporaryFile ( ) as tmp1 : [EOL] tmp1 . write ( [string] ) [EOL] tmp1 . write ( [string] ) [EOL] tmp1 . flush ( ) [EOL] with tempfile . NamedTemporaryFile ( ) as tmp2 : [EOL] tmp2 . write ( [string] ) [EOL] tmp2 . write ( [string] ) [EOL] tmp2 . flush ( ) [EOL] cfg . read ( [ tmp1 . name , tmp2 . name ] ) [EOL] [EOL] flask = cfg . get_section ( [string] , Munch ( ) ) [EOL] gunicorn = cfg . get_section ( [string] , Munch ( ) ) [EOL] [EOL] self . assertEqual ( flask . a , [number] ) [EOL] self . assertEqual ( gunicorn . b , [number] ) [EOL] [EOL] def test_filename_str ( self ) : [EOL] cfg = Config ( ) [EOL] [EOL] with tempfile . NamedTemporaryFile ( ) as tmp : [EOL] tmp . write ( [string] ) [EOL] tmp . write ( [string] ) [EOL] tmp . flush ( ) [EOL] cfg . read ( tmp . name ) [EOL] [EOL] flask = cfg . get_section ( [string] , Munch ( ) ) [EOL] self . assertEqual ( flask . a , True ) [EOL] [EOL] def test_invalid_syntax ( self ) : [EOL] cfg = Config ( ) [EOL] [EOL] with tempfile . NamedTemporaryFile ( ) as tmp : [EOL] tmp . write ( [string] ) [EOL] tmp . flush ( ) [EOL] with self . assertRaises ( ConfigError ) : [EOL] cfg . read ( tmp . name ) [EOL] [EOL] [EOL] class ConfigGetSectionTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . cfg = Config ( ) [EOL] self . tmp = tempfile . NamedTemporaryFile ( ) [EOL] self . tmp . write ( [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . tmp . close ( ) [EOL] [EOL] def test_default ( self ) : [EOL] default = { [string] : [string] } [EOL] xyz = self . cfg . get_section ( [string] , default ) [EOL] self . assertIs ( xyz , default ) [EOL] [EOL] def test_bool ( self ) : [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . flush ( ) [EOL] [EOL] self . cfg . read ( self . tmp . name ) [EOL] asdf = self . cfg . get_section ( [string] , Munch ( ) ) [EOL] [EOL] self . assertIsInstance ( asdf . a , bool ) [EOL] self . assertIsInstance ( asdf . b , bool ) [EOL] self . assertIsInstance ( asdf . c , bool ) [EOL] self . assertIsInstance ( asdf . d , bool ) [EOL] self . assertEqual ( asdf . a , True ) [EOL] self . assertEqual ( asdf . b , False ) [EOL] self . assertEqual ( asdf . c , True ) [EOL] self . assertEqual ( asdf . d , False ) [EOL] [EOL] def test_int ( self ) : [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . flush ( ) [EOL] [EOL] self . cfg . read ( self . tmp . name ) [EOL] asdf = self . cfg . get_section ( [string] , Munch ( ) ) [EOL] [EOL] self . assertIsInstance ( asdf . a , int ) [EOL] self . assertIsInstance ( asdf . b , int ) [EOL] self . assertIsInstance ( asdf . c , int ) [EOL] self . assertEqual ( asdf . a , [number] ) [EOL] self . assertEqual ( asdf . b , [number] ) [EOL] self . assertEqual ( asdf . c , [number] ) [EOL] [EOL] def test_float ( self ) : [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . flush ( ) [EOL] [EOL] self . cfg . read ( self . tmp . name ) [EOL] asdf = self . cfg . get_section ( [string] , Munch ( ) ) [EOL] [EOL] self . assertIsInstance ( asdf . a , float ) [EOL] self . assertIsInstance ( asdf . b , float ) [EOL] self . assertIsInstance ( asdf . c , float ) [EOL] self . assertEqual ( asdf . a , [number] ) [EOL] self . assertEqual ( asdf . b , [number] ) [EOL] self . assertEqual ( asdf . c , [number] ) [EOL] [EOL] def test_str ( self ) : [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . write ( [string] ) [EOL] self . tmp . flush ( ) [EOL] [EOL] self . cfg . read ( self . tmp . name ) [EOL] asdf = self . cfg . get_section ( [string] , Munch ( ) ) [EOL] [EOL] self . assertIsInstance ( asdf . a , str ) [EOL] self . assertIsInstance ( asdf . b , str ) [EOL] self . assertEqual ( asdf . a , [string] ) [EOL] self . assertEqual ( asdf . b , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $pkrecv.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import click [EOL] import unittest [EOL] import typing [EOL] import tempfile [EOL] from unittest import TestCase [EOL] from unittest . mock import MagicMock , patch [EOL] [EOL] from click . testing import CliRunner [EOL] [EOL] from pkrecv import app , cli , config [EOL] from pkrecv . models import token [EOL] [EOL] [EOL] class CliTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . config = tempfile . NamedTemporaryFile ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . config . close ( ) [EOL] [EOL] @ patch ( [string] ) def test_config_error ( self , mock ) : [EOL] mock . side_effect = config . ConfigError ( [string] ) [EOL] [EOL] args = [ [string] , self . config . name , [string] , ] [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli . cli , args ) [EOL] self . assertEqual ( result . output , [string] ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] [EOL] @ patch ( [string] ) def test_app_error ( self , mock ) : [EOL] mock . side_effect = app . AppError ( [string] ) [EOL] [EOL] args = [ [string] , self . config . name , [string] , ] [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli . cli , args ) [EOL] self . assertEqual ( result . output , [string] ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] [EOL] [EOL] class AddTokenTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . config = tempfile . NamedTemporaryFile ( ) [EOL] self . config . write ( [string] ) [EOL] self . config . flush ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . config . close ( ) [EOL] [EOL] @ patch ( [string] ) def test_token_error ( self , mock ) : [EOL] mock . side_effect = token . TokenError ( [string] ) [EOL] [EOL] args = [ [string] , self . config . name , [string] , [string] , [string] , ] [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli . cli , args ) [EOL] self . assertEqual ( result . output , [string] ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] [EOL] @ patch ( [string] ) def test_token_success ( self , mock ) : [EOL] mock . return_value = [string] [EOL] [EOL] args = [ [string] , self . config . name , [string] , [string] , [string] , ] [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli . cli , args ) [EOL] self . assertEqual ( result . output , [string] ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL] [EOL] [EOL] class ServeTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . config = tempfile . NamedTemporaryFile ( ) [EOL] self . config . write ( [string] ) [EOL] self . config . flush ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . config . close ( ) [EOL] [EOL] @ patch ( [string] ) def test_serve ( self , mock ) : [EOL] args = [ [string] , self . config . name , [string] , ] [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( cli . cli , args ) [EOL] [EOL] self . assertEqual ( len ( mock . mock_calls ) , [number] ) [EOL] self . assertEqual ( result . exit_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0
from typing import Dict , Union [EOL] import pkrecv [EOL] import typing [EOL] import flask [EOL] from argparse import ArgumentParser [EOL] from unittest import TestCase [EOL] [EOL] from flask import Flask [EOL] [EOL] from pkrecv . wsgi import Gunicorn [EOL] [EOL] [EOL] class InitTest ( TestCase ) : [EOL] @ staticmethod def test_implemented ( ) : [EOL] gunicorn = Gunicorn ( Flask ( [string] ) , { } ) [EOL] gunicorn . init ( ArgumentParser ( ) , { } , [ ] ) [EOL] [EOL] [EOL] class LoadConfigTest ( TestCase ) : [EOL] def test_lower ( self ) : [EOL] options = { [string] : [number] , [string] : [string] , } [EOL] gunicorn = Gunicorn ( Flask ( [string] ) , options ) [EOL] self . assertEqual ( gunicorn . cfg . workers , [number] ) [EOL] self . assertEqual ( gunicorn . cfg . bind , [ [string] ] ) [EOL] [EOL] [EOL] class TestLoad ( TestCase ) : [EOL] def test_app ( self ) : [EOL] app = Flask ( [string] ) [EOL] gunicorn = Gunicorn ( app , { } ) [EOL] self . assertIs ( gunicorn . load ( ) , app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 0 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $pkrecv.wsgi.Gunicorn$ 0 0 0 0 0 $flask.app.Flask$ 0 0
from typing import Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] from pkrecv . models . token import add_token [EOL] [EOL] from . . helpers import FlaskTestCase [EOL] [EOL] [EOL] class TokenGetTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . get ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] tokens = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( tokens ) , [number] ) [EOL] [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( tokens [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] [EOL] class TokenPostTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . post ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . post ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_missing_role ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . post ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertIsInstance ( data [ [string] ] [ [string] ] , str ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_invalid_role ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [string] } [EOL] [EOL] res = self . client . post ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [string] } [EOL] [EOL] res = self . client . post ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertIsInstance ( data . get ( [string] ) , str ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] [EOL] class TokenDeleteTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . delete ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_none ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_server ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_missing_id ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertTrue ( [string] in data [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_invalid_id ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] tokens = json . loads ( res . data . decode ( [string] ) ) [ [string] ] [EOL] self . assertEqual ( len ( tokens ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import pkrecv [EOL] import json [EOL] [EOL] from pkrecv . models . server import add_server , get_servers [EOL] from pkrecv . models . token import add_token [EOL] [EOL] from . . helpers import FlaskTestCase [EOL] [EOL] [EOL] class ServerGetTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . get ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_server ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_none ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_no_filter ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] servers = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] def test_id_filter ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] filters = { [string] : [string] , } [EOL] [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers , data = filters ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] servers = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] def test_ip_filter ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] filters = { [string] : [string] , } [EOL] [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers , data = filters ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] servers = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] def test_key_type_filter ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] filters = { [string] : [string] , } [EOL] [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers , data = filters ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] servers = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] def test_ip_and_key_type_filter ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] filters = { [string] : [string] , [string] : [string] , } [EOL] [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] add_server ( ip = [string] , port = [number] , public_key = [string] , token_id = [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers , data = filters ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] servers = data [ [string] ] [EOL] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] self . assertEqual ( servers [ [number] ] [ [string] ] , [string] ) [EOL] [EOL] [EOL] class ServerPostTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . post ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . post ( [string] , headers = headers ) [EOL] obj = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( obj [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_missing_public_key ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] res = self . client . post ( [string] , headers = headers ) [EOL] obj = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertTrue ( [string] in obj [ [string] ] . keys ( ) ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_invalid_public_key ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [string] , } [EOL] [EOL] res = self . client . post ( [string] , headers = headers , data = data ) [EOL] obj = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( obj [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_success_server ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [string] , } [EOL] [EOL] res = self . client . post ( [string] , headers = headers , data = data ) [EOL] obj = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( obj [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . key_type , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_data , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_comment , [string] ) [EOL] [EOL] def test_success_admin ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [string] , } [EOL] [EOL] res = self . client . post ( [string] , headers = headers , data = data ) [EOL] obj = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( obj [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . key_type , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_data , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_comment , [string] ) [EOL] [EOL] [EOL] class ServerDeleteTest ( FlaskTestCase ) : [EOL] def test_unauthenticated ( self ) : [EOL] res = self . client . delete ( [string] ) [EOL] self . assertEqual ( res . data , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_none ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] , } [EOL] [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_unauthorized_server ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] , } [EOL] [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_missing_id ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] res = self . client . delete ( [string] , headers = headers ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertTrue ( [string] in data [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_invalid_id ( self ) : [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] , } [EOL] [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] headers = { [string] : [string] . format ( add_token ( [string] , [string] ) ) , } [EOL] [EOL] data = { [string] : [number] , } [EOL] [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] res = self . client . delete ( [string] , headers = headers , data = data ) [EOL] data = json . loads ( res . data . decode ( [string] ) ) [EOL] self . assertEqual ( data [ [string] ] , [string] ) [EOL] self . assertEqual ( res . status_code , [number] ) [EOL] [EOL] res = self . client . get ( [string] , headers = headers ) [EOL] servers = json . loads ( res . data . decode ( [string] ) ) [ [string] ] [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import flask [EOL] from flask import Response , g [EOL] [EOL] from pkrecv . api . auth import role_required , verify_token [EOL] from pkrecv . models . token import add_token [EOL] [EOL] from . . helpers import FlaskTestCase [EOL] [EOL] [EOL] class VerifyTokenTest ( FlaskTestCase ) : [EOL] def test_no_tokens_none ( self ) : [EOL] self . assertFalse ( verify_token ( None ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_no_tokens_empty ( self ) : [EOL] self . assertFalse ( verify_token ( [string] ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_no_tokens_str ( self ) : [EOL] self . assertFalse ( verify_token ( [string] ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_no_tokens_wildcard ( self ) : [EOL] self . assertFalse ( verify_token ( [string] ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_none ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertFalse ( verify_token ( None ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_empty ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertFalse ( verify_token ( [string] ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_wildcard ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertFalse ( verify_token ( [string] ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_invalid_token ( self ) : [EOL] first = add_token ( [string] , [string] ) [EOL] second = add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] invalid = first [ : int ( len ( first ) / [number] ) ] + second [ int ( len ( second ) / [number] ) : ] [EOL] self . assertFalse ( verify_token ( invalid ) ) [EOL] self . assertEqual ( g . get ( [string] ) , None ) [EOL] [EOL] def test_success_admin ( self ) : [EOL] token = add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertTrue ( verify_token ( token ) ) [EOL] self . assertEqual ( g . token . id , [number] ) [EOL] self . assertEqual ( g . token . role , [string] ) [EOL] self . assertEqual ( g . token . description , [string] ) [EOL] [EOL] def test_success_server ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] token = add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertTrue ( verify_token ( token ) ) [EOL] self . assertEqual ( g . token . id , [number] ) [EOL] self . assertEqual ( g . token . role , [string] ) [EOL] self . assertEqual ( g . token . description , [string] ) [EOL] [EOL] def test_success_none ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] token = add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertTrue ( verify_token ( token ) ) [EOL] self . assertEqual ( g . token . id , [number] ) [EOL] self . assertEqual ( g . token . role , [string] ) [EOL] self . assertEqual ( g . token . description , [string] ) [EOL] [EOL] [EOL] class RoleRequiredTest ( FlaskTestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . admin0 = add_token ( [string] , [string] ) [EOL] self . admin1 = add_token ( [string] , [string] ) [EOL] self . server0 = add_token ( [string] , [string] ) [EOL] self . server1 = add_token ( [string] , [string] ) [EOL] self . none0 = add_token ( [string] , [string] ) [EOL] self . none1 = add_token ( [string] , [string] ) [EOL] [EOL] def test_unauthenticated ( self ) : [EOL] self . assertEqual ( self . require_admin ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_admin_or_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none_or_server ( ) . status_code , [number] ) [EOL] [EOL] def test_admin ( self ) : [EOL] verify_token ( self . admin0 ) [EOL] [EOL] self . assertEqual ( self . require_admin ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_admin_or_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none_or_server ( ) . status_code , [number] ) [EOL] [EOL] def test_server ( self ) : [EOL] verify_token ( self . server1 ) [EOL] [EOL] self . assertEqual ( self . require_admin ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_admin_or_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none_or_server ( ) . status_code , [number] ) [EOL] [EOL] def test_none ( self ) : [EOL] verify_token ( self . none0 ) [EOL] [EOL] self . assertEqual ( self . require_admin ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_admin_or_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_server ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none ( ) . status_code , [number] ) [EOL] self . assertEqual ( self . require_none_or_server ( ) . status_code , [number] ) [EOL] [EOL] @ staticmethod @ role_required ( [string] ) def require_admin ( ) : [EOL] return Response ( status = [number] ) [EOL] [EOL] @ staticmethod @ role_required ( [string] ) def require_server ( ) : [EOL] return Response ( status = [number] ) [EOL] [EOL] @ staticmethod @ role_required ( [string] ) def require_none ( ) : [EOL] return Response ( status = [number] ) [EOL] [EOL] @ staticmethod @ role_required ( [string] , [string] ) def require_admin_or_server ( ) : [EOL] return Response ( status = [number] ) [EOL] [EOL] @ staticmethod @ role_required ( [string] , [string] ) def require_none_or_server ( ) : [EOL] return Response ( status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import List , Any [EOL] import unittest [EOL] import typing [EOL] import pkrecv [EOL] import re [EOL] from unittest import TestCase [EOL] from unittest . mock import MagicMock , patch [EOL] [EOL] from pkrecv . models . token import ( Token , TokenError , add_token , delete_token , generate_token , get_tokens , sha256 , ) [EOL] [EOL] from . . helpers import FlaskTestCase [EOL] [EOL] [EOL] class AddTokenTest ( FlaskTestCase ) : [EOL] @ patch ( [string] ) def test_sha256 ( self , mock ) : [EOL] data = [string] [EOL] sha256sum = sha256 ( data ) [EOL] [EOL] mock . return_value = data [EOL] add_token ( [string] , [string] ) [EOL] [EOL] tokens = Token . query . filter_by ( token = sha256sum ) . all ( ) [EOL] self . assertEqual ( len ( tokens ) , [number] ) [EOL] [EOL] def test_invalid_role ( self ) : [EOL] with self . assertRaises ( TokenError ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] [EOL] class DeleteTokenTest ( FlaskTestCase ) : [EOL] def test_invalid_id ( self ) : [EOL] with self . assertRaises ( TokenError ) : [EOL] delete_token ( [number] ) [EOL] [EOL] add_token ( [string] , [string] ) [EOL] [EOL] with self . assertRaises ( TokenError ) : [EOL] delete_token ( [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] add_token ( [string] , [string] ) [EOL] [EOL] delete_token ( [number] ) [EOL] [EOL] tokens = get_tokens ( ) [EOL] self . assertEqual ( len ( tokens ) , [number] ) [EOL] self . assertEqual ( tokens [ [number] ] . role , [string] ) [EOL] self . assertEqual ( tokens [ [number] ] . role , [string] ) [EOL] [EOL] [EOL] class GetTokensTest ( FlaskTestCase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . first = add_token ( [string] , [string] ) [EOL] self . second = add_token ( [string] , [string] ) [EOL] self . third = add_token ( [string] , [string] ) [EOL] [EOL] def test_excluded_field ( self ) : [EOL] tokens = get_tokens ( ) [EOL] self . assertEqual ( len ( tokens ) , [number] ) [EOL] self . assertFalse ( [string] in tokens [ [number] ] . keys ( ) ) [EOL] self . assertFalse ( [string] in tokens [ [number] ] . keys ( ) ) [EOL] self . assertFalse ( [string] in tokens [ [number] ] . keys ( ) ) [EOL] [EOL] def test_id ( self ) : [EOL] first = get_tokens ( id = [number] ) [EOL] self . assertEqual ( len ( first ) , [number] ) [EOL] self . assertEqual ( first [ [number] ] . id , [number] ) [EOL] self . assertEqual ( first [ [number] ] . role , [string] ) [EOL] self . assertEqual ( first [ [number] ] . description , [string] ) [EOL] [EOL] second = get_tokens ( id = [number] ) [EOL] self . assertEqual ( len ( second ) , [number] ) [EOL] self . assertEqual ( second [ [number] ] . id , [number] ) [EOL] self . assertEqual ( second [ [number] ] . role , [string] ) [EOL] self . assertEqual ( second [ [number] ] . description , [string] ) [EOL] [EOL] third = get_tokens ( id = [number] ) [EOL] self . assertEqual ( len ( third ) , [number] ) [EOL] self . assertEqual ( third [ [number] ] . id , [number] ) [EOL] self . assertEqual ( third [ [number] ] . role , [string] ) [EOL] self . assertEqual ( third [ [number] ] . description , [string] ) [EOL] [EOL] def test_token ( self ) : [EOL] first = get_tokens ( token = self . first ) [EOL] self . assertEqual ( len ( first ) , [number] ) [EOL] self . assertEqual ( first [ [number] ] . id , [number] ) [EOL] self . assertEqual ( first [ [number] ] . role , [string] ) [EOL] self . assertEqual ( first [ [number] ] . description , [string] ) [EOL] [EOL] second = get_tokens ( token = self . second ) [EOL] self . assertEqual ( len ( second ) , [number] ) [EOL] self . assertEqual ( second [ [number] ] . id , [number] ) [EOL] self . assertEqual ( second [ [number] ] . role , [string] ) [EOL] self . assertEqual ( second [ [number] ] . description , [string] ) [EOL] [EOL] third = get_tokens ( token = self . third ) [EOL] self . assertEqual ( len ( third ) , [number] ) [EOL] self . assertEqual ( third [ [number] ] . id , [number] ) [EOL] self . assertEqual ( third [ [number] ] . role , [string] ) [EOL] self . assertEqual ( third [ [number] ] . description , [string] ) [EOL] [EOL] def test_len ( self ) : [EOL] self . assertEqual ( len ( get_tokens ( ) ) , [number] ) [EOL] [EOL] for _ in range ( [number] ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] self . assertEqual ( len ( get_tokens ( ) ) , [number] ) [EOL] [EOL] [EOL] class GenerateTokenTest ( TestCase ) : [EOL] def test_length ( self ) : [EOL] self . assertEqual ( len ( generate_token ( [number] ) ) , [number] ) [EOL] self . assertEqual ( len ( generate_token ( [number] ) ) , [number] ) [EOL] [EOL] def test_hex ( self ) : [EOL] token = generate_token ( [number] ) . decode ( [string] ) [EOL] self . assertIsNone ( re . search ( [string] , token ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.token.Token]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List [EOL] import typing [EOL] import pkrecv [EOL] from unittest import TestCase [EOL] [EOL] from pkrecv . models . server import ( ServerError , add_server , delete_server , get_servers , split_key , ) [EOL] from pkrecv . models . token import add_token [EOL] [EOL] from . . helpers import FlaskTestCase [EOL] [EOL] [EOL] class AddServerTest ( FlaskTestCase ) : [EOL] def test_invalid_key ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] def test_invalid_key_type_ssh_rsa1 ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] def test_invalid_key_type_sh_rsa ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] def test_invalid_key_data ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . ip , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . port , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . key_type , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_data , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_comment , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . token_id , [number] ) [EOL] [EOL] def test_strip_key ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( servers [ [number] ] . key_type , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_data , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . key_comment , [string] ) [EOL] [EOL] [EOL] class DeleteServerTest ( FlaskTestCase ) : [EOL] def test_invalid_id ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] delete_server ( [number] ) [EOL] [EOL] add_token ( [string] , [string] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] with self . assertRaises ( ServerError ) : [EOL] delete_server ( [number] ) [EOL] [EOL] self . assertEqual ( len ( get_servers ( ) ) , [number] ) [EOL] [EOL] def test_success ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] self . assertEqual ( len ( get_servers ( ) ) , [number] ) [EOL] [EOL] delete_server ( [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . ip , [string] ) [EOL] self . assertEqual ( servers [ [number] ] . ip , [string] ) [EOL] [EOL] [EOL] class GetServersTest ( FlaskTestCase ) : [EOL] def test_id ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] servers = get_servers ( id = [number] ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . ip , [string] ) [EOL] [EOL] def test_ip ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] add_server ( [string] , [number] , [string] , [number] ) [EOL] [EOL] servers = get_servers ( ip = [string] ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] self . assertEqual ( servers [ [number] ] . ip , [string] ) [EOL] [EOL] def test_all ( self ) : [EOL] add_token ( [string] , [string] ) [EOL] [EOL] for i in range ( [number] ) : [EOL] add_server ( [string] , i , [string] , [number] ) [EOL] [EOL] servers = get_servers ( ) [EOL] self . assertEqual ( len ( servers ) , [number] ) [EOL] [EOL] [EOL] class SplitKeyTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] split_key ( [string] ) [EOL] [EOL] def test_missing_data_and_comment ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] split_key ( [string] ) [EOL] [EOL] def test_excessive_fields ( self ) : [EOL] with self . assertRaises ( ServerError ) : [EOL] split_key ( [string] ) [EOL] [EOL] def test_missing_comment ( self ) : [EOL] self . assertEqual ( split_key ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_have_all_fields ( self ) : [EOL] self . assertEqual ( split_key ( [string] ) , [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pkrecv.models.server.Server]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from unittest import TestCase [EOL] [EOL] from flask import Flask [EOL] [EOL] from pkrecv . models . db import DBError , Model , init_db [EOL] [EOL] [EOL] class InitDBTest ( TestCase ) : [EOL] def test_invalid_db ( self ) : [EOL] app = Flask ( __name__ ) [EOL] app . app_context ( ) . push ( ) [comment] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = False [EOL] [EOL] with self . assertRaises ( DBError ) : [EOL] init_db ( app ) [EOL] [EOL] [EOL] class ModelTest ( TestCase ) : [EOL] def test_invalid_type ( self ) : [EOL] with self . assertRaises ( ValueError ) : [EOL] Model . _convert_value ( None ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0