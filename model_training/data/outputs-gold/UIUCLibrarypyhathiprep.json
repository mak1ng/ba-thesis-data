from setuptools import setup [EOL] [EOL] setup ( name = [string] , packages = [ [string] ] , install_requires = [ [string] , [string] , [string] ] , test_suite = [string] , setup_requires = [ [string] ] , tests_require = [ [string] ] , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyhathiprep [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import os [EOL] import shutil [EOL] import tempfile [EOL] import abc [EOL] from datetime import datetime [EOL] import logging [EOL] from pyhathiprep import make_yml [EOL] from pyhathiprep . utils import derive_package_prefix [EOL] from pyhathiprep . checksum import create_checksum_report [EOL] import warnings [EOL] [EOL] [EOL] class AbsPackageCreator ( metaclass = abc . ABCMeta ) : [EOL] def __init__ ( self , source ) : [EOL] self . _source = source [EOL] self . _prefix = derive_package_prefix ( source ) [EOL] [EOL] @ abc . abstractmethod def create_checksum_report ( self , build_path ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def make_yaml ( self , build_path , title_page = None ) : [EOL] pass [EOL] [EOL] def copy_source ( self , build_path ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def deploy ( self , build_path , destination , overwrite = False ) : [EOL] pass [EOL] [EOL] def generate_package ( self , destination = None , overwrite = False , title_page = None ) : [EOL] with tempfile . TemporaryDirectory ( ) as temp : [EOL] self . copy_source ( build_path = temp ) [EOL] self . make_yaml ( build_path = temp , title_page = title_page ) [EOL] self . create_checksum_report ( build_path = temp ) [EOL] self . deploy ( build_path = temp , destination = destination , overwrite = overwrite ) [EOL] [EOL] [EOL] class InplacePackage ( AbsPackageCreator ) : [EOL] def make_yaml ( self , build_path , title_page = None ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . debug ( [string] . format ( build_path ) ) [EOL] yml = make_yml ( self . _source , capture_date = datetime . now ( ) , title_page = title_page ) [EOL] with open ( os . path . join ( build_path , [string] ) , [string] ) as w : [EOL] w . write ( yml ) [EOL] [EOL] def create_checksum_report ( self , build_path ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . debug ( [string] . format ( build_path ) ) [EOL] checksum_report = create_checksum_report ( self . _source ) [EOL] with open ( os . path . join ( build_path , [string] ) , [string] ) as w : [EOL] w . write ( checksum_report ) [EOL] [EOL] def deploy ( self , build_path , destination = None , overwrite = False ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] for item in os . scandir ( build_path ) : [EOL] save_dest = os . path . join ( self . _source , item . name ) [EOL] if os . path . exists ( save_dest ) : [EOL] if overwrite : [EOL] os . remove ( save_dest ) [EOL] logger . debug ( [string] . format ( item . path , save_dest ) ) [EOL] shutil . move ( item . path , save_dest ) [EOL] [EOL] [EOL] class NewPackage ( AbsPackageCreator ) : [EOL] def make_yaml ( self , build_path , title_page = None ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . debug ( [string] . format ( build_path ) ) [EOL] yml = make_yml ( build_path , capture_date = datetime . now ( ) , title_page = title_page ) [EOL] with open ( os . path . join ( build_path , [string] ) , [string] ) as w : [EOL] w . write ( yml ) [EOL] [EOL] def create_checksum_report ( self , build_path ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . debug ( [string] . format ( build_path ) ) [EOL] checksum_report = create_checksum_report ( build_path ) [EOL] with open ( os . path . join ( build_path , [string] ) , [string] ) as w : [EOL] w . write ( checksum_report ) [EOL] [EOL] def copy_source ( self , build_path ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] for item in filter ( lambda x : x . is_file ( ) , os . scandir ( self . _source ) ) : [EOL] logger . debug ( [string] . format ( item . path , build_path ) ) [EOL] shutil . copyfile ( item . path , os . path . join ( build_path , item . name ) ) [EOL] [EOL] def deploy ( self , build_path , destination = None , overwrite = False ) : [EOL] logger = logging . getLogger ( __name__ ) [EOL] if not destination : [EOL] raise AttributeError ( [string] ) [EOL] new_package_path = os . path . join ( destination , self . _prefix ) [EOL] [EOL] if os . path . exists ( new_package_path ) : [EOL] if overwrite : [EOL] [comment] [EOL] shutil . rmtree ( new_package_path ) [EOL] else : [EOL] raise FileExistsError ( [string] . format ( new_package_path ) ) [EOL] os . makedirs ( new_package_path ) [EOL] [EOL] for item in os . scandir ( build_path ) : [EOL] logger . debug ( [string] . format ( item . path , new_package_path ) ) [EOL] shutil . move ( item . path , new_package_path ) [EOL] [EOL] [EOL] def create_package ( source , destination = None , prefix = None , overwrite = False ) : [EOL] [docstring] [EOL] if destination : [EOL] new_creator = NewPackage ( source ) [EOL] new_creator . generate_package ( destination , overwrite = overwrite ) [EOL] else : [EOL] inplace_creator = InplacePackage ( source ) [EOL] inplace_creator . generate_package ( overwrite = overwrite ) [EOL] [EOL] [EOL] def create_new_package ( source , destination , prefix = None , overwrite = False , title_page = None ) : [EOL] warnings . warn ( [string] , DeprecationWarning ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] if not prefix : [EOL] prefix = derive_package_prefix ( source ) [EOL] [EOL] new_package_path = os . path . join ( destination , prefix ) [EOL] if os . path . exists ( new_package_path ) : [EOL] if overwrite : [EOL] [comment] [EOL] shutil . rmtree ( new_package_path ) [EOL] else : [EOL] raise FileExistsError ( [string] . format ( new_package_path ) ) [EOL] with tempfile . TemporaryDirectory ( ) as temp : [EOL] [comment] [EOL] for item in filter ( lambda x : x . is_file ( ) , os . scandir ( source ) ) : [EOL] logger . debug ( [string] . format ( item . path , temp ) ) [EOL] shutil . copyfile ( item . path , os . path . join ( temp , item . name ) ) [EOL] [EOL] [comment] [EOL] logger . debug ( [string] . format ( temp ) ) [EOL] yml = make_yml ( temp , capture_date = datetime . now ( ) , title_page = title_page ) [EOL] with open ( os . path . join ( temp , [string] ) , [string] ) as w : [EOL] w . write ( yml ) [EOL] [EOL] logger . debug ( [string] . format ( temp ) ) [EOL] checksum_report = create_checksum_report ( temp ) [EOL] with open ( os . path . join ( temp , [string] ) , [string] ) as w : [EOL] w . write ( checksum_report ) [EOL] [EOL] [comment] [EOL] os . makedirs ( new_package_path ) [EOL] for item in os . scandir ( temp ) : [EOL] logger . debug ( [string] . format ( item . path , new_package_path ) ) [EOL] shutil . move ( item . path , new_package_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] import sys [EOL] [EOL] [EOL] def configure_logger ( debug_mode = False , log_file = None ) : [EOL] logger = logging . getLogger ( __package__ ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] debug_formatter = logging . Formatter ( [string] ) [EOL] [EOL] std_handler = logging . StreamHandler ( sys . stdout ) [EOL] if log_file : [EOL] file_handler = logging . FileHandler ( filename = log_file ) [EOL] file_handler . setLevel ( logging . DEBUG ) [EOL] file_handler . setFormatter ( debug_formatter ) [EOL] logger . addHandler ( file_handler ) [EOL] [EOL] if debug_mode : [EOL] print ( [string] ) [EOL] std_handler . setLevel ( logging . DEBUG ) [EOL] std_handler . setFormatter ( debug_formatter ) [EOL] else : [EOL] std_handler . setLevel ( logging . INFO ) [EOL] logger . setLevel ( logging . INFO ) [EOL] [EOL] [comment] [EOL] [EOL] logger . addHandler ( std_handler ) [EOL] return logger [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import pyhathiprep [EOL] import pytz [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import io [EOL] import abc [EOL] import typing [EOL] from datetime import datetime [EOL] import ruamel . yaml [comment] [EOL] import tzlocal [comment] [EOL] import functools [EOL] [EOL] [EOL] class AbsYmlBuilder ( metaclass = abc . ABCMeta ) : [EOL] def __init__ ( self ) : [EOL] self . data = dict ( ) [EOL] self . _page_data = dict ( ) [EOL] for k , v in self . boilerplate ( ) . items ( ) : [EOL] self . data [ k ] = str ( v ) [EOL] [EOL] def add_pagedata ( self , filename , ** attributes ) : [EOL] if filename in self . _page_data : [EOL] raise KeyError ( [string] . format ( filename ) ) [EOL] else : [EOL] self . _page_data [ filename ] = attributes [EOL] [EOL] @ abc . abstractmethod def boilerplate ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abc . abstractmethod def build ( self ) : [EOL] pass [EOL] [EOL] [EOL] def strip_date_quotes ( func ) : [EOL] [docstring] [EOL] @ functools . wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] yml_data = func ( * args , ** kwargs ) [EOL] cleaned_lines = [ ] [EOL] for line in yml_data . splitlines ( keepends = True ) : [EOL] if [string] in line : [EOL] key , value = line . split ( [string] ) [EOL] new_value = value . strip ( [string] ) . strip ( [string] ) [EOL] new_line = [string] . format ( key , new_value ) [EOL] cleaned_lines . append ( new_line ) [EOL] else : [EOL] cleaned_lines . append ( line ) [EOL] [EOL] return [string] . join ( cleaned_lines ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] class HathiYmlBuilder ( AbsYmlBuilder ) : [EOL] def boilerplate ( self ) : [EOL] return { [string] : [string] , [string] : [string] } [EOL] [EOL] def set_data ( self , key , value ) : [EOL] self . data [ key ] = value [EOL] [EOL] def set_capture_date ( self , date ) : [EOL] tz = tzlocal . get_localzone ( ) [EOL] if date . tzinfo is None : [EOL] capture_date = tz . localize ( date ) [EOL] else : [EOL] capture_date = date [EOL] self . data [ [string] ] = capture_date . isoformat ( timespec = [string] ) [EOL] [EOL] @ strip_date_quotes def build ( self ) : [EOL] ordered = [ [string] , [string] , [string] ] [EOL] [EOL] yml = ruamel . yaml . YAML ( ) [EOL] yml . indent = [number] [EOL] yml . default_flow_style = False [EOL] [EOL] data = dict ( ) [EOL] [EOL] [comment] [EOL] for key in ordered : [EOL] if self . data [ key ] : [EOL] data [ key ] = self . data [ key ] [EOL] [EOL] [comment] [EOL] for key , value in filter ( lambda i : i [ [number] ] not in ordered , self . data . items ( ) ) : [EOL] data [ key ] = value [EOL] [EOL] [comment] [EOL] data [ [string] ] = self . _page_data [EOL] [EOL] [comment] [EOL] with io . StringIO ( ) as yml_string_writer : [EOL] yml . dump ( data , yml_string_writer ) [EOL] yml_string_writer . seek ( [number] ) [EOL] yml_str = yml_string_writer . read ( ) [EOL] [EOL] return yml_str [EOL] [EOL] [EOL] def make_yml ( directory , title_page = None , ** overrides ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] if not os . path . isdir ( directory ) : [EOL] raise FileNotFoundError ( [string] . format ( directory ) ) [EOL] [EOL] builder = HathiYmlBuilder ( ) [EOL] [EOL] for key , value in overrides . items ( ) : [EOL] if key == [string] : [EOL] builder . set_capture_date ( value ) [EOL] else : [EOL] builder . set_data ( key , value ) [EOL] [EOL] for image in get_images ( directory ) : [EOL] attribute = dict ( ) [EOL] relative_path = os . path . relpath ( image , directory ) [EOL] if relative_path == title_page : [EOL] attribute [ [string] ] = [string] [EOL] builder . add_pagedata ( relative_path , ** attribute ) [EOL] return builder . build ( ) [EOL] [EOL] [EOL] def get_images ( directory , page_data_extensions = ( [string] , [string] ) ) : [EOL] for root , dirs , files in os . walk ( directory ) : [EOL] for file_ in files : [EOL] if os . path . splitext ( file_ ) [ [number] ] in page_data_extensions : [EOL] yield os . path . join ( root , file_ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $pytz.BaseTzInfo$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $pytz.BaseTzInfo$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__title__ = [string] [EOL] __version__ = [string] [EOL] __url__ = [string] [EOL] __author__ = [string] [EOL] __author_email__ = [string] [EOL] __description__ = [string] [EOL] FULL_TITLE = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Iterator [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import typing [EOL] [EOL] [EOL] def get_packages ( root ) : [EOL] [docstring] [EOL] for item in filter ( lambda x : x . is_dir ( ) , os . scandir ( root ) ) : [EOL] yield item . path [EOL] [EOL] [EOL] def derive_package_prefix ( path ) : [EOL] [docstring] [EOL] return os . path . normpath ( path ) . split ( os . path . sep ) [ - [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from pyhathiprep import utils [EOL] [EOL] PACKAGE_NAME = [string] [EOL] [EOL] def test_derive_package_prefix ( ) : [EOL] source = os . path . join ( [string] , [string] , [string] , PACKAGE_NAME ) [EOL] prefix = utils . derive_package_prefix ( source ) [EOL] assert prefix == PACKAGE_NAME [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import pyhathiprep [EOL] import typing [EOL] import os [EOL] import shutil [EOL] [EOL] import pytest [EOL] import pytz [EOL] import tzlocal [EOL] [EOL] import pyhathiprep . package_creater [EOL] [EOL] PACKAGE_NAME = [string] [EOL] SECOND_PACKAGE_NAME = [string] [EOL] SOURCE_FILES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class TestCreatePackage : [EOL] @ pytest . fixture ( scope = [string] ) def package_source_fixture ( self , tmpdir_factory ) : [EOL] [EOL] new_package = tmpdir_factory . mktemp ( PACKAGE_NAME , numbered = False ) [EOL] for file in SOURCE_FILES : [EOL] new_file = new_package . join ( file ) [EOL] print ( [string] . format ( new_file ) ) [EOL] with open ( new_file , [string] ) as w : [EOL] pass [EOL] yield new_package [EOL] shutil . rmtree ( new_package ) [EOL] [EOL] def test_create_package ( self , package_source_fixture , tmpdir_factory , monkeypatch ) : [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] print ( [string] . format ( str ( package_source_fixture ) ) ) [EOL] [comment] [EOL] destination = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] pyhathiprep . package_creater . create_package ( source = str ( package_source_fixture ) , destination = str ( destination ) ) [EOL] new_created_package = os . path . join ( str ( destination ) , PACKAGE_NAME ) [EOL] print ( [string] . format ( new_created_package ) ) [EOL] assert os . path . exists ( new_created_package ) [EOL] for original_file in SOURCE_FILES : [EOL] expected_copied_file = os . path . join ( new_created_package , original_file ) [EOL] print ( [string] . format ( expected_copied_file ) ) [EOL] assert os . path . exists ( expected_copied_file ) [EOL] [EOL] yml_file = os . path . join ( new_created_package , [string] ) [EOL] print ( [string] . format ( yml_file ) ) [EOL] assert os . path . exists ( yml_file ) [EOL] [EOL] checksum = os . path . join ( new_created_package , [string] ) [EOL] print ( [string] . format ( checksum ) ) [EOL] assert os . path . exists ( checksum ) [EOL] shutil . rmtree ( destination ) [EOL] [EOL] def test_create_package_class ( self , package_source_fixture , tmpdir_factory , monkeypatch ) : [EOL] [comment] [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] destination = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] new_created_package = os . path . join ( str ( destination ) , PACKAGE_NAME ) [EOL] package_creator = pyhathiprep . package_creater . NewPackage ( str ( package_source_fixture ) ) [EOL] package_creator . generate_package ( destination ) [EOL] print ( [string] . format ( new_created_package ) ) [EOL] assert os . path . exists ( new_created_package ) [EOL] for original_file in SOURCE_FILES : [EOL] expected_copied_file = os . path . join ( new_created_package , original_file ) [EOL] print ( [string] . format ( expected_copied_file ) ) [EOL] assert os . path . exists ( expected_copied_file ) [EOL] [EOL] yml_file = os . path . join ( new_created_package , [string] ) [EOL] print ( [string] . format ( yml_file ) ) [EOL] assert os . path . exists ( yml_file ) [EOL] [EOL] checksum = os . path . join ( new_created_package , [string] ) [EOL] print ( [string] . format ( checksum ) ) [EOL] assert os . path . exists ( checksum ) [EOL] shutil . rmtree ( destination ) [EOL] [EOL] [EOL] class TestCreatePackageInplace : [EOL] @ pytest . fixture ( scope = [string] ) def package_source_fixture ( self , tmpdir_factory ) : [EOL] new_package = tmpdir_factory . mktemp ( SECOND_PACKAGE_NAME , numbered = False ) [EOL] for file in SOURCE_FILES : [EOL] new_file = new_package . join ( file ) [EOL] print ( [string] . format ( new_file ) ) [EOL] with open ( new_file , [string] ) as w : [EOL] pass [EOL] yield new_package [EOL] shutil . rmtree ( new_package ) [EOL] [EOL] def test_create_package_class ( self , package_source_fixture , monkeypatch ) : [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] package_creator = pyhathiprep . package_creater . InplacePackage ( str ( package_source_fixture ) ) [EOL] package_creator . generate_package ( ) [EOL] package_root = os . path . join ( str ( package_source_fixture ) ) [EOL] print ( [string] . format ( package_root ) ) [EOL] assert os . path . exists ( package_root ) [EOL] for original_file in SOURCE_FILES : [EOL] expected_copied_file = os . path . join ( package_root , original_file ) [EOL] print ( [string] . format ( expected_copied_file ) ) [EOL] assert os . path . exists ( expected_copied_file ) [EOL] [EOL] yml_file = os . path . join ( package_root , [string] ) [EOL] print ( [string] . format ( yml_file ) ) [EOL] assert os . path . exists ( yml_file ) [EOL] [EOL] checksum = os . path . join ( package_root , [string] ) [EOL] print ( [string] . format ( checksum ) ) [EOL] assert os . path . exists ( checksum ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 $pyhathiprep.package_creater.NewPackage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyhathiprep.package_creater.NewPackage$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyhathiprep.package_creater.InplacePackage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyhathiprep.package_creater.InplacePackage$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] import shutil [EOL] [EOL] from pyhathiprep import checksum [EOL] import pytest [EOL] [EOL] PACKAGE_NAME = [string] [EOL] SOURCE_FILES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] expected_report = [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def package_source_fixture_b ( tmpdir_factory ) : [EOL] new_package = tmpdir_factory . mktemp ( PACKAGE_NAME , numbered = False ) [EOL] for file in SOURCE_FILES : [EOL] new_file = new_package . join ( file ) [EOL] print ( [string] . format ( new_file ) ) [EOL] with open ( new_file , [string] ) as w : [EOL] w . write ( [string] ) [EOL] yield new_package [EOL] shutil . rmtree ( new_package ) [EOL] [EOL] [EOL] class TestChecksums : [EOL] def test_create_checksum ( self , tmpdir_factory ) : [EOL] data = [string] [EOL] temp_dir = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] [comment] [EOL] test_file = os . path . join ( temp_dir , [string] ) [EOL] with open ( test_file , [string] ) as w : [EOL] w . write ( data ) [EOL] [comment] [EOL] expected_hash = [string] [EOL] assert expected_hash == checksum . calculate_md5_hash ( test_file ) [EOL] shutil . rmtree ( temp_dir ) [EOL] [EOL] [EOL] def test_generate_report ( self , package_source_fixture_b ) : [EOL] expected_report_lines = expected_report . split ( [string] ) [EOL] report = checksum . create_checksum_report ( package_source_fixture_b ) [EOL] report_lines = report . split ( [string] ) [EOL] for expected_line , actual_line in zip ( report . split ( [string] ) , expected_report . split ( [string] ) ) : [EOL] assert expected_line == actual_line [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator , List , Union [EOL] import datetime [EOL] import pyhathiprep [EOL] import typing [EOL] import pytz [EOL] import itertools [EOL] import shutil [EOL] [EOL] import pytz [EOL] import tzlocal [EOL] [EOL] import pyhathiprep [EOL] import pytest [EOL] from pyhathiprep . hathiyml import HathiYmlBuilder [EOL] from datetime import datetime , timezone [EOL] import ruamel . yaml [EOL] import difflib [EOL] files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class TestMakeYAML : [EOL] @ pytest . fixture ( scope = [string] ) def dummy_fixture ( self , tmpdir_factory ) : [EOL] x = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] for f in files : [EOL] with open ( x . join ( f ) , [string] ) : [EOL] pass [EOL] [EOL] yield x [EOL] shutil . rmtree ( x ) [EOL] [EOL] def test_make_yml ( self , dummy_fixture , monkeypatch ) : [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] tz = pytz . timezone ( [string] ) [EOL] test_date = tz . localize ( datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , second = [number] ) ) [EOL] yml = pyhathiprep . make_yml ( dummy_fixture , capture_date = test_date , scanner_user = [string] ) [EOL] yml_parser = ruamel . yaml . YAML ( ) [EOL] parsed = yml_parser . load ( yml ) [EOL] assert parsed [ [string] ] == [string] [EOL] for expected_page_name , ( actual_page_name , actual_page_values ) in zip ( files , parsed [ [string] ] . items ( ) ) : [EOL] assert expected_page_name == actual_page_name [EOL] [EOL] def test_make_yml_with_title ( self , dummy_fixture , monkeypatch ) : [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] tz = pytz . timezone ( [string] ) [EOL] [EOL] test_date = tz . localize ( datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] ) ) [EOL] yml = pyhathiprep . make_yml ( dummy_fixture , title_page = [string] , capture_date = test_date , scanner_user = [string] ) [EOL] [EOL] yml_parser = ruamel . yaml . YAML ( ) [EOL] parsed = yml_parser . load ( yml ) [EOL] assert parsed [ [string] ] == [string] [EOL] for expected_page_name , ( actual_page_name , actual_page_values ) in zip ( files , parsed [ [string] ] . items ( ) ) : [EOL] assert expected_page_name == actual_page_name [EOL] if actual_page_name == [string] : [EOL] assert actual_page_values [ [string] ] == [string] [EOL] [EOL] [EOL] def test_hathi_yml_builder ( monkeypatch ) : [EOL] expected_yml = [string] [EOL] [EOL] def mock_get_localzone ( ) : [EOL] return pytz . timezone ( [string] ) [EOL] [EOL] monkeypatch . setattr ( tzlocal , [string] , mock_get_localzone ) [EOL] [EOL] builder = HathiYmlBuilder ( ) [EOL] for file in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] if file == [string] : [EOL] builder . add_pagedata ( file , label = [string] ) [EOL] else : [EOL] builder . add_pagedata ( file ) [EOL] tz = pytz . timezone ( [string] ) [EOL] builder . set_capture_date ( tz . localize ( datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , second = [number] ) ) ) [EOL] yml = builder . build ( ) [EOL] [EOL] diff = difflib . unified_diff ( yml . splitlines ( keepends = True ) , expected_yml . splitlines ( keepends = True ) ) [EOL] errors = [ ] [EOL] for error in diff : [EOL] if not error . startswith ( [string] ) : [EOL] errors . append ( error ) [EOL] [comment] [EOL] [comment] [EOL] if errors : [EOL] pytest . fail ( [string] . join ( errors ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[pytz._DstTzInfo,pytz._StaticTzInfo,pytz._UTCclass]$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $typing.Union[pytz._DstTzInfo,pytz._StaticTzInfo,pytz._UTCclass]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[pytz._DstTzInfo,pytz._StaticTzInfo,pytz._UTCclass]$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $typing.Union[pytz._DstTzInfo,pytz._StaticTzInfo,pytz._UTCclass]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0