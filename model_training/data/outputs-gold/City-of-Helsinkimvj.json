from typing import List , Any [EOL] import typing [EOL] import field_permissions [EOL] from django . db . models import ManyToOneRel , Model [EOL] [EOL] FIELD_PERMISSION_TYPES = [ [string] , [string] ] [EOL] [EOL] [EOL] class FieldPermissionsModelRegistry ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _registry = { } [EOL] [EOL] def register ( self , cls , include_fields = None , exclude_fields = None ) : [EOL] if not issubclass ( cls , Model ) : [EOL] raise TypeError ( [string] ) [EOL] [EOL] if include_fields is None : [EOL] include_fields = [string] [EOL] [EOL] if exclude_fields is None : [EOL] exclude_fields = [ ] [EOL] [EOL] self . _registry [ cls ] = { [string] : include_fields , [string] : exclude_fields , } [EOL] [EOL] def in_registry ( self , klass ) : [EOL] model_name = klass . _meta . model_name [EOL] [EOL] return model_name in [ klass . _meta . model_name for klass in self . _registry . keys ( ) ] [EOL] [EOL] def get_include_fields_for ( self , klass ) : [EOL] model_name = klass . _meta . model_name [EOL] [EOL] for klass , conf in self . _registry . items ( ) : [EOL] if klass . _meta . model_name == model_name : [EOL] return conf [ [string] ] [EOL] [EOL] return [ ] [EOL] [EOL] def get_exclude_fields_for ( self , klass ) : [EOL] model_name = klass . _meta . model_name [EOL] [EOL] for klass , conf in self . _registry . items ( ) : [EOL] if klass . _meta . model_name == model_name : [EOL] return conf [ [string] ] [EOL] [EOL] return [ ] [EOL] [EOL] def get_models ( self ) : [EOL] return self . _registry . keys ( ) [EOL] [EOL] def get_model_fields ( self , klass ) : [EOL] opts = klass . _meta [EOL] include_fields = self . get_include_fields_for ( klass ) [EOL] exclude_fields = self . get_exclude_fields_for ( klass ) [EOL] [EOL] fields = [ ] [EOL] for field in opts . get_fields ( include_parents = True ) : [EOL] if include_fields != [string] and field . name not in include_fields : [EOL] continue [EOL] if field . name in exclude_fields : [EOL] continue [EOL] [EOL] fields . append ( field ) [EOL] [EOL] return fields [EOL] [EOL] def get_field_permissions_for_model ( self , klass ) : [EOL] opts = klass . _meta [EOL] include_fields = self . get_include_fields_for ( klass ) [EOL] exclude_fields = self . get_exclude_fields_for ( klass ) [EOL] [EOL] perms = [ ] [EOL] for field in opts . get_fields ( include_parents = True ) : [EOL] if include_fields != [string] and field . name not in include_fields : [EOL] continue [EOL] if field . name in exclude_fields : [EOL] continue [EOL] [EOL] for permission_type in FIELD_PERMISSION_TYPES : [EOL] field_name = field . name [EOL] verbose_field_name = field . name [EOL] [EOL] if hasattr ( field , [string] ) : [EOL] verbose_field_name = field . verbose_name [EOL] elif isinstance ( field , ManyToOneRel ) : [EOL] if field . related_name : [EOL] verbose_field_name = ( field . related_model . _meta . verbose_name_plural ) [EOL] else : [EOL] [comment] [EOL] field_name = field_name + [string] [EOL] verbose_field_name = field_name + [string] [EOL] [EOL] perms . append ( ( [string] . format ( permission_type , opts . model_name , field_name ) , [string] . format ( permission_type , verbose_field_name . lower ( ) , opts . verbose_name , ) , ) ) [EOL] [EOL] return perms [EOL] [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $field_permissions.registry.FieldPermissionsModelRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $field_permissions.registry.FieldPermissionsModelRegistry$ 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import List , Set , Any [EOL] import typing [EOL] from django . apps import apps as global_apps [EOL] from django . db import DEFAULT_DB_ALIAS , router [EOL] [EOL] [EOL] [comment] [EOL] def create_permissions ( app_config , verbosity = [number] , interactive = True , using = DEFAULT_DB_ALIAS , apps = global_apps , ** kwargs ) : [EOL] if not app_config . models_module : [EOL] return [EOL] [EOL] from field_permissions . registry import field_permissions [EOL] [EOL] app_label = app_config . label [EOL] try : [EOL] app_config = apps . get_app_config ( app_label ) [EOL] ContentType = apps . get_model ( [string] , [string] ) [comment] [EOL] Permission = apps . get_model ( [string] , [string] ) [comment] [EOL] except LookupError : [EOL] return [EOL] [EOL] if not router . allow_migrate_model ( using , Permission ) : [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] searched_perms = [ ] [EOL] [comment] [EOL] ctypes = set ( ) [EOL] for klass in app_config . get_models ( ) : [EOL] if not field_permissions . in_registry ( klass ) : [EOL] continue [EOL] [EOL] [comment] [EOL] [comment] [EOL] ctype = ContentType . objects . db_manager ( using ) . get_for_model ( klass ) [EOL] [EOL] ctypes . add ( ctype ) [EOL] for perm in field_permissions . get_field_permissions_for_model ( klass ) : [EOL] searched_perms . append ( ( ctype , perm ) ) [EOL] [EOL] if not searched_perms : [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] all_perms = set ( Permission . objects . using ( using ) . filter ( content_type__in = ctypes ) . values_list ( [string] , [string] ) ) [EOL] [EOL] perms = [ Permission ( codename = codename , name = name , content_type = ct ) for ct , ( codename , name ) in searched_perms if ( ct . pk , codename ) not in all_perms ] [EOL] [EOL] Permission . objects . using ( using ) . bulk_create ( perms ) [EOL] [EOL] if verbosity >= [number] : [EOL] for perm in perms : [EOL] print ( [string] . format ( perm . codename ) ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from field_permissions . registry import field_permissions [EOL] [EOL] [EOL] class FieldPermissionsSerializerMixin : [EOL] [docstring] [EOL] [EOL] def modify_fields_by_field_permissions ( self ) : [EOL] if [string] not in self . context : [EOL] return [EOL] [EOL] model = self . Meta . model [EOL] [EOL] if not field_permissions . in_registry ( model ) : [EOL] return [EOL] [EOL] user = self . context [ [string] ] . user [EOL] field_names = list ( self . fields ) [EOL] excluded_field_names = field_permissions . get_exclude_fields_for ( model ) [EOL] [EOL] for field_name in field_names : [EOL] permission_check_field_name = field_name [EOL] [EOL] if hasattr ( self , [string] ) : [EOL] permission_check_field_name = self . override_permission_check_field_name ( field_name ) [EOL] [EOL] if permission_check_field_name in excluded_field_names : [EOL] continue [EOL] [EOL] if user . has_perm ( [string] . format ( model . _meta . app_label , model . _meta . model_name , permission_check_field_name , ) ) : [EOL] continue [EOL] [EOL] if user . has_perm ( [string] . format ( model . _meta . app_label , model . _meta . model_name , permission_check_field_name , ) ) : [EOL] self . fields [ field_name ] . read_only = True [EOL] else : [EOL] del self . fields [ field_name ] [EOL] [EOL] def to_representation ( self , instance ) : [EOL] self . modify_fields_by_field_permissions ( ) [EOL] [EOL] return super ( ) . to_representation ( instance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from collections import OrderedDict [EOL] [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class FieldPermissionsMetadataMixin : [EOL] [docstring] [EOL] [EOL] def get_serializer_info ( self , serializer ) : [EOL] [docstring] [EOL] if hasattr ( serializer , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] serializer = serializer . child [EOL] [EOL] [comment] [EOL] if hasattr ( serializer , [string] ) : [EOL] serializer . modify_fields_by_field_permissions ( ) [EOL] [EOL] return OrderedDict ( [ ( field_name , self . get_field_info ( field ) ) for field_name , field in serializer . fields . items ( ) if not isinstance ( field , serializers . HiddenField ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . db . models import ManyToOneRel [EOL] [EOL] [EOL] class FieldPermissionsAdminMixin : [EOL] [docstring] [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] from . registry import field_permissions [EOL] [EOL] if not field_permissions . in_registry ( self . model ) : [EOL] return self . readonly_fields [EOL] [EOL] result = list ( self . readonly_fields ) if self . readonly_fields else [ ] [EOL] [EOL] for field in field_permissions . get_model_fields ( self . model ) : [EOL] field_name = field . name [EOL] [EOL] [comment] [EOL] if isinstance ( field , ManyToOneRel ) : [EOL] continue [EOL] [EOL] if not request . user . has_perm ( [string] . format ( self . model . _meta . app_label , self . model . _meta . model_name , field_name ) ) : [EOL] continue [EOL] [EOL] if not request . user . has_perm ( [string] . format ( self . model . _meta . app_label , self . model . _meta . model_name , field_name ) ) : [EOL] result . append ( field_name ) [EOL] [EOL] return result [EOL] [EOL] def get_exclude ( self , request , obj = None ) : [EOL] from . registry import field_permissions [EOL] [EOL] if not field_permissions . in_registry ( self . model ) : [EOL] return self . exclude [EOL] [EOL] result = list ( self . exclude ) if self . exclude else [ ] [EOL] [EOL] for field in field_permissions . get_model_fields ( self . model ) : [EOL] field_name = field . name [EOL] [EOL] if request . user . has_perm ( [string] . format ( self . model . _meta . app_label , self . model . _meta . model_name , field_name ) ) : [EOL] continue [EOL] [EOL] if not request . user . has_perm ( [string] . format ( self . model . _meta . app_label , self . model . _meta . model_name , field_name ) ) : [EOL] result . append ( field_name ) [EOL] [EOL] return result [EOL] [EOL] def get_fields ( self , request , obj = None ) : [EOL] fields = super ( ) . get_fields ( request , obj ) [EOL] [EOL] if not self . model : [EOL] return fields [EOL] [EOL] field_names = list ( fields ) [EOL] [EOL] for field_name in field_names : [EOL] if not request . user . has_perm ( [string] . format ( self . model . _meta . app_label , self . model . _meta . model_name , field_name ) ) : [EOL] fields . remove ( field_name ) [EOL] [EOL] return fields [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0
from django . apps import AppConfig [EOL] from django . db . models . signals import post_migrate [EOL] [EOL] from . receivers import create_permissions [EOL] [EOL] [EOL] class FieldPermissionsConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] post_migrate . connect ( create_permissions , dispatch_uid = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] class FieldPermissionsViewsetMixin : [EOL] def get_serializer ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] serializer = super ( ) . get_serializer ( * args , ** kwargs ) [EOL] [EOL] if hasattr ( serializer , [string] ) : [EOL] serializer . modify_fields_by_field_permissions ( ) [EOL] [EOL] return serializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List , Any [EOL] import typing [EOL] import field_permissions [EOL] import pytest [EOL] [EOL] from field_permissions . tests . dummy_app . models import Dummy [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_in_registry ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] field_permissions . register ( Dummy ) [EOL] [EOL] tm = Dummy . objects . create ( field1 = [string] ) [EOL] assert field_permissions . in_registry ( tm ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_not_in_registry ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] [EOL] assert not field_permissions . in_registry ( Dummy ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_model_fields_all_fields ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] field_permissions . register ( Dummy ) [EOL] [EOL] model_field_names = [ field . name for field in field_permissions . get_model_fields ( Dummy ) ] [EOL] assert model_field_names == [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_model_fields_include_some_fields ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] field_permissions . register ( Dummy , include_fields = [ [string] , [string] ] ) [EOL] [EOL] model_field_names = [ field . name for field in field_permissions . get_model_fields ( Dummy ) ] [EOL] assert model_field_names == [ [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_model_fields_exclude_some_fields ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] field_permissions . register ( Dummy , exclude_fields = [ [string] , [string] ] ) [EOL] [EOL] model_field_names = [ field . name for field in field_permissions . get_model_fields ( Dummy ) ] [EOL] assert model_field_names == [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_field_permissions_for_model ( ) : [EOL] from field_permissions . registry import FieldPermissionsModelRegistry [EOL] [EOL] field_permissions = FieldPermissionsModelRegistry ( ) [EOL] field_permissions . register ( Dummy ) [EOL] [EOL] perms = field_permissions . get_field_permissions_for_model ( Dummy ) [EOL] perm_codenames = [ codename for ( codename , name ) in perms ] [EOL] [EOL] assert perm_codenames == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] import django [EOL] from django . conf import settings [EOL] [EOL] [EOL] def pytest_configure ( ) : [EOL] BASE_DIR = os . path . abspath ( os . path . dirname ( __file__ ) ) [comment] [EOL] [EOL] sys . path . append ( os . path . abspath ( os . path . join ( BASE_DIR , [string] ) ) ) [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE_CLASSES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] settings . configure ( SECRET_KEY = [string] , DEBUG = False , TEMPLATE_DEBUG = False , ALLOWED_HOSTS = [ ] , INSTALLED_APPS = INSTALLED_APPS , MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES , ROOT_URLCONF = [string] , DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } , LANGUAGE_CODE = [string] , TIME_ZONE = [string] , USE_I18N = True , USE_L10N = True , USE_TZ = True , STATIC_URL = [string] , ) [EOL] [EOL] django . setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] urlpatterns = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import field_permissions [EOL] from django . db import models [EOL] [EOL] [EOL] class DummySecondSub ( models . Model ) : [EOL] secondsubfield1 = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class Dummy ( models . Model ) : [EOL] field1 = models . CharField ( max_length = [number] ) [EOL] field2 = models . BooleanField ( default = False ) [EOL] field3 = models . BooleanField ( default = False ) [EOL] second_sub = models . ForeignKey ( DummySecondSub , verbose_name = [string] , null = True , on_delete = models . PROTECT ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class DummySub ( models . Model ) : [EOL] subfield1 = models . CharField ( max_length = [number] ) [EOL] dummy = models . ForeignKey ( Dummy , verbose_name = [string] , on_delete = models . PROTECT ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.DummySecondSub]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.Dummy]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.Dummy]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.Dummy]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.Dummy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.DummySub]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[field_permissions.tests.dummy_app.models.DummySub]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import batchrun [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class CommandType ( Enum ) : [EOL] EXECUTABLE = [string] [EOL] DJANGO_MANAGE = [string] [EOL] [EOL] class Labels : [EOL] EXECUTABLE = _ ( [string] ) [EOL] DJANGO_MANAGE = _ ( [string] ) [EOL] [EOL] [EOL] class LogEntryKind ( Enum ) : [EOL] STDOUT = [string] [EOL] STDERR = [string] [EOL] [EOL] class Labels : [EOL] [comment] [EOL] [comment] [EOL] STDOUT = [string] [EOL] STDERR = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[batchrun.enums.CommandType.Labels]$ 0 0 0 0 0 0 $typing.Type[batchrun.enums.CommandType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
import datetime [EOL] from datetime import timedelta [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] GRACE_PERIOD_LENGTH = timedelta ( minutes = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0
from typing import Optional , Type , Any [EOL] import typing [EOL] import django [EOL] import builtins [EOL] from datetime import datetime [EOL] from typing import Optional , Type [EOL] [EOL] from django . contrib import admin [EOL] from django . db . models import Model [EOL] from django . http import HttpRequest [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class ReadOnlyAdmin ( admin . ModelAdmin ) : [EOL] def has_add_permission ( self , request , obj = None ) : [EOL] return False [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] return False [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] return False [EOL] [EOL] [EOL] class PreciseTimeFormatter : [EOL] _format_string = [string] [EOL] [EOL] def __init__ ( self , model , field_name ) : [EOL] self . _model = model [EOL] self . _field_name = field_name [EOL] self . _field = model . _meta . get_field ( field_name ) [EOL] self . admin_order_field = field_name [EOL] [EOL] @ property def short_description ( self ) : [EOL] return str ( self . _field . verbose_name ) [EOL] [EOL] def __call__ ( self , obj ) : [EOL] value = getattr ( obj , self . _field_name ) [EOL] if value is None : [EOL] return value [EOL] assert isinstance ( value , datetime ) [EOL] return timezone . localtime ( value ) . strftime ( self . _format_string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $django.http.HttpRequest$ 0 $typing.Optional[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $django.http.HttpRequest$ 0 $typing.Optional[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $django.http.HttpRequest$ 0 $typing.Optional[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $typing.Type[django.db.models.Model]$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Type[django.db.models.Model]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Type[django.db.models.Model]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $django.db.models.Model$ 0 0 0 $typing.Any$ 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Optional , Match , Any , List , Iterator , Pattern , Iterable [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import re [EOL] from itertools import chain [EOL] from typing import Any , Iterable , Iterator , List [EOL] [EOL] _SPEC_PART_RX = [string] [EOL] [EOL] _SPECIFIER_RX = re . compile ( [string] + _SPEC_PART_RX + [string] + _SPEC_PART_RX + [string] , re . VERBOSE ) [EOL] [EOL] [EOL] class IntegerSetSpecifier : [EOL] def __init__ ( self , spec , min_value , max_value ) : [EOL] if not _SPECIFIER_RX . match ( spec ) : [EOL] raise ValueError ( [string] ) [EOL] if max_value < min_value : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . spec = spec [EOL] self . min_value = min_value [EOL] self . max_value = max_value [EOL] [EOL] parsed_ranges = _parse_spec_as_ranges ( spec , min_value , max_value ) [EOL] self . _ranges = _combine_ranges ( parsed_ranges ) [EOL] self . _separated = _range_limits_are_separate ( self . _ranges ) [EOL] self . _total_range = range ( min_value , max_value + [number] ) [EOL] [EOL] def is_total ( self ) : [EOL] if self . spec == [string] or self . _ranges == [ self . _total_range ] : [EOL] return True [EOL] elif self . _separated : [EOL] [comment] [EOL] [comment] [EOL] return False [EOL] return all ( ( x in self ) for x in self . _total_range ) [EOL] [EOL] def simplify ( self ) : [EOL] def _format_range ( rng ) : [EOL] return ( str ( rng . start ) [EOL] if rng . start + rng . step >= rng . stop [EOL] else [string] . format ( rng . start , rng . stop - [number] , [string] . format ( rng . step ) if rng . step != [number] else [string] , ) ) [EOL] [EOL] simplified_spec = ( [string] if self . is_total ( ) else [string] . join ( _format_range ( x ) for x in self . _ranges ) ) [EOL] return type ( self ) ( simplified_spec , self . min_value , self . max_value ) [EOL] [EOL] def __iter__ ( self ) : [EOL] if self . _separated : [EOL] return iter ( chain ( * self . _ranges ) ) [EOL] return self . _iter_by_contains ( ) [EOL] [EOL] def _iter_by_contains ( self ) : [EOL] min_start = min ( x . start for x in self . _ranges ) [EOL] max_stop = max ( x . stop for x in self . _ranges ) [EOL] for value in range ( min_start , max_stop ) : [EOL] if value in self : [EOL] yield value [EOL] [EOL] def __len__ ( self ) : [EOL] if self . _separated : [EOL] return sum ( len ( x ) for x in self . _ranges ) [EOL] return sum ( [number] for _ in self ) [EOL] [EOL] def __contains__ ( self , value ) : [EOL] return any ( value in x for x in self . _ranges ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return ( isinstance ( other , type ( self ) ) [EOL] and self . spec == other . spec [EOL] and self . min_value == other . min_value [EOL] and self . max_value == other . max_value ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( cls_name = type ( self ) . __name__ , spec = self . spec , min_value = self . min_value , max_value = self . max_value , ) [EOL] [EOL] [EOL] def _parse_spec_as_ranges ( spec , min_value , max_value ) : [EOL] return [ _parse_spec_part ( part , min_value , max_value ) for part in spec . split ( [string] ) ] [EOL] [EOL] [EOL] def _parse_spec_part ( part , min_value , max_value ) : [EOL] match = re . match ( [string] , part ) [EOL] if not match : [EOL] raise ValueError ( [string] . format ( part ) ) [EOL] ( start_str , stop_str , step_str ) = match . groups ( ) [EOL] step = int ( step_str ) if step_str else [number] [EOL] if start_str and stop_str : [EOL] ( start , stop ) = ( int ( start_str ) , int ( stop_str ) ) [EOL] if start > stop : [EOL] raise ValueError ( [string] ) [EOL] elif start_str : [EOL] start = stop = int ( start_str ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] start = ( ( min_value - [number] ) // step + [number] ) * step [EOL] stop = max_value [EOL] if start < min_value or stop > max_value : [EOL] raise ValueError ( [string] ) [EOL] return range ( start , stop + [number] , step ) [EOL] [EOL] [EOL] def _combine_ranges ( ranges ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] processed_ranges = sorted ( ( x if len ( x ) != [number] else range ( x . start , x . start + [number] , [number] ) for x in ranges if x ) , key = ( lambda x : ( x . step , x . start , x . stop ) ) , ) [EOL] [EOL] if not processed_ranges : [EOL] return [ ] [EOL] [EOL] result = [ ] [EOL] last = processed_ranges [ [number] ] [EOL] [EOL] for cur in processed_ranges [ [number] : ] : [EOL] [comment] [EOL] [comment] [EOL] last_enlarged = range ( last . start , last . stop + last . step , last . step ) [EOL] if cur . step == last . step and cur . start in last_enlarged : [EOL] last = range ( last . start , max ( last . stop , cur . stop ) , last . step ) [EOL] else : [EOL] if last : [EOL] result . append ( last ) [EOL] last = cur [EOL] [EOL] if last : [EOL] result . append ( last ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def _range_limits_are_separate ( ranges ) : [EOL] max_stop = [number] [EOL] for rng in sorted ( ranges , key = ( lambda x : ( x . start , - x . stop ) ) ) : [EOL] if rng . start < max_stop : [EOL] return False [EOL] max_stop = max ( rng . stop , max_stop ) [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[builtins.range]$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.range]$ 0 0 0 $typing.List[builtins.range]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.List[builtins.range]$ 0 0 0 0 $builtins.range$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"IntegerSetSpecifier"$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.range$ 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 $builtins.range$ 0 0 0 $builtins.range$ 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.range]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.range]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import models [EOL] import batchrun [EOL] import multiprocessing [EOL] import subprocess [EOL] import sys [EOL] [EOL] import daemon [EOL] [EOL] from . management . commands import batchrun_execute_job_run [EOL] from . models import Job , JobRun [EOL] from . utils import get_django_manage_py [EOL] [EOL] [EOL] def run_job ( job ) : [EOL] [docstring] [EOL] job_run = JobRun . objects . create ( job = job ) [EOL] launcher = JobRunLauncher ( job_run ) [EOL] launcher . start ( ) [EOL] launcher . join ( ) [EOL] return job_run [EOL] [EOL] [EOL] class JobRunLauncher ( multiprocessing . Process ) : [EOL] def __init__ ( self , job_run ) : [EOL] self . _manage_py = get_django_manage_py ( ) [EOL] self . job_run = job_run [EOL] super ( ) . __init__ ( ) [EOL] [EOL] def run ( self ) : [EOL] name = batchrun_execute_job_run . __name__ . rsplit ( [string] , [number] ) [ - [number] ] [EOL] command = [ sys . executable , self . _manage_py , name , str ( self . job_run . pk ) ] [EOL] with daemon . DaemonContext ( umask = [number] , detach_process = True ) : [EOL] subprocess . run ( command , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import NoReturn , Any [EOL] import typing [EOL] import os [EOL] import time [EOL] from typing import NoReturn [EOL] [EOL] from django . db import transaction [EOL] [EOL] from . _times import utc_now [EOL] from . job_launching import run_job [EOL] from . models import JobRunQueueItem [EOL] [EOL] POLL_INTERVAL = [number] [comment] [EOL] [EOL] [EOL] def run_scheduler_loop ( ) : [EOL] [comment] [EOL] JobRunQueueItem . objects . refresh ( ) [comment] [EOL] [EOL] [comment] [EOL] queue_items = JobRunQueueItem . objects . to_run ( ) . order_by ( [string] ) [comment] [EOL] [EOL] while True : [EOL] first_item = queue_items . first ( ) [EOL] if not first_item : [EOL] [comment] [EOL] time . sleep ( POLL_INTERVAL ) [EOL] continue [EOL] [EOL] secs_to_first = ( first_item . run_at - utc_now ( ) ) . total_seconds ( ) [EOL] [EOL] if secs_to_first > POLL_INTERVAL : [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( POLL_INTERVAL ) [EOL] continue [EOL] [EOL] time . sleep ( max ( secs_to_first , [number] ) ) [EOL] [EOL] with transaction . atomic ( ) : [EOL] locked_item = ( queue_items . filter ( pk = first_item . pk ) . select_for_update ( skip_locked = True ) . first ( ) ) [EOL] [EOL] if not locked_item : [EOL] [comment] [EOL] continue [EOL] [EOL] [comment] [EOL] locked_item . assigned_at = utc_now ( ) [EOL] locked_item . assignee_pid = os . getpid ( ) [EOL] locked_item . save ( update_fields = [ [string] , [string] ] ) [EOL] [EOL] run_job ( first_item . scheduled_job . job ) [EOL] [EOL] first_item . scheduled_job . update_run_queue ( ) [EOL] queue_items . remove_old_items ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.NoReturn$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import BinaryIO , Tuple , Any [EOL] import enums [EOL] import batchrun [EOL] import typing [EOL] import models [EOL] import subprocess [EOL] import builtins [EOL] import subprocess [EOL] import threading [EOL] from shutil import copyfileobj [EOL] from typing import BinaryIO , cast [EOL] [EOL] from django import db [EOL] [EOL] from . _times import utc_now [EOL] from . enums import LogEntryKind [EOL] from . models import JobRun , JobRunLogEntry [EOL] [EOL] [EOL] def execute_job_run ( job_run ) : [EOL] command = job_run . job . get_command_line ( ) [EOL] pipe = subprocess . Popen ( command , bufsize = [number] , stdin = subprocess . DEVNULL , stdout = subprocess . PIPE , stderr = subprocess . PIPE , ) [EOL] [EOL] job_run . pid = pipe . pid [EOL] job_run . save ( update_fields = [ [string] ] ) [EOL] [EOL] stdout_collector_thread = OutputCollectorThread ( job_run , LogEntryKind . STDOUT , cast ( BinaryIO , pipe . stdout ) ) [EOL] stderr_collector_thread = OutputCollectorThread ( job_run , LogEntryKind . STDERR , cast ( BinaryIO , pipe . stderr ) ) [EOL] stdout_collector_thread . start ( ) [EOL] stderr_collector_thread . start ( ) [EOL] [EOL] pipe . wait ( ) [EOL] [EOL] job_run . stopped_at = utc_now ( ) [EOL] job_run . exit_code = pipe . returncode [EOL] job_run . save ( update_fields = [ [string] , [string] ] ) [EOL] [EOL] stdout_collector_thread . join ( ) [EOL] stderr_collector_thread . join ( ) [EOL] [EOL] [EOL] class OutputCollectorThread ( threading . Thread ) : [EOL] def __init__ ( self , job_run , kind , stream ) : [EOL] self . log_writer = LogWriter ( job_run , kind ) [EOL] self . stream = stream [EOL] self . _chunk_size = [number] [comment] [EOL] super ( ) . __init__ ( ) [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] copyfileobj ( self . stream , self . log_writer , self . _chunk_size ) [EOL] finally : [EOL] [comment] [EOL] [comment] [EOL] db . connection . close ( ) [EOL] [EOL] [EOL] class LogWriter : [EOL] def __init__ ( self , job_run , kind ) : [EOL] self . job_run = job_run [EOL] self . kind = kind [EOL] self . coding = [string] [EOL] self . _line_number = [number] [EOL] self . _number_within_line = [number] [EOL] [EOL] def write ( self , data ) : [EOL] timestamp = utc_now ( ) [EOL] text = data . decode ( self . coding , errors = [string] ) [EOL] [EOL] [comment] [EOL] for line in text . splitlines ( keepends = True ) : [EOL] JobRunLogEntry . objects . create ( run = self . job_run , kind = self . kind . value , line_number = self . _line_number , number = self . _number_within_line , time = timestamp , text = line , ) [EOL] if line . endswith ( _line_end_characters ) : [EOL] self . _line_number += [number] [EOL] self . _number_within_line = [number] [EOL] else : [EOL] self . _number_within_line += [number] [EOL] [EOL] return len ( data ) [EOL] [EOL] [EOL] _line_end_characters = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $models.JobRun$ 0 $enums.LogEntryKind$ 0 $typing.BinaryIO$ 0 0 0 0 0 $batchrun.job_running.LogWriter$ 0 0 0 $models.JobRun$ 0 $enums.LogEntryKind$ 0 0 0 0 $typing.BinaryIO$ 0 $typing.BinaryIO$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $batchrun.models.JobRun$ 0 $batchrun.enums.LogEntryKind$ 0 0 0 0 0 $batchrun.models.JobRun$ 0 $batchrun.models.JobRun$ 0 0 0 $batchrun.enums.LogEntryKind$ 0 $batchrun.enums.LogEntryKind$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bytes$ 0 0 0 $batchrun._times.AwareDateTime$ 0 0 0 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $batchrun._times.AwareDateTime$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import _importlib_modulespec [EOL] import os [EOL] import sys [EOL] [EOL] from django . conf import settings [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] [EOL] [EOL] def get_django_manage_py ( max_depth = [number] ) : [EOL] manage_py_path = getattr ( settings , [string] , None ) [EOL] if manage_py_path : [EOL] if not isinstance ( manage_py_path , str ) : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] return manage_py_path [EOL] [EOL] [comment] [EOL] settings_mod = sys . modules [ settings . SETTINGS_MODULE ] [EOL] directory = os . path . dirname ( settings_mod . __file__ ) [EOL] tries_left = max_depth [EOL] while directory != [string] and tries_left : [EOL] candidate = os . path . join ( directory , [string] ) [EOL] if os . path . exists ( candidate ) : [EOL] return candidate [EOL] tries_left -= [number] [EOL] directory = os . path . dirname ( directory ) [EOL] raise EnvironmentError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union , List , Tuple [EOL] import typing [EOL] import intset [EOL] import builtins [EOL] from typing import Any , Dict , Tuple [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from . intset import IntegerSetSpecifier [EOL] [EOL] [EOL] class IntegerSetSpecifierField ( models . CharField ) : [comment] [EOL] def __init__ ( self , * , value_range , default = [string] , ** kwargs ) : [EOL] assert isinstance ( value_range , tuple ) [EOL] assert len ( value_range ) == [number] [EOL] assert all ( isinstance ( x , int ) for x in value_range ) [EOL] self . value_range = value_range [EOL] kwargs . setdefault ( [string] , [number] ) [EOL] kwargs [ [string] ] = list ( kwargs . get ( [string] , [ ] ) ) + [ self . _validate_spec_syntax ] [EOL] super ( ) . __init__ ( default = default , ** kwargs ) [EOL] [EOL] def deconstruct ( self ) : [EOL] ( name , path , args , kwargs ) = super ( ) . deconstruct ( ) [EOL] [EOL] kwargs [ [string] ] = self . value_range [EOL] kwargs [ [string] ] = [ x for x in kwargs . get ( [string] , [ ] ) if x != self . _validate_spec_syntax ] [EOL] [EOL] default_kwargs = [ ( [string] , [number] ) , ( [string] , [string] ) , ( [string] , [ ] ) ] [EOL] for ( name , default ) in default_kwargs : [EOL] if kwargs . get ( name ) == default : [EOL] del kwargs [ name ] [EOL] [EOL] return ( name , path , args , kwargs ) [EOL] [EOL] def to_intset ( self , value ) : [EOL] return IntegerSetSpecifier ( str ( value ) , * self . value_range ) [EOL] [EOL] def _validate_spec_syntax ( self , value ) : [EOL] try : [EOL] self . to_intset ( value ) [EOL] except ValueError : [EOL] raise ValidationError ( _ ( [string] ) , code = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,typing.Tuple[typing.Any],typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,typing.List[typing.Any]],typing.Tuple[builtins.str,typing.Union[builtins.int,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,typing.List[typing.Any]],typing.Tuple[builtins.str,typing.Union[builtins.int,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $intset.IntegerSetSpecifier$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import batchrun [EOL] from django . contrib import admin [EOL] [EOL] from . admin_utils import PreciseTimeFormatter , ReadOnlyAdmin [EOL] from . models import ( Command , Job , JobRun , JobRunLogEntry , JobRunQueueItem , ScheduledJob , Timezone , ) [EOL] [EOL] [EOL] @ admin . register ( Command ) class CommandAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] ] [EOL] exclude = [ [string] ] [EOL] [EOL] [EOL] @ admin . register ( Job ) class JobAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ admin . register ( JobRun ) class JobRunAdmin ( ReadOnlyAdmin ) : [EOL] date_hierarchy = [string] [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] readonly_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] exclude = [ [string] ] [EOL] [EOL] started_at_p = PreciseTimeFormatter ( JobRun , [string] ) [EOL] stopped_at_p = PreciseTimeFormatter ( JobRun , [string] ) [EOL] [EOL] [EOL] @ admin . register ( JobRunLogEntry ) class JobRunLogEntryAdmin ( ReadOnlyAdmin ) : [EOL] date_hierarchy = [string] [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] , [string] ] [EOL] readonly_fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] time_p = PreciseTimeFormatter ( JobRunLogEntry , [string] ) [EOL] [EOL] [EOL] @ admin . register ( JobRunQueueItem ) class JobRunQueueItemAdmin ( ReadOnlyAdmin ) : [EOL] date_hierarchy = [string] [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ admin . register ( ScheduledJob ) class ScheduledJobAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] list_filter = [ [string] ] [EOL] [EOL] [EOL] @ admin . register ( Timezone ) class TimezoneAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $batchrun.admin_utils.PreciseTimeFormatter$ 0 0 0 0 0 0 0 0 $batchrun.admin_utils.PreciseTimeFormatter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $batchrun.admin_utils.PreciseTimeFormatter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import batchrun [EOL] from typing import Any [EOL] [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from safedelete . models import SafeDeleteModel [EOL] [EOL] [EOL] class CleansOnSave ( models . Model ) : [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . clean ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True , verbose_name = _ ( [string] ) ) [EOL] modified_at = models . DateTimeField ( auto_now = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class TimeStampedSafeDeleteModel ( TimeStampedModel , SafeDeleteModel ) : [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.model_mixins.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.model_mixins.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
	0
from typing import Type , List [EOL] import typing [EOL] import batchrun [EOL] from enumfields . drf . serializers import EnumSupportSerializerMixin [EOL] from rest_framework import serializers , viewsets [comment] [EOL] [EOL] from . . import models [EOL] [EOL] [EOL] class Serializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] pass [EOL] [EOL] [EOL] class JobSerializer ( Serializer ) : [EOL] class Meta : [EOL] model = models . Job [EOL] fields = [string] [EOL] [EOL] [EOL] class JobViewSet ( viewsets . ReadOnlyModelViewSet ) : [comment] [EOL] queryset = models . Job . objects . all ( ) [EOL] serializer_class = JobSerializer [EOL] [EOL] [EOL] class JobRunSerializer ( Serializer ) : [EOL] class Meta : [EOL] model = models . JobRun [EOL] fields = [string] [EOL] [EOL] [EOL] class JobRunViewSet ( viewsets . ReadOnlyModelViewSet ) : [comment] [EOL] queryset = models . JobRun . objects . all ( ) [EOL] serializer_class = JobRunSerializer [EOL] filterset_fields = [ [string] ] [EOL] [EOL] [EOL] class JobRunLogEntrySerializer ( Serializer ) : [EOL] class Meta : [EOL] model = models . JobRunLogEntry [EOL] fields = [string] [EOL] [EOL] [EOL] class JobRunLogEntryViewSet ( viewsets . ReadOnlyModelViewSet ) : [comment] [EOL] queryset = models . JobRunLogEntry . objects . all ( ) [EOL] serializer_class = JobRunLogEntrySerializer [EOL] filterset_fields = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobRunViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobRunSerializer]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobRunLogEntryViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.api.viewsets.JobRunLogEntrySerializer]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from rest_framework . routers import DefaultRouter [comment] [EOL] [EOL] from . import viewsets [EOL] [EOL] router = DefaultRouter ( ) [EOL] [EOL] router . register ( [string] , viewsets . JobViewSet ) [EOL] router . register ( [string] , viewsets . JobRunViewSet ) [EOL] router . register ( [string] , viewsets . JobRunLogEntryViewSet ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0
from typing import Literal , Any , Union , List , Iterator , Tuple [EOL] import typing [EOL] import batchrun [EOL] import typing_extensions [EOL] import time [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] [EOL] from . . intset import IntegerSetSpecifier , _parse_spec_part [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) def test_can_be_constructed_from_valid_spec ( spec ) : [EOL] IntegerSetSpecifier ( spec , [number] , [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) def test_invalid_spec_raises ( spec ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] IntegerSetSpecifier ( spec , [number] , [number] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] def test_can_be_constructed_with_min_equals_max ( ) : [EOL] IntegerSetSpecifier ( [string] , [number] , [number] ) [EOL] [EOL] [EOL] def test_min_larger_than_max_raises ( ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] IntegerSetSpecifier ( [string] , [number] , [number] ) [EOL] assert str ( excinfo . value ) == ( [string] ) [EOL] [EOL] [EOL] def test_parse_spec_part_raises_on_invalid_spec_part ( ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] _parse_spec_part ( [string] , [number] , [number] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_invalid_range_in_spec_raises ( spec ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] IntegerSetSpecifier ( spec , [number] , [number] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] ] ) def test_outside_values_in_spec_raises ( spec ) : [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] IntegerSetSpecifier ( spec , [number] , [number] ) [EOL] assert str ( excinfo . value ) == [string] [EOL] [EOL] [EOL] def test_parameters_available_as_properties ( ) : [EOL] instance = IntegerSetSpecifier ( [string] , [number] , [number] ) [EOL] [EOL] assert instance . min_value == [number] [EOL] assert instance . max_value == [number] [EOL] assert instance . spec == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , True ) , ] , ) def test_is_total ( spec , minval , maxval , expected ) : [EOL] instance = IntegerSetSpecifier ( spec , minval , maxval ) [EOL] [EOL] result = instance . is_total ( ) [EOL] [EOL] assert result == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_simplify ( orig_spec , simplified_spec ) : [EOL] orig = IntegerSetSpecifier ( orig_spec , [number] , [number] ) [EOL] [EOL] simplified = orig . simplify ( ) [EOL] [EOL] assert simplified . spec == simplified_spec [EOL] [EOL] [EOL] SPECS_WITH_EXPECTED_VALUES = [ ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) , ( [string] , [number] , [number] , [ ] ) , ( [string] , [number] , [number] , [ [number] , [number] , [number] ] ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , SPECS_WITH_EXPECTED_VALUES ) def test_iter_returns_correct_values ( spec , minval , maxval , expected_values ) : [EOL] instance = IntegerSetSpecifier ( spec , minval , maxval ) [EOL] [EOL] result = list ( instance ) [EOL] [EOL] assert result == expected_values [EOL] [EOL] [EOL] def test_iter_can_do_first_items_of_large_ranges_fast ( ) : [EOL] start_time = time . process_time ( ) [EOL] instance = IntegerSetSpecifier ( [string] , [number] , [number] ** [number] ) [EOL] iterator = iter ( instance ) [EOL] first_value = next ( iterator ) [EOL] second_value = next ( iterator ) [EOL] consumed_cpu_time = time . process_time ( ) - start_time [EOL] [EOL] assert consumed_cpu_time <= [number] [comment] [EOL] assert first_value == [number] [EOL] assert second_value == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , SPECS_WITH_EXPECTED_VALUES ) def test_len ( spec , minval , maxval , expected_values ) : [EOL] instance = IntegerSetSpecifier ( spec , minval , maxval ) [EOL] expected_len = len ( expected_values ) [EOL] [EOL] result = len ( instance ) [EOL] [EOL] assert result == expected_len [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , SPECS_WITH_EXPECTED_VALUES ) def test_bool ( spec , minval , maxval , expected_values ) : [EOL] [docstring] [EOL] instance = IntegerSetSpecifier ( spec , minval , maxval ) [EOL] expected_bool = True if expected_values else False [EOL] [EOL] result = bool ( instance ) [EOL] [EOL] assert result == expected_bool [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , SPECS_WITH_EXPECTED_VALUES ) def test_contains_works_as_expected ( spec , minval , maxval , expected_values ) : [EOL] instance = IntegerSetSpecifier ( spec , minval , maxval ) [EOL] [EOL] for value in range ( minval , maxval + [number] ) : [EOL] if value in expected_values : [EOL] assert value in instance [EOL] else : [EOL] assert value not in instance [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( None , False ) , ( - [number] , False ) , ( [number] , False ) , ( [number] , False ) , ( [string] , False ) , ( [string] , False ) , ( [number] , True ) , ( [number] , True ) , ( [number] + [number] , True ) , ( Decimal ( [number] ) , True ) , ( Decimal ( [string] ) , True ) , ( False , True ) , ( True , True ) , ] , ) def test_contains_works_with_non_integer_values ( value , expected ) : [EOL] instance = IntegerSetSpecifier ( [string] , [number] , [number] ) [EOL] [EOL] result = value in instance [EOL] [EOL] assert result is expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] , [number] , [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ( [string] , [number] , [number] , [string] , [number] , [number] , True ) , ( [string] , [number] , [number] , [string] , [number] , [number] , False ) , ] , ) def test_eq ( a_spec , a_min , a_max , b_spec , b_min , b_max , expected ) : [EOL] a = IntegerSetSpecifier ( a_spec , a_min , a_max ) [EOL] b = IntegerSetSpecifier ( b_spec , b_min , b_max ) [EOL] [EOL] result = a == b [EOL] [EOL] assert result is expected [EOL] [EOL] [EOL] def test_repr ( ) : [EOL] instance = IntegerSetSpecifier ( [string] , [number] , [number] ) [EOL] [EOL] assert repr ( instance ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[typing.Any]],typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[typing.Any]],typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[typing.Any]],typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[typing.Any]],typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[typing.Any]],typing.Tuple[builtins.str,builtins.int,builtins.int,typing.List[builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union , List , Iterator [EOL] import batchrun [EOL] import typing [EOL] import datetime [EOL] import scheduling [EOL] import builtins [EOL] from datetime import timedelta [EOL] [EOL] import pytest [EOL] from dateutil . parser import parse as parse_datetime [EOL] [EOL] from . . scheduling import RecurrenceRule , get_next_events [EOL] [EOL] [EOL] def rr ( time_spec , weekdays = [string] , tz = [string] ) : [EOL] [docstring] [EOL] spec_parts = time_spec . split ( ) [EOL] if len ( spec_parts ) == [number] : [EOL] years = spec_parts [ [number] ] [EOL] spec_parts = spec_parts [ [number] : ] [EOL] else : [EOL] years = [string] [EOL] ( months , days_of_month , hours , minutes ) = spec_parts [EOL] [EOL] return RecurrenceRule . create ( tz , years , months , days_of_month , weekdays = weekdays , hours = hours , minutes = minutes , ) [EOL] [EOL] [EOL] GET_NEXT_EVENTS_CASES = { [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] , weekdays = [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] , tz = [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , [string] : { [string] : rr ( [string] , tz = [string] ) , [string] : parse_datetime ( [string] ) , [string] : [ [string] , [string] , [string] , [string] , ] , } , } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , GET_NEXT_EVENTS_CASES . keys ( ) ) def test_get_next_events ( case ) : [EOL] data = GET_NEXT_EVENTS_CASES [ case ] [EOL] [EOL] result = list ( get_next_events ( data [ [string] ] , data [ [string] ] ) ) [EOL] [EOL] assert [ str ( x ) for x in result ] == data [ [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ] , ) def test_get_next_events_count ( rule , expected_count ) : [EOL] start = parse_datetime ( [string] ) [EOL] [EOL] result = list ( get_next_events ( rr ( rule ) , start ) ) [EOL] [EOL] assert len ( result ) == expected_count [EOL] [EOL] [EOL] def test_get_next_events_iterating ( ) : [EOL] start = parse_datetime ( [string] ) [EOL] [EOL] iterator = iter ( get_next_events ( rr ( [string] ) , start ) ) [EOL] [EOL] assert next ( iterator ) == start + timedelta ( days = [number] , hours = [number] , minutes = [number] ) [EOL] assert next ( iterator ) == start + timedelta ( days = [number] , hours = [number] , minutes = [number] ) [EOL] assert next ( iterator ) == start + timedelta ( days = [number] , hours = [number] , minutes = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $scheduling.RecurrenceRule$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],batchrun.scheduling.RecurrenceRule,datetime.datetime]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],batchrun.scheduling.RecurrenceRule,datetime.datetime]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],batchrun.scheduling.RecurrenceRule,datetime.datetime]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] from typing import Any [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from . . . job_running import execute_job_run [EOL] from . . . models import JobRun [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] parser . add_argument ( [string] , type = int ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] job_run_id = options . get ( [string] ) [EOL] job_run = JobRun . objects . get ( pk = job_run_id ) [comment] [EOL] execute_job_run ( job_run ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] from typing import Any [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from . . . scheduler import run_scheduler_loop [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] run_scheduler_loop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] from typing import Any [EOL] [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from . . . models import JobRun , JobRunLogEntry [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] parser . add_argument ( [string] , type = int , nargs = [string] , default = [number] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] retain_n_days = options [ [string] ] [EOL] [EOL] latest_run = JobRun . objects . last ( ) [EOL] if not latest_run : [EOL] self . stdout . write ( [string] ) [EOL] return [EOL] [EOL] retain_from = latest_run . started_at - relativedelta ( days = retain_n_days ) [EOL] retain_from = retain_from . replace ( hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] runs_before_cutoff = JobRun . objects . filter ( started_at__lt = retain_from ) [EOL] self . stdout . write ( [string] . format ( latest_run . started_at , retain_from , runs_before_cutoff . count ( ) , JobRun . objects . count ( ) , ) ) [EOL] log_entries_to_delete = JobRunLogEntry . objects . filter ( run__in = runs_before_cutoff ) [EOL] self . stdout . write ( [string] . format ( log_entries_to_delete . count ( ) , JobRunLogEntry . objects . count ( ) ) ) [EOL] log_entries_to_delete . delete ( ) [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Set , Any [EOL] import typing [EOL] import users [EOL] from django . contrib import auth [EOL] from django . contrib . auth . models import Permission [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] [EOL] class UsersPermissions ( APIView ) : [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None , contract_id = None , file_id = None ) : [EOL] if request . user . is_superuser : [EOL] permissions = Permission . objects . all ( ) [EOL] else : [EOL] permissions = set ( ) [EOL] for backend in auth . get_backends ( ) : [EOL] if hasattr ( backend , [string] ) : [EOL] permissions . update ( backend . _get_user_permissions ( request . user ) ) [EOL] permissions . update ( backend . _get_group_permissions ( request . user ) ) [EOL] [EOL] groups = [ g . name for g in request . user . groups . all ( ) ] [EOL] [EOL] return Response ( { [string] : groups , [string] : [ { [string] : p . name , [string] : p . codename } for p in permissions ] , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import users [EOL] from django . contrib import admin [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . admin import UserAdmin as DjangoUserAdmin [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserAdmin ( DjangoUserAdmin ) : [EOL] fieldsets = DjangoUserAdmin . fieldsets + ( ( None , { [string] : ( [string] , [string] ) } ) , ) [EOL] [EOL] [EOL] admin . site . register ( User , UserAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.admin.UserAdmin]$ 0 0 0 $typing.Type[users.admin.UserAdmin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
import builtins [EOL] from typing import Type , Tuple [EOL] import typing [EOL] import users [EOL] from rest_framework import filters , viewsets [EOL] [EOL] from . models import User [EOL] from . serializers import UserSerializer [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] filter_backends = ( filters . SearchFilter , ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from helusers . models import AbstractUser [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] recursive_get_related_skip_relations = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , IO , Any [EOL] import paramiko [EOL] import laske_export [EOL] import leasing [EOL] import typing [EOL] import logging [EOL] import json [EOL] import logging [EOL] import os [EOL] import tempfile [EOL] [EOL] import paramiko [EOL] import pysftp [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . utils import timezone [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from paramiko . py3compat import decodebytes [EOL] [EOL] from laske_export . document . invoice_sales_order_adapter import InvoiceSalesOrderAdapter [EOL] from laske_export . document . sales_order import SalesOrder , SalesOrderContainer [EOL] from laske_export . enums import LaskeExportLogInvoiceStatus [EOL] from laske_export . models import LaskeExportLog , LaskeExportLogInvoiceItem [EOL] from leasing . enums import InvoiceType [EOL] from leasing . models import Invoice , ReceivableType [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def set_constant_laske_values ( sales_order ) : [EOL] for key , val in settings . LASKE_VALUES . items ( ) : [EOL] setattr ( sales_order , key , val ) [EOL] [EOL] [EOL] class LaskeExporterException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class LaskeExporter : [EOL] def __init__ ( self ) : [EOL] self . message_output = None [EOL] self . _check_export_directory ( ) [EOL] self . _check_settings ( ) [EOL] [EOL] def _check_export_directory ( self ) : [EOL] if not os . path . isdir ( settings . LASKE_EXPORT_ROOT ) : [EOL] raise LaskeExporterException ( _ ( [string] ) . format ( settings . LASKE_EXPORT_ROOT ) ) [EOL] [EOL] try : [EOL] fp = tempfile . TemporaryFile ( dir = settings . LASKE_EXPORT_ROOT ) [EOL] fp . close ( ) [EOL] except PermissionError : [EOL] raise LaskeExporterException ( _ ( [string] ) . format ( settings . LASKE_EXPORT_ROOT ) ) [EOL] [EOL] def _check_settings ( self ) : [EOL] if ( not hasattr ( settings , [string] ) or [string] not in settings . LASKE_SERVERS or not settings . LASKE_SERVERS . get ( [string] ) or not settings . LASKE_SERVERS [ [string] ] . get ( [string] ) or not settings . LASKE_SERVERS [ [string] ] . get ( [string] ) or not settings . LASKE_SERVERS [ [string] ] . get ( [string] ) ) : [EOL] raise LaskeExporterException ( _ ( [string] ) ) [EOL] [EOL] def save_to_file ( self , xml_string , filename ) : [EOL] full_path = os . path . join ( settings . LASKE_EXPORT_ROOT , filename ) [EOL] [EOL] with open ( full_path , [string] ) as fp : [EOL] fp . write ( xml_string ) [EOL] [EOL] def send ( self , filename ) : [EOL] [comment] [EOL] if settings . LASKE_SERVERS [ [string] ] [ [string] ] == [string] : [EOL] key = paramiko . ed25519key . Ed25519Key ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] elif [string] in settings . LASKE_SERVERS [ [string] ] [ [string] ] : [EOL] key = paramiko . ecdsakey . ECDSAKey ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] else : [EOL] key = paramiko . rsakey . RSAKey ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] [EOL] hostkeys = paramiko . hostkeys . HostKeys ( ) [EOL] hostkeys . add ( settings . LASKE_SERVERS [ [string] ] [ [string] ] , settings . LASKE_SERVERS [ [string] ] [ [string] ] , key , ) [EOL] [EOL] cnopts = pysftp . CnOpts ( ) [EOL] cnopts . hostkeys = hostkeys [EOL] [comment] [EOL] [comment] [EOL] [EOL] with pysftp . Connection ( settings . LASKE_SERVERS [ [string] ] [ [string] ] , port = settings . LASKE_SERVERS [ [string] ] [ [string] ] , username = settings . LASKE_SERVERS [ [string] ] [ [string] ] , password = settings . LASKE_SERVERS [ [string] ] [ [string] ] , cnopts = cnopts , ) as sftp : [EOL] with sftp . cd ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) : [EOL] sftp . put ( os . path . join ( settings . LASKE_EXPORT_ROOT , filename ) ) [EOL] [EOL] def write_to_output ( self , message ) : [EOL] if not self . message_output : [EOL] return [EOL] [EOL] self . message_output . write ( message ) [EOL] [EOL] def export_invoices ( self , invoices ) : [EOL] [docstring] [EOL] if isinstance ( invoices , Invoice ) : [EOL] invoices = [ invoices ] [EOL] [EOL] [comment] [EOL] receivable_type_rent = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type_collateral = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] now = timezone . now ( ) [EOL] laske_export_log_entry = LaskeExportLog . objects . create ( started_at = now ) [EOL] [EOL] sales_orders = [ ] [EOL] log_invoices = [ ] [EOL] invoice_count = [number] [EOL] [EOL] self . write_to_output ( [string] . format ( len ( invoices ) ) ) [EOL] [EOL] for invoice in invoices : [EOL] invoice_log_item = LaskeExportLogInvoiceItem ( invoice = invoice , laskeexportlog = laske_export_log_entry ) [EOL] log_invoices . append ( invoice_log_item ) [EOL] [EOL] try : [EOL] self . write_to_output ( [string] . format ( invoice . id ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if invoice . type == InvoiceType . CREDIT_NOTE and ( not invoice . credited_invoice or not invoice . credited_invoice . sent_to_sap_at ) : [EOL] if invoice . credited_invoice : [EOL] self . write_to_output ( [string] [string] . format ( invoice . id , invoice . credited_invoice . id ) ) [EOL] else : [EOL] self . write_to_output ( [string] . format ( invoice . id ) ) [EOL] [EOL] continue [EOL] [EOL] if not invoice . invoicing_date : [EOL] invoice . invoicing_date = now . date ( ) [EOL] invoice . save ( ) [EOL] [EOL] sales_order = SalesOrder ( ) [EOL] set_constant_laske_values ( sales_order ) [EOL] [EOL] adapter = InvoiceSalesOrderAdapter ( invoice = invoice , sales_order = sales_order , receivable_type_rent = receivable_type_rent , receivable_type_collateral = receivable_type_collateral , ) [EOL] adapter . set_values ( ) [EOL] [EOL] sales_order . validate ( ) [EOL] [EOL] sales_orders . append ( sales_order ) [EOL] [EOL] invoice_count += [number] [EOL] [EOL] self . write_to_output ( [string] . format ( invoice . id , invoice . number ) ) [EOL] [EOL] invoice_log_item . status = LaskeExportLogInvoiceStatus . SENT [EOL] except ValidationError as err : [EOL] self . write_to_output ( [string] . format ( invoice . number , invoice . id , [string] . join ( err . messages ) ) ) [EOL] logger . warning ( err , exc_info = True ) [EOL] invoice_log_item . status = LaskeExportLogInvoiceStatus . FAILED [EOL] invoice_log_item . information = json . dumps ( err . message_dict ) [EOL] finally : [EOL] invoice_log_item . save ( ) [EOL] [EOL] if invoice_count > [number] : [EOL] self . write_to_output ( [string] . format ( invoice_count ) ) [EOL] [EOL] sales_order_container = SalesOrderContainer ( ) [EOL] sales_order_container . sales_orders = sales_orders [EOL] [EOL] export_filename = [string] . format ( settings . LASKE_VALUES [ [string] ] , laske_export_log_entry . id ) [EOL] [EOL] self . write_to_output ( [string] . format ( export_filename ) ) [EOL] [EOL] xml_string = sales_order_container . to_xml_string ( ) [EOL] [EOL] self . save_to_file ( xml_string , export_filename ) [EOL] [EOL] self . write_to_output ( [string] ) [EOL] [EOL] self . send ( export_filename ) [EOL] [EOL] self . write_to_output ( [string] ) [EOL] [EOL] Invoice . objects . filter ( id__in = [ o . id for o in invoices ] ) . update ( sent_to_sap_at = now ) [EOL] [EOL] [comment] [EOL] laske_export_log_entry . ended_at = timezone . now ( ) [EOL] laske_export_log_entry . is_finished = True [EOL] laske_export_log_entry . save ( ) [EOL] [EOL] return laske_export_log_entry [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 0 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 0 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 0 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 $laske_export.document.invoice_sales_order_adapter.InvoiceSalesOrderAdapter$ 0 0 0 0 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 $laske_export.document.sales_order.SalesOrder$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $laske_export.document.invoice_sales_order_adapter.InvoiceSalesOrderAdapter$ 0 0 0 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 $laske_export.document.sales_order.SalesOrder$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.models.LaskeExportLogInvoiceItem$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $laske_export.document.sales_order.SalesOrderContainer$ 0 0 0 0 0 $laske_export.document.sales_order.SalesOrderContainer$ 0 $laske_export.document.sales_order.SalesOrder$ 0 $laske_export.document.sales_order.SalesOrder$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $laske_export.document.sales_order.SalesOrderContainer$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[leasing.models.invoice.Invoice]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LaskeExportConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , List [EOL] import typing [EOL] import laske_export [EOL] from auditlog . registry import auditlog [EOL] from django . db import models [EOL] from django . utils . translation import pgettext_lazy [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import EnumField [EOL] [EOL] from laske_export . enums import LaskeExportLogInvoiceStatus [EOL] from leasing . models import Invoice [EOL] from leasing . models . invoice import InvoicePayment [EOL] from leasing . models . mixins import TimeStampedSafeDeleteModel [EOL] [EOL] [EOL] class LaskeExportLog ( TimeStampedSafeDeleteModel ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] started_at = models . DateTimeField ( verbose_name = _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] ended_at = models . DateTimeField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] [EOL] [comment] [EOL] is_finished = models . BooleanField ( verbose_name = _ ( [string] ) , default = False ) [EOL] [EOL] invoices = models . ManyToManyField ( Invoice , through = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class LaskeExportLogInvoiceItem ( models . Model ) : [EOL] invoice = models . ForeignKey ( Invoice , on_delete = models . CASCADE ) [EOL] laskeexportlog = models . ForeignKey ( LaskeExportLog , on_delete = models . CASCADE ) [EOL] [EOL] [comment] [EOL] status = EnumField ( LaskeExportLogInvoiceStatus , null = True , blank = True , max_length = [number] , verbose_name = _ ( [string] ) , ) [EOL] [EOL] [comment] [EOL] information = models . TextField ( blank = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] [EOL] class LaskePaymentsLog ( TimeStampedSafeDeleteModel ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] filename = models . CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] started_at = models . DateTimeField ( verbose_name = _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] ended_at = models . DateTimeField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] [EOL] [comment] [EOL] is_finished = models . BooleanField ( verbose_name = _ ( [string] ) , default = False ) [EOL] [EOL] payments = models . ManyToManyField ( InvoicePayment ) [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] auditlog . register ( LaskeExportLog ) [EOL] auditlog . register ( LaskePaymentsLog ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog.Meta]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLogInvoiceItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLogInvoiceItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLogInvoiceItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskeExportLogInvoiceItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[laske_export.models.LaskePaymentsLog.Meta]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import laske_export [EOL] from django . utils . translation import pgettext_lazy [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class LaskeExportLogInvoiceStatus ( Enum ) : [EOL] [docstring] [EOL] [EOL] SENT = [string] [EOL] FAILED = [string] [EOL] [EOL] class Labels : [EOL] SENT = pgettext_lazy ( [string] , [string] ) [EOL] FAILED = pgettext_lazy ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[laske_export.enums.LaskeExportLogInvoiceStatus.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[laske_export.enums.LaskeExportLogInvoiceStatus.Labels]$ 0 0 0 0 0 0 0 0
	0
from typing import List , IO , Any [EOL] import paramiko [EOL] import decimal [EOL] import ftplib [EOL] import pathlib [EOL] import typing [EOL] import datetime [EOL] import io [EOL] import datetime [EOL] import glob [EOL] import os [EOL] import sys [EOL] import tempfile [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] from pathlib import Path [EOL] [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand [EOL] from django . utils import timezone [EOL] [EOL] from laske_export . models import LaskePaymentsLog [EOL] from leasing . models import Invoice , Vat [EOL] from leasing . models . invoice import InvoicePayment [EOL] [EOL] [EOL] def get_import_dir ( ) : [EOL] return os . path . join ( settings . LASKE_EXPORT_ROOT , [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def download_payments_sftp ( self ) : [EOL] import paramiko [EOL] import pysftp [EOL] from paramiko import SSHException [EOL] from paramiko . py3compat import decodebytes [EOL] [EOL] try : [EOL] [comment] [EOL] if settings . LASKE_SERVERS [ [string] ] [ [string] ] == [string] : [EOL] key = paramiko . ed25519key . Ed25519Key ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] elif [string] in settings . LASKE_SERVERS [ [string] ] [ [string] ] : [EOL] key = paramiko . ecdsakey . ECDSAKey ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] else : [EOL] key = paramiko . rsakey . RSAKey ( data = decodebytes ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) ) [EOL] [EOL] hostkeys = paramiko . hostkeys . HostKeys ( ) [EOL] hostkeys . add ( settings . LASKE_SERVERS [ [string] ] [ [string] ] , settings . LASKE_SERVERS [ [string] ] [ [string] ] , key , ) [EOL] [EOL] cnopts = pysftp . CnOpts ( ) [EOL] cnopts . hostkeys = hostkeys [EOL] [comment] [EOL] [comment] [EOL] [EOL] with pysftp . Connection ( settings . LASKE_SERVERS [ [string] ] [ [string] ] , port = settings . LASKE_SERVERS [ [string] ] [ [string] ] , username = settings . LASKE_SERVERS [ [string] ] [ [string] ] , password = settings . LASKE_SERVERS [ [string] ] [ [string] ] , cnopts = cnopts , ) as sftp : [EOL] sftp . get_d ( settings . LASKE_SERVERS [ [string] ] [ [string] ] , get_import_dir ( ) , preserve_mtime = True , ) [EOL] except SSHException as e : [EOL] self . stdout . write ( [string] . format ( e ) ) [EOL] [EOL] def download_payments_ftp ( self ) : [EOL] from ftplib import FTP [EOL] [EOL] try : [EOL] ftp = FTP ( ) [EOL] ftp . connect ( host = settings . LASKE_SERVERS [ [string] ] [ [string] ] , port = settings . LASKE_SERVERS [ [string] ] [ [string] ] , ) [EOL] ftp . login ( user = settings . LASKE_SERVERS [ [string] ] [ [string] ] , passwd = settings . LASKE_SERVERS [ [string] ] [ [string] ] , ) [EOL] ftp . cwd ( settings . LASKE_SERVERS [ [string] ] [ [string] ] ) [EOL] except Exception as e : [EOL] self . stderr . write ( [string] . format ( str ( e ) ) ) [EOL] return [EOL] [EOL] try : [EOL] file_list = ftp . nlst ( ) [EOL] except Exception as e : [EOL] self . stderr . write ( [string] . format ( str ( e ) ) ) [EOL] return [EOL] [EOL] for file_name in file_list : [EOL] if not file_name . lower ( ) . startswith ( [string] ) : [EOL] self . stderr . write ( [string] . format ( file_name ) ) [EOL] continue [EOL] [EOL] self . stdout . write ( [string] . format ( file_name ) ) [EOL] try : [EOL] fp = open ( os . path . join ( get_import_dir ( ) , file_name ) , [string] ) [EOL] ftp . retrbinary ( [string] . format ( file_name ) , fp . write ) [EOL] self . stdout . write ( [string] ) [EOL] ftp . rename ( file_name , [string] . format ( file_name ) ) [EOL] self . stdout . write ( [string] ) [EOL] except Exception as e : [EOL] self . stderr . write ( [string] . format ( file_name , str ( e ) ) ) [EOL] [EOL] ftp . quit ( ) [EOL] [EOL] def download_payments ( self ) : [EOL] if ( [string] in settings . LASKE_SERVERS [ [string] ] [EOL] and [string] in settings . LASKE_SERVERS [ [string] ] ) : [EOL] self . download_payments_sftp ( ) [EOL] else : [EOL] self . download_payments_ftp ( ) [EOL] [EOL] def check_import_directory ( self ) : [EOL] if not os . path . isdir ( get_import_dir ( ) ) : [EOL] self . stdout . write ( [string] . format ( get_import_dir ( ) ) ) [EOL] sys . exit ( - [number] ) [EOL] [EOL] try : [EOL] fp = tempfile . TemporaryFile ( dir = get_import_dir ( ) ) [EOL] fp . close ( ) [EOL] except PermissionError : [EOL] self . stdout . write ( [string] . format ( get_import_dir ( ) ) ) [EOL] sys . exit ( - [number] ) [EOL] [EOL] def find_unimported_files ( self ) : [EOL] all_files = glob . glob ( get_import_dir ( ) + [string] . format ( settings . LASKE_VALUES [ [string] ] ) ) [EOL] already_imported_filenames = LaskePaymentsLog . objects . filter ( is_finished = True ) . values_list ( [string] , flat = True ) [EOL] [EOL] return [ filename for filename in all_files if Path ( filename ) . name not in already_imported_filenames ] [EOL] [EOL] def get_payment_lines_from_file ( self , filename ) : [EOL] result = [ ] [EOL] [EOL] with open ( filename , [string] , encoding = [string] ) as fp : [EOL] lines = fp . readlines ( ) [EOL] [EOL] for line in lines : [EOL] line = line . strip ( [string] ) [EOL] if len ( line ) != [number] : [EOL] continue [EOL] if line [ [number] ] not in [ [string] , [string] , [string] ] : [EOL] continue [EOL] [EOL] result . append ( line ) [EOL] [EOL] return result [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] self . check_import_directory ( ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] self . download_payments ( ) [EOL] self . stdout . write ( [string] ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] filenames = self . find_unimported_files ( ) [EOL] if not filenames : [EOL] self . stdout . write ( [string] ) [EOL] return [EOL] [EOL] self . stdout . write ( [string] . format ( len ( filenames ) ) ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] for filename in filenames : [EOL] filepath = Path ( filename ) [EOL] [EOL] self . stdout . write ( [string] . format ( filename ) ) [EOL] ( laske_payments_log_entry , created , ) = LaskePaymentsLog . objects . get_or_create ( filename = filepath . name , defaults = { [string] : timezone . now ( ) } ) [EOL] [EOL] try : [EOL] lines = self . get_payment_lines_from_file ( filename ) [EOL] except UnicodeDecodeError as e : [EOL] self . stderr . write ( [string] . format ( filename , str ( e ) ) ) [EOL] continue [EOL] [EOL] for line in lines : [EOL] filing_code = line [ [number] : [number] ] . strip ( ) [EOL] if filing_code [ : [number] ] != [string] : [EOL] self . stderr . write ( [string] . format ( filing_code ) ) [EOL] continue [EOL] [EOL] try : [EOL] invoice_number = int ( line [ [number] : [number] ] ) [EOL] except ValueError : [EOL] self . stderr . write ( [string] ) [EOL] continue [EOL] [EOL] amount = Decimal ( [string] . format ( line [ [number] : [number] ] , line [ [number] : [number] ] ) ) [EOL] try : [EOL] payment_date = datetime . date ( year = [number] + int ( line [ [number] : [number] ] ) , month = int ( line [ [number] : [number] ] ) , day = int ( line [ [number] : [number] ] ) , ) [EOL] except ValueError : [EOL] self . stderr . write ( [string] . format ( invoice_number , line [ [number] : [number] ] ) ) [EOL] continue [EOL] [EOL] self . stdout . write ( [string] . format ( invoice_number , amount , payment_date , filing_code ) ) [EOL] [EOL] try : [EOL] invoice = Invoice . objects . get ( number = invoice_number ) [EOL] except Invoice . DoesNotExist : [EOL] self . stderr . write ( [string] . format ( invoice_number ) ) [EOL] continue [EOL] [EOL] if invoice . lease . is_subject_to_vat : [EOL] vat = Vat . objects . get_for_date ( payment_date ) [EOL] if not vat : [EOL] self . stdout . write ( [string] . format ( payment_date ) ) [EOL] continue [EOL] [EOL] amount_without_vat = Decimal ( [number] * amount / ( [number] + vat . percent ) ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] self . stdout . write ( [string] . format ( amount , vat . percent , amount_without_vat ) ) [EOL] [EOL] amount = amount_without_vat [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if invoice . payments . filter ( paid_amount = amount , paid_date = payment_date ) . exists ( ) : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] invoice_payment = InvoicePayment . objects . create ( invoice = invoice , paid_amount = amount , paid_date = payment_date , filing_code = filing_code , ) [EOL] laske_payments_log_entry . payments . add ( invoice_payment ) [EOL] invoice . update_amounts ( ) [EOL] [EOL] laske_payments_log_entry . ended_at = timezone . now ( ) [EOL] laske_payments_log_entry . is_finished = True [EOL] laske_payments_log_entry . save ( ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BufferedWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 $io.BufferedWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ftplib.FTP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $decimal.Decimal$ 0 $datetime.date$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 $typing.Any$ 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $decimal.Decimal$ 0 0 0 $datetime.date$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import logging [EOL] import laske_export [EOL] import datetime [EOL] import datetime [EOL] import logging [EOL] import re [EOL] [EOL] from constance import config [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . conf import settings [EOL] from django . core . mail import EmailMultiAlternatives [EOL] from django . core . management . base import BaseCommand [EOL] from django . utils import timezone , translation [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from laske_export . enums import LaskeExportLogInvoiceStatus [EOL] from laske_export . exporter import LaskeExporter [EOL] from leasing . models import Invoice [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def set_constant_laske_values ( sales_order ) : [EOL] for key , val in settings . LASKE_VALUES . items ( ) : [EOL] setattr ( sales_order , key , val ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] translation . activate ( settings . LANGUAGE_CODE ) [EOL] [EOL] error_flag = False [EOL] error_message = [string] [EOL] [EOL] [comment] [EOL] try : [EOL] exporter = LaskeExporter ( ) [EOL] exporter . message_output = self . stdout [EOL] [EOL] today = datetime . date . today ( ) [EOL] one_month_in_the_future = today + relativedelta ( months = [number] ) [EOL] [EOL] self . stdout . write ( [string] . format ( one_month_in_the_future ) ) [EOL] [comment] [EOL] [comment] [EOL] invoices = Invoice . objects . filter ( created_at__gt = datetime . datetime ( year = [number] , month = [number] , day = [number] , tzinfo = timezone . get_current_timezone ( ) ) , due_date__lte = one_month_in_the_future , sent_to_sap_at__isnull = True , ) . exclude ( credited_invoice__isnull = False , credited_invoice__due_date__lte = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] self . stdout . write ( [string] . format ( invoices . count ( ) , one_month_in_the_future ) ) [EOL] [EOL] if not invoices : [EOL] self . stdout . write ( [string] ) [EOL] return [EOL] [EOL] laske_export_log_entry = exporter . export_invoices ( invoices ) [EOL] except Exception as err : [EOL] error_flag = True [EOL] error_message = str ( err ) [EOL] self . stdout . write ( [string] . format ( error_message ) ) [EOL] logging . exception ( err ) [EOL] [EOL] if config . LASKE_EXPORT_ANNOUNCE_EMAIL : [EOL] email_subject = [string] [EOL] email_body = [string] [EOL] email_headers = None [EOL] [EOL] if error_flag : [EOL] self . stdout . write ( [string] . format ( config . LASKE_EXPORT_ANNOUNCE_EMAIL ) ) [EOL] email_headers = { [string] : [string] } [comment] [EOL] email_subject = _ ( [string] ) . format ( settings . LASKE_VALUES [ [string] ] ) [EOL] email_body = _ ( [string] [string] ) . format ( error_message ) [EOL] else : [EOL] self . stdout . write ( [string] . format ( config . LASKE_EXPORT_ANNOUNCE_EMAIL ) ) [EOL] [EOL] export_invoice_log_items = ( laske_export_log_entry . laskeexportloginvoiceitem_set ) [EOL] sent_count = export_invoice_log_items . filter ( status = LaskeExportLogInvoiceStatus . SENT ) . count ( ) [EOL] failed_count = export_invoice_log_items . filter ( status = LaskeExportLogInvoiceStatus . FAILED ) . count ( ) [EOL] [EOL] email_subject = _ ( [string] ) . format ( settings . LASKE_VALUES [ [string] ] ) [EOL] [EOL] email_body = _ ( [string] [string] ) . format ( settings . LASKE_VALUES [ [string] ] , laske_export_log_entry . invoices . count ( ) , laske_export_log_entry . ended_at . astimezone ( timezone . get_current_timezone ( ) ) . strftime ( [string] ) , sent_count , failed_count , ) [EOL] [EOL] if failed_count > [number] : [EOL] email_body += [string] [EOL] email_body += _ ( [string] ) + [string] [EOL] for invoice in laske_export_log_entry . invoices . filter ( laskeexportloginvoiceitem__status = LaskeExportLogInvoiceStatus . FAILED ) : [EOL] email_body += [string] . format ( invoice . number , invoice . lease . identifier ) [EOL] [EOL] from_email = settings . DEFAULT_FROM_EMAIL [EOL] if hasattr ( settings , [string] ) : [EOL] from_email = settings . MVJ_EMAIL_FROM [EOL] if hasattr ( settings , [string] ) : [EOL] from_email = config . LASKE_EXPORT_FROM_EMAIL [EOL] [EOL] msg = EmailMultiAlternatives ( email_subject , email_body , from_email , re . split ( [string] , config . LASKE_EXPORT_ANNOUNCE_EMAIL ) , headers = email_headers , ) [EOL] msg . send ( fail_silently = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $laske_export.exporter.LaskeExporter$ 0 0 0 0 0 $laske_export.exporter.LaskeExporter$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $laske_export.exporter.LaskeExporter$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import laske_export [EOL] import pytest [EOL] [EOL] from laske_export . document . sales_order import Party [EOL] from leasing . enums import ContactType [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None , [string] , None , None , None , ) , ( [string] , None , [string] , None , None , None , ) , ( None , [string] , [string] , None , None , None , ) , ( [string] , [string] , [string] , None , None , None , ) , ( [string] , [string] , [string] , [string] , [string] , None , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_person_name ( django_db_setup , contact_factory , first_name , last_name , expected1 , expected2 , expected3 , expected4 , ) : [EOL] contact = contact_factory ( first_name = first_name , last_name = last_name , type = ContactType . PERSON ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 [EOL] assert party . priority_name2 == expected2 [EOL] assert party . priority_name3 == expected3 [EOL] assert party . priority_name4 == expected4 [EOL] assert party . info_name1 == expected1 [EOL] assert party . info_name2 == expected2 [EOL] assert party . info_name3 == expected3 [EOL] assert party . info_name4 == expected4 [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None , [string] , [string] , None , None , ) , ( [string] , None , [string] , [string] , None , None , ) , ( None , [string] , [string] , [string] , None , None , ) , ( [string] , [string] , [string] , [string] , None , None , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_person_name_with_care_of ( django_db_setup , contact_factory , first_name , last_name , expected1 , expected2 , expected3 , expected4 , ) : [EOL] contact = contact_factory ( first_name = first_name , last_name = last_name , type = ContactType . PERSON , care_of = [string] , ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 , [string] [EOL] assert party . priority_name2 == expected2 , [string] [EOL] assert party . priority_name3 == expected3 , [string] [EOL] assert party . priority_name4 == expected4 , [string] [EOL] assert party . info_name1 == expected1 , [string] [EOL] assert party . info_name2 == expected2 , [string] [EOL] assert party . info_name3 == expected3 , [string] [EOL] assert party . info_name4 == expected4 , [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None , [string] , [string] , [string] , [string] , ) , ( [string] , None , [string] , [string] , [string] , [string] , ) , ( None , [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_person_name_with_long_care_of ( django_db_setup , contact_factory , first_name , last_name , expected1 , expected2 , expected3 , expected4 , ) : [EOL] contact = contact_factory ( first_name = first_name , last_name = last_name , type = ContactType . PERSON , care_of = [string] [string] , ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 , [string] [EOL] assert party . priority_name2 == expected2 , [string] [EOL] assert party . priority_name3 == expected3 , [string] [EOL] assert party . priority_name4 == expected4 , [string] [EOL] assert party . info_name1 == expected1 , [string] [EOL] assert party . info_name2 == expected2 , [string] [EOL] assert party . info_name3 == expected3 , [string] [EOL] assert party . info_name4 == expected4 , [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [string] , None , None , None , ) , ( [string] , [string] , None , None , None , ) , ( [string] , [string] , [string] , [string] , None , ) , ( [string] [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_name ( django_db_setup , contact_factory , name , expected1 , expected2 , expected3 , expected4 ) : [EOL] contact = contact_factory ( name = name , type = ContactType . BUSINESS ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 [EOL] assert party . priority_name2 == expected2 [EOL] assert party . priority_name3 == expected3 [EOL] assert party . priority_name4 == expected4 [EOL] assert party . info_name1 == expected1 [EOL] assert party . info_name2 == expected2 [EOL] assert party . info_name3 == expected3 [EOL] assert party . info_name4 == expected4 [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [string] , [string] , None , None , ) , ( [string] , [string] , [string] , None , None , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_name_with_care_of ( django_db_setup , contact_factory , name , expected1 , expected2 , expected3 , expected4 ) : [EOL] contact = contact_factory ( name = name , type = ContactType . BUSINESS , care_of = [string] ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 , [string] [EOL] assert party . priority_name2 == expected2 , [string] [EOL] assert party . priority_name3 == expected3 , [string] [EOL] assert party . priority_name4 == expected4 , [string] [EOL] assert party . info_name1 == expected1 , [string] [EOL] assert party . info_name2 == expected2 , [string] [EOL] assert party . info_name3 == expected3 , [string] [EOL] assert party . info_name4 == expected4 , [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] , [string] , [string] , [string] , [string] , ) , ( [string] [string] , [string] , [string] , [string] , [string] , ) , ] , ) def test_party_from_contact_person_with_long_care_of ( django_db_setup , contact_factory , name , expected1 , expected2 , expected3 , expected4 ) : [EOL] contact = contact_factory ( name = name , type = ContactType . BUSINESS , care_of = [string] [string] , ) [EOL] [EOL] party = Party ( ) [EOL] party . from_contact ( contact ) [EOL] [EOL] assert party . priority_name1 == expected1 , [string] [EOL] assert party . priority_name2 == expected2 , [string] [EOL] assert party . priority_name3 == expected3 , [string] [EOL] assert party . priority_name4 == expected4 , [string] [EOL] assert party . info_name1 == expected1 , [string] [EOL] assert party . info_name2 == expected2 , [string] [EOL] assert party . info_name3 == expected3 , [string] [EOL] assert party . info_name4 == expected4 , [string] [EOL]	
import tempfile [EOL] [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] from leasing . tests . conftest import * [comment] [EOL] [EOL] [EOL] def pytest_configure ( ) : [EOL] laske_export_root = tempfile . mkdtemp ( prefix = [string] ) [EOL] settings . LASKE_EXPORT_ROOT = laske_export_root [EOL] settings . LASKE_SERVERS = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def laske_export_from_email ( override_config ) : [EOL] with override_config ( LASKE_EXPORT_FROM_EMAIL = [string] ) : [EOL] yield [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def laske_export_announce_email ( override_config ) : [EOL] with override_config ( LASKE_EXPORT_ANNOUNCE_EMAIL = [string] ) : [EOL] yield [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import laske_export [EOL] import datetime [EOL] import datetime [EOL] import json [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . core import mail [EOL] [EOL] from laske_export . enums import LaskeExportLogInvoiceStatus [EOL] from laske_export . exporter import LaskeExporter [EOL] from laske_export . management . commands import send_invoices_to_laske [EOL] from laske_export . models import LaskeExportLog [EOL] from leasing . enums import ContactType [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def monkeypatch_session ( request ) : [EOL] [docstring] [EOL] from _pytest . monkeypatch import MonkeyPatch [EOL] [EOL] mpatch = MonkeyPatch ( ) [EOL] yield mpatch [EOL] mpatch . undo ( ) [EOL] [EOL] [EOL] @ pytest . fixture def monkeypatch_laske_exporter_send ( monkeypatch_session ) : [EOL] def laske_exporter_send ( self , filename ) : [EOL] pass [EOL] [EOL] monkeypatch_session . setattr ( LaskeExporter , [string] , laske_exporter_send ) [EOL] [EOL] [EOL] laske_exporter_send_with_error__error_message = [string] [EOL] [EOL] [EOL] @ pytest . fixture def monkeypatch_laske_exporter_send_with_error ( monkeypatch_session ) : [EOL] def laske_exporter_send ( self , filename ) : [EOL] raise Exception ( laske_exporter_send_with_error__error_message ) [EOL] [EOL] monkeypatch_session . setattr ( LaskeExporter , [string] , laske_exporter_send ) [EOL] [EOL] [EOL] @ pytest . fixture def billing_period ( ) : [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] return billing_period_start_date , billing_period_end_date [EOL] [EOL] [EOL] @ pytest . fixture def lease ( lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] return lease [EOL] [EOL] [EOL] @ pytest . fixture def invoice ( contact_factory , invoice_factory , lease , billing_period ) : [EOL] billing_period_start_date , billing_period_end_date = billing_period [EOL] [EOL] contact = contact_factory ( name = [string] , type = ContactType . BUSINESS , business_id = [string] , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] return invoice [EOL] [EOL] [EOL] @ pytest . fixture def broken_invoice ( contact_factory , invoice_factory , lease , billing_period ) : [EOL] billing_period_start_date , billing_period_end_date = billing_period [EOL] [EOL] broken_contact = contact_factory ( name = [string] , type = ContactType . BUSINESS , business_id = [string] , ) [EOL] [EOL] broken_invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = broken_contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] return broken_invoice [EOL] [EOL] [EOL] @ pytest . fixture def send_invoices_to_laske_command ( ) : [EOL] command = send_invoices_to_laske . Command ( ) [EOL] return command [EOL] [EOL] [EOL] @ pytest . fixture def send_invoices_to_laske_command_handle ( broken_invoice , invoice , send_invoices_to_laske_command , monkeypatch_laske_exporter_send , ) : [EOL] command = send_invoices_to_laske_command [EOL] command . handle ( ) [EOL] [EOL] [EOL] @ pytest . fixture def send_invoices_to_laske_command_handle_with_unexpected_error ( broken_invoice , invoice , send_invoices_to_laske_command , monkeypatch_laske_exporter_send_with_error , ) : [EOL] command = send_invoices_to_laske_command [EOL] command . handle ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_invalid_export_invoice ( broken_invoice , invoice , monkeypatch_laske_exporter_send ) : [EOL] exporter = LaskeExporter ( ) [EOL] exporter . export_invoices ( [ broken_invoice , invoice ] ) [EOL] [EOL] logs = LaskeExportLog . objects . all ( ) [EOL] assert logs . count ( ) == [number] [EOL] [EOL] log = logs [ [number] ] [EOL] assert log . invoices . count ( ) == [number] [EOL] [EOL] log_items = log . laskeexportloginvoiceitem_set . all ( ) [EOL] assert log_items . count ( ) == [number] [EOL] [EOL] failed_invoice_logs = log_items . filter ( status = LaskeExportLogInvoiceStatus . FAILED ) [EOL] assert failed_invoice_logs . count ( ) == [number] [EOL] failed_invoice_log = failed_invoice_logs [ [number] ] [EOL] assert failed_invoice_log . status == LaskeExportLogInvoiceStatus . FAILED [EOL] error_json = json . loads ( failed_invoice_log . information ) [EOL] assert [string] in error_json [EOL] [EOL] sent_invoice_logs = log_items . filter ( status = LaskeExportLogInvoiceStatus . SENT ) [EOL] assert sent_invoice_logs . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_send_invoices_to_laske_command_handle ( broken_invoice , send_invoices_to_laske_command_handle ) : [EOL] broken_invoice . refresh_from_db ( ) [EOL] [EOL] assert len ( mail . outbox ) == [number] [EOL] [EOL] export_mail = mail . outbox [ [number] ] [EOL] assert [string] in export_mail . body [EOL] assert ( [string] . format ( broken_invoice . number , broken_invoice . lease . identifier ) in export_mail . body ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_send_invoices_to_laske_command_handle_with_unexpected_error ( send_invoices_to_laske_command_handle_with_unexpected_error , ) : [EOL] assert len ( mail . outbox ) == [number] [EOL] [EOL] export_mail = mail . outbox [ [number] ] [EOL] assert [string] in export_mail . extra_headers [EOL] assert export_mail . extra_headers [ [string] ] == [string] [comment] [EOL] assert laske_exporter_send_with_error__error_message in export_mail . body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import laske_export [EOL] import datetime [EOL] import datetime [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . utils . crypto import get_random_string [EOL] [EOL] from laske_export . document . invoice_sales_order_adapter import InvoiceSalesOrderAdapter [EOL] from laske_export . document . sales_order import SalesOrder [EOL] from leasing . enums import ContactType , DueDatesType , RentCycle , TenantContactType [EOL] from leasing . models import ReceivableType [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_one_primary_address_in_leasearea ( django_db_setup , lease_factory , rent_factory , contact_factory , tenant_factory , tenant_rent_share_factory , tenant_contact_factory , invoice_factory , invoice_row_factory , lease_area_factory , lease_area_address_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] lease_area = lease_area_factory ( lease = lease , identifier = get_random_string ( ) , area = [number] , section_area = [number] ) [EOL] lease_area_address_factory ( lease_area = lease_area , is_primary = True , address = [string] , postal_code = [string] , city = [string] , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] , reference = [string] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact1 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] sales_order = SalesOrder ( ) [EOL] [EOL] adapter = InvoiceSalesOrderAdapter ( invoice = invoice , sales_order = sales_order , receivable_type_rent = receivable_type ) [EOL] [EOL] adapter . set_values ( ) [EOL] [EOL] assert [string] in adapter . get_bill_text ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_one_nonprimary_address_in_leasearea ( django_db_setup , lease_factory , rent_factory , contact_factory , tenant_factory , tenant_rent_share_factory , tenant_contact_factory , invoice_factory , invoice_row_factory , lease_area_factory , lease_area_address_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] lease_area = lease_area_factory ( lease = lease , identifier = get_random_string ( ) , area = [number] , section_area = [number] ) [EOL] lease_area_address_factory ( lease_area = lease_area , is_primary = False , address = [string] , postal_code = [string] , city = [string] , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] , reference = [string] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact1 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] sales_order = SalesOrder ( ) [EOL] [EOL] adapter = InvoiceSalesOrderAdapter ( invoice = invoice , sales_order = sales_order , receivable_type_rent = receivable_type ) [EOL] [EOL] adapter . set_values ( ) [EOL] [EOL] assert [string] in adapter . get_bill_text ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_one_primary_and_nonprimary_addresses_in_leasearea ( django_db_setup , lease_factory , rent_factory , contact_factory , tenant_factory , tenant_rent_share_factory , tenant_contact_factory , invoice_factory , invoice_row_factory , lease_area_factory , lease_area_address_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] lease_area = lease_area_factory ( lease = lease , identifier = get_random_string ( ) , area = [number] , section_area = [number] ) [EOL] lease_area_address_factory ( lease_area = lease_area , is_primary = False , address = [string] , postal_code = [string] , city = [string] , ) [EOL] lease_area_address_factory ( lease_area = lease_area , is_primary = True , address = [string] , postal_code = [string] , city = [string] , ) [EOL] lease_area_address_factory ( lease_area = lease_area , is_primary = False , address = [string] , postal_code = [string] , city = [string] , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] , reference = [string] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact1 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] sales_order = SalesOrder ( ) [EOL] [EOL] adapter = InvoiceSalesOrderAdapter ( invoice = invoice , sales_order = sales_order , receivable_type_rent = receivable_type ) [EOL] [EOL] adapter . set_values ( ) [EOL] [EOL] assert [string] in adapter . get_bill_text ( ) [EOL] assert [string] not in adapter . get_bill_text ( ) [EOL] assert [string] not in adapter . get_bill_text ( ) [EOL]	
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelTable ( name = [string] , table = None , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import enumfields . fields [EOL] from django . db import migrations , models [EOL] [EOL] import laske_export . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . TextField ( blank = True , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumField ( blank = True , enum = laske_export . enums . LaskeExportLogInvoiceStatus , max_length = [number] , null = True , verbose_name = [string] , ) , ) , migrations . RunSQL ( sql = [ ( [string] , [ [string] ] , ) ] , reverse_sql = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import dateutil [EOL] import laske_export [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . conf import settings [EOL] [EOL] from leasing . enums import InvoiceType , RentCycle [EOL] from leasing . models . utils import get_next_business_day , is_business_day [EOL] [EOL] from . sales_order import BillingParty1 , LineItem , OrderParty [EOL] [EOL] [EOL] class InvoiceSalesOrderAdapter : [EOL] def __init__ ( self , invoice = None , sales_order = None , receivable_type_rent = None , receivable_type_collateral = None , ) : [EOL] self . invoice = invoice [EOL] self . sales_order = sales_order [EOL] self . receivable_type_rent = receivable_type_rent [EOL] self . receivable_type_collateral = receivable_type_collateral [EOL] [EOL] def get_bill_text ( self ) : [EOL] if ( self . invoice . billing_period_start_date [EOL] and self . invoice . billing_period_end_date ) : [EOL] invoice_year = self . invoice . billing_period_start_date . year [EOL] [EOL] [comment] [EOL] rent = self . invoice . lease . get_active_rents_on_period ( self . invoice . billing_period_start_date , self . invoice . billing_period_end_date , ) . first ( ) [EOL] else : [EOL] invoice_year = self . invoice . invoicing_date . year [EOL] [EOL] rent = self . invoice . lease . get_active_rents_on_period ( self . invoice . invoicing_date , self . invoice . invoicing_date ) . first ( ) [EOL] [EOL] rent_calculation = self . invoice . lease . calculate_rent_amount_for_year ( invoice_year ) [EOL] year_rent = rent_calculation . get_total_amount ( ) [EOL] [EOL] real_property_identifier = [string] [EOL] address = [string] [EOL] [EOL] first_lease_area = self . invoice . lease . lease_areas . first ( ) [EOL] if first_lease_area : [EOL] real_property_identifier = first_lease_area . identifier [EOL] lease_area_address = first_lease_area . addresses . order_by ( [string] ) . first ( ) [EOL] [EOL] if lease_area_address : [EOL] address = lease_area_address . address [EOL] [EOL] bill_texts = [ ] [EOL] row1 = [string] . format ( lease_identifier = self . invoice . lease . get_identifier_string ( ) ) [EOL] [EOL] if ( self . invoice . billing_period_start_date [EOL] and self . invoice . billing_period_end_date ) : [EOL] row1 += [string] . format ( billing_period_start_date = self . invoice . billing_period_start_date . strftime ( [string] ) , billing_period_end_date = self . invoice . billing_period_end_date . strftime ( [string] ) , ) [EOL] bill_texts . append ( row1 ) [EOL] [EOL] row2 = [string] . format ( lease_end_date = self . invoice . lease . end_date . strftime ( [string] ) [EOL] if self . invoice . lease . end_date [EOL] else [string] ) [EOL] [EOL] if self . invoice . lease . intended_use : [EOL] row2 += [string] . format ( lease_intended_use = self . invoice . lease . intended_use . name [ : [number] ] ) [EOL] bill_texts . append ( row2 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if rent : [EOL] index_date = [string] [EOL] if rent . cycle == RentCycle . APRIL_TO_MARCH : [EOL] index_date = [string] [EOL] [EOL] bill_texts . append ( [string] . format ( index_date = index_date , year_rent = [string] . format ( year_rent . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) ) . replace ( [string] , [string] ) , ) ) [comment] [EOL] [EOL] bill_texts . append ( [string] . format ( real_property_identifier = real_property_identifier , address = address ) ) [EOL] [EOL] if self . invoice . notes : [EOL] bill_texts . append ( self . invoice . notes ) [EOL] [EOL] return [string] . join ( bill_texts ) [EOL] [EOL] def get_first_tenant ( self ) : [EOL] for invoice_row in self . invoice . rows . all ( ) : [EOL] if not invoice_row . tenant : [EOL] continue [EOL] [EOL] return invoice_row . tenant [EOL] [EOL] def get_order_party_contact ( self ) : [EOL] tenant = self . get_first_tenant ( ) [EOL] if not tenant or not self . invoice . billing_period_start_date : [EOL] [comment] [EOL] return self . invoice . recipient [EOL] [EOL] tenant_tenantcontact = tenant . get_tenant_tenantcontacts ( self . invoice . billing_period_start_date , self . invoice . billing_period_end_date ) . first ( ) [EOL] [EOL] if tenant_tenantcontact : [EOL] return tenant_tenantcontact . contact [EOL] [EOL] [comment] [EOL] [EOL] def get_billing_party_contact ( self ) : [EOL] [comment] [EOL] order_party_contact = self . get_order_party_contact ( ) [EOL] [EOL] if order_party_contact and order_party_contact != self . invoice . recipient : [EOL] return self . invoice . recipient [EOL] return order_party_contact [EOL] [EOL] def get_po_number ( self ) : [EOL] [comment] [EOL] for invoice_row in self . invoice . rows . filter ( tenant__isnull = False ) : [EOL] if invoice_row . tenant . reference : [EOL] return invoice_row . tenant . reference [ : [number] ] [EOL] [EOL] def set_dates ( self ) : [EOL] billing_date = self . invoice . due_date . replace ( day = [number] ) [EOL] self . sales_order . billing_date = billing_date . strftime ( [string] ) [EOL] [EOL] due_date = self . invoice . due_date [EOL] if not is_business_day ( due_date ) : [EOL] due_date = get_next_business_day ( due_date ) [EOL] self . invoice . adjusted_due_date = due_date [EOL] self . invoice . save ( ) [EOL] [EOL] value_date = due_date - relativedelta ( days = settings . LASKE_DUE_DATE_OFFSET_DAYS ) [EOL] self . sales_order . value_date = value_date . strftime ( [string] ) [EOL] [EOL] def set_references ( self ) : [EOL] self . sales_order . reference = str ( self . invoice . generate_number ( ) ) [EOL] self . sales_order . reference_text = self . invoice . lease . get_identifier_string ( ) [EOL] [EOL] def get_line_items ( self ) : [EOL] line_items = [ ] [EOL] [EOL] invoice_rows = self . invoice . rows . all ( ) [EOL] for i , invoice_row in enumerate ( invoice_rows ) : [EOL] line_item = LineItem ( ) [EOL] [EOL] receivable_type = invoice_row . receivable_type [EOL] [comment] [EOL] if receivable_type == self . receivable_type_rent : [EOL] line_item . material = self . invoice . lease . type . sap_material_code [EOL] line_item . order_item_number = ( self . invoice . lease . type . sap_order_item_number ) [EOL] [EOL] [comment] [EOL] elif receivable_type == self . receivable_type_collateral : [EOL] [comment] [EOL] line_item . profit_center = receivable_type . sap_order_item_number [EOL] line_item . material = receivable_type . sap_material_code [EOL] else : [EOL] line_item . material = receivable_type . sap_material_code [EOL] line_item . order_item_number = receivable_type . sap_order_item_number [EOL] [EOL] line_item . quantity = [string] [EOL] line_item . net_price = [string] . format ( invoice_row . amount ) . replace ( [string] , [string] ) [EOL] [EOL] line1_strings = [ [string] . format ( invoice_row . receivable_type . name ) ] [EOL] [EOL] if ( invoice_row . billing_period_start_date [EOL] and invoice_row . billing_period_end_date ) : [EOL] line1_strings . append ( [string] . format ( invoice_row . billing_period_start_date . strftime ( [string] ) , invoice_row . billing_period_end_date . strftime ( [string] ) , ) ) [EOL] [EOL] line1_strings . append ( [string] ) [EOL] [EOL] line_item . line_text_l1 = [string] . join ( line1_strings ) [ : [number] ] [EOL] [EOL] if invoice_row . tenant : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] start_date = self . invoice . billing_period_start_date [EOL] end_date = self . invoice . billing_period_end_date [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not start_date and not end_date : [EOL] start_date = end_date = self . invoice . invoicing_date [EOL] [EOL] tenant_contact = invoice_row . tenant . get_tenant_tenantcontacts ( start_date , end_date ) . first ( ) [EOL] [EOL] if tenant_contact and tenant_contact . contact : [EOL] line_item . line_text_l2 = [string] . format ( tenant_contact . contact . get_name ( ) [ : [number] ] ) [EOL] [EOL] if i == len ( invoice_rows ) - [number] : [EOL] line_item . line_text_l4 = [string] [EOL] line_item . line_text_l5 = ( [string] ) [EOL] line_item . line_text_l6 = ( [string] ) [EOL] [EOL] line_items . append ( line_item ) [EOL] [EOL] return line_items [EOL] [EOL] def get_order_type ( self ) : [EOL] if self . invoice . type == InvoiceType . CHARGE : [EOL] return [string] [EOL] elif self . invoice . type == InvoiceType . CREDIT_NOTE : [EOL] return [string] [EOL] [EOL] def get_original_order ( self ) : [EOL] if self . invoice . type == InvoiceType . CREDIT_NOTE : [EOL] return str ( self . invoice . credited_invoice . number ) [EOL] [EOL] def get_sales_office ( self ) : [EOL] if self . invoice . lease . lessor and self . invoice . lease . lessor . sap_sales_office : [EOL] return self . invoice . lease . lessor . sap_sales_office [EOL] [EOL] [comment] [EOL] return [string] [EOL] [EOL] def set_values ( self ) : [EOL] self . sales_order . set_bill_texts_from_string ( self . get_bill_text ( ) ) [EOL] [EOL] order_party_contact = self . get_order_party_contact ( ) [EOL] order_party = OrderParty ( ) [EOL] order_party . from_contact ( order_party_contact ) [EOL] self . sales_order . order_party = order_party [EOL] [EOL] billing_party_contact = self . get_billing_party_contact ( ) [EOL] billing_party1 = BillingParty1 ( ) [EOL] billing_party1 . from_contact ( billing_party_contact ) [EOL] self . sales_order . billing_party1 = billing_party1 [EOL] [EOL] self . sales_order . sales_office = self . get_sales_office ( ) [EOL] self . sales_order . po_number = self . get_po_number ( ) [EOL] self . sales_order . order_type = self . get_order_type ( ) [EOL] self . sales_order . original_order = self . get_original_order ( ) [EOL] [EOL] self . set_dates ( ) [EOL] self . set_references ( ) [EOL] [EOL] line_items = self . get_line_items ( ) [EOL] self . sales_order . line_items = line_items [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $dateutil.relativedelta.relativedelta$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dateutil.relativedelta.relativedelta$ 0 $dateutil.relativedelta.relativedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $laske_export.document.sales_order.LineItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 0 0 $laske_export.document.sales_order.LineItem$ 0 0 0 0 $laske_export.document.sales_order.LineItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $laske_export.document.sales_order.OrderParty$ 0 0 0 0 0 $laske_export.document.sales_order.OrderParty$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $laske_export.document.sales_order.OrderParty$ 0 $laske_export.document.sales_order.OrderParty$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $laske_export.document.sales_order.BillingParty1$ 0 0 0 0 0 $laske_export.document.sales_order.BillingParty1$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $laske_export.document.sales_order.BillingParty1$ 0 $laske_export.document.sales_order.BillingParty1$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import laske_export [EOL] from django . core . validators import MaxLengthValidator [EOL] [EOL] from leasing . enums import ContactType [EOL] [EOL] from . fields import Field , FieldGroup [EOL] [EOL] [EOL] class Party ( FieldGroup ) : [EOL] sap_customer_id = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] customer_id = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] customer_yid = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] customer_ovt = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_address1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_address2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_po_code = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_po_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_po_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] temporary_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_name1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_name2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_name3 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_name4 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_address1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_address2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_po_code = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_po_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_po_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] priority_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_customer_id = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_customer_yid = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_customer_ovt = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_name1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_name2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_name3 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_name4 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_address1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_address2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_po_code = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_po_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_po_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_city = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] info_postalcode = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] [EOL] def from_contact ( self , contact ) : [EOL] if not contact : [EOL] return [EOL] [EOL] self . customer_ovt = contact . electronic_billing_address [EOL] self . info_customer_ovt = contact . electronic_billing_address [EOL] [EOL] self . sap_customer_id = contact . sap_customer_number [EOL] if contact . type == ContactType . PERSON : [EOL] self . customer_id = contact . national_identification_number [EOL] self . info_customer_id = contact . national_identification_number [EOL] else : [EOL] self . customer_yid = contact . business_id [EOL] self . info_customer_yid = contact . business_id [EOL] [EOL] name = contact . get_name ( ) [ : [number] ] [comment] [EOL] [EOL] n = [number] [EOL] if not name : [EOL] self . priority_name1 = [string] [EOL] self . info_name1 = [string] [EOL] n += [number] [EOL] else : [EOL] for i in range ( [number] , len ( name ) , [number] ) : [EOL] setattr ( self , [string] . format ( n ) , name [ i : i + [number] ] ) [EOL] setattr ( self , [string] . format ( n ) , name [ i : i + [number] ] ) [EOL] n += [number] [EOL] [EOL] [comment] [EOL] if contact . care_of : [EOL] care_of = [string] . format ( contact . care_of ) [EOL] [EOL] if n == [number] : [EOL] n = [number] [EOL] [EOL] for i in range ( [number] , len ( care_of ) , [number] ) : [EOL] setattr ( self , [string] . format ( n ) , care_of [ i : i + [number] ] ) [EOL] setattr ( self , [string] . format ( n ) , care_of [ i : i + [number] ] ) [EOL] n += [number] [EOL] if n >= [number] : [EOL] break [EOL] [EOL] self . priority_address1 = contact . address [ : [number] ] if contact . address else [string] [EOL] self . priority_city = contact . city [EOL] self . priority_postalcode = contact . postal_code [EOL] self . info_address1 = contact . address [ : [number] ] if contact . address else [string] [EOL] self . info_city = contact . city [EOL] self . info_postalcode = contact . postal_code [EOL] [EOL] [EOL] class OrderParty ( Party ) : [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class BillingParty1 ( Party ) : [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class BillingParty2 ( Party ) : [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class PayerParty ( Party ) : [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class ShipToParty ( Party ) : [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class LineItem ( FieldGroup ) : [EOL] grouping_factor = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] material = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] material_description = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] quantity = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] unit = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] net_price = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] tax_code = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l3 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l4 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l5 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] line_text_l6 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] profit_center = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] order_item_number = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] wbs_element = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] functional_area = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] business_entity = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] building = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] rental_object = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] [EOL] class SalesOrder ( FieldGroup ) : [EOL] sender_id = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] reference = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] original_order = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] contract_number = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] order_type = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] sales_org = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] distribution_channel = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] division = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] sales_office = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] , required = True ) [EOL] sales_group = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] po_number = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] billing_block = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] sales_district = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l3 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l4 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l5 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] hidden_text_l6 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l1 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l2 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l3 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l4 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l5 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] bill_text_l6 = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] reference_text = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] pmntterm = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] order_reason = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] billing_date = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] pricing_date = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] value_date = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] payment_reference = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] already_printed_flag = Field ( name = [string] , validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] [EOL] [comment] [EOL] order_party = Field ( name = [string] , field_type = OrderParty ) [EOL] billing_party1 = Field ( name = [string] , field_type = BillingParty1 ) [EOL] billing_party2 = Field ( name = [string] , field_type = BillingParty2 ) [EOL] payer_party = Field ( name = [string] , field_type = PayerParty ) [EOL] line_items = Field ( name = [string] , field_type = LineItem , many = True ) [EOL] [EOL] class Meta : [EOL] element_name = [string] [EOL] [EOL] def set_bill_texts_from_string ( self , text ) : [EOL] for num , line in enumerate ( text . split ( [string] ) , start = [number] ) : [EOL] if num > [number] : [EOL] break [EOL] [EOL] setattr ( self , [string] . format ( num ) , line [ : [number] ] ) [EOL] [EOL] [EOL] class SalesOrderContainer ( FieldGroup ) : [EOL] sales_orders = Field ( field_type = SalesOrder , many = True , required = True ) [EOL] [EOL] class Meta : [EOL] element_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.document.fields.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Any , OrderedDict , List , Tuple [EOL] import typing [EOL] import collections [EOL] import inspect [EOL] from collections import OrderedDict [EOL] from collections . abc import Iterable [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from lxml import etree [EOL] [EOL] [EOL] def recursive_members ( obj ) : [EOL] object_members = list ( obj . __dict__ ) [EOL] if obj . __bases__ : [EOL] for base in obj . __bases__ : [EOL] object_members . extend ( recursive_members ( base ) ) [EOL] [EOL] return object_members [EOL] [EOL] [EOL] class FieldError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class Field : [EOL] def __init__ ( self , name = None , field_type = [string] , validators = None , many = False , required = False , ) : [EOL] self . element_name = name [EOL] self . field_type = field_type [EOL] self . validators = validators [EOL] self . many = many [EOL] self . required = required [EOL] self . validation_errors = [ ] [EOL] [EOL] def _validate_value ( self , value ) : [EOL] for one_value in value : [EOL] if self . field_type == [string] and not isinstance ( one_value , str ) : [EOL] self . validation_errors . append ( _ ( [string] ) ) [EOL] elif inspect . isclass ( self . field_type ) and not isinstance ( one_value , self . field_type ) : [EOL] self . validation_errors . append ( _ ( [string] . format ( self . field_type ) ) ) [EOL] [EOL] if not self . validators : [EOL] continue [EOL] [EOL] for validator in self . validators : [EOL] try : [EOL] validator ( one_value ) [EOL] except ValidationError as err : [EOL] self . validation_errors . append ( err . messages ) [EOL] [EOL] def is_valid ( self , value ) : [EOL] self . validation_errors = [ ] [EOL] [EOL] if self . required and not value : [EOL] self . validation_errors . append ( _ ( [string] ) ) [EOL] [EOL] if not value : [EOL] return True [EOL] [EOL] if self . many : [EOL] if isinstance ( value , str ) or not isinstance ( value , Iterable ) : [EOL] self . validation_errors . append ( _ ( [string] ) ) [EOL] return False [EOL] else : [EOL] value = [ value ] [EOL] [EOL] self . _validate_value ( value ) [EOL] [EOL] if len ( self . validation_errors ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] [EOL] class FieldGroup : [EOL] def __init__ ( self ) : [EOL] self . _fields = self . get_fields ( ) [EOL] self . validation_errors = [ ] [EOL] [EOL] def _validate_fields ( self ) : [EOL] self . validation_errors = [ ] [EOL] error_list = { } [EOL] [EOL] for field_name , field in self . get_fields ( ) . items ( ) : [EOL] field_value = getattr ( self , field_name ) [EOL] [EOL] if not field . is_valid ( field_value ) : [EOL] error_list [ field_name ] = field . validation_errors [EOL] [EOL] if not field_value : [EOL] continue [EOL] [EOL] if not field . many : [EOL] field_value = [ field_value ] [EOL] [EOL] for one_value in field_value : [EOL] if field . field_type == [string] : [EOL] continue [EOL] elif issubclass ( field . field_type , FieldGroup ) : [EOL] one_value . validate ( ) [EOL] [EOL] if len ( error_list ) > [number] : [EOL] raise ValidationError ( error_list ) [EOL] [EOL] def get_fields ( self ) : [EOL] if hasattr ( self , [string] ) : [EOL] return self . _fields [EOL] [EOL] fields = OrderedDict ( ) [EOL] [EOL] members = inspect . getmembers ( self , lambda o : isinstance ( o , Field ) ) [EOL] [comment] [EOL] [comment] [EOL] class_members_order = recursive_members ( self . __class__ ) [EOL] [EOL] members . sort ( key = lambda o : class_members_order . index ( o [ [number] ] ) ) [EOL] [EOL] for i in members : [EOL] fields [ i [ [number] ] ] = i [ [number] ] [EOL] setattr ( self , i [ [number] ] , None ) [EOL] [EOL] return fields [EOL] [EOL] def get_fields_as_elements ( self ) : [EOL] elements = [ ] [EOL] [EOL] for field_name , field in self . get_fields ( ) . items ( ) : [EOL] field_value = getattr ( self , field_name ) [EOL] [EOL] if not field . is_valid ( field_value ) : [EOL] raise FieldError ( [string] . format ( field_value , field_name ) ) [EOL] [EOL] if not field_value : [EOL] el = etree . Element ( field . element_name ) [EOL] elements . append ( el ) [EOL] continue [EOL] [EOL] if not field . many : [EOL] field_value = [ field_value ] [EOL] [EOL] for one_value in field_value : [EOL] if field . field_type == [string] : [EOL] el = etree . Element ( field . element_name ) [EOL] el . text = one_value [EOL] elements . append ( el ) [EOL] elif issubclass ( field . field_type , FieldGroup ) : [EOL] elements . append ( one_value . to_etree ( ) ) [EOL] else : [EOL] [comment] [EOL] pass [EOL] [EOL] return elements [EOL] [EOL] def to_etree ( self ) : [EOL] elements = self . get_fields_as_elements ( ) [EOL] root = etree . Element ( self . Meta . element_name ) [EOL] for el in elements : [EOL] root . append ( el ) [EOL] [EOL] return root [EOL] [EOL] def to_xml_string ( self , encoding = [string] ) : [EOL] root = self . to_etree ( ) [EOL] [EOL] return etree . tostring ( root , encoding = encoding , xml_declaration = True , pretty_print = True ) [EOL] [EOL] def validate ( self ) : [EOL] self . _validate_fields ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . to_xml_string ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LeasingConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import leasing [EOL] from rest_framework import permissions [EOL] [EOL] [EOL] class MvjDjangoModelPermissions ( permissions . DjangoModelPermissions ) : [EOL] [docstring] [EOL] [EOL] perms_map = { [string] : [ [string] ] , [string] : [ ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , } [EOL] [EOL] [EOL] class PerMethodPermission ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] perms_map = { [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] [EOL] def get_required_permissions ( self , method , view ) : [EOL] [docstring] [EOL] perms_map = self . perms_map . copy ( ) [EOL] [EOL] if hasattr ( view , [string] ) : [EOL] perms_map . update ( view . perms_map ) [EOL] [EOL] if method not in perms_map : [EOL] return [ ] [EOL] [EOL] return perms_map [ method ] [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] if not request . user or not request . user . is_authenticated : [EOL] return False [EOL] [EOL] required_perms = self . get_required_permissions ( request . method , view ) [EOL] [EOL] return request . user . has_perms ( required_perms ) [EOL] [EOL] [EOL] class IsSameUser ( permissions . BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if not hasattr ( obj , [string] ) or not obj . user : [EOL] return True [EOL] [EOL] return obj . user == request . user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import leasing [EOL] from django . utils . encoding import force_text [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields . drf import EnumField [EOL] from rest_framework . fields import ChoiceField , DecimalField [EOL] from rest_framework . metadata import SimpleMetadata [EOL] from rest_framework . relations import PrimaryKeyRelatedField [EOL] [EOL] from field_permissions . metadata import FieldPermissionsMetadataMixin [EOL] from leasing . models import ( Contact , Decision , Inspection , Invoice , Lease , LeaseArea , Tenant , ) [EOL] from leasing . models . invoice import InvoiceSet [EOL] from leasing . permissions import PerMethodPermission [EOL] from users . models import User [EOL] [EOL] ALL_METHODS = { [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , } [EOL] [EOL] [EOL] class FieldsMetadata ( FieldPermissionsMetadataMixin , SimpleMetadata ) : [EOL] [docstring] [EOL] [EOL] def determine_metadata ( self , request , view , serializer = None ) : [EOL] metadata = super ( ) . determine_metadata ( request , view ) [EOL] [EOL] if not serializer and hasattr ( view , [string] ) : [EOL] serializer = view . get_serializer ( ) [EOL] [EOL] if serializer : [EOL] metadata [ [string] ] = self . get_serializer_info ( serializer ) [EOL] [EOL] [comment] [EOL] if hasattr ( serializer , [string] ) and serializer . Meta . model : [EOL] [EOL] method_permissions = ALL_METHODS . copy ( ) [EOL] [EOL] for permission in view . get_permissions ( ) : [EOL] if not hasattr ( permission , [string] ) : [EOL] continue [EOL] [EOL] for method in method_permissions . keys ( ) : [EOL] perms = permission . get_required_permissions ( method , serializer . Meta . model ) [EOL] method_permissions [ method ] = request . user . has_perms ( perms ) [EOL] [EOL] metadata [ [string] ] = method_permissions [EOL] [EOL] [comment] [EOL] [comment] [EOL] if PerMethodPermission in view . permission_classes : [EOL] permission = PerMethodPermission ( ) [EOL] method_permissions = { } [EOL] for method in view . allowed_methods : [EOL] required_perms = permission . get_required_permissions ( method , view ) [EOL] method_permissions [ method . upper ( ) ] = request . user . has_perms ( required_perms ) [EOL] [EOL] metadata [ [string] ] = method_permissions [EOL] [EOL] return metadata [EOL] [EOL] def get_field_info ( self , field ) : [EOL] field_info = super ( ) . get_field_info ( field ) [EOL] [EOL] if isinstance ( field , DecimalField ) : [EOL] field_info [ [string] ] = field . decimal_places [EOL] field_info [ [string] ] = field . max_digits [EOL] [EOL] [comment] [EOL] if isinstance ( field , ChoiceField ) and field . field_name == [string] : [EOL] field_info [ [string] ] = [ { [string] : choice_value , [string] : _ ( choice_name ) . capitalize ( ) } for choice_value , choice_name in field . choices . items ( ) ] [EOL] [EOL] field_info [ [string] ] . sort ( key = lambda x : x [ [string] ] ) [EOL] [EOL] if isinstance ( field , PrimaryKeyRelatedField ) or isinstance ( field , EnumField ) : [EOL] [comment] [EOL] if hasattr ( field , [string] ) and field . queryset . model in ( User , Lease , Contact , Decision , Invoice , InvoiceSet , LeaseArea , Tenant , Inspection , ) : [EOL] return field_info [EOL] [EOL] field_info [ [string] ] = [ { [string] : choice_value , [string] : force_text ( choice_name , strings_only = True ) , } for choice_value , choice_name in field . choices . items ( ) ] [EOL] [EOL] return field_info [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 $leasing.permissions.PerMethodPermission$ 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.permissions.PerMethodPermission$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $leasing.permissions.PerMethodPermission$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.permissions.PerMethodPermission$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.permissions.PerMethodPermission$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from django . utils . translation import pgettext_lazy [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class Classification ( Enum ) : [EOL] [docstring] [EOL] [EOL] PUBLIC = [string] [EOL] CONFIDENTIAL = [string] [EOL] OFFICIAL = [string] [EOL] [EOL] class Labels : [EOL] PUBLIC = pgettext_lazy ( [string] , [string] ) [EOL] CONFIDENTIAL = pgettext_lazy ( [string] , [string] ) [EOL] OFFICIAL = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LeaseState ( Enum ) : [EOL] [docstring] [EOL] [EOL] LEASE = [string] [EOL] SHORT_TERM_LEASE = [string] [EOL] LONG_TERM_LEASE = [string] [EOL] RESERVATION = [string] [EOL] RESERVE = [string] [EOL] PERMISSION = [string] [EOL] APPLICATION = [string] [EOL] TENURE = [string] [EOL] RYA = [string] [EOL] [EOL] class Labels : [EOL] LEASE = pgettext_lazy ( [string] , [string] ) [EOL] SHORT_TERM_LEASE = pgettext_lazy ( [string] , [string] ) [EOL] LONG_TERM_LEASE = pgettext_lazy ( [string] , [string] ) [EOL] RESERVATION = pgettext_lazy ( [string] , [string] ) [EOL] RESERVE = pgettext_lazy ( [string] , [string] ) [EOL] PERMISSION = pgettext_lazy ( [string] , [string] ) [EOL] APPLICATION = pgettext_lazy ( [string] , [string] ) [EOL] TENURE = pgettext_lazy ( [string] , [string] ) [EOL] RYA = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LeaseRelationType ( Enum ) : [EOL] [docstring] [EOL] [EOL] TRANSFER = [string] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] TRANSFER = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class NoticePeriodType ( Enum ) : [EOL] [docstring] [EOL] [EOL] NO_PERIOD = [string] [EOL] TIME_PERIOD = [string] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] NO_PERIOD = pgettext_lazy ( [string] , [string] ) [EOL] TIME_PERIOD = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class TenantContactType ( Enum ) : [EOL] [docstring] [EOL] [EOL] TENANT = [string] [EOL] BILLING = [string] [EOL] CONTACT = [string] [EOL] [EOL] class Labels : [EOL] TENANT = pgettext_lazy ( [string] , [string] ) [EOL] BILLING = pgettext_lazy ( [string] , [string] ) [EOL] CONTACT = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LocationType ( Enum ) : [EOL] [docstring] [EOL] [EOL] SURFACE = [string] [EOL] UNDERGROUND = [string] [EOL] [EOL] class Labels : [EOL] SURFACE = pgettext_lazy ( [string] , [string] ) [EOL] UNDERGROUND = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LeaseAreaType ( Enum ) : [EOL] [docstring] [EOL] [EOL] PLAN_UNIT = [string] [EOL] REAL_PROPERTY = [string] [EOL] UNSEPARATED_PARCEL = [string] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] PLAN_UNIT = pgettext_lazy ( [string] , [string] ) [EOL] REAL_PROPERTY = pgettext_lazy ( [string] , [string] ) [EOL] UNSEPARATED_PARCEL = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LeaseAreaAttachmentType ( Enum ) : [EOL] [docstring] [EOL] [EOL] MATTI_REPORT = [string] [EOL] GEOTECHNICAL = [string] [EOL] [EOL] class Labels : [EOL] MATTI_REPORT = pgettext_lazy ( [string] , [string] ) [EOL] GEOTECHNICAL = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class PlotType ( Enum ) : [EOL] [docstring] [EOL] [EOL] REAL_PROPERTY = [string] [EOL] UNSEPARATED_PARCEL = [string] [EOL] [EOL] class Labels : [EOL] REAL_PROPERTY = pgettext_lazy ( [string] , [string] ) [EOL] UNSEPARATED_PARCEL = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class PeriodType ( Enum ) : [EOL] [docstring] [EOL] [EOL] PER_MONTH = [string] [EOL] PER_YEAR = [string] [EOL] [EOL] class Labels : [EOL] PER_MONTH = pgettext_lazy ( [string] , [string] ) [EOL] PER_YEAR = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class AreaUnit ( Enum ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] SQUARE_METRE = [string] [EOL] [comment] [EOL] FLOOR_SQUARE_METRE = [string] [EOL] [comment] [EOL] APARTMENT_SQUARE_METRE = [string] [EOL] [EOL] class Labels : [EOL] SQUARE_METRE = pgettext_lazy ( [string] , [string] ) [EOL] FLOOR_SQUARE_METRE = pgettext_lazy ( [string] , [string] ) [EOL] APARTMENT_SQUARE_METRE = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class ConstructabilityState ( Enum ) : [EOL] [docstring] [EOL] [EOL] UNVERIFIED = [string] [EOL] REQUIRES_MEASURES = [string] [EOL] ENQUIRY_SENT = [string] [EOL] COMPLETE = [string] [EOL] [EOL] class Labels : [EOL] UNVERIFIED = pgettext_lazy ( [string] , [string] ) [EOL] REQUIRES_MEASURES = pgettext_lazy ( [string] , [string] ) [EOL] ENQUIRY_SENT = pgettext_lazy ( [string] , [string] ) [EOL] COMPLETE = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class ConstructabilityType ( Enum ) : [EOL] [docstring] [EOL] [EOL] PRECONSTRUCTION = [string] [EOL] DEMOLITION = [string] [EOL] POLLUTED_LAND = [string] [EOL] REPORT = [string] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] PRECONSTRUCTION = pgettext_lazy ( [string] , [string] ) [EOL] DEMOLITION = pgettext_lazy ( [string] , [string] ) [EOL] POLLUTED_LAND = pgettext_lazy ( [string] , [string] ) [EOL] REPORT = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class PollutedLandRentConditionState ( Enum ) : [EOL] [docstring] [EOL] [EOL] ASKED = [string] [EOL] READY = [string] [EOL] [EOL] class Labels : [EOL] ASKED = pgettext_lazy ( [string] , [string] ) [EOL] READY = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class ConstructabilityReportInvestigationState ( Enum ) : [EOL] [docstring] [EOL] [EOL] NO_NEED = [string] [EOL] ONGOING = [string] [EOL] READY = [string] [EOL] [EOL] class Labels : [EOL] NO_NEED = pgettext_lazy ( [string] , [string] ) [EOL] ONGOING = pgettext_lazy ( [string] , [string] ) [EOL] READY = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class RentType ( Enum ) : [EOL] [docstring] [EOL] [EOL] INDEX = [string] [comment] [EOL] ONE_TIME = [string] [comment] [EOL] FIXED = [string] [comment] [EOL] FREE = [string] [comment] [EOL] MANUAL = [string] [comment] [EOL] [EOL] class Labels : [EOL] INDEX = pgettext_lazy ( [string] , [string] ) [EOL] ONE_TIME = pgettext_lazy ( [string] , [string] ) [EOL] FIXED = pgettext_lazy ( [string] , [string] ) [EOL] FREE = pgettext_lazy ( [string] , [string] ) [EOL] MANUAL = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class RentCycle ( Enum ) : [EOL] [docstring] [EOL] [EOL] JANUARY_TO_DECEMBER = [string] [EOL] APRIL_TO_MARCH = [string] [EOL] [EOL] class Labels : [EOL] JANUARY_TO_DECEMBER = pgettext_lazy ( [string] , [string] ) [EOL] APRIL_TO_MARCH = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class IndexType ( Enum ) : [EOL] [docstring] [EOL] [EOL] TYPE_1 = [string] [EOL] TYPE_2 = [string] [EOL] TYPE_3 = [string] [EOL] TYPE_4 = [string] [EOL] TYPE_5 = [string] [EOL] TYPE_6 = [string] [EOL] TYPE_7 = [string] [EOL] [EOL] class Labels : [EOL] TYPE_1 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_2 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_3 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_4 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_5 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_6 = pgettext_lazy ( [string] , [string] ) [EOL] TYPE_7 = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class DueDatesType ( Enum ) : [EOL] [docstring] [EOL] [EOL] CUSTOM = [string] [EOL] FIXED = [string] [EOL] [EOL] class Labels : [EOL] CUSTOM = pgettext_lazy ( [string] , [string] ) [EOL] FIXED = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class DueDatesPosition ( Enum ) : [EOL] [docstring] [EOL] [EOL] START_OF_MONTH = [string] [EOL] MIDDLE_OF_MONTH = [string] [EOL] [EOL] class Labels : [EOL] START_OF_MONTH = pgettext_lazy ( [string] , [string] ) [EOL] MIDDLE_OF_MONTH = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class RentAdjustmentType ( Enum ) : [EOL] [docstring] [EOL] [EOL] DISCOUNT = [string] [EOL] INCREASE = [string] [EOL] [EOL] class Labels : [EOL] DISCOUNT = pgettext_lazy ( [string] , [string] ) [EOL] INCREASE = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class RentAdjustmentAmountType ( Enum ) : [EOL] [docstring] [EOL] [EOL] PERCENT_PER_YEAR = [string] [EOL] AMOUNT_PER_YEAR = [string] [EOL] AMOUNT_TOTAL = [string] [EOL] [EOL] class Labels : [EOL] PERCENT_PER_YEAR = pgettext_lazy ( [string] , [string] ) [EOL] AMOUNT_PER_YEAR = pgettext_lazy ( [string] , [string] ) [EOL] AMOUNT_TOTAL = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class SubventionType ( Enum ) : [EOL] [docstring] [EOL] [EOL] FORM_OF_MANAGEMENT = [string] [comment] [EOL] RE_LEASE = [string] [comment] [EOL] [EOL] class Labels : [EOL] FORM_OF_MANAGEMENT = pgettext_lazy ( [string] , [string] ) [EOL] RE_LEASE = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class InvoiceDeliveryMethod ( Enum ) : [EOL] [docstring] [EOL] [EOL] MAIL = [string] [EOL] ELECTRONIC = [string] [EOL] [EOL] class Labels : [EOL] MAIL = pgettext_lazy ( [string] , [string] ) [EOL] ELECTRONIC = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class InvoiceState ( Enum ) : [EOL] [docstring] [EOL] [EOL] OPEN = [string] [EOL] PAID = [string] [EOL] REFUNDED = [string] [EOL] [EOL] class Labels : [EOL] OPEN = pgettext_lazy ( [string] , [string] ) [EOL] PAID = pgettext_lazy ( [string] , [string] ) [EOL] REFUNDED = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class InvoiceType ( Enum ) : [EOL] [docstring] [EOL] [EOL] CHARGE = [string] [EOL] CREDIT_NOTE = [string] [EOL] [EOL] class Labels : [EOL] CHARGE = pgettext_lazy ( [string] , [string] ) [EOL] CREDIT_NOTE = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class ContactType ( Enum ) : [EOL] [docstring] [EOL] [EOL] PERSON = [string] [EOL] BUSINESS = [string] [EOL] UNIT = [string] [EOL] ASSOCIATION = [string] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] PERSON = pgettext_lazy ( [string] , [string] ) [EOL] BUSINESS = pgettext_lazy ( [string] , [string] ) [EOL] UNIT = pgettext_lazy ( [string] , [string] ) [EOL] ASSOCIATION = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class InfillDevelopmentCompensationState ( Enum ) : [EOL] [docstring] [EOL] [EOL] ONGOING = [string] [EOL] NEGOTIATING = [string] [EOL] DECISION = [string] [EOL] [EOL] class Labels : [EOL] ONGOING = pgettext_lazy ( [string] , [string] ) [EOL] NEGOTIATING = pgettext_lazy ( [string] , [string] ) [EOL] DECISION = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class AreaType ( Enum ) : [EOL] [docstring] [EOL] [EOL] LEASE_AREA = [string] [comment] [EOL] PLAN_UNIT = [string] [comment] [EOL] REAL_PROPERTY = [string] [comment] [EOL] UNSEPARATED_PARCEL = [string] [comment] [EOL] PLOT_DIVISION = [string] [comment] [EOL] BASIS_OF_RENT = [string] [comment] [EOL] INFILL_DEVELOPMENT_COMPENSATION = ( [string] ) [EOL] LAND_USE_AGREEMENT = [string] [comment] [EOL] DETAILED_PLAN = [string] [comment] [EOL] OTHER = [string] [EOL] [EOL] class Labels : [EOL] LEASE_AREA = pgettext_lazy ( [string] , [string] ) [EOL] PLAN_UNIT = pgettext_lazy ( [string] , [string] ) [EOL] REAL_PROPERTY = pgettext_lazy ( [string] , [string] ) [EOL] UNSEPARATED_PARCEL = pgettext_lazy ( [string] , [string] ) [EOL] PLOT_DIVISION = pgettext_lazy ( [string] , [string] ) [EOL] BASIS_OF_RENT = pgettext_lazy ( [string] , [string] ) [EOL] INFILL_DEVELOPMENT_COMPENSATION = pgettext_lazy ( [string] , [string] ) [EOL] LAND_USE_AGREEMENT = pgettext_lazy ( [string] , [string] ) [EOL] DETAILED_PLAN = pgettext_lazy ( [string] , [string] ) [EOL] OTHER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class EmailLogType ( Enum ) : [EOL] [docstring] [EOL] [EOL] CONSTRUCTABILITY = [string] [EOL] [EOL] class Labels : [EOL] CONSTRUCTABILITY = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class LeaseholdTransferPartyType ( Enum ) : [EOL] [docstring] [EOL] [EOL] LESSOR = [string] [comment] [EOL] CONVEYOR = [string] [comment] [EOL] ACQUIRER = [string] [comment] [EOL] [EOL] class Labels : [EOL] LESSOR = pgettext_lazy ( [string] , [string] ) [EOL] CONVEYOR = pgettext_lazy ( [string] , [string] ) [EOL] ACQUIRER = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class DecisionTypeKind ( Enum ) : [EOL] [docstring] [EOL] [EOL] LEASE_CANCELLATION = [string] [comment] [EOL] BASIS_OF_RENT = [string] [comment] [EOL] [EOL] class Labels : [EOL] LEASE_CANCELLATION = pgettext_lazy ( [string] , [string] ) [EOL] BASIS_OF_RENT = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class BasisOfRentType ( Enum ) : [EOL] [docstring] [EOL] [EOL] LEASE = [string] [comment] [EOL] TEMPORARY = [string] [comment] [EOL] ADDITIONAL_YARD = [string] [comment] [EOL] FIELD = [string] [comment] [EOL] MAST = [string] [comment] [EOL] [EOL] class Labels : [EOL] LEASE = pgettext_lazy ( [string] , [string] ) [EOL] TEMPORARY = pgettext_lazy ( [string] , [string] ) [EOL] ADDITIONAL_YARD = pgettext_lazy ( [string] , [string] ) [EOL] FIELD = pgettext_lazy ( [string] , [string] ) [EOL] MAST = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class BasisOfRentZone ( Enum ) : [EOL] [docstring] [EOL] [EOL] ZONE_1 = [string] [EOL] ZONE_2 = [string] [EOL] ZONE_3 = [string] [EOL] [EOL] class Labels : [EOL] ZONE_1 = pgettext_lazy ( [string] , [string] ) [EOL] ZONE_2 = pgettext_lazy ( [string] , [string] ) [EOL] ZONE_3 = pgettext_lazy ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.Classification.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.Classification.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.Classification.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseRelationType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.NoticePeriodType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.NoticePeriodType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.TenantContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.TenantContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.TenantContactType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LocationType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LocationType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseAreaAttachmentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseAreaAttachmentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.PeriodType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.PeriodType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaUnit.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaUnit.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaUnit.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.PollutedLandRentConditionState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityReportInvestigationState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityReportInvestigationState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InfillDevelopmentCompensationState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ConstructabilityReportInvestigationState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DueDatesType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentCycle.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentCycle.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.IndexType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DueDatesType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DueDatesType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DueDatesPosition.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DueDatesPosition.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentAdjustmentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentAdjustmentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentAdjustmentAmountType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentAdjustmentAmountType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.RentAdjustmentAmountType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.SubventionType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.SubventionType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceDeliveryMethod.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceDeliveryMethod.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InvoiceType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.ContactType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InfillDevelopmentCompensationState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InfillDevelopmentCompensationState.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.InfillDevelopmentCompensationState.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DecisionTypeKind.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.AreaType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.EmailLogType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseholdTransferPartyType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseholdTransferPartyType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.LeaseholdTransferPartyType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DecisionTypeKind.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.DecisionTypeKind.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentZone.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentZone.Labels]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.enums.BasisOfRentZone.Labels]$ 0 0 0 0 0 0 0 0
from typing import Type , List , Dict , Any [EOL] import typing [EOL] import leasing [EOL] import datetime [EOL] [EOL] from django . db . models . functions import Coalesce [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django_filters . rest_framework import FilterSet , filters [EOL] from rest_framework . filters import OrderingFilter [EOL] [EOL] from leasing . models import CollectionCourtDecision , CollectionLetter , CollectionNote [EOL] from leasing . models . invoice import InvoiceNote , InvoiceRow , InvoiceSet [EOL] [EOL] from . models import Comment , Contact , Decision , District , Index , Invoice , Lease [EOL] [EOL] [EOL] class CoalesceOrderingFilter ( OrderingFilter ) : [EOL] [docstring] [EOL] [EOL] def filter_queryset ( self , request , queryset , view ) : [EOL] ordering = self . get_ordering ( request , queryset , view ) [EOL] [EOL] if ordering : [EOL] if hasattr ( view , [string] ) : [EOL] for ordering_term in ordering : [EOL] ordering_term = ordering_term . lstrip ( [string] ) [EOL] [EOL] if ordering_term in view . coalesce_ordering : [EOL] kwargs = { ordering_term : Coalesce ( * view . coalesce_ordering [ ordering_term ] ) } [EOL] queryset = queryset . annotate ( ** kwargs ) [EOL] [EOL] return queryset . order_by ( * ordering ) [EOL] [EOL] return queryset [EOL] [EOL] [EOL] class CollectionCourtDecisionFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = CollectionCourtDecision [EOL] fields = [ [string] ] [EOL] [EOL] [EOL] class CollectionLetterFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = CollectionLetter [EOL] fields = [ [string] ] [EOL] [EOL] [EOL] class CollectionNoteFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = CollectionNote [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class CommentFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class ContactFilter ( FilterSet ) : [EOL] class Meta : [EOL] model = Contact [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class DecisionFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = Decision [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class DistrictFilter ( FilterSet ) : [EOL] class Meta : [EOL] model = District [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class IndexFilter ( FilterSet ) : [EOL] class Meta : [EOL] model = Index [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class InvoiceFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] going_to_sap = filters . BooleanFilter ( method = [string] , label = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def filter_going_to_sap ( self , queryset , name , value ) : [EOL] if value : [EOL] return queryset . filter ( due_date__gte = datetime . date . today ( ) , sent_to_sap_at__isnull = True ) [EOL] return queryset [EOL] [EOL] [EOL] class InvoiceNoteFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = InvoiceNote [EOL] fields = [ [string] ] [EOL] [EOL] [EOL] class InvoiceSetFilter ( FilterSet ) : [EOL] lease = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = InvoiceSet [EOL] fields = [ [string] ] [EOL] [EOL] [EOL] class InvoiceRowFilter ( FilterSet ) : [EOL] invoice = filters . NumberFilter ( ) [EOL] [EOL] class Meta : [EOL] model = InvoiceRow [EOL] fields = [ [string] ] [EOL] [EOL] [EOL] class LeaseFilter ( FilterSet ) : [EOL] class Meta : [EOL] model = Lease [EOL] fields = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.CollectionCourtDecisionFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.CollectionLetterFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.CollectionNoteFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.CommentFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.DecisionFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.InvoiceFilter]$ 0 0 0 0 0 0 0 $typing.Type[leasing.filters.InvoiceFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.InvoiceNoteFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.InvoiceSetFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.filters.InvoiceRowFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Lease]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . renderers import BrowsableAPIRenderer [EOL] [EOL] [EOL] [comment] [EOL] class BrowsableAPIRendererWithoutForms ( BrowsableAPIRenderer ) : [EOL] [docstring] [EOL] [EOL] def get_context ( self , * args , ** kwargs ) : [EOL] ctx = super ( ) . get_context ( * args , ** kwargs ) [EOL] return ctx [EOL] [EOL] def get_rendered_html_form ( self , data , view , method , request ) : [EOL] [docstring] [EOL] [EOL] if method in ( [string] , [string] ) : [EOL] return True [EOL] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core import validators as core_validators [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] business_id_re = core_validators . _lazy_re_compile ( [string] ) [EOL] validate_business_id = core_validators . RegexValidator ( business_id_re , _ ( [string] ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional , List , Set , Any [EOL] import typing [EOL] import xml [EOL] from xml . etree import ElementTree [EOL] [EOL] from django . conf import settings [EOL] [EOL] from . models import Contact [EOL] [EOL] [EOL] def serialize_invoice ( invoice ) : [EOL] lease = invoice . tenants . first ( ) . lease [EOL] [EOL] root = ElementTree . Element ( [string] ) [EOL] sender_id = ElementTree . SubElement ( root , [string] ) [EOL] sender_id . text = get_laske_value ( [string] ) [EOL] reference = ElementTree . SubElement ( root , [string] ) [EOL] if invoice . reference_number : [EOL] reference . text = invoice . reference_number [EOL] ElementTree . SubElement ( root , [string] ) [EOL] contract_number = ElementTree . SubElement ( root , [string] ) [EOL] contract_number . text = lease . get_contract_number ( ) [EOL] order_type = ElementTree . SubElement ( root , [string] ) [EOL] order_type . text = get_laske_value ( [string] ) [EOL] sales_org = ElementTree . SubElement ( root , [string] ) [EOL] sales_org . text = get_laske_value ( [string] ) [EOL] distribution_channel = ElementTree . SubElement ( root , [string] ) [EOL] distribution_channel . text = get_laske_value ( [string] ) [EOL] division = ElementTree . SubElement ( root , [string] ) [EOL] division . text = get_laske_value ( [string] ) [EOL] sales_office = ElementTree . SubElement ( root , [string] ) [EOL] sales_office . text = get_laske_value ( [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] [EOL] root . extend ( get_laske_bill_text_elements ( invoice ) ) [EOL] [EOL] ElementTree . SubElement ( root , [string] ) [EOL] pmntterm = ElementTree . SubElement ( root , [string] ) [EOL] pmntterm . text = get_laske_value ( [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] billing_date = ElementTree . SubElement ( root , [string] ) [EOL] billing_date . text = invoice . created_at . strftime ( [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] value_date = ElementTree . SubElement ( root , [string] ) [EOL] value_date . text = invoice . created_at . strftime ( [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] [EOL] root . extend ( get_laske_parties ( invoice ) ) [EOL] root . append ( get_laske_line_item ( invoice ) ) [EOL] [EOL] return root [EOL] [EOL] [EOL] def get_laske_value ( name ) : [EOL] return getattr ( settings , [string] , { } ) . get ( name , [string] ) [EOL] [EOL] [EOL] def get_laske_bill_text_elements ( invoice ) : [EOL] elements = [ ] [EOL] [EOL] lease = invoice . tenants . first ( ) . lease [EOL] [EOL] bill_text_l1 = ElementTree . Element ( [string] ) [EOL] bill_text_l1 . text = [string] . format ( lease . identifier_string ( ) , invoice . period_start_date . strftime ( [string] ) , invoice . period_end_date . strftime ( [string] ) , ) [EOL] elements . append ( bill_text_l1 ) [EOL] [EOL] bill_text_l2 = ElementTree . Element ( [string] ) [EOL] bill_text_l2 . text = [string] . format ( lease . end_date . strftime ( [string] ) if lease . end_date else [string] ) [EOL] elements . append ( bill_text_l2 ) [EOL] [EOL] bill_text_l3 = ElementTree . Element ( [string] ) [EOL] bill_text_l3 . text = [string] [EOL] elements . append ( bill_text_l3 ) [EOL] [EOL] bill_text_l4 = ElementTree . Element ( [string] ) [EOL] bill_text_l4 . text = [string] . format ( lease . get_year_rent ( ) ) [EOL] elements . append ( bill_text_l4 ) [EOL] [EOL] bill_text_l5 = ElementTree . Element ( [string] ) [EOL] bill_text_l5 . text = [string] . format ( [string] . join ( lease . get_real_property_unit_identifiers ( ) ) ) [EOL] elements . append ( bill_text_l5 ) [EOL] [EOL] bill_text_l6 = ElementTree . Element ( [string] ) [EOL] bill_text_l6 . text = [string] . format ( [string] . join ( lease . get_real_property_unit_addresses ( ) ) ) [EOL] elements . append ( bill_text_l6 ) [EOL] [EOL] return elements [EOL] [EOL] [EOL] def get_laske_parties ( invoice ) : [EOL] elements = [ ] [EOL] [EOL] if invoice . billing_contact : [EOL] elements . append ( serialize_contact ( invoice . billing_contact , [string] ) ) [EOL] elements . append ( serialize_contact ( invoice . billing_contact , [string] ) ) [EOL] elements . append ( serialize_contact ( Contact ( ) , [string] ) ) [EOL] elements . append ( serialize_contact ( invoice . billing_contact , [string] ) ) [EOL] else : [EOL] elements . append ( serialize_contact ( Contact ( ) , [string] ) ) [EOL] elements . append ( serialize_contact ( Contact ( ) , [string] ) ) [EOL] elements . append ( serialize_contact ( Contact ( ) , [string] ) ) [EOL] elements . append ( serialize_contact ( Contact ( ) , [string] ) ) [EOL] [EOL] return elements [EOL] [EOL] [EOL] def serialize_contact ( contact , tag_name ) : [EOL] root = ElementTree . Element ( tag_name ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] customer_yid = ElementTree . SubElement ( root , [string] ) [EOL] customer_yid . text = contact . organization_id if contact . organization_id else None [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] priority_name1 = ElementTree . SubElement ( root , [string] ) [EOL] if contact . organization_name : [EOL] priority_name1 . text = contact . organization_name [EOL] elif contact . name : [EOL] priority_name1 . text = contact . name [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] priority_address1 = ElementTree . SubElement ( root , [string] ) [EOL] if contact . organization_address : [EOL] priority_address1 . text = contact . organization_address [EOL] elif contact . address : [EOL] priority_address1 . text = contact . address [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] info_customer_yid = ElementTree . SubElement ( root , [string] ) [EOL] info_customer_yid . text = ( contact . organization_id if contact . organization_id else None ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] info_name1 = ElementTree . SubElement ( root , [string] ) [EOL] if contact . organization_name : [EOL] info_name1 . text = contact . organization_name [EOL] elif contact . name : [EOL] info_name1 . text = contact . name [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] info_address1 = ElementTree . SubElement ( root , [string] ) [EOL] if contact . organization_address : [EOL] info_address1 . text = contact . organization_address [EOL] elif contact . address : [EOL] info_address1 . text = contact . address [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] ElementTree . SubElement ( root , [string] ) [EOL] [EOL] return root [EOL] [EOL] [EOL] def get_laske_line_item ( invoice ) : [EOL] line_item = ElementTree . Element ( [string] ) [EOL] [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] material = ElementTree . SubElement ( line_item , [string] ) [EOL] material . text = [string] [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] quantity = ElementTree . SubElement ( line_item , [string] ) [EOL] quantity . text = [string] [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] net_price = ElementTree . SubElement ( line_item , [string] ) [EOL] net_price . text = [string] . format ( invoice . amount ) . replace ( [string] , [string] ) [EOL] line_text_l1 = ElementTree . SubElement ( line_item , [string] ) [EOL] [EOL] lease = invoice . tenants . first ( ) . lease [EOL] lease_tenants = set ( lease . tenants . all ( ) ) [EOL] invoice_tenants = set ( invoice . tenants . all ( ) ) [EOL] [EOL] if lease_tenants . difference ( invoice_tenants ) : [EOL] names = [ str ( tenant . contact ) for tenant in lease_tenants . difference ( invoice_tenants ) ] [EOL] line_text_l1 . text = [string] . format ( [string] . join ( names ) ) [EOL] [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] line_text_l4 = ElementTree . SubElement ( line_item , [string] ) [EOL] line_text_l4 . text = ( [string] ) [EOL] line_text_l5 = ElementTree . SubElement ( line_item , [string] ) [EOL] line_text_l5 . text = ( [string] . format ( ) ) [EOL] line_text_l6 = ElementTree . SubElement ( line_item , [string] ) [EOL] line_text_l6 . text = [string] . format ( ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] order_item_number = ElementTree . SubElement ( line_item , [string] ) [EOL] order_item_number . text = [string] [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] ElementTree . SubElement ( line_item , [string] ) [EOL] [EOL] return line_item [EOL]	
from typing import Literal , Dict , Any , Union , Callable , List , Type , Tuple [EOL] import typing [EOL] import requests [EOL] import typing_extensions [EOL] import leasing [EOL] import requests [EOL] from django . conf import settings [EOL] from django . http import ( Http404 , HttpResponse , HttpResponseServerError , JsonResponse , StreamingHttpResponse , ) [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from requests import Session [EOL] from requests . auth import HTTPBasicAuth [EOL] from rest_framework . decorators import api_view , permission_classes [EOL] from rest_framework . exceptions import APIException [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . views import APIView [EOL] from zeep import Client , Settings [EOL] from zeep . helpers import serialize_object [EOL] from zeep . transports import Transport [EOL] [EOL] from leasing . permissions import PerMethodPermission [EOL] [EOL] [EOL] def are_settings_available ( required_settings ) : [EOL] for required_setting in required_settings : [EOL] if not hasattr ( settings , required_setting ) or not getattr ( settings , required_setting ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] [EOL] @ api_view ( ) @ permission_classes ( [ IsAuthenticated ] ) def ktj_proxy ( request , base_type , print_type ) : [EOL] required_settings = ( [string] , [string] , [string] , ) [EOL] [EOL] if not are_settings_available ( required_settings ) : [EOL] return HttpResponseServerError ( [string] . format ( [string] . join ( required_settings ) ) ) [EOL] [EOL] allowed_types = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] allowed_params = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] if print_type not in allowed_types : [EOL] raise Http404 [EOL] [EOL] url = [string] . format ( settings . KTJ_PRINT_ROOT_URL , base_type , print_type ) [EOL] params = request . GET . copy ( ) [EOL] [EOL] for param in request . GET : [EOL] if param not in allowed_params : [EOL] del params [ param ] [EOL] [EOL] r = requests . get ( url , params = params , auth = HTTPBasicAuth ( settings . KTJ_PRINT_USERNAME , settings . KTJ_PRINT_PASSWORD ) , stream = True , ) [EOL] [EOL] if r . status_code != [number] : [EOL] content = _ ( [string] ) [EOL] if settings . DEBUG : [EOL] content = r . content [EOL] [EOL] return HttpResponse ( status = r . status_code , content = content ) [EOL] [EOL] return StreamingHttpResponse ( status = r . status_code , reason = r . reason , content_type = r . headers [ [string] ] , streaming_content = r . raw , ) [EOL] [EOL] [EOL] class CloudiaProxy ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None , contract_id = None , file_id = None ) : [EOL] required_settings = ( [string] , [string] , [string] ) [EOL] [EOL] if not are_settings_available ( required_settings ) : [EOL] return HttpResponseServerError ( [string] . format ( [string] . join ( required_settings ) ) ) [EOL] [EOL] data = { [string] : contract_id } [EOL] [EOL] if not file_id : [EOL] url = [string] . format ( settings . CLOUDIA_ROOT_URL ) [EOL] else : [EOL] if not file_id . isdigit ( ) and not file_id == [string] : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] url = [string] . format ( settings . CLOUDIA_ROOT_URL , file_id ) [EOL] [EOL] r = requests . post ( url , json = data , auth = HTTPBasicAuth ( settings . CLOUDIA_USERNAME , settings . CLOUDIA_PASSWORD ) , stream = True , ) [EOL] [EOL] if r . status_code != [number] : [EOL] content = _ ( [string] ) [EOL] if settings . DEBUG : [EOL] content = r . content [EOL] [EOL] return HttpResponse ( status = r . status_code , content = content ) [EOL] [EOL] return StreamingHttpResponse ( status = r . status_code , reason = r . reason , content_type = r . headers [ [string] ] , streaming_content = r . raw , ) [EOL] [EOL] [EOL] class VirreProxy ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None , service = None , business_id = None ) : [EOL] required_settings = ( [string] , [string] , [string] ) [EOL] [EOL] if not are_settings_available ( required_settings ) : [EOL] return HttpResponseServerError ( [string] . format ( [string] . join ( required_settings ) ) ) [EOL] [EOL] known_services = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] known_pdf_services = { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , } [EOL] [EOL] if service not in known_services . keys ( ) : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] session = Session ( ) [EOL] session . auth = HTTPBasicAuth ( settings . VIRRE_USERNAME , settings . VIRRE_PASSWORD ) [EOL] soap_settings = Settings ( strict = False ) [EOL] [EOL] wsdl_service = [string] . format ( known_services [ service ] ) [EOL] [EOL] client = Client ( [string] . format ( host = settings . VIRRE_API_URL , wsdl_service = wsdl_service ) , transport = Transport ( session = session ) , settings = soap_settings , ) [EOL] [EOL] data = { [string] : settings . VIRRE_USERNAME , [string] : business_id } [EOL] action = [string] . format ( known_services [ service ] ) [EOL] result = getattr ( client . service , action ) ( ** data ) [EOL] [EOL] if service in known_pdf_services . keys ( ) : [EOL] response_key = known_pdf_services [ service ] [ [string] ] [EOL] pdf_key = known_pdf_services [ service ] [ [string] ] [EOL] [EOL] if response_key not in result : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] try : [EOL] response = HttpResponse ( result [ response_key ] [ pdf_key ] , content_type = [string] ) [EOL] except KeyError : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] response [ [string] ] = [string] . format ( service , business_id ) [EOL] return response [EOL] [EOL] else : [EOL] return JsonResponse ( serialize_object ( result ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $requests.models.Response$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 $requests.sessions.Session$ 0 $typing.Union[typing.Callable[[requests.models.PreparedRequest],requests.models.PreparedRequest],None,requests.auth.AuthBase,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $requests.sessions.Session$ 0 $requests.sessions.Session$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] import enumfields . fields [EOL] import leasing . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumField ( default = [string] , enum = leasing . enums . AreaUnit , max_length = [number] , verbose_name = [string] , ) , preserve_default = False , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import re [EOL] [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( re . compile ( [string] ) , [string] , [string] ) ] , verbose_name = [string] , ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( re . compile ( [string] ) , [string] , [string] ) ] , verbose_name = [string] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import enumfields . fields [EOL] import leasing . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] , verbose_name = [string] , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumField ( default = [string] , enum = leasing . enums . BasisOfRentType , max_length = [number] , verbose_name = [string] , ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveIntegerField ( blank = True , null = True , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] import enumfields . fields [EOL] import leasing . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumField ( blank = True , enum = leasing . enums . BasisOfRentZone , max_length = [number] , null = True , verbose_name = [string] , ) , ) , migrations . RunSQL ( [string] , reverse_sql = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple , Any [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] def forwards_func ( apps , schema_editor ) : [EOL] ReceivableType = apps . get_model ( [string] , [string] ) [EOL] db_alias = schema_editor . connection . alias [EOL] [EOL] [comment] [EOL] ReceivableType . objects . using ( db_alias ) . filter ( id = [number] ) . update ( is_active = False ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = True , verbose_name = [string] ) , ) , migrations . RunPython ( forwards_func , migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from django_countries . serializers import CountryFieldMixin [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] [EOL] from . . models import Contact [EOL] [EOL] [EOL] class ContactSerializer ( EnumSupportSerializerMixin , CountryFieldMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = Contact [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contact.ContactSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.contact.Contact]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] from leasing . models . contract import Collateral , CollateralType [EOL] [EOL] from . . models import Contract , ContractChange , ContractType , Decision [EOL] from . decision import DecisionSerializer [EOL] from . utils import ( InstanceDictPrimaryKeyRelatedField , NameModelSerializer , UpdateNestedMixin , ) [EOL] [EOL] [EOL] class ContractChangeSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = ContractChange [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ContractChangeCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] decision = InstanceDictPrimaryKeyRelatedField ( instance_class = Decision , queryset = Decision . objects . all ( ) , related_serializer = DecisionSerializer , required = False , allow_null = True , ) [EOL] [EOL] class Meta : [EOL] model = ContractChange [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class CollateralTypeSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = CollateralType [EOL] fields = [string] [EOL] [EOL] [EOL] class CollateralSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = Collateral [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class CollateralCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] type = InstanceDictPrimaryKeyRelatedField ( instance_class = CollateralType , queryset = CollateralType . objects . all ( ) , related_serializer = CollateralTypeSerializer , ) [EOL] [EOL] class Meta : [EOL] model = Collateral [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class ContractTypeSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = ContractType [EOL] fields = [string] [EOL] [EOL] [EOL] class ContractSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] contract_changes = ContractChangeSerializer ( many = True , required = False , allow_null = True ) [EOL] collaterals = CollateralSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = Contract [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class ContractCreateUpdateSerializer ( UpdateNestedMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] type = InstanceDictPrimaryKeyRelatedField ( instance_class = ContractType , queryset = ContractType . objects . all ( ) , related_serializer = ContractTypeSerializer , ) [EOL] decision = InstanceDictPrimaryKeyRelatedField ( instance_class = Decision , queryset = Decision . objects . all ( ) , related_serializer = DecisionSerializer , required = False , allow_null = True , ) [EOL] contract_changes = ContractChangeCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] collaterals = CollateralCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = Contract [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractChangeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractChangeCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.CollateralSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.CollateralCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contract.ContractChangeSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contract.CollateralSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contract.ContractChangeCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contract.CollateralCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.contract.ContractCreateUpdateSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] from users . serializers import UserSerializer [EOL] [EOL] from . . models import Comment , CommentTopic [EOL] from . utils import InstanceDictPrimaryKeyRelatedField [EOL] [EOL] [EOL] class CommentTopicSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] [EOL] class Meta : [EOL] model = CommentTopic [EOL] fields = [string] [EOL] [EOL] [EOL] class CommentSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] user = UserSerializer ( read_only = True ) [EOL] topic = CommentTopicSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] fields = [string] [EOL] [EOL] [EOL] class CommentCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] user = serializers . HiddenField ( default = serializers . CurrentUserDefault ( ) ) [EOL] topic = InstanceDictPrimaryKeyRelatedField ( instance_class = CommentTopic , queryset = CommentTopic . objects . all ( ) , related_serializer = CommentTopicSerializer , ) [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentTopicSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.comment.Comment]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentSerializer]$ 0 0 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.comment.CommentTopicSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.comment.Comment]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.comment.Comment]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] import users [EOL] from enumfields . drf import EnumField , EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] from rest_framework . relations import PrimaryKeyRelatedField [EOL] [EOL] from leasing . enums import EmailLogType [EOL] from leasing . models import EmailLog , Lease [EOL] from leasing . serializers . lease import LeaseSuccinctSerializer [EOL] from leasing . serializers . utils import InstanceDictPrimaryKeyRelatedField [EOL] from users . models import User [EOL] from users . serializers import UserSerializer [EOL] [EOL] [EOL] class EmailLogSerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] user = UserSerializer ( ) [EOL] recipients = UserSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = EmailLog [EOL] exclude = ( [string] , [string] ) [EOL] [EOL] [EOL] class SendEmailSerializer ( EnumSupportSerializerMixin , serializers . Serializer ) : [EOL] type = EnumField ( enum = EmailLogType , required = True ) [EOL] recipients = PrimaryKeyRelatedField ( many = True , queryset = User . objects . all ( ) ) [EOL] text = serializers . CharField ( ) [EOL] lease = InstanceDictPrimaryKeyRelatedField ( instance_class = Lease , queryset = Lease . objects . all ( ) , related_serializer = LeaseSuccinctSerializer , required = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.email.SendEmailSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.email.SendEmailSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.email.SendEmailSerializer]$ 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] [EOL] from . . models import Condition , ConditionType , Decision , DecisionMaker , DecisionType [EOL] from . utils import ( InstanceDictPrimaryKeyRelatedField , NameModelSerializer , UpdateNestedMixin , ) [EOL] [EOL] [EOL] class ConditionTypeSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = ConditionType [EOL] fields = [string] [EOL] [EOL] [EOL] class ConditionSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = Condition [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ConditionCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] type = InstanceDictPrimaryKeyRelatedField ( instance_class = ConditionType , queryset = ConditionType . objects . filter ( ) , related_serializer = ConditionTypeSerializer , required = False , allow_null = True , ) [EOL] [EOL] class Meta : [EOL] model = Condition [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class DecisionMakerSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = DecisionMaker [EOL] fields = [string] [EOL] [EOL] [EOL] class DecisionTypeSerializer ( EnumSupportSerializerMixin , NameModelSerializer ) : [EOL] class Meta : [EOL] model = DecisionType [EOL] fields = [string] [EOL] [EOL] [EOL] class DecisionSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] type = DecisionTypeSerializer ( required = False , allow_null = True ) [EOL] conditions = ConditionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = Decision [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class DecisionCreateUpdateNestedSerializer ( UpdateNestedMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] id = serializers . IntegerField ( required = False ) [EOL] type = InstanceDictPrimaryKeyRelatedField ( instance_class = DecisionType , queryset = DecisionType . objects . filter ( ) , related_serializer = DecisionTypeSerializer , required = False , allow_null = True , ) [EOL] conditions = ConditionCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] decision_maker = InstanceDictPrimaryKeyRelatedField ( instance_class = DecisionMaker , queryset = DecisionMaker . objects . filter ( ) , related_serializer = DecisionMakerSerializer , required = False , allow_null = True , ) [EOL] [EOL] class Meta : [EOL] model = Decision [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class DecisionCreateUpdateSerializer ( UpdateNestedMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] id = serializers . IntegerField ( required = False ) [EOL] conditions = ConditionCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] decision_maker = InstanceDictPrimaryKeyRelatedField ( instance_class = DecisionMaker , queryset = DecisionMaker . objects . filter ( ) , related_serializer = DecisionMakerSerializer , required = False , allow_null = True , ) [EOL] [EOL] class Meta : [EOL] model = Decision [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.ConditionSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.ConditionCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.DecisionSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.DecisionTypeSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.ConditionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.DecisionCreateUpdateNestedSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.ConditionCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.DecisionCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.ConditionCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.decision.Decision]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] from users . serializers import UserSerializer [EOL] [EOL] from . . models import UiData [EOL] [EOL] [EOL] class UiDataSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] user = UserSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = UiData [EOL] fields = [string] [EOL] [EOL] [EOL] class UiDataCreateUpdateSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] [EOL] class Meta : [EOL] model = UiData [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.ui_data.UiDataSerializer]$ 0 0 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.ui_data.UiDataCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] [EOL] from . . models import LeaseholdTransfer , LeaseholdTransferParty [EOL] [EOL] [EOL] class LeaseholdTransferPartySerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] class Meta : [EOL] model = LeaseholdTransferParty [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class LeaseholdTransferSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] properties = serializers . SlugRelatedField ( slug_field = [string] , many = True , read_only = True ) [EOL] parties = LeaseholdTransferPartySerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = LeaseholdTransfer [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.leasehold_transfer.LeaseholdTransfer]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.leasehold_transfer.LeaseholdTransferSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.leasehold_transfer.LeaseholdTransferPartySerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.leasehold_transfer.LeaseholdTransfer]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Any , Type , List , Tuple [EOL] import typing [EOL] import leasing [EOL] import users [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] from rest_framework . exceptions import ValidationError [EOL] from rest_framework . serializers import ListSerializer [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] from leasing . enums import DueDatesType , RentAdjustmentAmountType , RentCycle [EOL] from leasing . models import Index [EOL] from leasing . models . rent import ( EqualizedRent , LeaseBasisOfRentManagementSubvention , LeaseBasisOfRentTemporarySubvention , ManagementSubvention , ManagementSubventionFormOfManagement , TemporarySubvention , ) [EOL] from users . serializers import UserSerializer [EOL] [EOL] from . . models import ( ContractRent , Decision , FixedInitialYearRent , IndexAdjustedRent , LeaseBasisOfRent , PayableRent , Rent , RentAdjustment , RentDueDate , RentIntendedUse , ) [EOL] from . decision import DecisionSerializer [EOL] from . utils import ( DayMonthField , InstanceDictPrimaryKeyRelatedField , NameModelSerializer , UpdateNestedMixin , ) [EOL] [EOL] [EOL] class RentIntendedUseSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = RentIntendedUse [EOL] fields = [string] [EOL] [EOL] [EOL] class RentDueDateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = RentDueDate [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class FixedInitialYearRentSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] intended_use = InstanceDictPrimaryKeyRelatedField ( instance_class = RentIntendedUse , queryset = RentIntendedUse . objects . all ( ) , related_serializer = RentIntendedUseSerializer , ) [EOL] [EOL] class Meta : [EOL] model = FixedInitialYearRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def is_valid_end_date ( self , rent , end_date ) : [EOL] if not rent or not rent . cycle or not end_date : [EOL] return True [EOL] [EOL] if ( rent . cycle == RentCycle . JANUARY_TO_DECEMBER [EOL] and end_date . day == [number] [EOL] and end_date . month == [number] ) : [EOL] return True [EOL] [EOL] if ( rent . cycle == RentCycle . APRIL_TO_MARCH [EOL] and end_date . day == [number] [EOL] and end_date . month == [number] ) : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def create ( self , validated_data ) : [EOL] if not self . is_valid_end_date ( validated_data . get ( [string] ) , validated_data . get ( [string] ) ) : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . create ( validated_data ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] if not self . is_valid_end_date ( validated_data . get ( [string] ) , validated_data . get ( [string] ) ) : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . update ( instance , validated_data ) [EOL] [EOL] [EOL] class ContractRentSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] intended_use = InstanceDictPrimaryKeyRelatedField ( instance_class = RentIntendedUse , queryset = RentIntendedUse . objects . all ( ) , related_serializer = RentIntendedUseSerializer , ) [EOL] [EOL] class Meta : [EOL] model = ContractRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class IndexAdjustedRentSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = IndexAdjustedRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PayableRentSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = PayableRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class EqualizedRentSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = EqualizedRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ManagementSubventionFormOfManagementSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = ManagementSubventionFormOfManagement [EOL] fields = [string] [EOL] [EOL] [EOL] class ManagementSubventionSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] management = ManagementSubventionFormOfManagementSerializer ( required = False ) [EOL] [EOL] class Meta : [EOL] model = ManagementSubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ManagementSubventionCreateUpdateSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] management = InstanceDictPrimaryKeyRelatedField ( instance_class = ManagementSubventionFormOfManagement , queryset = ManagementSubventionFormOfManagement . objects . all ( ) , related_serializer = ManagementSubventionFormOfManagementSerializer , ) [EOL] [EOL] class Meta : [EOL] model = ManagementSubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class TemporarySubventionSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = TemporarySubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class RentAdjustmentSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] decision = DecisionSerializer ( required = False ) [EOL] intended_use = RentIntendedUseSerializer ( ) [EOL] management_subventions = ManagementSubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] temporary_subventions = TemporarySubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = RentAdjustment [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class RentAdjustmentCreateUpdateSerializer ( UpdateNestedMixin , EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] decision = InstanceDictPrimaryKeyRelatedField ( instance_class = Decision , queryset = Decision . objects . all ( ) , related_serializer = DecisionSerializer , required = False , allow_null = True , ) [EOL] intended_use = InstanceDictPrimaryKeyRelatedField ( instance_class = RentIntendedUse , queryset = RentIntendedUse . objects . all ( ) , related_serializer = RentIntendedUseSerializer , ) [EOL] management_subventions = ManagementSubventionCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] temporary_subventions = TemporarySubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = RentAdjustment [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] def validate ( self , data ) : [EOL] if ( data . get ( [string] ) == RentAdjustmentAmountType . AMOUNT_TOTAL [EOL] and data . get ( [string] ) is not None ) : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] return data [EOL] [EOL] [EOL] class RentSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] due_dates = RentDueDateSerializer ( many = True , required = False , allow_null = True ) [EOL] fixed_initial_year_rents = FixedInitialYearRentSerializer ( many = True , required = False , allow_null = True ) [EOL] contract_rents = ContractRentSerializer ( many = True , required = False , allow_null = True ) [EOL] index_adjusted_rents = IndexAdjustedRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] rent_adjustments = RentAdjustmentSerializer ( many = True , required = False , allow_null = True ) [EOL] payable_rents = PayableRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] equalized_rents = EqualizedRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] yearly_due_dates = ListSerializer ( child = DayMonthField ( read_only = True ) , source = [string] , read_only = True , ) [EOL] [EOL] class Meta : [EOL] model = Rent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def override_permission_check_field_name ( self , field_name ) : [EOL] if field_name == [string] : [EOL] return [string] [EOL] [EOL] return field_name [EOL] [EOL] [EOL] class RentSimpleSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = Rent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class RentCreateUpdateSerializer ( UpdateNestedMixin , EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] due_dates = RentDueDateSerializer ( many = True , required = False , allow_null = True ) [EOL] fixed_initial_year_rents = FixedInitialYearRentSerializer ( many = True , required = False , allow_null = True ) [EOL] contract_rents = ContractRentSerializer ( many = True , required = False , allow_null = True ) [EOL] index_adjusted_rents = IndexAdjustedRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] rent_adjustments = RentAdjustmentCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] payable_rents = PayableRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] equalized_rents = EqualizedRentSerializer ( many = True , required = False , allow_null = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Rent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def validate ( self , data ) : [EOL] seasonal_values = [ data . get ( [string] ) , data . get ( [string] ) , data . get ( [string] ) , data . get ( [string] ) , ] [EOL] [EOL] if not all ( v is None for v in seasonal_values ) and any ( v is None for v in seasonal_values ) : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] if all ( seasonal_values ) and data . get ( [string] ) != DueDatesType . CUSTOM : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] return data [EOL] [EOL] [EOL] class IndexSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Index [EOL] fields = [string] [EOL] [EOL] [EOL] class LeaseBasisOfRentManagementSubventionSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] management = ManagementSubventionFormOfManagementSerializer ( required = False ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRentManagementSubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class LeaseBasisOfRentManagementSubventionCreateUpdateSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] management = InstanceDictPrimaryKeyRelatedField ( instance_class = ManagementSubventionFormOfManagement , queryset = ManagementSubventionFormOfManagement . objects . all ( ) , related_serializer = ManagementSubventionFormOfManagementSerializer , ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRentManagementSubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class LeaseBasisOfRentTemporarySubventionSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRentTemporarySubvention [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class LeaseBasisOfRentSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] intended_use = RentIntendedUseSerializer ( ) [EOL] index = IndexSerializer ( ) [EOL] plans_inspected_by = UserSerializer ( read_only = True ) [EOL] locked_by = UserSerializer ( read_only = True ) [EOL] management_subventions = LeaseBasisOfRentManagementSubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] temporary_subventions = LeaseBasisOfRentTemporarySubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class LeaseBaseBasisOfRentCreateUpdateSerializer ( UpdateNestedMixin , EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] intended_use = InstanceDictPrimaryKeyRelatedField ( instance_class = RentIntendedUse , queryset = RentIntendedUse . objects . all ( ) , related_serializer = RentIntendedUseSerializer , ) [EOL] index = InstanceDictPrimaryKeyRelatedField ( instance_class = Index , queryset = Index . objects . all ( ) , related_serializer = IndexSerializer , required = False , allow_null = True , ) [EOL] management_subventions = LeaseBasisOfRentManagementSubventionCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] temporary_subventions = LeaseBasisOfRentTemporarySubventionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def validate ( self , data ) : [EOL] if data . get ( [string] ) : [EOL] try : [EOL] instance = LeaseBasisOfRent . objects . get ( pk = data [ [string] ] ) [EOL] except LeaseBasisOfRent . DoesNotExist : [EOL] raise ValidationError ( _ ( [string] ) . format ( data [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] if instance . locked_at : [EOL] if set ( data . keys ( ) ) != { [string] , [string] } : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] data [ [string] ] = instance . intended_use [EOL] data [ [string] ] = instance . area [EOL] data [ [string] ] = instance . area_unit [EOL] data [ [string] ] = instance . index [EOL] [EOL] if [string] in data : [EOL] if data [ [string] ] : [EOL] data [ [string] ] = self . context [ [string] ] . user [EOL] else : [EOL] data [ [string] ] = None [EOL] [EOL] if [string] in data : [EOL] if data [ [string] ] : [EOL] data [ [string] ] = self . context [ [string] ] . user [EOL] else : [EOL] data [ [string] ] = None [EOL] [EOL] return data [EOL] [EOL] [EOL] class LeaseSubBasisOfRentCreateUpdateSerializer ( LeaseBaseBasisOfRentCreateUpdateSerializer ) : [EOL] class Meta : [EOL] model = LeaseBasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] def create ( self , validated_data ) : [EOL] validated_data [ [string] ] = validated_data . get ( [string] ) . lease [EOL] return super ( ) . create ( validated_data ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] validated_data [ [string] ] = validated_data . get ( [string] ) . lease [EOL] return super ( ) . update ( instance , validated_data ) [EOL] [EOL] def to_representation ( self , instance ) : [EOL] return super ( LeaseSubBasisOfRentCreateUpdateSerializer , self ) . to_representation ( instance ) [ [string] ] [EOL] [EOL] [EOL] class LeaseBasisOfRentCreateUpdateSerializer ( LeaseBaseBasisOfRentCreateUpdateSerializer ) : [EOL] [EOL] children = LeaseSubBasisOfRentCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = LeaseBasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentDueDateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.FixedInitialYearRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.ContractRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.IndexAdjustedRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.PayableRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.EqualizedRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.ManagementSubventionSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.ManagementSubventionFormOfManagementSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.ManagementSubventionCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.TemporarySubventionSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentAdjustmentSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.DecisionSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentIntendedUseSerializer$ 0 0 0 0 0 $leasing.serializers.rent.ManagementSubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.TemporarySubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentAdjustmentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.ManagementSubventionCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.TemporarySubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentDueDateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.FixedInitialYearRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.ContractRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.IndexAdjustedRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentAdjustmentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.PayableRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.EqualizedRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentSimpleSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.RentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentDueDateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.FixedInitialYearRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.ContractRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.IndexAdjustedRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentAdjustmentCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.PayableRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.EqualizedRentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.LeaseBasisOfRentManagementSubventionSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.ManagementSubventionFormOfManagementSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.LeaseBasisOfRentManagementSubventionCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.LeaseBasisOfRentTemporarySubventionSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.LeaseBasisOfRentSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.RentIntendedUseSerializer$ 0 0 0 0 0 $leasing.serializers.rent.IndexSerializer$ 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.rent.LeaseBasisOfRentManagementSubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.LeaseBasisOfRentTemporarySubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.LeaseBaseBasisOfRentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.LeaseBasisOfRentManagementSubventionCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.LeaseBasisOfRentTemporarySubventionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.rent.LeaseSubBasisOfRentCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.rent.LeaseBasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import batchrun [EOL] import leasing [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] from rest_framework . fields import SerializerMethodField [EOL] [EOL] from batchrun import models [EOL] [EOL] [EOL] class CommandSerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Command [EOL] fields = [string] [EOL] [EOL] [EOL] class TimeZoneSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Timezone [EOL] fields = [string] [EOL] [EOL] [EOL] class JobSerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] command = CommandSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = models . Job [EOL] fields = [string] [EOL] [EOL] [EOL] class ScheduledJobSerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] job = JobSerializer ( ) [EOL] timezone = TimeZoneSerializer ( ) [EOL] next_run = SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = models . ScheduledJob [EOL] fields = [string] [EOL] [EOL] def get_next_run ( self , obj ) : [EOL] queue_item = ( models . JobRunQueueItem . objects . filter ( scheduled_job = obj , assigned_at = None ) . order_by ( [string] ) . first ( ) ) [EOL] [EOL] if queue_item : [EOL] return queue_item . run_at [EOL] [EOL] [EOL] class JobRunSerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] job = JobSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = models . JobRun [EOL] fields = [string] [EOL] [EOL] [EOL] class JobRunLogEntrySerializer ( EnumSupportSerializerMixin , serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . JobRunLogEntry [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.batchrun.CommandSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.batchrun.JobSerializer$ 0 0 0 0 0 $leasing.serializers.batchrun.TimeZoneSerializer$ 0 0 0 0 0 $typing.Type[leasing.serializers.batchrun.ScheduledJobSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.batchrun.JobSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[batchrun.models.JobRunLogEntry]$ 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from rest_framework import serializers [EOL] [EOL] from . . models import Vat [EOL] [EOL] [EOL] class VatSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Vat [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Type , List , DefaultDict , Tuple [EOL] import typing [EOL] import decimal [EOL] import leasing [EOL] import datetime [EOL] import datetime [EOL] from collections import defaultdict [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] from random import choice [EOL] [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . utils import timezone [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields . drf import EnumField , EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] from rest_framework . exceptions import ValidationError [EOL] from rest_framework . fields import empty [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] from leasing . enums import InvoiceState , InvoiceType [EOL] from leasing . models import Contact , Tenant [EOL] from leasing . models . invoice import ( Invoice , InvoiceNote , InvoicePayment , InvoiceRow , InvoiceSet , ReceivableType , ) [EOL] from leasing . models . utils import fix_amount_for_overlap , subtract_ranges_from_ranges [EOL] from leasing . serializers . explanation import ExplanationSerializer [EOL] from leasing . serializers . tenant import TenantSerializer [EOL] from leasing . serializers . utils import ( InstanceDictPrimaryKeyRelatedField , UpdateNestedMixin , ) [EOL] [EOL] from . contact import ContactSerializer [EOL] [EOL] [EOL] class ReceivableTypeSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = ReceivableType [EOL] fields = [string] [EOL] [EOL] [EOL] class InvoiceNoteSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] def __init__ ( self , instance = None , data = empty , ** kwargs ) : [EOL] super ( ) . __init__ ( instance = instance , data = data , ** kwargs ) [EOL] [EOL] [comment] [EOL] from leasing . serializers . lease import LeaseSuccinctSerializer [EOL] [EOL] self . fields [ [string] ] = LeaseSuccinctSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = InvoiceNote [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class InvoiceNoteCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] def __init__ ( self , instance = None , data = empty , ** kwargs ) : [EOL] super ( ) . __init__ ( instance = instance , data = data , ** kwargs ) [EOL] [EOL] [comment] [EOL] from leasing . serializers . lease import LeaseSuccinctSerializer [EOL] from leasing . models . lease import Lease [EOL] [EOL] self . fields [ [string] ] = InstanceDictPrimaryKeyRelatedField ( instance_class = Lease , queryset = Lease . objects . all ( ) , related_serializer = LeaseSuccinctSerializer , ) [EOL] [EOL] class Meta : [EOL] model = InvoiceNote [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class InvoicePaymentSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = InvoicePayment [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class InvoicePaymentCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = InvoicePayment [EOL] exclude = ( [string] , [string] ) [EOL] [EOL] [EOL] class InvoiceRowSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] tenant = TenantSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = InvoiceRow [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class InvoiceRowCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] tenant = InstanceDictPrimaryKeyRelatedField ( instance_class = Tenant , queryset = Tenant . objects . all ( ) , related_serializer = TenantSerializer , required = False , allow_null = True , ) [EOL] receivable_type = InstanceDictPrimaryKeyRelatedField ( instance_class = ReceivableType , queryset = ReceivableType . objects . all ( ) , related_serializer = ReceivableTypeSerializer , ) [EOL] [EOL] class Meta : [EOL] model = InvoiceRow [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] [EOL] valid = True [EOL] [EOL] if not data [ [string] ] . is_active : [EOL] if self . instance : [EOL] if self . instance . receivable_type != data [ [string] ] : [EOL] [comment] [EOL] [comment] [EOL] valid = False [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] if [string] not in data : [EOL] valid = False [EOL] else : [EOL] [comment] [EOL] try : [EOL] existing_row = InvoiceRow . objects . get ( pk = data [ [string] ] ) [EOL] [EOL] if existing_row . receivable_type != data [ [string] ] : [EOL] valid = False [EOL] except ObjectDoesNotExist : [EOL] valid = False [EOL] [EOL] if not valid : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return data [EOL] [EOL] [EOL] class InlineInvoiceSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] class Meta : [EOL] model = Invoice [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class InvoiceSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] recipient = ContactSerializer ( ) [EOL] rows = InvoiceRowSerializer ( many = True , required = False , allow_null = True ) [EOL] payments = InvoicePaymentSerializer ( many = True , required = False , allow_null = True ) [EOL] credit_invoices = InlineInvoiceSerializer ( many = True , required = False , allow_null = True ) [EOL] interest_invoices = InlineInvoiceSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class InvoiceSerializerWithSuccinctLease ( InvoiceSerializer ) : [EOL] def __init__ ( self , instance = None , data = empty , ** kwargs ) : [EOL] super ( ) . __init__ ( instance = instance , data = data , ** kwargs ) [EOL] [EOL] [comment] [EOL] from leasing . serializers . lease import LeaseSuccinctSerializer [EOL] [EOL] self . fields [ [string] ] = LeaseSuccinctSerializer ( ) [EOL] [EOL] [EOL] class InvoiceSerializerWithExplanations ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] recipient = ContactSerializer ( ) [EOL] rows = InvoiceRowSerializer ( many = True , required = False , allow_null = True ) [EOL] payments = InvoicePaymentSerializer ( many = True , required = False , allow_null = True ) [EOL] explanations = serializers . ListField ( child = ExplanationSerializer ( read_only = True ) ) [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] class InvoiceCreateSerializer ( UpdateNestedMixin , EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] recipient = InstanceDictPrimaryKeyRelatedField ( instance_class = Contact , queryset = Contact . objects . all ( ) , related_serializer = ContactSerializer , required = False , ) [EOL] tenant = InstanceDictPrimaryKeyRelatedField ( instance_class = Tenant , queryset = Tenant . objects . all ( ) , related_serializer = TenantSerializer , required = False , ) [EOL] rows = InvoiceRowCreateUpdateSerializer ( many = True ) [EOL] payments = InvoicePaymentCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] [comment] [EOL] total_amount = serializers . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] billed_amount = serializers . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] type = EnumField ( enum = InvoiceType , required = False ) [EOL] [EOL] def override_permission_check_field_name ( self , field_name ) : [EOL] if field_name == [string] : [EOL] return [string] [EOL] [EOL] return field_name [EOL] [EOL] def validate ( self , attrs ) : [EOL] if not bool ( attrs . get ( [string] ) ) ^ bool ( attrs . get ( [string] ) ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if ( attrs . get ( [string] ) [EOL] and attrs . get ( [string] ) not in attrs . get ( [string] ) . tenants . all ( ) ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return attrs [EOL] [EOL] def create ( self , validated_data ) : [EOL] validated_data [ [string] ] = InvoiceState . OPEN [EOL] [EOL] if not validated_data . get ( [string] ) : [EOL] total_amount = Decimal ( [number] ) [EOL] for row in validated_data . get ( [string] , [ ] ) : [EOL] total_amount += row . get ( [string] , Decimal ( [number] ) ) [EOL] [EOL] validated_data [ [string] ] = total_amount [EOL] [EOL] if not validated_data . get ( [string] ) : [EOL] billed_amount = Decimal ( [number] ) [EOL] for row in validated_data . get ( [string] , [ ] ) : [EOL] billed_amount += row . get ( [string] , Decimal ( [number] ) ) [EOL] [EOL] validated_data [ [string] ] = billed_amount [EOL] [EOL] if not validated_data . get ( [string] ) : [EOL] validated_data [ [string] ] = InvoiceType . CHARGE [EOL] [EOL] if validated_data . get ( [string] ) : [EOL] today = datetime . date . today ( ) [EOL] tenant = validated_data . pop ( [string] ) [EOL] billing_tenantcontact = tenant . get_billing_tenantcontacts ( today , today ) . first ( ) [EOL] if not billing_tenantcontact : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] validated_data [ [string] ] = billing_tenantcontact . contact [EOL] for row in validated_data . get ( [string] , [ ] ) : [EOL] row [ [string] ] = tenant [EOL] [EOL] invoice = super ( ) . create ( validated_data ) [EOL] [EOL] invoice . invoicing_date = timezone . now ( ) . date ( ) [EOL] invoice . outstanding_amount = validated_data [ [string] ] [EOL] invoice . update_amounts ( ) [comment] [EOL] invoice . save ( ) [EOL] [EOL] return invoice [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class InvoiceUpdateSerializer ( UpdateNestedMixin , EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . ReadOnlyField ( ) [EOL] recipient = InstanceDictPrimaryKeyRelatedField ( instance_class = Contact , queryset = Contact . objects . all ( ) , related_serializer = ContactSerializer , ) [EOL] rows = InvoiceRowCreateUpdateSerializer ( many = True ) [EOL] payments = InvoicePaymentCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] instance = super ( ) . update ( instance , validated_data ) [EOL] instance . update_amounts ( ) [EOL] if instance . credited_invoice : [EOL] instance . credited_invoice . update_amounts ( ) [EOL] [EOL] return instance [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class CreditNoteUpdateSerializer ( InvoiceUpdateSerializer ) : [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class GeneratedInvoiceUpdateSerializer ( InvoiceUpdateSerializer ) : [EOL] [docstring] [EOL] [EOL] rows = InvoiceRowCreateUpdateSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Invoice [EOL] exclude = ( [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class InvoiceSetSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = InvoiceSet [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class CreateChargeInvoiceRowSerializer ( serializers . Serializer ) : [EOL] amount = serializers . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] receivable_type = InstanceDictPrimaryKeyRelatedField ( instance_class = ReceivableType , queryset = ReceivableType . objects . all ( ) , related_serializer = ReceivableTypeSerializer , ) [EOL] [EOL] [EOL] class CreateChargeSerializer ( serializers . Serializer ) : [EOL] due_date = serializers . DateField ( ) [EOL] billing_period_start_date = serializers . DateField ( required = False ) [EOL] billing_period_end_date = serializers . DateField ( required = False ) [EOL] rows = serializers . ListSerializer ( child = CreateChargeInvoiceRowSerializer ( ) , required = True ) [EOL] notes = serializers . CharField ( required = False ) [EOL] [EOL] def __init__ ( self , instance = None , data = empty , ** kwargs ) : [EOL] super ( ) . __init__ ( instance = instance , data = data , ** kwargs ) [EOL] [EOL] [comment] [EOL] from leasing . serializers . lease import LeaseSuccinctSerializer [EOL] from leasing . models . lease import Lease [EOL] [EOL] self . fields [ [string] ] = InstanceDictPrimaryKeyRelatedField ( instance_class = Lease , queryset = Lease . objects . all ( ) , related_serializer = LeaseSuccinctSerializer , ) [EOL] [EOL] def to_representation ( self , instance ) : [EOL] if isinstance ( instance , InvoiceSet ) : [EOL] return InvoiceSetSerializer ( ) . to_representation ( instance = instance ) [EOL] elif isinstance ( instance , Invoice ) : [EOL] return InvoiceSerializer ( ) . to_representation ( instance = instance ) [EOL] [EOL] def validate ( self , data ) : [EOL] if ( data . get ( [string] ) [EOL] and not data . get ( [string] ) ) or ( not data . get ( [string] ) [EOL] and data . get ( [string] ) ) : [EOL] raise serializers . ValidationError ( _ ( [string] [string] ) ) [EOL] [EOL] if data . get ( [string] , [number] ) > data . get ( [string] , [number] ) : [EOL] raise serializers . ValidationError ( _ ( [string] ) ) [EOL] [EOL] return data [EOL] [EOL] def create ( self , validated_data ) : [comment] [EOL] today = timezone . now ( ) . date ( ) [EOL] lease = validated_data . get ( [string] ) [EOL] billing_period_start_date = validated_data . get ( [string] , today ) [EOL] billing_period_end_date = validated_data . get ( [string] , today ) [EOL] billing_period = ( billing_period_start_date , billing_period_end_date ) [EOL] [EOL] total_amount = sum ( [ row . get ( [string] ) for row in validated_data . get ( [string] , [ ] ) ] ) [EOL] [EOL] [comment] [EOL] shares = lease . get_tenant_shares_for_period ( billing_period_start_date , billing_period_end_date ) [EOL] [EOL] invoice = None [EOL] invoiceset = None [EOL] [EOL] if len ( shares . items ( ) ) > [number] : [EOL] invoiceset = InvoiceSet . objects . create ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice_data = [ ] [EOL] [EOL] [comment] [EOL] for contact , share in shares . items ( ) : [EOL] invoice_rows_by_index = defaultdict ( list ) [EOL] [EOL] for tenant , overlaps in share . items ( ) : [EOL] for row_index , row in enumerate ( validated_data . get ( [string] , [ ] ) ) : [EOL] overlap_amount = Decimal ( [number] ) [EOL] for overlap in overlaps : [EOL] overlap_amount += fix_amount_for_overlap ( row . get ( [string] , Decimal ( [number] ) ) , overlap , subtract_ranges_from_ranges ( [ billing_period ] , [ overlap ] ) , ) [EOL] [EOL] [comment] [EOL] share_amount = Decimal ( overlap_amount * Decimal ( tenant . share_numerator / tenant . share_denominator ) ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] invoice_rows_by_index [ row_index ] . append ( { [string] : tenant , [string] : row . get ( [string] ) , [string] : overlap [ [number] ] , [string] : overlap [ [number] ] , [string] : share_amount , } ) [EOL] [EOL] invoice_data . append ( { [string] : InvoiceType . CHARGE , [string] : lease , [string] : contact , [string] : validated_data . get ( [string] ) , [string] : today , [string] : InvoiceState . OPEN , [string] : billing_period_start_date , [string] : billing_period_end_date , [string] : total_amount , [string] : invoiceset , [string] : validated_data . get ( [string] , [string] ) , [string] : invoice_rows_by_index , } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for input_row_index , input_row in enumerate ( validated_data . get ( [string] , [ ] ) ) : [EOL] row_sum = Decimal ( [number] ) [EOL] all_rows = [ ] [EOL] for invoice_datum in invoice_data : [EOL] for row_data in invoice_datum [ [string] ] [ input_row_index ] : [EOL] row_sum += row_data [ [string] ] [EOL] all_rows . append ( row_data ) [EOL] [EOL] difference = input_row [ [string] ] - row_sum [EOL] if difference : [EOL] random_row = choice ( all_rows ) [EOL] random_row [ [string] ] += difference [EOL] [EOL] [comment] [EOL] for invoice_datum in invoice_data : [EOL] invoice_datum [ [string] ] = [ row for rows in invoice_datum [ [string] ] . values ( ) for row in rows ] [EOL] rows_sum = sum ( [ row [ [string] ] for row in invoice_datum [ [string] ] ] ) [EOL] invoice_datum [ [string] ] = rows_sum [EOL] invoice_datum [ [string] ] = rows_sum [EOL] [EOL] invoice_row_data = invoice_datum . pop ( [string] ) [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_datum ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] if invoiceset : [EOL] return invoiceset [EOL] else : [EOL] return invoice [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoicePaymentCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceRowSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceRowSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceRowCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contact.ContactSerializer$ 0 0 0 0 0 $leasing.serializers.invoice.InvoiceRowSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoicePaymentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InlineInvoiceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InlineInvoiceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.contact.ContactSerializer$ 0 0 0 0 0 $leasing.serializers.invoice.InvoiceRowSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoicePaymentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceSerializerWithExplanations]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceCreateSerializer]$ 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceRowCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoicePaymentCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceUpdateSerializer]$ 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceRowCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoicePaymentCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceRowCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.invoice.InvoiceSet]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeInvoiceRowSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0
from typing import Dict , Any , Set , Type , List [EOL] import typing [EOL] import leasing [EOL] import os [EOL] from collections import OrderedDict [EOL] [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . urls import reverse [EOL] from rest_framework import serializers [EOL] from rest_framework . exceptions import ValidationError [EOL] [EOL] [EOL] class InstanceDictPrimaryKeyRelatedField ( serializers . PrimaryKeyRelatedField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . instance_class = kwargs . pop ( [string] , None ) [EOL] self . related_serializer = kwargs . pop ( [string] , None ) [EOL] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def to_representation ( self , obj ) : [EOL] if self . related_serializer and hasattr ( obj , [string] ) and obj . pk : [EOL] obj = self . get_queryset ( ) . get ( pk = obj . pk ) [EOL] return self . related_serializer ( obj , context = self . context ) . to_representation ( obj ) [EOL] [EOL] return super ( ) . to_representation ( obj ) [EOL] [EOL] def to_internal_value ( self , value ) : [EOL] pk = value [EOL] [EOL] if isinstance ( value , dict ) and [string] in value : [EOL] pk = value [ [string] ] [EOL] [EOL] if self . instance_class and isinstance ( value , self . instance_class ) : [EOL] pk = value . id [EOL] [EOL] return super ( ) . to_internal_value ( pk ) [EOL] [EOL] def get_choices ( self , cutoff = None ) : [EOL] queryset = self . get_queryset ( ) [EOL] [EOL] if queryset is None : [EOL] return { } [EOL] [EOL] if cutoff is not None : [EOL] queryset = queryset [ : cutoff ] [EOL] [EOL] return OrderedDict ( ( item . pk , self . display_value ( item ) ) for item in queryset ) [EOL] [EOL] [EOL] def sync_new_items_to_manager ( new_items , manager , context ) : [EOL] if not hasattr ( manager , [string] ) : [EOL] return [EOL] [EOL] existing_items = set ( manager . all ( ) ) [EOL] [EOL] for item in existing_items . difference ( new_items ) : [EOL] permission_name = [string] . format ( manager . model . _meta . app_label , manager . model . _meta . model_name ) [EOL] if not context [ [string] ] . user . has_perm ( permission_name ) : [EOL] [comment] [EOL] continue [EOL] [EOL] if hasattr ( manager , [string] ) : [EOL] manager . remove ( item ) [EOL] else : [EOL] item . delete ( ) [EOL] [EOL] for item in new_items . difference ( existing_items ) : [EOL] manager . add ( item ) [EOL] [EOL] [EOL] def get_instance_from_default_manager ( pk , model_class ) : [EOL] if not pk : [EOL] return None [EOL] [EOL] try : [EOL] return model_class . _default_manager . get ( id = pk ) [EOL] except ObjectDoesNotExist : [EOL] return None [EOL] [EOL] [EOL] def serializer_data_differs ( serializer , original_serializer ) : [EOL] for field_name in serializer . validated_data . keys ( ) : [EOL] if ( serializer . validated_data [ field_name ] != original_serializer . data [ field_name ] ) : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] def check_perm ( serializer , instance ) : [EOL] model_class = serializer . Meta . model [EOL] [EOL] if not instance : [EOL] permission_name = [string] . format ( model_class . _meta . app_label , model_class . _meta . model_name ) [EOL] return serializer . context [ [string] ] . user . has_perm ( permission_name ) [EOL] [EOL] instance_serializer = serializer . __class__ ( instance ) [EOL] if serializer_data_differs ( serializer , instance_serializer ) : [EOL] permission_name = [string] . format ( model_class . _meta . app_label , model_class . _meta . model_name ) [EOL] return serializer . context [ [string] ] . user . has_perm ( permission_name ) [EOL] else : [EOL] return True [EOL] [EOL] [EOL] def instance_create_or_update_related ( instance = None , related_name = None , serializer_class = None , validated_data = None , context = None , ) : [EOL] manager = getattr ( instance , related_name ) [EOL] new_items = set ( ) [EOL] [EOL] if validated_data is None : [EOL] validated_data = [ ] [EOL] [EOL] for item in validated_data : [EOL] pk = item . pop ( [string] , None ) [EOL] model_class = serializer_class . Meta . model [EOL] [EOL] serializer_params = { [string] : item , [string] : get_instance_from_default_manager ( pk , model_class ) , [string] : context , } [EOL] [EOL] serializer = serializer_class ( ** serializer_params ) [EOL] [EOL] if hasattr ( serializer , [string] ) : [EOL] serializer . modify_fields_by_field_permissions ( ) [EOL] [EOL] try : [EOL] serializer . is_valid ( raise_exception = True ) [EOL] except ValidationError as e : [EOL] raise ValidationError ( { related_name : e . detail } ) [EOL] [EOL] if not check_perm ( serializer , serializer . instance ) : [EOL] [comment] [EOL] continue [EOL] [EOL] item_instance = serializer . save ( ** { manager . field . name : instance } ) [EOL] new_items . add ( item_instance ) [EOL] [EOL] sync_new_items_to_manager ( new_items , manager , context ) [EOL] [EOL] [EOL] class UpdateNestedMixin : [EOL] def extract_nested ( self , validated_data ) : [EOL] nested = { } [EOL] for field_name , field in self . fields . items ( ) : [EOL] if field_name not in validated_data : [EOL] continue [EOL] [EOL] if not isinstance ( field , serializers . ListSerializer ) : [EOL] continue [EOL] [EOL] if not isinstance ( field . child , serializers . ModelSerializer ) : [EOL] continue [EOL] [EOL] if field . many and field_name in validated_data : [EOL] nested [ field_name ] = validated_data . pop ( field_name , None ) [EOL] [EOL] return nested [EOL] [EOL] def save_nested ( self , instance , nested_data , context = None ) : [EOL] for nested_name , nested_datum in nested_data . items ( ) : [EOL] instance_create_or_update_related ( instance = instance , related_name = nested_name , serializer_class = self . fields [ nested_name ] . child . __class__ , validated_data = nested_datum , context = context , ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] nested_data = self . extract_nested ( validated_data ) [EOL] [EOL] instance = super ( ) . create ( validated_data ) [EOL] [EOL] self . save_nested ( instance , nested_data , context = self . context ) [EOL] [EOL] return instance [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] nested_data = self . extract_nested ( validated_data ) [EOL] [EOL] instance = super ( ) . update ( instance , validated_data ) [EOL] [EOL] self . save_nested ( instance , nested_data , context = self . context ) [EOL] [EOL] return instance [EOL] [EOL] [EOL] class NameModelSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] name = serializers . CharField ( read_only = True ) [EOL] [EOL] [EOL] class DayMonthField ( serializers . Field ) : [EOL] def to_internal_value ( self , data ) : [EOL] pass [EOL] [EOL] def to_representation ( self , instance ) : [EOL] return instance . asdict ( ) [EOL] [EOL] [EOL] class FileSerializerMixin : [EOL] def get_file_url ( self , obj ) : [EOL] if not obj or not obj . file : [EOL] return None [EOL] [EOL] url = reverse ( self . Meta . download_url_name , args = [ obj . id ] ) [EOL] [EOL] request = self . context . get ( [string] , None ) [EOL] if request is not None : [EOL] return request . build_absolute_uri ( url ) [EOL] [EOL] return url [EOL] [EOL] def get_file_filename ( self , obj ) : [EOL] return os . path . basename ( obj . file . name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.utils.NameModelSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.utils.NameModelSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Type , Dict , Any [EOL] import typing [EOL] import leasing [EOL] from rest_framework import serializers [EOL] [EOL] from leasing . models import ( ContractRent , FixedInitialYearRent , Index , Rent , RentAdjustment , ) [EOL] from leasing . serializers . rent import ( ContractRentSerializer , FixedInitialYearRentSerializer , IndexSerializer , RentAdjustmentSerializer , RentSimpleSerializer , ) [EOL] [EOL] [EOL] class RecursiveSerializer ( serializers . Serializer ) : [EOL] def to_representation ( self , value ) : [EOL] serializer = self . parent . parent . __class__ ( value , context = self . context ) [EOL] [EOL] return serializer . data [EOL] [EOL] [EOL] class SubjectSerializer ( serializers . Serializer ) : [EOL] def to_representation ( self , instance ) : [EOL] serializer_map = { ContractRent : ContractRentSerializer , RentAdjustment : RentAdjustmentSerializer , Rent : RentSimpleSerializer , FixedInitialYearRent : FixedInitialYearRentSerializer , Index : IndexSerializer , } [EOL] [EOL] for model_class , serializer_class in serializer_map . items ( ) : [EOL] if isinstance ( instance , model_class ) : [EOL] s = serializer_class ( ) [EOL] data = s . to_representation ( instance ) [EOL] data [ [string] ] = model_class . _meta . model_name [EOL] [EOL] return data [EOL] [EOL] return instance [EOL] [EOL] [EOL] class DateRangeField ( serializers . Field ) : [EOL] def to_internal_value ( self , data ) : [EOL] pass [EOL] [EOL] def to_representation ( self , instance ) : [EOL] return { [string] : instance [ [number] ] , [string] : instance [ [number] ] } [EOL] [EOL] [EOL] class ExplanationItemSerializer ( serializers . Serializer ) : [EOL] subject = SubjectSerializer ( read_only = True ) [EOL] sub_items = RecursiveSerializer ( many = True , read_only = True ) [EOL] amount = serializers . DecimalField ( max_digits = [number] , decimal_places = [number] , read_only = True ) [EOL] date_ranges = serializers . ListField ( child = DateRangeField ( read_only = True ) ) [EOL] [EOL] [EOL] class ExplanationSerializer ( serializers . Serializer ) : [EOL] items = serializers . ListField ( child = ExplanationItemSerializer ( read_only = True ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Union[leasing.models.rent.ContractRent,leasing.models.rent.FixedInitialYearRent,leasing.models.rent.Index,leasing.models.rent.Rent,leasing.models.rent.RentAdjustment]],typing.Type[typing.Union[leasing.serializers.rent.ContractRentSerializer,leasing.serializers.rent.FixedInitialYearRentSerializer,leasing.serializers.rent.IndexSerializer,leasing.serializers.rent.RentAdjustmentSerializer,leasing.serializers.rent.RentSimpleSerializer]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Type[typing.Union[leasing.models.rent.ContractRent,leasing.models.rent.FixedInitialYearRent,leasing.models.rent.Index,leasing.models.rent.Rent,leasing.models.rent.RentAdjustment]],typing.Type[typing.Union[leasing.serializers.rent.ContractRentSerializer,leasing.serializers.rent.FixedInitialYearRentSerializer,leasing.serializers.rent.IndexSerializer,leasing.serializers.rent.RentAdjustmentSerializer,leasing.serializers.rent.RentSimpleSerializer]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[leasing.serializers.rent.ContractRentSerializer,leasing.serializers.rent.FixedInitialYearRentSerializer,leasing.serializers.rent.IndexSerializer,leasing.serializers.rent.RentAdjustmentSerializer,leasing.serializers.rent.RentSimpleSerializer]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Union[leasing.serializers.rent.ContractRentSerializer,leasing.serializers.rent.FixedInitialYearRentSerializer,leasing.serializers.rent.IndexSerializer,leasing.serializers.rent.RentAdjustmentSerializer,leasing.serializers.rent.RentSimpleSerializer]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.explanation.SubjectSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.explanation.RecursiveSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.explanation.ExplanationItemSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.explanation.ExplanationItemSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.explanation.ExplanationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from enumfields . drf import EnumSupportSerializerMixin [EOL] from rest_framework import serializers [EOL] [EOL] from field_permissions . serializers import FieldPermissionsSerializerMixin [EOL] [EOL] from . . models import ( BasisOfRent , BasisOfRentBuildPermissionType , BasisOfRentDecision , BasisOfRentPlotType , BasisOfRentPropertyIdentifier , BasisOfRentRate , DecisionMaker , ) [EOL] from . decision import DecisionMakerSerializer [EOL] from . utils import ( InstanceDictPrimaryKeyRelatedField , NameModelSerializer , UpdateNestedMixin , ) [EOL] [EOL] [EOL] class BasisOfRentPlotTypeSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = BasisOfRentPlotType [EOL] fields = [string] [EOL] [EOL] [EOL] class BasisOfRentBuildPermissionTypeSerializer ( NameModelSerializer ) : [EOL] class Meta : [EOL] model = BasisOfRentBuildPermissionType [EOL] fields = [string] [EOL] [EOL] [EOL] class BasisOfRentDecisionSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] decision_maker = DecisionMakerSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRentDecision [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class BasisOfRentDecisionCreateUpdateSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] decision_maker = InstanceDictPrimaryKeyRelatedField ( instance_class = DecisionMaker , queryset = DecisionMaker . objects . filter ( ) , related_serializer = DecisionMakerSerializer , required = False , allow_null = True , ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRentDecision [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class BasisOfRentPropertyIdentifierSerializer ( serializers . ModelSerializer ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRentPropertyIdentifier [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class BasisOfRentRateSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] build_permission_type = BasisOfRentBuildPermissionTypeSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRentRate [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class BasisOfRentRateCreateUpdateSerializer ( EnumSupportSerializerMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer , ) : [EOL] id = serializers . IntegerField ( required = False ) [EOL] build_permission_type = InstanceDictPrimaryKeyRelatedField ( instance_class = BasisOfRentBuildPermissionType , queryset = BasisOfRentBuildPermissionType . objects . all ( ) , related_serializer = BasisOfRentBuildPermissionTypeSerializer , ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRentRate [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class BasisOfRentSerializer ( FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] plot_type = BasisOfRentPlotTypeSerializer ( ) [EOL] rent_rates = BasisOfRentRateSerializer ( many = True , required = False , allow_null = True ) [EOL] property_identifiers = BasisOfRentPropertyIdentifierSerializer ( many = True , required = False , allow_null = True ) [EOL] decisions = BasisOfRentDecisionSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class BasisOfRentCreateUpdateSerializer ( UpdateNestedMixin , FieldPermissionsSerializerMixin , serializers . ModelSerializer ) : [EOL] plot_type = InstanceDictPrimaryKeyRelatedField ( instance_class = BasisOfRentPlotType , queryset = BasisOfRentPlotType . objects . all ( ) , related_serializer = BasisOfRentPlotTypeSerializer , ) [EOL] rent_rates = BasisOfRentRateCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] property_identifiers = BasisOfRentPropertyIdentifierSerializer ( many = True , required = False , allow_null = True ) [EOL] decisions = BasisOfRentDecisionCreateUpdateSerializer ( many = True , required = False , allow_null = True ) [EOL] [EOL] class Meta : [EOL] model = BasisOfRent [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.basis_of_rent.BasisOfRentDecisionSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.decision.DecisionMakerSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.basis_of_rent.BasisOfRentDecisionCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.basis_of_rent.BasisOfRentPropertyIdentifierSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.basis_of_rent.BasisOfRentRateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentBuildPermissionTypeSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.basis_of_rent.BasisOfRentRateCreateUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentPlotTypeSerializer$ 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentRateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentPropertyIdentifierSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentDecisionSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.utils.InstanceDictPrimaryKeyRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentRateCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentPropertyIdentifierSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.basis_of_rent.BasisOfRentDecisionCreateUpdateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.basis_of_rent.BasisOfRent]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple , Any [EOL] import users [EOL] import leasing [EOL] import typing [EOL] from auditlog . models import LogEntry [EOL] from rest_framework import serializers [EOL] [EOL] from users . serializers import UserSerializer [EOL] [EOL] [EOL] class LogEntrySerializer ( serializers . ModelSerializer ) : [EOL] actor = UserSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = LogEntry [EOL] exclude = ( [string] , [string] , [string] ) [EOL] [EOL] def to_representation ( self , instance ) : [EOL] result = super ( ) . to_representation ( instance ) [EOL] result [ [string] ] = LogEntry . Action . choices [ instance . action ] [ [number] ] [EOL] result [ [string] ] = instance . changes_dict [EOL] result [ [string] ] = instance . content_type . model [EOL] result [ [string] ] = instance . content_type . name [EOL] [EOL] if ( len ( result [ [string] ] ) == [number] [EOL] and [string] in result [ [string] ] [EOL] and result [ [string] ] [ [string] ] [ [number] ] == [string] ) : [EOL] result [ [string] ] = [string] [EOL] [EOL] for field_name in list ( result [ [string] ] . keys ( ) ) : [EOL] permission_name = [string] . format ( instance . content_type . model_class ( ) . _meta . app_label , instance . content_type . model_class ( ) . _meta . model_name , field_name , ) [EOL] if not self . context [ [string] ] . user . has_perm ( permission_name ) : [EOL] del result [ [string] ] [ field_name ] [EOL] [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.auditlog.LogEntrySerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from rest_framework import serializers [EOL] [EOL] from leasing . models import Management [EOL] [EOL] [EOL] class ManagementSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Management [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.lease.Management]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Any , Union , Type , List , Tuple [EOL] import decimal [EOL] import laske_export [EOL] import leasing [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] from decimal import Decimal , InvalidOperation [EOL] [EOL] from dateutil import parser [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from paramiko import SSHException [EOL] from pysftp import ConnectionException , CredentialException , HostKeysException [EOL] from rest_framework . exceptions import APIException , ValidationError [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from laske_export . exporter import LaskeExporter , LaskeExporterException [EOL] from leasing . models import Invoice , ReceivableType [EOL] from leasing . models . invoice import InvoiceRow , InvoiceSet [EOL] from leasing . permissions import PerMethodPermission [EOL] from leasing . serializers . invoice import InvoiceSerializer , InvoiceSetSerializer [EOL] [EOL] [EOL] def get_values_from_credit_request ( data ) : [EOL] amount = data . get ( [string] , None ) [EOL] receivable_type_id = data . get ( [string] ) [EOL] notes = data . get ( [string] , [string] ) [EOL] receivable_type = None [EOL] [EOL] if amount is not None and not receivable_type_id : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] if amount is not None : [EOL] try : [EOL] amount = Decimal ( amount ) [EOL] except InvalidOperation : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if amount . compare ( Decimal ( [number] ) ) != Decimal ( [number] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if receivable_type_id : [EOL] try : [EOL] receivable_type = ReceivableType . objects . get ( pk = receivable_type_id ) [EOL] except ReceivableType . DoesNotExist : [EOL] raise ValidationError ( [string] . format ( receivable_type_id ) ) [EOL] [EOL] return amount , receivable_type , notes [EOL] [EOL] [EOL] def get_object_from_query_params ( object_type , query_params ) : [EOL] assert object_type in [ [string] , [string] , [string] ] [EOL] [EOL] object_type_map = { [string] : { [string] : [string] , [string] : Invoice , [string] : [string] } , [string] : { [string] : [string] , [string] : InvoiceRow , [string] : [string] , } , [string] : { [string] : [string] , [string] : InvoiceSet , [string] : [string] , } , } [EOL] [EOL] if not query_params . get ( object_type_map [ object_type ] [ [string] ] ) : [EOL] raise ValidationError ( [string] . format ( object_type_map [ object_type ] [ [string] ] ) ) [EOL] [EOL] try : [EOL] [EOL] return object_type_map [ object_type ] [ [string] ] . objects . get ( pk = int ( query_params . get ( object_type_map [ object_type ] [ [string] ] ) ) ) [EOL] except Invoice . DoesNotExist : [EOL] raise ValidationError ( [string] . format ( object_type_map [ object_type ] [ [string] ] ) ) [EOL] except ValueError : [EOL] raise ValidationError ( [string] . format ( object_type_map [ object_type ] [ [string] ] ) ) [EOL] [EOL] [EOL] class InvoiceCalculatePenaltyInterestView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [EOL] invoice = get_object_from_query_params ( [string] , request . query_params ) [EOL] [EOL] end_date = datetime . date . today ( ) [EOL] if request . query_params . get ( [string] ) : [EOL] end_date = parser . parse ( request . query_params [ [string] ] ) . date ( ) [EOL] [EOL] return Response ( invoice . calculate_penalty_interest ( calculation_date = end_date ) ) [EOL] [EOL] [EOL] class InvoiceCreditView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] invoice = get_object_from_query_params ( [string] , request . query_params ) [EOL] [EOL] if not invoice . sent_to_sap_at : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] amount , receivable_type , notes = get_values_from_credit_request ( request . data ) [EOL] [EOL] try : [EOL] credit_invoice = invoice . create_credit_invoice ( amount = amount , receivable_type = receivable_type , notes = notes ) [EOL] except RuntimeError as e : [EOL] raise APIException ( str ( e ) ) [EOL] [EOL] credit_invoice_serializer = InvoiceSerializer ( credit_invoice ) [EOL] [EOL] result = { [string] : credit_invoice_serializer . data } [EOL] [EOL] return Response ( result ) [EOL] [EOL] [EOL] class InvoiceRowCreditView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] invoice_row = get_object_from_query_params ( [string] , request . query_params ) [EOL] [EOL] amount = request . data . get ( [string] , None ) [EOL] [EOL] if amount is not None : [EOL] try : [EOL] amount = Decimal ( amount ) [EOL] except InvalidOperation : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if amount . compare ( Decimal ( [number] ) ) != Decimal ( [number] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] try : [EOL] credit_invoice = invoice_row . invoice . create_credit_invoice ( row_ids = [ invoice_row . id ] , amount = amount ) [EOL] except RuntimeError as e : [EOL] raise APIException ( str ( e ) ) [EOL] [EOL] credit_invoice_serializer = InvoiceSerializer ( credit_invoice ) [EOL] [EOL] result = { [string] : credit_invoice_serializer . data } [EOL] [EOL] return Response ( result ) [EOL] [EOL] [EOL] class InvoiceSetCreditView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] invoiceset = get_object_from_query_params ( [string] , request . query_params ) [EOL] [EOL] amount , receivable_type , notes = get_values_from_credit_request ( request . data ) [EOL] [EOL] try : [EOL] if amount and receivable_type : [EOL] credit_invoiceset = invoiceset . create_credit_invoiceset_for_amount ( amount = amount , receivable_type = receivable_type , notes = notes ) [EOL] else : [EOL] credit_invoiceset = invoiceset . create_credit_invoiceset ( receivable_type = receivable_type , notes = notes ) [EOL] except RuntimeError as e : [EOL] raise APIException ( str ( e ) ) [EOL] [EOL] credit_invoiceset_serializer = InvoiceSetSerializer ( credit_invoiceset ) [EOL] [EOL] result = { [string] : credit_invoiceset_serializer . data , [string] : [ ] } [EOL] [EOL] for credit_invoice in credit_invoiceset . invoices . all ( ) : [EOL] result [ [string] ] . append ( InvoiceSerializer ( credit_invoice ) . data ) [EOL] [EOL] return Response ( result ) [EOL] [EOL] [EOL] class InvoiceExportToLaskeView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] invoice = get_object_from_query_params ( [string] , request . query_params ) [EOL] if invoice . sent_to_sap_at : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if invoice . number : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] try : [EOL] exporter = LaskeExporter ( ) [EOL] exporter . export_invoices ( invoice ) [EOL] except ( LaskeExporterException , ConnectionException , CredentialException , SSHException , HostKeysException , ) as e : [EOL] raise APIException ( str ( e ) ) [EOL] [EOL] return Response ( { [string] : True } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceSerializer$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $leasing.serializers.invoice.InvoiceSerializer$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceSerializer$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $leasing.serializers.invoice.InvoiceSerializer$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceSetSerializer$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $leasing.serializers.invoice.InvoiceSetSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $laske_export.exporter.LaskeExporter$ 0 0 0 0 0 $laske_export.exporter.LaskeExporter$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from rest_framework import viewsets [EOL] [EOL] from leasing . filters import IndexFilter [EOL] from leasing . models . rent import Index [EOL] from leasing . serializers . rent import IndexSerializer [EOL] [EOL] [EOL] class IndexViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = Index . objects . all ( ) [EOL] serializer_class = IndexSerializer [EOL] filterset_class = IndexFilter [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.rent.IndexViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.rent.IndexSerializer]$ 0 0 0 $typing.Type[leasing.filters.IndexFilter]$ 0 0 0
import builtins [EOL] from typing import Type , Dict , Any [EOL] import typing [EOL] import leasing [EOL] from auditlog . models import LogEntry [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db . models import Q [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import status [EOL] from rest_framework . exceptions import APIException , PermissionDenied [EOL] from rest_framework . metadata import SimpleMetadata [EOL] from rest_framework . pagination import LimitOffsetPagination [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from leasing . forms import AuditLogSearchForm [EOL] from leasing . models import Contact , Lease [EOL] from leasing . models . utils import recursive_get_related [EOL] from leasing . serializers . auditlog import LogEntrySerializer [EOL] [EOL] [EOL] class AuditLogView ( APIView ) : [EOL] metadata_class = SimpleMetadata [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [comment] [EOL] search_form = AuditLogSearchForm ( self . request . query_params ) [EOL] if not search_form . is_valid ( ) : [EOL] return Response ( search_form . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] if not request . user . has_perm ( [string] . format ( search_form [ [string] ] . value ( ) ) ) : [EOL] raise PermissionDenied ( ) [EOL] [EOL] if search_form [ [string] ] . value ( ) == [string] : [EOL] try : [EOL] obj = Lease . objects . full_select_related_and_prefetch_related ( ) . get ( pk = search_form [ [string] ] . value ( ) ) [EOL] except Lease . DoesNotExist : [EOL] raise APIException ( [string] ) [EOL] elif search_form [ [string] ] . value ( ) == [string] : [EOL] try : [EOL] obj = Contact . objects . get ( pk = search_form [ [string] ] . value ( ) ) [EOL] except Lease . DoesNotExist : [EOL] raise APIException ( [string] ) [EOL] [EOL] collected_items = recursive_get_related ( obj , user = request . user ) [EOL] [EOL] obj_content_type = ContentType . objects . get_for_model ( obj ) [EOL] q = Q ( content_type = obj_content_type ) & Q ( object_id = obj . id ) [EOL] for content_type , items in collected_items . items ( ) : [EOL] q |= Q ( content_type = content_type ) & Q ( object_id__in = [ i . pk for i in items ] ) [EOL] [EOL] queryset = ( LogEntry . objects . filter ( q ) . distinct ( ) . order_by ( [string] ) . select_related ( [string] ) ) [EOL] [EOL] serializer_context = { [string] : request , [string] : format , [string] : self } [EOL] [EOL] paginator = LimitOffsetPagination ( ) [EOL] page = paginator . paginate_queryset ( queryset , request , view = self ) [EOL] [EOL] if page is not None : [EOL] serializer = LogEntrySerializer ( page , many = True , context = serializer_context ) [EOL] return paginator . get_paginated_response ( serializer . data ) [EOL] [EOL] serializer = LogEntrySerializer ( queryset , many = True , context = serializer_context ) [EOL] [EOL] return Response ( serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] def options ( self , request , * args , ** kwargs ) : [EOL] metadata_class = self . metadata_class ( ) [EOL] metadata = metadata_class . determine_metadata ( request , self ) [EOL] metadata [ [string] ] = { [string] : { } } [EOL] for field_name , field in AuditLogSearchForm ( ) . fields . items ( ) : [EOL] metadata [ [string] ] [ [string] ] [ field_name ] = { [string] : [string] , [string] : field . required , [string] : False , [string] : field . label , } [EOL] if hasattr ( field , [string] ) and type ( field . choices ) == list : [EOL] metadata [ [string] ] [ [string] ] [ field_name ] [ [string] ] = [ { [string] : c [ [number] ] , [string] : c [ [number] ] } for c in field . choices ] [EOL] [EOL] return Response ( metadata , status = status . HTTP_200_OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $leasing.forms.AuditLogSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $leasing.serializers.auditlog.LogEntrySerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $leasing.serializers.auditlog.LogEntrySerializer$ 0 0 0 0 0 $leasing.serializers.auditlog.LogEntrySerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $leasing.serializers.auditlog.LogEntrySerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . filters import ( CollectionCourtDecisionFilter , CollectionLetterFilter , CollectionNoteFilter , ) [EOL] from leasing . models import ( CollectionCourtDecision , CollectionLetter , CollectionLetterTemplate , CollectionNote , ) [EOL] from leasing . serializers . debt_collection import ( CollectionCourtDecisionCreateUpdateSerializer , CollectionCourtDecisionSerializer , CollectionLetterCreateUpdateSerializer , CollectionLetterSerializer , CollectionLetterTemplateSerializer , CollectionNoteCreateUpdateSerializer , CollectionNoteSerializer , ) [EOL] from leasing . viewsets . utils import ( AtomicTransactionModelViewSet , AuditLogMixin , FileMixin , MultiPartJsonParser , ) [EOL] [EOL] [EOL] class CollectionCourtDecisionViewSet ( FileMixin , AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet , ) : [EOL] queryset = CollectionCourtDecision . objects . all ( ) [EOL] serializer_class = CollectionCourtDecisionSerializer [EOL] parser_classes = ( MultiPartJsonParser , ) [EOL] filterset_class = CollectionCourtDecisionFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return CollectionCourtDecisionCreateUpdateSerializer [EOL] [EOL] return CollectionCourtDecisionSerializer [EOL] [EOL] [EOL] class CollectionLetterViewSet ( FileMixin , AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet , ) : [EOL] queryset = CollectionLetter . objects . all ( ) [EOL] serializer_class = CollectionLetterSerializer [EOL] parser_classes = ( MultiPartJsonParser , ) [EOL] filterset_class = CollectionLetterFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return CollectionLetterCreateUpdateSerializer [EOL] [EOL] return CollectionLetterSerializer [EOL] [EOL] [EOL] class CollectionLetterTemplateViewSet ( AuditLogMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = CollectionLetterTemplate . objects . all ( ) [EOL] serializer_class = CollectionLetterTemplateSerializer [EOL] [EOL] [EOL] class CollectionNoteViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = CollectionNote . objects . all ( ) . select_related ( [string] ) [EOL] serializer_class = CollectionNoteSerializer [EOL] filterset_class = CollectionNoteFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return CollectionNoteCreateUpdateSerializer [EOL] [EOL] return CollectionNoteSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionCourtDecisionViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionCourtDecisionViewSet]$ 0 0 0 $typing.Tuple[typing.Type[leasing.viewsets.utils.MultiPartJsonParser]]$ 0 0 0 0 0 0 $typing.Type[leasing.filters.CollectionCourtDecisionFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionLetterViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionLetterViewSet]$ 0 0 0 $typing.Tuple[typing.Type[leasing.viewsets.utils.MultiPartJsonParser]]$ 0 0 0 0 0 0 $typing.Type[leasing.filters.CollectionLetterFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionLetterTemplateViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionLetterTemplateViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionNoteViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.debt_collection.CollectionNoteViewSet]$ 0 0 0 $typing.Type[leasing.filters.CollectionNoteFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Type , Tuple , Any [EOL] import typing [EOL] import leasing [EOL] from django . db . models import Q [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from rest_framework import filters [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . forms import BasisOfRentSearchForm [EOL] from leasing . models import BasisOfRent [EOL] from leasing . serializers . basis_of_rent import ( BasisOfRentCreateUpdateSerializer , BasisOfRentSerializer , ) [EOL] [EOL] from . utils import AtomicTransactionModelViewSet , AuditLogMixin [EOL] [EOL] [EOL] class BasisOfRentViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = BasisOfRent . objects . all ( ) [EOL] serializer_class = BasisOfRentSerializer [EOL] filter_backends = ( DjangoFilterBackend , filters . SearchFilter , filters . OrderingFilter , ) [EOL] search_fields = ( [string] , [string] , [string] , ) [EOL] ordering_fields = ( [string] , [string] , [string] , [string] , ) [EOL] ordering = ( [string] , [string] ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = BasisOfRent . objects . select_related ( [string] , [string] , [string] , [string] ) . prefetch_related ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] if self . action != [string] : [EOL] return queryset [EOL] [EOL] search_form = BasisOfRentSearchForm ( self . request . query_params ) [EOL] [EOL] if search_form . is_valid ( ) : [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] search_text = search_form . cleaned_data . get ( [string] ) [EOL] queryset = queryset . filter ( Q ( detailed_plan_identifier__icontains = search_text ) | Q ( note__icontains = search_text ) | Q ( property_identifiers__identifier__icontains = search_text ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( decisions__decision_maker = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( decisions__decision_date = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( decisions__section = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( decisions__reference_number__icontains = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] return queryset [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return BasisOfRentCreateUpdateSerializer [EOL] [EOL] return BasisOfRentSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.BasisOfRentSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import json [EOL] import os [EOL] [EOL] from auditlog . middleware import AuditlogMiddleware [EOL] from django . conf import settings [EOL] from django . core . files import File [EOL] from django . db import IntegrityError , transaction [EOL] from django . http import HttpResponse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import parsers , status , viewsets [EOL] from rest_framework . decorators import action [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import exception_handler [EOL] [EOL] [EOL] class AuditLogMixin : [EOL] def initial ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] AuditlogMiddleware ( ) . process_request ( request ) [EOL] return super ( ) . initial ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class AtomicTransactionMixin : [EOL] @ transaction . atomic def dispatch ( self , request , * args , ** kwargs ) : [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class AtomicTransactionModelViewSet ( AtomicTransactionMixin , viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] [EOL] [EOL] class MultiPartJsonParser ( parsers . MultiPartParser ) : [EOL] def parse ( self , stream , media_type = None , parser_context = None ) : [EOL] result = super ( ) . parse ( stream , media_type = media_type , parser_context = parser_context ) [EOL] [EOL] data = json . loads ( result . data [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] files = { } [EOL] for key in result . files . keys ( ) : [EOL] files [ key ] = result . files . get ( key ) [EOL] [EOL] return parsers . DataAndFiles ( data , files ) [EOL] [EOL] [EOL] class FileMixin : [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] if not self . serializer_class : [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL] [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_create ( serializer ) [EOL] [EOL] read_serializer = self . serializer_class ( serializer . instance , context = serializer . context ) [EOL] [EOL] headers = self . get_success_headers ( read_serializer . data ) [EOL] return Response ( read_serializer . data , status = status . HTTP_201_CREATED , headers = headers ) [EOL] [EOL] def update ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] if not self . serializer_class : [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL] [EOL] partial = kwargs . pop ( [string] , False ) [EOL] instance = self . get_object ( ) [EOL] serializer = self . get_serializer ( instance , data = request . data , partial = partial ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_update ( serializer ) [EOL] [EOL] if getattr ( instance , [string] , None ) : [EOL] [comment] [EOL] [comment] [EOL] instance . _prefetched_objects_cache = { } [EOL] [EOL] read_serializer = self . serializer_class ( serializer . instance , context = serializer . context ) [EOL] [EOL] return Response ( read_serializer . data ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True ) def download ( self , request , pk = None ) : [EOL] obj = self . get_object ( ) [EOL] [EOL] filename = [string] . join ( [ settings . MEDIA_ROOT , obj . file . name ] ) [EOL] base_filename = os . path . basename ( obj . file . name ) [EOL] [EOL] with open ( filename , [string] ) as fp : [EOL] [comment] [EOL] response = HttpResponse ( File ( fp ) , content_type = [string] ) [EOL] response [ [string] ] = [string] . format ( base_filename ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def integrityerror_exception_handler ( exc , context ) : [EOL] response = exception_handler ( exc , context ) [EOL] [EOL] if isinstance ( exc , IntegrityError ) and not response : [EOL] response = Response ( { [string] : _ ( [string] ) } , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Dict , Tuple [EOL] import typing [EOL] import leasing [EOL] import re [EOL] [EOL] from django . db . models import Q [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework . exceptions import APIException [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from leasing . models import Contact [EOL] from leasing . permissions import PerMethodPermission [EOL] [EOL] [EOL] class ContactExistsView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [EOL] identifier = request . query_params . get ( [string] , None ) [EOL] if not identifier : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] if re . match ( [string] , identifier , re . IGNORECASE ) : [EOL] identifier = [string] . format ( identifier [ [number] : [number] ] , identifier [ - [number] ] ) [EOL] [EOL] return Response ( { [string] : Contact . objects . filter ( Q ( business_id__iexact = identifier ) | Q ( national_identification_number__iexact = identifier ) ) . exists ( ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , Type , Tuple , Any [EOL] import typing [EOL] import leasing [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from django_filters . widgets import BooleanWidget [EOL] from rest_framework . exceptions import ValidationError [EOL] from rest_framework . viewsets import ReadOnlyModelViewSet [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . enums import InvoiceState , InvoiceType [EOL] from leasing . filters import ( CoalesceOrderingFilter , InvoiceFilter , InvoiceNoteFilter , InvoiceRowFilter , InvoiceSetFilter , ) [EOL] from leasing . models import Invoice , Lease [EOL] from leasing . models . invoice import InvoiceNote , InvoiceRow , InvoiceSet , ReceivableType [EOL] from leasing . serializers . invoice import ( CreditNoteUpdateSerializer , GeneratedInvoiceUpdateSerializer , InvoiceCreateSerializer , InvoiceNoteCreateUpdateSerializer , InvoiceNoteSerializer , InvoiceRowSerializer , InvoiceSerializer , InvoiceSerializerWithSuccinctLease , InvoiceSetSerializer , InvoiceUpdateSerializer , ReceivableTypeSerializer , ) [EOL] [EOL] from . utils import AtomicTransactionModelViewSet [EOL] [EOL] [EOL] class InvoiceViewSet ( FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = Invoice . objects . all ( ) [EOL] serializer_class = InvoiceSerializer [EOL] filterset_class = InvoiceFilter [EOL] filter_backends = ( DjangoFilterBackend , CoalesceOrderingFilter ) [EOL] ordering_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] coalesce_ordering = { [string] : ( [string] , [string] ) } [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = Invoice . objects . select_related ( [string] ) . prefetch_related ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] return queryset [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action == [string] : [EOL] return InvoiceCreateSerializer [EOL] [EOL] if self . action in ( [string] , [string] , [string] ) : [EOL] if [string] in self . kwargs : [EOL] instance = self . get_object ( ) [EOL] if instance : [EOL] if instance . type == InvoiceType . CREDIT_NOTE : [EOL] return CreditNoteUpdateSerializer [EOL] [EOL] if instance . generated : [EOL] return GeneratedInvoiceUpdateSerializer [EOL] [EOL] return InvoiceUpdateSerializer [EOL] [EOL] if self . request . query_params . get ( [string] ) : [EOL] boolean_widget = BooleanWidget ( ) [EOL] [comment] [EOL] if boolean_widget . value_from_datadict ( self . request . query_params , None , [string] ) : [EOL] return InvoiceSerializerWithSuccinctLease [EOL] [EOL] return InvoiceSerializer [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] lease = Lease . objects . get ( pk = request . data . get ( [string] ) ) [EOL] [EOL] if not lease . is_invoicing_enabled : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL] [EOL] def update ( self , request , * args , ** kwargs ) : [EOL] instance = self . get_object ( ) [EOL] [EOL] if instance . sent_to_sap_at : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if instance . state == InvoiceState . REFUNDED : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . update ( request , * args , ** kwargs ) [EOL] [EOL] def destroy ( self , request , * args , ** kwargs ) : [EOL] instance = self . get_object ( ) [EOL] [EOL] if instance . number : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if instance . sent_to_sap_at : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . destroy ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class InvoiceNoteViewSet ( FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = InvoiceNote . objects . all ( ) [EOL] serializer_class = InvoiceNoteSerializer [EOL] filterset_class = InvoiceNoteFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return InvoiceNoteCreateUpdateSerializer [EOL] [EOL] return InvoiceNoteSerializer [EOL] [EOL] [EOL] class InvoiceRowViewSet ( FieldPermissionsViewsetMixin , ReadOnlyModelViewSet ) : [EOL] queryset = InvoiceRow . objects . all ( ) [EOL] serializer_class = InvoiceRowSerializer [EOL] filterset_class = InvoiceRowFilter [EOL] [EOL] [EOL] class InvoiceSetViewSet ( ReadOnlyModelViewSet ) : [EOL] queryset = InvoiceSet . objects . all ( ) [EOL] serializer_class = InvoiceSetSerializer [EOL] filterset_class = InvoiceSetFilter [EOL] [EOL] [EOL] class ReceivableTypeViewSet ( ReadOnlyModelViewSet ) : [EOL] queryset = ReceivableType . objects . all ( ) [EOL] serializer_class = ReceivableTypeSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.invoice.InvoiceNoteViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceNoteSerializer]$ 0 0 0 $typing.Type[leasing.filters.InvoiceNoteFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.invoice.InvoiceRowViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceRowSerializer]$ 0 0 0 $typing.Type[leasing.filters.InvoiceRowFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.invoice.InvoiceSetViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.InvoiceSetSerializer]$ 0 0 0 $typing.Type[leasing.filters.InvoiceSetFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.invoice.ReceivableTypeViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.ReceivableTypeSerializer]$ 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . filters import CommentFilter [EOL] from leasing . models import Comment [EOL] from leasing . serializers . comment import ( CommentCreateUpdateSerializer , CommentSerializer , CommentTopic , CommentTopicSerializer , ) [EOL] [EOL] from . utils import AtomicTransactionModelViewSet , AuditLogMixin [EOL] [EOL] [EOL] class CommentViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = Comment . objects . all ( ) . select_related ( [string] , [string] , [string] ) [EOL] serializer_class = CommentSerializer [EOL] filterset_class = CommentFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return CommentCreateUpdateSerializer [EOL] [EOL] return CommentSerializer [EOL] [EOL] [EOL] class CommentTopicViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = CommentTopic . objects . all ( ) [EOL] serializer_class = CommentTopicSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.comment.CommentViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentSerializer]$ 0 0 0 $typing.Type[leasing.filters.CommentFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.comment.CommentTopicViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.comment.CommentTopicSerializer]$ 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from rest_framework . filters import OrderingFilter , SearchFilter [EOL] from rest_framework . mixins import DestroyModelMixin , ListModelMixin , RetrieveModelMixin [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] [EOL] from . . models import LeaseholdTransfer [EOL] from . . serializers . leasehold_transfer import LeaseholdTransferSerializer [EOL] [EOL] [EOL] class LeaseholdTransferViewSet ( FieldPermissionsViewsetMixin , RetrieveModelMixin , ListModelMixin , DestroyModelMixin , GenericViewSet , ) : [EOL] queryset = LeaseholdTransfer . objects . all ( ) [EOL] serializer_class = LeaseholdTransferSerializer [EOL] filter_backends = [ DjangoFilterBackend , OrderingFilter , SearchFilter ] [EOL] search_fields = ( [string] , [string] , [string] , [string] , ) [EOL] ordering_fields = ( [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def get_queryset ( self ) : [EOL] if self . request . query_params . get ( [string] ) : [EOL] return LeaseholdTransfer . objects . all_with_deleted ( ) [EOL] [EOL] return LeaseholdTransfer . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List , Tuple [EOL] import typing [EOL] import leasing [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from rest_framework import viewsets [EOL] from rest_framework . filters import OrderingFilter [EOL] [EOL] from batchrun import models [EOL] from leasing . serializers . batchrun import ( JobRunLogEntrySerializer , JobRunSerializer , JobSerializer , ScheduledJobSerializer , ) [EOL] [EOL] [EOL] class JobRunLogEntryViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = models . JobRunLogEntry . objects . all ( ) [EOL] serializer_class = JobRunLogEntrySerializer [EOL] filter_backends = ( DjangoFilterBackend , OrderingFilter ) [EOL] filterset_fields = [ [string] , [string] ] [EOL] ordering = ( [string] , ) [EOL] [EOL] [EOL] class JobRunViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = models . JobRun . objects . all ( ) [EOL] serializer_class = JobRunSerializer [EOL] filter_backends = ( DjangoFilterBackend , OrderingFilter ) [EOL] filterset_fields = [ [string] ] [EOL] ordering = ( [string] , ) [EOL] [EOL] [EOL] class JobViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = models . Job . objects . all ( ) [EOL] serializer_class = JobSerializer [EOL] [EOL] [EOL] class ScheduledJobViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = models . ScheduledJob . objects . all ( ) [EOL] serializer_class = ScheduledJobSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.batchrun.JobViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.batchrun.JobSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.batchrun.ScheduledJobViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.batchrun.ScheduledJobSerializer]$ 0 0 0
import builtins [EOL] from typing import Type , Dict , Tuple [EOL] import typing [EOL] import leasing [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] from rest_framework import filters [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . filters import CoalesceOrderingFilter , ContactFilter [EOL] from leasing . models import Contact [EOL] from leasing . serializers . contact import ContactSerializer [EOL] [EOL] from . utils import AtomicTransactionModelViewSet , AuditLogMixin [EOL] [EOL] [EOL] class ContactViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = Contact . objects . all ( ) [EOL] serializer_class = ContactSerializer [EOL] filterset_class = ContactFilter [EOL] filter_backends = ( DjangoFilterBackend , filters . SearchFilter , CoalesceOrderingFilter , ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] ordering_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] coalesce_ordering = { [string] : ( [string] , [string] ) } [EOL] ordering = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from rest_framework . viewsets import ReadOnlyModelViewSet [EOL] [EOL] from leasing . models import Vat [EOL] from leasing . serializers . vat import VatSerializer [EOL] [EOL] [EOL] class VatViewSet ( ReadOnlyModelViewSet ) : [EOL] queryset = Vat . objects . all ( ) [EOL] serializer_class = VatSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.vat.VatViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.vat.VatSerializer]$ 0 0 0
from typing import Dict , Any , Type , List , Tuple [EOL] import typing [EOL] import leasing [EOL] from copy import deepcopy [EOL] [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework . exceptions import APIException [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . filters import DecisionFilter [EOL] from leasing . models import Decision , Lease [EOL] from leasing . permissions import PerMethodPermission [EOL] from leasing . serializers . decision import ( DecisionCreateUpdateSerializer , DecisionSerializer , ) [EOL] [EOL] from . utils import AtomicTransactionModelViewSet , AuditLogMixin [EOL] [EOL] [EOL] class DecisionViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = Decision . objects . all ( ) [EOL] serializer_class = DecisionSerializer [EOL] filterset_class = DecisionFilter [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] ) : [EOL] return DecisionCreateUpdateSerializer [EOL] [EOL] return DecisionSerializer [EOL] [EOL] [EOL] def get_decision_from_query_params ( query_params ) : [EOL] if not query_params . get ( [string] ) : [EOL] raise APIException ( [string] ) [EOL] [EOL] try : [EOL] return Decision . objects . get ( pk = int ( query_params . get ( [string] ) ) ) [EOL] except Decision . DoesNotExist : [EOL] raise APIException ( [string] ) [EOL] except ValueError : [EOL] raise APIException ( [string] ) [EOL] [EOL] [EOL] class DecisionCopyToLeasesView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] [docstring] [EOL] decision = get_decision_from_query_params ( request . query_params ) [EOL] [EOL] target_leases = request . query_params . getlist ( [string] ) [EOL] [EOL] if not target_leases : [EOL] raise APIException ( [string] ) [EOL] [EOL] for target_lease_id in target_leases : [EOL] try : [EOL] lease = Lease . objects . get ( id = int ( target_lease_id ) ) [EOL] except Lease . DoesNotExist : [EOL] [comment] [EOL] continue [EOL] except ValueError : [EOL] continue [EOL] [EOL] copied_decision = deepcopy ( decision ) [EOL] copied_decision . pk = None [EOL] copied_decision . lease = lease [EOL] copied_decision . save ( ) [EOL] [EOL] if request . query_params . get ( [string] ) : [EOL] for condition in decision . conditions . all ( ) : [EOL] copied_condition = condition [EOL] copied_condition . pk = None [EOL] copied_condition . decision = copied_decision [EOL] copied_condition . save ( ) [EOL] [EOL] return Response ( { [string] : True } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.decision.DecisionViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.decision.DecisionSerializer]$ 0 0 0 $typing.Type[leasing.filters.DecisionFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Type , List , Tuple [EOL] import typing [EOL] import leasing [EOL] from django . conf import settings [EOL] from django . core . mail import send_mail [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from leasing . metadata import FieldsMetadata [EOL] from leasing . models . email import EmailLog [EOL] from leasing . permissions import PerMethodPermission [EOL] from leasing . serializers . email import SendEmailSerializer [EOL] [EOL] [EOL] class SendEmailView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] metadata_class = FieldsMetadata [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] serializer = SendEmailSerializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] email_log = EmailLog . objects . create ( type = serializer . validated_data [ [string] ] , user = request . user , text = serializer . validated_data [ [string] ] , content_object = serializer . validated_data [ [string] ] , ) [EOL] [EOL] if request . user . email : [EOL] from_email = request . user . email [EOL] else : [EOL] from_email = settings . MVJ_EMAIL_FROM [EOL] [EOL] for recipient in serializer . validated_data [ [string] ] : [EOL] if not recipient . email : [EOL] continue [EOL] [EOL] send_mail ( _ ( [string] ) . format ( serializer . validated_data [ [string] ] . identifier , serializer . validated_data [ [string] ] , ) , serializer . validated_data [ [string] ] , from_email , [ recipient . email ] , fail_silently = False , ) [EOL] [EOL] email_log . recipients . add ( recipient ) [EOL] [EOL] result = { [string] : True } [EOL] [EOL] return Response ( result , status = status . HTTP_200_OK ) [EOL] [EOL] def options ( self , request , * args , ** kwargs ) : [EOL] if self . metadata_class is None : [EOL] return self . http_method_not_allowed ( request , * args , ** kwargs ) [EOL] [EOL] data = self . metadata_class ( ) . determine_metadata ( request , self , serializer = SendEmailSerializer ( ) ) [EOL] [EOL] return Response ( data , status = status . HTTP_200_OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Type[leasing.metadata.FieldsMetadata]$ 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 $leasing.serializers.email.SendEmailSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple , Any [EOL] import typing [EOL] import leasing [EOL] from django . db . models import Q [EOL] from rest_framework . filters import OrderingFilter [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . forms import InfillDevelopmentCompensationSearchForm [EOL] from leasing . models import ( InfillDevelopmentCompensation , InfillDevelopmentCompensationAttachment , ) [EOL] from leasing . serializers . infill_development_compensation import ( InfillDevelopmentCompensationAttachmentCreateUpdateSerializer , InfillDevelopmentCompensationAttachmentSerializer , InfillDevelopmentCompensationCreateUpdateSerializer , InfillDevelopmentCompensationSerializer , ) [EOL] [EOL] from . utils import ( AtomicTransactionModelViewSet , AuditLogMixin , FileMixin , MultiPartJsonParser , ) [EOL] [EOL] [EOL] class InfillDevelopmentCompensationViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = InfillDevelopmentCompensation . objects . all ( ) [EOL] serializer_class = InfillDevelopmentCompensationSerializer [EOL] filter_backends = ( OrderingFilter , ) [EOL] ordering_fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = InfillDevelopmentCompensation . objects . select_related ( [string] ) . prefetch_related ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] if self . action != [string] : [EOL] return queryset [EOL] [EOL] search_form = InfillDevelopmentCompensationSearchForm ( self . request . query_params ) [EOL] [EOL] if search_form . is_valid ( ) : [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] search_text = search_form . cleaned_data . get ( [string] ) [EOL] queryset = queryset . filter ( Q ( name__icontains = search_text ) | Q ( detailed_plan_identifier__icontains = search_text ) | Q ( note__icontains = search_text ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( state__in = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( infill_development_compensation_leases__decisions__decision_maker = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( infill_development_compensation_leases__decisions__decision_date = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] queryset = queryset . filter ( infill_development_compensation_leases__decisions__section = search_form . cleaned_data . get ( [string] ) ) [EOL] [EOL] if search_form . cleaned_data . get ( [string] ) : [EOL] reference_number = search_form . cleaned_data . get ( [string] ) [EOL] queryset = queryset . filter ( Q ( reference_number__icontains = reference_number ) | Q ( infill_development_compensation_leases__decisions__reference_number__icontains = reference_number ) ) [EOL] [EOL] return queryset [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return InfillDevelopmentCompensationCreateUpdateSerializer [EOL] [EOL] return InfillDevelopmentCompensationSerializer [EOL] [EOL] [EOL] class InfillDevelopmentCompensationAttachmentViewSet ( FileMixin , AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet , ) : [EOL] queryset = InfillDevelopmentCompensationAttachment . objects . all ( ) [EOL] serializer_class = InfillDevelopmentCompensationAttachmentSerializer [EOL] parser_classes = ( MultiPartJsonParser , ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return InfillDevelopmentCompensationAttachmentCreateUpdateSerializer [EOL] [EOL] return InfillDevelopmentCompensationAttachmentSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.forms.InfillDevelopmentCompensationSearchForm$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.infill_development_compensation.InfillDevelopmentCompensationAttachmentViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.infill_development_compensation.InfillDevelopmentCompensationAttachmentViewSet]$ 0 0 0 $typing.Tuple[typing.Type[leasing.viewsets.utils.MultiPartJsonParser]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union , Set , Type , List , Tuple [EOL] import typing [EOL] import decimal [EOL] import leasing [EOL] import datetime [EOL] import datetime [EOL] import os [EOL] from decimal import Decimal [EOL] from itertools import groupby [EOL] [EOL] from dateutil import parser [EOL] from dateutil . relativedelta import relativedelta [EOL] from dateutil . rrule import MONTHLY , rrule [EOL] from django . http import HttpResponse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import status , viewsets [EOL] from rest_framework . exceptions import APIException , ValidationError [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from leasing . models import Lease , PlanUnit , Plot [EOL] from leasing . models . utils import get_billing_periods_for_year [EOL] from leasing . permissions import PerMethodPermission [EOL] from leasing . serializers . debt_collection import CreateCollectionLetterDocumentSerializer [EOL] from leasing . serializers . explanation import ExplanationSerializer [EOL] from leasing . serializers . invoice import ( CreateChargeSerializer , InvoiceSerializerWithExplanations , ) [EOL] from leasing . viewsets . utils import AtomicTransactionMixin [EOL] [EOL] [EOL] class LeaseCreateChargeViewSet ( AtomicTransactionMixin , viewsets . GenericViewSet ) : [EOL] serializer_class = CreateChargeSerializer [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED ) [EOL] [EOL] [EOL] def interest_rates_to_strings ( interest_rates ) : [EOL] result = [ ] [EOL] sorted_interest_rates = sorted ( interest_rates , key = lambda x : x [ [number] ] ) [EOL] [EOL] if len ( sorted_interest_rates ) == [number] : [EOL] return [ _ ( [string] ) . format ( interest_percent = sorted_interest_rates [ [number] ] [ [number] ] ) ] [EOL] [EOL] [comment] [EOL] squashed_interest_rates = [ ] [EOL] for k , g in groupby ( sorted_interest_rates , key = lambda x : x [ [number] ] ) : [EOL] rate_group = list ( g ) [EOL] if len ( rate_group ) == [number] : [EOL] squashed_interest_rates . append ( rate_group [ [number] ] ) [EOL] else : [EOL] squashed_interest_rates . append ( ( rate_group [ [number] ] [ [number] ] , rate_group [ - [number] ] [ [number] ] , rate_group [ [number] ] [ [number] ] ) ) [EOL] [EOL] for i , interest_rate in enumerate ( squashed_interest_rates ) : [EOL] if i == len ( squashed_interest_rates ) - [number] : [EOL] [comment] [EOL] result . append ( _ ( [string] ) . format ( start_date = interest_rate [ [number] ] . strftime ( [string] ) , interest_percent = interest_rate [ [number] ] , ) ) [EOL] else : [EOL] result . append ( _ ( [string] ) . format ( start_date = interest_rate [ [number] ] . strftime ( [string] ) , end_date = interest_rate [ [number] ] . strftime ( [string] ) , interest_percent = interest_rate [ [number] ] , ) ) [EOL] [EOL] return result [EOL] [EOL] [EOL] class LeaseCreateCollectionLetterDocumentViewSet ( AtomicTransactionMixin , viewsets . GenericViewSet ) : [EOL] serializer_class = CreateCollectionLetterDocumentSerializer [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] today = datetime . date . today ( ) [EOL] [EOL] serializer = CreateCollectionLetterDocumentSerializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] invoices = serializer . validated_data [ [string] ] [EOL] debt = Decimal ( [number] ) [EOL] debt_strings = [ ] [EOL] interest_strings = [ ] [EOL] interest_total = Decimal ( [number] ) [EOL] interest_rates = set ( ) [EOL] billing_addresses = [ ] [EOL] [EOL] for tenant in serializer . validated_data [ [string] ] : [EOL] billing_tenantcontact = tenant . get_billing_tenantcontacts ( today , today ) . first ( ) [EOL] [EOL] if not billing_tenantcontact or not billing_tenantcontact . contact : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] billing_addresses . append ( [string] . join ( [ str ( billing_tenantcontact . contact ) , billing_tenantcontact . contact . address [EOL] if billing_tenantcontact . contact . address [EOL] else [string] , [string] . format ( billing_tenantcontact . contact . postal_code [EOL] if billing_tenantcontact . contact . postal_code [EOL] else [string] , billing_tenantcontact . contact . city [EOL] if billing_tenantcontact . contact . city [EOL] else [string] , ) , ] ) ) [EOL] [EOL] collection_charge_total = Decimal ( [number] ) [EOL] [EOL] for invoice_datum in invoices : [EOL] invoice = invoice_datum [ [string] ] [EOL] penalty_interest_data = invoice . calculate_penalty_interest ( ) [EOL] [EOL] if penalty_interest_data [ [string] ] : [EOL] interest_strings . append ( _ ( [string] ) . format ( due_date = invoice . due_date . strftime ( [string] ) , interest_amount = penalty_interest_data [ [string] ] , ) ) [EOL] interest_total += penalty_interest_data [ [string] ] [EOL] [EOL] invoice_debt_amount = invoice . outstanding_amount [EOL] debt += invoice_debt_amount [EOL] [EOL] debt_strings . append ( _ ( [string] ) . format ( due_date = invoice . due_date . strftime ( [string] ) , debt_amount = invoice_debt_amount , start_date = invoice . billing_period_start_date . strftime ( [string] ) , end_date = invoice . billing_period_end_date . strftime ( [string] ) , ) ) [EOL] [EOL] for interest_period in penalty_interest_data [ [string] ] : [EOL] interest_rate_tuple = ( interest_period [ [string] ] , interest_period [ [string] ] , interest_period [ [string] ] , ) [EOL] [EOL] interest_rates . add ( interest_rate_tuple ) [EOL] [EOL] collection_charge_total += Decimal ( invoice_datum [ [string] ] ) [EOL] [EOL] grand_total = debt + interest_total + collection_charge_total [EOL] [EOL] lease = serializer . validated_data [ [string] ] [EOL] [EOL] template_data = { [string] : [string] . join ( lease . get_lease_info_text ( tenants = serializer . validated_data [ [string] ] ) ) , [string] : [string] . join ( billing_addresses ) , [string] : str ( lease . identifier ) , [string] : today . strftime ( [string] ) , [string] : [string] . join ( debt_strings ) , [string] : debt , [string] : [string] . join ( interest_rates_to_strings ( interest_rates ) ) , [string] : [string] . join ( interest_strings ) , [string] : interest_total , [string] : grand_total , [string] : collection_charge_total , [string] : len ( invoices ) , } [EOL] [EOL] doc = serializer . validated_data [ [string] ] . render_document ( template_data ) [EOL] [EOL] if not doc : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] response = HttpResponse ( doc , content_type = [string] , ) [EOL] [EOL] response [ [string] ] = [string] . format ( str ( lease . identifier ) , os . path . basename ( serializer . validated_data [ [string] ] . file . name . replace ( [string] , [string] ) ) , ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def get_lease_from_query_params ( query_params ) : [EOL] if not query_params . get ( [string] ) : [EOL] raise APIException ( [string] ) [EOL] [EOL] try : [EOL] return Lease . objects . get ( pk = int ( query_params . get ( [string] ) ) ) [EOL] except Lease . DoesNotExist : [EOL] raise APIException ( [string] ) [EOL] except ValueError : [EOL] raise APIException ( [string] ) [EOL] [EOL] [EOL] class LeaseRentForPeriodView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] if ( [string] not in request . query_params or [string] not in request . query_params ) : [EOL] raise APIException ( [string] ) [EOL] [EOL] try : [EOL] start_date = parser . parse ( request . query_params [ [string] ] ) . date ( ) [EOL] end_date = parser . parse ( request . query_params [ [string] ] ) . date ( ) [EOL] except ValueError : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] if start_date > end_date : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] result = { [string] : start_date , [string] : end_date , [string] : [ ] } [EOL] [EOL] for rent in lease . rents . all ( ) : [EOL] if not rent . is_active_on_period ( start_date , end_date ) : [EOL] continue [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( start_date , end_date , dry_run = True ) [EOL] [EOL] explanation_serializer = ExplanationSerializer ( calculation_result . get_explanation ( ) ) [EOL] [EOL] result [ [string] ] . append ( { [string] : rent . id , [string] : rent . start_date , [string] : rent . end_date , [string] : calculation_result . get_total_amount ( ) , [string] : explanation_serializer . data , } ) [EOL] [EOL] return Response ( result ) [EOL] [EOL] [EOL] class LeaseBillingPeriodsView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] if [string] in request . query_params : [EOL] try : [EOL] year = int ( request . query_params [ [string] ] ) [EOL] except ( ValueError , OverflowError ) : [EOL] raise APIException ( _ ( [string] ) ) [EOL] else : [EOL] year = datetime . date . today ( ) . year [EOL] [EOL] try : [EOL] start_date = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] except ( ValueError , OverflowError ) as e : [EOL] raise APIException ( e ) [EOL] [EOL] billing_periods = [ ] [EOL] for rent in lease . rents . all ( ) : [EOL] due_dates_per_year = rent . get_due_dates_for_period ( start_date , end_date ) [EOL] billing_periods . extend ( get_billing_periods_for_year ( year , len ( due_dates_per_year ) ) ) [EOL] [EOL] return Response ( { [string] : billing_periods } ) [EOL] [EOL] [EOL] class LeasePreviewInvoicesForYearView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] if [string] in request . query_params : [EOL] try : [EOL] year = int ( request . query_params [ [string] ] ) [EOL] except ( ValueError , OverflowError ) : [EOL] raise APIException ( _ ( [string] ) ) [EOL] else : [EOL] year = datetime . date . today ( ) . year [EOL] [EOL] try : [EOL] first_day_of_year = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] except ( ValueError , OverflowError ) as e : [EOL] raise APIException ( e ) [EOL] [EOL] first_day_of_every_month = [ dt . date ( ) for dt in rrule ( freq = MONTHLY , count = [number] , dtstart = first_day_of_year ) ] [EOL] [EOL] result = [ ] [EOL] [EOL] for first_day in first_day_of_every_month : [EOL] last_day = first_day + relativedelta ( day = [number] ) [EOL] [EOL] rents = lease . determine_payable_rents_and_periods ( first_day , last_day , dry_run = True ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( rents ) : [EOL] period_invoices = [ ] [EOL] for invoice_data in period_invoice_data : [EOL] invoice_serializer = InvoiceSerializerWithExplanations ( invoice_data ) [EOL] period_invoices . append ( invoice_serializer . data ) [EOL] [EOL] result . append ( period_invoices ) [EOL] [EOL] return Response ( result ) [EOL] [EOL] [EOL] class LeaseCopyAreasToContractView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def get_view_description ( self , html = False ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] item_types = [ { [string] : Plot , [string] : [string] } , { [string] : PlanUnit , [string] : [string] } , ] [EOL] [EOL] for lease_area in lease . lease_areas . all ( ) : [EOL] for item_type in item_types : [EOL] for item in getattr ( lease_area , item_type [ [string] ] ) . filter ( in_contract = False ) : [EOL] match_data = { [string] : lease_area , [string] : item . identifier , [string] : True , } [EOL] [EOL] defaults = { } [EOL] for field in item_type [ [string] ] . _meta . get_fields ( ) : [EOL] if field . name in [ [string] , [string] , [string] , [string] , [string] , ] : [EOL] continue [EOL] defaults [ field . name ] = getattr ( item , field . name ) [EOL] [EOL] ( new_item , new_item_created ) = item_type [ [string] ] . objects . update_or_create ( defaults = defaults , ** match_data ) [EOL] [EOL] return Response ( { [string] : True } ) [EOL] [EOL] [EOL] class LeaseSetInvoicingStateView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] if [string] not in request . data : [EOL] raise APIException ( [string] ) [EOL] [EOL] if ( request . data [ [string] ] is not True [EOL] and request . data [ [string] ] is not False ) : [EOL] raise APIException ( [string] ) [EOL] [EOL] if request . data [ [string] ] and not lease . is_rent_info_complete : [EOL] raise APIException ( _ ( [string] ) ) [EOL] [EOL] lease . set_is_invoicing_enabled ( request . data [ [string] ] ) [EOL] [EOL] return Response ( { [string] : True } ) [EOL] [EOL] [EOL] class LeaseSetRentInfoCompletionStateView ( APIView ) : [EOL] permission_classes = ( PerMethodPermission , ) [EOL] perms_map = { [string] : [ [string] ] } [EOL] [EOL] def get_view_name ( self ) : [EOL] return _ ( [string] ) [EOL] [EOL] def post ( self , request , format = None ) : [EOL] lease = get_lease_from_query_params ( request . query_params ) [EOL] [EOL] if [string] not in request . data : [EOL] raise APIException ( [string] ) [EOL] [EOL] if ( request . data [ [string] ] is not True [EOL] and request . data [ [string] ] is not False ) : [EOL] raise APIException ( [string] ) [EOL] [EOL] lease . set_is_rent_info_complete ( request . data [ [string] ] ) [EOL] [EOL] return Response ( { [string] : True } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.serializers.invoice.CreateChargeSerializer]$ 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.lease_additional_views.LeaseCreateCollectionLetterDocumentViewSet]$ 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $decimal.Decimal$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $decimal.Decimal$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $decimal.Decimal$ 0 0 0 $decimal.Decimal$ 0 0 0 $decimal.Decimal$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],datetime.date]]$ 0 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 $leasing.serializers.explanation.ExplanationSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],datetime.date]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $leasing.serializers.explanation.ExplanationSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],datetime.date]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $leasing.serializers.invoice.InvoiceSerializerWithExplanations$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $leasing.serializers.invoice.InvoiceSerializerWithExplanations$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[leasing.permissions.PerMethodPermission]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from django . db . models import Q [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import permissions [EOL] from rest_framework . exceptions import PermissionDenied [EOL] from rest_framework . permissions import IsAuthenticated [EOL] [EOL] from leasing . models import UiData [EOL] from leasing . permissions import IsSameUser , MvjDjangoModelPermissions [EOL] from leasing . serializers . ui_data import UiDataCreateUpdateSerializer , UiDataSerializer [EOL] [EOL] from . utils import AtomicTransactionModelViewSet [EOL] [EOL] [EOL] class CanEditGlobalUiData ( permissions . BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if not hasattr ( obj , [string] ) or obj . user : [EOL] return True [EOL] [EOL] return request . user . has_perm ( [string] ) [EOL] [EOL] [EOL] class UiDataViewSet ( AtomicTransactionModelViewSet ) : [EOL] serializer_class = UiDataSerializer [EOL] permission_classes = ( IsAuthenticated , MvjDjangoModelPermissions , IsSameUser , CanEditGlobalUiData , ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return UiData . objects . filter ( Q ( user__isnull = True ) | Q ( user = self . request . user ) ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return UiDataCreateUpdateSerializer [EOL] [EOL] return UiDataSerializer [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] if not request . user . has_perm ( [string] ) : [EOL] if [string] not in request . data : [EOL] request . data [ [string] ] = request . user . id [EOL] [EOL] if not request . data . get ( [string] ) : [EOL] raise PermissionDenied ( _ ( [string] ) ) [EOL] [EOL] if request . data . get ( [string] ) and request . data . get ( [string] ) != request . user . id : [EOL] raise PermissionDenied ( _ ( [string] ) ) [EOL] [EOL] return super ( ) . create ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . models import LeaseAreaAttachment [EOL] from leasing . serializers . land_area import ( LeaseAreaAttachmentCreateUpdateSerializer , LeaseAreaAttachmentSerializer , ) [EOL] [EOL] from . utils import ( AtomicTransactionModelViewSet , AuditLogMixin , FileMixin , MultiPartJsonParser , ) [EOL] [EOL] [EOL] class LeaseAreaAttachmentViewSet ( FileMixin , AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet , ) : [EOL] queryset = LeaseAreaAttachment . objects . all ( ) [EOL] serializer_class = LeaseAreaAttachmentSerializer [EOL] parser_classes = ( MultiPartJsonParser , ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return LeaseAreaAttachmentCreateUpdateSerializer [EOL] [EOL] return LeaseAreaAttachmentSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.land_area.LeaseAreaAttachmentViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.viewsets.land_area.LeaseAreaAttachmentViewSet]$ 0 0 0 $typing.Tuple[typing.Type[leasing.viewsets.utils.MultiPartJsonParser]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from rest_framework import filters [EOL] [EOL] from field_permissions . viewsets import FieldPermissionsViewsetMixin [EOL] from leasing . models import AreaNote [EOL] from leasing . serializers . area_note import ( AreaNoteCreateUpdateSerializer , AreaNoteSerializer , ) [EOL] [EOL] from . utils import AtomicTransactionModelViewSet , AuditLogMixin [EOL] [EOL] [EOL] class AreaNoteViewSet ( AuditLogMixin , FieldPermissionsViewsetMixin , AtomicTransactionModelViewSet ) : [EOL] queryset = AreaNote . objects . all ( ) [EOL] serializer_class = AreaNoteSerializer [EOL] filter_backends = ( filters . SearchFilter , ) [EOL] search_fields = ( [string] , ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in ( [string] , [string] , [string] , [string] ) : [EOL] return AreaNoteCreateUpdateSerializer [EOL] [EOL] return AreaNoteSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict , Any [EOL] import typing [EOL] import re [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] from leasing . enums import ContactType [EOL] from leasing . importer . mappings import ASIAKASTYYPPI_MAP , MAA_MAP [EOL] from leasing . models import Contact [EOL] [EOL] asiakas_cache = { } [EOL] [EOL] PERSON_NAMES = [ ] [EOL] [EOL] [EOL] def expand_lease_identifier ( id ) : [EOL] return { [string] : id , [string] : id [ : id . index ( [string] ) ] , [string] : id [ [number] : [number] ] , [string] : int ( id [ [number] : [number] ] ) , [string] : int ( id [ [number] : [number] ] ) , [string] : int ( id [ id . index ( [string] ) + [number] : ] ) , } [EOL] [EOL] [EOL] def expanded_id_to_query ( expanded_id , where = True ) : [EOL] if where : [EOL] expanded_id [ [string] ] = [string] [EOL] else : [EOL] expanded_id [ [string] ] = [string] [EOL] [EOL] return [string] . format ( ** expanded_id ) [EOL] [EOL] [EOL] def expanded_id_to_query_alku ( expanded_id , where = True ) : [EOL] if where : [EOL] expanded_id [ [string] ] = [string] [EOL] else : [EOL] expanded_id [ [string] ] = [string] [EOL] [EOL] return [string] . format ( ** expanded_id ) [EOL] [EOL] [EOL] def rows_to_dict_list ( cursor ) : [EOL] columns = [ i [ [number] ] for i in cursor . description ] [EOL] return [ dict ( zip ( columns , row ) ) for row in cursor ] [EOL] [EOL] [EOL] def get_real_property_identifier ( data ) : [EOL] identifier_parts = [ data [ [string] ] , data [ [string] ] , data [ [string] ] , data [ [string] ] , ] [EOL] [EOL] for i , identifier_part in enumerate ( identifier_parts ) : [EOL] if re . fullmatch ( [string] , identifier_part ) : [EOL] identifier_parts [ i ] = [string] [EOL] else : [EOL] identifier_parts [ i ] = identifier_part . lstrip ( [string] ) [EOL] [EOL] identifier = [string] . join ( identifier_parts ) [EOL] [EOL] if data [ [string] ] and data [ [string] ] != [string] : [EOL] identifier += [string] . format ( data [ [string] ] . lstrip ( [string] ) ) [EOL] [EOL] return identifier [EOL] [EOL] [EOL] def get_unknown_contact ( ) : [EOL] ( contact , contact_created ) = Contact . objects . get_or_create ( type = ContactType . OTHER , first_name = [string] , last_name = [string] , name = [string] , ) [EOL] [EOL] return contact [EOL] [EOL] [EOL] def get_or_create_contact ( data ) : [comment] [EOL] if data [ [string] ] : [EOL] if data [ [string] ] in asiakas_cache : [EOL] return asiakas_cache [ data [ [string] ] ] [EOL] [EOL] contact_type = ASIAKASTYYPPI_MAP [ data [ [string] ] ] [EOL] name = None [EOL] first_name = None [EOL] last_name = None [EOL] [EOL] if data [ [string] ] . startswith ( [string] ) : [EOL] data [ [string] ] = data [ [string] ] [ [number] : ] [EOL] [EOL] data [ [string] ] = re . sub ( [string] , [string] , data [ [string] ] ) [EOL] [EOL] if ( data [ [string] ] . lower ( ) . endswith ( [string] ) or [string] in data [ [string] ] . lower ( ) or data [ [string] ] . lower ( ) . endswith ( [string] ) or data [ [string] ] . lower ( ) . startswith ( [string] ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) or [string] in data [ [string] ] . lower ( ) ) : [EOL] contact_type = ContactType . BUSINESS [EOL] [EOL] if ( data [ [string] ] == [string] or data [ [string] ] . startswith ( [string] ) or data [ [string] ] . startswith ( [string] ) or data [ [string] ] . endswith ( [string] ) ) : [EOL] contact_type = ContactType . UNIT [EOL] [EOL] if data [ [string] ] in PERSON_NAMES or [string] in data [ [string] ] . lower ( ) : [EOL] contact_type = ContactType . PERSON [EOL] [EOL] if contact_type == ContactType . PERSON : [EOL] name_parts = [ p . strip ( ) for p in data [ [string] ] . split ( [string] ) if p . strip ( ) ] [EOL] [EOL] if len ( name_parts ) == [number] : [EOL] last_name = name_parts [ [number] ] [EOL] else : [EOL] split_pos = [number] [EOL] if name_parts [ [number] ] . lower ( ) == [string] or name_parts [ [number] ] . lower ( ) == [string] : [EOL] split_pos = [number] [EOL] [EOL] last_name = [string] . join ( name_parts [ [number] : split_pos ] ) [EOL] first_name = [string] . join ( name_parts [ split_pos : ] ) [EOL] else : [EOL] name = data [ [string] ] . strip ( ) [EOL] [EOL] if data [ [string] ] and data [ [string] ] . strip ( ) : [EOL] if not name : [EOL] name = [string] [EOL] [EOL] name += [string] + data [ [string] ] . strip ( ) [EOL] [EOL] language = None [EOL] if data [ [string] ] == [string] : [EOL] language = [string] [EOL] if data [ [string] ] == [string] : [EOL] language = [string] [EOL] [EOL] phone = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if data [ [string] . format ( i ) ] : [EOL] phone . append ( data [ [string] . format ( i ) ] ) [EOL] [EOL] postal_code = None [EOL] if data [ [string] ] : [EOL] postal_code = data [ [string] ] . strip ( ) [EOL] if ( postal_code == [string] or re . match ( [string] , postal_code ) or re . match ( [string] , postal_code . lower ( ) ) ) : [EOL] postal_code = None [EOL] [EOL] ( contact , contact_created ) = Contact . objects . get_or_create ( type = contact_type , first_name = first_name , last_name = last_name , name = name , address = data [ [string] ] , postal_code = postal_code , country = MAA_MAP [ data [ [string] ] ] , business_id = data [ [string] ] , language = language , phone = [string] . join ( phone ) , note = data [ [string] ] , email = data [ [string] ] , sap_customer_number = data [ [string] ] , partner_code = data [ [string] ] , electronic_billing_address = data [ [string] ] , ) [EOL] else : [EOL] contact = get_unknown_contact ( ) [EOL] [EOL] asiakas_cache [ data [ [string] ] ] = contact [EOL] [EOL] return contact [EOL] [EOL] [EOL] def get_import_user ( ) : [EOL] model = get_user_model ( ) [EOL] [EOL] ( user , user_created ) = model . objects . get_or_create ( username = [string] , first_name = [string] , last_name = [string] , email = [string] , is_staff = False , is_superuser = False , is_active = False , ) [EOL] [EOL] if user_created : [EOL] user . set_unusable_password ( ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Optional , Dict , Tuple [EOL] import typing [EOL] from leasing . enums import ( AreaUnit , ContactType , InvoiceState , InvoiceType , LeaseAreaType , LeaseState , RentAdjustmentType , RentCycle , RentType , ) [EOL] [EOL] VUOKRALAJI_MAP = { None : RentType . MANUAL , [string] : RentType . FIXED , [string] : RentType . INDEX , [string] : RentType . ONE_TIME , [string] : RentType . FREE , [string] : RentType . MANUAL , } [EOL] [EOL] TILA_MAP = { [string] : LeaseState . LEASE , [string] : LeaseState . APPLICATION , [string] : LeaseState . PERMISSION , [string] : LeaseState . RESERVATION , [string] : LeaseState . LEASE , [string] : LeaseState . LEASE , } [EOL] [EOL] VUOKRAKAUSI_MAP = { None : None , [string] : RentCycle . JANUARY_TO_DECEMBER , [string] : RentCycle . APRIL_TO_MARCH , } [EOL] [EOL] ALENNUS_KOROTUS_MAP = { [string] : RentAdjustmentType . DISCOUNT , [string] : RentAdjustmentType . INCREASE , } [EOL] [EOL] [comment] [EOL] SAAMISLAJI_MAP = { [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] LASKUN_TILA_MAP = { [string] : InvoiceState . REFUNDED , [string] : InvoiceState . OPEN , [string] : InvoiceState . PAID , } [EOL] [EOL] LASKUTYYPPI_MAP = { [string] : InvoiceType . CHARGE , [string] : InvoiceType . CREDIT_NOTE } [EOL] [EOL] ASIAKASTYYPPI_MAP = { None : ContactType . OTHER , [string] : ContactType . PERSON , [string] : ContactType . BUSINESS , [string] : ContactType . UNIT , [string] : ContactType . ASSOCIATION , [string] : ContactType . OTHER , } [EOL] [EOL] MAA_MAP = { None : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] IRTISANOMISAIKA_MAP = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] HITAS_MAP = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] FINANCING_MAP = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] MANAGEMENT_MAP = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] LEASE_AREA_TYPE_MAP = { None : LeaseAreaType . OTHER , [string] : LeaseAreaType . PLAN_UNIT , [string] : LeaseAreaType . REAL_PROPERTY , [string] : LeaseAreaType . OTHER , } [EOL] [EOL] BASIS_OF_RENT_PLOT_TYPE_MAP = { None : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] BASIS_OF_RENT_BUILD_PERMISSION_MAP = { ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , ( [string] , [string] ) : [number] , } [EOL] [EOL] BASIS_OF_RENT_RATE_AREA_UNIT_MAP = { None : None , [string] : AreaUnit . SQUARE_METRE , [string] : AreaUnit . APARTMENT_SQUARE_METRE , [string] : AreaUnit . FLOOR_SQUARE_METRE , [string] : AreaUnit . FLOOR_SQUARE_METRE , [string] : AreaUnit . FLOOR_SQUARE_METRE , } [EOL] [EOL] DECISION_MAKER_MAP = { None : None , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] MANUAL_RATIOS = { [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , [number] ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , [string] : ( [number] , ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,builtins.str],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Optional[builtins.str],typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.float],typing.Tuple[builtins.float,builtins.float]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Dict , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . gis import geos [EOL] from django . db import connection as django_connection [EOL] [EOL] from leasing . enums import AreaType [EOL] from leasing . importer . area import METADATA_COLUMN_NAME_MAP [EOL] from leasing . importer . utils import rows_to_dict_list [EOL] from leasing . models . area import Area , AreaSource [EOL] [EOL] from . base import BaseImporter [EOL] [EOL] AREA_IMPORT_TYPES = { [string] : { [string] : [string] , [string] : [string] , [string] : AreaType . LEASE_AREA , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } } [EOL] [EOL] [EOL] class LeaseAreaImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] import cx_Oracle [EOL] [EOL] connection = cx_Oracle . connect ( user = settings . LEASE_AREA_DATABASE_USER , password = settings . LEASE_AREA_DATABASE_PASSWORD , dsn = settings . LEASE_AREA_DATABASE_DSN , encoding = [string] , nencoding = [string] , ) [EOL] self . cursor = connection . cursor ( ) [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] pass [EOL] [EOL] def read_options ( self , options ) : [EOL] pass [EOL] [EOL] def execute ( self ) : [comment] [EOL] cursor = self . cursor [EOL] django_cursor = django_connection . cursor ( ) [EOL] [EOL] errors = [ ] [EOL] [EOL] area_import = AREA_IMPORT_TYPES [ [string] ] [EOL] [EOL] self . stdout . write ( area_import [ [string] ] ) [EOL] ( source , source_created ) = AreaSource . objects . get_or_create ( identifier = area_import [ [string] ] , defaults = { [string] : area_import [ [string] ] } , ) [EOL] [EOL] cursor . execute ( area_import [ [string] ] ) [EOL] [EOL] lease_area_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] count = [number] [EOL] for row in lease_area_rows : [EOL] metadata = { METADATA_COLUMN_NAME_MAP [ column_name ] : row . get ( column_name . upper ( ) ) for column_name in area_import [ [string] ] } [EOL] match_data = { [string] : area_import [ [string] ] , [string] : row . get ( area_import [ [string] ] ) , [string] : row . get ( [string] ) , [string] : source , } [EOL] [EOL] [comment] [EOL] wkt_geom_with_srid = [string] . format ( row . get ( [string] ) . read ( ) ) [EOL] [EOL] [comment] [EOL] django_cursor . execute ( [string] , [ wkt_geom_with_srid ] , ) [EOL] [EOL] geom_text = django_cursor . fetchone ( ) [ [number] ] [EOL] [EOL] try : [EOL] geom = geos . GEOSGeometry ( geom_text ) [EOL] except geos . error . GEOSException as e : [EOL] errors . append ( [string] + str ( e ) ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] [EOL] [comment] [EOL] continue [EOL] [EOL] if geom and isinstance ( geom , geos . Polygon ) : [EOL] geom = geos . MultiPolygon ( geom ) [EOL] [EOL] if geom and not isinstance ( geom , geos . MultiPolygon ) : [EOL] errors . append ( [string] + [string] . format ( geom ) ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] [EOL] [comment] [EOL] continue [EOL] [EOL] other_data = { [string] : geom , [string] : metadata } [EOL] [EOL] Area . objects . update_or_create ( defaults = other_data , ** match_data ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] if errors : [EOL] self . stdout . write ( [string] . format ( len ( errors ) ) ) [EOL] for error in errors : [EOL] self . stdout . write ( error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from leasing . models import ( BasisOfRent , BasisOfRentDecision , BasisOfRentPropertyIdentifier , BasisOfRentRate , Index , ) [EOL] [EOL] from . base import BaseImporter [EOL] from . mappings import ( BASIS_OF_RENT_BUILD_PERMISSION_MAP , BASIS_OF_RENT_PLOT_TYPE_MAP , BASIS_OF_RENT_RATE_AREA_UNIT_MAP , DECISION_MAKER_MAP , FINANCING_MAP , MANAGEMENT_MAP , ) [EOL] from . utils import get_real_property_identifier , rows_to_dict_list [EOL] [EOL] [EOL] class BasisOfRentImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] import cx_Oracle [EOL] [EOL] connection = cx_Oracle . connect ( user = [string] , password = [string] , dsn = [string] , encoding = [string] , nencoding = [string] , ) [EOL] [EOL] self . cursor = connection . cursor ( ) [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] self . offset = [number] [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] parser . add_argument ( [string] , dest = [string] , type = int , required = False , help = [string] , ) [EOL] [EOL] def read_options ( self , options ) : [EOL] if options [ [string] ] : [EOL] self . offset = options [ [string] ] [EOL] [EOL] def execute ( self ) : [comment] [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] for model in list ( auditlog . _registry . keys ( ) ) : [EOL] auditlog . unregister ( model ) [EOL] [EOL] cursor = self . cursor [EOL] [EOL] query = [string] . format ( self . offset ) [EOL] [EOL] cursor . execute ( query ) [EOL] [EOL] peruste_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] peruste_count = len ( peruste_rows ) [EOL] [EOL] count = [number] [EOL] if self . offset : [EOL] count = self . offset - [number] [EOL] peruste_count += self . offset [EOL] [EOL] self . stdout . write ( [string] . format ( peruste_count ) ) [EOL] [EOL] for basis_of_rent_row in peruste_rows : [EOL] count += [number] [EOL] self . stdout . write ( [string] . format ( basis_of_rent_row [ [string] ] , count , peruste_count ) ) [EOL] [EOL] if basis_of_rent_row [ [string] ] is None : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] index = None [EOL] if basis_of_rent_row [ [string] ] and basis_of_rent_row [ [string] ] : [EOL] try : [EOL] index = Index . objects . get ( month = basis_of_rent_row [ [string] ] , year = basis_of_rent_row [ [string] ] ) [EOL] except Index . DoesNotExist : [EOL] self . stdout . write ( [string] . format ( basis_of_rent_row [ [string] ] , basis_of_rent_row [ [string] ] ) ) [EOL] [EOL] notes = [ ] [EOL] if basis_of_rent_row [ [string] ] : [EOL] notes . append ( basis_of_rent_row [ [string] ] . strip ( ) ) [EOL] [EOL] if basis_of_rent_row [ [string] ] : [EOL] notes . append ( basis_of_rent_row [ [string] ] . strip ( ) ) [EOL] [EOL] ( basis_of_rent , created ) = BasisOfRent . objects . get_or_create ( plot_type_id = BASIS_OF_RENT_PLOT_TYPE_MAP [ basis_of_rent_row [ [string] ] ] , start_date = basis_of_rent_row [ [string] ] . date ( ) [EOL] if basis_of_rent_row [ [string] ] [EOL] else None , end_date = basis_of_rent_row [ [string] ] . date ( ) [EOL] if basis_of_rent_row [ [string] ] [EOL] else None , detailed_plan_identifier = basis_of_rent_row [ [string] ] , financing_id = FINANCING_MAP [ basis_of_rent_row [ [string] ] ] [EOL] if basis_of_rent_row [ [string] ] [EOL] else None , management_id = MANAGEMENT_MAP [ basis_of_rent_row [ [string] ] ] [EOL] if basis_of_rent_row [ [string] ] [EOL] else None , lease_rights_end_date = basis_of_rent_row [ [string] ] . date ( ) [EOL] if basis_of_rent_row [ [string] ] [EOL] else None , index = index , note = [string] . join ( notes ) if notes else None , ) [EOL] [EOL] property_identifier = get_real_property_identifier ( basis_of_rent_row ) [EOL] [EOL] ( basis_of_rent_property_identifier , created , ) = BasisOfRentPropertyIdentifier . objects . get_or_create ( basis_of_rent = basis_of_rent , identifier = property_identifier ) [EOL] [EOL] decision_column_prefixes = [ [string] , [string] ] [EOL] [EOL] for decision_column_prefix in decision_column_prefixes : [EOL] decision_maker_string = basis_of_rent_row [ [string] . format ( decision_column_prefix ) ] [EOL] decision_datetime = basis_of_rent_row [ [string] . format ( decision_column_prefix ) ] [EOL] decision_section_string = basis_of_rent_row [ [string] . format ( decision_column_prefix ) ] [EOL] [EOL] if not decision_maker_string or not decision_datetime : [EOL] continue [EOL] [EOL] ( basis_of_rent_decision , created , ) = BasisOfRentDecision . objects . get_or_create ( basis_of_rent = basis_of_rent , reference_number = None , decision_maker_id = DECISION_MAKER_MAP [ decision_maker_string ] [EOL] if decision_maker_string [EOL] else None , decision_date = decision_datetime . date ( ) [EOL] if decision_datetime [EOL] else None , section = decision_section_string [EOL] if decision_section_string [EOL] else None , ) [EOL] [EOL] query = [string] . format ( basis_of_rent_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] [EOL] hinta_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for rate_row in hinta_rows : [EOL] build_permission_type = BASIS_OF_RENT_BUILD_PERMISSION_MAP [ ( rate_row [ [string] ] , rate_row [ [string] ] ) ] [EOL] amount = rate_row [ [string] ] [EOL] area_unit = BASIS_OF_RENT_RATE_AREA_UNIT_MAP [ rate_row [ [string] ] ] [EOL] [EOL] if not amount : [EOL] amount = rate_row [ [string] ] [EOL] area_unit = BASIS_OF_RENT_RATE_AREA_UNIT_MAP [ rate_row [ [string] ] ] [EOL] [EOL] if not amount : [EOL] amount = rate_row [ [string] ] [EOL] area_unit = BASIS_OF_RENT_RATE_AREA_UNIT_MAP [ rate_row [ [string] ] ] [EOL] [EOL] ( basis_of_rent_rate , created ) = BasisOfRentRate . objects . get_or_create ( basis_of_rent = basis_of_rent , build_permission_type_id = build_permission_type , amount = amount , area_unit = area_unit , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0
from typing import Optional , Match , Dict , Any , Set , List [EOL] import typing [EOL] import datetime [EOL] import re [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] [EOL] from auditlog . models import LogEntry [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . utils . timezone import make_aware [EOL] [EOL] from leasing . enums import ( ContactType , DueDatesPosition , DueDatesType , IndexType , InvoiceDeliveryMethod , LeaseState , LocationType , PeriodType , RentAdjustmentAmountType , RentType , TenantContactType , ) [EOL] from leasing . models import ( Collateral , Comment , Condition , Contact , Contract , ContractChange , ContractRent , Decision , District , FixedInitialYearRent , IndexAdjustedRent , Inspection , IntendedUse , Invoice , Lease , LeaseArea , LeaseIdentifier , LeaseType , Municipality , PayableRent , Rent , RentAdjustment , RentIntendedUse , Tenant , TenantContact , ) [EOL] from leasing . models . invoice import InvoicePayment , InvoiceRow [EOL] from leasing . models . land_area import LeaseAreaAddress [EOL] from leasing . models . rent import FIXED_DUE_DATES , EqualizedRent , RentDueDate [EOL] from leasing . models . tenant import TenantRentShare [EOL] from leasing . models . utils import DayMonth [EOL] [EOL] from . base import BaseImporter [EOL] from . mappings import ( ALENNUS_KOROTUS_MAP , DECISION_MAKER_MAP , FINANCING_MAP , HITAS_MAP , IRTISANOMISAIKA_MAP , LASKUN_TILA_MAP , LASKUTYYPPI_MAP , LEASE_AREA_TYPE_MAP , MANAGEMENT_MAP , MANUAL_RATIOS , SAAMISLAJI_MAP , TILA_MAP , VUOKRAKAUSI_MAP , VUOKRALAJI_MAP , ) [EOL] from . utils import ( asiakas_cache , expand_lease_identifier , expanded_id_to_query , expanded_id_to_query_alku , get_import_user , get_or_create_contact , get_real_property_identifier , get_unknown_contact , rows_to_dict_list , ) [EOL] [EOL] [EOL] class LeaseImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] import cx_Oracle [EOL] [EOL] connection = cx_Oracle . connect ( user = [string] , password = [string] , dsn = [string] , encoding = [string] , nencoding = [string] , ) [EOL] [EOL] self . cursor = connection . cursor ( ) [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] self . lease_ids = None [EOL] self . offset = [number] [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] parser . add_argument ( [string] , dest = [string] , type = str , required = False , help = [string] , ) [EOL] parser . add_argument ( [string] , dest = [string] , type = int , required = False , help = [string] , ) [EOL] [EOL] def read_options ( self , options ) : [EOL] if options [ [string] ] : [EOL] self . lease_ids = [ ] [EOL] for lease_id in options [ [string] ] . split ( [string] ) : [EOL] lease_id = lease_id . strip ( ) . upper ( ) [EOL] id_match = re . match ( [string] , lease_id , ) [EOL] [EOL] if not id_match : [EOL] raise RuntimeError ( [string] . format ( lease_id ) ) [EOL] [EOL] self . lease_ids . append ( lease_id ) [EOL] [EOL] if not self . lease_ids and options [ [string] ] : [EOL] self . offset = options [ [string] ] [EOL] [EOL] def execute ( self ) : [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] for model in list ( auditlog . _registry . keys ( ) ) : [EOL] auditlog . unregister ( model ) [EOL] [EOL] self . import_leases ( ) [EOL] [EOL] def get_or_create_default_lessor ( self ) : [EOL] ( contact , contact_created ) = Contact . objects . get_or_create ( is_lessor = True , name = [string] , defaults = { [string] : ContactType . UNIT , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , } , ) [EOL] [EOL] return contact [EOL] [EOL] def import_leases ( self ) : [comment] [EOL] cursor = self . cursor [EOL] [EOL] default_lessor = self . get_or_create_default_lessor ( ) [EOL] [EOL] if self . lease_ids is None : [EOL] query = [string] . format ( self . offset ) [EOL] [EOL] cursor . execute ( query ) [EOL] self . lease_ids = [ [string] . format ( row [ [number] ] , row [ [number] ] ) for row in cursor ] [EOL] [EOL] lease_id_count = len ( self . lease_ids ) [EOL] self . stdout . write ( [string] . format ( lease_id_count ) ) [EOL] [EOL] [comment] [EOL] intended_use_map = { intended_use . name : intended_use . id for intended_use in IntendedUse . objects . all ( ) } [EOL] [EOL] [comment] [EOL] Comment . _meta . get_field ( [string] ) . auto_now_add = False [EOL] Comment . _meta . get_field ( [string] ) . auto_now = False [EOL] [EOL] lease_content_type = ContentType . objects . get_for_model ( Lease ) [EOL] mvj_import_user = get_import_user ( ) [EOL] [EOL] count = [number] [EOL] if self . offset : [EOL] count = self . offset - [number] [EOL] lease_id_count += self . offset [EOL] [EOL] for lease_id in self . lease_ids : [EOL] if not lease_id : [EOL] continue [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] . format ( lease_id , count , lease_id_count ) ) [EOL] [EOL] id_parts = expand_lease_identifier ( lease_id ) [EOL] [EOL] [comment] [EOL] [EOL] asiakas_num_to_tenant = { } [EOL] [EOL] query = [string] + expanded_id_to_query ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] [EOL] vuokraus_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for lease_row in vuokraus_rows : [EOL] lease_type = LeaseType . objects . get ( identifier = id_parts [ [string] ] ) [EOL] municipality = Municipality . objects . get ( identifier = id_parts [ [string] ] ) [EOL] district = District . objects . get ( municipality = municipality , identifier = id_parts [ [string] ] ) [EOL] [EOL] ( lease_identifier , lease_identifier_created , ) = LeaseIdentifier . objects . get_or_create ( type = lease_type , municipality = municipality , district = district , sequence = id_parts [ [string] ] , ) [EOL] [EOL] if lease_identifier_created : [EOL] lease = Lease . objects . create ( type = lease_type , municipality = municipality , district = district , identifier = lease_identifier , ) [EOL] else : [EOL] lease = Lease . objects . get ( identifier = lease_identifier ) [EOL] [EOL] lease . state = TILA_MAP [ lease_row [ [string] ] ] [EOL] lease . start_date = ( lease_row [ [string] ] . date ( ) if lease_row [ [string] ] else None ) [EOL] lease . end_date = ( lease_row [ [string] ] . date ( ) if lease_row [ [string] ] else None ) [EOL] lease . intended_use_id = ( intended_use_map [ lease_row [ [string] ] ] [EOL] if lease_row [ [string] ] in intended_use_map [EOL] else None ) [EOL] lease . intended_use_note = lease_row [ [string] ] [EOL] lease . notice_period_id = ( IRTISANOMISAIKA_MAP [ lease_row [ [string] ] ] [EOL] if lease_row [ [string] ] [EOL] else None ) [EOL] lease . notice_note = lease_row [ [string] ] [EOL] lease . reference_number = lease_row [ [string] ] [EOL] lease . hitas_id = ( HITAS_MAP [ lease_row [ [string] ] ] if lease_row [ [string] ] else None ) [EOL] lease . financing_id = ( FINANCING_MAP [ lease_row [ [string] ] ] [EOL] if lease_row [ [string] ] [EOL] else None ) [EOL] lease . management_id = ( MANAGEMENT_MAP [ lease_row [ [string] ] ] [EOL] if lease_row [ [string] ] [EOL] else None ) [EOL] lease . lessor = default_lessor [EOL] [EOL] if id_parts [ [string] ] == [string] : [EOL] lease . is_subject_to_vat = True [EOL] [EOL] if id_parts [ [string] ] == [string] : [EOL] lease . state = LeaseState . RYA [EOL] [EOL] query = [string] + expanded_id_to_query ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] for row in cursor : [EOL] if not row [ [number] ] or not row [ [number] ] . strip ( ) : [EOL] continue [EOL] [EOL] ( comment , comment_created ) = Comment . objects . get_or_create ( lease = lease , user = mvj_import_user , topic_id = [number] , text = row [ [number] ] . strip ( ) , created_at = make_aware ( row [ [number] ] ) , modified_at = make_aware ( row [ [number] ] ) , ) [EOL] [EOL] notes = [ ] [EOL] [EOL] preparers = [ ] [EOL] if lease_row [ [string] ] : [EOL] preparers . append ( lease_row [ [string] ] ) [EOL] if lease_row [ [string] ] : [EOL] preparers . append ( lease_row [ [string] ] ) [EOL] if preparers : [EOL] notes . append ( [string] . format ( [string] . join ( preparers ) ) ) [EOL] [EOL] if lease_row [ [string] ] : [EOL] notes . append ( [string] . format ( lease_row [ [string] ] ) ) [EOL] if lease_row [ [string] ] : [EOL] notes . append ( [string] . format ( lease_row [ [string] ] ) ) [EOL] if lease_row [ [string] ] : [EOL] notes . append ( [string] . format ( lease_row [ [string] ] ) ) [EOL] [EOL] lease . note = [string] . join ( notes ) [EOL] [EOL] if lease_row [ [string] ] == [string] : [EOL] lease . transferable = True [EOL] elif lease_row [ [string] ] == [string] : [EOL] lease . transferable = False [EOL] [EOL] lease . is_invoicing_enabled = ( True if lease_row [ [string] ] == [string] else False ) [EOL] lease . is_rent_info_complete = lease . is_invoicing_enabled [EOL] [EOL] lease . save ( ) [EOL] [EOL] self . stdout . write ( [string] . format ( lease . id ) ) [EOL] [EOL] LogEntry . objects . create ( action = LogEntry . Action . CREATE , content_type = lease_content_type , object_pk = lease . id , object_id = lease . id , object_repr = [string] . format ( lease . get_identifier_string ( ) ) , actor = mvj_import_user , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] asrooli_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for role_row in [ row for row in asrooli_rows if row [ [string] ] == [string] ] : [EOL] self . stdout . write ( [string] . format ( role_row [ [string] ] ) ) [EOL] contact = get_or_create_contact ( role_row ) [EOL] self . stdout . write ( [string] . format ( contact ) ) [EOL] [EOL] start_date = role_row [ [string] ] [EOL] if [number] < start_date . year < [number] : [EOL] start_date = start_date . replace ( year = start_date . year - [number] ) [EOL] [EOL] if [number] < start_date . year < [number] : [EOL] start_date = start_date . replace ( year = start_date . year - [number] ) [EOL] [EOL] try : [EOL] tenant = lease . tenants . get ( tenantcontact__contact = contact , tenantcontact__type = TenantContactType . TENANT , tenantcontact__start_date = start_date , tenantcontact__end_date = role_row [ [string] ] , ) [EOL] self . stdout . write ( [string] ) [EOL] except ObjectDoesNotExist : [EOL] self . stdout . write ( [string] ) [EOL] tenant = Tenant . objects . create ( lease = lease , share_numerator = role_row [ [string] ] , share_denominator = role_row [ [string] ] , ) [EOL] [EOL] ( tenantcontact , tenantcontact_created , ) = TenantContact . objects . get_or_create ( type = TenantContactType . TENANT , tenant = tenant , contact = contact , start_date = start_date , end_date = role_row [ [string] ] , ) [EOL] [EOL] asiakas_num_to_tenant [ role_row [ [string] ] ] = tenant [EOL] [EOL] for role_row in [ row for row in asrooli_rows if row [ [string] ] in ( [string] , [string] ) ] : [EOL] self . stdout . write ( [string] . format ( role_row [ [string] ] , role_row [ [string] ] ) ) [EOL] contact = get_or_create_contact ( role_row ) [EOL] self . stdout . write ( [string] . format ( contact ) ) [EOL] [EOL] start_date = role_row [ [string] ] [EOL] if [number] < start_date . year < [number] : [EOL] start_date = start_date . replace ( year = start_date . year - [number] ) [EOL] [EOL] if [number] < start_date . year < [number] : [EOL] start_date = start_date . replace ( year = start_date . year - [number] ) [EOL] [EOL] this_tenant = None [EOL] for lease_tenant in lease . tenants . all ( ) : [EOL] for ( [EOL] lease_tenantcontact [EOL] ) in lease_tenant . tenantcontact_set . filter ( type = TenantContactType . TENANT ) : [EOL] try : [EOL] if ( lease_tenantcontact . contact == asiakas_cache [ role_row [ [string] ] ] ) : [EOL] this_tenant = lease_tenant [EOL] break [EOL] except KeyError : [EOL] pass [EOL] [EOL] if this_tenant : [EOL] ( tenantcontact , tenantcontact_created , ) = TenantContact . objects . get_or_create ( type = TenantContactType . BILLING [EOL] if role_row [ [string] ] == [string] [EOL] else TenantContactType . CONTACT , tenant = this_tenant , contact = contact , start_date = start_date , end_date = role_row [ [string] ] , ) [EOL] [EOL] asiakas_num_to_tenant [ role_row [ [string] ] ] = this_tenant [EOL] else : [EOL] self . stdout . write ( [string] . format ( role_row [ [string] ] ) ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] rent_type = VUOKRALAJI_MAP [ lease_row [ [string] ] ] [EOL] rent_cycle = VUOKRAKAUSI_MAP [ lease_row [ [string] ] ] [EOL] try : [EOL] index_type = IndexType [ [string] . format ( lease_row [ [string] ] ) ] [EOL] except KeyError : [EOL] index_type = None [EOL] [EOL] ( rent , rent_created ) = Rent . objects . get_or_create ( lease = lease , type = rent_type , cycle = rent_cycle , index_type = index_type ) [EOL] [EOL] rent . x_value = lease_row [ [string] ] [EOL] rent . y_value = lease_row [ [string] ] [EOL] [EOL] if lease_row [ [string] ] and lease_row [ [string] ] : [EOL] try : [EOL] rent . y_value_start = datetime . date ( year = lease_row [ [string] ] , month = lease_row [ [string] ] , day = [number] ) [EOL] except ValueError as e : [EOL] self . stdout . write ( [string] + str ( e ) ) [EOL] [EOL] if index_type == IndexType . TYPE_1 : [EOL] rent . elementary_index = [number] [EOL] [EOL] if index_type == IndexType . TYPE_2 : [EOL] rent . elementary_index = [number] [EOL] [EOL] if index_type == IndexType . TYPE_3 : [EOL] rent . elementary_index = [number] [EOL] rent . index_rounding = [number] [EOL] [EOL] if index_type == IndexType . TYPE_4 : [EOL] rent . elementary_index = [number] [EOL] rent . index_rounding = [number] [EOL] [EOL] if index_type == IndexType . TYPE_5 : [EOL] rent . elementary_index = [number] [EOL] [EOL] if index_type == IndexType . TYPE_6 : [EOL] rent . elementary_index = [number] [EOL] rent . index_rounding = [number] [EOL] [EOL] rent . equalization_start_date = lease_row [ [string] ] [EOL] rent . equalization_end_date = lease_row [ [string] ] [EOL] [EOL] if lease_id in MANUAL_RATIOS : [EOL] try : [EOL] rent . manual_ratio = MANUAL_RATIOS [ lease_id ] [ [number] ] [EOL] rent . manual_ratio_previous = MANUAL_RATIOS [ lease_id ] [ [number] ] [EOL] except IndexError : [EOL] pass [EOL] [EOL] rent . save ( ) [EOL] [EOL] self . stdout . write ( [string] . format ( rent_type , index_type ) ) [EOL] [EOL] [comment] [EOL] self . stdout . write ( [string] ) [EOL] if lease_row [ [string] ] : [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = [number] [EOL] rent . save ( ) [EOL] self . stdout . write ( [string] . format ( rent . due_dates_per_year ) ) [EOL] else : [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] vuokrauksen_erapaiva_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] due_dates_match_found = False [EOL] due_dates = set ( ) [EOL] for due_date_row in vuokrauksen_erapaiva_rows : [EOL] due_dates . add ( DayMonth . from_datetime ( due_date_row [ [string] ] ) ) [EOL] [EOL] if due_dates : [EOL] for due_dates_per_year , due_dates_set in FIXED_DUE_DATES [ DueDatesPosition . START_OF_MONTH ] . items ( ) : [EOL] if due_dates == set ( due_dates_set ) : [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] due_dates_match_found = True [EOL] if ( lease . type . due_dates_position != DueDatesPosition . MIDDLE_OF_MONTH ) : [EOL] self . stdout . write ( [string] ) [EOL] break [EOL] [EOL] for due_dates_per_year , due_dates_set in FIXED_DUE_DATES [ DueDatesPosition . MIDDLE_OF_MONTH ] . items ( ) : [EOL] if due_dates == set ( due_dates_set ) : [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] due_dates_match_found = True [EOL] if ( lease . type . due_dates_position != DueDatesPosition . MIDDLE_OF_MONTH ) : [EOL] self . stdout . write ( [string] ) [EOL] break [EOL] [EOL] if not due_dates_match_found : [EOL] self . stdout . write ( [string] ) [EOL] self . stdout . write ( [string] . format ( due_dates ) ) [EOL] rent . due_dates_type = DueDatesType . CUSTOM [EOL] rent . due_dates . set ( [ ] ) [EOL] for due_date in due_dates : [EOL] RentDueDate . objects . create ( rent = rent , day = due_date . day , month = due_date . month ) [EOL] else : [EOL] self . stdout . write ( [string] . format ( rent . due_dates_per_year ) ) [EOL] [EOL] rent . save ( ) [EOL] else : [EOL] self . stdout . write ( [string] ) [EOL] [EOL] initial_rent = None [EOL] if ( lease_row [ [string] ] [EOL] and lease_row [ [string] ] ) : [EOL] self . stdout . write ( [string] . format ( lease_row [ [string] ] ) ) [EOL] [EOL] ( initial_rent , initial_rent_created , ) = FixedInitialYearRent . objects . get_or_create ( rent = rent , amount = lease_row [ [string] ] , start_date = lease_row [ [string] ] [EOL] if lease_row [ [string] ] [EOL] else None , end_date = lease_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] rent_intended_uses = set ( ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] sopimusvuokra_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( sopimusvuokra_rows ) ) ) [EOL] [EOL] for rent_row in sopimusvuokra_rows : [EOL] contract_rent_amount = None [EOL] contract_rent_period = None [EOL] if rent_row [ [string] ] is not None : [EOL] contract_rent_amount = rent_row [ [string] ] [EOL] contract_rent_period = PeriodType . PER_YEAR [EOL] [EOL] if rent_row [ [string] ] is not None : [EOL] contract_rent_amount = rent_row [ [string] ] [EOL] contract_rent_period = PeriodType . PER_MONTH [EOL] [EOL] if contract_rent_amount is None : [EOL] continue [EOL] [EOL] try : [EOL] contract_rent_intended_use = RentIntendedUse . objects . get ( pk = rent_row [ [string] ] ) [EOL] except RentIntendedUse . DoesNotExist : [EOL] ( contract_rent_intended_use , _ , ) = RentIntendedUse . objects . get_or_create ( id = rent_row [ [string] ] , name = rent_row [ [string] ] ) [EOL] [EOL] rent_intended_uses . add ( contract_rent_intended_use ) [EOL] [EOL] ( contract_rent , contract_rent_created , ) = ContractRent . objects . get_or_create ( rent = rent , period = contract_rent_period , intended_use = contract_rent_intended_use , start_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , end_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , base_year_rent = rent_row [ [string] ] , defaults = { [string] : contract_rent_amount , [string] : rent_row [ [string] ] [EOL] if rent_row [ [string] ] [EOL] else contract_rent_amount , [string] : contract_rent_period , } , ) [EOL] [EOL] [comment] [EOL] if initial_rent and not initial_rent . intended_use_id : [EOL] initial_rent . intended_use = contract_rent_intended_use [EOL] initial_rent . save ( ) [EOL] [EOL] if rent . type == RentType . ONE_TIME : [EOL] [comment] [EOL] self . stdout . write ( [string] ) [EOL] query = [string] + expanded_id_to_query ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] lasku_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] one_time_amount = Decimal ( [number] ) [EOL] for lasku_row in lasku_rows : [EOL] one_time_amount += Decimal ( lasku_row [ [string] ] ) [EOL] [EOL] if one_time_amount : [EOL] one_time_amount = one_time_amount . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] self . stdout . write ( [string] . format ( one_time_amount ) ) [EOL] [EOL] rent . amount = one_time_amount [EOL] rent . save ( ) [EOL] [EOL] if rent_intended_uses : [EOL] self . stdout . write ( [string] ) [EOL] [EOL] for tenant in lease . tenants . all ( ) : [EOL] for rent_intended_use in rent_intended_uses : [EOL] TenantRentShare . objects . update_or_create ( tenant = tenant , intended_use = rent_intended_use , defaults = { [string] : tenant . share_denominator , [string] : tenant . share_numerator , } , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] tarkistettu_vuokra_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tarkistettu_vuokra_rows ) ) ) [EOL] [EOL] for rent_row in tarkistettu_vuokra_rows : [EOL] ( ia_rent , ia_rent_created , ) = IndexAdjustedRent . objects . get_or_create ( rent = rent , amount = rent_row [ [string] ] , intended_use_id = int ( rent_row [ [string] ] ) , start_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , end_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , factor = rent_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] vuosivuokra_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( vuosivuokra_rows ) ) ) [EOL] [EOL] for rent_row in vuosivuokra_rows : [EOL] ( payable_rent , payable_rent_created , ) = PayableRent . objects . get_or_create ( rent = rent , amount = rent_row [ [string] ] , calendar_year_rent = rent_row [ [string] ] [EOL] if rent_row [ [string] ] [EOL] else [number] , start_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , end_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , difference_percent = rent_row [ [string] ] [EOL] if rent_row [ [string] ] [EOL] else [number] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] alennus_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( alennus_rows ) ) ) [EOL] [EOL] for adjustment_row in alennus_rows : [EOL] adjustment_type = ALENNUS_KOROTUS_MAP [ adjustment_row [ [string] ] ] [EOL] [EOL] if adjustment_row [ [string] ] : [EOL] amount_type = RentAdjustmentAmountType . AMOUNT_PER_YEAR [EOL] full_amount = adjustment_row [ [string] ] [EOL] [EOL] if adjustment_row [ [string] ] : [EOL] amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR [EOL] full_amount = adjustment_row [ [string] ] [EOL] [EOL] ( adjustment , adjustment_created , ) = RentAdjustment . objects . get_or_create ( rent = rent , type = adjustment_type , intended_use_id = int ( adjustment_row [ [string] ] ) , start_date = adjustment_row [ [string] ] . date ( ) [EOL] if adjustment_row [ [string] ] [EOL] else None , end_date = adjustment_row [ [string] ] . date ( ) [EOL] if adjustment_row [ [string] ] [EOL] else None , full_amount = full_amount , amount_type = amount_type , amount_left = None , decision = None , note = adjustment_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] tasattuvuokra_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tasattuvuokra_rows ) ) ) [EOL] [EOL] for rent_row in tasattuvuokra_rows : [EOL] ( equalized_rent , equalized_rent_created , ) = EqualizedRent . objects . get_or_create ( rent = rent , start_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , end_date = rent_row [ [string] ] . date ( ) [EOL] if rent_row [ [string] ] [EOL] else None , payable_amount = rent_row [ [string] ] , equalized_payable_amount = rent_row [ [string] ] , equalization_factor = rent_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] lasku_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( lasku_rows ) ) ) [EOL] [EOL] for invoice_row in lasku_rows : [EOL] if invoice_row [ [string] ] : [EOL] contact = get_or_create_contact ( invoice_row ) [EOL] else : [EOL] self . stdout . write ( [string] . format ( invoice_row [ [string] ] , invoice_row [ [string] ] ) ) [EOL] contact = get_unknown_contact ( ) [EOL] [EOL] receivable_type_id = SAAMISLAJI_MAP [ invoice_row [ [string] ] ] [EOL] invoice_state = LASKUN_TILA_MAP [ invoice_row [ [string] ] ] [EOL] invoice_type = LASKUTYYPPI_MAP [ invoice_row [ [string] ] ] [EOL] [EOL] period_start_date = ( invoice_row [ [string] ] . date ( ) [EOL] if invoice_row [ [string] ] [EOL] else None ) [EOL] period_end_date = ( invoice_row [ [string] ] . date ( ) [EOL] if invoice_row [ [string] ] [EOL] else None ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] sent_to_sap_at = ( make_aware ( invoice_row [ [string] ] ) [EOL] if invoice_row [ [string] ] [EOL] else None ) [EOL] [EOL] due_date = invoice_row [ [string] ] [EOL] if due_date . year == [number] : [EOL] due_date = due_date . replace ( year = [number] ) [EOL] [EOL] ( invoice , invoice_created ) = Invoice . objects . get_or_create ( lease = lease , number = invoice_row [ [string] ] , recipient = contact , due_date = due_date , state = invoice_state , billing_period_start_date = period_start_date , billing_period_end_date = period_end_date , invoicing_date = invoice_row [ [string] ] , postpone_date = invoice_row [ [string] ] , total_amount = invoice_row [ [string] ] , billed_amount = invoice_row [ [string] ] , outstanding_amount = invoice_row [ [string] ] , payment_notification_date = invoice_row [ [string] ] , collection_charge = invoice_row [ [string] ] , payment_notification_catalog_date = invoice_row [ [string] ] , delivery_method = InvoiceDeliveryMethod . MAIL , type = invoice_type , notes = [string] , generated = True , sent_to_sap_at = sent_to_sap_at , ) [EOL] [EOL] ( invoice_row_instance , invoice_row_created , ) = InvoiceRow . objects . get_or_create ( invoice = invoice , tenant = asiakas_num_to_tenant [ invoice_row [ [string] ] ] [EOL] if invoice_row [ [string] ] in asiakas_num_to_tenant [EOL] else None , receivable_type_id = receivable_type_id , billing_period_start_date = period_start_date , billing_period_end_date = period_end_date , amount = invoice_row [ [string] ] , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] query = [string] . format ( invoice_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] maksu_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for payment_row in maksu_rows : [EOL] ( invoice_payment , invoice_payment_created , ) = InvoicePayment . objects . get_or_create ( invoice = invoice , paid_amount = payment_row [ [string] ] , paid_date = payment_row [ [string] ] . date ( ) [EOL] if payment_row [ [string] ] [EOL] else None , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] kohde_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( kohde_rows ) ) ) [EOL] [EOL] for lease_area_row in kohde_rows : [EOL] identifier = get_real_property_identifier ( lease_area_row ) [EOL] [EOL] ( lease_area , lease_area_created ) = LeaseArea . objects . get_or_create ( lease = lease , type = LEASE_AREA_TYPE_MAP [ lease_area_row [ [string] ] ] , identifier = identifier , area = lease_area_row [ [string] ] [EOL] if lease_area_row [ [string] ] [EOL] else [number] , section_area = lease_area_row [ [string] ] [EOL] if lease_area_row [ [string] ] [EOL] else [number] , location = LocationType . SURFACE , ) [EOL] [EOL] if lease_area_row [ [string] ] : [EOL] ( lease_area_address , lease_area_address_created , ) = LeaseAreaAddress . objects . get_or_create ( lease_area = lease_area , address = lease_area_row [ [string] ] , is_primary = True , ) [EOL] [EOL] query = [string] . format ( lease_area_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] address_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for address_row in address_rows : [EOL] if address_row [ [string] ] == lease_area_row [ [string] ] : [EOL] continue [EOL] [EOL] ( lease_area_address , lease_area_address_created , ) = LeaseAreaAddress . objects . get_or_create ( lease_area = lease_area , address = address_row [ [string] ] , is_primary = False , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] paatos_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( paatos_rows ) ) ) [EOL] [EOL] lease_decisions = { } [EOL] [EOL] for decision_row in paatos_rows : [EOL] decision_maker_id = None [EOL] try : [EOL] decision_maker_id = DECISION_MAKER_MAP [ decision_row [ [string] ] ] [EOL] except KeyError : [EOL] self . stdout . write ( [string] . format ( decision_row [ [string] ] ) ) [EOL] [EOL] ( decision , decision_created ) = Decision . objects . get_or_create ( lease = lease , reference_number = None , decision_maker_id = decision_maker_id , decision_date = decision_row [ [string] ] . date ( ) [EOL] if decision_row [ [string] ] [EOL] else None , section = decision_row [ [string] ] , type_id = decision_row [ [string] ] , description = decision_row [ [string] ] , ) [EOL] [EOL] lease_decisions [ decision_row [ [string] ] ] = decision [EOL] [EOL] query = [string] . format ( decision_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] ehto_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for condition_row in ehto_rows : [EOL] ( condition , condition_created , ) = Condition . objects . get_or_create ( decision = decision , type_id = int ( condition_row [ [string] ] ) , supervision_date = condition_row [ [string] ] , supervised_date = condition_row [ [string] ] , description = condition_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts , where = False ) [EOL] [EOL] cursor . execute ( query ) [EOL] ehto_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( ehto_rows ) ) ) [EOL] [EOL] if len ( ehto_rows ) : [EOL] ( bogus_decision , decision_created ) = Decision . objects . get_or_create ( lease = lease , reference_number = None , decision_maker_id = None , decision_date = None , section = None , type_id = None , description = [string] , ) [EOL] [EOL] for condition_row in ehto_rows : [EOL] ( condition , condition_created , ) = Condition . objects . get_or_create ( decision = bogus_decision , type_id = int ( condition_row [ [string] ] ) , supervision_date = condition_row [ [string] ] , supervised_date = condition_row [ [string] ] , description = condition_row [ [string] ] , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] sopimus_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( sopimus_rows ) ) ) [EOL] [EOL] for contract_row in sopimus_rows : [EOL] [comment] [EOL] if not re . fullmatch ( [string] , contract_row [ [string] ] ) : [EOL] continue [EOL] [EOL] ( contract , contract_created ) = Contract . objects . get_or_create ( lease = lease , type_id = [number] , contract_number = contract_row [ [string] ] , signing_date = contract_row [ [string] ] . date ( ) [EOL] if contract_row [ [string] ] [EOL] else None , signing_note = None , is_readjustment_decision = bool ( contract_row [ [string] ] ) , institution_identifier = contract_row [ [string] ] , ) [EOL] [EOL] note = contract_row [ [string] ] [EOL] if ( contract_row [ [string] ] [EOL] and contract_row [ [string] ] != contract_row [ [string] ] ) : [EOL] if note : [EOL] note += [string] + contract_row [ [string] ] [EOL] else : [EOL] note = contract_row [ [string] ] [EOL] [EOL] if ( contract_row [ [string] ] or contract_row [ [string] ] or contract_row [ [string] ] ) : [EOL] Collateral . objects . get_or_create ( contract = contract , type_id = [number] , number = contract_row [ [string] ] , start_date = contract_row [ [string] ] . date ( ) [EOL] if contract_row [ [string] ] [EOL] else None , end_date = contract_row [ [string] ] . date ( ) [EOL] if contract_row [ [string] ] [EOL] else None , note = note , ) [EOL] [EOL] if ( contract_row [ [string] ] or contract_row [ [string] ] ) : [EOL] Collateral . objects . get_or_create ( contract = contract , type_id = [number] , number = contract_row [ [string] ] , start_date = contract_row [ [string] ] . date ( ) [EOL] if contract_row [ [string] ] [EOL] else None , note = note , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] . format ( contract_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] sopimus_muutos_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( sopimus_muutos_rows ) ) ) [EOL] [EOL] for contract_change_row in sopimus_muutos_rows : [EOL] decision = None [EOL] try : [EOL] decision = lease_decisions [ contract_change_row [ [string] ] ] [EOL] except KeyError : [EOL] self . stdout . write ( [string] . format ( contract_change_row [ [string] ] ) ) [EOL] [EOL] ( contract_change , contract_change_created , ) = ContractChange . objects . get_or_create ( contract = contract , signing_date = contract_change_row [ [string] ] . date ( ) [EOL] if contract_change_row [ [string] ] [EOL] else None , sign_by_date = contract_change_row [ [string] ] . date ( ) [EOL] if contract_change_row [ [string] ] [EOL] else None , first_call_sent = contract_change_row [ [string] ] . date ( ) [EOL] if contract_change_row [ [string] ] [EOL] else None , second_call_sent = contract_change_row [ [string] ] . date ( ) [EOL] if contract_change_row [ [string] ] [EOL] else None , third_call_sent = contract_change_row [ [string] ] . date ( ) [EOL] if contract_change_row [ [string] ] [EOL] else None , description = contract_change_row [ [string] ] , decision = decision , ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] + expanded_id_to_query_alku ( id_parts ) [EOL] [EOL] cursor . execute ( query ) [EOL] tarkastus_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tarkastus_rows ) ) ) [EOL] [EOL] for inspection_row in tarkastus_rows : [EOL] self . stdout . write ( [string] . format ( inspection_row [ [string] ] ) ) [EOL] [EOL] descriptions = [ ] [EOL] [EOL] if inspection_row [ [string] ] : [EOL] descriptions . append ( inspection_row [ [string] ] ) [EOL] [EOL] if inspection_row [ [string] ] : [EOL] descriptions . append ( [string] ) [EOL] descriptions . append ( [string] + inspection_row [ [string] ] ) [EOL] descriptions . append ( [string] ) [EOL] [EOL] query = [string] . format ( inspection_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] tarkastus_kehotus_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tarkastus_kehotus_rows ) ) ) [EOL] [EOL] if tarkastus_kehotus_rows : [EOL] descriptions . append ( [string] ) [EOL] [EOL] for inspection_request_row in tarkastus_kehotus_rows : [EOL] if not inspection_request_row [ [string] ] : [EOL] continue [EOL] [EOL] descriptions . append ( [string] . format ( inspection_request_row [ [string] ] . date ( ) [EOL] if inspection_request_row [ [string] ] [EOL] else [string] , inspection_request_row [ [string] ] . date ( ) [EOL] if inspection_request_row [ [string] ] [EOL] else [string] , inspection_request_row [ [string] ] , ) ) [EOL] [EOL] query = [string] . format ( inspection_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] tarkastus_kaynti_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tarkastus_kaynti_rows ) ) ) [EOL] [EOL] if tarkastus_kaynti_rows : [EOL] descriptions . append ( [string] ) [EOL] [EOL] for inspection_visit_row in tarkastus_kaynti_rows : [EOL] if not inspection_visit_row [ [string] ] : [EOL] continue [EOL] [EOL] descriptions . append ( [string] . format ( inspection_visit_row [ [string] ] . date ( ) [EOL] if inspection_visit_row [ [string] ] [EOL] else [string] , inspection_visit_row [ [string] ] , inspection_visit_row [ [string] ] , ) ) [EOL] [EOL] query = [string] . format ( inspection_row [ [string] ] ) [EOL] [EOL] cursor . execute ( query ) [EOL] tarkastus_vastine_rows = rows_to_dict_list ( cursor ) [EOL] [EOL] self . stdout . write ( [string] . format ( len ( tarkastus_vastine_rows ) ) ) [EOL] [EOL] if tarkastus_vastine_rows : [EOL] descriptions . append ( [string] ) [EOL] [EOL] for inspection_reply_row in tarkastus_vastine_rows : [EOL] if not inspection_reply_row [ [string] ] : [EOL] continue [EOL] [EOL] descriptions . append ( [string] . format ( inspection_reply_row [ [string] ] . date ( ) [EOL] if inspection_reply_row [ [string] ] [EOL] else [string] , inspection_reply_row [ [string] ] , ) ) [EOL] [EOL] ( inspection , inspection_created ) = Inspection . objects . get_or_create ( lease = lease , inspector = inspection_row [ [string] ] , supervision_date = None , supervised_date = None , description = [string] . join ( descriptions ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . db import connection [EOL] [EOL] from leasing . enums import LeaseRelationType [EOL] from leasing . models import RelatedLease [EOL] [EOL] from . base import BaseImporter [EOL] from . utils import rows_to_dict_list [EOL] [EOL] [EOL] class LeaseRelationsImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] import cx_Oracle [EOL] [EOL] connection = cx_Oracle . connect ( user = [string] , password = [string] , dsn = [string] , encoding = [string] , nencoding = [string] , ) [EOL] [EOL] self . cursor = connection . cursor ( ) [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] self . offset = [number] [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] pass [EOL] [EOL] def read_options ( self , options ) : [EOL] pass [EOL] [EOL] def execute ( self ) : [comment] [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] auditlog . unregister ( RelatedLease ) [EOL] [EOL] lease_identifier_to_id = { } [EOL] with connection . cursor ( ) as django_cursor : [EOL] django_cursor . execute ( [string] ) [EOL] [EOL] for row in django_cursor . fetchall ( ) : [EOL] identifier = [string] . format ( row [ [number] ] , row [ [number] ] , int ( row [ [number] ] ) , row [ [number] ] ) [EOL] lease_identifier_to_id [ identifier ] = row [ [number] ] [EOL] [EOL] cursor = self . cursor [EOL] [EOL] query = [string] . format ( self . offset ) [EOL] [EOL] cursor . execute ( query ) [EOL] [EOL] vuokraus_rows = rows_to_dict_list ( cursor ) [EOL] vuokraus_count = len ( vuokraus_rows ) [EOL] [EOL] self . stdout . write ( [string] . format ( vuokraus_count ) ) [EOL] [EOL] count = [number] [EOL] found = [number] [EOL] for lease_row in vuokraus_rows : [EOL] count += [number] [EOL] [EOL] from_lease = [string] . format ( lease_row [ [string] ] , lease_row [ [string] ] ) [EOL] to_lease = [string] . format ( lease_row [ [string] ] , lease_row [ [string] ] ) [EOL] [EOL] try : [EOL] from_lease_id = lease_identifier_to_id [ from_lease ] [EOL] except KeyError : [EOL] self . stderr . write ( [string] . format ( from_lease ) ) [EOL] continue [EOL] [EOL] try : [EOL] to_lease_id = lease_identifier_to_id [ to_lease ] [EOL] except KeyError : [EOL] self . stderr . write ( [string] . format ( to_lease ) ) [EOL] continue [EOL] [EOL] self . stdout . write ( [string] . format ( from_lease , from_lease_id , to_lease , to_lease_id ) ) [EOL] [EOL] found += [number] [EOL] ( related_lease , related_lease_created ) = RelatedLease . objects . get_or_create ( from_lease_id = from_lease_id , to_lease_id = to_lease_id , type = LeaseRelationType . OTHER , ) [EOL] [EOL] self . stdout . write ( [string] . format ( found , count ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0
from typing import Union , List , Dict , Any [EOL] import typing [EOL] import psycopg2 [EOL] from django . conf import settings [EOL] from django . contrib . gis import geos [EOL] from django . core . exceptions import MultipleObjectsReturned [EOL] [EOL] from leasing . enums import AreaType [EOL] from leasing . models . area import Area , AreaSource [EOL] [EOL] from . base import BaseImporter [EOL] [EOL] METADATA_COLUMN_NAME_MAP = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] AREA_IMPORT_TYPES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . DETAILED_PLAN , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . LEASE_AREA , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . REAL_PROPERTY , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . UNSEPARATED_PARCEL , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . PLAN_UNIT , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : AreaType . PLOT_DIVISION , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [string] , } , } [EOL] [EOL] [EOL] class AreaImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] self . area_types = None [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] parser . add_argument ( [string] , dest = [string] , type = str , required = False , help = [string] , ) [EOL] [EOL] def read_options ( self , options ) : [EOL] if options [ [string] ] : [EOL] self . area_types = [ ] [EOL] for area_type in options [ [string] ] . split ( [string] ) : [EOL] if area_type not in AREA_IMPORT_TYPES . keys ( ) : [EOL] raise RuntimeError ( [string] . format ( area_type ) ) [EOL] [EOL] self . area_types . append ( area_type ) [EOL] [EOL] def execute ( self ) : [comment] [EOL] if not self . area_types : [EOL] self . area_types = AREA_IMPORT_TYPES . keys ( ) [EOL] [EOL] errors = [ ] [EOL] [EOL] for area_import_type in self . area_types : [EOL] area_import = AREA_IMPORT_TYPES [ area_import_type ] [EOL] [EOL] try : [EOL] conn = psycopg2 . connect ( getattr ( settings , area_import [ [string] ] ) , cursor_factory = psycopg2 . extras . NamedTupleCursor , ) [EOL] except ( psycopg2 . ProgrammingError , psycopg2 . OperationalError ) as e : [EOL] self . stderr . write ( str ( e ) ) [EOL] self . stderr . write ( [string] . format ( area_import_type , area_import [ [string] ] ) ) [EOL] continue [EOL] [EOL] cursor = conn . cursor ( ) [EOL] [EOL] self . stdout . write ( area_import [ [string] ] ) [EOL] ( source , source_created ) = AreaSource . objects . get_or_create ( identifier = area_import [ [string] ] , defaults = { [string] : area_import [ [string] ] } , ) [EOL] [EOL] cursor . execute ( area_import [ [string] ] ) [EOL] [EOL] imported_identifiers = [ ] [EOL] count = [number] [EOL] for row in cursor : [EOL] try : [EOL] metadata = { METADATA_COLUMN_NAME_MAP [ column_name ] : getattr ( row , column_name ) for column_name in area_import [ [string] ] } [EOL] except AttributeError as e : [EOL] errors . append ( [string] . format ( row . id , str ( e ) ) ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] continue [EOL] [EOL] match_data = { [string] : area_import [ [string] ] , [string] : getattr ( row , area_import [ [string] ] ) , [string] : source , } [EOL] [EOL] try : [EOL] geom = geos . GEOSGeometry ( row . geom_text ) [EOL] except geos . error . GEOSException as e : [EOL] errors . append ( [string] . format ( row . id , str ( e ) ) ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] continue [EOL] [EOL] if geom and isinstance ( geom , geos . Polygon ) : [EOL] geom = geos . MultiPolygon ( geom ) [EOL] [EOL] if geom and not isinstance ( geom , geos . MultiPolygon ) : [EOL] errors . append ( [string] . format ( row . id , geom ) ) [EOL] [EOL] count += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] continue [EOL] [EOL] other_data = { [string] : geom , [string] : metadata , [string] : row . id , } [EOL] [EOL] try : [EOL] Area . objects . update_or_create ( defaults = other_data , ** match_data ) [EOL] except MultipleObjectsReturned : [comment] [EOL] ext_id = other_data . pop ( [string] ) [EOL] [comment] [EOL] Area . objects . filter ( ** match_data ) . exclude ( external_id = ext_id ) . delete ( ) [EOL] match_data [ [string] ] = ext_id [EOL] Area . objects . update_or_create ( defaults = other_data , ** match_data ) [EOL] [EOL] imported_identifiers . append ( match_data [ [string] ] ) [EOL] [EOL] count += [number] [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] if count % [number] == [number] : [EOL] self . stdout . write ( [string] . format ( count ) ) [EOL] self . stdout . flush ( ) [EOL] [EOL] stale = Area . objects . filter ( type = area_import [ [string] ] , source = source ) . exclude ( identifier__in = imported_identifiers ) [EOL] self . stdout . write ( [string] . format ( count , stale . count ( ) ) ) [EOL] stale . delete ( ) [EOL] if errors : [EOL] self . stdout . write ( [string] . format ( len ( errors ) ) ) [EOL] for error in errors : [EOL] self . stdout . write ( error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from leasing . models import Invoice [EOL] [EOL] from . base import BaseImporter [EOL] from . utils import rows_to_dict_list [EOL] [EOL] [EOL] class InvoiceRelationsImporter ( BaseImporter ) : [EOL] type_name = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None ) : [EOL] import cx_Oracle [EOL] [EOL] connection = cx_Oracle . connect ( user = [string] , password = [string] , dsn = [string] , encoding = [string] , nencoding = [string] , ) [EOL] [EOL] self . cursor = connection . cursor ( ) [EOL] self . stdout = stdout [EOL] self . stderr = stderr [EOL] [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] pass [EOL] [EOL] def read_options ( self , options ) : [EOL] pass [EOL] [EOL] def execute ( self ) : [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] for model in list ( auditlog . _registry . keys ( ) ) : [EOL] auditlog . unregister ( model ) [EOL] [EOL] self . update_credit_notes ( ) [EOL] self . update_interest_invoices ( ) [EOL] [EOL] def update_credit_notes ( self ) : [EOL] cursor = self . cursor [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] [EOL] [EOL] cursor . execute ( query ) [EOL] rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for row in rows : [EOL] try : [EOL] credited_invoice = Invoice . objects . get ( number = row [ [string] ] ) [EOL] except Invoice . DoesNotExist : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] [EOL] try : [EOL] credit_note = Invoice . objects . get ( number = row [ [string] ] ) [EOL] except Invoice . DoesNotExist : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] [EOL] self . stdout . write ( [string] . format ( credit_note . id , credited_invoice . id ) ) [EOL] [EOL] credit_note . credited_invoice = credited_invoice [EOL] credit_note . save ( ) [EOL] [EOL] def update_interest_invoices ( self ) : [EOL] cursor = self . cursor [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] query = [string] [EOL] [EOL] cursor . execute ( query ) [EOL] rows = rows_to_dict_list ( cursor ) [EOL] [EOL] for row in rows : [EOL] try : [EOL] invoice = Invoice . objects . get ( number = row [ [string] ] ) [EOL] except Invoice . DoesNotExist : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] [EOL] try : [EOL] interest_invoice = Invoice . objects . get ( number = row [ [string] ] ) [EOL] except Invoice . DoesNotExist : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] . format ( row [ [string] ] ) ) [EOL] continue [EOL] [EOL] interest_invoice . interest_invoice_for = invoice [EOL] interest_invoice . save ( ) [EOL] [EOL] self . stdout . write ( [string] . format ( interest_invoice . id , invoice . id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0
class BaseImporter : [EOL] @ classmethod def add_arguments ( cls , parser ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def read_options ( self , options ) : [EOL] raise NotImplementedError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , Any , Union , Type , List [EOL] import typing [EOL] import leasing [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework import status [EOL] from rest_framework . exceptions import NotFound [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . renderers import JSONRenderer [EOL] from rest_framework . response import Response [EOL] from rest_framework . reverse import reverse [EOL] from rest_framework . viewsets import ViewSet [EOL] [EOL] from leasing . renderers import BrowsableAPIRendererWithoutForms [EOL] from leasing . report . invoice . collaterals_report import CollateralsReport [EOL] from leasing . report . invoice . invoice_payments import InvoicePaymentsReport [EOL] from leasing . report . invoice . invoices_in_period import InvoicesInPeriodReport [EOL] from leasing . report . invoice . laske_invoice_count_report import LaskeInvoiceCountReport [EOL] from leasing . report . invoice . open_invoices_report import OpenInvoicesReport [EOL] from leasing . report . lease . decision_conditions_report import DecisionConditionsReport [EOL] from leasing . report . lease . extra_city_rent import ExtraCityRentReport [EOL] from leasing . report . lease . invoicing_disabled_report import LeaseInvoicingDisabledReport [EOL] from leasing . report . lease . lease_count_report import LeaseCountReport [EOL] from leasing . report . lease . lease_statistic_report import LeaseStatisticReport [EOL] from leasing . report . lease . rent_forecast import RentForecastReport [EOL] from leasing . report . lease . reservations import ReservationsReport [EOL] from leasing . report . renderers import XLSXRenderer [EOL] [EOL] ENABLED_REPORTS = [ DecisionConditionsReport , ExtraCityRentReport , CollateralsReport , OpenInvoicesReport , InvoicePaymentsReport , InvoicesInPeriodReport , LaskeInvoiceCountReport , LeaseCountReport , LeaseInvoicingDisabledReport , RentForecastReport , ReservationsReport , LeaseStatisticReport , ] [EOL] [EOL] [EOL] class ReportViewSet ( ViewSet ) : [EOL] permission_classes = ( IsAuthenticated , ) [EOL] renderer_classes = [ JSONRenderer , BrowsableAPIRendererWithoutForms , XLSXRenderer ] [EOL] lookup_field = [string] [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] self . report_classes_by_slug = { } [EOL] for report_class in ENABLED_REPORTS : [EOL] self . report_classes_by_slug [ report_class . slug ] = report_class [EOL] [EOL] self . report = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] def list ( self , request , format = None ) : [EOL] reports = { } [EOL] [EOL] for report_class in ENABLED_REPORTS : [EOL] codename = [string] . format ( report_class . slug ) [EOL] if not request . user . has_perm ( codename ) : [EOL] continue [EOL] [EOL] reports [ report_class . slug ] = { [string] : report_class . name , [string] : report_class . description , [string] : reverse ( [string] , request = request , kwargs = { [string] : report_class . slug } , ) , } [EOL] [EOL] return Response ( reports ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def retrieve ( self , request , report_type = None , format = None ) : [EOL] if report_type not in self . report_classes_by_slug . keys ( ) : [EOL] raise NotFound ( _ ( [string] ) ) [EOL] [EOL] self . report = self . report_classes_by_slug [ report_type ] ( ) [EOL] [EOL] return self . report . get_response ( request ) [EOL] [EOL] def finalize_response ( self , request , response , * args , ** kwargs ) : [EOL] response = super ( ) . finalize_response ( request , response , * args , ** kwargs ) [EOL] [EOL] if ( isinstance ( response , Response ) [EOL] and response . accepted_renderer . format == [string] [EOL] and self . report ) : [EOL] response [ [string] ] = [string] . format ( self . report . get_filename ( response . accepted_renderer . format ) ) [EOL] [EOL] return response [EOL] [EOL] def options ( self , request , * args , ** kwargs ) : [EOL] metadata_class = self . metadata_class ( ) [EOL] metadata = metadata_class . determine_metadata ( request , self ) [EOL] metadata [ [string] ] = { [string] : { } } [EOL] [EOL] if ( [string] in kwargs [EOL] and kwargs [ [string] ] in self . report_classes_by_slug ) : [EOL] report_class = self . report_classes_by_slug [ kwargs [ [string] ] ] [EOL] metadata [ [string] ] = report_class . name [EOL] metadata [ [string] ] = report_class . description [EOL] [EOL] for field_name , field in report_class . input_fields . items ( ) : [EOL] metadata [ [string] ] [ [string] ] [ field_name ] = { [string] : field . __class__ . __name__ , [string] : field . required , [string] : False , [string] : field . label , } [EOL] [EOL] if hasattr ( field , [string] ) : [EOL] metadata [ [string] ] [ [string] ] [ field_name ] [ [string] ] = [ { [string] : c [ [number] ] , [string] : c [ [number] ] } for c in field . choices ] [EOL] [EOL] metadata [ [string] ] = report_class . get_output_fields_metadata ( ) [EOL] [EOL] return Response ( metadata , status = status . HTTP_200_OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Dict , Any [EOL] import typing [EOL] import io [EOL] import leasing [EOL] from io import BytesIO [EOL] [EOL] import xlsxwriter [EOL] from django . conf import settings [EOL] from django . core . mail import EmailMessage [EOL] from django . db . models import Model [EOL] from django . utils import timezone [EOL] from django . utils . translation import ugettext [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django_q . tasks import async_task [EOL] from rest_framework . exceptions import PermissionDenied , ValidationError [EOL] from rest_framework . fields import ChoiceField [EOL] from rest_framework . response import Response [EOL] [EOL] from leasing . report . excel import ExcelRow , FormatType [EOL] from leasing . report . forms import ReportFormBase [EOL] from leasing . report . serializers import ReportOutputSerializer [EOL] [EOL] [EOL] class ReportBase : [EOL] [comment] [EOL] name = None [EOL] [EOL] [comment] [EOL] description = None [EOL] [EOL] [comment] [EOL] slug = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] input_fields = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] output_fields = { } [EOL] [EOL] [comment] [EOL] automatic_excel_column_labels = True [EOL] [EOL] def __init__ ( self ) : [EOL] self . form = None [EOL] [EOL] @ classmethod def get_output_fields_metadata ( cls ) : [EOL] metadata = { } [EOL] for field_name , output_field in cls . output_fields . items ( ) : [EOL] metadata [ field_name ] = { k : v for k , v in output_field . items ( ) if k not in [ [string] , [string] , [string] ] } [EOL] [EOL] return metadata [EOL] [EOL] def get_form ( self , data = None ) : [EOL] [docstring] [EOL] self . form = ReportFormBase ( data , input_fields = self . input_fields ) [EOL] [EOL] return self . form [EOL] [EOL] def get_input_data ( self , request ) : [EOL] [docstring] [EOL] input_form = self . get_form ( request . query_params ) [EOL] [EOL] if not input_form . is_valid ( ) : [EOL] raise ValidationError ( { [string] : input_form . errors } ) [EOL] [EOL] return input_form . cleaned_data [EOL] [EOL] def serialize_data ( self , report_data ) : [EOL] serializer_class = self . get_serializer_class ( ) [EOL] serializer = serializer_class ( report_data , output_fields = self . output_fields , many = True ) [EOL] [EOL] return serializer . data [EOL] [EOL] def get_response ( self , request ) : [EOL] codename = [string] . format ( self . slug ) [EOL] if not request . user . has_perm ( codename ) : [EOL] raise PermissionDenied ( ) [EOL] [EOL] report_data = self . get_data ( self . get_input_data ( request ) ) [EOL] serialized_report_data = self . serialize_data ( report_data ) [EOL] [EOL] return Response ( serialized_report_data ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] return ReportOutputSerializer [EOL] [EOL] def get_filename ( self , format ) : [EOL] return [string] . format ( timezone . localtime ( timezone . now ( ) ) . strftime ( [string] ) , self . slug , format , ) [EOL] [EOL] def get_output_field_attr ( self , field_name , attr_name , default = None ) : [EOL] [docstring] [EOL] value = default [EOL] if ( field_name in self . output_fields [EOL] and attr_name in self . output_fields [ field_name ] ) : [EOL] value = self . output_fields [ field_name ] [ attr_name ] [EOL] [EOL] return value [EOL] [EOL] def data_as_excel ( self , data ) : [EOL] report = self [EOL] [EOL] output = BytesIO ( ) [EOL] workbook = xlsxwriter . Workbook ( output ) [EOL] worksheet = workbook . add_worksheet ( ) [EOL] [EOL] formats = { FormatType . BOLD : workbook . add_format ( { [string] : True } ) , FormatType . DATE : workbook . add_format ( { [string] : [string] } ) , FormatType . MONEY : workbook . add_format ( { [string] : [string] } ) , FormatType . BOLD_MONEY : workbook . add_format ( { [string] : True , [string] : [string] } ) , } [EOL] [EOL] row_num = [number] [EOL] [EOL] [comment] [EOL] worksheet . write ( row_num , [number] , str ( report . name ) , formats [ FormatType . BOLD ] ) [EOL] [EOL] [comment] [EOL] row_num += [number] [EOL] worksheet . write ( row_num , [number] , str ( report . description ) ) [EOL] [EOL] [comment] [EOL] row_num += [number] [EOL] for input_field_name , input_field in report . form . fields . items ( ) : [EOL] worksheet . write ( row_num , [number] , [string] . format ( input_field . label ) , formats [ FormatType . BOLD ] ) [EOL] field_format = None [EOL] if input_field . __class__ . __name__ == [string] : [EOL] field_format = formats [ FormatType . DATE ] [EOL] [EOL] input_value = report . form . cleaned_data [ input_field_name ] [EOL] if hasattr ( input_field , [string] ) : [EOL] for choice_value , choice_label in input_field . choices : [EOL] if choice_value == input_value : [EOL] input_value = str ( choice_label ) [EOL] break [EOL] [EOL] if isinstance ( input_value , Model ) : [EOL] input_value = str ( input_value ) [EOL] [EOL] if isinstance ( input_value , bool ) : [EOL] if input_value : [EOL] input_value = ugettext ( [string] ) [EOL] else : [EOL] input_value = ugettext ( [string] ) [EOL] [EOL] worksheet . write ( row_num , [number] , input_value , field_format ) [EOL] row_num += [number] [EOL] [EOL] [comment] [EOL] for index , field_name in enumerate ( report . output_fields . keys ( ) ) : [EOL] worksheet . set_column ( index , index , report . get_output_field_attr ( field_name , [string] , default = [number] ) , ) [EOL] [EOL] [comment] [EOL] if report . automatic_excel_column_labels : [EOL] row_num += [number] [EOL] [EOL] lookup_row_num = [number] [EOL] while ( lookup_row_num < len ( data ) [EOL] and lookup_row_num in data [EOL] and isinstance ( data [ lookup_row_num ] , ExcelRow ) ) : [EOL] lookup_row_num += [number] [EOL] [EOL] if len ( data ) > lookup_row_num : [EOL] for index , field_name in enumerate ( data [ lookup_row_num ] . keys ( ) ) : [EOL] field_label = report . get_output_field_attr ( field_name , [string] , default = field_name ) [EOL] [EOL] worksheet . write ( row_num , index , str ( field_label ) , formats [ FormatType . BOLD ] ) [EOL] [EOL] [comment] [EOL] row_num += [number] [EOL] first_data_row_num = row_num [EOL] for row in data : [EOL] if isinstance ( row , dict ) : [EOL] column = [number] [EOL] for field_name , field_value in row . items ( ) : [EOL] field_format = None [EOL] [EOL] field_format_name = report . get_output_field_attr ( field_name , [string] ) [EOL] [EOL] if field_format_name == [string] : [EOL] field_format = formats [ FormatType . DATE ] [EOL] elif field_format_name == [string] : [EOL] if field_value != [number] : [EOL] field_format = formats [ FormatType . MONEY ] [EOL] elif field_format_name == [string] : [EOL] if field_value : [EOL] field_value = str ( _ ( [string] ) ) [EOL] else : [EOL] field_value = str ( _ ( [string] ) ) [EOL] [EOL] field_serializer_field = report . get_output_field_attr ( field_name , [string] ) [EOL] if isinstance ( field_serializer_field , ChoiceField ) : [EOL] field_value = str ( field_serializer_field . choices [ field_value ] ) [EOL] [EOL] worksheet . write ( row_num , column , field_value , field_format ) [EOL] column += [number] [EOL] elif isinstance ( row , ExcelRow ) : [EOL] for cell in row . cells : [EOL] cell . set_row ( row_num ) [EOL] cell . set_first_data_row_num ( first_data_row_num ) [EOL] worksheet . write ( row_num , cell . column , cell . get_value ( ) , formats [ cell . get_format_type ( ) ] [EOL] if cell . get_format_type ( ) in formats [EOL] else None , ) [EOL] [EOL] row_num += [number] [EOL] [EOL] workbook . close ( ) [EOL] [EOL] return output . getvalue ( ) [EOL] [EOL] [EOL] class AsyncReportBase ( ReportBase ) : [EOL] async_task_timeout = [number] [comment] [EOL] [EOL] @ classmethod def get_output_fields_metadata ( cls ) : [EOL] return { [string] : { [string] : _ ( [string] ) } } [EOL] [EOL] def generate_report ( self , user , input_data ) : [EOL] report_data = self . get_data ( input_data ) [EOL] [EOL] return self . data_as_excel ( report_data ) [EOL] [EOL] def send_report ( self , task ) : [EOL] user = task . kwargs [ [string] ] [EOL] [EOL] message = EmailMessage ( from_email = settings . MVJ_EMAIL_FROM , to = [ user . email ] ) [EOL] [EOL] if task . success : [EOL] message . subject = _ ( [string] ) . format ( self . name ) [EOL] message . body = _ ( [string] ) [EOL] message . attach ( self . get_filename ( [string] ) , task . result , [string] , ) [EOL] else : [EOL] message . subject = _ ( [string] ) . format ( self . name ) [EOL] message . body = _ ( [string] ) [EOL] [EOL] message . send ( ) [EOL] [EOL] def get_response ( self , request ) : [EOL] user = request . user [EOL] input_data = self . get_input_data ( request ) [EOL] [EOL] async_task ( self . generate_report , user = user , input_data = input_data , hook = self . send_report , timeout = self . async_task_timeout , ) [EOL] [EOL] return Response ( { [string] : _ ( [string] ) . format ( user . email ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $leasing.report.report_base.ReportBase$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[leasing.report.excel.FormatType,typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import json [EOL] [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from rest_framework import renderers [EOL] [EOL] [EOL] class XLSXRenderer ( renderers . BaseRenderer ) : [EOL] media_type = [string] [EOL] format = [string] [EOL] charset = [string] [EOL] render_style = [string] [EOL] [EOL] def render ( self , data , media_type = None , renderer_context = None ) : [EOL] [comment] [EOL] if ( renderer_context [ [string] ] . action != [string] or renderer_context [ [string] ] . status_code != [number] ) : [EOL] renderer_context [ [string] ] [ [string] ] = [string] [EOL] return json . dumps ( data , cls = DjangoJSONEncoder ) [EOL] [EOL] return renderer_context [ [string] ] . report . data_as_excel ( data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import copy [EOL] from collections import OrderedDict [EOL] [EOL] from rest_framework import serializers [EOL] from rest_framework . fields import Field [EOL] [EOL] [EOL] class ReportOutputSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , output_fields = None , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . output_fields = output_fields [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] pass [EOL] [EOL] def create ( self , validated_data ) : [EOL] pass [EOL] [EOL] def get_fields ( self ) : [EOL] fields = OrderedDict ( ) [EOL] [EOL] for field_name , field_attrs in self . output_fields . items ( ) : [EOL] field = field_attrs . get ( [string] , None ) [EOL] [EOL] if field and isinstance ( field , Field ) : [EOL] [comment] [EOL] fields [ field_name ] = copy . deepcopy ( field ) [EOL] continue [EOL] [EOL] field_source = field_attrs . get ( [string] , None ) [EOL] [EOL] if field_source is None : [EOL] fields [ field_name ] = serializers . ReadOnlyField ( ) [EOL] elif callable ( field_source ) : [EOL] setattr ( self , [string] . format ( field_name ) , field_source ) [EOL] fields [ field_name ] = serializers . SerializerMethodField ( ) [EOL] else : [EOL] fields [ field_name ] = serializers . ReadOnlyField ( source = field_source ) [EOL] [EOL] return fields [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] from django import forms [EOL] [EOL] [EOL] class ReportFormBase ( forms . Form ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] input_fields = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] for field_name , field in input_fields . items ( ) : [EOL] self . fields [ field_name ] = field [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum [EOL] [EOL] from xlsxwriter . utility import xl_range , xl_rowcol_to_cell [EOL] [EOL] [EOL] class FormatType ( Enum ) : [EOL] BOLD = [string] [EOL] DATE = [string] [EOL] MONEY = [string] [EOL] BOLD_MONEY = [string] [EOL] [EOL] [EOL] class ExcelRow : [EOL] def __init__ ( self , cells = None ) : [EOL] self . cells = [ ] [EOL] [EOL] if cells is not None : [EOL] self . cells . extend ( cells ) [EOL] [EOL] [EOL] class ExcelCell : [EOL] def __init__ ( self , column , value = None , format_type = None ) : [EOL] self . column = column [EOL] self . value = value [EOL] self . format_type = format_type [EOL] self . row = None [EOL] self . first_data_row_num = None [EOL] [EOL] def get_value ( self ) : [EOL] return self . value [EOL] [EOL] def get_format_type ( self ) : [EOL] return self . format_type [EOL] [EOL] def set_row ( self , row_num ) : [EOL] self . row = row_num [EOL] [EOL] def set_first_data_row_num ( self , row_num ) : [EOL] self . first_data_row_num = row_num [EOL] [EOL] [EOL] class PreviousRowsSumCell ( ExcelCell ) : [EOL] def __init__ ( self , column , count , format_type = FormatType . BOLD ) : [EOL] super ( ) . __init__ ( column , format_type = format_type ) [EOL] [EOL] self . count = count [EOL] [EOL] def get_value ( self ) : [EOL] return [string] . format ( xl_rowcol_to_cell ( self . row - self . count , self . column ) , xl_rowcol_to_cell ( self . row - [number] , self . column ) , ) [EOL] [EOL] [EOL] class SumCell ( ExcelCell ) : [EOL] def __init__ ( self , column , format_type = FormatType . BOLD , target_ranges = None ) : [EOL] super ( ) . __init__ ( column , format_type = format_type ) [EOL] [EOL] if target_ranges : [EOL] self . target_ranges = target_ranges [EOL] else : [EOL] self . target_ranges = [ ] [EOL] [EOL] def add_target_range ( self , range ) : [EOL] self . target_ranges . append ( range ) [EOL] [EOL] def get_value ( self ) : [EOL] return [string] . format ( [string] . join ( [ xl_range ( i [ [number] ] + self . first_data_row_num , i [ [number] ] , i [ [number] ] + self . first_data_row_num , i [ [number] ] , ) for i in self . target_ranges ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] from django . contrib . gis . db import models [EOL] from django . utils . translation import pgettext_lazy [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from users . models import User [EOL] [EOL] from . mixins import TimeStampedModel [EOL] [EOL] [EOL] class UiData ( TimeStampedModel ) : [EOL] user = models . ForeignKey ( User , verbose_name = _ ( [string] ) , related_name = [string] , null = True , blank = True , on_delete = models . PROTECT , ) [EOL] key = models . CharField ( verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] value = models . TextField ( verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] permissions = ( ( [string] , [string] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.ui_data.UiData.Meta]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . area import Area , AreaSource [EOL] from . area_note import AreaNote [EOL] from . basis_of_rent import ( BasisOfRent , BasisOfRentBuildPermissionType , BasisOfRentDecision , BasisOfRentPlotType , BasisOfRentPropertyIdentifier , BasisOfRentRate , ) [EOL] from . comment import Comment , CommentTopic [EOL] from . contact import Contact [EOL] from . contract import Collateral , CollateralType , Contract , ContractChange , ContractType [EOL] from . debt_collection import ( CollectionCourtDecision , CollectionLetter , CollectionLetterTemplate , CollectionNote , InterestRate , ) [EOL] from . decision import Condition , ConditionType , Decision , DecisionMaker , DecisionType [EOL] from . email import EmailLog [EOL] from . infill_development_compensation import ( InfillDevelopmentCompensation , InfillDevelopmentCompensationAttachment , InfillDevelopmentCompensationDecision , InfillDevelopmentCompensationIntendedUse , InfillDevelopmentCompensationLease , ) [EOL] from . inspection import Inspection , InspectionAttachment [EOL] from . invoice import BankHoliday , Invoice , InvoiceNote , ReceivableType [EOL] from . land_area import ( ConstructabilityDescription , LeaseArea , LeaseAreaAttachment , PlanUnit , PlanUnitState , PlanUnitType , Plot , ) [EOL] from . lease import ( District , Financing , Hitas , IntendedUse , Lease , LeaseIdentifier , LeaseStateLog , LeaseType , Management , Municipality , NoticePeriod , Regulation , RelatedLease , ReservationProcedure , SpecialProject , StatisticalUse , SupportiveHousing , ) [EOL] from . leasehold_transfer import ( LeaseholdTransfer , LeaseholdTransferImportLog , LeaseholdTransferParty , LeaseholdTransferProperty , ) [EOL] from . rent import ( ContractRent , EqualizedRent , FixedInitialYearRent , Index , IndexAdjustedRent , LeaseBasisOfRent , PayableRent , Rent , RentAdjustment , RentDueDate , RentIntendedUse , ) [EOL] from . tenant import Tenant , TenantContact [EOL] from . ui_data import UiData [EOL] from . vat import Vat [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import leasing [EOL] import datetime [EOL] import datetime [EOL] [EOL] from auditlog . registry import auditlog [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import MaxValueValidator , MinValueValidator [EOL] from django . db import models [EOL] from django . db . models import Q [EOL] from django . utils . translation import pgettext_lazy [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class VatManager ( models . Manager ) : [EOL] def get_for_date ( self , the_date = None ) : [EOL] [docstring] [EOL] if the_date is None : [EOL] the_date = datetime . date . today ( ) [EOL] [EOL] return ( self . get_queryset ( ) . filter ( start_date__lte = the_date ) . filter ( Q ( end_date__gte = the_date ) | Q ( end_date__isnull = True ) ) . order_by ( [string] ) . first ( ) ) [EOL] [EOL] [EOL] class Vat ( models . Model ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] percent = models . IntegerField ( verbose_name = _ ( [string] ) , validators = [ MinValueValidator ( [number] ) , MaxValueValidator ( [number] ) ] , ) [EOL] [EOL] [comment] [EOL] start_date = models . DateField ( verbose_name = _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] end_date = models . DateField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] [EOL] objects = VatManager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return _ ( [string] ) . format ( self . percent , self . start_date , self . end_date ) [EOL] [EOL] def clean ( self ) : [EOL] if ( Vat . objects . filter ( start_date__lte = self . start_date ) . filter ( Q ( end_date__gte = self . start_date ) | Q ( end_date__isnull = True ) ) . exclude ( id = self . id ) . count ( ) > [number] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if ( self . end_date [EOL] and Vat . objects . filter ( start_date__lte = self . end_date ) . filter ( Q ( end_date__gte = self . end_date ) | Q ( end_date__isnull = True ) ) . exclude ( id = self . id ) . count ( ) > [number] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] if ( not self . end_date [EOL] and Vat . objects . filter ( start_date__gte = self . start_date ) . exclude ( id = self . id ) . count ( ) > [number] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] [EOL] auditlog . register ( Vat ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.models.vat.VatManager$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.vat.Vat.Meta]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Match , Dict , Any , Set , List , DefaultDict , Tuple [EOL] import typing [EOL] import dateutil [EOL] import decimal [EOL] import datetime [EOL] import datetime [EOL] import re [EOL] from collections import OrderedDict , defaultdict , namedtuple [EOL] from datetime import date [EOL] from decimal import Decimal [EOL] [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db . models import Manager , Model [EOL] [EOL] from leasing . enums import PeriodType [EOL] [EOL] [EOL] def get_range_overlap ( start1 , end1 , start2 , end2 ) : [EOL] min_end = min ( end1 , end2 ) if end1 and end2 else end1 or end2 [EOL] max_start = max ( start1 , start2 ) if start1 and start2 else start1 or start2 [EOL] [EOL] return max_start , min_end if max_start < min_end else None [EOL] [EOL] [EOL] def get_range_overlap_and_remainder ( start1 , end1 , start2 , end2 ) : [EOL] if start2 and end2 and ( start1 > start2 and start1 > end2 ) : [EOL] return [ None , [ ] ] [EOL] [EOL] if end1 and start2 and end1 < start2 : [EOL] return [ None , [ ] ] [EOL] [EOL] min_end = min ( end1 , end2 ) if end1 and end2 else end1 or end2 [EOL] max_start = max ( start1 , start2 ) if start1 and start2 else start1 or start2 [EOL] [EOL] remainder = [ ] [EOL] if max_start == start1 and min_end == end1 : [EOL] remainder = [ ] [EOL] elif max_start > start1 and min_end < end1 : [EOL] remainder = [ ( start1 , start2 - relativedelta ( days = [number] ) ) , ( end2 + relativedelta ( days = [number] ) , end1 ) , ] [EOL] elif max_start == start1 and min_end <= end1 : [EOL] remainder = [ ( end2 + relativedelta ( days = [number] ) , end1 ) ] [EOL] elif max_start == start2 and min_end >= end1 : [EOL] remainder = [ ( start1 , start2 - relativedelta ( days = [number] ) ) ] [EOL] [EOL] return [ ( max_start , min_end ) , remainder ] [EOL] [EOL] [EOL] def get_last_date_of_month ( year , month ) : [EOL] return date ( year = year , month = month , day = [number] ) + relativedelta ( day = [number] ) [EOL] [EOL] [EOL] def get_spanned_months ( start_date , end_date ) : [EOL] months = [number] [EOL] start = date ( start_date . year , start_date . month , [number] ) [EOL] end = date ( end_date . year , end_date . month , [number] ) [EOL] while start <= end : [EOL] months += [number] [EOL] start += relativedelta ( months = [number] ) [EOL] return months [EOL] [EOL] [EOL] def get_date_range_amount_from_monthly_amount ( monthly_amount , date_range_start , date_range_end , real_month_lengths = True ) : [EOL] total = [number] [EOL] [EOL] spanned_months = get_spanned_months ( date_range_start , date_range_end ) [EOL] total += monthly_amount * spanned_months [EOL] [EOL] start_month_last_day = get_last_date_of_month ( date_range_start . year , date_range_start . month ) [EOL] start_missing_days = date_range_start . day - [number] [EOL] [EOL] if not real_month_lengths and start_missing_days in ( [number] , [number] , [number] ) : [EOL] start_missing_days = [number] [EOL] divisor = Decimal ( start_month_last_day . day ) if real_month_lengths else Decimal ( [number] ) [EOL] total -= Decimal ( start_missing_days ) / divisor * monthly_amount [EOL] [EOL] end_month_last_day = get_last_date_of_month ( date_range_end . year , date_range_end . month ) [EOL] end_missing_days = end_month_last_day . day - date_range_end . day [EOL] [EOL] if not real_month_lengths and end_missing_days in ( [number] , [number] , [number] ) : [EOL] end_missing_days = [number] [EOL] divisor = Decimal ( end_month_last_day . day ) if real_month_lengths else Decimal ( [number] ) [EOL] total -= Decimal ( end_missing_days ) / divisor * monthly_amount [EOL] [EOL] return total [EOL] [EOL] [EOL] def fix_amount_for_overlap ( amount , overlap , remainders ) : [EOL] if not remainders or not amount : [EOL] return amount [EOL] [EOL] overlap_delta = relativedelta ( overlap [ [number] ] + relativedelta ( days = [number] ) , overlap [ [number] ] ) [EOL] overlap_months = overlap_delta . months [EOL] overlap_days = overlap_delta . days [EOL] [EOL] remainder_months = [number] [EOL] remainder_days = [number] [EOL] for remainder in remainders : [EOL] remainder_delta = relativedelta ( remainder [ [number] ] + relativedelta ( days = [number] ) , remainder [ [number] ] ) [EOL] remainder_months += remainder_delta . months [EOL] remainder_days += remainder_delta . days [EOL] [EOL] [comment] [EOL] if not overlap_days and not remainder_days : [EOL] return amount / ( overlap_months + remainder_months ) * overlap_months [EOL] [EOL] [comment] [EOL] full_overlap_days = ( overlap [ [number] ] + relativedelta ( days = [number] ) - overlap [ [number] ] ) . days [EOL] full_remainder_days = [number] [EOL] for remainder in remainders : [EOL] full_remainder_days += ( remainder [ [number] ] + relativedelta ( days = [number] ) - remainder [ [number] ] ) . days [EOL] [EOL] return amount / ( full_overlap_days + full_remainder_days ) * full_overlap_days [EOL] [EOL] [EOL] def get_billing_periods_for_year ( year , periods_per_year ) : [EOL] if periods_per_year < [number] or [number] % periods_per_year != [number] or periods_per_year > [number] : [EOL] [comment] [EOL] return [ ] [EOL] [EOL] period_length = [number] // periods_per_year [EOL] periods = [ ] [EOL] start = date ( year = year , month = [number] , day = [number] ) [EOL] for i in range ( periods_per_year ) : [EOL] end = start + relativedelta ( months = period_length ) - relativedelta ( days = [number] ) [EOL] periods . append ( ( start , end ) ) [EOL] start = end + relativedelta ( days = [number] ) [EOL] [EOL] return periods [EOL] [EOL] [EOL] def combine_ranges ( ranges ) : [EOL] sorted_ranges = sorted ( ranges ) [EOL] [EOL] result = [ ] [EOL] [EOL] new_range_start = None [EOL] new_range_end = None [EOL] [EOL] for ( range_start , range_end ) in sorted_ranges : [EOL] if new_range_start is None : [EOL] new_range_start = range_start [EOL] new_range_end = range_end [EOL] elif new_range_end >= range_start or ( range_start - new_range_end ) . days == [number] : [EOL] new_range_end = max ( range_end , new_range_end ) [EOL] else : [EOL] result . append ( ( new_range_start , new_range_end ) ) [EOL] new_range_start = range_start [EOL] new_range_end = range_end [EOL] [EOL] result . append ( ( new_range_start , new_range_end ) ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def subtract_range_from_range ( the_range , subtract_range ) : [EOL] [comment] [EOL] ( range1_start , range1_end ) = the_range [EOL] ( range2_start , range2_end ) = subtract_range [EOL] [EOL] if range2_start > range1_end or range1_start > range2_end : [EOL] return [ ( range1_start , range1_end ) ] [EOL] [EOL] result = [ ] [EOL] [EOL] if range2_start > range1_start : [EOL] result . append ( ( range1_start , range2_start - relativedelta ( days = [number] ) ) ) [EOL] [EOL] if range2_end < range1_end : [EOL] result . append ( ( range2_end + relativedelta ( days = [number] ) , range1_end ) ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def subtract_ranges_from_ranges ( ranges , subtract_ranges ) : [EOL] [comment] [EOL] combined_ranges = combine_ranges ( ranges ) [EOL] combined_subtract_ranges = combine_ranges ( subtract_ranges ) [EOL] [EOL] i = [number] [EOL] while i < len ( combined_ranges ) : [EOL] for subtract_range in combined_subtract_ranges : [EOL] result = subtract_range_from_range ( combined_ranges [ i ] , subtract_range ) [EOL] [EOL] if not result : [EOL] del combined_ranges [ i ] [EOL] i -= [number] [EOL] break [EOL] else : [EOL] combined_ranges [ i ] = result [ [number] ] [EOL] if len ( result ) > [number] : [EOL] combined_ranges . insert ( i + [number] , result [ [number] ] ) [EOL] i += [number] [EOL] [EOL] return combined_ranges [EOL] [EOL] [EOL] def split_date_range ( date_range , count ) : [EOL] [comment] [EOL] assert len ( date_range ) == [number] [EOL] assert isinstance ( date_range [ [number] ] , datetime . date ) [EOL] assert isinstance ( date_range [ [number] ] , datetime . date ) [EOL] assert date_range [ [number] ] < date_range [ [number] ] [EOL] [EOL] if count == [number] : [EOL] return [ ] [EOL] [EOL] if count == [number] : [EOL] return [ date_range ] [EOL] [EOL] start_date = date_range [ [number] ] [EOL] end_date = date_range [ [number] ] [EOL] [EOL] days_between = ( end_date - start_date ) . days [EOL] [comment] [EOL] if days_between < count : [EOL] raise RuntimeError ( [string] . format ( start_date , end_date , days_between , count ) ) [EOL] [EOL] days_per_period = days_between // count [EOL] [EOL] result = [ ] [EOL] current_start = start_date [EOL] while current_start < end_date : [EOL] split_end = current_start + relativedelta ( days = days_per_period ) [EOL] [EOL] if split_end > end_date : [EOL] split_end = end_date [EOL] [EOL] result . append ( ( current_start , split_end ) ) [EOL] current_start = split_end + relativedelta ( days = [number] ) [EOL] [EOL] if current_start == end_date : [EOL] result [ - [number] ] = ( result [ - [number] ] [ [number] ] , end_date ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def _get_date_range_from_item ( item ) : [EOL] if isinstance ( item , dict ) : [EOL] return item [ [string] ] [EOL] else : [EOL] if callable ( item . date_range ) : [EOL] return item . date_range ( ) [EOL] else : [EOL] return item . date_range [EOL] [EOL] [EOL] def group_items_in_period_by_date_range ( items , min_date , max_date ) : [EOL] grouped_items = { } [EOL] [EOL] if not items : [EOL] return grouped_items [EOL] [EOL] for item in items : [EOL] if ( isinstance ( item , dict ) and [string] not in item ) and not hasattr ( item , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] sorted_items = sorted ( items , key = _get_date_range_from_item ) [EOL] [EOL] start_date = min_date [EOL] current_date = min_date [EOL] current_items = None [EOL] previous_items = None [EOL] [EOL] while current_date < max_date : [EOL] current_items = [ ] [EOL] for item in sorted_items : [EOL] item_range = _get_date_range_from_item ( item ) [EOL] if ( item_range [ [number] ] is None or item_range [ [number] ] <= current_date ) and ( item_range [ [number] ] is None or current_date <= item_range [ [number] ] ) : [EOL] current_items . append ( item ) [EOL] [EOL] if previous_items is None : [EOL] previous_items = current_items [EOL] [EOL] if current_items != previous_items : [EOL] grouped_items [ ( start_date , current_date - relativedelta ( days = [number] ) ) ] = previous_items [EOL] [EOL] previous_items = current_items [EOL] start_date = current_date [EOL] [EOL] current_date += relativedelta ( days = [number] ) [EOL] [EOL] grouped_items [ ( start_date , current_date ) ] = current_items [EOL] [EOL] return grouped_items [EOL] [EOL] [EOL] def get_monthly_amount_by_period_type ( amount , period_type ) : [EOL] if period_type == PeriodType . PER_MONTH : [EOL] return amount [EOL] elif period_type == PeriodType . PER_YEAR : [EOL] return amount / [number] [EOL] else : [EOL] raise NotImplementedError ( [string] . format ( period_type ) ) [EOL] [EOL] [EOL] def is_business_day ( the_date ) : [EOL] if not the_date or not isinstance ( the_date , datetime . date ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if the_date . weekday ( ) > [number] : [EOL] return False [EOL] [EOL] from leasing . models import BankHoliday [EOL] [EOL] try : [EOL] BankHoliday . objects . get ( day = the_date ) [EOL] [EOL] return False [EOL] except BankHoliday . DoesNotExist : [EOL] return True [EOL] [EOL] [EOL] def get_next_business_day ( the_date ) : [EOL] if not the_date or not isinstance ( the_date , datetime . date ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] next_day = the_date + relativedelta ( days = [number] ) [EOL] [EOL] while not is_business_day ( next_day ) : [EOL] next_day += relativedelta ( days = [number] ) [EOL] [EOL] return next_day [EOL] [EOL] [EOL] def is_date_on_first_quarter ( the_date ) : [EOL] if not the_date or not isinstance ( the_date , datetime . date ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] first_quarter_start = datetime . date ( year = the_date . year , month = [number] , day = [number] ) [EOL] first_quarter_end = datetime . date ( year = the_date . year , month = [number] , day = [number] ) [EOL] [EOL] return first_quarter_start <= the_date <= first_quarter_end [EOL] [EOL] [EOL] class DayMonth ( namedtuple ( [string] , [ [string] , [string] ] ) ) : [EOL] @ classmethod def from_date ( cls , date_instance ) : [EOL] if not isinstance ( date_instance , datetime . date ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return cls ( day = date_instance . day , month = date_instance . month ) [EOL] [EOL] @ classmethod def from_datetime ( cls , datetime_instance ) : [EOL] if not isinstance ( datetime_instance , datetime . datetime ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return cls . from_date ( datetime . date ( year = datetime_instance . year , day = datetime_instance . day , month = datetime_instance . month , ) ) [EOL] [EOL] def asdict ( self ) : [EOL] return OrderedDict ( zip ( self . _fields , self ) ) [EOL] [EOL] [EOL] def recursive_get_related ( obj , user , parent_objs = None , acc = None ) : [comment] [EOL] [docstring] [EOL] if acc is None : [EOL] acc = defaultdict ( set ) [EOL] [EOL] if parent_objs is None : [EOL] parent_objs = [ ] [EOL] [EOL] model = obj . __class__ [EOL] [EOL] [comment] [EOL] [comment] [EOL] skip_relations = getattr ( model , [string] , [ ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for relation in model . _meta . get_fields ( include_hidden = True ) : [EOL] if ( not relation . is_relation or not relation . name or relation . name in skip_relations ) : [EOL] continue [EOL] [EOL] accessor_name = relation . name [EOL] if hasattr ( relation , [string] ) : [EOL] accessor_name = relation . get_accessor_name ( ) [EOL] [EOL] [comment] [EOL] if accessor_name . endswith ( [string] ) : [EOL] continue [EOL] [EOL] [comment] [EOL] if relation . related_model in ( po . __class__ for po in parent_objs ) : [EOL] continue [EOL] [EOL] if relation . concrete : [EOL] [comment] [EOL] concrete_item = getattr ( obj , accessor_name ) [EOL] if not concrete_item : [EOL] continue [EOL] all_items = [ concrete_item ] [EOL] else : [EOL] [comment] [EOL] related_manager = getattr ( obj , accessor_name ) [EOL] [EOL] if not hasattr ( related_manager , [string] ) : [EOL] continue [EOL] [EOL] [comment] [EOL] if hasattr ( related_manager , [string] ) : [EOL] all_items = related_manager . all_with_deleted ( ) [EOL] else : [EOL] all_items = related_manager . all ( ) [EOL] [EOL] [comment] [EOL] has_permission = False [EOL] permission_name = [string] . format ( relation . model . _meta . app_label , relation . model . _meta . model_name ) [EOL] if user . has_perm ( permission_name ) : [EOL] has_permission = True [EOL] [EOL] for item in all_items : [EOL] [comment] [EOL] if has_permission : [EOL] acc [ ContentType . objects . get_for_model ( item ) ] . add ( item ) [EOL] [EOL] parent_objs . append ( obj ) [EOL] recursive_get_related ( item , user = user , parent_objs = parent_objs , acc = acc ) [EOL] parent_objs . pop ( ) [EOL] [EOL] return acc [EOL] [EOL] [EOL] def normalize_property_identifier ( identifier ) : [EOL] if not identifier : [EOL] return identifier [EOL] [EOL] identifier = identifier . strip ( ) [EOL] [EOL] match = re . match ( [string] , identifier ) [EOL] [EOL] if not match : [EOL] match = re . match ( [string] , identifier ) [EOL] [EOL] if match : [EOL] normalized_identifier = [string] . format ( * [ m . lstrip ( [string] ) for m in match . group ( [number] , [number] , [number] , [number] ) ] ) [EOL] [EOL] if match . group ( [number] ) : [EOL] normalized_identifier += [string] . format ( match . group ( [number] ) , match . group ( [number] ) . lstrip ( [string] ) ) [EOL] [EOL] return normalized_identifier [EOL] [EOL] return identifier [EOL] [EOL] [EOL] def is_instance_empty ( instance , skip_fields = None ) : [EOL] [docstring] [EOL] assert isinstance ( instance , Model ) , [string] [EOL] [EOL] if skip_fields is None : [EOL] skip_fields = [ ] [EOL] [EOL] for field in instance . __class__ . _meta . get_fields ( ) : [EOL] if field . name in skip_fields : [EOL] continue [EOL] [EOL] if field . is_relation : [EOL] accessor_name = field . name [EOL] if hasattr ( field , [string] ) : [EOL] accessor_name = field . get_accessor_name ( ) [EOL] [EOL] val = getattr ( instance , accessor_name ) [EOL] [EOL] if isinstance ( val , Manager ) : [EOL] if len ( val . all ( ) ) : [EOL] return False [EOL] elif bool ( val ) : [EOL] return False [EOL] elif bool ( getattr ( instance , field . name ) ) : [EOL] return False [EOL] [EOL] return True [EOL]	
from typing import Type [EOL] import typing [EOL] import leasing [EOL] from django . contrib . gis . db import models [EOL] from django . contrib . postgres . fields import JSONField [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . utils . translation import pgettext_lazy [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import EnumField [EOL] [EOL] from leasing . enums import AreaType [EOL] [EOL] from . mixins import NameModel , TimeStampedSafeDeleteModel [EOL] [EOL] [EOL] class AreaSource ( NameModel ) : [EOL] identifier = models . CharField ( verbose_name = _ ( [string] ) , max_length = [number] , unique = True ) [EOL] [EOL] class Meta ( NameModel . Meta ) : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL] [EOL] [EOL] class Area ( TimeStampedSafeDeleteModel ) : [EOL] [docstring] [EOL] [EOL] type = EnumField ( AreaType , verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] identifier = models . CharField ( verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] external_id = models . CharField ( verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] geometry = models . MultiPolygonField ( srid = [number] , verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] metadata = JSONField ( verbose_name = _ ( [string] ) , encoder = DjangoJSONEncoder , null = True , blank = True ) [EOL] source = models . ForeignKey ( AreaSource , verbose_name = _ ( [string] ) , related_name = [string] , null = True , blank = True , on_delete = models . PROTECT , ) [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.AreaSource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.area.Area.Meta]$ 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import leasing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from safedelete . models import SafeDeleteModel [EOL] [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True , verbose_name = _ ( [string] ) ) [EOL] modified_at = models . DateTimeField ( auto_now = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class TimeStampedSafeDeleteModel ( TimeStampedModel , SafeDeleteModel ) : [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class NameModel ( models . Model ) : [EOL] name = models . CharField ( verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class ArchivableModel ( models . Model ) : [EOL] [comment] [EOL] archived_at = models . DateTimeField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] [comment] [EOL] archived_note = models . TextField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] [EOL] def is_archived ( self ) : [EOL] return bool ( self . archived_at ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.mixins.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.mixins.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.mixins.NameModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.mixins.ArchivableModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.mixins.ArchivableModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Type , List [EOL] import typing [EOL] import leasing [EOL] from django . contrib . contenttypes . fields import GenericForeignKey [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . contrib . gis . db import models [EOL] from django . utils . translation import pgettext_lazy [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import EnumField [EOL] [EOL] from leasing . enums import EmailLogType [EOL] from users . models import User [EOL] [EOL] from . mixins import TimeStampedSafeDeleteModel [EOL] [EOL] [EOL] class EmailLog ( TimeStampedSafeDeleteModel ) : [EOL] [docstring] [EOL] [EOL] type = EnumField ( EmailLogType , verbose_name = _ ( [string] ) , max_length = [number] ) [EOL] user = models . ForeignKey ( User , related_name = [string] , verbose_name = _ ( [string] ) , on_delete = models . PROTECT ) [EOL] text = models . TextField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] sent_at = models . DateTimeField ( verbose_name = _ ( [string] ) , null = True , blank = True ) [EOL] recipients = models . ManyToManyField ( User ) [EOL] content_type = models . ForeignKey ( ContentType , related_name = [string] , on_delete = models . CASCADE ) [EOL] object_id = models . PositiveIntegerField ( ) [EOL] content_object = GenericForeignKey ( [string] , [string] ) [EOL] [EOL] recursive_get_related_skip_relations = [ [string] ] [EOL] [EOL] class Meta : [EOL] verbose_name = pgettext_lazy ( [string] , [string] ) [EOL] verbose_name_plural = pgettext_lazy ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog.Meta]$ 0 0 0 0 0 0 0 0 $typing.Type[leasing.models.email.EmailLog.Meta]$ 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Optional , Dict , Any , Union , List [EOL] import typing [EOL] import collections [EOL] [EOL] from django . apps import apps [EOL] from django . contrib . auth . models import Group , Permission [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEFAULT_FIELD_PERMS = { [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , } [EOL] [EOL] CUSTOM_FIELD_PERMS = { [string] : { [string] : { [number] : [string] } , [string] : { [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , } , [string] : { [string] : { [number] : None , [number] : None , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } , [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , } , [string] : { [string] : { [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] } , } , [string] : { [string] : { [number] : [string] , [number] : [string] , [number] : [string] } , [string] : { [number] : [string] } , } , [string] : { [string] : { [number] : [string] , [number] : [string] , [number] : [string] } } , [string] : { [string] : { [number] : [string] } , [string] : { [number] : [string] } , [string] : { [number] : [string] } , [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } , } , [string] : { [string] : { [number] : [string] } , [string] : { [number] : [string] } } , [string] : { [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , [string] : { [number] : [string] , [number] : [string] } , } , [string] : { [string] : { [number] : None , [number] : None , [number] : None } } , [string] : { [string] : { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } } , } [EOL] [EOL] [EOL] def update ( d , u ) : [EOL] for k , v in u . items ( ) : [EOL] if isinstance ( v , collections . Mapping ) : [EOL] d [ k ] = update ( d . get ( k , { } ) , v ) [EOL] else : [EOL] d [ k ] = v [EOL] [EOL] return d [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] if not apps . is_installed ( [string] ) : [EOL] raise CommandError ( [string] ) [EOL] [EOL] from field_permissions . registry import field_permissions [EOL] [EOL] groups = { group . id : group for group in Group . objects . all ( ) } [EOL] permissions = { perm . codename : perm for perm in Permission . objects . all ( ) } [EOL] [EOL] group_permissions = [ ] [EOL] all_field_permissions = [ ] [EOL] [EOL] for model in field_permissions . get_models ( ) : [EOL] model_name = model . _meta . model_name [EOL] [EOL] [comment] [EOL] perms = field_permissions . get_field_permissions_for_model ( model ) [EOL] [EOL] field_perms = { } [EOL] for ( codename , name ) in sorted ( perms ) : [EOL] try : [EOL] all_field_permissions . append ( permissions [ codename ] ) [EOL] except KeyError : [EOL] raise CommandError ( [string] [string] . format ( codename ) ) [EOL] [EOL] if codename . startswith ( [string] ) : [EOL] continue [EOL] [EOL] field_name = codename . replace ( [string] . format ( model_name ) , [string] ) [EOL] [EOL] [comment] [EOL] if model_name in DEFAULT_FIELD_PERMS : [EOL] field_perms [ field_name ] = dict ( DEFAULT_FIELD_PERMS [ model_name ] ) [EOL] [EOL] [comment] [EOL] if model_name in CUSTOM_FIELD_PERMS : [EOL] update ( field_perms , CUSTOM_FIELD_PERMS [ model_name ] ) [EOL] [EOL] [comment] [EOL] for field_name , group_perms in field_perms . items ( ) : [EOL] for group_id , permission_type in group_perms . items ( ) : [EOL] if not permission_type : [EOL] continue [EOL] [EOL] permission_name = [string] . format ( permission_type , model_name , field_name ) [EOL] [EOL] group_permissions . append ( Group . permissions . through ( group = groups [ group_id ] , permission = permissions [ permission_name ] , ) ) [EOL] [EOL] [comment] [EOL] mvj_groups = [ grp for grp in groups . values ( ) if grp . id in range ( [number] , [number] ) ] [EOL] Group . permissions . through . objects . filter ( group__in = mvj_groups , permission__in = all_field_permissions ) . delete ( ) [EOL] [EOL] [comment] [EOL] Group . permissions . through . objects . bulk_create ( group_permissions ) [EOL] for group_permission in group_permissions : [EOL] self . stdout . write ( [string] . format ( group_permission . permission . codename , group_permission . group . name ) ) [EOL]	builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Optional , Dict , Any , Union , List , Tuple [EOL] import typing [EOL] from django . apps import apps [EOL] from django . contrib . auth . models import Group , Permission [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEFAULT_MODEL_PERMS = { [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] ) , [number] : ( [string] , [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , } , [string] : { [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , } , [string] : { [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : ( [string] , ) , } , [string] : { [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , ) , [number] : ( [string] , [string] , [string] , [string] ) , } , [string] : { [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : None , [number] : ( [string] , [string] , [string] , [string] ) , } , } [EOL] [EOL] PERMISSION_TYPES = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] groups = { group . id : group for group in Group . objects . all ( ) } [EOL] permissions = { perm . codename : perm for perm in Permission . objects . all ( ) } [EOL] [EOL] all_model_permissions = [ ] [EOL] group_permissions = [ ] [EOL] app_names = [ [string] , [string] , [string] ] [EOL] [EOL] for app_name in app_names : [EOL] for model in apps . get_app_config ( app_name ) . get_models ( include_auto_created = True ) : [EOL] model_name = model . _meta . model_name [EOL] [EOL] if model_name not in DEFAULT_MODEL_PERMS : [EOL] self . stdout . write ( [string] . format ( model_name ) ) [EOL] continue [EOL] [EOL] for permission_type in PERMISSION_TYPES : [EOL] all_model_permissions . append ( permissions [ [string] . format ( permission_type , model_name ) ] ) [EOL] [EOL] for ( custom_model_permission_name , desc ) in model . _meta . permissions : [EOL] all_model_permissions . append ( permissions [ custom_model_permission_name ] ) [EOL] [EOL] for group_id , permission_types in DEFAULT_MODEL_PERMS [ model_name ] . items ( ) : [EOL] if not permission_types : [EOL] continue [EOL] [EOL] for permission_type in permission_types : [EOL] if permission_type in permissions : [EOL] permission = permissions [ permission_type ] [EOL] else : [EOL] permission = permissions [ [string] . format ( permission_type , model_name ) ] [EOL] [EOL] group_permissions . append ( Group . permissions . through ( group = groups [ group_id ] , permission = permission ) ) [EOL] [EOL] [comment] [EOL] mvj_groups = [ grp for grp in groups . values ( ) if grp . id in range ( [number] , [number] ) ] [EOL] Group . permissions . through . objects . filter ( group__in = mvj_groups , permission__in = all_model_permissions ) . delete ( ) [EOL] [EOL] [comment] [EOL] Group . permissions . through . objects . bulk_create ( group_permissions ) [EOL] for group_permission in group_permissions : [EOL] self . stdout . write ( [string] . format ( group_permission . permission . codename , group_permission . group . name ) ) [EOL]	typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand [EOL] from helusers . models import ADGroup , ADGroupMapping [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] AD_GROUP_MAP = { [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , [string] : [ [number] ] , } [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] ad_groups = { ad_group . name : ad_group for ad_group in ADGroup . objects . filter ( name__in = AD_GROUP_MAP . keys ( ) ) } [EOL] [EOL] for ad_group_name , group_ids in AD_GROUP_MAP . items ( ) : [EOL] if ad_group_name not in ad_groups or not group_ids : [EOL] continue [EOL] [EOL] for group_id in group_ids : [EOL] ADGroupMapping . objects . get_or_create ( ad_group_id = ad_groups [ ad_group_name ] . id , group_id = group_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Tuple [EOL] import typing [EOL] import decimal [EOL] import datetime [EOL] import xlsxwriter [comment] [EOL] import datetime [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] from django . db . models import Q [EOL] from django . utils import timezone [EOL] [EOL] [comment] [EOL] [comment] [EOL] from leasing . enums import LeaseState , RentCycle , RentType [EOL] from leasing . models import Lease , PayableRent [EOL] [EOL] known_errors = { ( [string] , Decimal ( [string] ) ) : [string] , ( [string] , Decimal ( [string] ) ) : [string] , } [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] today = timezone . now ( ) . date ( ) [EOL] [EOL] leases = ( Lease . objects . filter ( state = LeaseState . LEASE ) . filter ( Q ( end_date__isnull = True ) | Q ( end_date__gte = today ) ) . order_by ( [string] ) ) [EOL] [EOL] workbook = xlsxwriter . Workbook ( [string] ) [EOL] worksheet = workbook . add_worksheet ( ) [EOL] [EOL] worksheet . freeze_panes ( [number] , [number] ) [EOL] worksheet . set_column ( [number] , [number] , [number] ) [EOL] worksheet . set_column ( [number] , [number] , [number] ) [EOL] worksheet . set_column ( [number] , [number] , [number] ) [EOL] worksheet . set_column ( [number] , [number] , [number] ) [EOL] [EOL] number = workbook . add_format ( { [string] : [string] } ) [EOL] red = workbook . add_format ( { [string] : [string] } ) [EOL] green = workbook . add_format ( { [string] : [string] } ) [EOL] red_number = workbook . add_format ( { [string] : [string] , [string] : [string] } ) [EOL] green_number = workbook . add_format ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] row = [number] [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] ) [EOL] row += [number] [EOL] [EOL] for lease in leases : [EOL] self . stdout . write ( [string] . format ( lease . id , lease ) ) [EOL] [EOL] rent = lease . rents . first ( ) [EOL] if not rent : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] if rent . type == RentType . MANUAL : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] [comment] [EOL] payable_rents = PayableRent . objects . filter ( rent = rent , start_date__year = [number] ) . order_by ( [string] ) [EOL] if not payable_rents : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] for payable_rent in payable_rents : [EOL] year = payable_rent . start_date . year [EOL] if rent . cycle == RentCycle . JANUARY_TO_DECEMBER : [EOL] year_start = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] year_end = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] else : [EOL] year_start = datetime . date ( year = year , month = [number] , day = [number] ) [EOL] year_end = datetime . date ( year = year + [number] , month = [number] , day = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] try : [EOL] calculated_amount = rent . get_amount_for_date_range ( year_start , year_end ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] except AssertionError : [EOL] self . stdout . write ( [string] ) [EOL] worksheet . write ( row , [number] , lease . get_identifier_string ( ) ) [EOL] worksheet . write ( row , [number] , year ) [EOL] worksheet . write ( row , [number] , payable_rent . amount , number ) [EOL] worksheet . write ( row , [number] , [string] , red ) [EOL] worksheet . write ( row , [number] , [string] , red ) [EOL] row += [number] [EOL] continue [EOL] except TypeError as e : [EOL] self . stdout . write ( str ( e ) ) [EOL] worksheet . write ( row , [number] , lease . get_identifier_string ( ) ) [EOL] worksheet . write ( row , [number] , year ) [EOL] worksheet . write ( row , [number] , payable_rent . amount , number ) [EOL] worksheet . write ( row , [number] , str ( e ) , red ) [EOL] worksheet . write ( row , [number] , [string] , red ) [EOL] row += [number] [EOL] continue [EOL] except Exception as e : [EOL] self . stdout . write ( str ( e ) ) [EOL] worksheet . write ( row , [number] , lease . get_identifier_string ( ) ) [EOL] worksheet . write ( row , [number] , year ) [EOL] worksheet . write ( row , [number] , payable_rent . amount , number ) [EOL] worksheet . write ( row , [number] , str ( e ) , red ) [EOL] worksheet . write ( row , [number] , [string] , red ) [EOL] row += [number] [EOL] continue [EOL] [EOL] color = green_number [EOL] [EOL] difference = calculated_amount - payable_rent . amount [EOL] [EOL] if abs ( difference ) > Decimal ( [string] ) : [EOL] color = red_number [EOL] self . stdout . write ( [string] . format ( year , payable_rent . amount ) ) [EOL] self . stdout . write ( [string] . format ( calculated_amount , [string] [EOL] if payable_rent . amount == calculated_amount [EOL] else [string] , ) ) [EOL] worksheet . write ( row , [number] , [string] , red ) [EOL] else : [EOL] worksheet . write ( row , [number] , [string] , green ) [EOL] [EOL] worksheet . write ( row , [number] , lease . get_identifier_string ( ) ) [EOL] worksheet . write ( row , [number] , year ) [EOL] worksheet . write ( row , [number] , payable_rent . amount , number ) [EOL] worksheet . write ( row , [number] , calculated_amount , number ) [EOL] worksheet . write ( row , [number] , difference , color ) [EOL] row += [number] [EOL] [EOL] row += [number] [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] . format ( row - [number] ) ) [EOL] [EOL] row += [number] [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] . format ( row - [number] ) ) [EOL] [EOL] row += [number] [EOL] worksheet . write ( row , [number] , [string] ) [EOL] worksheet . write ( row , [number] , [string] . format ( row - [number] ) ) [EOL] workbook . close ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Tuple[builtins.str,decimal.Decimal],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List , Match , Any [EOL] import typing [EOL] import decimal [EOL] import argparse [EOL] import datetime [EOL] import decimal [EOL] import re [EOL] from decimal import Decimal [EOL] [EOL] from dateutil . parser import parse , parserinfo [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from leasing . models import Collateral , Contract , Lease [EOL] [EOL] from openpyxl import load_workbook [comment] [EOL] [EOL] [EOL] LEASE_IDENTIFIER_COLUMN = [number] [EOL] AMOUNT_COLUMN = [number] [EOL] PAID_DATE_COLUMN = [number] [EOL] RETURNED_DATE_COLUMN = [number] [EOL] NOTE_COLUMN = [number] [EOL] [EOL] [EOL] def get_date_from_value ( date_value ) : [EOL] if not date_value : [EOL] return None [EOL] [EOL] if isinstance ( date_value , datetime . datetime ) : [EOL] return date_value . date ( ) [EOL] [EOL] if isinstance ( date_value , datetime . date ) : [EOL] return date_value [EOL] [EOL] date = re . search ( [string] , date_value , re . IGNORECASE ) [EOL] if date : [EOL] return parse ( date . group ( [number] ) , parserinfo = parserinfo ( dayfirst = True ) ) . date ( ) [EOL] [EOL] return None [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] auditlog . unregister ( Collateral ) [EOL] [EOL] wb = load_workbook ( filename = options [ [string] ] ) [EOL] sheet = wb . active [EOL] [EOL] max_row = sheet . max_row [EOL] for row_num in range ( [number] , max_row ) : [EOL] lease_identifier_cell = sheet . cell ( row = row_num , column = LEASE_IDENTIFIER_COLUMN ) [EOL] amount_cell = sheet . cell ( row = row_num , column = AMOUNT_COLUMN ) [EOL] paid_date_cell = sheet . cell ( row = row_num , column = PAID_DATE_COLUMN ) [EOL] returned_date_cell = sheet . cell ( row = row_num , column = RETURNED_DATE_COLUMN ) [EOL] note_cell = sheet . cell ( row = row_num , column = NOTE_COLUMN ) [EOL] [EOL] if lease_identifier_cell . value is None : [EOL] continue [EOL] [EOL] if lease_identifier_cell . value is None or amount_cell . value is None : [EOL] amount = Decimal ( [number] ) [EOL] else : [EOL] try : [EOL] amount = Decimal ( str ( amount_cell . value ) ) [EOL] except decimal . InvalidOperation : [EOL] amount = Decimal ( [number] ) [EOL] [EOL] lease_identifier_cell_value = lease_identifier_cell . value . strip ( ) [EOL] [comment] [EOL] if lease_identifier_cell_value . startswith ( [string] ) : [EOL] lease_identifier_cell_value = [string] + lease_identifier_cell_value [ [number] : ] [EOL] [EOL] if lease_identifier_cell_value [ [number] : [number] ] == [string] : [EOL] lease_identifier_cell_value = [string] + lease_identifier_cell_value [ [number] : ] [EOL] [EOL] lease_identifiers = re . findall ( [string] , lease_identifier_cell_value , re . IGNORECASE ) [EOL] if not lease_identifiers : [EOL] continue [EOL] [EOL] paid_date = get_date_from_value ( paid_date_cell . value ) [EOL] if not paid_date : [EOL] [comment] [EOL] paid_date = get_date_from_value ( lease_identifier_cell . value ) [EOL] [EOL] returned_date = get_date_from_value ( returned_date_cell . value ) [EOL] [EOL] for lease_identifier in lease_identifiers : [EOL] try : [EOL] lease = Lease . objects . get_by_identifier ( lease_identifier . upper ( ) ) [EOL] except Lease . DoesNotExist : [EOL] self . stderr . write ( [string] . format ( lease_identifier ) ) [EOL] continue [EOL] [EOL] lease_contract = lease . contracts . filter ( type = [number] ) . first ( ) [comment] [EOL] if not lease_contract : [EOL] self . stdout . write ( [string] . format ( lease_identifier ) ) [EOL] lease_contract = Contract . objects . create ( lease = lease , type_id = [number] , signing_note = [string] , ) [EOL] [EOL] ( collateral , collateral_created ) = Collateral . objects . get_or_create ( contract = lease_contract , type_id = [number] , total_amount = amount , paid_date = paid_date , returned_date = returned_date , note = note_cell . value , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $decimal.Decimal$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] from decimal import Decimal [EOL] [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . db import transaction [EOL] from django . db . models import Q [EOL] [EOL] from leasing . enums import InvoiceState [EOL] from leasing . models import Invoice , Lease [EOL] from leasing . models . invoice import InvoiceRow , InvoiceSet [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , nargs = [string] , type = bool ) [comment] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] override = options . get ( [string] , False ) [EOL] today = datetime . date . today ( ) [EOL] [EOL] if not override and today . day != [number] : [EOL] raise CommandError ( [string] ) [EOL] [EOL] start_of_next_month = today . replace ( day = [number] ) + relativedelta ( months = [number] ) [EOL] end_of_next_month = start_of_next_month + relativedelta ( day = [number] ) [EOL] [EOL] self . stdout . write ( [string] . format ( start_of_next_month , end_of_next_month ) ) [EOL] [EOL] leases = Lease . objects . filter ( is_invoicing_enabled = True ) . filter ( Q ( Q ( end_date = None ) | Q ( end_date__gte = today . replace ( day = [number] ) ) ) & Q ( Q ( start_date = None ) | Q ( start_date__lte = end_of_next_month ) ) ) [EOL] self . stdout . write ( [string] . format ( leases . count ( ) ) ) [EOL] [EOL] invoice_count = [number] [EOL] [EOL] for lease in leases : [EOL] period_rents = lease . determine_payable_rents_and_periods ( start_of_next_month , end_of_next_month ) [EOL] [EOL] if not period_rents : [EOL] continue [EOL] [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier ) ) [EOL] for period_invoice_data in lease . calculate_invoices ( period_rents ) : [EOL] invoiceset = None [EOL] if len ( period_invoice_data ) > [number] : [EOL] billing_period_start_date = period_invoice_data [ [number] ] . get ( [string] ) [EOL] billing_period_end_date = period_invoice_data [ [number] ] . get ( [string] ) [EOL] [EOL] try : [EOL] invoiceset = InvoiceSet . objects . get ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] self . stdout . write ( [string] ) [EOL] except InvoiceSet . DoesNotExist : [EOL] invoiceset = InvoiceSet . objects . create ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = invoiceset [EOL] [EOL] try : [EOL] invoice = Invoice . objects . get ( ** { k : v for k , v in invoice_data . items ( ) if k != [string] } ) [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , invoice . id , invoice . number ) ) [EOL] except Invoice . DoesNotExist : [EOL] with transaction . atomic ( ) : [EOL] invoice_data [ [string] ] = today [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [comment] [EOL] if invoice_data [ [string] ] == Decimal ( [number] ) : [EOL] invoice_data [ [string] ] = InvoiceState . PAID [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] self . stdout . write ( [string] . format ( invoice . id , invoice . number ) ) [EOL] invoice_count += [number] [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier ) ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] [EOL] self . stdout . write ( [string] . format ( invoice_count ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
from typing import Optional , Match , Dict , Any , List [EOL] import typing [EOL] import re [EOL] [EOL] from django . contrib . gis . geos import GEOSException [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import InternalError [EOL] [EOL] from leasing . enums import AreaType , PlotType [EOL] from leasing . models import Area , Lease [EOL] from leasing . models . land_area import ( PlanUnit , PlanUnitIntendedUse , PlanUnitState , PlanUnitType , Plot , PlotDivisionState , ) [EOL] [EOL] CODE_MAP = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] [EOL] def normalize_identifier ( identifier ) : [EOL] identifier = identifier . strip ( ) [EOL] match = re . match ( [string] , identifier ) [EOL] [EOL] if match : [EOL] groups = list ( match . groups ( ) ) [EOL] code = groups . pop ( [number] ) [EOL] if code in CODE_MAP . keys ( ) : [EOL] groups [ [number] ] = CODE_MAP [ code ] [EOL] [EOL] return [string] . format ( * [ int ( i ) for i in groups ] ) [EOL] [EOL] match = re . match ( [string] , identifier ) [EOL] if match : [EOL] return [string] . format ( * [ int ( i ) for i in match . groups ( ) ] ) [EOL] [EOL] return identifier [EOL] [EOL] [EOL] def denormalize_identifier ( identifier ) : [EOL] if len ( identifier ) == [number] : [EOL] return [string] . format ( int ( identifier [ [number] : [number] ] ) , int ( identifier [ [number] : [number] ] ) , int ( identifier [ [number] : [number] ] ) , int ( identifier [ [number] : ] ) , ) [EOL] [EOL] return identifier [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] for model in list ( auditlog . _registry . keys ( ) ) : [EOL] auditlog . unregister ( model ) [EOL] [EOL] leases = Lease . objects . all ( ) [EOL] [EOL] for lease in leases : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier ) ) [EOL] [EOL] lease_areas = { normalize_identifier ( la . identifier ) : la for la in lease . lease_areas . all ( ) } [EOL] self . stdout . write ( [string] . format ( [string] . join ( lease_areas . keys ( ) ) ) ) [EOL] [EOL] areas = Area . objects . filter ( type = AreaType . LEASE_AREA , identifier = str ( lease . identifier ) ) [EOL] [EOL] if not areas : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier ) ) [EOL] [EOL] for area in areas : [EOL] property_identifier = [string] . format ( area . metadata . get ( [string] , [string] ) [EOL] if area . metadata . get ( [string] ) [EOL] else [string] , area . metadata . get ( [string] , [string] ) [EOL] if area . metadata . get ( [string] ) [EOL] else [string] , area . metadata . get ( [string] , [string] ) [EOL] if area . metadata . get ( [string] ) [EOL] else [string] , area . metadata . get ( [string] , [string] ) [EOL] if area . metadata . get ( [string] ) [EOL] else [string] , [string] . format ( area . metadata . get ( [string] , [string] ) ) [EOL] if [string] in area . metadata [EOL] else [string] , ) [EOL] area_identifier = normalize_identifier ( property_identifier ) [EOL] self . stdout . write ( [string] . format ( property_identifier , area_identifier ) ) [EOL] [EOL] if area_identifier not in lease_areas . keys ( ) : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , area_identifier ) ) [EOL] continue [EOL] [EOL] lease_areas [ area_identifier ] . geometry = area . geometry [EOL] lease_areas [ area_identifier ] . save ( ) [EOL] self . stdout . write ( [string] ) [EOL] [EOL] del_plots = ( lease_areas [ area_identifier ] . plots . exclude ( in_contract = True ) . delete ( ) ) [EOL] del_plan_units = ( lease_areas [ area_identifier ] . plan_units . exclude ( in_contract = True ) . delete ( ) ) [EOL] self . stdout . write ( [string] . format ( del_plots , del_plan_units ) ) [EOL] [EOL] try : [EOL] other_areas = ( Area . objects . filter ( geometry__intersects = area . geometry ) . exclude ( type__in = [ AreaType . LEASE_AREA , AreaType . PLOT_DIVISION ] ) . exclude ( geometry__touches = area . geometry ) ) [EOL] except InternalError as e : [EOL] self . stdout . write ( str ( e ) ) [EOL] continue [EOL] for other_area in other_areas : [EOL] self . stdout . write ( [string] . format ( other_area . id , other_area . identifier , other_area . type ) ) [EOL] [EOL] try : [EOL] intersection = ( other_area . geometry & lease_areas [ area_identifier ] . geometry ) [EOL] intersection . transform ( [number] ) [EOL] except GEOSException as e : [EOL] self . stdout . write ( str ( e ) ) [EOL] continue [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not other_area . metadata . get ( [string] ) : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , other_area . id ) ) [EOL] continue [EOL] [EOL] [comment] [EOL] if intersection . area < [number] : [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , other_area . id ) ) [EOL] continue [EOL] [EOL] if ( other_area . type == AreaType . REAL_PROPERTY or other_area . type == AreaType . UNSEPARATED_PARCEL ) : [EOL] match_data = { [string] : lease_areas [ area_identifier ] , [string] : PlotType [ other_area . type . value . upper ( ) ] , [string] : denormalize_identifier ( other_area . identifier ) , [string] : False , } [EOL] rest_data = { [string] : float ( other_area . metadata . get ( [string] ) ) , [string] : intersection . area , [string] : other_area . metadata . get ( [string] ) , [string] : other_area . metadata . get ( [string] ) , [string] : other_area . geometry , } [EOL] ( plot , plot_created ) = Plot . objects . update_or_create ( defaults = rest_data , ** match_data ) [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , plot . id , plot . type ) ) [EOL] elif other_area . type == AreaType . PLAN_UNIT : [EOL] [comment] [EOL] plot_area = ( Area . objects . filter ( geometry__intersects = other_area . geometry , type = AreaType . PLOT_DIVISION , ) . extra ( select = { [string] : [string] . format ( other_area . geometry ) } ) . order_by ( [string] ) . first ( ) ) [EOL] [EOL] if plot_area and plot_area . interarea > [number] : [EOL] ( plot_division_state , created , ) = PlotDivisionState . objects . get_or_create ( name = plot_area . metadata . get ( [string] ) ) [EOL] [EOL] detailed_plan_area = Area . objects . filter ( type = AreaType . DETAILED_PLAN , identifier = other_area . metadata . get ( [string] ) , ) . first ( ) [EOL] if detailed_plan_area : [EOL] detailed_plan_identifier = detailed_plan_area . identifier [EOL] detailed_plan_latest_processing_date = None [EOL] else : [EOL] detailed_plan_identifier = None [EOL] detailed_plan_latest_processing_date = None [EOL] [EOL] ( plan_unit_type , created , ) = PlanUnitType . objects . get_or_create ( name = other_area . metadata . get ( [string] ) ) [EOL] ( plan_unit_state , created , ) = PlanUnitState . objects . get_or_create ( name = other_area . metadata . get ( [string] ) ) [EOL] if other_area . metadata . get ( [string] ) : [EOL] ( plan_unit_intended_use , created , ) = PlanUnitIntendedUse . objects . get_or_create ( name = other_area . metadata . get ( [string] ) ) [EOL] else : [EOL] plan_unit_intended_use = None [EOL] [EOL] match_data = { [string] : lease_areas [ area_identifier ] , [string] : denormalize_identifier ( other_area . identifier ) , [string] : False , } [EOL] rest_data = { [string] : float ( other_area . metadata . get ( [string] ) ) , [string] : intersection . area , [string] : other_area . geometry , [string] : plot_area . identifier , [string] : plot_area . metadata . get ( [string] ) , [string] : plot_area . metadata . get ( [string] ) , [string] : plot_division_state , [string] : detailed_plan_identifier , [string] : detailed_plan_latest_processing_date , [string] : plan_unit_type , [string] : plan_unit_state , [string] : plan_unit_intended_use , } [EOL] [EOL] ( plan_unit , plan_unit_created , ) = PlanUnit . objects . update_or_create ( defaults = rest_data , ** match_data ) [EOL] [EOL] self . stdout . write ( [string] . format ( lease . id , lease . identifier , plan_unit . id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from leasing . importer . area import AreaImporter [EOL] from leasing . importer . basis_of_rent import BasisOfRentImporter [EOL] from leasing . importer . invoice_relations import InvoiceRelationsImporter [EOL] from leasing . importer . lease import LeaseImporter [EOL] from leasing . importer . lease_area import LeaseAreaImporter [EOL] from leasing . importer . lease_relations import LeaseRelationsImporter [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def __init__ ( self , stdout = None , stderr = None , no_color = False ) : [EOL] super ( ) . __init__ ( stdout = stdout , stderr = stderr , no_color = no_color ) [EOL] [EOL] self . importers = [ BasisOfRentImporter , LeaseImporter , LeaseRelationsImporter , AreaImporter , LeaseAreaImporter , InvoiceRelationsImporter , ] [EOL] [EOL] self . _importers = { } [EOL] for importer in self . importers : [EOL] self . _importers [ importer . type_name ] = importer [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] importer_choices = self . _importers . keys ( ) [EOL] [EOL] parser . add_argument ( [string] , nargs = [string] , type = str , choices = importer_choices , help = [string] , ) [EOL] [EOL] for importer in self . importers : [EOL] importer . add_arguments ( parser ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] for importer_type_name in options [ [string] ] : [EOL] importer = self . _importers [ importer_type_name ] ( stdout = self . stdout , stderr = self . stderr ) [EOL] importer . read_options ( options ) [EOL] importer . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import argparse [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from leasing . models import Contact [EOL] [EOL] [EOL] def read_post_codes ( file ) : [EOL] code_to_city_name = { } [EOL] [EOL] for row in file : [EOL] code = row [ [number] : [number] ] [EOL] [comment] [EOL] city_name = row [ [number] : [number] ] . strip ( ) [EOL] [EOL] code_to_city_name [ code ] = city_name [EOL] [EOL] return code_to_city_name [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] , encoding = [string] ) , help = [string] [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] code_to_city_name = read_post_codes ( options [ [string] ] ) [EOL] [EOL] from auditlog . registry import auditlog [EOL] [EOL] [comment] [EOL] auditlog . unregister ( Contact ) [EOL] [EOL] contacts = Contact . objects . filter ( city__isnull = True ) [EOL] self . stdout . write ( [string] . format ( contacts . count ( ) ) ) [EOL] [EOL] for contact in contacts : [EOL] if not contact . postal_code : [EOL] self . stdout . write ( [string] . format ( contact . id ) ) [EOL] continue [EOL] [EOL] if contact . postal_code not in code_to_city_name . keys ( ) : [EOL] self . stdout . write ( [string] . format ( contact . id , contact . postal_code ) ) [EOL] continue [EOL] [EOL] contact . city = code_to_city_name [ contact . postal_code ] [EOL] contact . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Any , Tuple [EOL] import typing [EOL] import leasing [EOL] import datetime [EOL] import datetime [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] [EOL] from dateutil . relativedelta import relativedelta [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] [EOL] from leasing . calculation . result import CalculationAmount , CalculationResult [EOL] from leasing . enums import InvoiceState , InvoiceType [EOL] from leasing . models import Invoice [EOL] from leasing . models . invoice import InvoiceRow [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] today = datetime . date . today ( ) [EOL] [EOL] december_last_year = datetime . date ( year = today . year - [number] , month = [number] , day = [number] ) [EOL] [EOL] self . stdout . write ( [string] . format ( december_last_year , today ) ) [EOL] [EOL] [comment] [EOL] invoices = Invoice . objects . filter ( invoicing_date__range = [ december_last_year , today ] , type = InvoiceType . CHARGE , generated = True , ) . select_related ( [string] ) [EOL] [EOL] sent_invoice_data = { } [EOL] for invoice in invoices : [EOL] billing_period = ( invoice . billing_period_start_date , invoice . billing_period_end_date , ) [EOL] [EOL] if invoice . lease not in sent_invoice_data : [EOL] sent_invoice_data [ invoice . lease ] = { [string] : [ ] , [string] : { } , } [EOL] [EOL] sent_invoice_data [ invoice . lease ] [ [string] ] . append ( invoice ) [EOL] if ( billing_period not in sent_invoice_data [ invoice . lease ] [ [string] ] ) : [EOL] sent_invoice_data [ invoice . lease ] [ [string] ] [ billing_period ] = Decimal ( [number] ) [EOL] [EOL] if invoice . type == InvoiceType . CHARGE : [EOL] sent_invoice_data [ invoice . lease ] [ [string] ] [ billing_period ] += invoice . billed_amount [EOL] elif invoice . type == InvoiceType . CREDIT_NOTE : [EOL] sent_invoice_data [ invoice . lease ] [ [string] ] [ billing_period ] -= invoice . billed_amount [EOL] [EOL] for lease , data in sent_invoice_data . items ( ) : [EOL] for invoice in data [ [string] ] : [EOL] self . stdout . write ( [string] . format ( invoice . id , lease . identifier , invoice . billing_period_start_date , invoice . billing_period_end_date , ) ) [EOL] [EOL] for billing_period , invoiced_rent_amount in data [ [string] ] . items ( ) : [EOL] if not all ( billing_period ) : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] try : [EOL] calculation_result = lease . calculate_rent_amount_for_period ( * billing_period ) [EOL] except TypeError as e : [EOL] self . stdout . write ( [string] . format ( str ( e ) ) ) [EOL] continue [EOL] [EOL] [comment] [EOL] rent_amount = calculation_result . get_total_amount ( ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] if rent_amount == invoiced_rent_amount : [EOL] self . stdout . write ( [string] . format ( rent_amount ) ) [EOL] continue [EOL] [EOL] rent_difference = rent_amount - invoiced_rent_amount [EOL] [EOL] self . stdout . write ( [string] . format ( rent_amount , invoiced_rent_amount , rent_difference ) ) [EOL] [EOL] new_due_date = today + relativedelta ( days = settings . MVJ_DUE_DATE_OFFSET_DAYS ) [EOL] [EOL] new_calculation_result = CalculationResult ( date_range_start = billing_period [ [number] ] , date_range_end = billing_period [ [number] ] ) [EOL] [EOL] [comment] [EOL] items = [ amount . item for amount in calculation_result . get_all_amounts ( ) ] [EOL] [EOL] calculation_amount = CalculationAmount ( item = items [ [number] ] , amount = abs ( rent_difference ) , date_range_start = billing_period [ [number] ] , date_range_end = billing_period [ [number] ] , ) [EOL] [EOL] new_calculation_result . add_amount ( calculation_amount ) [EOL] [EOL] amounts_for_billing_periods = { billing_period : { [string] : new_due_date , [string] : new_calculation_result , } } [EOL] [EOL] new_invoice_data = lease . calculate_invoices ( amounts_for_billing_periods ) [EOL] [EOL] for period_invoice_data in new_invoice_data : [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] [EOL] [comment] [EOL] if rent_difference < Decimal ( [number] ) : [EOL] invoice_data [ [string] ] = InvoiceType . CREDIT_NOTE [EOL] invoice_data [ [string] ] = InvoiceState . PAID [EOL] [EOL] original_invoice = None [EOL] for sent_invoice in data [ [string] ] : [EOL] if sent_invoice . is_same_recipient_and_tenants ( invoice_data ) : [EOL] original_invoice = sent_invoice [EOL] [EOL] if original_invoice is None : [EOL] self . stdout . write ( [string] ) [EOL] continue [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = original_invoice . invoiceset [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] try : [EOL] invoice = Invoice . objects . get ( ** invoice_data ) [EOL] self . stdout . write ( [string] . format ( invoice . id , invoice . number ) ) [EOL] except Invoice . DoesNotExist : [EOL] with transaction . atomic ( ) : [EOL] [comment] [EOL] invoice_data [ [string] ] = today [EOL] [EOL] if InvoiceType . CHARGE : [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] if invoice_data [ [string] ] == InvoiceType . CREDIT_NOTE : [EOL] original_invoice . update_amounts ( ) [EOL] [EOL] self . stdout . write ( [string] . format ( invoice . id , invoice . number ) ) [EOL] except Invoice . MultipleObjectsReturned : [EOL] self . stdout . write ( [string] ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Tuple[unknown,unknown]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.list$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.result.CalculationResult$ 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $leasing.calculation.result.CalculationAmount$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 0 0 0 $leasing.calculation.result.CalculationResult$ 0 0 0 $leasing.calculation.result.CalculationAmount$ 0 0 0 $typing.Dict[typing.Any,typing.Dict[builtins.str,typing.Union[datetime.date,leasing.calculation.result.CalculationResult]]]$ 0 0 $typing.Tuple[unknown,unknown]$ 0 0 0 0 $datetime.date$ 0 0 0 $leasing.calculation.result.CalculationResult$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Dict[builtins.str,typing.Union[datetime.date,leasing.calculation.result.CalculationResult]]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Optional , Dict , Any , IO , List , Type [EOL] import leasing [EOL] import zipfile [EOL] import typing [EOL] import xml [EOL] import datetime [EOL] [docstring] [EOL] import io [EOL] import os [EOL] import sys [EOL] import tempfile [EOL] import zipfile [EOL] from datetime import datetime [EOL] from xml . etree import ElementTree [EOL] [EOL] import pytz [EOL] import requests [EOL] from bs4 import BeautifulSoup [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from . . . enums import LeaseholdTransferPartyType [EOL] from . . . models import ( LeaseholdTransfer , LeaseholdTransferImportLog , LeaseholdTransferParty , LeaseholdTransferProperty , ) [EOL] [EOL] NS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def get_import_dir ( ) : [EOL] return settings . NLS_IMPORT_ROOT [EOL] [EOL] [EOL] def get_name_from_xml_elem ( elem ) : [EOL] [docstring] [EOL] name = [string] [EOL] [EOL] first_names_xml = elem . find ( [string] , NS ) [EOL] if first_names_xml is not None : [EOL] name += first_names_xml . text [EOL] last_name_xml = elem . find ( [string] , NS ) [EOL] if last_name_xml is not None : [EOL] name += [string] + last_name_xml . text if name else last_name_xml . text [EOL] [EOL] if not name : [EOL] name_xml = elem . find ( [string] , NS ) [EOL] if name_xml is not None : [EOL] name = name_xml . text [EOL] [EOL] return name [EOL] [EOL] [EOL] def get_business_id_or_none_from_xml_elem ( elem ) : [EOL] [docstring] [EOL] business_id = None [EOL] [EOL] business_id_xml = elem . find ( [string] , NS ) [EOL] if business_id_xml is not None : [EOL] business_id = business_id_xml . text [EOL] return business_id [EOL] [EOL] [EOL] def get_national_id_or_none_from_xml_elem ( elem ) : [EOL] [docstring] [EOL] national_id = None [EOL] [EOL] national_id_xml = elem . find ( [string] , NS ) [EOL] if national_id_xml is not None : [EOL] national_id = national_id_xml . text [EOL] return national_id [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ . strip ( ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . nls_url = settings . NLS_HELSINKI_FOLDER_URL [EOL] self . nls_user = settings . NLS_HELSINKI_USERNAME [EOL] self . nls_password = settings . NLS_HELSINKI_PASSWORD . encode ( [string] ) [EOL] self . touched_transfers_count = [number] [EOL] [EOL] def _auth_get ( self , url ) : [EOL] return requests . get ( url , auth = ( self . nls_user , self . nls_password ) ) [EOL] [EOL] def _check_import_directory ( self ) : [EOL] if not os . path . isdir ( get_import_dir ( ) ) : [EOL] self . stdout . write ( [string] . format ( get_import_dir ( ) ) ) [EOL] sys . exit ( - [number] ) [EOL] [EOL] try : [EOL] fp = tempfile . TemporaryFile ( dir = get_import_dir ( ) ) [EOL] fp . close ( ) [EOL] except PermissionError : [EOL] self . stdout . write ( [string] . format ( get_import_dir ( ) ) ) [EOL] sys . exit ( - [number] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] self . _check_import_directory ( ) [EOL] [EOL] target_folder_path = self . nls_url + [string] [EOL] [EOL] folder_response = self . _auth_get ( target_folder_path ) [EOL] [EOL] if folder_response . status_code != [number] : [EOL] raise CommandError ( [string] ) [EOL] [EOL] html_soup = BeautifulSoup ( folder_response . content , [string] ) [EOL] [EOL] imported_archives = [number] [EOL] new_archives = [number] [EOL] [EOL] for link in html_soup . select ( [string] ) : [EOL] file_link = link [ [string] ] [EOL] file_name = file_link . split ( [string] ) [ - [number] ] [EOL] [EOL] if LeaseholdTransferImportLog . objects . filter ( file_name = file_name ) . exists ( ) : [EOL] [comment] [EOL] continue [EOL] [EOL] zip_file_response = self . _auth_get ( target_folder_path + file_name ) [EOL] zip_bytes = zip_file_response . content [EOL] [EOL] with open ( os . path . join ( get_import_dir ( ) , file_name ) , [string] ) as local_zip : [EOL] local_zip . write ( zip_bytes ) [EOL] local_zip . close ( ) [EOL] [EOL] archive = zipfile . ZipFile ( io . BytesIO ( zip_bytes ) ) [EOL] xml_file = archive . read ( [string] ) [EOL] self . _handle_xml_file ( xml_file ) [EOL] [EOL] ( processed_archive_object , created , ) = LeaseholdTransferImportLog . objects . get_or_create ( file_name = file_name ) [EOL] [EOL] [comment] [EOL] processed_archive_object . save ( ) [EOL] [EOL] imported_archives += [number] [EOL] if created : [EOL] new_archives += [number] [EOL] [EOL] self . stdout . write ( [string] . format ( imported_archives ) ) [EOL] self . stdout . write ( [string] . format ( new_archives ) ) [EOL] self . stdout . write ( [string] . format ( self . touched_transfers_count ) ) [EOL] [EOL] def _handle_xml_file ( self , xml_file ) : [EOL] [docstring] [EOL] root = ElementTree . fromstring ( xml_file ) [EOL] [EOL] for entry in root . findall ( [string] , NS ) : [EOL] leasehold_items = entry . findall ( [string] , NS ) [EOL] [EOL] if not leasehold_items : [EOL] [comment] [EOL] continue [EOL] [EOL] for item in leasehold_items : [EOL] item_type = item . find ( [string] , NS ) . text [EOL] [EOL] if item_type != [string] : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [EOL] item_status = item . find ( [string] , NS ) . text [EOL] [EOL] if item_status != [string] : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [EOL] decision = item . find ( [string] , NS ) [EOL] transfer_shares = item . find ( [string] , NS ) [EOL] [EOL] if decision is None or transfer_shares is None : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [EOL] decision_date_el = decision . find ( [string] , NS ) [EOL] decision_date = None [EOL] if decision_date_el is not None : [EOL] decision_date_str = decision_date_el . text [comment] [EOL] decision_date = datetime . strptime ( decision_date_str , [string] ) . replace ( tzinfo = pytz . timezone ( [string] ) ) [EOL] [EOL] institution_identifier = entry . find ( [string] , NS ) . text [EOL] [EOL] transfer = LeaseholdTransfer . objects . create ( institution_identifier = institution_identifier , decision_date = decision_date , ) [EOL] [EOL] self . _handle_lease_properties ( transfer , entry ) [EOL] [EOL] self . _handle_lease_parties ( transfer , entry , transfer_shares ) [EOL] [EOL] self . touched_transfers_count += [number] [EOL] [EOL] @ staticmethod def _handle_lease_properties ( transfer , entry_xml ) : [EOL] properties_xml_elems = entry_xml . findall ( [string] , NS ) [EOL] [EOL] for prop_element in properties_xml_elems : [EOL] property_id = prop_element . find ( [string] , NS ) [EOL] if property_id is not None : [EOL] prop , _ = LeaseholdTransferProperty . objects . get_or_create ( identifier = property_id . text , transfer = transfer ) [EOL] [EOL] @ staticmethod def _handle_lease_parties ( transfer , entry_xml , transfer_shares_xml ) : [EOL] lessors_xml_elems = entry_xml . findall ( [string] , NS ) [EOL] [EOL] for lessor_element in lessors_xml_elems : [EOL] lessor_name = get_name_from_xml_elem ( lessor_element ) [EOL] business_id = get_business_id_or_none_from_xml_elem ( lessor_element ) [EOL] national_id = get_national_id_or_none_from_xml_elem ( lessor_element ) [EOL] if lessor_name is not None : [EOL] lessor , _ = LeaseholdTransferParty . objects . get_or_create ( type = LeaseholdTransferPartyType . LESSOR , name = lessor_name , business_id = business_id , national_identification_number = national_id , transfer = transfer , ) [EOL] [EOL] for share_elem in transfer_shares_xml . findall ( [string] , NS ) : [EOL] share_numerator = int ( share_elem . find ( [string] , NS ) . text ) [EOL] share_denominator = int ( share_elem . find ( [string] , NS ) . text ) [EOL] [EOL] for conveyor_xml_elem in share_elem . findall ( [string] , NS ) : [EOL] conveyor_name = get_name_from_xml_elem ( conveyor_xml_elem ) [EOL] business_id = get_business_id_or_none_from_xml_elem ( conveyor_xml_elem ) [EOL] national_id = get_national_id_or_none_from_xml_elem ( conveyor_xml_elem ) [EOL] conveyor , _ = LeaseholdTransferParty . objects . get_or_create ( type = LeaseholdTransferPartyType . CONVEYOR , name = conveyor_name , business_id = business_id , national_identification_number = national_id , transfer = transfer , ) [EOL] [EOL] for acquirer_xml_elem in share_elem . findall ( [string] , NS ) : [EOL] acquirer_name = get_name_from_xml_elem ( acquirer_xml_elem ) [EOL] business_id = get_business_id_or_none_from_xml_elem ( acquirer_xml_elem ) [EOL] national_id = get_national_id_or_none_from_xml_elem ( acquirer_xml_elem ) [EOL] acquirer , _ = LeaseholdTransferParty . objects . get_or_create ( type = LeaseholdTransferPartyType . ACQUIRER , name = acquirer_name , share_numerator = share_numerator , share_denominator = share_denominator , business_id = business_id , national_identification_number = national_id , transfer = transfer , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zipfile.ZipFile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $zipfile.ZipFile$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 0 0 $typing.List[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime.datetime$ 0 $datetime.datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Optional , Match , Dict , Any , List [EOL] import typing [EOL] import requests [EOL] import re [EOL] [EOL] import requests [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from leasing . models import Index [EOL] from leasing . models . rent import LegacyIndex [EOL] [EOL] INDEX_IMPORTS = [ { [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , } , ] [EOL] [EOL] [EOL] def get_values_from_row ( row ) : [EOL] matches = re . match ( [string] , row [ [string] ] [ [number] ] ) [EOL] [EOL] year = int ( matches . group ( [string] ) ) [EOL] [EOL] month = None [EOL] if matches . group ( [string] ) : [EOL] month = int ( matches . group ( [string] ) ) [EOL] [EOL] number = row [ [string] ] [ [number] ] [EOL] [EOL] if number == [string] : [EOL] number = None [EOL] else : [EOL] number = int ( number ) [EOL] [EOL] return year , month , number [EOL] [EOL] [EOL] def get_data ( url ) : [EOL] query_string = [string] [EOL] [EOL] r = requests . post ( url , data = query_string ) [EOL] [EOL] if r . status_code != [number] : [EOL] raise CommandError ( [string] ) [EOL] [EOL] return r . json ( ) . get ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] for index_import in INDEX_IMPORTS : [EOL] self . stdout . write ( index_import [ [string] ] ) [EOL] [EOL] data = get_data ( index_import [ [string] ] ) [EOL] [EOL] for row in data : [EOL] ( year , month , number ) = get_values_from_row ( row ) [EOL] [EOL] if number is None : [EOL] continue [EOL] [EOL] if [string] not in index_import : [EOL] Index . objects . update_or_create ( year = year , month = month , defaults = { [string] : number } ) [EOL] [EOL] else : [EOL] try : [EOL] index = Index . objects . get ( year = year , month = month ) [EOL] except Index . DoesNotExist : [EOL] [comment] [EOL] index = Index . objects . create ( year = year , month = month , number = [number] ) [EOL] [EOL] LegacyIndex . objects . update_or_create ( index = index , defaults = { index_import [ [string] ] : number } ) [EOL] [EOL] self . stdout . write ( [string] . format ( year , month , number ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , IO [EOL] import typing [EOL] import pathlib [EOL] import argparse [EOL] import os [EOL] import tempfile [EOL] from pathlib import Path [EOL] from shutil import copyfile [EOL] [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from leasing . models import CollectionLetterTemplate [EOL] [EOL] TEMPLATE_NAMES = { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , } [EOL] [docstring] [EOL] [EOL] [EOL] class IsReadableDirectory ( argparse . Action ) : [EOL] def __call__ ( self , parser , namespace , values , option_string = None ) : [EOL] if not os . path . isdir ( values ) : [EOL] raise argparse . ArgumentTypeError ( [string] . format ( values ) ) [EOL] [EOL] if os . access ( values , os . R_OK ) : [EOL] setattr ( namespace , self . dest , values ) [EOL] else : [EOL] raise argparse . ArgumentTypeError ( [string] . format ( values ) ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , action = IsReadableDirectory , help = [string] , ) [EOL] [EOL] def check_is_directory_writable ( self , directory ) : [EOL] if not os . path . isdir ( directory ) : [EOL] self . stdout . write ( [string] . format ( directory ) ) [EOL] return False [EOL] [EOL] try : [EOL] fp = tempfile . TemporaryFile ( dir = directory ) [EOL] fp . close ( ) [EOL] return True [EOL] except PermissionError : [EOL] self . stdout . write ( [string] . format ( directory ) ) [EOL] return False [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] destination_path = ( Path ( settings . MEDIA_ROOT ) / CollectionLetterTemplate . file . field . upload_to ) [EOL] if not self . check_is_directory_writable ( destination_path ) : [EOL] raise CommandError ( [string] . format ( destination_path ) ) [EOL] [EOL] source_path = Path ( options [ [string] ] ) [EOL] [EOL] from auditlog . registry import auditlog [EOL] [EOL] auditlog . unregister ( CollectionLetterTemplate ) [EOL] [EOL] for name , template in TEMPLATE_NAMES . items ( ) : [EOL] self . stdout . write ( name ) [EOL] [EOL] source_filename = source_path / template [ [string] ] [EOL] if not source_filename . exists ( ) : [EOL] self . stdout . write ( [string] . format ( template [ [string] ] , source_path ) ) [EOL] continue [EOL] [EOL] try : [EOL] clt = CollectionLetterTemplate . objects . get ( name = name ) [EOL] self . stdout . write ( [string] ) [EOL] destination_filename = clt . file . name [EOL] except CollectionLetterTemplate . DoesNotExist : [EOL] self . stdout . write ( [string] ) [EOL] destination_filename = ( Path ( CollectionLetterTemplate . file . field . upload_to ) / template [ [string] ] ) [EOL] CollectionLetterTemplate . objects . create ( name = name , file = str ( destination_filename ) ) [EOL] [EOL] destination_path = Path ( settings . MEDIA_ROOT ) / destination_filename [EOL] [EOL] self . stdout . write ( [string] . format ( source_filename , destination_path ) ) [EOL] [EOL] copyfile ( source_filename , destination_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 $typing.IO[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0
from typing import Optional , Match , Dict , Any , List [EOL] import decimal [EOL] import typing [EOL] import xml [EOL] import datetime [EOL] import requests [EOL] import datetime [EOL] import re [EOL] from decimal import Decimal [EOL] from xml . etree import ElementTree [EOL] [EOL] import requests [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from leasing . models . debt_collection import InterestRate [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] from auditlog . registry import auditlog [EOL] [EOL] auditlog . unregister ( InterestRate ) [EOL] [EOL] r = requests . get ( [string] , params = { [string] : [string] , [string] : [string] , } , ) [EOL] [EOL] if r . status_code != [number] : [EOL] raise CommandError ( [string] ) [EOL] [EOL] root = ElementTree . fromstring ( r . content ) [EOL] [EOL] for year_element in root . findall ( [string] ) : [EOL] current_year = int ( year_element . attrib . get ( [string] ) ) [EOL] [EOL] for period_element in year_element . findall ( [string] ) : [EOL] current_period_string = period_element . attrib . get ( [string] ) [EOL] period_match = re . match ( [string] , current_period_string , ) [EOL] [EOL] if not period_match : [EOL] continue [EOL] [EOL] start_date = datetime . date ( year = current_year , month = int ( period_match . group ( [string] ) ) , day = int ( period_match . group ( [string] ) ) , ) [EOL] end_date = datetime . date ( year = current_year , month = int ( period_match . group ( [string] ) ) , day = int ( period_match . group ( [string] ) ) , ) [EOL] [EOL] currency_elements = period_element . findall ( [string] ) [EOL] [EOL] rates = { } [EOL] for currency_element in currency_elements : [EOL] interest_type_string = currency_element . attrib . get ( [string] ) [EOL] if interest_type_string not in [ [string] , [string] , ] : [EOL] continue [EOL] [EOL] cell = currency_element . find ( [string] ) [EOL] interest_value_string = cell . attrib . get ( [string] , [string] ) [EOL] if not interest_value_string : [EOL] continue [EOL] [EOL] interest_value = Decimal ( cell . attrib . get ( [string] , [string] ) ) [EOL] [EOL] rates [ interest_type_string ] = interest_value [EOL] [EOL] self . stdout . write ( [string] . format ( start_date , end_date , interest_type_string , interest_value ) ) [EOL] [EOL] InterestRate . objects . update_or_create ( start_date = start_date , end_date = end_date , reference_rate = rates [ [string] ] , penalty_rate = rates [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[xml.etree.ElementTree.Element]$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Optional[builtins.str]$ 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 $typing.Optional[builtins.str]$ 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 $datetime.date$ 0 $datetime.date$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] from django . contrib . auth . models import Group , Permission [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEFAULT_REPORT_PERMS = { [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] ] , } [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] ctype , created = ContentType . objects . get_or_create ( app_label = [string] , model = [string] ) [EOL] for report in DEFAULT_REPORT_PERMS : [EOL] [EOL] codename = [string] . format ( report ) [EOL] name = [string] . format ( report ) [EOL] permission , created = Permission . objects . get_or_create ( codename = codename , name = name , content_type = ctype ) [EOL] [EOL] groups = DEFAULT_REPORT_PERMS . get ( report ) [EOL] for group_id in groups : [EOL] group = Group . objects . get ( pk = group_id ) [EOL] group . permissions . add ( permission ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import pytest [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from leasing import validators [EOL] [EOL] [EOL] def test_business_id_validator ( ) : [EOL] validators . validate_business_id ( [string] ) [EOL] [EOL] with pytest . raises ( ValidationError ) : [EOL] validators . validate_business_id ( [string] ) [EOL] [EOL] with pytest . raises ( ValidationError ) : [EOL] validators . validate_business_id ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , Union , Set , List , Tuple [EOL] import typing [EOL] import decimal [EOL] import leasing [EOL] import datetime [EOL] from datetime import date [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from dateutil . relativedelta import relativedelta [EOL] from dateutil . rrule import MONTHLY , rrule [EOL] [EOL] from leasing . calculation . result import CalculationAmount , CalculationResult [EOL] from leasing . enums import ( ContactType , DueDatesType , PeriodType , RentCycle , RentType , TenantContactType , ) [EOL] from leasing . models import RentDueDate [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_invoices_no_rents ( django_db_setup , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] assert lease . calculate_invoices ( { } ) == [ ] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_invoices_one_tenant ( django_db_setup , lease_factory , tenant_factory , contact_factory , tenant_contact_factory , tenant_rent_share_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] billing_period = ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] calculation_result = CalculationResult ( * billing_period ) [EOL] calculation_result . add_amount ( CalculationAmount ( item = contract_rent , amount = Decimal ( [number] ) , date_range_start = billing_period [ [number] ] , date_range_end = billing_period [ [number] ] , ) ) [EOL] [EOL] period_rents = { billing_period : { [string] : date ( year = [number] , month = [number] , day = [number] ) , [string] : calculation_result , [string] : False , } } [EOL] [EOL] invoice_data = lease . calculate_invoices ( period_rents ) [EOL] [EOL] assert len ( invoice_data ) == [number] [EOL] assert len ( invoice_data [ [number] ] ) == [number] [EOL] assert invoice_data [ [number] ] [ [number] ] [ [string] ] == Decimal ( [number] ) [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] assert invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] == tenant1 [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_invoices_two_tenants ( django_db_setup , lease_factory , tenant_factory , contact_factory , tenant_contact_factory , tenant_rent_share_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] billing_period = ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] calculation_result = CalculationResult ( * billing_period ) [EOL] calculation_result . add_amount ( CalculationAmount ( item = contract_rent , amount = Decimal ( [number] ) , date_range_start = billing_period [ [number] ] , date_range_end = billing_period [ [number] ] , ) ) [EOL] [EOL] period_rents = { billing_period : { [string] : date ( year = [number] , month = [number] , day = [number] ) , [string] : calculation_result , [string] : False , } } [EOL] [EOL] invoice_data = lease . calculate_invoices ( period_rents ) [EOL] [EOL] assert len ( invoice_data ) == [number] [EOL] assert len ( invoice_data [ [number] ] ) == [number] [EOL] assert invoice_data [ [number] ] [ [number] ] [ [string] ] == Decimal ( [number] ) [EOL] assert invoice_data [ [number] ] [ [number] ] [ [string] ] == Decimal ( [number] ) [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] tenants = { invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] , invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] , } [EOL] assert tenants == { tenant1 , tenant2 } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_invoices_three_tenants ( django_db_setup , assert_count_equal , lease_factory , tenant_factory , contact_factory , tenant_contact_factory , tenant_rent_share_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant3 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant3 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant3 , contact = contact3 , start_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] billing_period = ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] calculation_result = CalculationResult ( * billing_period ) [EOL] calculation_result . add_amount ( CalculationAmount ( item = contract_rent , amount = Decimal ( [number] ) , date_range_start = billing_period [ [number] ] , date_range_end = billing_period [ [number] ] , ) ) [EOL] [EOL] period_rents = { billing_period : { [string] : date ( year = [number] , month = [number] , day = [number] ) , [string] : calculation_result , [string] : False , } } [EOL] [EOL] invoice_data = lease . calculate_invoices ( period_rents ) [EOL] [EOL] assert len ( invoice_data ) == [number] [EOL] assert len ( invoice_data [ [number] ] ) == [number] [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] assert len ( invoice_data [ [number] ] [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] amounts = [ invoice_data [ [number] ] [ [number] ] [ [string] ] , invoice_data [ [number] ] [ [number] ] [ [string] ] , invoice_data [ [number] ] [ [number] ] [ [string] ] , ] [EOL] [EOL] assert_count_equal ( amounts , [ Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) ] ) [EOL] [EOL] tenants = { invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] , invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] , invoice_data [ [number] ] [ [number] ] [ [string] ] [ [number] ] [ [string] ] , } [EOL] [EOL] assert tenants == { tenant1 , tenant2 , tenant3 } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_invoices_seasonal ( lease_test_data , tenant_rent_share_factory , rent_factory , contract_rent_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] tenant1 = lease_test_data [ [string] ] [ [number] ] [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] rent1 = rent_factory ( lease = lease , type = RentType . FIXED , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , start_date = None , end_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] contract_rent_factory ( rent = rent1 , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] contract_rent_factory ( rent = rent1 , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent2 = rent_factory ( lease = lease , type = RentType . FIXED , due_dates_type = DueDatesType . CUSTOM , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = None , seasonal_start_day = [number] , seasonal_start_month = [number] , seasonal_end_day = [number] , seasonal_end_month = [number] , ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , month = [number] , day = [number] ) ) [EOL] [EOL] contract_rent_factory ( rent = rent2 , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH ) [EOL] [EOL] rent3 = rent_factory ( lease = lease , type = RentType . FIXED , due_dates_type = DueDatesType . CUSTOM , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = None , seasonal_start_day = [number] , seasonal_start_month = [number] , seasonal_end_day = [number] , seasonal_end_month = [number] , ) [EOL] rent3 . due_dates . add ( RentDueDate . objects . create ( rent = rent3 , month = [number] , day = [number] ) ) [EOL] [EOL] contract_rent_factory ( rent = rent3 , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH ) [EOL] [EOL] rent4 = rent_factory ( lease = lease , type = RentType . FIXED , due_dates_type = DueDatesType . CUSTOM , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = None , seasonal_start_day = [number] , seasonal_start_month = [number] , seasonal_end_day = [number] , seasonal_end_month = [number] , ) [EOL] rent4 . due_dates . add ( RentDueDate . objects . create ( rent = rent4 , month = [number] , day = [number] ) ) [EOL] rent4 . due_dates . add ( RentDueDate . objects . create ( rent = rent4 , month = [number] , day = [number] ) ) [EOL] rent4 . due_dates . add ( RentDueDate . objects . create ( rent = rent4 , month = [number] , day = [number] ) ) [EOL] [EOL] contract_rent_factory ( rent = rent4 , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH ) [EOL] [EOL] first_day_of_year = date ( year = [number] , month = [number] , day = [number] ) [EOL] first_day_of_every_month = [ dt . date ( ) for dt in rrule ( freq = MONTHLY , count = [number] , dtstart = first_day_of_year ) ] [EOL] [EOL] total_invoice_amount = Decimal ( [number] ) [EOL] total_invoice_row_amount = Decimal ( [number] ) [EOL] [EOL] for first_day in first_day_of_every_month : [EOL] last_day = first_day + relativedelta ( day = [number] ) [EOL] [EOL] rents = lease . determine_payable_rents_and_periods ( first_day , last_day , dry_run = True ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( rents ) : [EOL] for invoice_data in period_invoice_data : [EOL] total_invoice_amount += invoice_data [ [string] ] [EOL] total_invoice_row_amount += sum ( [ row [ [string] ] for row in invoice_data [ [string] ] ] ) [EOL] [EOL] assert total_invoice_amount == total_invoice_row_amount [EOL] assert total_invoice_amount == Decimal ( [number] ) [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from leasing . enums import ContactType [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_contact_business_id_validator ( contact_factory ) : [EOL] with pytest . raises ( ValidationError ) as e : [EOL] contact = contact_factory ( type = ContactType . BUSINESS , business_id = [string] ) [EOL] contact . clean_fields ( ) [EOL] assert [string] in e . value . message_dict [EOL] [EOL] with pytest . raises ( ValidationError ) as e : [EOL] contact = contact_factory ( type = ContactType . BUSINESS , business_id = [string] ) [EOL] contact . clean_fields ( ) [EOL] assert [string] in e . value . message_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . db . models . aggregates import Sum [EOL] [EOL] from leasing . enums import ( ContactType , DueDatesType , PeriodType , RentCycle , RentType , TenantContactType , ) [EOL] from leasing . models import Invoice , Lease , ReceivableType [EOL] from leasing . models . invoice import InvoiceRow [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_manager_get_by_identifier_invalid ( django_db_setup , lease_test_data ) : [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] Lease . objects . get_by_identifier ( [string] ) [EOL] [EOL] assert str ( e . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_manager_get_by_identifier_does_not_exist ( django_db_setup , lease_test_data ) : [EOL] with pytest . raises ( Lease . DoesNotExist ) as e : [EOL] Lease . objects . get_by_identifier ( [string] ) [EOL] [EOL] assert str ( e . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_manager_get_by_identifier_district_00 ( django_db_setup , lease_test_data ) : [EOL] assert Lease . objects . get_by_identifier ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_manager_get_by_identifier ( django_db_setup , lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] assert Lease . objects . get_by_identifier ( [string] ) == lease [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_manager_get_by_identifier_zero_padded_sequence ( django_db_setup , lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] assert Lease . objects . get_by_identifier ( [string] ) == lease [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_tenant_shares_for_period ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , assert_count_equal , ) : [EOL] [docstring] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] shares = lease . get_tenant_shares_for_period ( start_date , end_date ) [EOL] [EOL] assert len ( shares ) == [number] [EOL] assert_count_equal ( shares . keys ( ) , [ contact1 , contact2 ] ) [EOL] assert shares [ contact1 ] == { tenant1 : [ ( start_date , end_date ) ] } [EOL] assert shares [ contact2 ] == { tenant2 : [ ( start_date , end_date ) ] } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_tenant_shares_for_period_one_billing ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , assert_count_equal , ) : [EOL] [docstring] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant2 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] shares = lease . get_tenant_shares_for_period ( start_date , end_date ) [EOL] [EOL] assert len ( shares ) == [number] [EOL] assert_count_equal ( shares . keys ( ) , [ contact1 ] ) [EOL] assert shares [ contact1 ] == { tenant1 : [ ( start_date , end_date ) ] , tenant2 : [ ( start_date , end_date ) ] , } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_tenant_shares_for_period_change_tenant ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , assert_count_equal , ) : [EOL] [docstring] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant3 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant3 , contact = contact3 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] shares = lease . get_tenant_shares_for_period ( start_date , end_date ) [EOL] [EOL] assert len ( shares ) == [number] [EOL] assert_count_equal ( shares . keys ( ) , [ contact1 , contact2 , contact3 ] ) [EOL] assert shares [ contact1 ] == { tenant1 : [ ( start_date , end_date ) ] } [EOL] assert shares [ contact2 ] == { tenant2 : [ ( start_date , datetime . date ( year = [number] , month = [number] , day = [number] ) ) ] } [EOL] assert shares [ contact3 ] == { tenant3 : [ ( datetime . date ( year = [number] , month = [number] , day = [number] ) , end_date ) ] } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_tenant_shares_for_period_same_billing_contact_twice ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , assert_count_equal , ) : [EOL] [docstring] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] shares = lease . get_tenant_shares_for_period ( start_date , end_date ) [EOL] [EOL] assert len ( shares ) == [number] [EOL] assert_count_equal ( shares . keys ( ) , [ contact2 ] ) [EOL] [EOL] assert shares [ contact2 ] == { tenant1 : [ ( start_date , end_date ) ] } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_tenant_shares_for_period_same_contact_twice ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , assert_count_equal , ) : [EOL] [docstring] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact3 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] shares = lease . get_tenant_shares_for_period ( start_date , end_date ) [EOL] [EOL] assert len ( shares ) == [number] [EOL] assert_count_equal ( shares . keys ( ) , [ contact3 ] ) [EOL] [EOL] assert shares [ contact3 ] == { tenant1 : [ ( start_date , end_date ) ] } [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [ ] , [string] ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } ] , [string] ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } ] , [string] ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , [string] , ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } ] , [string] ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , [string] , ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , [string] , ) , ( [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , [string] , ) , ] , ) def test_calculate_invoices_invoice_note ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , tenant_rent_share_factory , rent_factory , contract_rent_factory , invoice_note_factory , notes , expected , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_MONTH , base_amount = [number] , base_amount_period = PeriodType . PER_MONTH , ) [EOL] [EOL] if notes : [EOL] for note in notes : [EOL] billing_period_start_date = datetime . datetime . strptime ( note [ [string] ] , [string] ) . date ( ) [EOL] billing_period_end_date = datetime . datetime . strptime ( note [ [string] ] , [string] ) . date ( ) [EOL] [EOL] invoice_note_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , notes = note [ [string] ] , ) [EOL] [EOL] period_rents = lease . determine_payable_rents_and_periods ( datetime . date ( year = [number] , month = [number] , day = [number] ) , datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] period_invoice_data = lease . calculate_invoices ( period_rents ) [EOL] [EOL] assert len ( period_invoice_data ) == [number] [EOL] assert len ( period_invoice_data [ [number] ] ) == [number] [EOL] [EOL] invoice_data = period_invoice_data [ [number] ] [ [number] ] [EOL] [EOL] assert invoice_data [ [string] ] == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_empty_empty ( django_db_setup , lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] [EOL] assert lease . is_empty ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_empty_one_field ( django_db_setup , lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] lease . start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] assert not lease . is_empty ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_empty_one_foreign ( django_db_setup , lease_factory , contact_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] [EOL] contact = contact_factory ( type = ContactType . OTHER , is_lessor = True ) [EOL] [EOL] lease . lessor = contact [EOL] [EOL] assert not lease . is_empty ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_empty_one_relation ( django_db_setup , lease_factory , decision_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] [EOL] decision_factory ( lease = lease ) [EOL] [EOL] assert not lease . is_empty ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_empty_one_manytomany ( django_db_setup , lease_factory , related_lease_factory ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] lease2 = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] ) [EOL] [EOL] related_lease_factory ( from_lease = lease , to_lease = lease2 ) [EOL] [EOL] assert not lease . is_empty ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_add_rounded_amount ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , invoice_factory , invoice_row_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] assert lease . calculate_rent_amount_for_year ( [number] ) . get_total_amount ( ) == Decimal ( [number] ) [EOL] [EOL] year_start = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] year_end = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] period_rents = lease . determine_payable_rents_and_periods ( year_start , year_end ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( period_rents ) : [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = datetime . date . today ( ) [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] invoice_sum = lease . invoices . aggregate ( sum = Sum ( [string] ) ) [ [string] ] [EOL] [EOL] assert invoice_sum == lease . calculate_rent_amount_for_year ( [number] ) . get_total_amount ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_add_rounded_amount_previous_invoices ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , invoice_factory , invoice_row_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] assert lease . calculate_rent_amount_for_year ( [number] ) . get_total_amount ( ) == Decimal ( [number] ) [EOL] [EOL] year_start = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] end_of_june = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] start_of_july = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] year_end = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] [comment] [EOL] period_rents = lease . determine_payable_rents_and_periods ( year_start , end_of_june ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( period_rents ) : [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = datetime . date . today ( ) [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] [comment] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact1 , billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , generated = True , ) [EOL] [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type2 , billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , amount = Decimal ( [number] ) , ) [EOL] [EOL] [comment] [EOL] period_rents = lease . determine_payable_rents_and_periods ( start_of_july , year_end ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( period_rents ) : [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = datetime . date . today ( ) [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] invoice_sum = InvoiceRow . objects . filter ( invoice__in = Invoice . objects . filter ( lease = lease ) , receivable_type_id = [number] ) . aggregate ( sum = Sum ( [string] ) ) [ [string] ] [EOL] [EOL] assert invoice_sum == lease . calculate_rent_amount_for_year ( [number] ) . get_total_amount ( ) [EOL]	
from typing import Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . db . models . aggregates import Sum [EOL] [EOL] from leasing . enums import ( ContactType , DueDatesType , PeriodType , RentCycle , RentType , TenantContactType , ) [EOL] from leasing . models import Invoice [EOL] from leasing . models . invoice import InvoiceRow [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_add_rounded_amount ( django_db_setup , lease_factory , contact_factory , tenant_factory , tenant_contact_factory , tenant_rent_share_factory , rent_factory , contract_rent_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = [number] , period = PeriodType . PER_YEAR , base_amount = [number] , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_amount_for_year = lease . calculate_rent_amount_for_year ( [number] ) . get_total_amount ( ) [EOL] assert rent_amount_for_year == Decimal ( [number] ) [EOL] [EOL] year_start = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] year_end = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] period_rents = lease . determine_payable_rents_and_periods ( year_start , year_end ) [EOL] [EOL] for period_invoice_data in lease . calculate_invoices ( period_rents ) : [EOL] for invoice_data in period_invoice_data : [EOL] invoice_data . pop ( [string] ) [EOL] invoice_data . pop ( [string] ) [EOL] invoice_row_data = invoice_data . pop ( [string] ) [EOL] [EOL] invoice_data [ [string] ] = True [EOL] invoice_data [ [string] ] = datetime . date . today ( ) [EOL] invoice_data [ [string] ] = invoice_data [ [string] ] [EOL] [EOL] invoice = Invoice . objects . create ( ** invoice_data ) [EOL] [EOL] for invoice_row_datum in invoice_row_data : [EOL] invoice_row_datum [ [string] ] = invoice [EOL] InvoiceRow . objects . create ( ** invoice_row_datum ) [EOL] [EOL] invoice_sum = lease . invoices . aggregate ( sum = Sum ( [string] ) ) [ [string] ] [EOL] [EOL] assert invoice_sum == rent_amount_for_year [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] import datetime [EOL] import inspect [EOL] from datetime import date [EOL] [EOL] import pytest [EOL] [EOL] from leasing . models . utils import ( combine_ranges , fix_amount_for_overlap , get_billing_periods_for_year , get_next_business_day , get_range_overlap_and_remainder , group_items_in_period_by_date_range , is_business_day , is_date_on_first_quarter , normalize_property_identifier , split_date_range , subtract_range_from_range , subtract_ranges_from_ranges , ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ] ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ] ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ None , [ ] ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ None , [ ] ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , None , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , None , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , None , [ None , [ ] ] , ) , ] , ) def test_get_overlap ( s1 , e1 , s2 , e2 , expected ) : [EOL] assert get_range_overlap_and_remainder ( s1 , e1 , s2 , e2 ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ] ) , ( [number] , [number] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [number] , [number] , [ ] ) , ] , ) def test_get_billing_periods ( year , periods_per_year , expected ) : [EOL] assert get_billing_periods_for_year ( year , periods_per_year ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [number] , ) ] , ) def test_fix_amount_for_overlap ( amount , overlap , remainder , expected ) : [EOL] assert fix_amount_for_overlap ( amount , overlap , remainder ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ] , ) def test_subtract_range_from_range ( range1 , subtract_range , expected ) : [EOL] assert subtract_range_from_range ( range1 , subtract_range ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ] , ) def test_subtract_ranges_from_ranges ( ranges , subtract_ranges , expected ) : [EOL] assert subtract_ranges_from_ranges ( ranges , subtract_ranges ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ] , ) def test_combine_ranges ( ranges , expected ) : [EOL] assert combine_ranges ( ranges ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ] ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ( ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , [number] , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) , ] , ) def test_split_date_range ( date_range , count , expected ) : [EOL] assert split_date_range ( date_range , count ) == expected [EOL] [EOL] [EOL] def test_split_date_range_too_big_count ( ) : [EOL] date_range = ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) [EOL] count = [number] [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] split_date_range ( date_range , count ) [EOL] [EOL] assert ( str ( e . value ) == [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , ValueError ) , ( [string] , ValueError ) , ( date , ValueError ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , True ) , ] , ) def test_is_business_day ( the_day , expected ) : [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] is_business_day ( the_day ) [EOL] else : [EOL] assert is_business_day ( the_day ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , ValueError ) , ( [string] , ValueError ) , ( date , ValueError ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) , ] , ) def test_get_next_business_day ( the_day , expected ) : [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] get_next_business_day ( the_day ) [EOL] else : [EOL] assert get_next_business_day ( the_day ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , ValueError ) , ( [string] , ValueError ) , ( date , ValueError ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , False ) , ( date ( [number] , [number] , [number] ) , True ) , ( date ( [number] , [number] , [number] ) , False ) , ] , ) def test_is_date_on_first_quarter ( the_day , expected ) : [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] is_date_on_first_quarter ( the_day ) [EOL] else : [EOL] assert is_date_on_first_quarter ( the_day ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( None , { } ) , ( [ { [string] : [number] , [string] : ( None , None ) } ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( None , None ) } ] } , ) , ( [ { [string] : [number] , [string] : ( None , date ( [number] , [number] , [number] ) ) } ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( None , date ( [number] , [number] , [number] ) ) } ] } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , None ) } ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , None ) } ] } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ ] , } , ) , ( [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , { ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } , ] , ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) : [ { [string] : [number] , [string] : ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) } ] , } , ) , ] , ) def test_group_items_in_period_by_date_range ( items , expected ) : [EOL] assert ( group_items_in_period_by_date_range ( items , date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) == expected ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( None , None ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_normalize_property_identifier ( identifier , expected ) : [EOL] assert normalize_property_identifier ( identifier ) == expected [EOL]	
from typing import Any [EOL] import typing [EOL] import leasing [EOL] import datetime [EOL] import inspect [EOL] from datetime import date [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] [EOL] from leasing . enums import ( DueDatesType , PeriodType , RentAdjustmentAmountType , RentAdjustmentType , RentCycle , RentType , ) [EOL] from leasing . models import Index , RentAdjustment , RentDueDate [EOL] from leasing . models . utils import DayMonth [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentType . INDEX , [number] , [ ] ) , ( RentType . INDEX , [number] , [ ] ) , ( RentType . INDEX , [number] , [ DayMonth ( day = [number] , month = [number] ) ] ) , ( RentType . INDEX , [number] , [ DayMonth ( day = [number] , month = [number] ) , DayMonth ( day = [number] , month = [number] ) ] ) , ( RentType . FIXED , [number] , [ ] ) , ( RentType . FIXED , [number] , [ ] ) , ( RentType . FIXED , [number] , [ DayMonth ( day = [number] , month = [number] ) ] ) , ( RentType . FIXED , [number] , [ DayMonth ( day = [number] , month = [number] ) , DayMonth ( day = [number] , month = [number] ) ] ) , ] , ) def test_fixed_get_due_dates_as_daymonths ( lease_test_data , rent_factory , rent_type , due_dates_per_year , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . type = rent_type [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] rent . save ( ) [EOL] [EOL] assert rent . get_due_dates_as_daymonths ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = [number] , day = [number] ) ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = [number] , day = [number] ) ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = [number] , day = [number] ) ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , ] , ) , ( DueDatesType . FIXED , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ date ( year = [number] , month = i , day = [number] ) for i in range ( [number] , [number] ) ] , ) , ] , ) def test_get_due_dates_for_period_fixed_middle ( lease_test_data , rent_factory , due_dates_type , due_dates_per_year , start_date , end_date , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . due_dates_type = due_dates_type [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] rent . save ( ) [EOL] [EOL] assert rent . get_due_dates_for_period ( start_date , end_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [number] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ] , ) def test_get_billing_period_from_due_date ( lease_test_data , rent_factory , due_dates_per_year , due_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] rent . save ( ) [EOL] [EOL] assert rent . get_billing_period_from_due_date ( due_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [ ] , None , None ) , ( [ ] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ( [ ( [number] , [number] ) , ( [number] , [number] ) ] , date ( year = [number] , month = [number] , day = [number] ) , None ) , ( [ ( [number] , [number] ) , ( [number] , [number] ) ] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ( [ ( [number] , [number] ) , ( [number] , [number] ) ] , date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ] , ) def test_get_billing_period_from_due_date_custom ( lease_test_data , rent_factory , rent_due_dates , due_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . due_dates_type = DueDatesType . CUSTOM [EOL] rent . save ( ) [EOL] [EOL] for rent_due_date in rent_due_dates : [EOL] rent . due_dates . add ( RentDueDate . objects . create ( rent = rent , day = rent_due_date [ [number] ] , month = rent_due_date [ [number] ] ) ) [EOL] [EOL] assert rent . get_billing_period_from_due_date ( due_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None ) , ( date ( year = [number] , month = [number] , day = [number] ) , None ) , ( date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ] , ) def test_get_billing_period_from_due_date_seasonal ( lease_test_data , rent_factory , due_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . seasonal_start_day = [number] [EOL] rent . seasonal_start_month = [number] [EOL] rent . seasonal_end_day = [number] [EOL] rent . seasonal_end_month = [number] [EOL] rent . due_dates_type = DueDatesType . CUSTOM [EOL] rent . save ( ) [EOL] [EOL] rent . due_dates . add ( RentDueDate . objects . create ( rent = rent , day = [number] , month = [number] ) ) [EOL] [EOL] assert rent . get_billing_period_from_due_date ( due_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_billing_period_from_due_date_seasonal_fixed_due_date ( lease_test_data , rent_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . seasonal_start_day = [number] [EOL] rent . seasonal_start_month = [number] [EOL] rent . seasonal_end_day = [number] [EOL] rent . seasonal_end_month = [number] [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = [number] [EOL] rent . save ( ) [EOL] [EOL] assert ( rent . get_billing_period_from_due_date ( date ( year = [number] , month = [number] , day = [number] ) ) is None ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None ) , ( date ( year = [number] , month = [number] , day = [number] ) , None ) , ( date ( year = [number] , month = [number] , day = [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ) , ] , ) def test_get_billing_period_from_due_date_seasonal_two_rents ( lease_test_data , rent_factory , due_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . seasonal_start_day = [number] [EOL] rent . seasonal_start_month = [number] [EOL] rent . seasonal_end_day = [number] [EOL] rent . seasonal_end_month = [number] [EOL] rent . due_dates_type = DueDatesType . CUSTOM [EOL] rent . save ( ) [EOL] [EOL] rent . due_dates . add ( RentDueDate . objects . create ( rent = rent , day = [number] , month = [number] ) ) [EOL] [EOL] rent2 = rent_factory ( lease = lease ) [EOL] rent2 . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent2 . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent2 . seasonal_start_day = [number] [EOL] rent2 . seasonal_start_month = [number] [EOL] rent2 . seasonal_end_day = [number] [EOL] rent2 . seasonal_end_month = [number] [EOL] rent2 . due_dates_type = DueDatesType . CUSTOM [EOL] rent2 . save ( ) [EOL] [EOL] rent2 . due_dates . add ( RentDueDate . objects . create ( rent = rent2 , day = [number] , month = [number] ) ) [EOL] [EOL] assert rent2 . get_billing_period_from_due_date ( due_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , None ) , ( date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ] , ) def test_index_get_latest_for_date ( the_date , expected ) : [EOL] index = Index . objects . get_latest_for_date ( the_date ) [EOL] [EOL] if expected is None : [EOL] assert index is None [EOL] else : [EOL] assert index . month is None [EOL] assert index . number == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [number] ) , ( [number] , None ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] , ) def test_index_get_latest_for_year ( year , expected ) : [EOL] index = Index . objects . get_latest_for_year ( year ) [EOL] [EOL] if expected is None : [EOL] assert index is None [EOL] else : [EOL] assert index . month is None [EOL] assert index . number == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_amount_for_date_range_empty ( lease_test_data , rent_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [number] ) ) , ( Decimal ( - [number] ) , PeriodType . PER_YEAR , Decimal ( [number] ) ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [string] ) ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [number] ) ) , ( Decimal ( [number] ) , PeriodType . PER_MONTH , Decimal ( [number] ) ) , ( Decimal ( [number] ) , PeriodType . PER_MONTH , Decimal ( [string] ) ) , ] , ) def test_get_amount_for_date_range_simple_contract ( lease_test_data , rent_factory , contract_rent_factory , amount , period , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = amount , period = period , base_amount = amount , base_amount_period = period , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ] , ) def test_split_range_by_cycle ( lease_test_data , rent_factory , range_start , range_end , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] rent . split_range_by_cycle ( range_start , range_end ) [EOL] else : [EOL] assert rent . split_range_by_cycle ( range_start , range_end ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ] , ) def test_split_range_by_cycle_span_year_boundary ( lease_test_data , rent_factory , cycle , range_start , range_end , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = cycle , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] rent . split_range_by_cycle ( range_start , range_end ) [EOL] else : [EOL] assert rent . split_range_by_cycle ( range_start , range_end ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) ] , ) , ( [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ( [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , ] , ) , ] , ) def test_split_ranges_by_cycle ( lease_test_data , rent_factory , ranges , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] if inspect . isclass ( expected ) and issubclass ( expected , Exception ) : [EOL] with pytest . raises ( expected ) : [EOL] rent . split_ranges_by_cycle ( ranges ) [EOL] else : [EOL] assert rent . split_ranges_by_cycle ( ranges ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ] , ) def test_get_rent_year_for_date ( lease_test_data , rent_factory , rent_cycle , the_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , cycle = rent_cycle , ) [EOL] [EOL] assert rent . get_rent_year_for_date ( the_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , [number] ) , ] , ) def test_get_index_for_date ( lease_test_data , rent_factory , rent_cycle , the_date , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , cycle = rent_cycle , ) [EOL] [EOL] assert rent . get_index_for_date ( the_date ) . number == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , [number] ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , [number] ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . JANUARY_TO_DECEMBER , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , False , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , [number] ) , False ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , [number] ) , False ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , False , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , False , ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True ) , ( RentCycle . APRIL_TO_MARCH , date ( year = [number] , month = [number] , day = [number] ) , ( [number] , None ) , True ) , ] , ) def test_is_correct_index_for_date ( lease_test_data , rent_factory , rent_cycle , the_date , index_year_month , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] index = Index ( year = index_year_month [ [number] ] , month = index_year_month [ [number] ] , number = [number] ) [EOL] [EOL] rent = rent_factory ( lease = lease , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , cycle = rent_cycle , ) [EOL] [EOL] assert rent . is_correct_index_for_date ( index , the_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [number] ) ) , ( Decimal ( - [number] ) , PeriodType . PER_YEAR , Decimal ( [number] ) ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [string] ) ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , Decimal ( [string] ) ) , ( Decimal ( [number] ) , PeriodType . PER_MONTH , Decimal ( [number] ) ) , ] , ) def test_get_amount_for_date_range_simple_contract_april_to_march ( lease_test_data , rent_factory , contract_rent_factory , amount , period , expected ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . APRIL_TO_MARCH , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = amount , period = period , base_amount = amount , base_amount_period = period , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentAdjustmentType . DISCOUNT , None , None , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , - [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , - [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , None , None , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , - [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , - [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , Decimal ( [number] ) , ) , ] , ) def test_get_amount_for_date_range_contract_with_adjustment ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory , adjustment_type , adjustment_start_date , adjustment_end_date , adjustment_amount_type , adjustment_amount , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = contract_rent . intended_use , type = adjustment_type , start_date = adjustment_start_date , end_date = adjustment_end_date , amount_type = adjustment_amount_type , full_amount = adjustment_amount , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_amount_for_date_range_contract_with_adjustment_different_intended_use ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use_id = [number] , type = RentAdjustmentType . DISCOUNT , start_date = None , end_date = None , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = [number] , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( - [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [string] ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , pytest . approx ( Decimal ( [string] ) ) , ) , ] , ) def test_get_amount_for_date_range_contract_with_fixed_initial ( lease_test_data , rent_factory , contract_rent_factory , fixed_initial_year_rent_factory , fixed_initial_amount , fixed_initial_start_date , fixed_initial_end_date , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] fixed_initial_year_rent_factory ( rent = rent , intended_use = contract_rent . intended_use , amount = fixed_initial_amount , start_date = fixed_initial_start_date , end_date = fixed_initial_end_date , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] [string] , [ ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . INCREASE , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [string] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [string] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , pytest . approx ( Decimal ( [string] ) ) , ) , ( RentAdjustmentType . DISCOUNT , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , [number] , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , pytest . approx ( Decimal ( [string] ) ) , ) , ] , ) def test_get_amount_for_date_range_contract_with_adjustment_and_fixed_initial ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory , adjustment_type , adjustment_start_date , adjustment_end_date , adjustment_amount_type , adjustment_amount , fixed_initial_year_rent_factory , fixed_initial_amount , fixed_initial_start_date , fixed_initial_end_date , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = contract_rent . intended_use , type = adjustment_type , start_date = adjustment_start_date , end_date = adjustment_end_date , amount_type = adjustment_amount_type , full_amount = adjustment_amount , ) [EOL] [EOL] fixed_initial_year_rent_factory ( rent = rent , intended_use = contract_rent . intended_use , amount = fixed_initial_amount , start_date = fixed_initial_start_date , end_date = fixed_initial_end_date , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ( Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , Decimal ( [number] ) , ) , ] , ) def test_get_amount_for_date_range_two_contracts ( lease_test_data , rent_factory , contract_rent_factory , amount1 , period1 , start_date1 , end_date1 , amount2 , period2 , start_date2 , end_date2 , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = amount1 , period = period1 , base_amount = amount1 , base_amount_period = period1 , start_date = start_date1 , end_date = end_date1 , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = amount2 , period = period2 , base_amount = amount2 , base_amount_period = period2 , start_date = start_date2 , end_date = end_date2 , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] [string] [string] , [ ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [number] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , None , None , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . INCREASE , [number] , None , None , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . INCREASE , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . PERCENT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ( [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [number] , Decimal ( [number] ) , PeriodType . PER_YEAR , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . INCREASE , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentAmountType . AMOUNT_PER_YEAR , Decimal ( [number] ) , Decimal ( [string] ) , ) , ] , ) def test_get_amount_for_date_range_two_contracts_with_adjustment ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory , intended_use1 , amount1 , period1 , start_date1 , end_date1 , intended_use2 , amount2 , period2 , start_date2 , end_date2 , adjustment_type , adjustment_intended_use , adjustment_start_date , adjustment_end_date , adjustment_amount_type , adjustment_amount , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = intended_use1 , amount = amount1 , period = period1 , base_amount = amount1 , base_amount_period = period1 , start_date = start_date1 , end_date = end_date1 , ) [EOL] [EOL] contract_rent_factory ( rent = rent , intended_use_id = intended_use2 , amount = amount2 , period = period2 , base_amount = amount2 , base_amount_period = period2 , start_date = start_date2 , end_date = end_date2 , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use_id = adjustment_intended_use , type = adjustment_type , start_date = adjustment_start_date , end_date = adjustment_end_date , amount_type = adjustment_amount_type , full_amount = adjustment_amount , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( False , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( False , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( False , RentAdjustmentType . INCREASE , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( False , RentAdjustmentType . INCREASE , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( True , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( True , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( True , RentAdjustmentType . INCREASE , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ( True , RentAdjustmentType . INCREASE , [number] , Decimal ( [number] ) , Decimal ( [number] ) ) , ] , ) def test_adjustment_type_amount_total ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory , dry_run , adjustment_type , adjustment_amount , expected_rent , expected_amount_left , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_adjustment = rent_adjustment_factory ( rent = rent , intended_use = contract_rent . intended_use , type = adjustment_type , start_date = None , end_date = None , amount_type = RentAdjustmentAmountType . AMOUNT_TOTAL , full_amount = adjustment_amount , amount_left = adjustment_amount , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end , dry_run = dry_run ) [EOL] assert calculation_result . get_total_amount ( ) == expected_rent [EOL] [EOL] rent_adjustment = RentAdjustment . objects . get ( pk = rent_adjustment . id ) [EOL] assert rent_adjustment . amount_left == expected_amount_left [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ] , ) def test_get_amount_for_date_range_adjustments_two_in_series ( lease_test_data , rent_factory , contract_rent_factory , rent_adjustment_factory , adjustment_start_date1 , adjustment_end_date1 , adjustment_type1 , adjustment_amount1 , adjustment_start_date2 , adjustment_end_date2 , adjustment_type2 , adjustment_amount2 , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = contract_rent . intended_use , type = adjustment_type1 , start_date = adjustment_start_date1 , end_date = adjustment_end_date1 , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = adjustment_amount1 , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = contract_rent . intended_use , type = adjustment_type2 , start_date = adjustment_start_date2 , end_date = adjustment_end_date2 , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = adjustment_amount2 , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) , ] , ) def test_get_amount_for_date_range_adjustments_two_in_series_fixed_initial_year_rent ( lease_test_data , rent_factory , contract_rent_factory , fixed_initial_year_rent_factory , rent_adjustment_factory , adjustment_start_date1 , adjustment_end_date1 , adjustment_type1 , adjustment_amount1 , adjustment_start_date2 , adjustment_end_date2 , adjustment_type2 , adjustment_amount2 , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] fixed_initial_year_rent = fixed_initial_year_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = fixed_initial_year_rent . intended_use , type = adjustment_type1 , start_date = adjustment_start_date1 , end_date = adjustment_end_date1 , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = adjustment_amount1 , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = fixed_initial_year_rent . intended_use , type = adjustment_type2 , start_date = adjustment_start_date2 , end_date = adjustment_end_date2 , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = adjustment_amount2 , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . get_amount_for_date_range ( range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , RentAdjustmentType . DISCOUNT , [number] , Decimal ( [number] ) , ) ] , ) def test_fixed_initial_year_rent_amount_for_date_range ( lease_test_data , rent_factory , fixed_initial_year_rent_factory , rent_adjustment_factory , adjustment_start_date1 , adjustment_end_date1 , adjustment_type1 , adjustment_amount1 , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] fixed_initial_year_rent = fixed_initial_year_rent_factory ( rent = rent , intended_use_id = [number] , start_date = date ( year = [number] , month = [number] , day = [number] ) , end_date = date ( year = [number] , month = [number] , day = [number] ) , amount = Decimal ( [number] ) , ) [EOL] [EOL] rent_adjustment_factory ( rent = rent , intended_use = fixed_initial_year_rent . intended_use , type = adjustment_type1 , start_date = adjustment_start_date1 , end_date = adjustment_end_date1 , amount_type = RentAdjustmentAmountType . PERCENT_PER_YEAR , full_amount = adjustment_amount1 , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . fixed_initial_year_rent_amount_for_date_range ( fixed_initial_year_rent . intended_use , range_start , range_end ) [EOL] assert calculation_result . get_total_amount ( ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , None , None , None , True ) , ( None , None , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( None , None , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , True , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , False , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , False , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , False , ) , ] , ) def test_is_active_on_period ( lease_test_data , rent_factory , rent_start_date , rent_end_date , period_start_date , period_end_date , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , start_date = rent_start_date , end_date = rent_end_date , ) [EOL] [EOL] assert rent . is_active_on_period ( period_start_date , period_end_date ) == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ] , ) , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) , [ ( date ( [number] , [number] , [number] ) , date ( [number] , [number] , [number] ) ) ] , ) , ] , ) def test_fixed_initial_year_rent_for_date_range_remaining_ranges ( lease_test_data , rent_factory , contract_rent_factory , fixed_initial_year_rent_factory , start_date1 , end_date1 , start_date2 , end_date2 , expected , ) : [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] contract_rent = contract_rent_factory ( rent = rent , intended_use_id = [number] , amount = Decimal ( [number] ) , period = PeriodType . PER_YEAR , base_amount = Decimal ( [number] ) , base_amount_period = PeriodType . PER_YEAR , ) [EOL] [EOL] fixed_initial_year_rent_factory ( rent = rent , intended_use = contract_rent . intended_use , amount = Decimal ( [number] ) , start_date = start_date1 , end_date = end_date1 , ) [EOL] [EOL] fixed_initial_year_rent_factory ( rent = rent , intended_use = contract_rent . intended_use , amount = Decimal ( [number] ) , start_date = start_date2 , end_date = end_date2 , ) [EOL] [EOL] range_start = date ( year = [number] , month = [number] , day = [number] ) [EOL] range_end = date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] calculation_result = rent . fixed_initial_year_rent_amount_for_date_range ( contract_rent . intended_use , range_start , range_end ) [EOL] assert calculation_result . remaining_ranges == expected [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , True , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . JANUARY_TO_DECEMBER , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , True , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , True , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , False , ) , ( RentCycle . APRIL_TO_MARCH , [number] , ( date ( year = [number] , month = [number] , day = [number] ) , date ( year = [number] , month = [number] , day = [number] ) ) , True , ) , ] , ) def test_is_the_last_billing_period ( lease_test_data , rent_factory , rent_cycle , due_dates_per_year , billing_period , expected , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease ) [EOL] rent . cycle = rent_cycle [EOL] rent . start_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . end_date = date ( year = [number] , month = [number] , day = [number] ) [EOL] rent . due_dates_type = DueDatesType . FIXED [EOL] rent . due_dates_per_year = due_dates_per_year [EOL] rent . save ( ) [EOL] [EOL] assert rent . is_the_last_billing_period ( billing_period ) == expected [EOL]	
from typing import List , Dict , Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] import json [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . enums import ContactType , InvoiceState , InvoiceType [EOL] from leasing . models import Invoice , ReceivableType [EOL] from leasing . models . invoice import InvoiceSet [EOL] from leasing . models . tenant import TenantContactType [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_full ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] credit_note = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note . lease == lease [EOL] assert credit_note . recipient == contact [EOL] assert credit_note . rows . all ( ) . count ( ) == [number] [EOL] assert credit_note . billing_period_start_date == billing_period_start_date [EOL] assert credit_note . billing_period_end_date == billing_period_end_date [EOL] assert credit_note . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row = credit_note . rows . first ( ) [EOL] [EOL] assert credit_note_row . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] assert credit_note_row . receivable_type == receivable_type [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . REFUNDED [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_fails ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( type = InvoiceType . CREDIT_NOTE , lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] invoice . create_credit_invoice ( ) [EOL] [EOL] assert ( str ( e . value ) == [string] ) [EOL] [EOL] with pytest . raises ( Invoice . DoesNotExist ) : [EOL] Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_full_two_rows ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( ) [EOL] [EOL] credit_note = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note . lease == lease [EOL] assert credit_note . recipient == contact [EOL] assert credit_note . rows . all ( ) . count ( ) == [number] [EOL] assert credit_note . billing_period_start_date == billing_period_start_date [EOL] assert credit_note . billing_period_end_date == billing_period_end_date [EOL] assert credit_note . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row = credit_note . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] [EOL] assert credit_note_row . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] assert credit_note_row . receivable_type == receivable_type [EOL] [EOL] credit_note_row2 = credit_note . rows . filter ( receivable_type = receivable_type2 ) . first ( ) [EOL] [EOL] assert credit_note_row2 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] assert credit_note_row2 . receivable_type == receivable_type2 [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . REFUNDED [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_one_row_full ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( row_ids = [ invoice_row2 . id ] ) [EOL] [EOL] credit_note = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note . lease == lease [EOL] assert credit_note . recipient == contact [EOL] assert credit_note . rows . all ( ) . count ( ) == [number] [EOL] assert credit_note . billing_period_start_date == billing_period_start_date [EOL] assert credit_note . billing_period_end_date == billing_period_end_date [EOL] assert credit_note . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row = credit_note . rows . first ( ) [EOL] [EOL] assert credit_note_row . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] assert credit_note_row . receivable_type == receivable_type2 [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_one_row_partly ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( row_ids = [ invoice_row2 . id ] , amount = [number] ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [string] ) [EOL] [EOL] credit_note = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note . lease == lease [EOL] assert credit_note . recipient == contact [EOL] assert credit_note . rows . all ( ) . count ( ) == [number] [EOL] assert credit_note . billing_period_start_date == billing_period_start_date [EOL] assert credit_note . billing_period_end_date == billing_period_end_date [EOL] assert credit_note . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row = credit_note . rows . first ( ) [EOL] [EOL] assert credit_note_row . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] assert credit_note_row . receivable_type == receivable_type2 [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_one_row_too_much ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] invoice . create_credit_invoice ( row_ids = [ invoice_row2 . id ] , amount = [number] ) [EOL] [EOL] assert str ( e . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_full_one_receivable_type ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( receivable_type = receivable_type2 ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [string] ) [EOL] [EOL] credit_note = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note . lease == lease [EOL] assert credit_note . recipient == contact [EOL] assert credit_note . rows . all ( ) . count ( ) == [number] [EOL] assert credit_note . billing_period_start_date == billing_period_start_date [EOL] assert credit_note . billing_period_end_date == billing_period_end_date [EOL] assert credit_note . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row = credit_note . rows . first ( ) [EOL] [EOL] assert credit_note_row . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] assert credit_note_row . receivable_type == receivable_type2 [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoiceset_fails ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice_set = invoice_set_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice = invoice_factory ( type = InvoiceType . CREDIT_NOTE , lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice2 = invoice_factory ( type = InvoiceType . CREDIT_NOTE , lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] invoice_set . create_credit_invoiceset ( ) [EOL] [EOL] assert ( str ( e . value ) == [string] ) [EOL] [EOL] assert InvoiceSet . objects . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoiceset_full ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice_set = invoice_set_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [string] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_set . create_credit_invoiceset ( ) [EOL] [EOL] assert InvoiceSet . objects . count ( ) == [number] [EOL] [EOL] credit_note_invoiceset = InvoiceSet . objects . first ( ) [EOL] assert credit_note_invoiceset . lease == lease [EOL] assert credit_note_invoiceset . billing_period_start_date == billing_period_start_date [EOL] assert credit_note_invoiceset . billing_period_end_date == billing_period_end_date [EOL] [EOL] credit_note1 = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note1 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note1 . lease == lease [EOL] assert credit_note1 . recipient == contact [EOL] assert credit_note1 . rows . count ( ) == [number] [EOL] assert credit_note1 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note1 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note1 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row1 = credit_note1 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row1 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] credit_note_row2 = credit_note1 . rows . filter ( receivable_type = receivable_type2 ) . first ( ) [EOL] assert credit_note_row2 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] credit_note2 = Invoice . objects . get ( credited_invoice = invoice2 ) [EOL] [EOL] assert credit_note2 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note2 . lease == lease [EOL] assert credit_note2 . recipient == contact [EOL] assert credit_note2 . rows . count ( ) == [number] [EOL] assert credit_note2 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note2 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note2 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row3 = credit_note2 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row3 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] credit_note_row4 = credit_note2 . rows . filter ( receivable_type = receivable_type2 ) . first ( ) [EOL] assert credit_note_row4 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . REFUNDED [EOL] assert Invoice . objects . get ( pk = invoice2 . id ) . state == InvoiceState . REFUNDED [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoiceset_receivable_type ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , tenant_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice_set = invoice_set_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_set . create_credit_invoiceset ( receivable_type = receivable_type ) [EOL] [EOL] assert InvoiceSet . objects . count ( ) == [number] [EOL] [EOL] credit_note_invoiceset = InvoiceSet . objects . first ( ) [EOL] assert credit_note_invoiceset . lease == lease [EOL] assert credit_note_invoiceset . billing_period_start_date == billing_period_start_date [EOL] assert credit_note_invoiceset . billing_period_end_date == billing_period_end_date [EOL] [EOL] credit_note1 = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note1 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note1 . lease == lease [EOL] assert credit_note1 . recipient == contact [EOL] assert credit_note1 . rows . count ( ) == [number] [EOL] assert credit_note1 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note1 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note1 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row1 = credit_note1 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row1 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] credit_note2 = Invoice . objects . get ( credited_invoice = invoice2 ) [EOL] [EOL] assert credit_note2 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note2 . lease == lease [EOL] assert credit_note2 . recipient == contact2 [EOL] assert credit_note2 . rows . count ( ) == [number] [EOL] assert credit_note2 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note2 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note2 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row2 = credit_note2 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row2 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoiceset_receivable_type_partly ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , tenant_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant3 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice_set = invoice_set_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant1 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant3 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , tenant = tenant3 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_set . create_credit_invoiceset_for_amount ( receivable_type = receivable_type , amount = [number] ) [EOL] [EOL] assert InvoiceSet . objects . count ( ) == [number] [EOL] [EOL] credit_note_invoiceset = InvoiceSet . objects . first ( ) [EOL] assert credit_note_invoiceset . lease == lease [EOL] assert credit_note_invoiceset . billing_period_start_date == billing_period_start_date [EOL] assert credit_note_invoiceset . billing_period_end_date == billing_period_end_date [EOL] [EOL] credit_note1 = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note1 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note1 . lease == lease [EOL] assert credit_note1 . recipient == contact [EOL] assert credit_note1 . rows . count ( ) == [number] [EOL] assert credit_note1 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note1 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note1 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row1 = credit_note1 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row1 . amount == pytest . approx ( Decimal ( [number] ) ) [EOL] [EOL] credit_note2 = Invoice . objects . get ( credited_invoice = invoice2 ) [EOL] [EOL] assert credit_note2 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note2 . lease == lease [EOL] assert credit_note2 . recipient == contact2 [EOL] assert credit_note2 . rows . count ( ) == [number] [EOL] assert credit_note2 . rows . filter ( tenant = tenant2 ) . count ( ) == [number] [EOL] assert credit_note2 . rows . filter ( tenant = tenant3 ) . count ( ) == [number] [EOL] assert credit_note2 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note2 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note2 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row2 = credit_note2 . rows . filter ( tenant = tenant2 ) . first ( ) [EOL] assert credit_note_row2 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] credit_note_row3 = credit_note2 . rows . filter ( tenant = tenant3 ) . first ( ) [EOL] assert credit_note_row3 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoiceset_receivable_type_partly_no_tenants ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice_set = invoice_set_factory ( lease = lease , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] receivable_type2 = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , invoiceset = invoice_set , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type = receivable_type2 , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_set . create_credit_invoiceset_for_amount ( receivable_type = receivable_type , amount = [number] ) [EOL] [EOL] assert InvoiceSet . objects . count ( ) == [number] [EOL] [EOL] credit_note_invoiceset = InvoiceSet . objects . first ( ) [EOL] assert credit_note_invoiceset . lease == lease [EOL] assert credit_note_invoiceset . billing_period_start_date == billing_period_start_date [EOL] assert credit_note_invoiceset . billing_period_end_date == billing_period_end_date [EOL] [EOL] credit_note1 = Invoice . objects . get ( credited_invoice = invoice ) [EOL] [EOL] assert credit_note1 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note1 . lease == lease [EOL] assert credit_note1 . recipient == contact [EOL] assert credit_note1 . rows . count ( ) == [number] [EOL] assert credit_note1 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note1 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note1 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row1 = credit_note1 . rows . filter ( receivable_type = receivable_type ) . first ( ) [EOL] assert credit_note_row1 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] credit_note2 = Invoice . objects . get ( credited_invoice = invoice2 ) [EOL] [EOL] assert credit_note2 . type == InvoiceType . CREDIT_NOTE [EOL] assert credit_note2 . lease == lease [EOL] assert credit_note2 . recipient == contact2 [EOL] assert credit_note2 . rows . count ( ) == [number] [EOL] assert credit_note2 . rows . filter ( receivable_type = receivable_type ) . count ( ) == [number] [EOL] assert credit_note2 . billing_period_start_date == billing_period_start_date [EOL] assert credit_note2 . billing_period_end_date == billing_period_end_date [EOL] assert credit_note2 . billed_amount == Decimal ( [number] ) [EOL] [EOL] credit_note_row2 = credit_note2 . rows . first ( ) [EOL] assert credit_note_row2 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] credit_note_row3 = credit_note2 . rows . last ( ) [EOL] assert credit_note_row3 . amount == pytest . approx ( Decimal ( [string] ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_refunded_in_parts ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] credit_notes = Invoice . objects . filter ( credited_invoice = invoice ) [EOL] [EOL] assert credit_notes . count ( ) == [number] [EOL] [EOL] assert Invoice . objects . get ( pk = invoice . id ) . state == InvoiceState . REFUNDED [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_too_much ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] [EOL] assert str ( e . value ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_too_much_already_credited ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] with pytest . raises ( RuntimeError ) as e : [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] [EOL] assert ( str ( e . value ) == [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_credit_invoice_full_already_credited_partly ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . create_credit_invoice ( amount = [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] credit_note = invoice . create_credit_invoice ( ) [EOL] [EOL] assert credit_note . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_after_partial_payment ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_after_one_full_payment ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . PAID [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_after_multiple_payments_partial ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_after_multiple_payments_full ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . PAID [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_with_collection_charge ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = None , collection_charge = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_outstanding_amount_with_collection_charge_one_payment ( django_db_setup , lease_factory , contact_factory , invoice_factory , invoice_row_factory , invoice_payment_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = None , collection_charge = Decimal ( [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] receivable_type = ReceivableType . objects . get ( pk = [number] ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type = receivable_type , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , amount = Decimal ( [number] ) , ) [EOL] [EOL] invoice_payment_factory ( invoice = invoice , paid_amount = Decimal ( [number] ) , paid_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_calculate_penalty_amount ( django_db_setup , lease_factory , contact_factory , invoice_factory ) : [EOL] calculation_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] ) [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , due_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , recipient = contact , billing_period_start_date = billing_period_start_date , billing_period_end_date = billing_period_end_date , ) [EOL] [EOL] penalty_interest_data = invoice . calculate_penalty_interest ( calculation_date = calculation_date ) [EOL] [EOL] assert penalty_interest_data [ [string] ] == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] assert penalty_interest_data [ [string] ] == calculation_date [EOL] assert penalty_interest_data [ [string] ] . compare ( Decimal ( [string] ) ) == [number] [EOL] assert len ( penalty_interest_data [ [string] ] ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_same_recipient_and_tenants ( django_db_setup , invoices_test_data ) : [EOL] assert invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_same_recipient_and_tenants_dict ( django_db_setup , invoices_test_data ) : [EOL] invoice_keys = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] invoice2_dict = { } [EOL] for key in invoice_keys : [EOL] invoice2_dict [ key ] = getattr ( invoices_test_data [ [string] ] , key ) [EOL] [EOL] invoice2_dict [ [string] ] = [ ] [EOL] invoice_row_keys = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] for row in invoices_test_data [ [string] ] . rows . all ( ) : [EOL] invoice_row_dict = { } [EOL] for key in invoice_row_keys : [EOL] invoice_row_dict [ key ] = getattr ( row , key ) [EOL] [EOL] invoice2_dict [ [string] ] . append ( invoice_row_dict ) [EOL] [EOL] assert invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoice2_dict ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_same_recipient_and_tenants2 ( django_db_setup , invoices_test_data ) : [EOL] invoice_row = invoices_test_data [ [string] ] . rows . first ( ) [EOL] invoice_row . tenant = invoices_test_data [ [string] ] [EOL] invoice_row . save ( ) [EOL] [EOL] assert ( invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) is False ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_same_recipient_and_tenants3 ( django_db_setup , invoices_test_data , contact_factory ) : [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice1 = invoices_test_data [ [string] ] [EOL] invoice1 . recipient = contact3 [EOL] invoice1 . save ( ) [EOL] [EOL] assert ( invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) is False ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_same_recipient_and_tenants4 ( django_db_setup , invoices_test_data , contact_factory ) : [EOL] assert invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) [EOL] [EOL] invoices_test_data [ [string] ] . rows . all ( ) . delete ( ) [EOL] [EOL] assert ( invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) is False ) [EOL] [EOL] invoices_test_data [ [string] ] . rows . all ( ) . delete ( ) [EOL] [EOL] assert invoices_test_data [ [string] ] . is_same_recipient_and_tenants ( invoices_test_data [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice_zero_amount_is_set_to_status_paid ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] [comment] [EOL] data = { [string] : lease . id , [string] : tenant1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . PAID [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice_zero_row_sum_is_set_to_status_paid ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] [comment] [EOL] data = { [string] : lease . id , [string] : tenant1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } , { [string] : Decimal ( - [number] ) , [string] : [number] } , ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . PAID [EOL]	
from typing import List , Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . enums import ( DueDatesType , RentAdjustmentAmountType , RentAdjustmentType , RentCycle , RentType , ) [EOL] from leasing . models import Lease [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ] , ) def test_create_total_amount_adjustment ( django_db_setup , admin_client , lease_test_data , rent_factory , decision_factory , end_date , expected_status_code , expected_count , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] [EOL] data = { [string] : [ { [string] : rent . id , [string] : RentType . FIXED . value , [string] : [ { [string] : [string] , [string] : [number] , [string] : None , [string] : end_date , [string] : [number] , [string] : RentAdjustmentAmountType . AMOUNT_TOTAL . value , [string] : decision . id , } ] , } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == expected_status_code , [string] % ( response . status_code , response . data , ) [EOL] [EOL] lease = Lease . objects . get ( pk = lease . id ) [EOL] [EOL] assert len ( lease . rents . first ( ) . rent_adjustments . all ( ) ) == expected_count [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( None , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ] , ) def test_update_total_amount_adjustment ( django_db_setup , admin_client , lease_test_data , rent_factory , decision_factory , rent_adjustment_factory , end_date , expected_status_code , expected_count , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] rent = rent_factory ( lease = lease , type = RentType . FIXED , cycle = RentCycle . JANUARY_TO_DECEMBER , due_dates_type = DueDatesType . FIXED , due_dates_per_year = [number] , ) [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] [EOL] rent_adjustment = rent_adjustment_factory ( rent = rent , type = RentAdjustmentType . DISCOUNT , decision = decision , intended_use_id = [number] , start_date = None , end_date = None , full_amount = [number] , amount_type = RentAdjustmentAmountType . AMOUNT_TOTAL , ) [EOL] [EOL] data = { [string] : [ { [string] : rent . id , [string] : RentType . FIXED . value , [string] : [ { [string] : rent_adjustment . id , [string] : [string] , [string] : [number] , [string] : end_date , [string] : RentAdjustmentAmountType . AMOUNT_TOTAL . value , [string] : decision . id , } ] , } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == expected_status_code , [string] % ( response . status_code , response . data , ) [EOL] [EOL] lease = Lease . objects . get ( pk = lease . id ) [EOL] [EOL] assert len ( lease . rents . first ( ) . rent_adjustments . all ( ) ) == expected_count [EOL] assert lease . rents . first ( ) . rent_adjustments . first ( ) . end_date is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] import datetime [EOL] import json [EOL] [EOL] import pytest [EOL] from django . contrib . auth . models import Permission [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import Condition , Decision [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_decision_condition_cannot_change_fields ( django_db_setup , client , lease_test_data , user_factory , condition_factory , decision_factory , ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] condition = condition_factory ( decision = decision , type_id = [number] , description = [string] , supervision_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , supervised_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : [ { [string] : condition . id , [string] : [number] , [string] : [string] , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , } ] } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : decision . id } ) [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] condition = Condition . objects . get ( pk = condition . id ) [EOL] [EOL] assert condition . type_id == [number] [EOL] assert condition . description == [string] [EOL] assert condition . supervision_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] assert condition . supervised_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_decision_condition_can_change_some_fields ( django_db_setup , client , lease_test_data , user_factory , condition_factory , decision_factory , ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] condition = condition_factory ( decision = decision , type_id = [number] , description = [string] , supervision_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : [ { [string] : condition . id , [string] : [number] , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , } ] } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : decision . id } ) [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] condition = Condition . objects . get ( pk = condition . id ) [EOL] [EOL] assert condition . type_id == [number] [EOL] assert condition . supervision_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( ( [string] , [string] ) , [number] ) , ( ( [string] , [string] , [string] ) , [number] ) , ] , ) def test_patch_decision_add_decision ( django_db_setup , client , lease_test_data , user_factory , condition_factory , decision_factory , permission_names , expected_count , ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] condition = condition_factory ( decision = decision , type_id = [number] , description = [string] , supervision_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : [ { [string] : condition . id } , { [string] : [number] , [string] : [string] , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , } , ] } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : decision . id } ) [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] decision = Decision . objects . get ( pk = decision . id ) [EOL] [EOL] assert decision . conditions . count ( ) == expected_count [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( ( [string] , [string] ) , [number] ) , ( ( [string] , [string] , [string] , [string] , ) , [number] , ) , ] , ) def test_patch_decision_remove_decision ( django_db_setup , client , lease_test_data , user_factory , condition_factory , decision_factory , permission_names , expected_count , ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] decision = decision_factory ( lease = lease ) [EOL] condition = condition_factory ( decision = decision , type_id = [number] , description = [string] , supervision_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] condition_factory ( decision = decision , type_id = [number] , description = [string] , supervision_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : [ { [string] : condition . id } ] } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : decision . id } ) [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] decision = Decision . objects . get ( pk = decision . id ) [EOL] [EOL] assert decision . conditions . count ( ) == expected_count [EOL]	
from typing import Dict , Any [EOL] import typing [EOL] import datetime [EOL] import json [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] from leasing . enums import ContactType , InvoiceState , TenantContactType [EOL] from leasing . models import Invoice [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : contact1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . invoicing_date == timezone . now ( ) . date ( ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . OPEN [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_zero_sum_invoice_state_is_paid ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : contact1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } , { [string] : Decimal ( - [number] ) , [string] : [number] } , ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . invoicing_date == timezone . now ( ) . date ( ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . state == InvoiceState . PAID [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice_for_tenant ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : tenant1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . invoicing_date == timezone . now ( ) . date ( ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . recipient == contact1 [EOL] assert invoice . rows . first ( ) . tenant == tenant1 [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice_for_tenant_with_billing_contact ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . BILLING , tenant = tenant1 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : tenant1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . invoicing_date == timezone . now ( ) . date ( ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . recipient == contact2 [EOL] assert invoice . rows . first ( ) . tenant == tenant1 [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_invoice_tenant_not_in_lease ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] lease2 = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] tenant2 = tenant_factory ( lease = lease2 , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : tenant2 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_interest_invoice_fail ( django_db_setup , admin_client , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , is_invoicing_enabled = True , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : contact1 . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL]	
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . contrib . auth . models import Permission [EOL] from django . urls import reverse [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_anonymous_user_cannot_view_lease ( django_db_setup , client , lease_test_data ) : [EOL] url = reverse ( [string] , kwargs = { [string] : lease_test_data [ [string] ] . id } ) [EOL] [EOL] response = client . get ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert response . data [ [string] ] . code == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_user_without_permission_cant_view_lease ( django_db_setup , client , lease_test_data , user_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease_test_data [ [string] ] . id } ) [EOL] [EOL] response = client . get ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert response . data [ [string] ] . code == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_user_with_permission_can_view_lease ( django_db_setup , client , lease_test_data , user_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission = Permission . objects . get ( codename = [string] ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease_test_data [ [string] ] . id } ) [EOL] [EOL] response = client . get ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [ ] , [ ] ) , ( [ [string] ] , [ [string] ] ) , ( [ [string] , [string] ] , [ [string] , [string] ] ) , ( [ [string] ] , [ [string] ] ) , ( [ [string] , [string] ] , [ [string] , [string] ] ) , ( [ [string] , [string] ] , [ [string] , [string] ] ) , ] , ) def test_field_permission ( django_db_setup , client , lease_test_data , user_factory , field_permissions , expected_keys , ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] field_permissions . append ( [string] ) [EOL] [EOL] for field_permission in field_permissions : [EOL] permission = Permission . objects . get ( codename = field_permission ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] contact = lease_test_data [ [string] ] [ [number] ] . contact [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : contact . id } ) [EOL] [EOL] response = client . get ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert list ( response . data . keys ( ) ) == expected_keys [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] import json [EOL] [EOL] import pytest [EOL] import pytz [EOL] from django . contrib . auth . models import Permission [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import LeaseBasisOfRent [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lock_lease_basis_of_rent ( django_db_setup , client , lease_test_data , user_factory , lease_basis_of_rent_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_codenames = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for permission_codename in permission_codenames : [EOL] permission = Permission . objects . get ( codename = permission_codename ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] lease_basis_of_rent = lease_basis_of_rent_factory ( lease = lease , intended_use_id = [number] , area = [number] , area_unit = [string] , index_id = [number] ) [EOL] [EOL] lock_time = datetime . datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , tzinfo = pytz . timezone ( [string] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [ { [string] : lease_basis_of_rent . id , [string] : lock_time } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease_basis_of_rent = LeaseBasisOfRent . objects . get ( pk = lease_basis_of_rent . id ) [EOL] [EOL] assert lease_basis_of_rent . locked_at == lock_time [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cannot_change_locked_lease_basis_of_rent ( django_db_setup , client , lease_test_data , user_factory , lease_basis_of_rent_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_codenames = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for permission_codename in permission_codenames : [EOL] permission = Permission . objects . get ( codename = permission_codename ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] lock_time = datetime . datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , tzinfo = pytz . timezone ( [string] ) , ) [EOL] [EOL] lease_basis_of_rent = lease_basis_of_rent_factory ( lease = lease , intended_use_id = [number] , area = [number] , area_unit = [string] , index_id = [number] , locked_at = lock_time , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [ { [string] : lease_basis_of_rent . id , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease_basis_of_rent = LeaseBasisOfRent . objects . get ( pk = lease_basis_of_rent . id ) [EOL] [EOL] assert lease_basis_of_rent . intended_use_id == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cannot_unclock_locked_lease_basis_of_rent ( django_db_setup , client , lease_test_data , user_factory , lease_basis_of_rent_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_codenames = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] for permission_codename in permission_codenames : [EOL] permission = Permission . objects . get ( codename = permission_codename ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] lock_time = datetime . datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , tzinfo = pytz . timezone ( [string] ) , ) [EOL] [EOL] lease_basis_of_rent = lease_basis_of_rent_factory ( lease = lease , intended_use_id = [number] , area = [number] , area_unit = [string] , index_id = [number] , locked_at = lock_time , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [ { [string] : lease_basis_of_rent . id , [string] : None } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease_basis_of_rent = LeaseBasisOfRent . objects . get ( pk = lease_basis_of_rent . id ) [EOL] [EOL] assert lease_basis_of_rent . locked_at == lock_time [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_can_unclock_locked_lease_basis_of_rent ( django_db_setup , client , lease_test_data , user_factory , lease_basis_of_rent_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_codenames = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for permission_codename in permission_codenames : [EOL] permission = Permission . objects . get ( codename = permission_codename ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] lock_time = datetime . datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , tzinfo = pytz . timezone ( [string] ) , ) [EOL] [EOL] lease_basis_of_rent = lease_basis_of_rent_factory ( lease = lease , intended_use_id = [number] , area = [number] , area_unit = [string] , index_id = [number] , locked_at = lock_time , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [ { [string] : lease_basis_of_rent . id , [string] : None } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease_basis_of_rent = LeaseBasisOfRent . objects . get ( pk = lease_basis_of_rent . id ) [EOL] [EOL] assert lease_basis_of_rent . locked_at is None [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cannot_remove_locked_lease_basis_of_rent ( django_db_setup , client , lease_test_data , user_factory , lease_basis_of_rent_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_codenames = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for permission_codename in permission_codenames : [EOL] permission = Permission . objects . get ( codename = permission_codename ) [EOL] user . user_permissions . add ( permission ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] lock_time = datetime . datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , tzinfo = pytz . timezone ( [string] ) , ) [EOL] [EOL] lease_basis_of_rent_factory ( lease = lease , intended_use_id = [number] , area = [number] , area_unit = [string] , index_id = [number] , locked_at = lock_time , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [ ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] assert lease . basis_of_rents . count ( ) == [number] [EOL]	
from typing import Dict , Any [EOL] import typing [EOL] import io [EOL] import json [EOL] from io import BytesIO [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import ( InfillDevelopmentCompensation , InfillDevelopmentCompensationLease , ) [EOL] from leasing . serializers . infill_development_compensation import ( InfillDevelopmentCompensationAttachmentSerializer , ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_upload_attachment ( django_db_setup , admin_client , lease_test_data , user_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] user = user_factory ( username = [string] ) [EOL] [EOL] idc = InfillDevelopmentCompensation . objects . create ( user = user ) [EOL] idcl = InfillDevelopmentCompensationLease . objects . create ( lease = lease , infill_development_compensation = idc ) [EOL] [EOL] assert idcl . attachments . count ( ) == [number] [EOL] [EOL] data = { [string] : idcl . id } [EOL] [EOL] url = reverse ( [string] ) [EOL] [EOL] dummy_file = BytesIO ( [string] ) [EOL] dummy_file . name = [string] [EOL] [EOL] response = admin_client . post ( url , data = { [string] : json . dumps ( data , cls = DjangoJSONEncoder ) , [string] : dummy_file } ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] assert idcl . attachments . count ( ) == [number] [EOL] assert idcl . attachments . first ( ) . uploader == response . wsgi_request . user [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_download_attachment ( django_db_setup , admin_client , client , lease_test_data , user_factory ) : [EOL] lease = lease_test_data [ [string] ] [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] idc = InfillDevelopmentCompensation . objects . create ( user = user ) [EOL] idcl = InfillDevelopmentCompensationLease . objects . create ( lease = lease , infill_development_compensation = idc ) [EOL] [EOL] assert idcl . attachments . count ( ) == [number] [EOL] [EOL] data = { [string] : idcl . id } [EOL] [EOL] url = reverse ( [string] ) [EOL] [EOL] dummy_file = BytesIO ( [string] ) [EOL] dummy_file . name = [string] [EOL] [EOL] response = admin_client . post ( url , data = { [string] : json . dumps ( data , cls = DjangoJSONEncoder ) , [string] : dummy_file } ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert idcl . attachments . count ( ) == [number] [EOL] [EOL] attachment = idcl . attachments . first ( ) [EOL] attachment_serializer = InfillDevelopmentCompensationAttachmentSerializer ( attachment ) [EOL] [EOL] url = attachment_serializer . get_file_url ( attachment ) [EOL] [EOL] [comment] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert response . data [ [string] ] . code == [string] [EOL] [EOL] [comment] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert response . data [ [string] ] . code == [string] [EOL] [EOL] [comment] [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert response . get ( [string] ) . startswith ( [string] ) [EOL] assert response . content == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Any [EOL] import typing [EOL] import json [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . db . models import Sum [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] from leasing . enums import ContactType , InvoiceType [EOL] from leasing . models import Invoice [EOL] from leasing . models . invoice import InvoiceRow , InvoiceSet [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_invoice_credit_rounding ( django_db_setup , assert_count_equal , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , tenant_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , sent_to_sap_at = timezone . now ( ) , ) [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] tenant = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] invoice_row_factory ( invoice = invoice , tenant = tenant , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : [number] , [string] : [string] } [EOL] [EOL] url = reverse ( [string] ) + [string] . format ( invoice . id ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] credit_note = Invoice . objects . get ( type = InvoiceType . CREDIT_NOTE ) [EOL] [EOL] assert credit_note . total_amount == Decimal ( [number] ) [EOL] assert InvoiceRow . objects . filter ( invoice = credit_note ) . aggregate ( sum = Sum ( [string] ) ) [ [string] ] == Decimal ( [number] ) [EOL] assert_count_equal ( list ( InvoiceRow . objects . filter ( invoice = credit_note ) . values_list ( [string] , flat = True ) ) , [ Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) ] , ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_invoice_set_credit_rounding ( django_db_setup , assert_count_equal , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , invoice_set_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] invoiceset = invoice_set_factory ( lease = lease ) [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] contact = contact_factory ( first_name = [string] . format ( i ) , last_name = [string] . format ( i ) , type = ContactType . PERSON , ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , invoiceset = invoiceset , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : [number] , [string] : [string] } [EOL] [EOL] url = reverse ( [string] ) + [string] . format ( invoiceset . id ) [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] credit_invoice_set = InvoiceSet . objects . exclude ( id = invoiceset . id ) . first ( ) [EOL] [EOL] assert ( Invoice . objects . filter ( invoiceset = credit_invoice_set , type = InvoiceType . CREDIT_NOTE ) . count ( ) == [number] ) [EOL] assert Invoice . objects . filter ( invoiceset = credit_invoice_set , type = InvoiceType . CREDIT_NOTE ) . aggregate ( sum = Sum ( [string] ) ) [ [string] ] == Decimal ( [number] ) [EOL] assert InvoiceRow . objects . filter ( invoice__invoiceset = credit_invoice_set ) . aggregate ( sum = Sum ( [string] ) ) [ [string] ] == Decimal ( [number] ) [EOL] assert_count_equal ( list ( InvoiceRow . objects . filter ( invoice__invoiceset = credit_invoice_set ) . values_list ( [string] , flat = True ) ) , [ Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . contrib . auth . models import Permission [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import Lease [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_lease ( django_db_setup , admin_client , contact_factory , lease_data_dict_with_contacts ) : [EOL] url = reverse ( [string] ) [EOL] [EOL] response = admin_client . post ( url , data = json . dumps ( lease_data_dict_with_contacts , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . identifier is not None [EOL] assert lease . identifier . type == lease . type [EOL] assert lease . identifier . municipality == lease . municipality [EOL] assert lease . identifier . district == lease . district [EOL] assert lease . identifier . sequence == [number] [EOL] [EOL] assert lease . tenants . count ( ) == [number] [EOL] [EOL] t1 = lease . tenants . filter ( reference = [string] ) . first ( ) [EOL] t2 = lease . tenants . filter ( reference = [string] ) . first ( ) [EOL] assert t1 . tenantcontact_set . all ( ) . count ( ) == [number] [EOL] assert t2 . tenantcontact_set . all ( ) . count ( ) == [number] [EOL] [EOL] assert lease . lease_areas . count ( ) == [number] [EOL] assert lease . lease_areas . first ( ) . plots . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_lease_relate_to_with_permission ( django_db_setup , client , lease_test_data , user_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] data = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : lease_test_data [ [string] ] . id , [string] : [string] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert len ( response . data [ [string] ] [ [string] ] ) == [number] [EOL] assert lease_test_data [ [string] ] . related_leases . count ( ) == [number] [EOL] assert lease_test_data [ [string] ] . related_leases . first ( ) . id == lease . id [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_lease_relate_to_without_permission ( django_db_setup , client , lease_test_data , user_factory ) : [EOL] user = user_factory ( username = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] data = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : lease_test_data [ [string] ] . id , [string] : [string] , } [EOL] [EOL] url = reverse ( [string] ) [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] assert [string] not in response . data [EOL] assert lease_test_data [ [string] ] . related_leases . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_lease_with_basis_of_rents ( django_db_setup , admin_client , contact_factory , lease_data_dict_with_contacts ) : [EOL] url = reverse ( [string] ) [EOL] lease_data_dict_with_contacts [ [string] ] = [ { [string] : [number] , [string] : [string] , [string] : [string] } ] [EOL] response = admin_client . post ( url , data = json . dumps ( lease_data_dict_with_contacts , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] def test_create_lease_with_basis_of_rents_fail_without_intended_use ( django_db_setup , admin_client , contact_factory , lease_data_dict_with_contacts ) : [EOL] url = reverse ( [string] ) [EOL] lease_data_dict_with_contacts [ [string] ] = [ { [string] : [string] , [string] : [string] } ] [EOL] response = admin_client . post ( url , data = json . dumps ( lease_data_dict_with_contacts , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] def test_create_lease_with_basis_of_rents_fail_without_area ( django_db_setup , admin_client , contact_factory , lease_data_dict_with_contacts ) : [EOL] url = reverse ( [string] ) [EOL] lease_data_dict_with_contacts [ [string] ] = [ { [string] : [number] , [string] : [string] } ] [EOL] response = admin_client . post ( url , data = json . dumps ( lease_data_dict_with_contacts , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] def test_create_lease_with_basis_of_rents_fail_without_area_unit ( django_db_setup , admin_client , contact_factory , lease_data_dict_with_contacts ) : [EOL] url = reverse ( [string] ) [EOL] lease_data_dict_with_contacts [ [string] ] = [ { [string] : [number] , [string] : [string] } ] [EOL] response = admin_client . post ( url , data = json . dumps ( lease_data_dict_with_contacts , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import Lease [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [string] , False , [number] ) , ( None , False , [number] ) , ( - [number] , False , [number] ) , ( [number] , False , [number] ) , ( [number] , False , [number] ) , ( [number] , False , [number] ) , ( True , True , [number] ) , ( False , False , [number] ) , ] , ) def test_set_invoicing_state ( django_db_setup , admin_client , lease_test_data , value , expected_value , expected_code ) : [EOL] lease = lease_test_data [ [string] ] [EOL] lease . is_rent_info_complete = True [EOL] lease . save ( ) [EOL] [EOL] assert lease . is_invoicing_enabled is False [EOL] [EOL] data = { [string] : value } [EOL] [EOL] url = reverse ( [string] ) + [string] . format ( lease . id ) [EOL] [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == expected_code , [string] % ( response . status_code , response . data , ) [EOL] [EOL] lease = Lease . objects . get ( pk = lease . id ) [EOL] [EOL] assert lease . is_invoicing_enabled is expected_value [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , [ ( [string] , False , [number] ) , ( None , False , [number] ) , ( - [number] , False , [number] ) , ( [number] , False , [number] ) , ( [number] , False , [number] ) , ( [number] , False , [number] ) , ( True , True , [number] ) , ( False , False , [number] ) , ] , ) def test_set_rent_info_completion_state ( django_db_setup , admin_client , lease_test_data , value , expected_value , expected_code ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] assert lease . is_rent_info_complete is False [EOL] [EOL] data = { [string] : value } [EOL] [EOL] url = reverse ( [string] ) + [string] . format ( lease . id ) [EOL] [EOL] response = admin_client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == expected_code , [string] % ( response . status_code , response . data , ) [EOL] [EOL] lease = Lease . objects . get ( pk = lease . id ) [EOL] [EOL] assert lease . is_rent_info_complete is expected_value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import Lease [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_lease_intended_use_note ( django_db_setup , admin_client , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] data = { [string] : [string] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . intended_use_note == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_remove_tenant ( django_db_setup , admin_client , lease_test_data , assert_count_equal ) : [EOL] lease = lease_test_data [ [string] ] [EOL] tenants = lease_test_data [ [string] ] [EOL] [EOL] assert lease . tenants . count ( ) == [number] [EOL] [EOL] assert_count_equal ( list ( lease . tenants . all ( ) ) , tenants ) [EOL] [EOL] data = { [string] : [ { [string] : tenants [ [number] ] . id , [string] : tenants [ [number] ] . share_numerator , [string] : tenants [ [number] ] . share_denominator , } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . tenants . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_lease_area_addresses ( django_db_setup , admin_client , lease_test_data , assert_count_equal ) : [EOL] lease = lease_test_data [ [string] ] [EOL] lease_area = lease . lease_areas . first ( ) [EOL] [EOL] data = { [string] : [ { [string] : lease_area . id , [string] : lease_area . type . value , [string] : lease_area . identifier , [string] : lease_area . area , [string] : lease_area . section_area , [string] : lease_area . location . value , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . lease_areas . count ( ) == [number] [EOL] assert lease . lease_areas . first ( ) . addresses . count ( ) == [number] [EOL] [EOL] data = { [string] : [ { [string] : lease_area . id , [string] : lease_area . type . value , [string] : lease_area . identifier , [string] : lease_area . area , [string] : lease_area . section_area , [string] : lease_area . location . value , [string] : None , } ] } [EOL] [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . lease_areas . count ( ) == [number] [EOL] assert lease . lease_areas . first ( ) . addresses . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_lease_is_invoicing_enabled_not_possible ( django_db_setup , admin_client , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] assert lease . is_invoicing_enabled is False [EOL] [EOL] data = { [string] : True } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . is_invoicing_enabled is False [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_lease_is_rent_info_complete_not_possible ( django_db_setup , admin_client , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] assert lease . is_rent_info_complete is False [EOL] [EOL] data = { [string] : True } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] lease = Lease . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert lease . is_rent_info_complete is False [EOL] [EOL] [EOL] def test_patch_lease_basis_of_rents ( django_db_setup , admin_client , contact_factory , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] data = { [string] : [ { [string] : [number] , [string] : [string] , [string] : [string] } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] def test_patch_lease_basis_of_rents_without_intended_use ( django_db_setup , admin_client , contact_factory , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] data = { [string] : [ { [string] : [string] , [string] : [string] } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] def test_patch_lease_basis_of_rents_predefined_area_unit ( django_db_setup , admin_client , contact_factory , lease_test_data ) : [EOL] lease = lease_test_data [ [string] ] [EOL] data = { [string] : [ { [string] : [number] , [string] : [string] , [string] : [string] } ] } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : lease . id } ) [EOL] [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] data [ [string] ] = [ { [string] : response . data [ [string] ] [ [number] ] [ [string] ] , [string] : [number] , [string] : [string] , } ] [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL]	
from typing import Optional , List , Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . contrib . auth . models import Permission [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . models import UiData [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_own_uidata ( django_db_setup , client , user_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] uidata = UiData . objects . get ( user = user ) [EOL] assert uidata . key == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cant_create_others_uidata ( django_db_setup , client , user_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] ) [EOL] [EOL] user2 = user_factory ( username = [string] , email = [string] ) [EOL] [EOL] data = { [string] : user2 . id , [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_can_create_global_uidata ( django_db_setup , client , user_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] ) [EOL] [EOL] data = { [string] : None , [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] uidata = UiData . objects . get ( user = None ) [EOL] assert uidata . key == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cant_create_global_uidata ( django_db_setup , client , user_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] ) [EOL] [EOL] data = { [string] : None , [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert UiData . objects . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_can_edit_own_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] ui_data = ui_data_factory ( user = user , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] uidata = UiData . objects . get ( id = ui_data . id ) [EOL] assert uidata . key == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cant_edit_others_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] user2 = user_factory ( username = [string] , email = [string] ) [EOL] [EOL] ui_data = ui_data_factory ( user = user2 , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_can_edit_global_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] , [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] ui_data = ui_data_factory ( user = None , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] uidata = UiData . objects . get ( id = ui_data . id ) [EOL] assert uidata . key == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cant_edit_global_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] ui_data = ui_data_factory ( user = None , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] response = client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_delete_own_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] ui_data = ui_data_factory ( user = user , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] response = client . delete ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert UiData . objects . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_cant_delete_others_uidata ( django_db_setup , client , user_factory , ui_data_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] user2 = user_factory ( username = [string] , email = [string] ) [EOL] [EOL] ui_data = ui_data_factory ( user = user2 , key = [string] , value = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : ui_data . id } ) [EOL] response = client . delete ( url ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert UiData . objects . count ( ) == [number] [EOL]	
from typing import List , Dict , Any [EOL] import typing [EOL] import json [EOL] [EOL] import pytest [EOL] from django . contrib . auth . models import Permission [EOL] from django . core import mail [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] [EOL] from leasing . enums import EmailLogType [EOL] from leasing . models import EmailLog [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_send_email ( django_db_setup , client , lease_test_data , user_factory ) : [EOL] user = user_factory ( username = [string] , email = [string] ) [EOL] user . set_password ( [string] ) [EOL] user . save ( ) [EOL] [EOL] user2 = user_factory ( username = [string] , email = [string] ) [EOL] [comment] [EOL] user3 = user_factory ( username = [string] ) [EOL] [EOL] permission_names = [ [string] ] [EOL] [EOL] for permission_name in permission_names : [EOL] user . user_permissions . add ( Permission . objects . get ( codename = permission_name ) ) [EOL] [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] data = { [string] : [string] , [string] : lease . id , [string] : [ user2 . id , user3 . id ] , [string] : [string] , } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] ) [EOL] response = client . post ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] assert len ( mail . outbox ) == [number] [EOL] assert EmailLog . objects . count ( ) == [number] [EOL] [EOL] email_log = EmailLog . objects . first ( ) [EOL] [EOL] assert email_log . content_object == lease [EOL] assert email_log . type == EmailLogType . CONSTRUCTABILITY [EOL] assert email_log . user == user [EOL] assert email_log . text == [string] [EOL] assert email_log . recipients . count ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import leasing [EOL] import datetime [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] [EOL] from leasing . enums import ContactType , TenantContactType [EOL] from leasing . serializers . invoice import CreateChargeSerializer [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_charge_one_tenant_one_row ( django_db_setup , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] serializer = CreateChargeSerializer ( data = data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] assert lease . invoices . count ( ) == [number] [EOL] [EOL] invoice = lease . invoices . first ( ) [EOL] [EOL] assert invoice . recipient == contact1 [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] assert invoice . rows . count ( ) == [number] [EOL] [EOL] row = invoice . rows . first ( ) [EOL] [EOL] assert row . tenant == tenant1 [EOL] assert row . amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_charge_one_tenant_two_rows ( django_db_setup , assert_count_equal , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } , { [string] : Decimal ( [number] ) , [string] : [number] } , ] , } [EOL] [EOL] serializer = CreateChargeSerializer ( data = data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] assert lease . invoices . count ( ) == [number] [EOL] [EOL] invoice = lease . invoices . first ( ) [EOL] [EOL] assert invoice . recipient == contact1 [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] assert invoice . rows . count ( ) == [number] [EOL] [EOL] row_amounts = [ r . amount for r in invoice . rows . all ( ) ] [EOL] assert_count_equal ( row_amounts , [ Decimal ( [number] ) , Decimal ( [number] ) ] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_charge_three_tenants_one_row ( django_db_setup , assert_count_equal , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant3 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant3 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant3 , contact = contact3 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } ] , } [EOL] [EOL] serializer = CreateChargeSerializer ( data = data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] assert lease . invoices . count ( ) == [number] [EOL] [EOL] total_sum = sum ( [ i . billed_amount for i in lease . invoices . all ( ) ] ) [EOL] assert total_sum == Decimal ( [number] ) [EOL] [EOL] billed_amounts = [ i . billed_amount for i in lease . invoices . all ( ) ] [EOL] assert_count_equal ( billed_amounts , [ Decimal ( [string] ) , Decimal ( [string] ) , Decimal ( [string] ) ] ) [EOL] [EOL] total_sums = [ i . total_amount for i in lease . invoices . all ( ) ] [EOL] assert_count_equal ( total_sums , [ Decimal ( [number] ) , Decimal ( [number] ) , Decimal ( [number] ) ] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_create_charge_three_tenants_two_rows ( django_db_setup , assert_count_equal , lease_factory , tenant_factory , tenant_rent_share_factory , contact_factory , tenant_contact_factory , ) : [EOL] lease = lease_factory ( type_id = [number] , municipality_id = [number] , district_id = [number] , notice_period_id = [number] , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant1 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant1 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact1 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant1 , contact = contact1 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant2 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant2 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact2 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant2 , contact = contact2 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] tenant3 = tenant_factory ( lease = lease , share_numerator = [number] , share_denominator = [number] ) [EOL] tenant_rent_share_factory ( tenant = tenant3 , intended_use_id = [number] , share_numerator = [number] , share_denominator = [number] ) [EOL] contact3 = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] tenant_contact_factory ( type = TenantContactType . TENANT , tenant = tenant3 , contact = contact3 , start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , ) [EOL] [EOL] data = { [string] : lease . id , [string] : [string] , [string] : [ { [string] : Decimal ( [number] ) , [string] : [number] } , { [string] : Decimal ( [number] ) , [string] : [number] } , ] , } [EOL] [EOL] serializer = CreateChargeSerializer ( data = data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] assert lease . invoices . count ( ) == [number] [EOL] [EOL] total_sum = sum ( [ i . billed_amount for i in lease . invoices . all ( ) ] ) [EOL] assert total_sum == Decimal ( [number] ) [EOL] [EOL] total_sums = [ i . total_amount for i in lease . invoices . all ( ) ] [EOL] assert_count_equal ( total_sums , [ Decimal ( [number] ) , Decimal ( [number] ) , Decimal ( [number] ) ] ) [EOL]	
from typing import Dict , Any [EOL] import typing [EOL] import datetime [EOL] import json [EOL] from decimal import Decimal [EOL] [EOL] import pytest [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] from leasing . enums import ContactType , InvoiceType [EOL] from leasing . models import Invoice [EOL] from leasing . models . invoice import InvoiceRow [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_change_one_row_amount ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row . id , [string] : invoice_row . receivable_type_id , [string] : [number] , } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row = InvoiceRow . objects . get ( pk = invoice_row . id ) [EOL] [EOL] assert invoice_row . amount == Decimal ( [number] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_change_other_row_amount ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row1 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row1 . id , [string] : invoice_row1 . receivable_type_id , [string] : [number] , } , { [string] : invoice_row2 . id , [string] : invoice_row2 . receivable_type_id , [string] : [number] , } , ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row1 = InvoiceRow . objects . get ( pk = invoice_row1 . id ) [EOL] assert invoice_row1 . amount == Decimal ( [number] ) [EOL] invoice_row2 = InvoiceRow . objects . get ( pk = invoice_row2 . id ) [EOL] assert invoice_row2 . amount == Decimal ( [number] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_change_two_row_amount ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row1 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row1 . id , [string] : invoice_row1 . receivable_type_id , [string] : [number] , } , { [string] : invoice_row2 . id , [string] : invoice_row2 . receivable_type_id , [string] : [number] , } , ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row1 = InvoiceRow . objects . get ( pk = invoice_row1 . id ) [EOL] assert invoice_row1 . amount == Decimal ( [number] ) [EOL] invoice_row2 = InvoiceRow . objects . get ( pk = invoice_row2 . id ) [EOL] assert invoice_row2 . amount == Decimal ( [number] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_with_invoiceset_change_row_amount ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_set_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoiceset = invoice_set_factory ( lease = lease ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , invoiceset = invoiceset , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row1 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row2 = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , invoiceset = invoiceset , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row1 . id , [string] : invoice_row1 . receivable_type_id , [string] : [number] , } , { [string] : invoice_row2 . id , [string] : invoice_row2 . receivable_type_id , [string] : [number] , } , ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . filter ( pk = invoice . id ) . first ( ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] invoice2 = Invoice . objects . get ( pk = invoice2 . id ) [EOL] [EOL] assert invoice2 . billed_amount == Decimal ( [number] ) [EOL] assert invoice2 . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice2 . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_delete_invoice_invoice_in_invoiceset ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_set_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoiceset = invoice_set_factory ( lease = lease ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , invoiceset = invoiceset , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice2 = invoice_factory ( lease = lease , invoiceset = invoiceset , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice_row_factory ( invoice = invoice2 , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice2 . id } ) [EOL] response = admin_client . delete ( url , content_type = [string] ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] with pytest . raises ( Invoice . DoesNotExist ) : [EOL] Invoice . objects . get ( pk = invoice2 . id ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_cant_change_if_sent_to_sap ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , due_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , sent_to_sap_at = timezone . now ( ) , ) [EOL] [EOL] invoice_row = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [string] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : [ { [string] : invoice_row . id , [string] : invoice_row . receivable_type_id , [string] : [number] , } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row = InvoiceRow . objects . get ( pk = invoice_row . id ) [EOL] [EOL] assert invoice_row . amount == Decimal ( [string] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [string] ) [EOL] assert invoice . outstanding_amount == Decimal ( [string] ) [EOL] assert invoice . total_amount == Decimal ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_cant_change_if_generated ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [string] ) , billed_amount = Decimal ( [string] ) , outstanding_amount = Decimal ( [string] ) , recipient = contact , due_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , generated = True , ) [EOL] [EOL] invoice_row = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [string] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : [ { [string] : invoice_row . id , [string] : invoice_row . receivable_type_id , [string] : [number] , } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row = InvoiceRow . objects . get ( pk = invoice_row . id ) [EOL] [EOL] assert invoice_row . amount == Decimal ( [string] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [string] ) [EOL] assert invoice . outstanding_amount == Decimal ( [string] ) [EOL] assert invoice . total_amount == Decimal ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_credit_note_credited_invoice_outstanding_amount ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] credit_note = invoice_factory ( lease = lease , type = InvoiceType . CREDIT_NOTE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , recipient = contact , credited_invoice = invoice , ) [EOL] [EOL] credit_note_row = invoice_row_factory ( invoice = credit_note , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] data = { [string] : credit_note . id , [string] : [ { [string] : credit_note_row . id , [string] : [number] , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : credit_note . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_credit_note_dates_read_only ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] credit_note = invoice_factory ( lease = lease , type = InvoiceType . CREDIT_NOTE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , recipient = contact , credited_invoice = invoice , due_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , billing_period_start_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , billing_period_end_date = datetime . date ( year = [number] , month = [number] , day = [number] ) , notes = [string] , ) [EOL] [EOL] invoice_row_factory ( invoice = credit_note , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] invoice . update_amounts ( ) [EOL] [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] data = { [string] : credit_note . id , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : datetime . date ( year = [number] , month = [number] , day = [number] ) , [string] : [string] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : credit_note . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] credit_note = Invoice . objects . get ( pk = credit_note . id ) [EOL] [EOL] assert credit_note . notes == [string] [EOL] assert credit_note . due_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] assert credit_note . billing_period_start_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] assert credit_note . billing_period_end_date == datetime . date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_add_payment ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : [number] , [string] : timezone . now ( ) . date ( ) } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_generated_invoice_add_payment ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , notes = [string] , generated = True , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [string] , [string] : [ { [string] : [number] , [string] : timezone . now ( ) . date ( ) } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . notes == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_cannot_add_payment_if_sent_to_sap ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , sent_to_sap_at = timezone . now ( ) , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : [number] , [string] : timezone . now ( ) . date ( ) } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = invoice . id ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_existing_interest_row_success ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row . id , [string] : invoice_row . receivable_type_id , [string] : [number] , } , { [string] : [number] , [string] : [number] } , ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] invoice_row = InvoiceRow . objects . get ( pk = invoice_row . id ) [EOL] [EOL] assert invoice_row . amount == Decimal ( [number] ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = response . data [ [string] ] ) [EOL] [EOL] assert invoice . billed_amount == Decimal ( [number] ) [EOL] assert invoice . outstanding_amount == Decimal ( [number] ) [EOL] assert invoice . total_amount == Decimal ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_change_interest_row_fail ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row = invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : invoice_row . id , [string] : [number] , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_patch_invoice_new_interest_row_fail ( django_db_setup , admin_client , lease_test_data , contact_factory , invoice_factory , invoice_row_factory , ) : [EOL] lease = lease_test_data [ [string] ] [EOL] [EOL] contact = contact_factory ( first_name = [string] , last_name = [string] , type = ContactType . PERSON ) [EOL] [EOL] invoice = invoice_factory ( lease = lease , type = InvoiceType . CHARGE , total_amount = Decimal ( [number] ) , billed_amount = Decimal ( [number] ) , outstanding_amount = Decimal ( [number] ) , recipient = contact , ) [EOL] [EOL] invoice_row_factory ( invoice = invoice , receivable_type_id = [number] , amount = Decimal ( [number] ) ) [EOL] [EOL] data = { [string] : invoice . id , [string] : [ { [string] : [number] , [string] : [number] } ] , } [EOL] [EOL] url = reverse ( [string] , kwargs = { [string] : invoice . id } ) [EOL] response = admin_client . patch ( url , data = json . dumps ( data , cls = DjangoJSONEncoder ) , content_type = [string] , ) [EOL] [EOL] assert response . status_code == [number] , [string] % ( response . status_code , response . data ) [EOL]	
from typing import List , Dict , Any [EOL] import typing [EOL] import leasing [EOL] from decimal import Decimal [EOL] [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from leasing . calculation . explanation import Explanation , ExplanationItem [EOL] [EOL] [EOL] class CalculationNote : [EOL] def __init__ ( self , type , description ) : [EOL] self . type = type [EOL] self . description = description [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . description ) [EOL] [EOL] [EOL] class CalculationAmount : [EOL] def __init__ ( self , item , date_range_start , date_range_end , amount ) : [EOL] self . item = item [EOL] self . amount = amount [EOL] self . date_range_start = date_range_start [EOL] self . date_range_end = date_range_end [EOL] self . sub_amounts = [ ] [EOL] self . notes = [ ] [EOL] [EOL] def __str__ ( self ) : [EOL] result = [string] . format ( self . item ) [EOL] result += [string] . format ( self . date_range_start , self . date_range_end ) [EOL] result += [string] . format ( self . item . intended_use ) [EOL] result += [string] . format ( self . amount ) [EOL] result += [string] [EOL] for note in self . notes : [EOL] result += str ( note ) + [string] [EOL] result += [string] [EOL] for sub_amount in self . sub_amounts : [EOL] result += [string] + str ( sub_amount ) . replace ( [string] , [string] ) [EOL] [EOL] return result [EOL] [EOL] def add_sub_amounts ( self , amounts ) : [EOL] if not amounts : [EOL] return [EOL] [EOL] [comment] [EOL] self . sub_amounts . extend ( amounts ) [EOL] [EOL] def add_note ( self , note ) : [EOL] self . notes . append ( note ) [EOL] [EOL] def get_total_amount ( self , allow_negative = False ) : [EOL] amounts = [ self . amount ] [EOL] amounts . extend ( [ sub_amount . get_total_amount ( allow_negative = True ) for sub_amount in self . sub_amounts ] ) [EOL] [EOL] return sum ( amounts ) if allow_negative else max ( Decimal ( [number] ) , sum ( amounts ) ) [EOL] [EOL] def get_total_amounts_by_intended_uses ( self , totals = None ) : [EOL] if totals is None : [EOL] totals = { } [EOL] [EOL] if self . item . intended_use not in totals : [EOL] totals [ self . item . intended_use ] = self . amount [EOL] else : [EOL] totals [ self . item . intended_use ] += self . amount [EOL] [EOL] for sub_amount in self . sub_amounts : [EOL] sub_amount . get_total_amounts_by_intended_uses ( totals ) [EOL] [EOL] return totals [EOL] [EOL] def get_all_amounts ( self ) : [EOL] amounts = [ self ] [EOL] for amount in self . sub_amounts : [EOL] amounts . extend ( amount . get_all_amounts ( ) ) [EOL] [EOL] return amounts [EOL] [EOL] def get_explanation ( self ) : [EOL] explanation_item = ExplanationItem ( ) [EOL] explanation_item . subject = self . item [EOL] explanation_item . date_ranges = [ ( self . date_range_start , self . date_range_end ) ] [EOL] explanation_item . amount = self . amount [EOL] [EOL] for note in self . notes : [EOL] explanation_item . sub_items . append ( ExplanationItem ( subject = { [string] : note . type , [string] : note . description } , date_ranges = None , amount = None , ) ) [EOL] [EOL] if self . sub_amounts : [EOL] for amount in self . sub_amounts : [EOL] explanation_item . sub_items . append ( amount . get_explanation ( ) ) [EOL] [EOL] return explanation_item [EOL] [EOL] [EOL] class CalculationResult : [EOL] def __init__ ( self , date_range_start , date_range_end ) : [EOL] self . date_range_start = date_range_start [EOL] self . date_range_end = date_range_end [EOL] self . amounts = [ ] [EOL] [EOL] def __str__ ( self ) : [EOL] result = [string] . format ( self . date_range_start , self . date_range_end ) [EOL] [EOL] result += [string] [EOL] for amount in self . amounts : [EOL] result += str ( amount ) [EOL] [EOL] return result [EOL] [EOL] def add_amount ( self , amount ) : [EOL] if not amount : [EOL] return [EOL] [EOL] self . amounts . append ( amount ) [EOL] [EOL] def get_total_amount ( self ) : [EOL] total = sum ( [ amount . get_total_amount ( ) for amount in self . amounts ] ) [EOL] [EOL] [comment] [EOL] if not total : [EOL] return Decimal ( [number] ) [EOL] else : [EOL] return total [EOL] [EOL] def combine ( self , calculation_result ) : [EOL] assert isinstance ( calculation_result , CalculationResult ) [EOL] [EOL] self . amounts . extend ( calculation_result . amounts ) [EOL] [EOL] def get_total_amounts_by_intended_uses ( self ) : [EOL] totals = { } [EOL] for amount in self . amounts : [EOL] amount . get_total_amounts_by_intended_uses ( totals ) [EOL] [EOL] return totals [EOL] [EOL] def get_all_amounts ( self ) : [EOL] amounts = [ ] [EOL] for amount in self . amounts : [EOL] amounts . extend ( amount . get_all_amounts ( ) ) [EOL] [EOL] return amounts [EOL] [EOL] def get_explanation ( self ) : [EOL] explanation = Explanation ( ) [EOL] [EOL] for amount in self . amounts : [EOL] explanation . add_item ( amount . get_explanation ( ) ) [EOL] [EOL] explanation_item = ExplanationItem ( ) [EOL] explanation_item . subject = { [string] : [string] , [string] : _ ( [string] ) } [EOL] explanation_item . date_ranges = [ ( self . date_range_start , self . date_range_end ) ] [EOL] explanation_item . amount = self . get_total_amount ( ) [EOL] explanation . add_item ( explanation_item ) [EOL] [EOL] return explanation [EOL] [EOL] [EOL] class FixedInitialYearRentCalculationResult ( CalculationResult ) : [EOL] def __init__ ( self , date_range_start , date_range_end ) : [EOL] super ( ) . __init__ ( date_range_start , date_range_end ) [EOL] [EOL] self . applied_ranges = [ ] [EOL] self . remaining_ranges = [ ] [EOL] [EOL] def is_range_fully_applied ( self ) : [EOL] return self . applied_ranges and not self . remaining_ranges [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[leasing.calculation.result.CalculationAmount]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[leasing.calculation.result.CalculationAmount]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[leasing.calculation.result.CalculationAmount]$ 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.Explanation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.Explanation$ 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.Explanation$ 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 $leasing.calculation.explanation.Explanation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import leasing [EOL] class ExplanationItem : [EOL] def __init__ ( self , subject = None , date_ranges = None , amount = None ) : [EOL] self . subject = subject [EOL] self . sub_items = [ ] [EOL] self . date_ranges = date_ranges [EOL] self . amount = amount [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . subject , self . date_ranges , self . amount , [string] + [string] . join ( [ str ( item ) for item in self . sub_items ] ) [EOL] if self . sub_items [EOL] else [string] , ) [EOL] [EOL] [EOL] class Explanation : [EOL] def __init__ ( self ) : [EOL] self . items = [ ] [EOL] [EOL] def add_item ( self , explanation_item , related_item = None ) : [EOL] if related_item : [EOL] related_item . sub_items . append ( explanation_item ) [EOL] else : [EOL] self . items . append ( explanation_item ) [EOL] [EOL] return explanation_item [EOL] [EOL] def add ( self , subject = None , date_ranges = None , amount = None , related_item = None ) : [EOL] explanation_item = ExplanationItem ( subject = subject , date_ranges = date_ranges , amount = amount ) [EOL] [EOL] return self . add_item ( explanation_item , related_item = related_item ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . join ( [ str ( item ) for item in self . items ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import decimal [EOL] import leasing [EOL] from decimal import ROUND_HALF_UP , Decimal [EOL] [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from leasing . calculation . result import CalculationNote [EOL] from leasing . enums import IndexType [EOL] [EOL] from . explanation import ExplanationItem [EOL] [EOL] [EOL] def int_floor ( value , precision ) : [EOL] return value // precision * precision [EOL] [EOL] [EOL] class IndexCalculation : [EOL] def __init__ ( self , amount = None , index = None , index_type = None , precision = None , x_value = None , y_value = None , ) : [EOL] self . explanation_items = [ ] [EOL] self . notes = [ ] [EOL] self . amount = amount [EOL] self . index = index [EOL] self . index_type = index_type [EOL] self . precision = precision [EOL] self . x_value = x_value [EOL] self . y_value = y_value [EOL] [EOL] def _add_ratio_explanation ( self , ratio ) : [EOL] ratio_explanation_item = ExplanationItem ( subject = { [string] : [string] , [string] : _ ( [string] ) . format ( ratio = ratio ) , } ) [EOL] self . explanation_items . append ( ratio_explanation_item ) [EOL] self . notes . append ( CalculationNote ( type = [string] , description = _ ( [string] . format ( ratio ) ) ) ) [EOL] [EOL] def calculate_type_1_2_3_4 ( self , index_value , precision , base ) : [EOL] ratio = Decimal ( int_floor ( index_value , precision ) / base ) . quantize ( Decimal ( [string] ) ) [EOL] [EOL] self . _add_ratio_explanation ( ratio ) [EOL] [EOL] return ratio * self . amount [EOL] [EOL] def calculate_type_5_7 ( self , index_value , base ) : [EOL] ratio = Decimal ( index_value / base ) . quantize ( Decimal ( [string] ) ) [EOL] [EOL] self . _add_ratio_explanation ( ratio ) [EOL] [EOL] return ratio * self . amount [EOL] [EOL] def calculate_type_6 ( self , index_value , base ) : [EOL] if index_value <= self . x_value : [EOL] return self . calculate_type_6_v2 ( index_value , base ) [EOL] [EOL] rounded_index = int_floor ( index_value , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if rounded_index < self . y_value : [EOL] dividend = Decimal ( self . x_value + ( index_value - self . x_value ) / [number] ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] ratio = ( dividend / [number] ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] self . _add_ratio_explanation ( ratio ) [EOL] [EOL] return ratio * self . amount [EOL] else : [EOL] dividend = Decimal ( self . y_value - ( self . y_value - self . x_value ) / [number] ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] ratio = ( dividend / [number] ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] self . _add_ratio_explanation ( ratio ) [EOL] [EOL] new_base_rent = ( ratio * self . amount ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] new_base_rent_explanation_item = ExplanationItem ( subject = { [string] : [string] , [string] : _ ( [string] ) , } , amount = new_base_rent , ) [EOL] self . explanation_items . append ( new_base_rent_explanation_item ) [EOL] [EOL] self . notes . append ( CalculationNote ( type = [string] , description = _ ( [string] . format ( new_base_rent ) ) , ) ) [EOL] [EOL] y_ratio = Decimal ( Decimal ( rounded_index ) / Decimal ( self . y_value ) ) . quantize ( Decimal ( [string] ) , rounding = ROUND_HALF_UP ) [EOL] [EOL] [comment] [EOL] self . _add_ratio_explanation ( y_ratio ) [EOL] [EOL] return new_base_rent * y_ratio [EOL] [EOL] def calculate_type_6_v2 ( self , index_value , base ) : [EOL] ratio = Decimal ( int_floor ( index_value , [number] ) / base ) . quantize ( Decimal ( [string] ) ) [EOL] [EOL] self . _add_ratio_explanation ( ratio ) [EOL] [EOL] return ratio * self . amount [EOL] [EOL] def get_index_value ( self ) : [EOL] [comment] [EOL] if self . index . __class__ and self . index . __class__ . __name__ == [string] : [EOL] if self . index_type == IndexType . TYPE_1 : [EOL] from leasing . models . rent import LegacyIndex [EOL] [EOL] index_value = LegacyIndex . objects . get ( index = self . index ) . number_1914 [EOL] elif self . index_type == IndexType . TYPE_2 : [EOL] from leasing . models . rent import LegacyIndex [EOL] [EOL] index_value = LegacyIndex . objects . get ( index = self . index ) . number_1938 [EOL] else : [EOL] index_value = self . index . number [EOL] else : [EOL] index_value = self . index [EOL] [EOL] return index_value [EOL] [EOL] def calculate ( self ) : [comment] [EOL] index_value = self . get_index_value ( ) [EOL] [EOL] if self . index_type == IndexType . TYPE_1 : [EOL] precision = self . precision [EOL] [comment] [EOL] if not self . precision : [EOL] precision = [number] [EOL] return self . calculate_type_1_2_3_4 ( index_value , precision , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_2 : [EOL] precision = self . precision [EOL] [comment] [EOL] if not self . precision : [EOL] precision = [number] [EOL] return self . calculate_type_1_2_3_4 ( index_value , precision , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_3 : [EOL] return self . calculate_type_1_2_3_4 ( index_value , [number] , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_4 : [EOL] return self . calculate_type_1_2_3_4 ( index_value , [number] , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_5 : [EOL] return self . calculate_type_5_7 ( index_value , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_6 : [EOL] if not self . x_value or not self . y_value : [EOL] return self . calculate_type_6_v2 ( index_value , [number] ) [EOL] [EOL] return self . calculate_type_6 ( index_value , [number] ) [EOL] [EOL] elif self . index_type == IndexType . TYPE_7 : [EOL] return self . calculate_type_5_7 ( index_value , [number] ) [EOL] [EOL] else : [EOL] raise NotImplementedError ( [string] . format ( self . index_type ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 $decimal.Decimal$ 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 $leasing.calculation.explanation.ExplanationItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $decimal.Decimal$ 0 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import rest_framework . urls [EOL] from django . conf import settings [EOL] from django . contrib import admin [EOL] from django . urls import include , path , re_path [EOL] from rest_framework import routers [EOL] from rest_framework_swagger . views import get_swagger_view [EOL] [EOL] from leasing . report . viewset import ReportViewSet [EOL] from leasing . views import CloudiaProxy , VirreProxy , ktj_proxy [EOL] from leasing . viewsets . area_note import AreaNoteViewSet [EOL] from leasing . viewsets . auditlog import AuditLogView [EOL] from leasing . viewsets . basis_of_rent import BasisOfRentViewSet [EOL] from leasing . viewsets . batchrun import ( JobRunLogEntryViewSet , JobRunViewSet , JobViewSet , ScheduledJobViewSet , ) [EOL] from leasing . viewsets . comment import CommentTopicViewSet , CommentViewSet [EOL] from leasing . viewsets . contact import ContactViewSet [EOL] from leasing . viewsets . contact_additional_views import ContactExistsView [EOL] from leasing . viewsets . debt_collection import ( CollectionCourtDecisionViewSet , CollectionLetterTemplateViewSet , CollectionLetterViewSet , CollectionNoteViewSet , ) [EOL] from leasing . viewsets . decision import DecisionCopyToLeasesView , DecisionViewSet [EOL] from leasing . viewsets . email import SendEmailView [EOL] from leasing . viewsets . infill_development_compensation import ( InfillDevelopmentCompensationAttachmentViewSet , InfillDevelopmentCompensationViewSet , ) [EOL] from leasing . viewsets . inspection import InspectionAttachmentViewSet [EOL] from leasing . viewsets . invoice import ( InvoiceNoteViewSet , InvoiceRowViewSet , InvoiceSetViewSet , InvoiceViewSet , ReceivableTypeViewSet , ) [EOL] from leasing . viewsets . invoice_additional_views import ( InvoiceCalculatePenaltyInterestView , InvoiceCreditView , InvoiceExportToLaskeView , InvoiceRowCreditView , InvoiceSetCreditView , ) [EOL] from leasing . viewsets . land_area import LeaseAreaAttachmentViewSet [EOL] from leasing . viewsets . lease import ( DistrictViewSet , FinancingViewSet , HitasViewSet , IntendedUseViewSet , LeaseTypeViewSet , LeaseViewSet , ManagementViewSet , MunicipalityViewSet , NoticePeriodViewSet , RegulationViewSet , RelatedLeaseViewSet , ReservationProcedureViewSet , SpecialProjectViewSet , StatisticalUseViewSet , SupportiveHousingViewSet , ) [EOL] from leasing . viewsets . lease_additional_views import ( LeaseBillingPeriodsView , LeaseCopyAreasToContractView , LeaseCreateChargeViewSet , LeaseCreateCollectionLetterDocumentViewSet , LeasePreviewInvoicesForYearView , LeaseRentForPeriodView , LeaseSetInvoicingStateView , LeaseSetRentInfoCompletionStateView , ) [EOL] from leasing . viewsets . leasehold_transfer import LeaseholdTransferViewSet [EOL] from leasing . viewsets . rent import IndexViewSet [EOL] from leasing . viewsets . ui_data import UiDataViewSet [EOL] from leasing . viewsets . vat import VatViewSet [EOL] from users . views import UsersPermissions [EOL] from users . viewsets import UserViewSet [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , AreaNoteViewSet ) [EOL] router . register ( [string] , BasisOfRentViewSet ) [EOL] router . register ( [string] , CollectionCourtDecisionViewSet ) [EOL] router . register ( [string] , CollectionLetterViewSet ) [EOL] router . register ( [string] , CollectionLetterTemplateViewSet ) [EOL] router . register ( [string] , CollectionNoteViewSet ) [EOL] router . register ( [string] , CommentViewSet ) [EOL] router . register ( [string] , CommentTopicViewSet ) [EOL] router . register ( [string] , ContactViewSet ) [EOL] router . register ( [string] , DecisionViewSet ) [EOL] router . register ( [string] , DistrictViewSet ) [EOL] router . register ( [string] , FinancingViewSet ) [EOL] router . register ( [string] , HitasViewSet ) [EOL] router . register ( [string] , IndexViewSet ) [EOL] router . register ( [string] , InfillDevelopmentCompensationViewSet ) [EOL] router . register ( [string] , InfillDevelopmentCompensationAttachmentViewSet , ) [EOL] router . register ( [string] , InspectionAttachmentViewSet ) [EOL] router . register ( [string] , InvoiceViewSet ) [EOL] router . register ( [string] , InvoiceNoteViewSet ) [EOL] router . register ( [string] , InvoiceRowViewSet ) [EOL] router . register ( [string] , InvoiceSetViewSet ) [EOL] router . register ( [string] , IntendedUseViewSet ) [EOL] router . register ( [string] , LeaseViewSet , basename = [string] ) [EOL] router . register ( [string] , LeaseAreaAttachmentViewSet ) [EOL] router . register ( [string] , LeaseCreateChargeViewSet , basename = [string] ) [EOL] router . register ( [string] , LeaseCreateCollectionLetterDocumentViewSet , basename = [string] , ) [EOL] router . register ( [string] , LeaseTypeViewSet ) [EOL] router . register ( [string] , LeaseholdTransferViewSet ) [EOL] router . register ( [string] , ManagementViewSet ) [EOL] router . register ( [string] , MunicipalityViewSet ) [EOL] router . register ( [string] , NoticePeriodViewSet ) [EOL] router . register ( [string] , RegulationViewSet ) [EOL] router . register ( [string] , ReceivableTypeViewSet ) [EOL] router . register ( [string] , RelatedLeaseViewSet ) [EOL] router . register ( [string] , ReportViewSet , basename = [string] ) [EOL] router . register ( [string] , SpecialProjectViewSet ) [EOL] router . register ( [string] , ReservationProcedureViewSet ) [EOL] router . register ( [string] , StatisticalUseViewSet ) [EOL] router . register ( [string] , SupportiveHousingViewSet ) [EOL] router . register ( [string] , UiDataViewSet , basename = [string] ) [EOL] router . register ( [string] , UserViewSet ) [EOL] router . register ( [string] , VatViewSet ) [EOL] [EOL] [comment] [EOL] router . register ( [string] , ScheduledJobViewSet ) [EOL] router . register ( [string] , JobViewSet ) [EOL] router . register ( [string] , JobRunViewSet ) [EOL] router . register ( [string] , JobRunLogEntryViewSet ) [EOL] [EOL] additional_api_paths = [ path ( [string] , AuditLogView . as_view ( ) , name = [string] ) , path ( [string] , ContactExistsView . as_view ( ) , name = [string] ) , path ( [string] , DecisionCopyToLeasesView . as_view ( ) , name = [string] , ) , path ( [string] , InvoiceCalculatePenaltyInterestView . as_view ( ) , name = [string] , ) , path ( [string] , InvoiceCreditView . as_view ( ) , name = [string] ) , path ( [string] , InvoiceExportToLaskeView . as_view ( ) , name = [string] , ) , path ( [string] , InvoiceRowCreditView . as_view ( ) , name = [string] ) , path ( [string] , InvoiceSetCreditView . as_view ( ) , name = [string] ) , path ( [string] , LeaseBillingPeriodsView . as_view ( ) , name = [string] , ) , path ( [string] , LeaseCopyAreasToContractView . as_view ( ) , name = [string] , ) , path ( [string] , LeasePreviewInvoicesForYearView . as_view ( ) , name = [string] , ) , path ( [string] , LeaseRentForPeriodView . as_view ( ) , name = [string] , ) , path ( [string] , LeaseSetInvoicingStateView . as_view ( ) , name = [string] , ) , path ( [string] , LeaseSetRentInfoCompletionStateView . as_view ( ) , name = [string] , ) , path ( [string] , SendEmailView . as_view ( ) , name = [string] ) , path ( [string] , UsersPermissions . as_view ( ) , name = [string] ) , ] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls + additional_api_paths ) ) , re_path ( [string] , ktj_proxy ) , path ( [string] , CloudiaProxy . as_view ( ) ) , path ( [string] , CloudiaProxy . as_view ( ) ) , path ( [string] , VirreProxy . as_view ( ) ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( rest_framework . urls ) ) , path ( [string] , get_swagger_view ( title = [string] ) ) , ] [EOL] [EOL] if settings . DEBUG and [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Dict , Any , Union , List , Tuple [EOL] import typing [EOL] import os [EOL] import subprocess [EOL] [EOL] import environ [EOL] import sentry_sdk [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from sentry_sdk . integrations . django import DjangoIntegration [EOL] [EOL] project_root = environ . Path ( __file__ ) - [number] [EOL] BASE_DIR = project_root [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] VERSION_FILE = project_root ( [string] ) [EOL] [EOL] [EOL] def get_git_revision_hash ( ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] git_hash = subprocess . check_output ( [ [string] , [string] , [string] , [string] , [string] ] , stderr = subprocess . DEVNULL , encoding = [string] , ) [EOL] [comment] [EOL] except ( FileNotFoundError , subprocess . CalledProcessError ) : [EOL] try : [EOL] [comment] [EOL] with open ( VERSION_FILE ) as f : [EOL] git_hash = f . readline ( ) [EOL] except FileNotFoundError : [EOL] git_hash = [string] [EOL] [EOL] return git_hash . rstrip ( ) [EOL] [EOL] [EOL] env = environ . Env ( DEBUG = ( bool , True ) , SECRET_KEY = ( str , [string] ) , ALLOWED_HOSTS = ( list , [ ] ) , ADMINS = ( list , [ ] ) , DATABASE_URL = ( str , [string] ) , CACHE_URL = ( str , [string] ) , CONSTANCE_DATABASE_CACHE_BACKEND = ( str , [string] ) , SENTRY_DSN = ( str , [string] ) , SENTRY_ENVIRONMENT = ( str , [string] ) , EMAIL_BACKEND = ( str , [string] ) , DEFAULT_FROM_EMAIL = ( str , [string] ) , SENDGRID_API_KEY = ( str , [string] ) , KTJ_PRINT_ROOT_URL = ( str , [string] ) , KTJ_PRINT_USERNAME = ( str , [string] ) , KTJ_PRINT_PASSWORD = ( str , [string] ) , CLOUDIA_ROOT_URL = ( str , [string] ) , CLOUDIA_USERNAME = ( str , [string] ) , CLOUDIA_PASSWORD = ( str , [string] ) , VIRRE_API_URL = ( str , [string] ) , VIRRE_USERNAME = ( str , [string] ) , VIRRE_PASSWORD = ( str , [string] ) , NLS_HELSINKI_FOLDER_URL = ( str , [string] ) , NLS_HELSINKI_USERNAME = ( str , [string] ) , NLS_HELSINKI_PASSWORD = ( str , [string] ) , TOKEN_AUTH_ACCEPTED_AUDIENCE = ( str , [string] ) , TOKEN_AUTH_ACCEPTED_SCOPE_PREFIX = ( str , [string] ) , TOKEN_AUTH_AUTHSERVER_URL = ( str , [string] ) , TOKEN_AUTH_FIELD_FOR_CONSENTS = ( str , [string] ) , TOKEN_AUTH_REQUIRE_SCOPE_PREFIX = ( bool , True ) , AREA_DATABASE_DSN = ( str , [string] ) , LEASE_AREA_DATABASE_DSN = ( str , [string] ) , LASKE_EXPORT_FROM_EMAIL = ( str , [string] ) , LASKE_EXPORT_ANNOUNCE_EMAIL = ( str , [string] ) , ) [EOL] [EOL] env_file = project_root ( [string] ) [EOL] [EOL] if os . path . exists ( env_file ) : [EOL] env . read_env ( env_file ) [EOL] [EOL] DEBUG = env . bool ( [string] ) [EOL] SECRET_KEY = env . str ( [string] , default = ( [string] if DEBUG else [string] ) ) [EOL] [EOL] ALLOWED_HOSTS = env . list ( [string] ) [EOL] [EOL] ADMINS = env . list ( [string] ) [EOL] [EOL] DATABASES = { [string] : env . db ( ) } [EOL] [EOL] CACHES = { [string] : env . cache ( ) } [EOL] [EOL] if env ( [string] ) : [EOL] sentry_sdk . init ( dsn = env ( [string] ) , environment = env ( [string] ) , release = get_git_revision_hash ( ) , integrations = [ DjangoIntegration ( ) ] , ) [EOL] [EOL] MEDIA_ROOT = project_root ( [string] ) [EOL] STATIC_ROOT = project_root ( [string] ) [EOL] MEDIA_URL = [string] [EOL] STATIC_URL = [string] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] TIME_ZONE = [string] [EOL] USE_I18N = True [EOL] USE_L10N = True [EOL] USE_TZ = True [EOL] [EOL] LOCALE_PATHS = [ project_root ( [string] ) ] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] if DEBUG : [EOL] INSTALLED_APPS += [ [string] ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] } , } ] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] CONSTANCE_BACKEND = [string] [EOL] CONSTANCE_DATABASE_CACHE_BACKEND = env . str ( [string] ) [EOL] CONSTANCE_CONFIG = { [string] : ( env . str ( [string] ) , _ ( [string] ) , ) , [string] : ( env . str ( [string] ) , _ ( [string] ) , ) , } [EOL] CONSTANCE_CONFIG_FIELDSETS = { [string] : ( [string] , [string] ) , } [EOL] [EOL] [comment] [EOL] SESSION_SERIALIZER = [string] [EOL] [EOL] REST_FRAMEWORK = { [string] : [string] , [string] : ( [string] , ) , [string] : [ [string] , [string] , ] , [string] : [ [string] , [string] , ] , [string] : [ [string] ] , [string] : [ [string] , [string] , ] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , } [EOL] [EOL] DEFAULT_FROM_EMAIL = env . str ( [string] ) [EOL] SERVER_EMAIL = DEFAULT_FROM_EMAIL [EOL] MVJ_EMAIL_FROM = DEFAULT_FROM_EMAIL [EOL] [EOL] ANYMAIL = { [string] : env . str ( [string] ) } [EOL] [EOL] EMAIL_BACKEND = env . str ( [string] ) [EOL] [EOL] CORS_ORIGIN_ALLOW_ALL = True [EOL] CORS_EXPOSE_HEADERS = [ [string] ] [EOL] [EOL] Q_CLUSTER = { [string] : [string] , [string] : [number] , [string] : [number] * [number] , [string] : [string] , } [EOL] [EOL] KTJ_PRINT_ROOT_URL = env . str ( [string] ) [EOL] KTJ_PRINT_USERNAME = env . str ( [string] ) [EOL] KTJ_PRINT_PASSWORD = env . str ( [string] ) [EOL] [EOL] CLOUDIA_ROOT_URL = env . str ( [string] ) [EOL] CLOUDIA_USERNAME = env . str ( [string] ) [EOL] CLOUDIA_PASSWORD = env . str ( [string] ) [EOL] [EOL] VIRRE_API_URL = env . str ( [string] ) [EOL] VIRRE_USERNAME = env . str ( [string] ) [EOL] VIRRE_PASSWORD = env . str ( [string] ) [EOL] [EOL] NLS_HELSINKI_FOLDER_URL = env . str ( [string] ) [EOL] NLS_HELSINKI_USERNAME = env . str ( [string] ) [EOL] NLS_HELSINKI_PASSWORD = env . str ( [string] ) [EOL] NLS_IMPORT_ROOT = project_root ( [string] ) [EOL] [EOL] OIDC_API_TOKEN_AUTH = { [string] : env . str ( [string] ) , [string] : env . str ( [string] ) , [string] : env . str ( [string] ) , [string] : env . str ( [string] ) , [string] : env . bool ( [string] ) , } [EOL] [EOL] LASKE_VALUES = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] LASKE_EXPORT_ROOT = project_root ( [string] ) [EOL] [EOL] LASKE_DUE_DATE_OFFSET_DAYS = [number] [EOL] [EOL] LASKE_SERVERS = { [string] : { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , } [EOL] [EOL] [comment] [EOL] USE_NATIVE_JSONFIELD = True [EOL] [EOL] MVJ_DUE_DATE_OFFSET_DAYS = [number] [EOL] [EOL] AREA_DATABASE_DSN = env . str ( [string] ) [EOL] LEASE_AREA_DATABASE_DSN = env . str ( [string] ) [EOL] [EOL] local_settings = project_root ( [string] ) [EOL] if os . path . exists ( local_settings ) : [EOL] with open ( local_settings ) as fp : [EOL] code = compile ( fp . read ( ) , local_settings , [string] ) [EOL] exec ( code , globals ( ) , locals ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.int,builtins.str,typing.Tuple[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.bytes,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import random [EOL] from random import choice [EOL] from string import digits [EOL] [EOL] from faker import Faker [EOL] [EOL] fake = Faker ( [string] ) [EOL] [EOL] [EOL] def sanitize_address ( value ) : [EOL] return fake . address ( ) [EOL] [EOL] [EOL] def sanitize_address_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_address ( value ) [EOL] [EOL] [EOL] def sanitize_business_id ( value ) : [EOL] return fake . pystr_format ( string_format = [string] , letters = [string] ) [EOL] [EOL] [EOL] def sanitize_business_id_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_business_id ( value ) [EOL] [EOL] [EOL] def sanitize_city ( value ) : [EOL] return fake . city ( ) [EOL] [EOL] [EOL] def sanitize_city_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_city ( value ) [EOL] [EOL] [EOL] def sanitize_company ( value ) : [EOL] return fake . company ( ) [EOL] [EOL] [EOL] def sanitize_company_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_company ( value ) [EOL] [EOL] [EOL] def sanitize_email ( value ) : [EOL] return fake . email ( ) [EOL] [EOL] [EOL] def sanitize_email_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_email ( value ) [EOL] [EOL] [EOL] def sanitize_first_name ( value ) : [EOL] return fake . first_name ( ) [EOL] [EOL] [EOL] def sanitize_first_name_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_first_name ( value ) [EOL] [EOL] [EOL] def sanitize_generate_random_numbers ( value ) : [EOL] return [string] . join ( [ choice ( digits ) for i in range ( random . randint ( [number] , [number] ) ) ] ) [EOL] [EOL] [EOL] def sanitize_generate_random_numbers_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_generate_random_numbers ( value ) [EOL] [EOL] [EOL] def sanitize_last_name ( value ) : [EOL] return fake . first_name ( ) [EOL] [EOL] [EOL] def sanitize_last_name_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_last_name ( value ) [EOL] [EOL] [EOL] def sanitize_national_identification_number ( value ) : [EOL] return fake . pystr_format ( string_format = [string] , letters = [string] ) [EOL] [EOL] [EOL] def sanitize_national_identification_number_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_national_identification_number ( value ) [EOL] [EOL] [EOL] def sanitize_name ( value ) : [EOL] return fake . name ( ) [EOL] [EOL] [EOL] def sanitize_paragraph ( value ) : [EOL] return fake . paragraph ( ) [EOL] [EOL] [EOL] def sanitize_paragraph_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_paragraph ( value ) [EOL] [EOL] [EOL] def sanitize_phone_number ( value ) : [EOL] return fake . phone_number ( ) [EOL] [EOL] [EOL] def sanitize_phone_number_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_phone_number ( value ) [EOL] [EOL] [EOL] def sanitize_postcode ( value ) : [EOL] return fake . postcode ( ) [EOL] [EOL] [EOL] def sanitize_postcode_if_exist ( value ) : [EOL] if value : [EOL] return sanitize_postcode ( value ) [EOL] [EOL] [EOL] def sanitize_url ( value ) : [EOL] return fake . url ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0