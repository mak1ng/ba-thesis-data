[comment] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] from __future__ import print_function [EOL] [EOL] import io [EOL] import re [EOL] import sys [EOL] from glob import glob [EOL] from os . path import basename [EOL] from os . path import dirname [EOL] from os . path import join [EOL] from os . path import splitext [EOL] [EOL] from setuptools import find_packages [EOL] from setuptools import setup [EOL] [EOL] [EOL] def read ( * names , ** kwargs ) : [EOL] with io . open ( join ( dirname ( __file__ ) , * names ) , encoding = kwargs . get ( [string] , [string] ) ) as fh : [EOL] return fh . read ( ) [EOL] [EOL] [EOL] try : [EOL] with open ( [string] ) as f : [EOL] INSTALL_REQUIRES = f . read ( ) . splitlines ( ) [EOL] except FileNotFoundError : [EOL] print ( sys . exc_info ( ) ) [EOL] INSTALL_REQUIRES = [ ] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = [string] % ( re . compile ( [string] , re . M | re . S ) . sub ( [string] , read ( [string] ) ) , re . sub ( [string] , [string] , read ( [string] ) ) , ) , author = [string] , author_email = [string] , url = [string] , packages = find_packages ( [string] ) , package_dir = { [string] : [string] } , py_modules = [ splitext ( basename ( path ) ) [ [number] ] for path in glob ( [string] ) ] , include_package_data = True , zip_safe = False , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , keywords = [ ] , install_requires = INSTALL_REQUIRES , extras_require = { } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import tests [EOL] [docstring] [EOL] [EOL] import marshmallow [EOL] import pytest [EOL] [EOL] import marshmallow_union [EOL] [EOL] [EOL] class PersonSchema ( marshmallow . Schema ) : [EOL] [docstring] [EOL] [EOL] name = marshmallow . fields . String ( ) [EOL] number_or_numbers = marshmallow_union . Union ( [ marshmallow . fields . List ( marshmallow . fields . Integer ( ) ) , marshmallow . fields . Integer ( ) , ] , reverse_serialize_candidates = True , ) [EOL] [EOL] [EOL] class OtherSchema ( marshmallow . Schema ) : [EOL] [docstring] [EOL] [EOL] name = marshmallow . fields . String ( ) [EOL] number_or_numbers = marshmallow_union . Union ( [ marshmallow . fields . List ( marshmallow . fields . Integer ( ) ) , marshmallow . fields . Integer ( ) , ] , reverse_serialize_candidates = False , ) [EOL] [EOL] [EOL] class MappingSchema ( marshmallow . Schema ) : [EOL] [docstring] [EOL] [EOL] items = marshmallow . fields . Dict ( marshmallow . fields . String ( ) , marshmallow_union . Union ( [ marshmallow . fields . Integer ( ) , marshmallow . fields . List ( marshmallow . fields . Integer ( ) ) , ] ) , ) [EOL] [EOL] [EOL] class IntStrSchema ( marshmallow . Schema ) : [EOL] [docstring] [EOL] [EOL] x = marshmallow_union . Union ( [ marshmallow . fields . Int ( ) , marshmallow . fields . String ( ) ] ) [EOL] [EOL] [EOL] class ListUnionSchema ( marshmallow . Schema ) : [EOL] [docstring] [EOL] [EOL] l = marshmallow . fields . List ( marshmallow_union . Union ( [ marshmallow . fields . Int ( ) , marshmallow . fields . String ( ) ] ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [number] } , PersonSchema ( ) ) , ( { [string] : [string] , [string] : [ [number] , [number] ] } , PersonSchema ( ) ) , ( { [string] : [string] , [string] : [ [number] , [number] ] } , OtherSchema ( ) ) , ( { [string] : [number] } , IntStrSchema ( ) ) , ( { [string] : [ [string] , [number] , [string] , [number] ] } , ListUnionSchema ( ) ) , ( { [string] : [string] } , IntStrSchema ( ) ) , ( { [string] : { [string] : [number] , [string] : [ [number] ] } } , MappingSchema ( ) ) , ] , ) def test_round_trip ( data , schema ) : [EOL] [docstring] [EOL] dumped = schema . dump ( data ) [EOL] loaded = schema . load ( dumped ) [EOL] assert dumped == loaded == data [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [string] } , PersonSchema ( ) ) , ( { [string] : [string] , [string] : { [string] : [number] } } , PersonSchema ( ) ) , ( { [string] : { [string] : [number] , [string] : [string] } } , MappingSchema ( ) ) , ] , ) def test_load_raises ( data , schema ) : [EOL] [docstring] [EOL] with pytest . raises ( marshmallow . exceptions . ValidationError ) : [EOL] schema . load ( data ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [string] } , PersonSchema ( ) ) , ( { [string] : [string] , [string] : { [string] : [number] } } , PersonSchema ( ) ) , ( { [string] : { [string] : [number] , [string] : [string] } } , MappingSchema ( ) ) , ] , ) def test_dump_raises ( data , schema ) : [EOL] [docstring] [EOL] try : [EOL] schema . dump ( data ) [EOL] except marshmallow_union . ExceptionGroup as e : [EOL] assert e . errors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import marshmallow [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing as t [EOL] [EOL] import marshmallow [EOL] import marshmallow . error_store [EOL] import marshmallow . exceptions [EOL] [EOL] [EOL] class MarshmallowUnionException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class ExceptionGroup ( MarshmallowUnionException ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , msg , errors ) : [EOL] self . msg = msg [EOL] self . errors = errors [EOL] super ( ) . __init__ ( msg , errors ) [EOL] [EOL] [EOL] class Union ( marshmallow . fields . Field ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , fields , reverse_serialize_candidates = False , ** kwargs ) : [EOL] self . _candidate_fields = fields [EOL] self . _reverse_serialize_candidates = reverse_serialize_candidates [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def _serialize ( self , value , attr , obj , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] error_store = kwargs . pop ( [string] , marshmallow . error_store . ErrorStore ( ) ) [EOL] fields = self . _candidate_fields [EOL] if self . _reverse_serialize_candidates : [EOL] fields = list ( reversed ( fields ) ) [EOL] [EOL] for candidate_field in fields : [EOL] [EOL] try : [EOL] [comment] [EOL] return candidate_field . _serialize ( value , attr , obj , error_store = error_store , ** kwargs ) [EOL] except ( TypeError , ValueError ) as e : [EOL] error_store . store_error ( { attr : e } ) [EOL] [EOL] raise ExceptionGroup ( [string] , error_store . errors ) [EOL] [EOL] def _deserialize ( self , value , attr = None , data = None , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] errors = [ ] [EOL] for candidate_field in self . _candidate_fields : [EOL] try : [EOL] return candidate_field . deserialize ( value , attr , data , ** kwargs ) [EOL] except marshmallow . exceptions . ValidationError as exc : [EOL] errors . append ( exc . messages ) [EOL] raise marshmallow . exceptions . ValidationError ( message = errors , field_name = attr ) [EOL] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[marshmallow.fields.Field]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[marshmallow.fields.Field]$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0