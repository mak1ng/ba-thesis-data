from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , packages = [ [string] , [string] ] , include_package_data = True , install_requires = [ [string] , [string] ] , entry_points = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework import status [EOL] [EOL] from core . models import Sheet , Tag , Instrument [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def user1_password ( ) : [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture def user2_password ( ) : [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture def user1 ( user1_password ) : [EOL] return get_user_model ( ) . objects . create_user ( username = [string] , email = [string] , password = user1_password ) [EOL] [EOL] [EOL] @ pytest . fixture def user2 ( user2_password ) : [EOL] return get_user_model ( ) . objects . create_user ( username = [string] , email = [string] , password = user2_password ) [EOL] [EOL] [EOL] @ pytest . fixture def tag1 ( user1 ) : [EOL] return Tag . objects . create ( name = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def tag2 ( user1 ) : [EOL] return Tag . objects . create ( name = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def sheet1 ( tmp_path , user1 ) : [EOL] tmp_file = tmp_path / [string] [EOL] with tmp_file . open ( [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] return Sheet . objects . create ( filename = [string] , sheet_type = [string] , file_format = [string] , user = user1 , sheet_file = str ( tmp_file ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def sheet2 ( tmp_path , user1 ) : [EOL] tmp_file = tmp_path / [string] [EOL] with tmp_file . open ( [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] return Sheet . objects . create ( filename = [string] , sheet_type = [string] , file_format = [string] , user = user1 , sheet_file = str ( tmp_file ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def user2_sheet ( tmp_path , user2 ) : [EOL] tmp_file = tmp_path / [string] [EOL] with tmp_file . open ( [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] return Sheet . objects . create ( filename = [string] , sheet_type = [string] , file_format = [string] , user = user2 , sheet_file = str ( tmp_file ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def instrument1 ( user1 ) : [EOL] return Instrument . objects . create ( name = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def instrument2 ( user1 ) : [EOL] return Instrument . objects . create ( name = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def user2_instrument ( user2 ) : [EOL] return Instrument . objects . create ( name = [string] , user = user2 ) [EOL] [EOL] [EOL] @ pytest . fixture def status_ok ( ) : [EOL] def _ok ( response ) : [EOL] return response . status_code == status . HTTP_200_OK [EOL] [EOL] return _ok [EOL] [EOL] [EOL] @ pytest . fixture def status_created ( ) : [EOL] def _created ( response ) : [EOL] return response . status_code == status . HTTP_201_CREATED [EOL] [EOL] return _created [EOL] [EOL] [EOL] @ pytest . fixture def status_bad_request ( ) : [EOL] def _bad ( response ) : [EOL] return response . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] return _bad [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] from core import models [EOL] [EOL] admin . register ( models . Sheet ) [EOL] admin . register ( models . Piece ) [EOL] admin . register ( models . Composer ) [EOL] admin . register ( models . Instrument ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import backend [EOL] import uuid [EOL] from pathlib import Path [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . db import models [EOL] [EOL] [EOL] def sheet_file_path ( _instance , filename ) : [EOL] [docstring] [EOL] return str ( Path ( [string] ) / [string] / f"{ uuid . uuid4 ( ) }" / filename ) [EOL] [EOL] [EOL] def _generate_short_name ( name ) : [EOL] [docstring] [EOL] name_parts = name . split ( [string] ) [EOL] lname = name_parts . pop ( ) [EOL] initials = [string] . join ( [ f"{ name [ [number] ] } [string] " for name in name_parts ] ) [EOL] return f"{ initials } [string] { lname }" . strip ( ) [EOL] [EOL] [EOL] class Composer ( models . Model ) : [EOL] [docstring] [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] born = models . DateField ( null = True ) [EOL] died = models . DateField ( null = True ) [EOL] is_alive = models . BooleanField ( default = False ) [EOL] era = models . CharField ( max_length = [number] ) [EOL] short_name = models . CharField ( max_length = [number] , blank = True ) [EOL] user = models . ForeignKey ( get_user_model ( ) , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] born = self . born . year if self . born else [string] [EOL] died = [string] [EOL] if self . died : [EOL] died = self . died . year [EOL] elif self . is_alive : [EOL] died = [string] [EOL] else : [EOL] died = [string] [EOL] [EOL] return f"{ self . name } [string] { born } [string] { died } [string] " [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] if not self . pk and not self . short_name : [EOL] self . short_name = _generate_short_name ( self . name ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class Sheet ( models . Model ) : [EOL] [docstring] [EOL] [EOL] filename = models . CharField ( max_length = [number] ) [EOL] file_format = models . CharField ( max_length = [number] ) [EOL] sheet_type = models . CharField ( max_length = [number] , blank = True ) [EOL] sheet_file = models . FileField ( upload_to = sheet_file_path ) [EOL] user = models . ForeignKey ( get_user_model ( ) , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . filename [EOL] [EOL] [EOL] class Piece ( models . Model ) : [EOL] [docstring] [EOL] [EOL] title = models . CharField ( max_length = [number] ) [EOL] catalog = models . CharField ( max_length = [number] , blank = True ) [EOL] composer = models . ManyToManyField ( to = [string] , related_name = [string] ) [EOL] sheets = models . ManyToManyField ( to = [string] , related_name = [string] ) [EOL] tags = models . ManyToManyField ( to = [string] , related_name = [string] ) [EOL] instruments = models . ManyToManyField ( to = [string] , related_name = [string] ) [EOL] user = models . ForeignKey ( get_user_model ( ) , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . title [EOL] [EOL] [EOL] class Tag ( models . Model ) : [EOL] [docstring] [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] user = models . ForeignKey ( get_user_model ( ) , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . name [EOL] [EOL] [EOL] class Instrument ( models . Model ) : [EOL] [docstring] [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] user = models . ForeignKey ( get_user_model ( ) , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Composer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Sheet]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Sheet]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Sheet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Sheet]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Sheet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Piece]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Instrument]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.core.models.Instrument]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Any , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , Union [EOL] from unittest import mock [EOL] [EOL] from django . core . management import call_command [EOL] from django . db import OperationalError [EOL] [EOL] [EOL] def test_make_js_api_interface ( tmp_path ) : [EOL] tmp_js = tmp_path / [string] [EOL] call_command ( [string] , [string] , str ( tmp_js ) ) [EOL] [EOL] with tmp_js . open ( [string] ) as js_file : [EOL] data = js_file . read ( ) [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] in data [EOL] assert [string] not in data [EOL] [EOL] [EOL] @ mock . patch ( [string] ) def test_wait_for_db_ready ( gi ) : [EOL] [docstring] [EOL] gi . return_value = True [EOL] call_command ( [string] ) [EOL] assert gi . call_count == [number] [EOL] [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] , return_value = True ) def test_wait_for_db ( _time_sleep , gi ) : [EOL] [docstring] [EOL] [comment] [EOL] gi . side_effect = [ OperationalError ] * [number] + [ True ] [EOL] call_command ( [string] ) [EOL] assert gi . call_count == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] [EOL] import pytest [EOL] [EOL] from core . models import Composer , Piece , sheet_file_path [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def composer1 ( user1 ) : [EOL] return Composer . objects . create ( name = [string] , born = datetime . date ( [number] , [number] , [number] ) , died = datetime . date ( [number] , [number] , [number] ) , era = [string] , user = user1 , ) [EOL] [EOL] [EOL] @ pytest . fixture def composer_no_dates ( user1 ) : [EOL] return Composer . objects . create ( name = [string] , era = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def composer_still_alive ( user1 ) : [EOL] return Composer . objects . create ( name = [string] , is_alive = True , born = datetime . date ( [number] , [number] , [number] ) , era = [string] , short_name = [string] , user = user1 , ) [EOL] [EOL] [EOL] @ pytest . fixture def piece1 ( composer1 , user1 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] piece . composer . add ( composer1 ) [EOL] return piece [EOL] [EOL] [EOL] class TestComposer : [EOL] def test_composer_str ( self , composer1 ) : [EOL] [docstring] [EOL] assert ( f"{ composer1 . name } [string] { composer1 . born . year } [string] { composer1 . died . year } [string] " == str ( composer1 ) ) [EOL] [EOL] def test_composer_str_without_dates ( self , composer_no_dates ) : [EOL] [docstring] [EOL] assert f"{ composer_no_dates . name } [string] " == str ( composer_no_dates ) [EOL] [EOL] def test_composer_str_still_alive ( self , composer_still_alive ) : [EOL] [docstring] [EOL] assert ( f"{ composer_still_alive . name } [string] { composer_still_alive . born . year } [string] " == str ( composer_still_alive ) ) [EOL] [EOL] def test_composer_generate_short_name ( self , composer1 ) : [EOL] [docstring] [EOL] assert [string] == composer1 . short_name [EOL] [EOL] def test_custom_short_name_has_priority ( self , composer_still_alive ) : [EOL] [docstring] [EOL] assert [string] == composer_still_alive . short_name [EOL] [EOL] def test_short_name_has_stripped_whitespace ( self , user1 ) : [EOL] [docstring] [EOL] test_comp = Composer . objects . create ( name = [string] , era = [string] , user = user1 ) [EOL] [EOL] assert test_comp . short_name == [string] [EOL] [EOL] [EOL] class TestSheet : [EOL] def test_sheet_str ( self , sheet1 ) : [EOL] [docstring] [EOL] assert sheet1 . filename == str ( sheet1 ) [EOL] [EOL] def test_file_added_correctly ( self , sheet1 ) : [EOL] [docstring] [EOL] with open ( str ( sheet1 . sheet_file ) , [string] ) as sheet_file : [EOL] assert [string] in sheet_file . read ( ) [EOL] [EOL] def test_sheet_path ( self , monkeypatch ) : [EOL] [docstring] [EOL] [EOL] def test_name ( ) : [EOL] return [string] [EOL] [EOL] monkeypatch . setattr ( [string] , test_name ) [EOL] file_path = sheet_file_path ( None , [string] ) [EOL] assert file_path == f" [string] " [EOL] [EOL] [EOL] class TestPiece : [EOL] def test_piece_str ( self , piece1 ) : [EOL] [docstring] [EOL] assert piece1 . title == str ( piece1 ) [EOL] [EOL] [EOL] class TestTag : [EOL] def test_tag_str ( self , tag1 ) : [EOL] [docstring] [EOL] assert tag1 . name == str ( tag1 ) [EOL] [EOL] [EOL] class TestInstrument : [EOL] def test_instrument_str ( self , instrument1 , instrument2 ) : [EOL] [docstring] [EOL] assert instrument1 . name == str ( instrument1 ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import io [EOL] import json [EOL] from io import StringIO [EOL] from pathlib import Path [EOL] [EOL] from django . core import management [EOL] from django . core . management import BaseCommand [EOL] [EOL] from core . management . commands . django_js_url_generator import make_js_api [EOL] [EOL] [EOL] def get_relevant_urls ( ) : [EOL] out = StringIO ( ) [EOL] management . call_command ( [string] , [string] , [string] , stdout = out ) [EOL] out . seek ( [number] ) [EOL] data = json . load ( out ) [EOL] urls = [ item [ [string] ] for item in data if [string] not in item [ [string] ] [EOL] and [string] not in item [ [string] ] [EOL] and [string] not in item [ [string] ] [EOL] and [string] not in item [ [string] ] ] [EOL] return urls [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [docstring] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] [docstring] [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] out = get_relevant_urls ( ) [EOL] make_js_api ( Path ( options [ [string] ] ) , out , options [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any , Literal , Type , Optional , Union , Dict , List [EOL] import pathlib [EOL] import typing [EOL] import typing_extensions [EOL] import backend [EOL] import builtins [EOL] import collections [EOL] from pathlib import Path [EOL] from typing import Dict , List , Optional [EOL] [EOL] [EOL] def write_javascript_head ( js_path , hostname ) : [EOL] [docstring] [EOL] js_path . parent . mkdir ( parents = True , exist_ok = True ) [EOL] lines = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , f" [string] { hostname } [string] " , [string] , [string] , [string] , [string] , ] [EOL] with js_path . open ( [string] ) as js_file : [EOL] js_file . write ( [string] . join ( lines ) ) [EOL] [EOL] [EOL] def make_html_method ( name , payload = False ) : [EOL] [docstring] [EOL] payload_arg = [string] if payload else [string] [EOL] return [string] . join ( [ f" [string] { name } [string] { payload_arg } [string] " [string] , [string] , f" [string] { name } [string] { payload_arg } [string] " , [string] , ] ) [EOL] [EOL] [EOL] def write_html_methods ( js_path ) : [EOL] [docstring] [EOL] functions = [ [string] . join ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) , [string] . join ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) , [string] . join ( [ [string] , [string] [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) , make_html_method ( [string] ) , make_html_method ( [string] ) , make_html_method ( [string] ) , make_html_method ( [string] ) , make_html_method ( [string] , payload = True ) , make_html_method ( [string] , payload = True ) , make_html_method ( [string] , payload = True ) , [string] . join ( [ [string] , [string] , [string] , [string] , ] ) , [string] . join ( [ [string] , [string] , [string] , [string] ] ) , ] [EOL] javascript_lines = [string] . join ( functions ) [EOL] with js_path . open ( [string] ) as js_file : [EOL] js_file . write ( javascript_lines ) [EOL] [EOL] [EOL] def write_javascript_foot ( js_path , urls ) : [EOL] [docstring] [EOL] url_comments = [ f" [string] { url }" for url in urls ] [EOL] lines = [ [string] , [string] , [string] , [string] , * url_comments , [string] , ] [EOL] with js_path . open ( [string] ) as js_file : [EOL] js_file . write ( [string] . join ( lines ) ) [EOL] [EOL] [EOL] Method = collections . namedtuple ( [string] , [ [string] , [string] , [string] ] , defaults = ( False , ) ) [EOL] [EOL] [EOL] class MethodList : [EOL] def __init__ ( self ) : [EOL] self . __methods = [ ] [EOL] [EOL] def __contains__ ( self , name ) : [EOL] for method in self . __methods : [EOL] if method . name == name : [EOL] return True [EOL] return False [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] yield from self . __methods [EOL] [EOL] def __getitem__ ( self , item ) : [EOL] for method in self . __methods : [EOL] if method . name == item : [EOL] return method [EOL] return None [EOL] [EOL] def index ( self , name ) : [EOL] for i , item in enumerate ( self . __methods ) : [EOL] if item . name == name : [EOL] return i [EOL] return None [EOL] [EOL] def replace ( self , item ) : [EOL] idx = self . index ( item . name ) [EOL] self . __methods [ idx ] = item [EOL] [EOL] def append ( self , item ) : [EOL] self . __methods . append ( item ) [EOL] [EOL] def __str__ ( self ) : [EOL] method_names = [ ] [EOL] for method in self . __methods : [EOL] method_names . append ( method . name ) [EOL] return str ( method_names ) [EOL] [EOL] [EOL] def get_unique_endpoints ( urls ) : [EOL] endpoints = { } [EOL] for url in urls : [EOL] url_parts = url . strip ( [string] ) . split ( [string] ) [EOL] end = url_parts . pop ( ) [EOL] arg = None [EOL] if [string] in end : [EOL] arg = end . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] end = url_parts . pop ( ) [EOL] if end in endpoints : [EOL] if not endpoints [ end ] : [EOL] endpoints [ end ] = arg [EOL] else : [EOL] endpoints [ end ] = arg [EOL] [EOL] return endpoints [EOL] [EOL] [EOL] class MethodFactory : [EOL] def __init__ ( self , urls ) : [EOL] self . methods = MethodList ( ) [EOL] self . urls = [ url . lstrip ( [string] ) for url in urls ] [EOL] self . endpoints = get_unique_endpoints ( self . urls ) [EOL] [EOL] def add_methods_from_endpoints ( self ) : [EOL] [docstring] [EOL] for name , arg in self . endpoints . items ( ) : [EOL] self . create_method ( name , arg ) [EOL] [EOL] def add_parent_methods ( self ) : [EOL] [docstring] [EOL] for url in self . urls : [EOL] self . _create_parents ( url ) [EOL] [EOL] def _create_parents ( self , url ) : [EOL] [docstring] [EOL] for part in url . split ( [string] ) : [EOL] if part not in self . methods and [string] not in part : [EOL] self . create_method ( part ) [EOL] [EOL] def create_method ( self , item , arg = [string] ) : [EOL] [docstring] [EOL] if not item : [EOL] return [EOL] if arg : [EOL] self . methods . append ( MethodFactory . _create_method_with_arg ( item , arg ) ) [EOL] else : [EOL] self . methods . append ( MethodFactory . _create_method_no_arg ( item ) ) [EOL] [EOL] @ staticmethod def _create_method_no_arg ( item ) : [EOL] [docstring] [EOL] javascript_lines = [ [string] , f" [string] { item . translate ( str . maketrans ( [string] , [string] ) ) } [string] " + [string] , f" [string] { item } [string] " , [string] , [string] , [string] , ] [EOL] return Method ( item , [string] . join ( javascript_lines ) , False ) [EOL] [EOL] @ staticmethod def _create_method_with_arg ( item , arg ) : [EOL] [docstring] [EOL] javascript_lines = [ [string] , f" [string] { item . translate ( str . maketrans ( [string] , [string] ) ) } [string] { arg } [string] " + [string] , f" [string] { item } [string] " , f" [string] { arg } [string] " + [string] , f" [string] { arg } [string] " , [string] , [string] , [string] , [string] , ] [EOL] return Method ( item , [string] . join ( javascript_lines ) , True ) [EOL] [EOL] def add_methods_to_file ( self , js_path ) : [EOL] [docstring] [EOL] self . add_methods_from_endpoints ( ) [EOL] self . add_parent_methods ( ) [EOL] for method in self . methods : [EOL] MethodFactory . add_method_to_file ( method , js_path ) [EOL] [EOL] @ staticmethod def add_method_to_file ( method , js_path ) : [EOL] [docstring] [EOL] with js_path . open ( [string] ) as js_file : [EOL] js_file . write ( method . javascript ) [EOL] [EOL] [EOL] def make_js_api ( js_path , urls , hostname ) : [EOL] [docstring] [EOL] factory = MethodFactory ( urls ) [EOL] write_javascript_head ( js_path , hostname ) [EOL] factory . add_methods_to_file ( js_path ) [EOL] write_html_methods ( js_path ) [EOL] write_javascript_foot ( js_path , urls ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[Method]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Method$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $Method$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 $Method$ 0 0 0 0 0 0 0 $Method$ 0 0 0 0 0 0 0 0 0 $Method$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.app.core.management.commands.django_js_url_generator.MethodList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $Method$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $Method$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $Method$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $Method$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MusicConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import backend [EOL] from rest_framework import serializers [EOL] [EOL] from core . models import Composer , Instrument , Piece , Sheet , Tag [EOL] [EOL] [EOL] class ComposerSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Composer [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class TagSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Tag [EOL] fields = ( [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class SheetSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Sheet [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class SheetFileSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Sheet [EOL] fields = ( [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class InstrumentSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Instrument [EOL] fields = ( [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] @ staticmethod def validate_name ( name ) : [EOL] [docstring] [EOL] return name . lower ( ) [EOL] [EOL] [EOL] class PieceSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] composer = serializers . PrimaryKeyRelatedField ( many = True , queryset = Composer . objects . all ( ) ) [EOL] tags = serializers . PrimaryKeyRelatedField ( many = True , queryset = Tag . objects . all ( ) ) [EOL] sheets = serializers . PrimaryKeyRelatedField ( many = True , queryset = Sheet . objects . all ( ) ) [EOL] instruments = serializers . PrimaryKeyRelatedField ( many = True , queryset = Instrument . objects . all ( ) ) [EOL] [EOL] class Meta : [EOL] model = Piece [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.serializers.PieceSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Dict , Any , Type [EOL] import typing [EOL] import backend [EOL] from rest_framework import status , viewsets [EOL] from rest_framework . decorators import action [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . response import Response [EOL] [EOL] from core . models import Composer , Instrument , Piece , Sheet , Tag [EOL] from music import serializers [EOL] [EOL] [EOL] class GenericMusicViewSet ( viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] [EOL] class BasicMusicAttrViewSet ( viewsets . ModelViewSet , GenericMusicViewSet ) : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return self . queryset . filter ( user = self . request . user ) . order_by ( [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] [docstring] [EOL] serializer . save ( user = self . request . user ) [EOL] [EOL] [EOL] class ComposerViewSet ( BasicMusicAttrViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = serializers . ComposerSerializer [EOL] queryset = Composer . objects . all ( ) [EOL] [EOL] [EOL] class TagViewSet ( BasicMusicAttrViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = serializers . TagSerializer [EOL] queryset = Tag . objects . all ( ) [EOL] [EOL] [EOL] class InstrumentViewSet ( BasicMusicAttrViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = serializers . InstrumentSerializer [EOL] queryset = Instrument . objects . all ( ) [EOL] [EOL] [EOL] class SheetViewSet ( BasicMusicAttrViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = serializers . SheetSerializer [EOL] queryset = Sheet . objects . all ( ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] [docstring] [EOL] if self . action == [string] : [EOL] return serializers . SheetFileSerializer [EOL] return self . serializer_class [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return self . queryset . filter ( user = self . request . user ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True , url_path = [string] ) def upload_file ( self , request , pk = None ) : [EOL] [docstring] [EOL] sheet = self . get_object ( ) [EOL] serializer = self . get_serializer ( sheet , data = request . data ) [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] def _params_to_ints ( querystring ) : [EOL] [docstring] [EOL] return [ int ( str_id ) for str_id in querystring . split ( [string] ) ] [EOL] [EOL] [EOL] def _filter_on_attr ( queryset , attr_params , attr_name ) : [EOL] if attr_params : [EOL] [comment] [EOL] filters = { f"{ attr_name } [string] " : _params_to_ints ( attr_params ) } [EOL] return queryset . filter ( ** filters ) [EOL] return queryset [EOL] [EOL] [EOL] class PieceViewSet ( viewsets . ModelViewSet , GenericMusicViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = serializers . PieceSerializer [EOL] queryset = Piece . objects . all ( ) [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] queryset = self . queryset [EOL] for attr_name in [ [string] , [string] , [string] ] : [EOL] attr_params = self . request . query_params . get ( attr_name ) [EOL] queryset = _filter_on_attr ( queryset , attr_params , attr_name ) [EOL] era = self . request . query_params . get ( [string] ) [EOL] catalog = self . request . query_params . get ( [string] ) [EOL] if era : [EOL] queryset = queryset . filter ( composer__era__icontains = era ) [EOL] if catalog : [EOL] queryset = queryset . filter ( catalog__icontains = catalog ) [EOL] return queryset . filter ( user = self . request . user ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] [docstring] [EOL] serializer . save ( user = self . request . user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.views.ComposerViewSet]$ 0 0 0 0 0 $typing.Type[backend.app.music.views.ComposerViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.views.TagViewSet]$ 0 0 0 0 0 $typing.Type[backend.app.music.views.TagViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.views.InstrumentViewSet]$ 0 0 0 0 0 $typing.Type[backend.app.music.views.InstrumentViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.views.SheetViewSet]$ 0 0 0 0 0 $typing.Type[backend.app.music.views.SheetViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.music.views.PieceViewSet]$ 0 0 0 0 0 $typing.Type[backend.app.music.views.PieceViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from music import views [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , views . ComposerViewSet ) [EOL] router . register ( [string] , views . TagViewSet ) [EOL] router . register ( [string] , views . SheetViewSet ) [EOL] router . register ( [string] , views . PieceViewSet ) [EOL] router . register ( [string] , views . InstrumentViewSet ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import typing [EOL] import pytest [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] [EOL] from core . models import Tag [EOL] from music . serializers import TagSerializer [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def tag_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def user2_tag ( user2 ) : [EOL] return Tag . objects . create ( name = [string] , user = user2 ) [EOL] [EOL] [EOL] class TestPublicTagAPI : [EOL] [docstring] [EOL] [EOL] def test_login_required ( self , tag_url , test_login_required ) : [EOL] [docstring] [EOL] assert test_login_required ( tag_url ) [EOL] [EOL] [EOL] class TestPrivateTagAPI : [EOL] [docstring] [EOL] [EOL] def test_retrieve_tag_list ( self , get_list_and_serializer , tag_url , tag1 , tag2 , all_data_in_res , status_ok , no_extra_data_in_res , ) : [EOL] [docstring] [EOL] res , serializer = get_list_and_serializer ( tag_url , Tag , TagSerializer ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert all_data_in_res ( res , serializer ) [EOL] assert no_extra_data_in_res ( res , serializer ) [EOL] [EOL] def test_tags_limited_to_user ( self , authenticated_client , tag_url , tag1 , user2_tag , status_ok ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( tag_url ) [EOL] [EOL] assert status_ok ( res ) [EOL] assert len ( res . data ) == [number] [EOL] assert res . data [ [number] ] [ [string] ] == tag1 . name [EOL] [EOL] def test_create_tag_successful ( self , authenticated_client , tag_url , user1 ) : [EOL] [docstring] [EOL] payload = { [string] : [string] } [EOL] authenticated_client . post ( tag_url , payload ) [EOL] [EOL] assert Tag . objects . filter ( user = user1 , name = payload [ [string] ] ) . exists ( ) [EOL] [EOL] def test_create_tag_invalid ( self , authenticated_client , tag_url ) : [EOL] [docstring] [EOL] payload = { [string] : [string] } [EOL] res = authenticated_client . post ( tag_url , payload ) [EOL] [EOL] assert res . status_code == status . HTTP_400_BAD_REQUEST [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] [EOL] import pytest [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient [EOL] [EOL] from core . models import Composer [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . fixture def public_client ( ) : [EOL] return APIClient ( ) [EOL] [EOL] [EOL] @ pytest . fixture def authenticated_client ( user1 ) : [EOL] client = APIClient ( ) [EOL] client . force_authenticate ( user1 ) [EOL] return client [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . fixture def composer1 ( user1 ) : [EOL] return Composer . objects . create ( name = [string] , born = datetime . date ( [number] , [number] , [number] ) , died = datetime . date ( [number] , [number] , [number] ) , era = [string] , short_name = [string] , user = user1 , ) [EOL] [EOL] [EOL] @ pytest . fixture def composer2 ( user1 ) : [EOL] return Composer . objects . create ( name = [string] , born = datetime . date ( [number] , [number] , [number] ) , died = datetime . date ( [number] , [number] , [number] ) , era = [string] , user = user1 , ) [EOL] [EOL] [EOL] @ pytest . fixture def user2_composer ( user2 ) : [EOL] return Composer . objects . create ( name = [string] , born = datetime . date ( [number] , [number] , [number] ) , died = datetime . date ( [number] , [number] , [number] ) , era = [string] , user = user2 , ) [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . fixture def test_login_required ( public_client ) : [EOL] [docstring] [EOL] [EOL] def _test ( url ) : [EOL] res = public_client . get ( url ) [EOL] return res . status_code == status . HTTP_401_UNAUTHORIZED [EOL] [EOL] return _test [EOL] [EOL] [EOL] @ pytest . fixture def get_list_and_serializer ( authenticated_client ) : [EOL] [docstring] [EOL] [EOL] def _get ( url , model_class , serializer_class ) : [EOL] res = authenticated_client . get ( url ) [EOL] items = model_class . objects . all ( ) [EOL] serializer = serializer_class ( items , many = True ) [EOL] return res , serializer [EOL] [EOL] return _get [EOL] [EOL] [EOL] @ pytest . fixture def all_data_in_res ( ) : [EOL] def _has_data ( response , serializer ) : [EOL] for item in serializer . data : [EOL] if item not in response . data : [EOL] return False [EOL] return True [EOL] [EOL] return _has_data [EOL] [EOL] [EOL] @ pytest . fixture def no_extra_data_in_res ( ) : [EOL] def _no_extra ( response , serializer ) : [EOL] for item in response . data : [EOL] if item not in serializer . data : [EOL] return False [EOL] return True [EOL] [EOL] return _no_extra [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , List [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] [EOL] from core . models import Sheet [EOL] from music . serializers import SheetSerializer [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def sheets_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def sheet_upload_url ( ) : [EOL] def _url ( sheet_id ) : [EOL] return reverse ( [string] , args = [ sheet_id ] ) [EOL] [EOL] return _url [EOL] [EOL] [EOL] @ pytest . fixture def sheet_no_file ( user1 ) : [EOL] return Sheet . objects . create ( filename = [string] , sheet_type = [string] , file_format = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def test_file ( tmp_path ) : [EOL] tmp_file = tmp_path / [string] [EOL] with tmp_file . open ( [string] ) as fp : [EOL] fp . write ( [string] ) [EOL] return tmp_file [EOL] [EOL] [EOL] class TestPublicSheetAPI : [EOL] [docstring] [EOL] [EOL] def test_login_required ( self , test_login_required , sheets_url ) : [EOL] [docstring] [EOL] assert test_login_required ( sheets_url ) [EOL] [EOL] [EOL] class TestPrivateSheetAPI : [EOL] [docstring] [EOL] [EOL] def test_retrieve_sheet_list ( self , get_list_and_serializer , sheets_url , sheet1 , sheet2 ) : [EOL] [docstring] [EOL] res , serializer = get_list_and_serializer ( sheets_url , Sheet , SheetSerializer ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert len ( res . data ) == [number] [EOL] filenames = [ item [ [string] ] for item in res . data ] [EOL] for item in serializer . data : [EOL] assert item [ [string] ] in filenames [EOL] [EOL] def test_sheets_limited_to_user ( self , authenticated_client , sheets_url , user1 , sheet1 , user2_sheet ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( sheets_url ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert len ( res . data ) == [number] [EOL] assert res . data [ [number] ] [ [string] ] == sheet1 . filename [EOL] [EOL] filenames = [ item [ [string] ] for item in res . data ] [EOL] assert user2_sheet . filename not in filenames [EOL] [EOL] def test_sheet_created_with_file_successful ( self , authenticated_client , sheets_url , user1 , test_file ) : [EOL] [docstring] [EOL] with test_file . open ( [string] ) as the_file : [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : the_file , } [EOL] authenticated_client . post ( sheets_url , payload , format = [string] ) [EOL] [EOL] assert Sheet . objects . filter ( user = user1 , filename = payload [ [string] ] ) . exists ( ) [EOL] [EOL] def test_sheet_created_without_file_fails ( self , authenticated_client , sheets_url , user1 ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] res = authenticated_client . post ( sheets_url , payload ) [EOL] [EOL] assert res . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] def test_create_sheet_invalid ( self , authenticated_client , sheets_url ) : [EOL] [docstring] [EOL] payload = { [string] : [string] } [EOL] res = authenticated_client . post ( sheets_url , payload ) [EOL] [EOL] assert res . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] def test_uploading_file_to_sheet ( self , authenticated_client , sheet_upload_url , sheet_no_file , tmp_path , test_file ) : [EOL] [docstring] [EOL] url = sheet_upload_url ( sheet_no_file . id ) [EOL] [EOL] with test_file . open ( [string] ) as the_file : [EOL] res = authenticated_client . post ( url , { [string] : the_file } , format = [string] ) [EOL] [EOL] sheet_no_file . refresh_from_db ( ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert [string] in res . data [EOL] assert os . path . exists ( sheet_no_file . sheet_file . path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import pytest [EOL] from django . urls import reverse [EOL] [EOL] from core . models import Piece [EOL] from music . serializers import PieceSerializer [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def piece_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def piece2 ( composer1 , user1 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] piece . composer . add ( composer1 ) [EOL] return piece [EOL] [EOL] [EOL] @ pytest . fixture def piece3 ( composer2 , user1 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] piece . composer . add ( composer2 ) [EOL] return piece [EOL] [EOL] [EOL] @ pytest . fixture def piece4 ( user1 ) : [EOL] return Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] [EOL] [EOL] @ pytest . fixture def user2_piece ( composer2 , user2 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user2 ) [EOL] piece . composer . add ( composer2 ) [EOL] return piece [EOL] [EOL] [EOL] @ pytest . fixture def piece_tag1_composer1 ( tag1 , composer1 , instrument1 , user1 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] piece . tags . add ( tag1 ) [EOL] piece . composer . add ( composer1 ) [EOL] piece . instruments . add ( instrument1 ) [EOL] return piece [EOL] [EOL] [EOL] @ pytest . fixture def piece_tag2_composer2 ( tag2 , composer2 , instrument2 , user1 ) : [EOL] piece = Piece . objects . create ( title = [string] , catalog = [string] , user = user1 ) [EOL] piece . tags . add ( tag2 ) [EOL] piece . composer . add ( composer2 ) [EOL] piece . instruments . add ( instrument2 ) [EOL] return piece [EOL] [EOL] [EOL] @ pytest . fixture def piece2_serializer ( piece2 ) : [EOL] return PieceSerializer ( piece2 ) [EOL] [EOL] [EOL] @ pytest . fixture def piece3_serializer ( piece3 ) : [EOL] return PieceSerializer ( piece3 ) [EOL] [EOL] [EOL] @ pytest . fixture def piece4_serializer ( piece4 ) : [EOL] return PieceSerializer ( piece4 ) [EOL] [EOL] [EOL] @ pytest . fixture def piece_tag1_composer1_serializer ( piece_tag1_composer1 ) : [EOL] return PieceSerializer ( piece_tag1_composer1 ) [EOL] [EOL] [EOL] @ pytest . fixture def piece_tag2_composer2_serializer ( piece_tag2_composer2 ) : [EOL] return PieceSerializer ( piece_tag2_composer2 ) [EOL] [EOL] [EOL] @ pytest . fixture def test_piece_payload ( ) : [EOL] def _make_payload ( ** kwargs ) : [EOL] payload = { [string] : [string] , [string] : [string] , ** kwargs } [EOL] return payload [EOL] [EOL] return _make_payload [EOL] [EOL] [EOL] class TestPublicPieceAPI : [EOL] [docstring] [EOL] [EOL] def test_login_required ( self , test_login_required , piece_url ) : [EOL] [docstring] [EOL] assert test_login_required ( piece_url ) [EOL] [EOL] [EOL] class TestPrivatePieceAPI : [EOL] [docstring] [EOL] [EOL] def test_retrieve_piece_list ( self , piece2 , piece3 , piece_url , get_list_and_serializer , status_ok , all_data_in_res , no_extra_data_in_res , ) : [EOL] [docstring] [EOL] res , serializer = get_list_and_serializer ( piece_url , Piece , PieceSerializer ) [EOL] [EOL] assert status_ok ( res ) [EOL] assert all_data_in_res ( res , serializer ) [EOL] assert no_extra_data_in_res ( res , serializer ) [EOL] [EOL] def test_pieces_limited_to_user ( self , piece2 , user2_piece , piece_url , authenticated_client , status_ok ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url ) [EOL] [EOL] assert status_ok ( res ) [EOL] assert len ( res . data ) == [number] [EOL] assert res . data [ [number] ] [ [string] ] == piece2 . title [EOL] [EOL] def test_create_piece_successful ( self , authenticated_client , piece_url , user1 , test_piece_payload , status_created ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] assert Piece . objects . filter ( user = user1 , title = payload [ [string] ] ) . exists ( ) [EOL] [EOL] def test_create_piece_invalid ( self , authenticated_client , piece_url , status_bad_request ) : [EOL] [docstring] [EOL] payload = { [string] : [string] } [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_bad_request ( res ) [EOL] [EOL] def test_create_piece_with_composer ( self , authenticated_client , piece_url , composer1 , test_piece_payload , status_created , ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( composer = [ composer1 . id ] ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] [EOL] new_piece = Piece . objects . get ( id = res . data [ [string] ] ) [EOL] composers = new_piece . composer . all ( ) [EOL] [EOL] assert composers . count ( ) == [number] [EOL] assert composer1 in composers [EOL] [EOL] def test_create_piece_with_tags ( self , authenticated_client , piece_url , tag1 , tag2 , test_piece_payload , status_created , ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( tags = [ tag1 . id , tag2 . id ] ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] [EOL] new_piece = Piece . objects . get ( id = res . data [ [string] ] ) [EOL] tags = new_piece . tags . all ( ) [EOL] [EOL] assert tags . count ( ) == [number] [EOL] assert tag1 in tags [EOL] assert tag2 in tags [EOL] [EOL] def test_create_piece_with_sheets ( self , authenticated_client , piece_url , sheet1 , sheet2 , test_piece_payload , status_created , ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( sheets = [ sheet1 . id , sheet2 . id ] ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] [EOL] new_piece = Piece . objects . get ( id = res . data [ [string] ] ) [EOL] sheets = new_piece . sheets . all ( ) [EOL] [EOL] assert sheets . count ( ) == [number] [EOL] assert sheet1 in sheets [EOL] assert sheet2 in sheets [EOL] [EOL] def test_create_piece_with_instruments ( self , authenticated_client , piece_url , instrument1 , instrument2 , test_piece_payload , status_created , ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( instruments = [ instrument1 . id , instrument2 . id ] ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] [EOL] new_piece = Piece . objects . get ( id = res . data [ [string] ] ) [EOL] instruments = new_piece . instruments . all ( ) [EOL] [EOL] assert instruments . count ( ) == [number] [EOL] assert instrument1 in instruments [EOL] assert instrument2 in instruments [EOL] [EOL] def test_create_piece_everything ( self , authenticated_client , piece_url , composer1 , tag1 , sheet1 , instrument1 , test_piece_payload , status_created , ) : [EOL] [docstring] [EOL] payload = test_piece_payload ( composer = [ composer1 . id ] , tags = [ tag1 . id ] , sheets = [ sheet1 . id ] , instruments = [ instrument1 . id ] , ) [EOL] res = authenticated_client . post ( piece_url , payload ) [EOL] [EOL] assert status_created ( res ) [EOL] [EOL] def test_filter_pieces_by_tag ( self , authenticated_client , piece_url , piece2_serializer , piece_tag1_composer1_serializer , piece_tag2_composer2_serializer , tag1 , tag2 , ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url , { [string] : f"{ tag1 . id } [string] { tag2 . id }" } ) [EOL] [EOL] assert piece_tag1_composer1_serializer . data in res . data [EOL] assert piece_tag2_composer2_serializer . data in res . data [EOL] assert piece2_serializer . data not in res . data [EOL] [EOL] def test_filter_pieces_by_instrument ( self , authenticated_client , piece_url , piece2_serializer , piece_tag1_composer1_serializer , piece_tag2_composer2_serializer , instrument1 , instrument2 , ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url , { [string] : f"{ instrument1 . id } [string] { instrument2 . id }" } ) [EOL] [EOL] assert piece_tag1_composer1_serializer . data in res . data [EOL] assert piece_tag2_composer2_serializer . data in res . data [EOL] assert piece2_serializer . data not in res . data [EOL] [EOL] def test_filter_pieces_by_composer ( self , authenticated_client , piece_url , piece4_serializer , piece_tag1_composer1_serializer , piece_tag2_composer2_serializer , composer1 , composer2 , ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url , { [string] : f"{ composer1 . id } [string] { composer2 . id }" } ) [EOL] [EOL] assert piece_tag1_composer1_serializer . data in res . data [EOL] assert piece_tag2_composer2_serializer . data in res . data [EOL] assert piece4_serializer . data not in res . data [EOL] [EOL] def test_search_pieces_by_era ( self , authenticated_client , piece_url , piece3_serializer , piece_tag1_composer1_serializer , piece_tag2_composer2_serializer , composer1 , composer2 , ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url , { [string] : f"{ composer1 . era . lower ( ) }" } ) [EOL] [EOL] assert piece_tag1_composer1_serializer . data in res . data [EOL] assert piece3_serializer . data not in res . data [EOL] [EOL] def test_search_pieces_by_catalog ( self , authenticated_client , piece_url , piece2 , piece2_serializer , piece3 , piece3_serializer , piece_tag1_composer1_serializer , ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( piece_url , { [string] : f"{ piece2 . catalog . lower ( ) }" } ) [EOL] [EOL] assert piece2_serializer . data in res . data [EOL] assert piece_tag1_composer1_serializer . data not in res . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Union , Any , Dict [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] [EOL] import pytest [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] [EOL] from core . models import Composer [EOL] from music . serializers import ComposerSerializer [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def composer_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] class TestPublicComposerAPI : [EOL] [docstring] [EOL] [EOL] def test_login_required ( self , test_login_required , composer_url ) : [EOL] [docstring] [EOL] assert test_login_required ( composer_url ) [EOL] [EOL] [EOL] class TestPrivateComposerAPI : [EOL] [docstring] [EOL] [EOL] def test_retrieve_composer_list ( self , get_list_and_serializer , composer_url , composer1 , composer2 , status_ok , no_extra_data_in_res , all_data_in_res , ) : [EOL] [docstring] [EOL] res , serializer = get_list_and_serializer ( composer_url , Composer , ComposerSerializer ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert no_extra_data_in_res ( res , serializer ) [EOL] assert all_data_in_res ( res , serializer ) [EOL] [EOL] def test_composers_limited_to_user ( self , authenticated_client , composer_url , composer1 , user2_composer ) : [EOL] [docstring] [EOL] res = authenticated_client . get ( composer_url ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert len ( res . data ) == [number] [EOL] assert res . data [ [number] ] [ [string] ] == composer1 . name [EOL] [EOL] def test_create_composer_successful ( self , authenticated_client , composer_url , user1 ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : datetime . date ( [number] , [number] , [number] ) , [string] : datetime . date ( [number] , [number] , [number] ) , [string] : [string] , } [EOL] authenticated_client . post ( composer_url , payload ) [EOL] [EOL] assert Composer . objects . filter ( user = user1 , name = payload [ [string] ] ) . exists ( ) [EOL] [EOL] def test_create_composer_with_shortname ( self , authenticated_client , composer_url , user1 ) : [EOL] [docstring] [EOL] payload = { [string] : [string] , [string] : datetime . date ( [number] , [number] , [number] ) , [string] : datetime . date ( [number] , [number] , [number] ) , [string] : [string] , [string] : [string] , } [EOL] [EOL] authenticated_client . post ( composer_url , payload ) [EOL] [EOL] composer_query = Composer . objects . filter ( user = user1 , name = payload [ [string] ] ) [EOL] [EOL] assert composer_query . exists ( ) [EOL] assert composer_query [ [number] ] . short_name == payload [ [string] ] [EOL] [EOL] def test_create_composer_invalid ( self , authenticated_client , composer_url ) : [EOL] [docstring] [EOL] payload = { [string] : [string] } [EOL] res = authenticated_client . post ( composer_url , payload ) [EOL] [EOL] assert res . status_code == status . HTTP_400_BAD_REQUEST [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.date,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from allauth . account . views import ConfirmEmailView [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from rest_auth . views import PasswordResetConfirmView [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , PasswordResetConfirmView . as_view , name = [string] , ) , path ( [string] , ConfirmEmailView . as_view ( ) , name = [string] , ) , path ( [string] , include_docs_urls ( title = [string] , authentication_classes = [ ] , permission_classes = [ ] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Union , Dict , List [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] import datetime [EOL] import os [EOL] [EOL] import environ [EOL] [EOL] env = environ . Env ( DEBUG = ( bool , False ) ) [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] TEMPLATE_DIR = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = env ( [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = env ( [string] ) [EOL] [EOL] ALLOWED_HOSTS = env . list ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ TEMPLATE_DIR ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] } , } ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : env ( [string] ) , [string] : env ( [string] ) , [string] : env ( [string] ) , [string] : env ( [string] ) , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = [string] [EOL] STATIC_ROOT = [string] [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( BASE_DIR , [string] ) ] [EOL] [EOL] [comment] [EOL] USE_X_FORWARDED_HOST = True [EOL] [EOL] SITE_ID = [number] [EOL] [EOL] [EOL] [comment] [EOL] ACCOUNT_AUTHENTICATION_METHOD = [string] [EOL] ACCOUNT_EMAIL_REQUIRED = True [EOL] ACCOUNT_USERNAME_REQUIRED = False [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , [string] , ) [EOL] [EOL] REST_AUTH_TOKEN_MODEL = [string] [EOL] REST_AUTH_TOKEN_CREATOR = [string] [EOL] REST_AUTH_SERIALIZERS = { [string] : [string] , [string] : [string] , } [EOL] [EOL] TOKEN_TTL = datetime . timedelta ( hours = env . int ( [string] ) ) [EOL] [EOL] [comment] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] ANYMAIL = { [string] : env ( [string] ) , [string] : [string] , } [EOL] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_HOST_USER = DEFAULT_FROM_EMAIL = [string] [EOL] [EOL] [comment] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) , [string] : ( [string] , ) , [string] : ( [string] , ) , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] CORS_ORIGIN_ALLOW_ALL = True [EOL] [comment] [EOL] [EOL] FILE_UPLOAD_PERMISSIONS = [number] [EOL] FILE_UPLOAD_DIRECTORY_PERMISSIONS = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import backend [EOL] from rest_auth . serializers import UserDetailsSerializer [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class KnoxSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] token = serializers . CharField ( ) [EOL] user = UserDetailsSerializer ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.app.accounts.serializers.KnoxSerializer]$ 0 0 0 0 0 0 0 $typing.Type[backend.app.accounts.serializers.KnoxSerializer]$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from knox . models import AuthToken [EOL] [EOL] [EOL] def create_knox_token ( _token_model , user , _serializer ) : [EOL] token = AuthToken . objects . create ( user = user ) [EOL] return token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from allauth . account import app_settings as allauth_settings [EOL] from allauth . account . utils import complete_signup [EOL] from rest_auth . registration . views import RegisterView [EOL] from rest_auth . views import LoginView [EOL] from rest_framework . response import Response [EOL] [EOL] from accounts . serializers import KnoxSerializer [EOL] from accounts . utils import create_knox_token [EOL] [EOL] [EOL] class KnoxLoginView ( LoginView ) : [EOL] [docstring] [EOL] [EOL] def get_response ( self ) : [EOL] [docstring] [EOL] serializer_class = self . get_response_serializer ( ) [EOL] [EOL] data = { [string] : self . user , [string] : self . token } [EOL] serializer = serializer_class ( instance = data , context = { [string] : self . request } ) [EOL] [EOL] return Response ( serializer . data , status = [number] ) [EOL] [EOL] [EOL] class KnoxRegisterView ( RegisterView ) : [EOL] [docstring] [EOL] [EOL] def get_response_data ( self , user ) : [EOL] serializer = KnoxSerializer ( { [string] : user , [string] : self . token } ) [EOL] return serializer . data [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] [docstring] [EOL] user = serializer . save ( self . request ) [EOL] self . token = create_knox_token ( None , user , None ) [EOL] complete_signup ( self . request . _request , user , allauth_settings . EMAIL_VERIFICATION , None ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . urls import reverse [EOL] from knox . models import AuthToken [EOL] from rest_framework import status [EOL] from rest_framework . test import APIClient [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] @ pytest . fixture def login_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def logout_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def registration_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def logoutall_url ( ) : [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def client ( ) : [EOL] return APIClient ( ) [EOL] [EOL] [EOL] @ pytest . fixture def login_payload ( user1 , user1_password ) : [EOL] return { [string] : user1 . email , [string] : user1_password } [EOL] [EOL] [EOL] def test_login_returns_token ( client , login_url , login_payload , user1 ) : [EOL] [docstring] [EOL] res = client . post ( login_url , login_payload ) [EOL] [EOL] assert res . status_code == status . HTTP_200_OK [EOL] assert [string] in res . data [EOL] [EOL] [EOL] def test_login_returns_different_token ( login_payload , login_url , client ) : [EOL] [docstring] [EOL] res1 = client . post ( login_url , login_payload ) [EOL] res2 = client . post ( login_url , login_payload ) [EOL] [EOL] assert res1 . status_code == status . HTTP_200_OK [EOL] assert res2 . status_code == status . HTTP_200_OK [EOL] [EOL] assert res1 . data [ [string] ] != res2 . data [ [string] ] [EOL] [EOL] [EOL] def test_logout_deletes_token ( client , login_url , login_payload , logout_url ) : [EOL] [docstring] [EOL] res1 = client . post ( login_url , login_payload ) [EOL] client . credentials ( HTTP_AUTHORIZATION = f" [string] { res1 . data [ [string] ] }" ) [EOL] res2 = client . post ( logout_url ) [EOL] [EOL] assert res2 . status_code == status . HTTP_204_NO_CONTENT [EOL] assert len ( AuthToken . objects . filter ( token_key__in = res1 . data [ [string] ] ) ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any , List [EOL] import typing [EOL] import os [EOL] [EOL] import click [EOL] [EOL] cmd_folder = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] cmd_prefix = [string] [EOL] [EOL] [EOL] class CLI ( click . MultiCommand ) : [EOL] def list_commands ( self , ctx ) : [EOL] [docstring] [EOL] commands = [ ] [EOL] [EOL] for filename in os . listdir ( cmd_folder ) : [EOL] if filename . endswith ( [string] ) and filename . startswith ( cmd_prefix ) : [EOL] commands . append ( filename [ [number] : - [number] ] ) [EOL] [EOL] commands . sort ( ) [EOL] [EOL] return commands [EOL] [EOL] def get_command ( self , ctx , name ) : [EOL] [docstring] [EOL] ns = { } [EOL] [EOL] filename = os . path . join ( cmd_folder , cmd_prefix + name + [string] ) [EOL] [EOL] with open ( filename ) as f : [EOL] code = compile ( f . read ( ) , filename , [string] ) [EOL] eval ( code , ns , ns ) [EOL] [EOL] return ns [ [string] ] [EOL] [EOL] [EOL] @ click . command ( cls = CLI ) def cli ( ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import subprocess [EOL] [EOL] import click [EOL] [EOL] from cli . commands . build_frontend import build_js_frontend [EOL] [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] ) @ click . option ( [string] , is_flag = True ) def cli ( service , build_frontend ) : [EOL] [docstring] [EOL] if build_frontend : [EOL] build_js_frontend ( ) [EOL] [EOL] cmd = f" [string] { service }" [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import click [EOL] [EOL] from cli . commands . build_requirements import build_py_requirements [EOL] [EOL] [EOL] @ click . command ( ) def cli ( ) : [EOL] [docstring] [EOL] build_py_requirements ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import os [EOL] import subprocess [EOL] from pathlib import Path [EOL] [EOL] from dotenv import load_dotenv [EOL] [EOL] [EOL] def build_js_frontend ( ) : [EOL] load_dotenv ( ) [EOL] PROJECT_ROOT = os . environ . get ( [string] , [string] ) [EOL] frontend_dir = Path ( PROJECT_ROOT ) / [string] [EOL] subprocess . run ( [ [string] , [string] ] , cwd = frontend_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] import pathlib [EOL] import os [EOL] import subprocess [EOL] from pathlib import Path [EOL] [EOL] from dotenv import load_dotenv [EOL] [EOL] load_dotenv ( ) [EOL] PROJECT_ROOT = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def build_py_requirements ( ) : [EOL] [docstring] [EOL] [EOL] result_main = subprocess . run ( [ [string] , [string] , [string] , [string] ] , cwd = PROJECT_ROOT , stdout = subprocess . PIPE ) [EOL] result_dev = subprocess . run ( [ [string] , [string] , [string] , [string] , [string] ] , cwd = PROJECT_ROOT , stdout = subprocess . PIPE , ) [EOL] text = [string] . join ( [ result_main . stdout , result_dev . stdout ] ) [EOL] requirements = Path ( PROJECT_ROOT ) / [string] [EOL] with requirements . open ( [string] ) as req : [EOL] req . write ( text ) [EOL] return requirements [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] import click [EOL] [EOL] [EOL] @ click . command ( ) def cli ( ) : [EOL] [docstring] [EOL] cmd = f' [string] ' [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] import click [EOL] [EOL] from cli . commands . build_frontend import build_js_frontend [EOL] from cli . commands . build_requirements import build_py_requirements [EOL] [EOL] [EOL] @ click . command ( ) def cli ( ) : [EOL] [docstring] [EOL] build_js_frontend ( ) [EOL] build_py_requirements ( ) [EOL] cmd = [string] [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] import click [EOL] [EOL] [EOL] @ click . command ( ) def cli ( ) : [EOL] [docstring] [EOL] cmd = [string] [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import click [EOL] [EOL] from cli . commands . build_frontend import build_js_frontend [EOL] [EOL] [EOL] @ click . command ( ) def cli ( ) : [EOL] [docstring] [EOL] build_js_frontend ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import subprocess [EOL] [EOL] import click [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , [string] , is_flag = True ) @ click . option ( [string] , is_flag = True ) @ click . option ( [string] , is_flag = True ) @ click . option ( [string] , [string] , is_flag = True ) def cli ( verbose , cov , picked , multi_thread ) : [EOL] [docstring] [EOL] pytest_options = [ [string] ] [EOL] if verbose : [EOL] pytest_options . append ( [string] ) [EOL] if cov : [EOL] pytest_options . append ( [string] ) [EOL] if picked : [EOL] pytest_options . append ( [string] ) [EOL] if multi_thread : [EOL] pytest_options . append ( [string] ) [EOL] [EOL] sub_cmd = [ [string] , * pytest_options , [string] , [string] , [string] , [string] , [string] , ] [EOL] subprocess . Popen ( [ [string] , [string] ] ) [EOL] sub_cmd_str = [string] . join ( sub_cmd ) [EOL] cmd = [ [string] , [string] , [string] , [string] , [string] , f' [string] { sub_cmd_str } [string] ' ] [EOL] return subprocess . call ( [string] . join ( cmd ) , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import subprocess [EOL] [EOL] import click [EOL] [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] , default = [string] ) def cli ( app ) : [EOL] [docstring] [EOL] cmd = f' [string] { app } [string] ' [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import os [EOL] import subprocess [EOL] from pathlib import Path [EOL] [EOL] import click [EOL] from dotenv import load_dotenv [EOL] [EOL] from cli . commands . build_frontend import build_js_frontend [EOL] from cli . commands . build_requirements import build_py_requirements [EOL] [EOL] load_dotenv ( ) [EOL] PROJECT_ROOT = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , is_flag = True ) def cli ( build_frontend ) : [EOL] [docstring] [EOL] if build_frontend : [EOL] build_js_frontend ( ) [EOL] [EOL] requirements = Path ( PROJECT_ROOT ) / [string] [EOL] if not requirements . exists ( ) : [EOL] build_py_requirements ( ) [EOL] [EOL] cmd = [string] [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] import click [EOL] [EOL] [EOL] @ click . command ( context_settings = { [string] : True } ) @ click . argument ( [string] ) @ click . argument ( [string] , nargs = - [number] ) def cli ( command , arg ) : [EOL] [docstring] [EOL] arg = [string] . join ( arg ) [EOL] cmd = ( f' [string] { command } [string] { arg } [string] ' ) [EOL] return subprocess . call ( cmd , shell = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0