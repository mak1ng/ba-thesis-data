from typing import Type , Dict , Any , Callable [EOL] import flask [EOL] import werkzeug [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] [EOL] import string [EOL] from enum import Enum , auto [EOL] from datetime import datetime , timezone [EOL] from typing import Callable , Any , Dict , Union [EOL] [EOL] from bleach import clean [EOL] from flask . json import JSONEncoder [EOL] from typing_extensions import Literal [EOL] from passlib . hash import bcrypt_sha256 [EOL] from werkzeug . datastructures import MultiDict [EOL] from mistune import markdown as render_markdown [EOL] from flask import Response , jsonify , current_app [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] Controller = Callable [ ... , Response ] [EOL] [comment] [EOL] [comment] [EOL] ControllerDecorator = Callable [ [ Controller ] , Controller ] [EOL] [comment] [EOL] [comment] [EOL] Vote = Union [ Literal [ - [number] ] , Literal [ [number] ] , Literal [ [number] ] ] [EOL] [EOL] [EOL] def json_response ( jsonable = { } , status_code = [number] ) : [EOL] [docstring] [EOL] [EOL] response = jsonify ( jsonable ) [EOL] response . status_code = status_code [EOL] return response [EOL] [EOL] [EOL] def generate_password_hash ( password ) : [EOL] [docstring] [EOL] [EOL] return bcrypt_sha256 . using ( rounds = current_app . config [ [string] ] ) . hash ( password ) [EOL] [EOL] [EOL] def password_hash_matches ( password_hash , password ) : [EOL] [docstring] [EOL] [EOL] return bcrypt_sha256 . verify ( password , password_hash ) [EOL] [EOL] [EOL] def password_has_varied_characters ( password ) : [EOL] [docstring] [EOL] [EOL] uppers = [number] [EOL] lowers = [number] [EOL] digits = [number] [EOL] for character in password : [EOL] if character in string . ascii_lowercase : [EOL] lowers += [number] [EOL] elif character in string . ascii_uppercase : [EOL] uppers += [number] [EOL] elif character in string . digits : [EOL] digits += [number] [EOL] return uppers > [number] and lowers > [number] and digits > [number] [EOL] [EOL] [EOL] def multidict_to_dict ( multidict ) : [EOL] [docstring] [EOL] [EOL] return dict ( multidict . items ( ) ) [EOL] [EOL] [EOL] def markdown_is_safe ( markdown ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] unsanitised = render_markdown ( markdown , escape = False ) [EOL] sanitised = clean ( unsanitised , tags = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , attributes = { [string] : [ [string] ] } , protocols = [ [string] , [string] , [string] , [string] ] ) [EOL] return unsanitised == sanitised [EOL] [EOL] [EOL] class StringEnum ( str , Enum ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def _generate_next_value_ ( name , * args , ** kwargs ) : [EOL] return name [EOL] [EOL] [EOL] class TimestampJSONEncoder ( JSONEncoder ) : [EOL] [docstring] [EOL] [EOL] def default ( self , thing ) : [EOL] [docstring] [EOL] [EOL] if isinstance ( thing , datetime ) : [EOL] return thing . timestamp ( ) [EOL] return super ( ) . default ( thing ) [EOL] [EOL] [EOL] def current_datetime_utc ( ) : [EOL] [docstring] [EOL] [EOL] return datetime . now ( timezone . utc ) [EOL] [EOL] [EOL] def timestamp_to_utc_datetime ( timestamp ) : [EOL] [docstring] [EOL] [EOL] return datetime . fromtimestamp ( timestamp , timezone . utc ) [EOL] [EOL] [EOL] class SortKeyWithHot ( StringEnum ) : [EOL] [docstring] [EOL] [EOL] Hot = auto ( ) [EOL] Top = auto ( ) [EOL] Bottom = auto ( ) [EOL] Newest = auto ( ) [EOL] Oldest = auto ( ) [EOL] [EOL] [EOL] class SortKey ( StringEnum ) : [EOL] [docstring] [EOL] [EOL] Top = auto ( ) [EOL] Bottom = auto ( ) [EOL] Newest = auto ( ) [EOL] Oldest = auto ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Sequence , Type , Optional , Any , ContextManager , Mapping , Iterator [EOL] import flask [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import peewee [EOL] import datetime [EOL] [docstring] [EOL] [EOL] from math import log10 [EOL] from datetime import datetime [EOL] from typing import ( Optional , Type , Iterator , Any , Sequence , Mapping , ContextManager ) [EOL] [EOL] from flask import Flask [EOL] from peewee import SqliteDatabase , Model , Expression , FloatField [EOL] [EOL] from . utils import timestamp_to_utc_datetime [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _database = SqliteDatabase ( database = None ) [EOL] [EOL] [EOL] def init_app ( app ) : [EOL] [docstring] [EOL] [EOL] _database . init ( database = app . config [ [string] ] , pragmas = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] _database . register_function ( log10 , num_params = [number] ) [EOL] [EOL] @ app . before_request def connect ( ) : [EOL] _database . connect ( ) [EOL] [EOL] @ app . teardown_request def close ( error = None ) : [EOL] if not _database . is_closed ( ) : [EOL] _database . close ( ) [EOL] [EOL] [EOL] def transaction ( ) : [EOL] [docstring] [EOL] [EOL] return _database . atomic ( ) [EOL] [EOL] [EOL] class BaseModel ( Model ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] database = _database [EOL] [EOL] @ classmethod def any ( cls , * args ) : [EOL] [docstring] [EOL] [EOL] return cls . select ( ) . where ( * args ) . exists ( ) [EOL] [EOL] @ classmethod def insert_many_chunks ( cls , rows , chunk_size = [number] ) : [EOL] [docstring] [EOL] [EOL] for index in range ( [number] , len ( rows ) , chunk_size ) : [EOL] cls . insert_many ( rows [ index : index + chunk_size ] ) . execute ( ) [EOL] [EOL] [EOL] def create_tables ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def walk_subclasses ( cls ) : [EOL] for subclass in cls . __subclasses__ ( ) : [EOL] yield from walk_subclasses ( subclass ) [EOL] yield subclass [EOL] [EOL] models = walk_subclasses ( BaseModel ) [EOL] [EOL] with transaction ( ) : [EOL] _database . create_tables ( models ) [EOL] [EOL] [EOL] class UTCTimestampField ( FloatField ) : [EOL] [docstring] [EOL] [EOL] def db_value ( self , dt ) : [EOL] return None if dt is None else dt . timestamp ( ) [EOL] [EOL] def python_value ( self , timestamp ) : [EOL] return None if timestamp is None else timestamp_to_utc_datetime ( timestamp ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.ContextManager$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.database.BaseModel.Meta]$ 0 $typing.Any$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $peewee.Expression$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $peewee.Expression$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Sequence[typing.Mapping[builtins.str,typing.Any]]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[typing.Mapping[builtins.str,typing.Any]]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Sequence[typing.Mapping[builtins.str,typing.Any]]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Type]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0
from typing import ContextManager , Mapping , Collection , Any [EOL] import flask [EOL] import flask_mail [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Mapping , Any , Collection , ContextManager [EOL] [EOL] from flask_mail import Mail , Message [EOL] from flask import render_template , Flask [EOL] [EOL] [EOL] [comment] [EOL] _mail = Mail ( ) [EOL] [EOL] [EOL] def init_app ( app ) : [EOL] [docstring] [EOL] [EOL] _mail . init_app ( app ) [EOL] [EOL] [EOL] def capture ( ) : [EOL] [docstring] [EOL] [EOL] return _mail . record_messages ( ) [EOL] [EOL] [EOL] def send_from_template ( subject , recipient , filename , parameters ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _mail . send_message ( subject = f' [string] { subject }' , recipients = [ recipient ] , body = render_template ( f'{ filename } [string] ' , ** parameters ) , html = render_template ( f'{ filename } [string] ' , ** parameters ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.ContextManager[typing.Collection[flask_mail.Message]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Callable , List , Type , Optional , Any [EOL] import flask [EOL] import marshmallow [EOL] import utils [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] [EOL] from time import time [EOL] from functools import wraps [EOL] from typing import Dict , Type , Any , Optional , List , Callable [EOL] from datetime import datetime [EOL] [EOL] from flask import request , Response [EOL] from marshmallow import Schema , ValidationError [EOL] from marshmallow . fields import ( String as StringField , Boolean as BooleanField , Float as FloatField , Integer as IntegerField , Nested as NestedField ) [EOL] from marshmallow . validate import ( Email as EmailValidator , Length as LengthValidator , Range as RangeValidator , Regexp as RegexValidator , OneOf as OneOfValidator ) [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . models import User , Board , Message , Post , Comment [EOL] from . utils import ( json_response , Controller , ControllerDecorator , password_has_varied_characters , multidict_to_dict , StringEnum , timestamp_to_utc_datetime , markdown_is_safe ) [EOL] [EOL] [EOL] MINIMUM_USERNAME_LENGTH = [number] [comment] [EOL] MINIMUM_PASSWORD_LENGTH = [number] [comment] [EOL] MAXIMUM_PASSWORD_LENGTH = [number] [comment] [EOL] MAXIMUM_SEARCH_QUERY_LENGTH = [number] [comment] [EOL] [EOL] [EOL] Validator = Callable [ [ Any ] , None ] [EOL] [EOL] [EOL] class TrimmedStringField ( StringField ) : [EOL] [docstring] [EOL] [EOL] def _deserialize ( self , * args , ** kwargs ) : [EOL] deserialised = super ( ) . _deserialize ( * args , ** kwargs ) [EOL] return None if deserialised is None else deserialised . strip ( ) [EOL] [EOL] [EOL] class MarkdownField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] validators = kwargs . pop ( [string] , [ ] ) [EOL] [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ * validators , self . _validate_safe ] ) [EOL] [EOL] @ staticmethod def _validate_safe ( markdown ) : [EOL] if not markdown_is_safe ( markdown ) : [EOL] raise ValidationError ( [string] [string] ) [EOL] [EOL] [EOL] class StrictBooleanField ( BooleanField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , truthy = { True , [string] } , falsy = { False , [string] } ) [EOL] [EOL] [EOL] class StrictFloatField ( FloatField ) : [EOL] [docstring] [EOL] [EOL] def _format_num ( self , value ) : [EOL] if not isinstance ( value , ( int , float ) ) or isinstance ( value , bool ) : [EOL] self . fail ( [string] ) [EOL] return float ( value ) [EOL] [EOL] [EOL] class StrictIntegerField ( IntegerField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , strict = True ) [EOL] [EOL] [EOL] class DateTimeTimestampField ( StrictFloatField ) : [EOL] [docstring] [EOL] [EOL] default_error_messages = { [string] : [string] } [EOL] [EOL] def _deserialize ( self , * args , ** kwargs ) : [EOL] seconds = super ( ) . _deserialize ( * args , ** kwargs ) [EOL] if seconds is None : [EOL] return None [EOL] dt = ... [EOL] try : [EOL] dt = timestamp_to_utc_datetime ( seconds ) [EOL] except Exception : [EOL] self . fail ( [string] ) [EOL] return dt [EOL] [EOL] [EOL] class IDField ( IntegerField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ RangeValidator ( min = [number] ) ] ) [EOL] [EOL] [EOL] class EmailField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ EmailValidator ( ) , LengthValidator ( max = User . email . max_length ) ] ) [EOL] [EOL] [EOL] class UsernameField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ RegexValidator ( [string] ) , LengthValidator ( min = MINIMUM_USERNAME_LENGTH , max = User . name . max_length ) ] ) [EOL] [EOL] [EOL] class UUIDField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( equal = User . uuid . max_length ) ] ) [EOL] [EOL] [EOL] class PasswordField ( StringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = MINIMUM_PASSWORD_LENGTH , max = MAXIMUM_PASSWORD_LENGTH ) , self . _validate_password_characters ] ) [EOL] [EOL] @ staticmethod def _validate_password_characters ( password ) : [EOL] if not password_has_varied_characters ( password ) : [EOL] raise ValidationError ( [string] [string] ) [EOL] [EOL] [EOL] class ExpiryField ( StrictFloatField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ self . _validate_not_expired ] ) [EOL] [EOL] @ staticmethod def _validate_not_expired ( value ) : [EOL] if time ( ) >= value : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class StringEnumField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , enum , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ OneOfValidator ( enum . __members__ . keys ( ) ) ] ) [EOL] [EOL] [EOL] class PageField ( IntegerField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ RangeValidator ( min = [number] ) ] ) [EOL] [EOL] [EOL] class SearchQueryField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = MAXIMUM_SEARCH_QUERY_LENGTH ) ] ) [EOL] [EOL] [EOL] class BoardNameField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ RegexValidator ( [string] ) , LengthValidator ( max = Board . name . max_length ) ] ) [EOL] [EOL] [EOL] class BoardTitleField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Board . title . max_length ) ] ) [EOL] [EOL] [EOL] class BoardSidebarTextField ( MarkdownField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Board . sidebar_text . max_length ) ] ) [EOL] [EOL] [EOL] class VoteField ( StrictIntegerField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ RangeValidator ( min = - [number] , max = [number] ) ] ) [EOL] [EOL] [EOL] class MessageTextField ( MarkdownField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Message . text . max_length ) ] ) [EOL] [EOL] [EOL] class PostTitleField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Post . title . max_length ) ] ) [EOL] [EOL] [EOL] class PostURLField ( TrimmedStringField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Post . url . max_length ) ] ) [EOL] [EOL] [EOL] class PostTextField ( MarkdownField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Post . text . max_length ) ] ) [EOL] [EOL] [EOL] class CommentTextField ( MarkdownField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , validate = [ LengthValidator ( min = [number] , max = Comment . text . max_length ) ] ) [EOL] [EOL] [EOL] def validate_json ( schema ) : [EOL] [docstring] [EOL] [EOL] def decorator ( controller ) : [EOL] @ wraps ( controller ) def wrapper ( * args , ** kwargs ) : [EOL] if not request . is_json : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] results = ... [EOL] try : [EOL] results = schema ( ) . load ( request . json ) [EOL] except ValidationError as error : [EOL] return json_response ( error . messages , status_code = [number] ) [EOL] return controller ( * args , ** kwargs , results = results ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def validate_query_params ( schema ) : [EOL] [docstring] [EOL] [EOL] def decorator ( controller ) : [EOL] @ wraps ( controller ) def wrapper ( * args , ** kwargs ) : [EOL] results = ... [EOL] try : [EOL] results = schema ( ) . load ( multidict_to_dict ( request . args ) ) [EOL] except ValidationError as error : [EOL] return json_response ( error . messages , status_code = [number] ) [EOL] return controller ( * args , ** kwargs , results = results ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] class TokenFieldResults ( TypedDict ) : [EOL] token = ... [EOL] [EOL] [EOL] def validate_token_field ( schema ) : [EOL] [docstring] [EOL] [EOL] from . auth import decode_jwt [EOL] [EOL] class Validator ( Schema ) : [EOL] exp = ExpiryField ( required = True ) [EOL] sub = NestedField ( schema , required = True ) [EOL] [EOL] def decorator ( controller ) : [EOL] @ wraps ( controller ) def wrapper ( * args , results , ** kwargs ) : [EOL] token = ... [EOL] try : [EOL] token = decode_jwt ( results [ [string] ] ) [EOL] except Exception : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] try : [EOL] Validator ( ) . load ( token ) [EOL] except ValidationError : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [comment] [EOL] [comment] [EOL] return controller ( * args , ** kwargs , results = results , token = token [ [string] ] ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Type[utils.StringEnum]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[utils.StringEnum]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import backend [EOL] import pathlib [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from pathlib import Path [EOL] [EOL] from . models import User [EOL] from . database import create_tables [EOL] [EOL] [EOL] class SameRankError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] def make_admin ( name ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_with_name ( name ) [EOL] except User . DoesNotExist as error : [EOL] raise ValueError from error [EOL] if user . administrator : [EOL] raise SameRankError [EOL] user . administrator = True [EOL] user . save ( ) [EOL] [EOL] [EOL] def revoke_admin ( name ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_with_name ( name ) [EOL] except User . DoesNotExist as error : [EOL] raise ValueError from error [EOL] if not user . administrator : [EOL] raise SameRankError [EOL] user . administrator = False [EOL] user . save ( ) [EOL] [EOL] [EOL] def create_database_tables ( path , overwrite ) : [EOL] [docstring] [EOL] [EOL] if path . exists ( ) : [EOL] if not overwrite : [EOL] raise FileExistsError [EOL] path . unlink ( ) [EOL] create_tables ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Optional [EOL] import models [EOL] import pathlib [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import json [EOL] from pathlib import Path [EOL] from datetime import datetime [EOL] from typing import Optional , Union , List , Dict , cast [EOL] [EOL] from typing_extensions import Literal [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . database import transaction [EOL] from . models import ( User , Board , Post , PostVote , Comment , CommentVote , BoardSubscription , Moderator , CommentReport , PostReport , Message , SavedComment , SavedPost ) [EOL] from . utils import generate_password_hash , timestamp_to_utc_datetime [EOL] [EOL] [EOL] def get_scraped_boards_directory ( ) : [EOL] [docstring] [EOL] [EOL] return Path ( __file__ ) . with_name ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class ExistingCommentJSON ( TypedDict ) : [EOL] id = ... [EOL] parentId = ... [EOL] creator = ... [EOL] timestampCreated = ... [EOL] score = ... [EOL] text = ... [EOL] deleted = ... [EOL] [EOL] [EOL] class DeletedCommentJSON ( TypedDict ) : [EOL] id = ... [EOL] parentId = ... [EOL] deleted = ... [EOL] [EOL] [EOL] CommentJSON = Union [ ExistingCommentJSON , DeletedCommentJSON ] [EOL] [EOL] [EOL] class PostJSON ( TypedDict ) : [EOL] id = ... [EOL] title = ... [EOL] url = ... [EOL] text = ... [EOL] creator = ... [EOL] timestampCreated = ... [EOL] upVotes = ... [EOL] downVotes = ... [EOL] comments = ... [EOL] [EOL] [EOL] class BoardJSON ( TypedDict ) : [EOL] timestampCreated = ... [EOL] sidebarText = ... [EOL] name = ... [EOL] title = ... [EOL] posts = ... [EOL] [EOL] [EOL] class DatabaseSeeder : [EOL] [comment] [EOL] [comment] [EOL] _created_users = ... [EOL] [comment] [EOL] [comment] [EOL] _scraped_user_password_hash = ... [EOL] _vote_user_count = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . _created_users = { } [EOL] self . _scraped_user_password_hash = generate_password_hash ( [string] ) [EOL] self . _vote_user_count = [number] [EOL] [EOL] def _create_dummy_vote_user ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _vote_user_count += [number] [EOL] return User . create_with_password_hash ( email = f'{ self . _vote_user_count } [string] ' , name = f' [string] { self . _vote_user_count }' , password_hash = self . _scraped_user_password_hash ) [EOL] [EOL] def _create_scraped_user ( self , name ) : [EOL] if name is None : [EOL] return None [EOL] try : [EOL] return self . _created_users [ name ] [EOL] except KeyError : [EOL] pass [EOL] user = User . create_with_password_hash ( email = name . lower ( ) . replace ( [string] , [string] ) + [string] , name = name , password_hash = self . _scraped_user_password_hash , datetime_joined = datetime ( [number] , [number] , [number] ) ) [EOL] self . _created_users [ name ] = user . uuid [EOL] return user . uuid [EOL] [EOL] def _add_post_votes ( self , id , up , down ) : [EOL] PostVote . insert_many_chunks ( [ { [string] : id , [string] : self . _create_dummy_vote_user ( ) , [string] : [number] } for i in range ( up ) ] , chunk_size = [number] ) [EOL] PostVote . insert_many_chunks ( [ { [string] : id , [string] : self . _create_dummy_vote_user ( ) , [string] : - [number] } for i in range ( down ) ] , chunk_size = [number] ) [EOL] [EOL] def _add_comment_votes ( self , id , up , down ) : [EOL] CommentVote . insert_many_chunks ( [ { [string] : id , [string] : self . _create_dummy_vote_user ( ) , [string] : [number] } for i in range ( up ) ] , chunk_size = [number] ) [EOL] CommentVote . insert_many_chunks ( [ { [string] : id , [string] : self . _create_dummy_vote_user ( ) , [string] : - [number] } for i in range ( down ) ] , chunk_size = [number] ) [EOL] [EOL] def _create_scraped_board ( self , board ) : [EOL] Board . create ( name = board [ [string] ] , title = board [ [string] ] , sidebar_text = board [ [string] ] , datetime_created = timestamp_to_utc_datetime ( board [ [string] ] ) , creator = self . _create_scraped_user ( board [ [string] ] + [string] ) ) [EOL] [EOL] for post in board [ [string] ] : [EOL] Post . create ( id = post [ [string] ] , title = post [ [string] ] , url = post [ [string] ] , text = post [ [string] ] , datetime_created = timestamp_to_utc_datetime ( post [ [string] ] ) , creator = self . _create_scraped_user ( post [ [string] ] ) , board = board [ [string] ] ) [EOL] [EOL] self . _add_post_votes ( id = post [ [string] ] , up = post [ [string] ] , down = post [ [string] ] ) [EOL] [EOL] for comment in post [ [string] ] : [EOL] if comment [ [string] ] : [EOL] Comment . create ( id = comment [ [string] ] , text = [string] , creator = None , post = post [ [string] ] , parent = comment [ [string] ] , deleted = True ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] existing_comment = cast ( ExistingCommentJSON , comment ) [EOL] [EOL] Comment . create ( id = comment [ [string] ] , text = existing_comment [ [string] ] , datetime_created = timestamp_to_utc_datetime ( existing_comment [ [string] ] ) , creator = self . _create_scraped_user ( existing_comment [ [string] ] ) , post = post [ [string] ] , parent = comment [ [string] ] ) [EOL] [EOL] self . _add_comment_votes ( id = comment [ [string] ] , up = existing_comment [ [string] ] , down = [number] ) [EOL] [EOL] def _create_admins ( self ) : [EOL] for i in range ( [number] , [number] ) : [EOL] user = User . create_with_password_hash ( email = f' [string] { i } [string] ' , name = f' [string] { i }' , password_hash = self . _scraped_user_password_hash , administrator = True , datetime_joined = datetime ( [number] , [number] , [number] , second = i ) ) [EOL] self . _created_users [ user . name ] = user . uuid [EOL] [EOL] post = Post . create ( title = [string] , url = None , text = None , datetime_created = datetime ( [number] , [number] , [number] ) , creator = self . _created_users [ [string] ] , board = [string] ) [EOL] Comment . create ( text = [string] , datetime_created = datetime ( [number] , [number] , [number] ) , creator = self . _created_users [ [string] ] , post = post , parent = None ) [EOL] [EOL] def _create_users ( self ) : [EOL] [comment] [EOL] [comment] [EOL] User . create ( uuid = [string] * [number] , email = [string] , name = [string] , password = [string] , datetime_joined = datetime ( [number] , [number] , [number] , second = [number] ) , datetime_last_password_change = datetime ( [number] , [number] , [number] ) ) [EOL] for i in range ( [number] , [number] ) : [EOL] User . create ( uuid = str ( i ) * [number] , email = f' [string] { i } [string] ' , name = f' [string] { i }' , password = f' [string] { i } [string] ' , datetime_joined = datetime ( [number] , [number] , [number] , second = i ) , ) [EOL] [EOL] def _create_subscriptions ( self ) : [EOL] webdev_user = self . _created_users [ [string] ] [EOL] hardware_user = self . _created_users [ [string] ] [EOL] [EOL] [comment] [EOL] for board in ( [string] , [string] ) : [EOL] BoardSubscription . create ( user = webdev_user , board = board ) [EOL] for board in ( [string] , [string] , [string] ) : [EOL] BoardSubscription . create ( user = hardware_user , board = board ) [EOL] [EOL] def _create_moderators ( self ) : [EOL] webdev_user = self . _created_users [ [string] ] [EOL] typescript_user = self . _created_users [ [string] ] [EOL] many_user = self . _created_users [ [string] ] [EOL] many_user_2 = self . _created_users [ [string] ] [EOL] [EOL] for index , user in enumerate ( ( webdev_user , many_user ) , start = [number] ) : [EOL] Moderator . create ( board = [string] , user = user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] users = enumerate ( ( webdev_user , many_user , many_user_2 , typescript_user ) , start = [number] ) [EOL] for index , user in users : [EOL] Moderator . create ( board = [string] , user = user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] [EOL] def _create_comment_reports ( self ) : [EOL] reporter = self . _created_users [ [string] ] [EOL] reporter_2 = self . _created_users [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] for index , comment_id in enumerate ( ( [number] , [number] , [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] CommentReport . create ( comment = comment_id , creator = reporter , datetime_created = datetime ( [number] , [number] , [number] , second = index ) , ) [EOL] for index , comment_id in enumerate ( ( [number] , [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] CommentReport . create ( comment = comment_id , creator = reporter_2 , datetime_created = datetime ( [number] , [number] , [number] , second = index ) , ) [EOL] [EOL] def _create_post_reports ( self ) : [EOL] reporter = self . _created_users [ [string] ] [EOL] reporter_2 = self . _created_users [ [string] ] [EOL] [EOL] [comment] [EOL] for index , post_id in enumerate ( ( [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] PostReport . create ( post = post_id , creator = reporter , datetime_created = datetime ( [number] , [number] , [number] , second = index ) , ) [EOL] for index , post_id in enumerate ( ( [number] , [number] , [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] PostReport . create ( post = post_id , creator = reporter_2 , datetime_created = datetime ( [number] , [number] , [number] , second = index ) , ) [EOL] [EOL] def _create_messages ( self ) : [EOL] messenger = self . _created_users [ [string] ] [EOL] messenger_2 = self . _created_users [ [string] ] [EOL] messenger_3 = self . _created_users [ [string] ] [EOL] [EOL] Message . create ( sender = messenger , receiver = messenger_2 , text = [string] , read = True , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger_2 , receiver = messenger , text = [string] , read = True , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger , receiver = messenger_2 , text = [string] , read = True , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger_2 , receiver = messenger , text = [string] , read = False , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger_2 , receiver = messenger_3 , text = [string] , read = False , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger_2 , receiver = messenger_3 , text = [string] , read = True , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger , receiver = messenger_2 , text = [string] , read = False , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] Message . create ( sender = messenger , receiver = messenger_2 , text = [string] , read = False , datetime_created = datetime ( [number] , [number] , [number] , second = [number] ) ) [EOL] [EOL] def _create_saved_posts ( self ) : [EOL] webdev_user = self . _created_users [ [string] ] [EOL] hardware_user = self . _created_users [ [string] ] [EOL] [EOL] [comment] [EOL] for index , post_id in enumerate ( ( [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] SavedPost . create ( post = post_id , creator = webdev_user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] [comment] [EOL] for index , post_id in enumerate ( ( [number] , [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] SavedPost . create ( post = post_id , creator = hardware_user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] [EOL] def _create_saved_comments ( self ) : [EOL] webdev_user = self . _created_users [ [string] ] [EOL] hardware_user = self . _created_users [ [string] ] [EOL] [EOL] [comment] [EOL] for index , comment_id in enumerate ( ( [number] , [number] , [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] SavedComment . create ( comment = comment_id , creator = webdev_user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] [comment] [EOL] for index , comment_id in enumerate ( ( [number] , [number] , [number] , [number] ) , start = [number] ) : [EOL] SavedComment . create ( comment = comment_id , creator = hardware_user , datetime_created = datetime ( [number] , [number] , [number] , second = index ) ) [EOL] [EOL] def seed ( self ) : [EOL] [docstring] [EOL] [EOL] with transaction ( ) : [EOL] for path in get_scraped_boards_directory ( ) . iterdir ( ) : [EOL] with open ( path , encoding = [string] ) as file : [EOL] board = json . load ( file ) [EOL] self . _create_scraped_board ( board ) [EOL] [EOL] self . _create_admins ( ) [EOL] self . _create_users ( ) [EOL] self . _create_subscriptions ( ) [EOL] self . _create_moderators ( ) [EOL] self . _create_comment_reports ( ) [EOL] self . _create_post_reports ( ) [EOL] self . _create_messages ( ) [EOL] self . _create_saved_posts ( ) [EOL] self . _create_saved_comments ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing_extensions.Literal[False]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing_extensions.Literal[True]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[CommentJSON]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[PostJSON]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $backend.src.models.user.User$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $backend.src.models.user.User$ 0 0 0 0 $backend.src.models.user.User$ 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.seed.ExistingCommentJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.seed.ExistingCommentJSON$ 0 0 0 0 0 0 0 0 $backend.src.seed.ExistingCommentJSON$ 0 0 0 0 0 0 0 0 0 0 0 $backend.src.seed.ExistingCommentJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.seed.ExistingCommentJSON$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.models.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.models.user.User$ 0 0 0 0 $backend.src.models.user.User$ 0 0 0 0 $backend.src.models.post.Post$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.models.post.Post$ 0 $backend.src.models.post.Post$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.enumerate[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.enumerate[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 $BoardJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Mapping , Optional , Any [EOL] import flask [EOL] import pathlib [EOL] import logging [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] from pathlib import Path [EOL] from typing import Mapping , Any , Optional [EOL] [EOL] import click [EOL] from flask import Flask [EOL] from flask . logging import default_handler [EOL] [EOL] from . import database , cli , mail [EOL] from . seed import DatabaseSeeder [EOL] from . controllers import api , static [EOL] from . utils import TimestampJSONEncoder [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CONFIG_PATH = [string] [comment] [EOL] [EOL] [EOL] def create ( config = None ) : [EOL] [docstring] [EOL] [EOL] app = Flask ( import_name = [string] ) [EOL] app . json_encoder = TimestampJSONEncoder [EOL] [EOL] _load_config ( app , config ) [EOL] _initiate_logging ( app ) [EOL] [EOL] app . register_blueprint ( api . blueprint ) [EOL] app . register_blueprint ( static . blueprint ) [EOL] [EOL] database . init_app ( app ) [EOL] mail . init_app ( app ) [EOL] [EOL] _register_cli_commands ( app ) [EOL] [EOL] return app [EOL] [EOL] [EOL] def _load_config ( app , config ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config . from_mapping ( { [string] : [number] , [string] : [number] } ) [EOL] if config is None : [EOL] app . config . from_json ( CONFIG_PATH ) [comment] [EOL] else : [EOL] app . config . from_mapping ( config ) [comment] [EOL] [EOL] _ensure_config_key_set ( app , [string] ) [EOL] _ensure_config_key_set ( app , [string] ) [EOL] _ensure_config_key_set ( app , [string] ) [EOL] _ensure_config_key_set ( app , [string] ) [EOL] _ensure_config_key_set ( app , [string] ) [EOL] [EOL] [EOL] def _ensure_config_key_set ( app , key ) : [EOL] if key not in app . config : [EOL] raise ConfigException ( f' [string] { key } [string] ' ) [EOL] [EOL] [EOL] class ConfigException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _initiate_logging ( app ) : [EOL] [comment] [EOL] [comment] [EOL] app . logger . addHandler ( default_handler ) [EOL] if app . debug : [EOL] app . logger . setLevel ( [string] ) [EOL] [comment] [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . setLevel ( [string] ) [EOL] logger . addHandler ( default_handler ) [EOL] else : [EOL] app . logger . setLevel ( [string] ) [EOL] [EOL] [EOL] def _register_cli_commands ( app ) : [EOL] @ app . cli . command ( [string] ) @ click . option ( [string] , is_flag = True ) def create_db ( overwrite ) : [EOL] app . logger . info ( [string] ) [EOL] path = Path ( app . config [ [string] ] ) [EOL] try : [EOL] cli . create_database_tables ( path , overwrite ) [EOL] except FileExistsError : [EOL] app . logger . error ( f' [string] { path }' ) [EOL] else : [EOL] app . logger . info ( f' [string] { path }' ) [EOL] [EOL] @ app . cli . command ( [string] ) def seed_db ( ) : [EOL] DatabaseSeeder ( ) . seed ( ) [EOL] [EOL] @ app . cli . command ( [string] ) @ click . argument ( [string] ) def make_admin ( name ) : [EOL] app . logger . info ( f' [string] { name } [string] ' ) [EOL] try : [EOL] cli . make_admin ( name ) [EOL] except cli . SameRankError : [EOL] app . logger . error ( [string] ) [EOL] except ValueError : [EOL] app . logger . error ( [string] ) [EOL] else : [EOL] app . logger . info ( f' [string] { name } [string] ' ) [EOL] [EOL] @ app . cli . command ( [string] ) @ click . argument ( [string] ) def revoke_admin ( name ) : [EOL] app . logger . info ( f' [string] { name } [string] ' ) [EOL] try : [EOL] cli . revoke_admin ( name ) [EOL] except cli . SameRankError : [EOL] app . logger . error ( [string] ) [EOL] except ValueError : [EOL] app . logger . error ( [string] ) [EOL] else : [EOL] app . logger . info ( f' [string] { name } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from flask import Blueprint , Response , send_from_directory , abort [EOL] [EOL] [EOL] blueprint = Blueprint ( name = [string] , import_name = __name__ , static_folder = [string] ) [EOL] [EOL] [EOL] @ blueprint . route ( [string] ) def static_files ( filename ) : [EOL] [docstring] [EOL] [EOL] return send_from_directory ( blueprint . static_folder , filename ) [EOL] [EOL] [EOL] @ blueprint . route ( [string] , defaults = { [string] : [string] } ) @ blueprint . route ( [string] ) def index ( path ) : [EOL] [docstring] [EOL] if path . startswith ( [string] ) : [EOL] abort ( [number] ) [EOL] return send_from_directory ( blueprint . static_folder , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] import flask [EOL] import backend [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from flask import Response [EOL] from mypy_extensions import TypedDict [EOL] from marshmallow import Schema , validates_schema , ValidationError [EOL] [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] from . . . validation import ( validate_json , validate_token_field , PasswordField , UUIDField , TrimmedStringField ) [EOL] [EOL] [EOL] class JSONValidator ( Schema ) : [EOL] token = TrimmedStringField ( required = True ) [EOL] password = PasswordField ( required = True ) [EOL] repeat_password = PasswordField ( required = True , data_key = [string] ) [EOL] [EOL] @ validates_schema def _validate_passwords_same ( self , data ) : [EOL] if ( [string] in data [EOL] and [string] in data [EOL] and data [ [string] ] != data [ [string] ] ) : [EOL] raise ValidationError ( { [string] : [ [string] ] } ) [EOL] [EOL] [EOL] class JSONValidationResults ( TypedDict ) : [EOL] token = ... [EOL] password = ... [EOL] repeat_password = ... [EOL] [EOL] [EOL] class TokenValidator ( Schema ) : [EOL] uuid = UUIDField ( required = True ) [EOL] [EOL] [EOL] class TokenPayload ( TypedDict ) : [EOL] uuid = ... [EOL] [EOL] [EOL] @ validate_json ( JSONValidator ) @ validate_token_field ( TokenValidator ) def change_password ( results , token ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_by_id ( token [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] user . update_password ( results [ [string] ] ) [EOL] user . save ( ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.TrimmedStringField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.UUIDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] from flask import Response [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] @ login_required def delete_account ( user ) : [EOL] [docstring] [EOL] [EOL] user . delete_instance ( ) [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . models import User [EOL] from . . . auth import login_required [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , MessageTextField , UsernameField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] text = MessageTextField ( required = True ) [EOL] receiver = UsernameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] text = ... [EOL] receiver = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def message ( user , results ) : [EOL] [docstring] [EOL] [EOL] receiver = ... [EOL] try : [EOL] receiver = User . get_with_name ( results [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] message = user . send_message ( text = results [ [string] ] , receiver = receiver ) [EOL] [EOL] return json_response ( { [string] : message . id , [string] : message . datetime_created , [string] : receiver . name } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.MessageTextField$ 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Message [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , IDField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def mark_message_read ( user , results ) : [EOL] [docstring] [EOL] [EOL] message = ... [EOL] try : [EOL] message = Message . get_by_id ( results [ [string] ] ) [EOL] except Message . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if message . receiver_uuid != user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if message . read : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] message . read = True [EOL] message . save ( ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from math import ceil [EOL] from datetime import datetime [EOL] from typing import Iterator , Optional [EOL] [EOL] from peewee import fn , SQL [EOL] from flask import Response , current_app [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import ( User , Comment , Post , SavedComment , CommentVote , CommentReport ) [EOL] from . . . utils import json_response , SortKey , Vote [EOL] from . . . validation import validate_query_params , PageField , StringEnumField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] sort_key = StringEnumField ( enum = SortKey , required = True , data_key = [string] ) [EOL] page = PageField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] sort_key = ... [EOL] page = ... [EOL] [EOL] [EOL] class CommentRow ( TypedDict ) : [EOL] id = ... [EOL] post_id = ... [EOL] post_title = ... [EOL] board = ... [EOL] text = ... [EOL] datetime_created = ... [EOL] datetime_edited = ... [EOL] datetime_saved = ... [EOL] creator = ... [EOL] up_votes = ... [EOL] down_votes = ... [EOL] user_vote = ... [EOL] reported = ... [EOL] [EOL] [EOL] @ login_required @ validate_query_params ( Validator ) def saved_comments ( user , results ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] query = Comment . select ( Comment . id , Post . id . alias ( [string] ) , Post . title . alias ( [string] ) , Post . board_name . alias ( [string] ) , Comment . text , Comment . datetime_created , Comment . datetime_edited , SavedComment . datetime_created . alias ( [string] ) , User . name . alias ( [string] ) , CommentVote . select ( fn . Count ( [string] ) ) . where ( CommentVote . comment_id == Comment . id ) . where ( CommentVote . vote == [number] ) . alias ( [string] ) , CommentVote . select ( fn . Count ( [string] ) ) . where ( CommentVote . comment_id == Comment . id ) . where ( CommentVote . vote == - [number] ) . alias ( [string] ) , fn . Coalesce ( CommentVote . vote , [number] ) . alias ( [string] ) , CommentReport . id . is_null ( False ) . alias ( [string] ) ) . join ( SavedComment , on = SavedComment . comment_id == Comment . id ) . join ( Post , on = Post . id == Comment . post_id ) . join ( dest = User , join_type = [string] , on = User . uuid == Comment . creator_uuid ) . join ( dest = CommentVote , join_type = [string] , on = ( CommentVote . comment_id == Comment . id ) & ( CommentVote . creator_uuid == user . uuid ) ) . join ( dest = CommentReport , join_type = [string] , on = ( CommentReport . comment_id == Comment . id ) & ( CommentReport . creator_uuid == user . uuid ) ) . where ( ~ Comment . deleted ) . where ( SavedComment . creator_uuid == user . uuid ) [EOL] [EOL] if results [ [string] ] == SortKey . Top : [EOL] query = query . order_by ( ( SQL ( [string] ) - SQL ( [string] ) ) . desc ( ) , SavedComment . datetime_created , Comment . id ) [EOL] elif results [ [string] ] == SortKey . Bottom : [EOL] query = query . order_by ( ( SQL ( [string] ) - SQL ( [string] ) ) , SavedComment . datetime_created , Comment . id ) [EOL] elif results [ [string] ] == SortKey . Newest : [EOL] query = query . order_by ( SavedComment . datetime_created . desc ( ) , Comment . id . desc ( ) ) [EOL] else : [comment] [EOL] query = query . order_by ( SavedComment . datetime_created , Comment . id ) [EOL] [EOL] per_page = current_app . config [ [string] ] [EOL] total_items = query . count ( ) [EOL] total_pages = ceil ( total_items / per_page ) [EOL] [EOL] comments = query . paginate ( results [ [string] ] , paginate_by = per_page ) . dicts ( ) . iterator ( ) [EOL] [EOL] return json_response ( { [string] : total_items , [string] : total_pages , [string] : [ { [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] , [string] : comment [ [string] ] } for comment in comments ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.StringEnumField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.PageField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.SortKey$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $utils.Vote$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_optional_using_comment_id [EOL] from . . . models import User , Comment [EOL] from . . . utils import json_response , current_datetime_utc [EOL] from . . . validation import validate_json , IDField , CommentTextField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] text = CommentTextField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] text = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_optional_using_comment_id def edit_comment ( user , results , moderator ) : [EOL] [docstring] [EOL] [EOL] commnet = ... [EOL] try : [EOL] comment = Comment . get ( ~ Comment . deleted , Comment . id == results [ [string] ] ) [EOL] except Comment . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if not moderator and comment . creator_uuid != user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] comment . text = results [ [string] ] [EOL] comment . datetime_edited = current_datetime_utc ( ) [comment] [EOL] comment . save ( ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.CommentTextField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from typing import Optional [EOL] [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Post , Comment [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , CommentTextField , IDField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] text = CommentTextField ( required = True ) [EOL] post_id = IDField ( required = True , strict = True , data_key = [string] ) [EOL] parent_id = IDField ( required = True , strict = True , allow_none = True , data_key = [string] ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] text = ... [EOL] post_id = ... [EOL] parent_id = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def create_comment ( user , results ) : [EOL] [docstring] [EOL] [EOL] if not Post . any ( Post . id == results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if results [ [string] ] is not None \ [EOL] and not Comment . any ( ~ Comment . deleted , Comment . id == results [ [string] ] , Comment . post_id == results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] comment = Comment . create ( text = results [ [string] ] , post = results [ [string] ] , parent = results [ [string] ] , creator = user ) [EOL] [EOL] return json_response ( { [string] : comment . id , [string] : comment . datetime_created } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.CommentTextField$ 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from peewee import fn [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_required [EOL] from . . . models import User , Board , Moderator [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , BoardNameField , UsernameField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] user = UsernameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] user = ... [EOL] [EOL] [EOL] class UserRow ( TypedDict ) : [EOL] uuid = ... [EOL] name = ... [EOL] moderator = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_required def add_moderator ( user , results ) : [EOL] [docstring] [EOL] [EOL] board = ... [EOL] try : [EOL] board = Board . get_with_name ( results [ [string] ] ) [EOL] except Board . DoesNotExist : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] row = ... [EOL] try : [EOL] row = User . select ( User . uuid , User . name , Moderator . id . is_null ( False ) . alias ( [string] ) ) . join ( dest = Moderator , join_type = [string] , on = ( Moderator . user_uuid == User . uuid ) & ( Moderator . board_name == board . name ) ) . where ( fn . Lower ( User . name ) == results [ [string] ] . lower ( ) ) . dicts ( ) . get ( ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] moderator = board . add_moderator ( row [ [string] ] ) [EOL] [EOL] return json_response ( { [string] : row [ [string] ] , [string] : moderator . datetime_created } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . utils import json_response [EOL] from . . . models import User , Comment [EOL] from . . . validation import validate_json , IDField [EOL] from . . . auth import login_required , moderator_optional_using_comment_id [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_optional_using_comment_id def delete_comment ( user , results , moderator ) : [EOL] [docstring] [EOL] [EOL] comment = ... [EOL] try : [EOL] comment = Comment . get_existing_with_id ( results [ [string] ] ) [EOL] except Comment . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if not moderator and comment . creator_uuid != user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] comment . mark_as_deleted ( ) [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Callable , List , Tuple , Generator , Optional , Any , Union [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from datetime import datetime [EOL] from typing import Optional , List , Any , Dict , Tuple , Callable , Union [EOL] [EOL] from peewee import fn [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from typing_extensions import Literal [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_optional [EOL] from . . . models import ( User , PostVote , Post , Comment , PostReport , SavedPost , CommentReport , CommentVote , SavedComment ) [EOL] from . . . utils import json_response , SortKey , Vote [EOL] from . . . validation import validate_query_params , IDField , StringEnumField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True ) [EOL] sort_key = StringEnumField ( enum = SortKey , required = True , data_key = [string] ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] sort_key = ... [EOL] [EOL] [EOL] class PostRow ( TypedDict ) : [EOL] id = ... [EOL] title = ... [EOL] url = ... [EOL] text = ... [EOL] datetime_created = ... [EOL] datetime_edited = ... [EOL] creator = ... [EOL] up_votes = ... [EOL] down_votes = ... [EOL] user_vote = ... [EOL] reported = ... [EOL] saved = ... [EOL] [EOL] [EOL] class CommentRow ( TypedDict ) : [EOL] id = ... [EOL] text = ... [EOL] datetime_created = ... [EOL] datetime_edited = ... [EOL] creator = ... [EOL] parent_id = ... [EOL] up_votes = ... [EOL] down_votes = ... [EOL] user_vote = ... [EOL] reported = ... [EOL] saved = ... [EOL] deleted = ... [EOL] [EOL] [EOL] class CommentWithChildren ( CommentRow ) : [EOL] [comment] [EOL] [comment] [EOL] children = ... [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _rows_to_tree ( comments ) : [EOL] indices = { } [EOL] comments_with_children = [ ] [EOL] for index , comment in enumerate ( comments ) : [EOL] indices [ comment [ [string] ] ] = index [EOL] comments_with_children . append ( { ** comment , [string] : [ ] } ) [EOL] [EOL] tree = [ ] [EOL] for comment in comments_with_children : [EOL] if comment [ [string] ] is None : [EOL] tree . append ( comment ) [EOL] else : [EOL] parent_index = indices [ comment [ [string] ] ] [EOL] comments_with_children [ parent_index ] [ [string] ] . append ( comment ) [EOL] [EOL] return tree [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _sort_comment_tree ( tree , key_function ) : [EOL] tree . sort ( key = key_function ) [EOL] for child in tree : [EOL] _sort_comment_tree ( tree = child [ [string] ] , key_function = key_function ) [EOL] [EOL] [EOL] def _sort_comments_top_key ( comment ) : [EOL] return ( - ( comment [ [string] ] - comment [ [string] ] ) , comment [ [string] ] . timestamp ( ) , comment [ [string] ] ) [EOL] [EOL] [EOL] def _sort_comments_bottom_key ( comment ) : [EOL] return ( comment [ [string] ] - comment [ [string] ] , comment [ [string] ] . timestamp ( ) , comment [ [string] ] ) [EOL] [EOL] [EOL] def _sort_comments_new_key ( comment ) : [EOL] return ( - comment [ [string] ] . timestamp ( ) , comment [ [string] ] - comment [ [string] ] , comment [ [string] ] ) [EOL] [EOL] [EOL] def _sort_comments_old_key ( comment ) : [EOL] return ( comment [ [string] ] . timestamp ( ) , comment [ [string] ] - comment [ [string] ] , comment [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] class ExistingCommentJSON ( TypedDict ) : [EOL] id = ... [EOL] text = ... [EOL] timestampCreated = ... [EOL] timestampEdited = ... [EOL] creator = ... [EOL] parentId = ... [EOL] upVotes = ... [EOL] downVotes = ... [EOL] userVote = ... [EOL] reported = ... [EOL] saved = ... [EOL] [comment] [EOL] [comment] [EOL] children = ... [EOL] deleted = ... [EOL] [EOL] [EOL] class DeletedCommentJSON ( TypedDict ) : [EOL] id = ... [EOL] parentId = ... [EOL] children = ... [EOL] deleted = ... [EOL] [EOL] [EOL] CommentJSON = Union [ ExistingCommentJSON , DeletedCommentJSON ] [EOL] [EOL] [EOL] def _comment_to_json ( comment ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] children = ( _comment_to_json ( child ) for child in comment [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if comment [ [string] ] : [EOL] return DeletedCommentJSON ( id = comment [ [string] ] , parentId = comment [ [string] ] , children = list ( children ) , deleted = True ) [EOL] return ExistingCommentJSON ( id = comment [ [string] ] , text = comment [ [string] ] , timestampCreated = comment [ [string] ] , timestampEdited = comment [ [string] ] , creator = comment [ [string] ] , parentId = comment [ [string] ] , upVotes = comment [ [string] ] , downVotes = comment [ [string] ] , userVote = comment [ [string] ] , reported = comment [ [string] ] , saved = comment [ [string] ] , children = list ( children ) , deleted = False ) [EOL] [EOL] [EOL] @ login_optional @ validate_query_params ( Validator ) def post ( user , results ) : [EOL] [docstring] [EOL] [EOL] user_uuid = None if user is None else user . uuid [EOL] [EOL] post = ... [EOL] try : [EOL] post = Post . select ( Post . id , Post . title , Post . url , Post . text , Post . datetime_created , Post . datetime_edited , User . name . alias ( [string] ) , PostVote . select ( fn . Count ( [string] ) ) . where ( PostVote . post_id == Post . id ) . where ( PostVote . vote == [number] ) . alias ( [string] ) , PostVote . select ( fn . Count ( [string] ) ) . where ( PostVote . post_id == Post . id ) . where ( PostVote . vote == - [number] ) . alias ( [string] ) , fn . Coalesce ( PostVote . vote , [number] ) . alias ( [string] ) , PostReport . id . is_null ( False ) . alias ( [string] ) , SavedPost . id . is_null ( False ) . alias ( [string] ) ) . join ( dest = User , join_type = [string] , on = User . uuid == Post . creator_uuid ) . join ( dest = PostVote , join_type = [string] , on = ( PostVote . post_id == Post . id ) & ( PostVote . creator_uuid == user_uuid ) ) . join ( dest = PostReport , join_type = [string] , on = ( PostReport . post_id == Post . id ) & ( PostReport . creator_uuid == user_uuid ) ) . join ( dest = SavedPost , join_type = [string] , on = ( SavedPost . post_id == Post . id ) & ( SavedPost . creator_uuid == user_uuid ) ) . where ( Post . id == results [ [string] ] ) . dicts ( ) . get ( ) [EOL] except Post . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] comments = list ( Comment . select ( Comment . id , Comment . text , Comment . datetime_created , Comment . datetime_edited , User . name . alias ( [string] ) , Comment . parent_id . alias ( [string] ) , CommentVote . select ( fn . Count ( [string] ) ) . where ( CommentVote . comment_id == Comment . id ) . where ( CommentVote . vote == [number] ) . alias ( [string] ) , CommentVote . select ( fn . Count ( [string] ) ) . where ( CommentVote . comment_id == Comment . id ) . where ( CommentVote . vote == - [number] ) . alias ( [string] ) , fn . Coalesce ( CommentVote . vote , [number] ) . alias ( [string] ) , CommentReport . id . is_null ( False ) . alias ( [string] ) , SavedComment . id . is_null ( False ) . alias ( [string] ) , Comment . deleted . alias ( [string] ) ) . join ( dest = User , join_type = [string] , on = User . uuid == Comment . creator_uuid ) . join ( dest = CommentVote , join_type = [string] , on = ( CommentVote . comment_id == Comment . id ) & ( CommentVote . creator_uuid == user_uuid ) ) . join ( dest = CommentReport , join_type = [string] , on = ( CommentReport . comment_id == Comment . id ) & ( CommentReport . creator_uuid == user_uuid ) ) . join ( dest = SavedComment , join_type = [string] , on = ( SavedComment . comment_id == Comment . id ) & ( SavedComment . creator_uuid == user_uuid ) ) . where ( Comment . post_id == results [ [string] ] ) . dicts ( ) . iterator ( ) ) [EOL] [EOL] tree = _rows_to_tree ( comments ) [EOL] [EOL] sort_function = ... [EOL] if results [ [string] ] == SortKey . Top : [EOL] sort_function = _sort_comments_top_key [EOL] elif results [ [string] ] == SortKey . Bottom : [EOL] sort_function = _sort_comments_bottom_key [EOL] elif results [ [string] ] == SortKey . Newest : [EOL] sort_function = _sort_comments_new_key [EOL] else : [comment] [EOL] sort_function = _sort_comments_old_key [EOL] [EOL] _sort_comment_tree ( tree , sort_function ) [EOL] [EOL] return json_response ( { [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : [ _comment_to_json ( comment ) for comment in tree ] , [string] : len ( comments ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 $backend.src.validation.StringEnumField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $utils.SortKey$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $utils.Vote$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $utils.Vote$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[CommentWithChildren]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.float,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.float,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $utils.Vote$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing_extensions.Literal[False]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing_extensions.Literal[True]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $CommentJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] [EOL] [comment] [EOL] from . account_details import account_details [EOL] from . add_moderator import add_moderator [EOL] from . board_details import board_details [EOL] from . board_posts import board_posts [EOL] from . change_password import change_password [EOL] from . confirm_registration import confirm_registration [EOL] from . create_board import create_board [EOL] from . create_comment import create_comment [EOL] from . create_post import create_post [EOL] from . delete_account import delete_account [EOL] from . delete_comment import delete_comment [EOL] from . delete_board import delete_board [EOL] from . delete_post import delete_post [EOL] from . dismiss_comment_reports import dismiss_comment_reports [EOL] from . dismiss_post_reports import dismiss_post_reports [EOL] from . edit_account_details import edit_account_details [EOL] from . edit_board import edit_board [EOL] from . edit_comment import edit_comment [EOL] from . edit_post import edit_post [EOL] from . feed_posts import feed_posts [EOL] from . login import login [EOL] from . mark_message_read import mark_message_read [EOL] from . message import message [EOL] from . post import post [EOL] from . random_board import random_board [EOL] from . read_messages import read_messages [EOL] from . refresh_token import refresh_token [EOL] from . remove_moderator import remove_moderator [EOL] from . reported_comments import reported_comments [EOL] from . reported_posts import reported_posts [EOL] from . report_comment import report_comment [EOL] from . report_post import report_post [EOL] from . request_password_change import request_password_change [EOL] from . request_registration import request_registration [EOL] from . saved_comments import saved_comments [EOL] from . saved_posts import saved_posts [EOL] from . save_comment import save_comment [EOL] from . save_post import save_post [EOL] from . search import search [EOL] from . sent_messages import sent_messages [EOL] from . subscribe_to_board import subscribe_to_board [EOL] from . unread_messages import unread_messages [EOL] from . unsave_comment import unsave_comment [EOL] from . unsave_post import unsave_post [EOL] from . unsubscribe_from_board import unsubscribe_from_board [EOL] from . user_comments import user_comments [EOL] from . user_details import user_details [EOL] from . user_posts import user_posts [EOL] from . vote_on_comment import vote_on_comment [EOL] from . vote_on_post import vote_on_post [EOL] [EOL] [EOL] blueprint = Blueprint ( name = [string] , import_name = __name__ , static_folder = [string] , template_folder = [string] , url_prefix = [string] ) [EOL] [EOL] [EOL] [comment] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = request_registration , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = confirm_registration , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = login , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = request_password_change , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = change_password , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = refresh_token ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = account_details ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = edit_account_details , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = delete_account , methods = [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = feed_posts ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = search ) [EOL] [EOL] [EOL] [comment] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = create_board , methods = [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = random_board ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = board_details ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = edit_board , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = board_posts ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = subscribe_to_board , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = unsubscribe_from_board , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = add_moderator , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = remove_moderator , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = reported_comments ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = dismiss_comment_reports , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = reported_posts ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = dismiss_post_reports , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = delete_board , methods = [ [string] ] ) [EOL] [EOL] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = create_post , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = post ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = edit_post , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = vote_on_post , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = report_post , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = delete_post , methods = [ [string] ] ) [EOL] [EOL] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = create_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = edit_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = vote_on_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = report_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = delete_comment , methods = [ [string] ] ) [EOL] [EOL] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = unread_messages ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = read_messages ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = sent_messages ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = message , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = mark_message_read , methods = [ [string] ] ) [EOL] [EOL] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = saved_comments ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = save_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = unsave_comment , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = saved_posts ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = save_post , methods = [ [string] ] ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = unsave_post , methods = [ [string] ] ) [EOL] [EOL] [EOL] blueprint . add_url_rule ( rule = [string] , view_func = user_details ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = user_comments ) [EOL] blueprint . add_url_rule ( rule = [string] , view_func = user_posts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from math import ceil [EOL] from datetime import datetime [EOL] from typing import Iterator [EOL] [EOL] from flask import Response , current_app [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Message [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_query_params , PageField , StrictBooleanField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] newest = StrictBooleanField ( required = True ) [EOL] page = PageField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] newest = ... [EOL] page = ... [EOL] [EOL] [EOL] class MessageRow ( TypedDict ) : [EOL] id = ... [EOL] text = ... [EOL] datetime_created = ... [EOL] receiver = ... [EOL] [EOL] [EOL] @ login_required @ validate_query_params ( Validator ) def sent_messages ( user , results ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] Receiver = User . alias ( ) [EOL] query = user . sent_messages . select ( Message . id , Message . text , Message . datetime_created , Receiver . name . alias ( [string] ) ) . join ( Receiver , on = Receiver . uuid == Message . receiver_uuid ) . order_by ( * ( field . desc ( ) if results [ [string] ] else field . asc ( ) for field in ( Message . datetime_created , Message . id ) ) ) [EOL] [EOL] per_page = current_app . config [ [string] ] [EOL] total_items = query . count ( ) [EOL] total_pages = ceil ( total_items / per_page ) [EOL] [EOL] messages = query . paginate ( results [ [string] ] , paginate_by = per_page ) . dicts ( ) . iterator ( ) [EOL] [EOL] return json_response ( { [string] : total_items , [string] : total_pages , [string] : [ { [string] : message [ [string] ] , [string] : message [ [string] ] , [string] : message [ [string] ] , [string] : message [ [string] ] } for message in messages ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.StrictBooleanField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PageField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from typing import Dict [EOL] [EOL] from flask import Response [EOL] from mypy_extensions import TypedDict [EOL] from marshmallow import Schema , ValidationError , validates_schema [EOL] [EOL] from . . . auth import login_required , create_login_token [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] from . . . validation import ( validate_json , EmailField , PasswordField ) [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] email = EmailField ( required = True ) [EOL] password = PasswordField ( required = True ) [EOL] repeat_password = PasswordField ( required = True , data_key = [string] ) [comment] [EOL] [EOL] @ validates_schema def _validate_passwords_same ( self , data ) : [EOL] if ( [string] in data [EOL] and [string] in data [EOL] and data [ [string] ] != data [ [string] ] ) : [EOL] raise ValidationError ( { [string] : [ [string] ] } ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] email = ... [EOL] password = ... [EOL] repeat_password = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def edit_account_details ( user , results ) : [EOL] [docstring] [EOL] [EOL] user . email = results [ [string] ] [EOL] user . update_password ( results [ [string] ] ) [EOL] user . save ( ) [EOL] [EOL] return json_response ( { [string] : create_login_token ( uuid = user . uuid , last_password_change = user . datetime_last_password_change ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.EmailField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from typing import Optional [EOL] [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Post , Board [EOL] from . . . utils import json_response [EOL] from . . . validation import ( validate_json , PostTitleField , PostURLField , PostTextField , BoardNameField ) [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] title = PostTitleField ( required = True ) [EOL] url = PostURLField ( required = True , allow_none = True ) [EOL] text = PostTextField ( required = True , allow_none = True ) [EOL] board = BoardNameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] title = ... [EOL] url = ... [EOL] text = ... [EOL] board = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def create_post ( user , results ) : [EOL] [docstring] [EOL] [EOL] if not Board . any_with_name ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] post = Post . create ( title = results [ [string] ] , url = results [ [string] ] , text = results [ [string] ] , board = results [ [string] ] , creator = user ) [EOL] return json_response ( { [string] : post . id } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.PostTitleField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PostURLField$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.PostTextField$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] from . . . validation import UsernameField , validate_query_params [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] user = UsernameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] user = ... [EOL] [EOL] [EOL] @ validate_query_params ( Validator ) def user_details ( results ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_with_name ( results [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] [comment] [EOL] return json_response ( { [string] : user . name , [string] : user . datetime_joined , [string] : user . administrator , [string] : list ( user . iterate_moderated_boards ( ) ) , [string] : user . calculate_post_score ( ) , [string] : user . calculate_comment_score ( ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] from flask import Response [EOL] [EOL] from . . . auth import login_required , create_login_token [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] @ login_required def refresh_token ( user ) : [EOL] [docstring] [EOL] [EOL] return json_response ( { [string] : create_login_token ( uuid = user . uuid , last_password_change = user . datetime_last_password_change ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Board , BoardSubscription [EOL] from . . . utils import json_response [EOL] from . . . validation import BoardNameField , validate_json [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def unsubscribe_from_board ( user , results ) : [EOL] [docstring] [EOL] [EOL] board = ... [EOL] try : [EOL] board = Board . get_with_name ( results [ [string] ] ) [EOL] except Board . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] try : [EOL] user . unsubscribe_from_board ( board ) [EOL] except BoardSubscription . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_optional_using_post_id [EOL] from . . . models import User , Post [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , IDField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_optional_using_post_id def delete_post ( user , results , moderator ) : [EOL] [docstring] [EOL] [EOL] post = ... [EOL] try : [EOL] post = Post . get_by_id ( results [ [string] ] ) [EOL] except Post . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if not moderator and post . creator_uuid != user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] post . delete_instance ( ) [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import backend [EOL] from flask import Response [EOL] from mypy_extensions import TypedDict [EOL] from marshmallow import Schema [EOL] [EOL] from . . . mail import send_from_template [EOL] from . . . auth import create_registration_token [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , EmailField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] email = EmailField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] email = ... [EOL] [EOL] [EOL] @ validate_json ( Validator ) def request_registration ( results ) : [EOL] [docstring] [EOL] [EOL] if User . any_with_email ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] send_from_template ( subject = [string] , recipient = results [ [string] ] , filename = [string] , parameters = { [string] : create_registration_token ( results [ [string] ] ) } ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.EmailField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from typing import Optional [EOL] [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_required [EOL] from . . . models import User , Board [EOL] from . . . utils import json_response [EOL] from . . . validation import ( validate_json , BoardNameField , BoardTitleField , BoardSidebarTextField ) [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] title = BoardTitleField ( required = True , allow_none = True ) [EOL] sidebar_text = BoardSidebarTextField ( required = True , data_key = [string] ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] title = ... [EOL] sidebar_text = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_required def edit_board ( user , results ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] Board . update_with_name ( name = results [ [string] ] , title = results [ [string] ] , sidebar_text = results [ [string] ] ) [EOL] except Board . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.BoardTitleField$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardSidebarTextField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import flask [EOL] import typing [EOL] import backend [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from flask import Response [EOL] from mypy_extensions import TypedDict [EOL] from marshmallow import Schema , validates_schema , ValidationError [EOL] [EOL] from . . . validation import ( validate_json , validate_token_field , EmailField , UsernameField , PasswordField , TrimmedStringField ) [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] class JSONValidator ( Schema ) : [EOL] token = TrimmedStringField ( required = True ) [EOL] username = UsernameField ( required = True ) [EOL] password = PasswordField ( required = True ) [EOL] repeat_password = PasswordField ( required = True , data_key = [string] ) [EOL] [EOL] @ validates_schema def _validate_passwords_same ( self , data ) : [EOL] if ( [string] in data [EOL] and [string] in data [EOL] and data [ [string] ] != data [ [string] ] ) : [EOL] raise ValidationError ( { [string] : [ [string] ] } ) [EOL] [EOL] [EOL] class JSONValidationResults ( TypedDict ) : [EOL] token = ... [EOL] username = ... [EOL] password = ... [EOL] repeat_password = ... [EOL] [EOL] [EOL] class TokenValidator ( Schema ) : [EOL] email = EmailField ( required = True ) [EOL] [EOL] [EOL] class TokenPayload ( TypedDict ) : [EOL] email = ... [EOL] [EOL] [EOL] @ validate_json ( JSONValidator ) @ validate_token_field ( TokenValidator ) def confirm_registration ( results , token ) : [EOL] [docstring] [EOL] [EOL] if User . any_with_email ( token [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] if User . any_with_name ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] User . create ( email = token [ [string] ] , name = results [ [string] ] , password = results [ [string] ] ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.TrimmedStringField$ 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.EmailField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Iterator [EOL] import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] from math import ceil [EOL] from datetime import datetime [EOL] from typing import Optional , Iterator [EOL] [EOL] from peewee import fn , SQL [EOL] from flask import Response , current_app [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_optional [EOL] from . . . models import ( User , PostVote , Post , Comment , PostReport , SavedPost , Board ) [EOL] from . . . utils import json_response , SortKeyWithHot , Vote [EOL] from . . . validation import ( validate_query_params , BoardNameField , PageField , StringEnumField ) [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] sort_key = StringEnumField ( enum = SortKeyWithHot , required = True , data_key = [string] ) [EOL] page = PageField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] sort_key = ... [EOL] page = ... [EOL] [EOL] [EOL] class PostRow ( TypedDict ) : [EOL] id = ... [EOL] title = ... [EOL] url = ... [EOL] text = ... [EOL] datetime_created = ... [EOL] datetime_edited = ... [EOL] creator = ... [EOL] comments = ... [EOL] up_votes = ... [EOL] down_votes = ... [EOL] user_vote = ... [EOL] reported = ... [EOL] saved = ... [EOL] [EOL] [EOL] @ login_optional @ validate_query_params ( Validator ) def board_posts ( user , results ) : [EOL] [docstring] [EOL] [EOL] if not Board . any_with_name ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] user_uuid = None if user is None else user . uuid [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] query = Post . select ( Post . id , Post . title , Post . url , Post . text , Post . datetime_created , Post . datetime_edited , User . name . alias ( [string] ) , Comment . select ( fn . Count ( [string] ) ) . where ( Comment . post_id == Post . id ) . alias ( [string] ) , PostVote . select ( fn . Count ( [string] ) ) . where ( PostVote . post_id == Post . id ) . where ( PostVote . vote == [number] ) . alias ( [string] ) , PostVote . select ( fn . Count ( [string] ) ) . where ( PostVote . post_id == Post . id ) . where ( PostVote . vote == - [number] ) . alias ( [string] ) , fn . Coalesce ( PostVote . vote , [number] ) . alias ( [string] ) , PostReport . id . is_null ( False ) . alias ( [string] ) , SavedPost . id . is_null ( False ) . alias ( [string] ) ) . join ( dest = User , join_type = [string] , on = User . uuid == Post . creator_uuid ) . join ( dest = PostVote , join_type = [string] , on = ( PostVote . post_id == Post . id ) & ( PostVote . creator_uuid == user_uuid ) ) . join ( dest = PostReport , join_type = [string] , on = ( PostReport . post_id == Post . id ) & ( PostReport . creator_uuid == user_uuid ) ) . join ( dest = SavedPost , join_type = [string] , on = ( SavedPost . post_id == Post . id ) & ( SavedPost . creator_uuid == user_uuid ) ) . where ( fn . Lower ( Post . board_name ) == results [ [string] ] . lower ( ) ) [EOL] [EOL] [comment] [EOL] if results [ [string] ] == SortKeyWithHot . Top : [EOL] query = query . order_by ( ( SQL ( [string] ) - SQL ( [string] ) ) . desc ( ) , Post . datetime_created , Post . id ) [EOL] elif results [ [string] ] == SortKeyWithHot . Bottom : [EOL] query = query . order_by ( ( SQL ( [string] ) - SQL ( [string] ) ) , Post . datetime_created , Post . id ) [EOL] elif results [ [string] ] == SortKeyWithHot . Newest : [EOL] query = query . order_by ( Post . datetime_created . desc ( ) , Post . id . desc ( ) ) [EOL] elif results [ [string] ] == SortKeyWithHot . Oldest : [EOL] query = query . order_by ( Post . datetime_created , Post . id ) [EOL] else : [comment] [EOL] query = query . order_by ( Post . hot_order_key ( [string] , [string] ) . desc ( ) , Post . id . desc ( ) ) [EOL] [EOL] per_page = current_app . config [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] total_items = query . count ( ) [EOL] total_pages = ceil ( total_items / per_page ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] posts = query . paginate ( results [ [string] ] , paginate_by = per_page ) . dicts ( ) . iterator ( ) [EOL] [EOL] return json_response ( { [string] : total_items , [string] : total_pages , [string] : [ { [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] , [string] : post [ [string] ] } for post in posts ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.StringEnumField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.PageField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $utils.SortKeyWithHot$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $datetime.datetime$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $utils.Vote$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_optional_using_post_id [EOL] from . . . models import User , Post [EOL] from . . . utils import json_response , current_datetime_utc [EOL] from . . . validation import validate_json , IDField , PostTextField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] text = PostTextField ( required = True , allow_none = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] text = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_optional_using_post_id def edit_post ( user , results , moderator ) : [EOL] [docstring] [EOL] [EOL] post = ... [EOL] try : [EOL] post = Post . get_by_id ( results [ [string] ] ) [EOL] except Post . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if not moderator and post . creator_uuid != user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] post . text = results [ [string] ] [EOL] post . datetime_edited = current_datetime_utc ( ) [comment] [EOL] post . save ( ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.PostTextField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import flask [EOL] from typing import Optional [EOL] [EOL] from flask import Response [EOL] [EOL] from . . . models import Board [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] def random_board ( ) : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] try : [EOL] name = Board . get_random ( ) . name [EOL] except Board . DoesNotExist : [EOL] name = None [EOL] [EOL] return json_response ( { [string] : name } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Post , Moderator [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , IDField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] [EOL] [EOL] class Row ( TypedDict ) : [EOL] creator_uuid = ... [EOL] administrator = ... [EOL] moderator = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def report_post ( user , results ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] row = ... [EOL] try : [EOL] row = Post . select ( Post . creator_uuid . alias ( [string] ) , User . administrator , Moderator . id . is_null ( False ) . alias ( [string] ) ) . join ( dest = User , join_type = [string] , on = User . uuid == Post . creator_uuid ) . join ( dest = Moderator , join_type = [string] , on = ( Moderator . user_uuid == User . uuid ) & ( Moderator . board_name == Post . board_name ) ) . where ( Post . id == results [ [string] ] ) . dicts ( ) . get ( ) [EOL] except Post . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] == user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if user . has_reported_post ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] user . report_post ( results [ [string] ] ) [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response
import flask [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . models import User [EOL] from . . . auth import create_login_token [EOL] from . . . validation import validate_json , UsernameField , PasswordField [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] username = UsernameField ( required = True ) [EOL] password = PasswordField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] username = ... [EOL] password = ... [EOL] [EOL] [EOL] @ validate_json ( Validator ) def login ( results ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_with_name ( results [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if not user . password_matches ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] return json_response ( { [string] : create_login_token ( uuid = user . uuid , last_password_change = user . datetime_last_password_change ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.PasswordField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User , Comment , Post , Moderator [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , IDField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] id = IDField ( required = True , strict = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] id = ... [EOL] [EOL] [EOL] class Row ( TypedDict ) : [EOL] creator_uuid = ... [EOL] administrator = ... [EOL] moderator = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) def report_comment ( user , results ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] row = ... [EOL] try : [EOL] row = Comment . select ( Comment . creator_uuid . alias ( [string] ) , User . administrator , Moderator . id . is_null ( False ) . alias ( [string] ) ) . join ( Post , on = Post . id == Comment . post_id ) . join ( dest = User , join_type = [string] , on = User . uuid == Comment . creator_uuid ) . join ( dest = Moderator , join_type = [string] , on = ( Moderator . user_uuid == User . uuid ) & ( Moderator . board_name == Post . board_name ) ) . where ( Comment . id == results [ [string] ] ) . where ( ~ Comment . deleted ) . dicts ( ) . get ( ) [EOL] except Comment . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] == user . uuid : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if row [ [string] ] : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] if user . has_reported_comment ( results [ [string] ] ) : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] user . report_comment ( results [ [string] ] ) [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.IDField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response
import flask [EOL] import models [EOL] from flask import Response [EOL] [EOL] from . . . auth import login_required [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] [EOL] [EOL] @ login_required def account_details ( user ) : [EOL] [docstring] [EOL] [EOL] return json_response ( { [string] : user . name , [string] : user . email , [string] : user . administrator , [string] : list ( user . iterate_board_subscriptions ( ) ) , [string] : list ( user . iterate_moderated_boards ( ) ) , [string] : user . unread_messages_count ( ) , [string] : user . calculate_post_score ( ) , [string] : user . calculate_comment_score ( ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator [EOL] import flask [EOL] import models [EOL] import typing [EOL] import backend [EOL] from typing import Iterator , Optional [EOL] [EOL] from peewee import fn [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . utils import json_response [EOL] from . . . models import User , Board , Moderator , BoardSubscription [EOL] from . . . validation import BoardNameField , validate_query_params [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] [EOL] [EOL] class BoardRow ( TypedDict ) : [EOL] name = ... [EOL] title = ... [EOL] sidebar_text = ... [EOL] datetime_created = ... [EOL] subscribers = ... [EOL] creator = ... [EOL] [EOL] [EOL] @ validate_query_params ( Validator ) def board_details ( results ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] board = ... [EOL] try : [EOL] board = Board . select ( Board . name , Board . title , Board . sidebar_text , Board . datetime_created , User . name . alias ( [string] ) , fn . Count ( BoardSubscription . id ) . alias ( [string] ) ) . join ( dest = User , join_type = [string] , on = User . uuid == Board . creator_uuid ) . join ( dest = BoardSubscription , join_type = [string] , on = BoardSubscription . board_name == Board . name ) . where ( fn . Lower ( Board . name ) == results [ [string] ] . lower ( ) ) . group_by ( Board . name ) . dicts ( ) . get ( ) [EOL] except Board . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] moderators = Moderator . select ( Moderator , User ) . join ( User , on = User . uuid == Moderator . user_uuid ) . where ( Moderator . board_name == board [ [string] ] ) . iterator ( ) [EOL] [EOL] return json_response ( { [string] : board [ [string] ] , [string] : board [ [string] ] , [string] : board [ [string] ] , [string] : board [ [string] ] , [string] : board [ [string] ] , [string] : board [ [string] ] , [string] : [ { [string] : moderator . user . name , [string] : moderator . datetime_created } for moderator in moderators ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import models [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . auth import login_required , moderator_required [EOL] from . . . models import User , Board , Moderator [EOL] from . . . utils import json_response [EOL] from . . . validation import validate_json , BoardNameField , UsernameField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] board = BoardNameField ( required = True ) [EOL] user = UsernameField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] board = ... [EOL] user = ... [EOL] [EOL] [EOL] class Row ( TypedDict ) : [EOL] uuid = ... [EOL] moderator = ... [EOL] [EOL] [EOL] @ login_required @ validate_json ( Validator ) @ moderator_required def remove_moderator ( user , results ) : [EOL] [docstring] [EOL] [EOL] board = ... [EOL] try : [EOL] board = Board . get_with_name ( results [ [string] ] ) [EOL] except Board . DoesNotExist : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] subject = ... [EOL] try : [EOL] subject = User . get_with_name ( results [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] try : [EOL] board . remove_moderator ( subject ) [EOL] except Moderator . DoesNotExist : [EOL] return json_response ( { [string] : [string] } , status_code = [number] ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.BoardNameField$ 0 0 0 0 0 0 0 0 $backend.src.validation.UsernameField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import backend [EOL] from flask import Response [EOL] from marshmallow import Schema [EOL] from mypy_extensions import TypedDict [EOL] [EOL] from . . . models import User [EOL] from . . . utils import json_response [EOL] from . . . mail import send_from_template [EOL] from . . . auth import create_password_change_token [EOL] from . . . validation import validate_json , EmailField [EOL] [EOL] [EOL] class Validator ( Schema ) : [EOL] email = EmailField ( required = True ) [EOL] [EOL] [EOL] class ValidationResults ( TypedDict ) : [EOL] email = ... [EOL] [EOL] [EOL] @ validate_json ( Validator ) def request_password_change ( results ) : [EOL] [docstring] [EOL] [EOL] user = ... [EOL] try : [EOL] user = User . get_with_email ( results [ [string] ] ) [EOL] except User . DoesNotExist : [EOL] return json_response ( { [string] : [ [string] ] } , status_code = [number] ) [EOL] [EOL] send_from_template ( subject = [string] , recipient = user . email , filename = [string] , parameters = { [string] : user . name , [string] : create_password_change_token ( user . uuid ) } ) [EOL] [EOL] return json_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.validation.EmailField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Union , Optional , Iterator [EOL] import saved_comment [EOL] import backend [EOL] import message [EOL] import comment [EOL] import utils [EOL] import board [EOL] import comment_report [EOL] import builtins [EOL] import typing [EOL] import saved_post [EOL] import board_subscription [EOL] import post_report [EOL] import moderator [EOL] import post [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from uuid import uuid4 [EOL] from datetime import datetime [EOL] from typing import Optional , Iterator , Union , TYPE_CHECKING [EOL] [EOL] from peewee import fn , CharField , FixedCharField , BooleanField [EOL] [EOL] from . . utils import ( generate_password_hash , current_datetime_utc , password_hash_matches , Vote ) [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [comment] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] from . board import Board [EOL] from . message import Message [EOL] from . board_subscription import BoardSubscription [EOL] from . comment import Comment [EOL] from . comment_report import CommentReport [EOL] from . saved_comment import SavedComment [EOL] from . post import Post [EOL] from . post_report import PostReport [EOL] from . saved_post import SavedPost [EOL] [EOL] [EOL] class User ( BaseModel ) : [EOL] [comment] [EOL] uuid = FixedCharField ( max_length = [number] , primary_key = True ) [EOL] [comment] [EOL] email = CharField ( max_length = [number] , unique = True ) [EOL] name = CharField ( max_length = [number] , unique = True ) [EOL] [comment] [EOL] password_hash = FixedCharField ( max_length = [number] ) [EOL] datetime_joined = UTCTimestampField ( ) [EOL] datetime_last_password_change = UTCTimestampField ( null = True ) [EOL] administrator = BooleanField ( ) [EOL] [EOL] @ classmethod def create ( cls , * , uuid = None , email , name , password , administrator = False , datetime_joined = None , datetime_last_password_change = None , ) : [EOL] [docstring] [EOL] [EOL] return cls . create_with_password_hash ( uuid = uuid , email = email , name = name , password_hash = generate_password_hash ( password ) , administrator = administrator , datetime_joined = datetime_joined , datetime_last_password_change = datetime_last_password_change ) [EOL] [EOL] @ classmethod def create_with_password_hash ( cls , * , uuid = None , email , name , password_hash , administrator = False , datetime_joined = None , datetime_last_password_change = None , ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( uuid = uuid or str ( uuid4 ( ) ) , email = email , name = name , password_hash = password_hash , administrator = administrator , datetime_joined = datetime_joined or current_datetime_utc ( ) , datetime_last_password_change = datetime_last_password_change ) [EOL] [EOL] @ classmethod def get_with_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] return cls . get ( fn . Lower ( cls . name ) == name . lower ( ) ) [EOL] [EOL] @ classmethod def get_with_email ( cls , email ) : [EOL] [docstring] [EOL] [EOL] return cls . get ( fn . Lower ( cls . email ) == email . lower ( ) ) [EOL] [EOL] @ classmethod def any_with_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] return cls . any ( fn . Lower ( cls . name ) == name . lower ( ) ) [EOL] [EOL] @ classmethod def any_with_email ( cls , email ) : [EOL] [docstring] [EOL] [EOL] return cls . any ( fn . Lower ( cls . email ) == email . lower ( ) ) [EOL] [EOL] def iterate_board_subscriptions ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] from . board_subscription import BoardSubscription [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] iterator = self . board_subscriptions . order_by ( BoardSubscription . board_name ) . iterator ( ) [EOL] for subscription in iterator : [EOL] yield subscription . board_name [EOL] [EOL] def iterate_moderated_boards ( self ) : [EOL] [docstring] [EOL] [EOL] from . moderator import Moderator [EOL] [EOL] iterator = self . moderated . order_by ( Moderator . board_name ) . iterator ( ) [EOL] for moderator in iterator : [EOL] yield moderator . board_name [EOL] [EOL] def unread_messages_count ( self ) : [EOL] [docstring] [EOL] [EOL] from . message import Message [EOL] [EOL] return self . received_messages . where ( ~ Message . read ) . count ( ) [EOL] [EOL] def calculate_post_score ( self ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . post_vote import PostVote [EOL] [EOL] return self . posts . select ( fn . Coalesce ( fn . Sum ( PostVote . vote ) , [number] ) . alias ( [string] ) ) . join ( PostVote , on = PostVote . post_id == Post . id ) . dicts ( ) . get ( ) [ [string] ] [EOL] [EOL] def calculate_comment_score ( self ) : [EOL] [docstring] [EOL] [EOL] from . comment import Comment [EOL] from . comment_vote import CommentVote [EOL] [EOL] return self . comments . select ( fn . Coalesce ( fn . Sum ( CommentVote . vote ) , [number] ) . alias ( [string] ) ) . join ( CommentVote , on = CommentVote . comment_id == Comment . id ) . where ( ~ Comment . deleted ) . dicts ( ) . get ( ) [ [string] ] [EOL] [EOL] def password_matches ( self , password ) : [EOL] [docstring] [EOL] [EOL] return password_hash_matches ( self . password_hash , password ) [EOL] [EOL] def update_password ( self , password ) : [EOL] [docstring] [EOL] [EOL] self . password_hash = generate_password_hash ( password ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . datetime_last_password_change = current_datetime_utc ( ) [comment] [EOL] [EOL] def is_subscribed_to_board ( self , board ) : [EOL] [docstring] [EOL] [EOL] from . board import Board [EOL] from . board_subscription import BoardSubscription [EOL] [EOL] name = board . name if isinstance ( board , Board ) else board [EOL] [EOL] return self . board_subscriptions . where ( BoardSubscription . board_name == name ) . exists ( ) [EOL] [EOL] def subscribe_to_board ( self , board ) : [EOL] [docstring] [EOL] [EOL] from . board_subscription import BoardSubscription [EOL] [EOL] return BoardSubscription . create ( user = self , board = board ) [EOL] [EOL] def unsubscribe_from_board ( self , board ) : [EOL] [docstring] [EOL] [EOL] from . board import Board [EOL] from . board_subscription import BoardSubscription [EOL] [EOL] name = board . name if isinstance ( board , Board ) else board [EOL] [EOL] count = BoardSubscription . delete ( ) . where ( BoardSubscription . user_uuid == self . uuid ) . where ( BoardSubscription . board_name == name ) . execute ( ) [EOL] if count == [number] : [EOL] raise BoardSubscription . DoesNotExist [EOL] [EOL] def send_message ( self , text , receiver ) : [EOL] [docstring] [EOL] [EOL] from . message import Message [EOL] [EOL] return Message . create ( text = text , sender = self , receiver = receiver ) [EOL] [EOL] def has_reported_comment ( self , comment ) : [EOL] [docstring] [EOL] [EOL] from . comment import Comment [EOL] from . comment_report import CommentReport [EOL] [EOL] id = comment . id if isinstance ( comment , Comment ) else comment [EOL] [EOL] return self . reported_comments . join ( Comment , on = Comment . id == CommentReport . comment_id ) . where ( Comment . id == id ) . exists ( ) [EOL] [EOL] def report_comment ( self , comment ) : [EOL] [docstring] [EOL] [EOL] from . comment_report import CommentReport [EOL] [EOL] return CommentReport . create ( creator = self , comment = comment ) [EOL] [EOL] def has_reported_post ( self , post ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . post_report import PostReport [EOL] [EOL] id = post . id if isinstance ( post , Post ) else post [EOL] [EOL] return self . reported_posts . join ( Post , on = Post . id == PostReport . post_id ) . where ( Post . id == id ) . exists ( ) [EOL] [EOL] def report_post ( self , post ) : [EOL] [docstring] [EOL] [EOL] from . post_report import PostReport [EOL] [EOL] return PostReport . create ( creator = self , post = post ) [EOL] [EOL] def has_saved_comment ( self , comment ) : [EOL] [docstring] [EOL] [EOL] from . comment import Comment [EOL] from . saved_comment import SavedComment [EOL] [EOL] id = comment . id if isinstance ( comment , Comment ) else comment [EOL] [EOL] return self . saved_comments . join ( Comment , on = Comment . id == SavedComment . comment_id ) . where ( Comment . id == id ) . exists ( ) [EOL] [EOL] def save_comment ( self , comment ) : [EOL] [docstring] [EOL] [EOL] from . saved_comment import SavedComment [EOL] [EOL] return SavedComment . create ( creator = self , comment = comment ) [EOL] [EOL] def unsave_comment ( self , comment ) : [EOL] [docstring] [EOL] [EOL] from . comment import Comment [EOL] from . saved_comment import SavedComment [EOL] [EOL] id = comment . id if isinstance ( comment , Comment ) else comment [EOL] [EOL] count = SavedComment . delete ( ) . where ( SavedComment . creator_uuid == self . uuid ) . where ( SavedComment . comment_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] raise SavedComment . DoesNotExist [EOL] [EOL] def has_saved_post ( self , post ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . saved_post import SavedPost [EOL] [EOL] id = post . id if isinstance ( post , Post ) else post [EOL] [EOL] return self . saved_posts . join ( Post , on = Post . id == SavedPost . post_id ) . where ( Post . id == id ) . exists ( ) [EOL] [EOL] def save_post ( self , post ) : [EOL] [docstring] [EOL] [EOL] from . saved_post import SavedPost [EOL] [EOL] return SavedPost . create ( creator = self , post = post ) [EOL] [EOL] def unsave_post ( self , post ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . saved_post import SavedPost [EOL] [EOL] id = post . id if isinstance ( post , Post ) else post [EOL] [EOL] count = SavedPost . delete ( ) . where ( SavedPost . creator_uuid == self . uuid ) . where ( SavedPost . post_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] raise SavedPost . DoesNotExist [EOL] [EOL] def vote_on_comment ( self , comment , vote ) : [EOL] [docstring] [EOL] [EOL] from . comment import Comment [EOL] from . comment_vote import CommentVote [EOL] [EOL] id = comment . id if isinstance ( comment , Comment ) else comment [EOL] count = ... [EOL] [EOL] if vote == [number] : [EOL] count = CommentVote . delete ( ) . where ( CommentVote . creator_uuid == self . uuid ) . where ( CommentVote . comment_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] raise CommentVote . DoesNotExist [EOL] return [EOL] [EOL] count = CommentVote . update ( vote = vote ) . where ( CommentVote . creator_uuid == self . uuid ) . where ( CommentVote . comment_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] CommentVote . create ( creator = self , comment = id , vote = vote ) [EOL] [EOL] def vote_on_post ( self , post , vote ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . post_vote import PostVote [EOL] [EOL] id = post . id if isinstance ( post , Post ) else post [EOL] count = ... [EOL] [EOL] if vote == [number] : [EOL] count = PostVote . delete ( ) . where ( PostVote . creator_uuid == self . uuid ) . where ( PostVote . post_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] raise PostVote . DoesNotExist [EOL] return [EOL] [EOL] count = PostVote . update ( vote = vote ) . where ( PostVote . creator_uuid == self . uuid ) . where ( PostVote . post_id == id ) . execute ( ) [EOL] if count == [number] : [EOL] PostVote . create ( creator = self , post = id , vote = vote ) [EOL] [EOL] def password_has_changed_since ( self , date ) : [EOL] [docstring] [EOL] [EOL] return self . datetime_last_password_change is not None \ [EOL] and ( date is None or self . datetime_last_password_change > date ) [EOL] [EOL] def can_moderate_board ( self , board ) : [EOL] [docstring] [EOL] [EOL] from . moderator import Moderator [EOL] [EOL] return self . administrator or ( self . moderated . where ( fn . Lower ( Moderator . board_name ) == board . lower ( ) ) . exists ( ) ) [EOL] [EOL] def can_moderate_board_with_post ( self , id ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . moderator import Moderator [EOL] [EOL] return self . administrator or ( self . moderated . join ( Post , on = Post . board_name == Moderator . board_name ) . where ( Post . id == id ) . exists ( ) ) [EOL] [EOL] def can_moderate_board_with_comment ( self , id ) : [EOL] [docstring] [EOL] [EOL] from . post import Post [EOL] from . comment import Comment [EOL] from . moderator import Moderator [EOL] [EOL] return self . administrator or ( self . moderated . join ( Post , on = Post . board_name == Moderator . board_name ) . join ( Comment , on = Comment . post_id == Post . id ) . where ( Comment . id == id ) . exists ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $User$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 $User$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 $User$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $User$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[board_subscription.BoardSubscription]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[board_subscription.BoardSubscription]$ 0 0 0 0 0 0 $typing.Iterator[board_subscription.BoardSubscription]$ 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[moderator.Moderator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[moderator.Moderator]$ 0 0 0 0 0 0 $typing.Iterator[moderator.Moderator]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $board_subscription.BoardSubscription$ 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 0 0 $typing.Union[board.Board,builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $message.Message$ 0 0 0 $builtins.str$ 0 $typing.Union[User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Union[User,builtins.str]$ 0 $typing.Union[User,builtins.str]$ 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $comment_report.CommentReport$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $post_report.PostReport$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saved_comment.SavedComment$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saved_post.SavedPost$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 $utils.Vote$ 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 $utils.Vote$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[comment.Comment,builtins.int]$ 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 0 0 0 $None$ 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 $utils.Vote$ 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 $utils.Vote$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[post.Post,builtins.int]$ 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0
import Comment [EOL] from typing import Type , Union , Optional [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import post [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Optional , Union [EOL] [EOL] from peewee import AutoField , CharField , ForeignKeyField , BooleanField [EOL] [EOL] from . user import User [EOL] from . post import Post [EOL] from . . utils import current_datetime_utc [EOL] from . . database import transaction , BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class Comment ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] text = CharField ( max_length = Post . text . max_length ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] datetime_edited = UTCTimestampField ( null = True ) [EOL] deleted = BooleanField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] , null = True ) [EOL] post = ForeignKeyField ( model = Post , backref = [string] , on_delete = [string] , on_update = [string] ) [EOL] parent = ForeignKeyField ( model = [string] , backref = [string] , on_delete = [string] , on_update = [string] , null = True ) [EOL] [EOL] @ classmethod def create ( cls , * , id = None , text , datetime_created = None , datetime_edited = None , deleted = False , creator , post , parent ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( id = id , text = text , datetime_created = datetime_created or current_datetime_utc ( ) , datetime_edited = datetime_edited , deleted = deleted , creator = creator , post = post , parent = parent ) [EOL] [EOL] @ classmethod def get_existing_with_id ( cls , id ) : [EOL] [docstring] [EOL] [EOL] return cls . get ( ~ cls . deleted , cls . id == id ) [EOL] [EOL] def mark_as_deleted ( self ) : [EOL] [docstring] [EOL] [EOL] from . comment_report import CommentReport [EOL] from . saved_comment import SavedComment [EOL] [EOL] [comment] [EOL] with transaction ( ) : [EOL] self . deleted = True [EOL] self . text = [string] [EOL] self . save ( ) [EOL] [comment] [EOL] [comment] [EOL] CommentReport . delete ( ) . where ( CommentReport . comment_id == self . id ) . execute ( ) [EOL] SavedComment . delete ( ) . where ( SavedComment . comment_id == self . id ) . execute ( ) [EOL] [EOL] def dismiss_all_reports ( self ) : [EOL] [docstring] [EOL] [EOL] from . comment_report import CommentReport [EOL] [EOL] return CommentReport . delete ( ) . where ( CommentReport . comment_id == self . id ) . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.comment.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.comment.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.comment.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Comment$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Union[Comment.post.Post,builtins.int]$ 0 $typing.Optional[typing.Union[Comment,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Union[Comment.post.Post,builtins.int]$ 0 $typing.Union[Comment.post.Post,builtins.int]$ 0 $typing.Optional[typing.Union[Comment,builtins.int]]$ 0 $typing.Optional[typing.Union[Comment,builtins.int]]$ 0 0 0 0 0 0 $Comment$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Union , Optional [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Union , Optional [EOL] [EOL] from peewee import AutoField , ForeignKeyField , CharField , BooleanField [EOL] [EOL] from . user import User [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class Message ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] text = CharField ( max_length = [number] ) [EOL] read = BooleanField ( ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] [EOL] sender = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] receiver = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , text , read = False , datetime_created = None , sender , receiver ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( text = text , read = read , datetime_created = datetime_created or current_datetime_utc ( ) , sender = sender , receiver = receiver ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.message.Message]$ 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.message.Message]$ 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.message.Message]$ 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 $typing.Type[backend.src.models.message.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.message.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Message$ 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 0
[docstring] [EOL] [EOL] [EOL] from . board_subscription import BoardSubscription [EOL] from . board import Board [EOL] from . comment_report import CommentReport [EOL] from . comment_vote import CommentVote [EOL] from . comment import Comment [EOL] from . message import Message [EOL] from . moderator import Moderator [EOL] from . post_report import PostReport [EOL] from . post_vote import PostVote [EOL] from . post import Post [EOL] from . saved_comment import SavedComment [EOL] from . saved_post import SavedPost [EOL] from . user import User [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import BoardSubscription [EOL] from typing import Type , Union [EOL] import backend [EOL] import board [EOL] import builtins [EOL] import typing [EOL] import user [EOL] from __future__ import annotations [EOL] [EOL] from typing import Union [EOL] [EOL] from peewee import ForeignKeyField , AutoField [EOL] [EOL] from . user import User [EOL] from . board import Board [EOL] from . . database import BaseModel [EOL] [EOL] [EOL] class BoardSubscription ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] [EOL] user = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] board = ForeignKeyField ( model = Board , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ classmethod def create ( cls , * , user , board ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( user = user , board = board ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.board_subscription.BoardSubscription]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.board_subscription.BoardSubscription]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $BoardSubscription$ 0 0 0 0 0 $typing.Union[builtins.str,BoardSubscription.user.User]$ 0 $typing.Union[builtins.str,BoardSubscription.board.Board]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,BoardSubscription.user.User]$ 0 $typing.Union[builtins.str,BoardSubscription.user.User]$ 0 $typing.Union[builtins.str,BoardSubscription.board.Board]$ 0 $typing.Union[builtins.str,BoardSubscription.board.Board]$ 0 0
import PostReport [EOL] from typing import Type , Union , Optional [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import post [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Union , Optional [EOL] [EOL] from peewee import AutoField , ForeignKeyField [EOL] [EOL] from . user import User [EOL] from . post import Post [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class PostReport ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] post = ForeignKeyField ( model = Post , backref = [string] , on_delete = [string] , on_update = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , datetime_created = None , creator , post ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( datetime_created = datetime_created or current_datetime_utc ( ) , creator = creator , post = post ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 $typing.Type[backend.src.models.post_report.PostReport]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post_report.PostReport]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PostReport$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[PostReport.post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[PostReport.post.Post,builtins.int]$ 0 $typing.Union[PostReport.post.Post,builtins.int]$ 0 0
import Post [EOL] from typing import Type , Union , Any , Optional [EOL] import backend [EOL] import board [EOL] import builtins [EOL] import typing [EOL] import peewee [EOL] import user [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Optional , Union [EOL] [EOL] from peewee import fn , SQL , Expression , AutoField , CharField , ForeignKeyField [EOL] [EOL] from . user import User [EOL] from . board import Board [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class Post ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] title = CharField ( max_length = [number] ) [EOL] url = CharField ( max_length = [number] , null = True ) [EOL] [comment] [EOL] text = CharField ( max_length = [number] , null = True ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] datetime_edited = UTCTimestampField ( null = True ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] , null = True ) [EOL] board = ForeignKeyField ( model = Board , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , id = None , title , url , text , datetime_created = None , datetime_edited = None , creator , board ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( id = id , title = title , url = url , text = text , datetime_created = datetime_created or current_datetime_utc ( ) , datetime_edited = datetime_edited , creator = creator , board = board ) [EOL] [EOL] @ classmethod def hot_order_key ( cls , upvotes_field , downvotes_field ) : [EOL] [docstring] [EOL] [EOL] total_score = SQL ( upvotes_field ) - SQL ( downvotes_field ) [EOL] total_score = fn . Max ( total_score , [number] ) [EOL] [comment] [EOL] logarithmic_score = fn . Log10 ( total_score + [number] ) [EOL] [comment] [EOL] [comment] [EOL] upvote_worth = ( [number] * [number] * [number] ) / fn . Log10 ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return logarithmic_score * upvote_worth + Post . datetime_created [EOL] [EOL] def dismiss_all_reports ( self ) : [EOL] [docstring] [EOL] [EOL] from . post_report import PostReport [EOL] [EOL] return PostReport . delete ( ) . where ( PostReport . post_id == self . id ) . execute ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post.Post]$ 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Post$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Union[Post.board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Union[Post.board.Board,builtins.str]$ 0 $typing.Union[Post.board.Board,builtins.str]$ 0 0 0 0 0 0 $peewee.Expression$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import CommentVote [EOL] from typing import Type , Union [EOL] import backend [EOL] import comment [EOL] import utils [EOL] import builtins [EOL] import typing [EOL] import user [EOL] from __future__ import annotations [EOL] [EOL] from typing import Union [EOL] [EOL] from peewee import AutoField , ForeignKeyField , SmallIntegerField [EOL] [EOL] from . user import User [EOL] from . comment import Comment [EOL] from . . database import BaseModel [EOL] from . . utils import Vote [EOL] [EOL] [EOL] class CommentVote ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] vote = SmallIntegerField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] comment = ForeignKeyField ( model = Comment , backref = [string] , on_delete = [string] , on_update = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , vote , creator , comment ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( vote = vote , creator = creator , comment = comment ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.comment_vote.CommentVote]$ 0 0 0 0 0 0 $typing.Type[backend.src.models.comment_vote.CommentVote]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.comment_vote.CommentVote]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $CommentVote$ 0 0 0 0 0 $utils.Vote$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[CommentVote.comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[CommentVote.comment.Comment,builtins.int]$ 0 $typing.Union[CommentVote.comment.Comment,builtins.int]$ 0 0
import Moderator [EOL] from typing import Type , Union , Optional [EOL] import backend [EOL] import board [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Union , Optional [EOL] [EOL] from peewee import AutoField , ForeignKeyField [EOL] [EOL] from . user import User [EOL] from . board import Board [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class Moderator ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] [EOL] user = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] board = ForeignKeyField ( model = Board , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , datetime_created = None , user , board ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( datetime_created = datetime_created or current_datetime_utc ( ) , user = user , board = board ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 $typing.Type[backend.src.models.moderator.Moderator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.moderator.Moderator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Moderator$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Union[Moderator.user.User,builtins.str]$ 0 $typing.Union[Moderator.board.Board,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Union[Moderator.user.User,builtins.str]$ 0 $typing.Union[Moderator.user.User,builtins.str]$ 0 $typing.Union[Moderator.board.Board,builtins.str]$ 0 $typing.Union[Moderator.board.Board,builtins.str]$ 0 0
import PostVote [EOL] from typing import Type , Union [EOL] import backend [EOL] import utils [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import post [EOL] from __future__ import annotations [EOL] [EOL] from typing import Union [EOL] [EOL] from peewee import AutoField , ForeignKeyField , SmallIntegerField [EOL] [EOL] from . user import User [EOL] from . post import Post [EOL] from . . database import BaseModel [EOL] from . . utils import Vote [EOL] [EOL] [EOL] class PostVote ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] vote = SmallIntegerField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] post = ForeignKeyField ( model = Post , backref = [string] , on_delete = [string] , on_update = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , vote , creator , post ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( vote = vote , creator = creator , post = post ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post_vote.PostVote]$ 0 0 0 0 0 0 $typing.Type[backend.src.models.post_vote.PostVote]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.post_vote.PostVote]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $PostVote$ 0 0 0 0 0 $utils.Vote$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[PostVote.post.Post,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.Vote$ 0 $utils.Vote$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[PostVote.post.Post,builtins.int]$ 0 $typing.Union[PostVote.post.Post,builtins.int]$ 0 0
import SavedComment [EOL] from typing import Type , Union , Optional [EOL] import backend [EOL] import comment [EOL] import builtins [EOL] import typing [EOL] import user [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Union , Optional [EOL] [EOL] from peewee import AutoField , ForeignKeyField [EOL] [EOL] from . user import User [EOL] from . comment import Comment [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [EOL] [EOL] class SavedComment ( BaseModel ) : [EOL] id = AutoField ( primary_key = True ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] ) [EOL] comment = ForeignKeyField ( model = Comment , backref = [string] , on_delete = [string] , on_update = [string] ) [EOL] [EOL] @ classmethod def create ( cls , * , datetime_created = None , creator , comment ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( datetime_created = datetime_created or current_datetime_utc ( ) , creator = creator , comment = comment ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 $typing.Type[backend.src.models.saved_comment.SavedComment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.saved_comment.SavedComment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SavedComment$ 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[SavedComment.comment.Comment,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[SavedComment.comment.Comment,builtins.int]$ 0 $typing.Union[SavedComment.comment.Comment,builtins.int]$ 0 0
from typing import Type , Union , Any , Optional [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import moderator [EOL] import user [EOL] import datetime [EOL] from __future__ import annotations [EOL] [EOL] from datetime import datetime [EOL] from typing import Any , Optional , Union , TYPE_CHECKING [EOL] [EOL] from peewee import fn , CharField , ForeignKeyField [EOL] [EOL] from . user import User [EOL] from . . utils import current_datetime_utc [EOL] from . . database import BaseModel , UTCTimestampField [EOL] [comment] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] from . moderator import Moderator [EOL] [EOL] [EOL] class Board ( BaseModel ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] name = CharField ( max_length = [number] , primary_key = True ) [EOL] title = CharField ( max_length = [number] , null = True ) [EOL] sidebar_text = CharField ( max_length = [number] ) [EOL] datetime_created = UTCTimestampField ( ) [EOL] [EOL] creator = ForeignKeyField ( model = User , backref = [string] , on_delete = [string] , on_update = [string] , column_name = [string] , null = True ) [EOL] [EOL] @ classmethod def create ( cls , * , name , title , sidebar_text , datetime_created = None , creator ) : [EOL] [docstring] [EOL] [EOL] return super ( ) . create ( name = name , title = title , sidebar_text = sidebar_text , datetime_created = datetime_created or current_datetime_utc ( ) , creator = creator ) [EOL] [EOL] @ classmethod def get_random ( cls ) : [EOL] [docstring] [EOL] [EOL] return cls . select ( ) . order_by ( fn . Random ( ) ) . get ( ) [EOL] [EOL] @ classmethod def any_with_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] return cls . any ( fn . Lower ( cls . name ) == name . lower ( ) ) [EOL] [EOL] @ classmethod def get_with_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] return cls . select ( ) . where ( fn . Lower ( cls . name ) == name . lower ( ) ) . get ( ) [EOL] [EOL] @ classmethod def update_with_name ( cls , name , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] count = cls . update ( ** kwargs ) . where ( fn . Lower ( Board . name ) == name . lower ( ) ) . execute ( ) [EOL] if count == [number] : [EOL] raise cls . DoesNotExist [EOL] [EOL] @ classmethod def delete_with_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] count = cls . delete ( ) . where ( fn . Lower ( cls . name ) == name . lower ( ) ) . execute ( ) [EOL] if count == [number] : [EOL] raise cls . DoesNotExist [EOL] [EOL] def add_moderator ( self , user ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] from . moderator import Moderator [EOL] [EOL] return Moderator . create ( user = user , board = self ) [EOL] [EOL] def remove_moderator ( self , user ) : [EOL] [docstring] [EOL] [EOL] from . moderator import Moderator [EOL] [EOL] count = Moderator . delete ( ) . where ( Moderator . user == user ) . where ( Moderator . board_name == self . name ) . execute ( ) [EOL] if count == [number] : [EOL] raise Moderator . DoesNotExist [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.board.Board]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.board.Board]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.src.models.board.Board]$ 0 0 0 0 0 0 0 0 $backend.src.database.UTCTimestampField$ 0 0 0 0 0 0 $typing.Type[backend.src.models.board.Board]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Board$ 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 $typing.Optional[datetime.datetime.datetime]$ 0 0 0 0 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 $typing.Optional[typing.Union[user.User,builtins.str]]$ 0 0 0 0 0 0 $Board$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $Board$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $moderator.Moderator$ 0 0 0 $typing.Union[user.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Union[user.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[user.User,builtins.str]$ 0 $typing.Union[user.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import flask [EOL] import backend [EOL] import builtins [EOL] import typing [EOL] import snapshottest [EOL] from typing import Optional [EOL] from datetime import datetime [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] from flask import Response [EOL] from flask . testing import FlaskClient [EOL] from snapshottest . module import SnapshotTest [EOL] [EOL] from src . auth import decode_jwt [EOL] [EOL] from . utils import get_cached_login_headers [EOL] [EOL] [EOL] pytestmark = pytest . mark . refresh_token [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] ) ) def test_only_supports_get ( readonly_client , method ) : [EOL] response = readonly_client . open ( path = [string] , method = method ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_login_required ( readonly_client , snapshot ) : [EOL] response = readonly_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] * [number] , datetime ( [number] , [number] , [number] ) . timestamp ( ) ) , ( [string] , [string] * [number] , None ) ) ) def test_returns_token ( readonly_client , username , uuid , change , ) : [EOL] headers = get_cached_login_headers ( readonly_client , username , f'{ username } [string] ' ) [EOL] with patch ( [string] , lambda : datetime ( [number] , [number] , [number] ) . timestamp ( ) ) : [EOL] response = readonly_client . get ( path = [string] , headers = headers ) [EOL] [EOL] assert decode_jwt ( response . json [ [string] ] ) == { [string] : { [string] : uuid , [string] : change } , [string] : datetime ( [number] , [number] , [number] ) . timestamp ( ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import flask [EOL] import typing [EOL] import snapshottest [EOL] import builtins [EOL] from typing import Optional , Any [EOL] from datetime import datetime [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] from flask import Response [EOL] from flask . testing import FlaskClient [EOL] from snapshottest . module import SnapshotTest [EOL] [EOL] from src . auth import decode_jwt [EOL] from src . models import User [EOL] [EOL] [EOL] pytestmark = pytest . mark . login [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] ) ) def test_only_supports_post ( readonly_client , method ) : [EOL] response = readonly_client . open ( [string] , method = method ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_non_json_input_errors ( readonly_client , snapshot ) : [EOL] response = readonly_client . post ( path = [string] , headers = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] def test_missing_fields_errors ( readonly_client , snapshot ) : [EOL] response = readonly_client . post ( path = [string] , json = { } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] * ( User . name . max_length + [number] ) , [number] , [number] , True , False , None , [ ] , { } ) ) def test_invalid_username_errors ( readonly_client , snapshot , username ) : [EOL] response = readonly_client . post ( path = [string] , json = { [string] : username , [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] * [number] , [string] * [number] , [number] , [number] , True , False , None , [ ] , { } ) ) def test_invalid_password_errors ( readonly_client , snapshot , password ) : [EOL] response = readonly_client . post ( path = [string] , json = { [string] : [string] , [string] : password } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , ) ) def test_nonexistent_username_errors ( readonly_client , snapshot , username ) : [EOL] response = readonly_client . post ( path = [string] , json = { [string] : username , [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] ) ) def test_mismatching_password_errors ( readonly_client , snapshot , password ) : [EOL] response = readonly_client . post ( path = [string] , json = { [string] : [string] , [string] : password } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] * [number] , datetime ( [number] , [number] , [number] ) . timestamp ( ) ) , ( [string] , [string] * [number] , None ) ) ) def test_valid_input_returns_token ( readonly_client , username , uuid , changed ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] with patch ( [string] , lambda : datetime ( [number] , [number] , [number] ) . timestamp ( ) ) : [EOL] response = readonly_client . post ( path = [string] , json = { [string] : username , [string] : f'{ username } [string] ' } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] assert decode_jwt ( response . json [ [string] ] ) == { [string] : { [string] : uuid , [string] : changed } , [string] : datetime ( [number] , [number] , [number] ) . timestamp ( ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import snapshottest [EOL] import builtins [EOL] import pytest [EOL] from flask import Response [EOL] from flask . testing import FlaskClient [EOL] from snapshottest . module import SnapshotTest [EOL] [EOL] from src . utils import SortKeyWithHot [EOL] [EOL] from . utils import get_cached_login_headers [EOL] [EOL] [EOL] pytestmark = pytest . mark . feed_posts [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] ) ) def test_only_supports_get ( readonly_client , method ) : [EOL] response = readonly_client . open ( path = [string] , method = method ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_login_required ( readonly_client , snapshot ) : [EOL] response = readonly_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] def test_missing_fields_errors ( readonly_client , snapshot ) : [EOL] response = readonly_client . get ( path = [string] , headers = get_cached_login_headers ( readonly_client , [string] , [string] ) ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] , [string] , [string] ) ) def test_invalid_sort_key_errors ( readonly_client , snapshot , sort_key ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : sort_key } , headers = get_cached_login_headers ( readonly_client , [string] , [string] ) ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ) def test_invalid_page_errors ( readonly_client , snapshot , page ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : page } , headers = get_cached_login_headers ( readonly_client , [string] , [string] ) ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) @ pytest . mark . parametrize ( [string] , tuple ( SortKeyWithHot . __members__ . keys ( ) ) ) @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] ) ) def test_parameter_combinations ( readonly_client , snapshot , user , sort_key , page ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : sort_key , [string] : page } , headers = get_cached_login_headers ( readonly_client , user ) ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import snapshottest [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] from typing import Any [EOL] [EOL] import pytest [EOL] from flask import Response [EOL] from flask . testing import FlaskClient [EOL] from snapshottest . module import SnapshotTest [EOL] [EOL] from src . models import Board [EOL] [EOL] [EOL] pytestmark = pytest . mark . board_details [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] ) ) def test_only_supports_get ( readonly_client , method ) : [EOL] response = readonly_client . open ( path = [string] , method = method ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_missing_board_name_errors ( readonly_client , snapshot ) : [EOL] response = readonly_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] , [string] , [string] * ( Board . name . max_length + [number] ) ) ) def test_invalid_board_name_errors ( readonly_client , snapshot , board ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : board } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] def test_nonexistent_board_errors ( readonly_client , snapshot ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] ) ) def test_returns_board_details ( readonly_client , snapshot , board ) : [EOL] response = readonly_client . get ( path = [string] , query_string = { [string] : board } ) [EOL] assert response . status_code == [number] [EOL] assert response . mimetype == [string] [EOL] snapshot . assert_match ( response . json ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Iterator , Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] from time import time [EOL] from typing import Dict , Iterator , Any , List [EOL] [EOL] from flask import Response [EOL] from flask . testing import FlaskClient [EOL] from mypy_extensions import TypedDict [EOL] [EOL] [EOL] _token_cache = { } [EOL] [EOL] [EOL] def get_login_token ( client_ , username , password = [string] ) : [EOL] response = client_ . post ( path = [string] , json = { [string] : username , [string] : password } ) [EOL] return response . json [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_cached_login_token ( client_ , username , password = [string] ) : [EOL] combined = f'{ username } [string] { password }' [EOL] try : [EOL] return _token_cache [ combined ] [EOL] except KeyError : [EOL] pass [EOL] token = get_login_token ( client_ , username , password ) [EOL] _token_cache [ combined ] = token [EOL] return token [EOL] [EOL] [EOL] [comment] [EOL] class LoginHeaders ( TypedDict ) : [EOL] Authorization = ... [EOL] [EOL] [EOL] def get_login_headers ( client_ , username , password = [string] ) : [EOL] token = get_login_token ( client_ , username , password ) [EOL] return { [string] : f' [string] { token }' } [EOL] [EOL] [EOL] def get_cached_login_headers ( client_ , username , password = [string] ) : [EOL] token = get_cached_login_token ( client_ , username , password ) [EOL] return { [string] : f' [string] { token }' } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def timestamp_is_recent ( timestamp , leeway_seconds = [number] ) : [EOL] return timestamp >= ( time ( ) - leeway_seconds ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def walk_comments ( comments ) : [EOL] for comment in comments : [EOL] yield from walk_comments ( comment [ [string] ] ) [EOL] yield comment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $LoginHeaders$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $LoginHeaders$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , IO , Union , Iterator [EOL] import typing [EOL] import flask [EOL] import pathlib [EOL] import shutil [EOL] from pathlib import Path [EOL] from typing import Iterator [EOL] from tempfile import NamedTemporaryFile [EOL] [EOL] import pytest [EOL] from flask . testing import FlaskClient [EOL] [EOL] from src . app import create [EOL] [EOL] [EOL] clean_database_path = Path ( __file__ , [string] , [string] , [string] ) [EOL] config = { [string] : True , [string] : [string] , [string] : str ( clean_database_path ) , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] def get_temporary_path ( ) : [EOL] file = NamedTemporaryFile ( delete = False ) [EOL] file . close ( ) [EOL] return Path ( file . name ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture def client ( ) : [EOL] database_path = get_temporary_path ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] shutil . copyfile ( clean_database_path , database_path , follow_symlinks = False ) [EOL] [EOL] app = create ( { ** config , [string] : str ( database_path ) } ) [EOL] [EOL] [comment] [EOL] with app . test_client ( ) as client : [EOL] yield client [EOL] [EOL] database_path . unlink ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture def readonly_client ( ) : [EOL] app = create ( config ) [EOL] [EOL] with app . test_client ( ) as client : [EOL] yield client [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[flask.testing.FlaskClient]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[flask.testing.FlaskClient]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from snapshottest import Snapshot [EOL] [EOL] [EOL] snapshots = Snapshot ( ) [EOL] [EOL] snapshots [ [string] ] = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from snapshottest import Snapshot [EOL] [EOL] [EOL] snapshots = Snapshot ( ) [EOL] [EOL] snapshots [ [string] ] = [string] [EOL] [EOL] snapshots [ [string] ] = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict , List , Tuple , Any , Optional [EOL] import typing [EOL] import pathlib [EOL] import _importlib_modulespec [EOL] import sys [EOL] import inspect [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] [EOL] ROOT_DIRECTORY = Path ( [string] ) . resolve ( ) [EOL] [EOL] sys . path . insert ( [number] , str ( ROOT_DIRECTORY ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] project = [string] [EOL] author = [string] [EOL] copyright = f'{ datetime . now ( ) . year } [string] { author }' [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [EOL] intersphinx_mapping = { [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) , [string] : ( [string] , None ) } [EOL] [EOL] [EOL] autodoc_member_order = [string] [EOL] [EOL] [EOL] def linkcode_resolve ( domain , info ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] if domain != [string] : [EOL] return None [EOL] [EOL] submod = sys . modules . get ( info [ [string] ] ) [EOL] if submod is None : [EOL] return None [EOL] [EOL] obj = submod [EOL] for part in info [ [string] ] . split ( [string] ) : [EOL] try : [EOL] obj = getattr ( obj , part ) [EOL] except Exception : [EOL] return None [EOL] [EOL] obj = inspect . unwrap ( obj ) [EOL] [EOL] try : [EOL] source_file_path = inspect . getsourcefile ( obj ) [EOL] except Exception : [EOL] source_file_path = None [EOL] if not source_file_path : [EOL] return None [EOL] path = Path ( source_file_path ) . relative_to ( ROOT_DIRECTORY ) [EOL] [EOL] try : [EOL] _ , line = inspect . getsourcelines ( obj ) [EOL] except Exception : [EOL] line = [number] [EOL] [EOL] return f' [string] { path } [string] { line }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0