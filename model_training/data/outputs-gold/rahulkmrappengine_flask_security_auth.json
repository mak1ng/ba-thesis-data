[comment] [EOL] from setuptools import setup , find_packages [EOL] [EOL] setup ( name = [string] , version = [string] , packages = find_packages ( ) , package_data = { [string] : [ [string] , [string] , [string] ] } , zip_safe = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from appengine_flask_security_auth . tests import settings [EOL] from appengine_flask_security_auth import create_app [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def app ( ) : [EOL] _app = create_app ( settings ) [EOL] ctx = _app . test_request_context ( ) [EOL] ctx . push ( ) [EOL] [EOL] yield _app [EOL] [EOL] ctx . pop ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def db ( app ) : [EOL] from appengine_flask_security_auth import db as _db [EOL] [EOL] with app . app_context ( ) : [EOL] _db . create_all ( ) [EOL] [EOL] yield _db [EOL] [EOL] _db . session . remove ( ) [EOL] _db . drop_all ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def client ( app , db ) : [EOL] return app . test_client ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from environs import Env [EOL] [EOL] env = Env ( ) [EOL] env . read_env ( ) [EOL] [EOL] TESTING = env . bool ( [string] , False ) [EOL] SECRET_KEY = env . str ( [string] ) [EOL] CACHE_TYPE = env . str ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] database_url = env . str ( [string] , None ) or env . str ( [string] , None ) or [string] [EOL] SQLALCHEMY_DATABASE_URI = database_url [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = env . bool ( [string] , False ) [EOL] [EOL] [comment] [EOL] SECURITY_URL_PREFIX = env . str ( [string] , [string] ) [EOL] SECURITY_CONFIRMABLE = env . bool ( [string] , True ) [EOL] SECURITY_REGISTERABLE = env . bool ( [string] , True ) [EOL] SECURITY_RECOVERABLE = env . bool ( [string] , True ) [EOL] SECURITY_TRACKABLE = env . bool ( [string] , True ) [EOL] SECURITY_CHANGEABLE = env . bool ( [string] , True ) [EOL] SECURITY_PASSWORD_SALT = env . str ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] MAIL_SERVER = env . str ( [string] , [string] ) [EOL] MAIL_PORT = env . int ( [string] , [number] ) [EOL] MAIL_USE_TLS = env . bool ( [string] , True ) [EOL] MAIL_USERNAME = env . str ( [string] , [string] ) [EOL] MAIL_PASSWORD = env . str ( [string] , [string] ) [EOL] MAIL_DEFAULT_SENDER = env . list ( [string] , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] WEBPACK_MANIFEST_PATH = env . str ( [string] , [string] ) [EOL] WEBPACK_ASSETS_BASE_URL = env . str ( [string] , None ) [EOL] [EOL] APISPEC_TITLE = env . str ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Type , List , Any , Dict [EOL] import appengine_flask_security_auth [EOL] import typing [EOL] from flask_security . core import UserMixin , RoleMixin [EOL] from flask_security . datastore import UserDatastore [EOL] [EOL] from google . cloud import datastore [EOL] [EOL] from appengine_flask_security_auth import ds_client [EOL] [EOL] class UserModelMeta ( type ) : [EOL] def __new__ ( cls , name , bases , attrs ) : [EOL] klass = super ( ) . __new__ ( cls , name , bases , attrs ) [EOL] [comment] [EOL] [comment] [EOL] for key in attrs . get ( [string] ) : [EOL] setattr ( klass , key , None ) [EOL] return klass [EOL] [EOL] [EOL] class UserModelCommonMixin : [EOL] def __init__ ( self , ** kwargs ) : [EOL] for key in self . PROPERTIES : [EOL] setattr ( self , key , kwargs . get ( key ) ) [EOL] [EOL] @ classmethod def from_query_result ( cls , result ) : [EOL] kwargs = { key : value for key , value in result . items ( ) } [EOL] kwargs [ [string] ] = result . id [EOL] return cls ( ** kwargs ) [EOL] [EOL] def save ( self ) : [EOL] if hasattr ( self , [string] ) and self . id != None : [EOL] key = ds_client . key ( self . KIND , self . id ) [EOL] else : [EOL] key = ds_client . key ( self . KIND ) [EOL] entity = datastore . Entity ( key = key ) [EOL] update_properties = { key : value for ( key , value ) in self . __dict__ . items ( ) if key in self . PROPERTIES } [EOL] entity . update ( update_properties ) [EOL] ds_client . put ( entity ) [EOL] [EOL] def delete ( self ) : [EOL] key = ds_client . key ( self . KIND , self . id ) [EOL] ds_client . delete ( key ) [EOL] [EOL] [EOL] class Role ( UserModelCommonMixin , RoleMixin , metaclass = UserModelMeta ) : [EOL] KIND = [string] [EOL] PROPERTIES = set ( ( [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] class User ( UserModelCommonMixin , UserMixin , metaclass = UserModelMeta ) : [EOL] KIND = [string] [EOL] PROPERTIES = set ( ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] class AppEngineUserDatastore ( UserDatastore ) : [EOL] [docstring] [EOL] [EOL] def get_user ( self , id_or_email ) : [EOL] [docstring] [EOL] result = None [EOL] try : [EOL] key = ds_client . key ( [string] , int ( id_or_email ) ) [EOL] result = ds_client . get ( key ) [EOL] if result : [EOL] return User . from_query_result ( result ) [EOL] else : [EOL] return None [EOL] except ( TypeError , ValueError ) : [EOL] return self . find_user ( ** { [string] : id_or_email } ) [EOL] [EOL] def find_user ( self , ** kwargs ) : [EOL] if kwargs . get ( [string] ) : [EOL] return self . get_user ( kwargs [ [string] ] ) [EOL] [EOL] query = ds_client . query ( kind = User . KIND ) [EOL] for key , value in kwargs . items ( ) : [EOL] query . add_filter ( key , [string] , value ) [EOL] result = list ( query . fetch ( [number] ) ) [EOL] if result : [EOL] return User . from_query_result ( result [ [number] ] ) [EOL] else : [EOL] return None [EOL] [EOL] def find_role ( self , ** kwargs ) : [EOL] [docstring] [EOL] query = ds_client . query ( kind = Role . KIND ) [EOL] for key , value in kwargs : [EOL] query . add_filter ( key , [string] , value ) [EOL] result = list ( query . fetch ( [number] ) ) [EOL] if result : [EOL] return Role . from_query_result ( result [ [number] ] ) [EOL] else : [EOL] return None [EOL] [EOL] def put ( self , model ) : [EOL] model . save ( ) [EOL] return model [EOL] [EOL] def delete ( self , model ) : [EOL] model . delete ( ) [EOL] [EOL] def commit ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import flask [EOL] from flask import ( render_template , Blueprint , ) [EOL] [EOL] [EOL] blueprint = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ blueprint . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] [EOL] from typing import Any [EOL] import typing [EOL] def test_index_page ( client ) : [EOL] result = client . get ( [string] ) [EOL] assert [string] in result . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from appengine_flask_security_auth . settings import * [EOL] [EOL] TESTING = True [EOL] DEBUG = False [EOL] SQLALCHEMY_DATABASE_URI = [string] [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] WTF_CSRF_ENABLED = False [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0
	0
[EOL] [EOL] def test_config_value ( app ) : [EOL] assert app . config [ [string] ] is True [EOL] assert app . config [ [string] ] is False [EOL] assert app . config [ [string] ] is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0