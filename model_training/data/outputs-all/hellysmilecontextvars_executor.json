import contextvars_executor [EOL] import asyncio [EOL] import asyncio [EOL] import gc [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from contextvars_executor import ContextVarExecutor [EOL] [EOL] asyncio . set_event_loop ( None ) [comment] [EOL] [EOL] [EOL] @ pytest . fixture def event_loop ( request ) : [EOL] loop = asyncio . new_event_loop ( ) [EOL] loop . set_debug ( bool ( os . environ . get ( [string] ) ) ) [EOL] [EOL] yield loop [EOL] [EOL] loop . run_until_complete ( loop . shutdown_asyncgens ( ) ) [EOL] [EOL] loop . call_soon ( loop . stop ) [EOL] loop . run_forever ( ) [EOL] loop . close ( ) [EOL] [EOL] gc . collect ( ) [EOL] gc . collect ( ) [comment] [EOL] [EOL] [EOL] @ pytest . fixture def loop ( event_loop , request ) : [EOL] asyncio . set_event_loop ( None ) [EOL] event_loop . set_default_executor ( None ) [EOL] request . addfinalizer ( lambda : asyncio . set_event_loop ( None ) ) [comment] [EOL] request . addfinalizer ( lambda : event_loop . set_default_executor ( None ) ) [comment] [EOL] [EOL] return event_loop [EOL] [EOL] [EOL] @ pytest . fixture def executor ( request ) : [EOL] e = ContextVarExecutor ( ) [EOL] [EOL] yield e [EOL] [EOL] e . shutdown ( wait = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0