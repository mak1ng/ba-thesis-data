[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import DefaultDict , Dict , Any , List [EOL] import requests [EOL] import typing [EOL] import os [EOL] import sys [EOL] import subprocess [EOL] import json [EOL] import requests [EOL] from collections import defaultdict [EOL] from retrying import retry [EOL] import click [EOL] import structlog [EOL] [EOL] from pprint import pprint [EOL] [EOL] logger = structlog . get_logger ( ) [EOL] [EOL] s = requests . Session ( ) [EOL] [EOL] [EOL] def extqry ( pageNumber ) : [EOL] [docstring] [EOL] return { [string] : [ ] , [string] : [ { [string] : [ { [string] : [number] , [string] : [string] } , { [string] : [number] , [string] : [string] , } , { [string] : [number] , [string] : [string] } , ] , [string] : [number] , [string] : [number] , [string] : pageNumber , [string] : [number] , [string] : [number] , [string] : None , } ] , [string] : [number] , } [EOL] [EOL] [EOL] params = { [string] : [string] } [EOL] [EOL] [EOL] class ExtensionEndpointError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , data , * args , ** kwargs ) : [EOL] self . data = data [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] def retry_manager_fn ( exc ) : [EOL] if isinstance ( exc , ( ExtensionEndpointError , ) ) : [EOL] if [string] in exc . data : [EOL] logger . info ( [string] ) [EOL] if exc . data [ [string] ] == [string] : [EOL] logger . info ( [string] ) [EOL] return True [EOL] else : [EOL] pprint ( exc . data ) [EOL] logger . bind ( exc_data = exc . data ) . error ( [string] ) [EOL] return False [EOL] [EOL] [EOL] @ retry ( retry_on_exception = retry_manager_fn , wait_exponential_multiplier = [number] , wait_exponential_max = [number] , ) def post_extension_query ( page_number ) : [EOL] r = s . post ( [string] , params = params , json = extqry ( page_number ) , ) [EOL] if not r . ok : [EOL] raise ExtensionEndpointError ( r . json ( ) , [string] ) [EOL] return r . json ( ) [EOL] [EOL] [EOL] def get_vspackage_path ( publisher_name , extension_name , version ) : [EOL] return [string] . format ( publisherName = publisher_name , name = extension_name , version = version ) [EOL] [EOL] [EOL] @ click . group ( ) def cli ( ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] @ cli . command ( [string] ) @ click . option ( [string] , default = [string] , type = click . File ( [string] ) ) def print_download_links ( index_file ) : [EOL] [docstring] [EOL] [EOL] logger . info ( [string] ) [EOL] index = json . load ( index_file ) [EOL] [EOL] for publisher_name , extension_dict in index . items ( ) : [EOL] for extension_name , versions in extension_dict . items ( ) : [EOL] for version in versions : [EOL] download_path = get_vspackage_path ( publisher_name , extension_name , version ) [EOL] sys . stdout . write ( download_path + [string] ) [EOL] [EOL] [EOL] @ cli . command ( [string] ) @ click . option ( [string] , default = [string] , type = click . File ( [string] ) ) @ click . option ( [string] , default = [string] , type = click . STRING ) def mirror_extensions ( index_file , output_dir ) : [EOL] [docstring] [EOL] [EOL] logger . info ( [string] ) [EOL] index = json . load ( index_file ) [EOL] logger . info ( [string] ) [EOL] [EOL] os . makedirs ( output_dir , exist_ok = True ) [EOL] [EOL] for publisher_name , extension_dict in sorted ( index . items ( ) ) : [EOL] for extension_name , versions in sorted ( extension_dict . items ( ) ) : [EOL] for version in sorted ( versions , reverse = True ) : [EOL] download_path = get_vspackage_path ( publisher_name , extension_name , version ) [EOL] [EOL] log = logger . bind ( publisher_name = publisher_name , extension_name = extension_name , version = version , ) [EOL] log . info ( [string] ) [EOL] [EOL] try : [EOL] subprocess . check_call ( [ [string] , [string] , download_path ] , cwd = output_dir ) [EOL] except subprocess . CalledProcessError : [EOL] log . error ( [string] ) [EOL] [EOL] [EOL] @ cli . command ( [string] ) @ click . option ( [string] , default = [string] , type = click . File ( [string] ) ) def download_index ( index_file ) : [EOL] [docstring] [EOL] [comment] [EOL] extension_data = defaultdict ( lambda : defaultdict ( list ) ) [EOL] [EOL] [comment] [EOL] pageNumber = [number] [EOL] [EOL] while True : [EOL] log = logger . bind ( page_number = pageNumber ) [EOL] log . info ( [string] ) [EOL] result_data = post_extension_query ( pageNumber ) [EOL] [EOL] if [string] not in result_data : [EOL] log . info ( [string] ) [EOL] break [EOL] [EOL] extensions = result_data [ [string] ] [ [number] ] [ [string] ] [EOL] received_extensions = len ( extensions ) [EOL] [EOL] log . bind ( received_extensions = received_extensions ) . info ( [string] ) [EOL] [EOL] if received_extensions == [number] : [EOL] log . info ( [string] ) [EOL] break [EOL] [EOL] for i in extensions : [EOL] for version in i [ [string] ] : [EOL] extension_data [ i [ [string] ] [ [string] ] ] [ i [ [string] ] ] . append ( version [ [string] ] ) [EOL] [EOL] pageNumber += [number] [EOL] [EOL] logger . bind ( extension_count = len ( extension_data ) ) . info ( [string] ) [EOL] [EOL] json . dump ( extension_data , index_file , sort_keys = True ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0