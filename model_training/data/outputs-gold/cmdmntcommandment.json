from setuptools import setup , find_packages [EOL] setup ( name = [string] , version = [string] , description = [string] , packages = [ [string] ] , include_package_data = True , author = [string] , license = [string] , url = [string] , classifiers = [ [string] , [string] , [string] ] , keywords = [string] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , python_requires = [string] , tests_require = [ [string] , [string] , [string] , [string] [string] , [string] ] , extras_requires = { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [ [string] ] } , setup_requires = [ [string] ] , entry_points = { [string] : [ [string] , [string] , ] } , zip_safe = False ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from blinker import Namespace [EOL] signals = Namespace ( ) [EOL] [EOL] [comment] [EOL] device_enrolled = signals . signal ( [string] ) [EOL] [EOL] [comment] [EOL] device_unenrolled = signals . signal ( [string] ) [EOL] [EOL] [comment] [EOL] device_checkin = signals . signal ( [string] ) [EOL] [EOL] [comment] [EOL] device_token_expired = signals . signal ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from functools import wraps [EOL] [EOL] from flask import request , abort , current_app , g [EOL] from cryptography import x509 [EOL] from cryptography . exceptions import UnsupportedAlgorithm [EOL] from cryptography . hazmat . backends import default_backend [EOL] [EOL] import plistlib [EOL] [EOL] [EOL] def parse_plist_input_data ( f ) : [EOL] [docstring] [EOL] [EOL] @ wraps ( f ) def decorator ( * args , ** kwargs ) : [EOL] try : [EOL] if current_app . debug : [EOL] current_app . logger . debug ( request . data ) [EOL] g . plist_data = plistlib . loads ( request . data ) [EOL] except : [EOL] current_app . logger . info ( [string] ) [EOL] abort ( [number] , [string] ) [EOL] [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def pem_certificate_upload ( f ) : [EOL] [docstring] [EOL] [EOL] @ wraps ( f ) def decorator ( * args , ** kwargs ) : [EOL] try : [EOL] certificate_data = request . files [ [string] ] . read ( ) [EOL] g . certificate = x509 . load_pem_x509_certificate ( certificate_data , backend = default_backend ( ) ) [EOL] except UnsupportedAlgorithm as e : [EOL] current_app . logger . info ( [string] ) [EOL] abort ( [number] , [string] ) [EOL] [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return decorator [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Union [EOL] import flask [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] [docstring] [EOL] from typing import Union , Optional [EOL] from pathlib import PurePath [EOL] from flask import Flask , render_template [EOL] [EOL] from commandment . mdm . app import mdm_app [EOL] from . ac2 . ac2_app import ac2_app [EOL] from . api . app_jsonapi import api_app , api [EOL] from . api . app_json import flat_api [EOL] from . apns . app import api_push_app [EOL] from . auth . app import oauth_app [EOL] from . auth import oauth2 [EOL] from . api . configuration import configuration_app [EOL] from . enroll . app import enroll_app [EOL] from . models import db [EOL] from . omdm import omdm_app [EOL] from . dep . app import dep_app [EOL] from . vpp . app import vpp_app [EOL] from . profiles . api import profiles_api_app [EOL] from . inventory . api import api_app as inventory_api [EOL] from . mdm . api import api_app as mdm_api [EOL] from . apps . app_jsonapi import api_app as applications_api [EOL] [EOL] from . threads import startup_thread [EOL] from . dep import threads as dep_threads [EOL] from . apns import threads as push_threads [EOL] [EOL] [EOL] def create_app ( config_file = None ) : [EOL] [docstring] [EOL] app = Flask ( __name__ ) [EOL] app . config . from_object ( [string] ) [EOL] if config_file is not None : [EOL] app . config . from_pyfile ( config_file ) [EOL] else : [EOL] app . config . from_envvar ( [string] ) [EOL] [EOL] db . init_app ( app ) [EOL] oauth2 . init_app ( app ) [EOL] api . init_app ( app ) [EOL] api . oauth_manager ( oauth2 . require_oauth ) [EOL] [EOL] app . register_blueprint ( oauth_app , url_prefix = [string] ) [EOL] app . register_blueprint ( enroll_app , url_prefix = [string] ) [EOL] app . register_blueprint ( mdm_app ) [EOL] app . register_blueprint ( configuration_app , url_prefix = [string] ) [EOL] app . register_blueprint ( api_app , url_prefix = [string] ) [EOL] app . register_blueprint ( api_push_app , url_prefix = [string] ) [EOL] app . register_blueprint ( flat_api , url_prefix = [string] ) [EOL] app . register_blueprint ( profiles_api_app , url_prefix = [string] ) [EOL] app . register_blueprint ( applications_api , url_prefix = [string] ) [EOL] app . register_blueprint ( omdm_app , url_prefix = [string] ) [EOL] app . register_blueprint ( ac2_app ) [EOL] app . register_blueprint ( dep_app ) [EOL] app . register_blueprint ( vpp_app ) [EOL] [EOL] try : [EOL] from scepy . blueprint import scep_app [EOL] app . register_blueprint ( scep_app , url_prefix = [string] ) [EOL] app . logger . info ( [string] ) [EOL] except ImportError : [EOL] app . logger . warning ( [string] ) [EOL] [EOL] [comment] [EOL] startup_thread . start ( app ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL] [EOL] [comment] [EOL] @ app . errorhandler ( [number] ) def send_index ( path ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL] [EOL] return app [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import flask [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] from commandment import create_app [EOL] from commandment . pki . ssl import generate_self_signed_certificate [EOL] from cryptography . hazmat . primitives import serialization [EOL] [EOL] from commandment . apns . push import get_apns [EOL] [EOL] [EOL] def server ( ) : [EOL] [docstring] [EOL] [EOL] app = create_app ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] with app . app_context ( ) : [EOL] apns = get_apns ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] cert_path = os . path . join ( app . root_path , app . config . get ( [string] ) ) [EOL] key_path = os . path . join ( app . root_path , app . config . get ( [string] ) ) [EOL] app . logger . debug ( [string] , os . path . abspath ( key_path ) ) [EOL] app . logger . debug ( [string] , os . path . abspath ( cert_path ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if not os . path . exists ( cert_path ) and not os . path . exists ( key_path ) : [EOL] app . logger . info ( [string] ) [EOL] pk , cert = generate_self_signed_certificate ( app . config [ [string] ] ) [EOL] [EOL] pem_key = pk . private_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PrivateFormat . PKCS8 , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] [EOL] with open ( key_path , [string] ) as fd : [EOL] fd . write ( pem_key ) [EOL] [EOL] pem_cert = cert . public_bytes ( encoding = serialization . Encoding . PEM ) [EOL] [EOL] with open ( cert_path , [string] ) as fd : [EOL] fd . write ( pem_cert ) [EOL] [EOL] [EOL] [comment] [EOL] app . run ( host = [string] , port = app . config . get ( [string] ) , ssl_context = ( cert_path , key_path ) , threaded = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union [EOL] import typing [EOL] from flask import current_app [EOL] import plistlib [EOL] [EOL] [EOL] def plistify ( * args , ** kwargs ) : [EOL] [docstring] [EOL] if args and kwargs : [EOL] raise TypeError ( [string] ) [EOL] elif len ( args ) == [number] : [comment] [EOL] data = args [ [number] ] [EOL] else : [EOL] data = args or kwargs [EOL] [EOL] mimetype = kwargs . get ( [string] , current_app . config [ [string] ] ) [EOL] [EOL] return current_app . response_class ( ( plistlib . dumps ( data ) , [string] ) , mimetype = mimetype ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from commandment import create_app [EOL] [EOL] app = create_app ( None ) [EOL]	0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] try : [EOL] from sqlalchemy . ext . mutable import MutableList [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] from sqlalchemy . ext . mutable import Mutable [EOL] [EOL] class MutableList ( Mutable , list ) : [EOL] [docstring] [EOL] [EOL] def __setitem__ ( self , index , value ) : [EOL] [docstring] [EOL] list . __setitem__ ( self , index , value ) [EOL] self . changed ( ) [EOL] [EOL] def __setslice__ ( self , start , end , value ) : [EOL] [docstring] [EOL] list . __setslice__ ( self , start , end , value ) [EOL] self . changed ( ) [EOL] [EOL] def __delitem__ ( self , index ) : [EOL] [docstring] [EOL] list . __delitem__ ( self , index ) [EOL] self . changed ( ) [EOL] [EOL] def __delslice__ ( self , start , end ) : [EOL] [docstring] [EOL] list . __delslice__ ( self , start , end ) [EOL] self . changed ( ) [EOL] [EOL] def pop ( self , * arg ) : [EOL] result = list . pop ( self , * arg ) [EOL] self . changed ( ) [EOL] return result [EOL] [EOL] def append ( self , x ) : [EOL] list . append ( self , x ) [EOL] self . changed ( ) [EOL] [EOL] def extend ( self , x ) : [EOL] list . extend ( self , x ) [EOL] self . changed ( ) [EOL] [EOL] def insert ( self , i , x ) : [EOL] list . insert ( self , i , x ) [EOL] self . changed ( ) [EOL] [EOL] def remove ( self , i ) : [EOL] list . remove ( self , i ) [EOL] self . changed ( ) [EOL] [EOL] def clear ( self ) : [EOL] list . clear ( self ) [EOL] self . changed ( ) [EOL] [EOL] def sort ( self ) : [EOL] list . sort ( self ) [EOL] self . changed ( ) [EOL] [EOL] def reverse ( self ) : [EOL] list . reverse ( self ) [EOL] self . changed ( ) [EOL] [EOL] @ classmethod def coerce ( cls , index , value ) : [EOL] [docstring] [EOL] if not isinstance ( value , cls ) : [EOL] if isinstance ( value , list ) : [EOL] return cls ( value ) [EOL] return Mutable . coerce ( index , value ) [EOL] else : [EOL] return value [EOL] [EOL] def __getstate__ ( self ) : [EOL] return list ( self ) [EOL] [EOL] def __setstate__ ( self , state ) : [EOL] self [ : ] = state [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
[comment] [EOL] from typing import List , Dict [EOL] import typing [EOL] PORT = [number] [EOL] [EOL] [comment] [EOL] ALEMBIC = { [string] : [string] } [EOL] [EOL] ALEMBIC_CONTEXT = { [string] : True , } [EOL] [EOL] [comment] [EOL] OAUTH2_CLIENT_UI = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [comment] [EOL] SQLALCHEMY_DATABASE_URI = [string] [EOL] [comment] [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MDMCERT_API_KEY = [string] [EOL] [EOL] PLISTIFY_MIMETYPE = [string] [EOL] [EOL] [EOL] [comment] [EOL] INTERNAL_CA_CN = [string] [EOL] INTERNAL_CA_O = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SCEPY_CA_ROOT = [string] [EOL] [EOL] [comment] [EOL] SCEPY_CA_X509_CN = [string] [EOL] SCEPY_CA_X509_O = [string] [EOL] SCEPY_CA_X509_C = [string] [EOL] [EOL] [comment] [EOL] SCEPY_FORCE_DEGENERATE_FOR_SINGLE_CERT = False [EOL] [EOL] [EOL] [comment] [EOL] IGNORED_APPLICATION_BUNDLE_IDS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import subprocess [EOL] import typing [EOL] import hashlib [EOL] [docstring] [EOL] [EOL] import subprocess [EOL] from tempfile import mkdtemp [EOL] import os [EOL] from xml . dom . minidom import parse , parseString [EOL] from hashlib import md5 [EOL] import plistlib [EOL] [EOL] [comment] [EOL] XAR_PATH = [string] [EOL] [EOL] MD5_CHUNK_SIZE = [number] * [number] * [number] [comment] [EOL] [EOL] [EOL] def pkg_signed ( filename ) : [EOL] xar_args = [ XAR_PATH , [string] , [string] , [string] , filename ] [EOL] [EOL] p = subprocess . Popen ( xar_args , stdout = subprocess . PIPE ) [EOL] toc , _ = p . communicate ( ) [EOL] [EOL] if p . returncode != [number] : [EOL] return False [EOL] [EOL] toc_md = parseString ( toc ) [EOL] [EOL] [comment] [EOL] return len ( toc_md . getElementsByTagName ( [string] ) ) > [number] [EOL] [EOL] [EOL] def get_pkg_bundle_ids ( filename ) : [EOL] [docstring] [EOL] [EOL] tmp_dir = mkdtemp ( ) [EOL] [EOL] print ( [string] , tmp_dir ) [EOL] [EOL] xar_args = [ XAR_PATH , [string] , [string] , [string] , [string] , tmp_dir , [string] , filename , [string] , [string] ] [comment] [EOL] [EOL] rtn = subprocess . call ( xar_args ) [EOL] [EOL] tmp_dist_file = os . path . join ( tmp_dir , [string] ) [EOL] tmp_pinf_file = os . path . join ( tmp_dir , [string] ) [EOL] [EOL] pkgs = [ ] [EOL] bundles = [ ] [EOL] [EOL] [comment] [EOL] if os . path . exists ( tmp_dist_file ) : [EOL] [comment] [EOL] dist_md = parse ( tmp_dist_file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for i in dist_md . getElementsByTagName ( [string] ) : [EOL] if i . hasAttribute ( [string] ) : [EOL] pkgs . append ( ( i . getAttribute ( [string] ) , i . getAttribute ( [string] ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in dist_md . getElementsByTagName ( [string] ) : [EOL] bundles . append ( ( i . getAttribute ( [string] ) , i . getAttribute ( [string] ) ) ) [EOL] [EOL] print ( [string] ) [EOL] os . unlink ( tmp_dist_file ) [EOL] [EOL] [comment] [EOL] if os . path . exists ( tmp_pinf_file ) : [EOL] pinf_md = parse ( tmp_pinf_file ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for i in pinf_md . getElementsByTagName ( [string] ) : [EOL] pkgs . append ( ( i . getAttribute ( [string] ) , i . getAttribute ( [string] ) ) ) [EOL] [EOL] print ( [string] ) [EOL] os . unlink ( tmp_pinf_file ) [EOL] [EOL] print ( [string] ) [EOL] os . rmdir ( tmp_dir ) [EOL] [EOL] return ( pkgs , bundles ) [EOL] [EOL] [EOL] def get_chunked_md5 ( filename , chunksize = MD5_CHUNK_SIZE ) : [EOL] h = md5 ( ) [EOL] md5s = [ ] [EOL] total_hash = md5 ( ) [EOL] with open ( filename , [string] ) as f : [EOL] for chunk in iter ( lambda : f . read ( chunksize ) , [string] ) : [EOL] new_hash = md5 ( ) [EOL] new_hash . update ( chunk ) [EOL] total_hash . update ( chunk ) [EOL] md5s . append ( new_hash . hexdigest ( ) ) [EOL] [EOL] return ( total_hash . hexdigest ( ) , md5s ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from marshmallow import Schema , fields [EOL] [EOL] [EOL] class Asset ( Schema ) : [EOL] kind = fields . String ( default = [string] ) [EOL] md5_size = fields . Integer ( default = [number] ) [EOL] md5s = fields . List ( fields . String ( ) ) [EOL] url = fields . URL ( ) [EOL] needs_shine = fields . Boolean ( ) [EOL] [EOL] [EOL] class BundleItem ( Schema ) : [EOL] bundle_identifier = fields . String ( ) [EOL] bundle_version = fields . String ( ) [EOL] [EOL] [EOL] class Metadata ( Schema ) : [EOL] bundle_identifier = fields . String ( ) [EOL] bundle_version = fields . String ( ) [EOL] items = fields . Nested ( BundleItem , many = True ) [EOL] kind = fields . String ( ) [EOL] sizeInBytes = fields . String ( ) [EOL] subtitle = fields . String ( ) [EOL] title = fields . String ( ) [EOL] [EOL] [EOL] class ManifestItem ( Schema ) : [EOL] assets = fields . Nested ( Asset , many = True ) [EOL] metadata = fields . Nested ( Metadata ) [EOL] [EOL] [EOL] class Manifest ( Schema ) : [EOL] items = fields . Nested ( ManifestItem , many = True ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum [EOL] [EOL] [EOL] class ManifestAssetKind ( Enum ) : [EOL] SoftwarePackage = [string] [EOL] FullSizeImage = [string] [EOL] DisplayImage = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0
from typing import List , Optional , Any , Union [EOL] import typing [EOL] import io [EOL] import builtins [EOL] import hashlib [EOL] from typing import List , Union [EOL] import hashlib [EOL] import io [EOL] [EOL] [comment] [EOL] DEFAULT_MD5_CHUNK_SIZE = [number] [EOL] [EOL] [EOL] def chunked_hash ( stream , chunk_size = DEFAULT_MD5_CHUNK_SIZE ) : [EOL] [docstring] [EOL] chunk = stream . read ( chunk_size ) [EOL] hashes = [ ] [EOL] [EOL] while chunk is not None : [EOL] h = hashlib . md5 ( ) [EOL] h . update ( chunk ) [EOL] md5 = h . digest ( ) [EOL] hashes . append ( md5 ) [EOL] chunk = stream . read ( chunk_size ) [EOL] [EOL] return hashes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional , Tuple , Dict , List , Any , Union [EOL] import xml [EOL] import typing [EOL] import hashlib [EOL] import argparse [EOL] import builtins [EOL] import argparse [EOL] from typing import List , Tuple , Optional [EOL] from bixar . archive import XarFile [EOL] from xml . etree import ElementTree [EOL] import plistlib [EOL] import hashlib [EOL] import os . path [EOL] [EOL] Packages = List [ Tuple [ str , str ] ] [EOL] Bundles = List [ Tuple [ str , str ] ] [EOL] MD5_CHUNK_SIZE = [number] << [number] [EOL] [EOL] [EOL] def blow_chunks ( fileobj ) : [EOL] fileobj . seek ( [number] ) [EOL] chunks = [ ] [EOL] total_hash = hashlib . md5 ( ) [EOL] [EOL] for chunk in iter ( lambda : fileobj . read ( MD5_CHUNK_SIZE ) , [string] ) : [EOL] new_hash = hashlib . md5 ( ) [EOL] new_hash . update ( chunk ) [EOL] total_hash . update ( chunk ) [EOL] chunks . append ( new_hash . hexdigest ( ) ) [EOL] [EOL] return total_hash . hexdigest ( ) , chunks [EOL] [EOL] [EOL] def url_from_metadata ( path ) : [EOL] [docstring] [EOL] try : [EOL] from Foundation import NSFileManager , NSPropertyListSerialization [EOL] except : [EOL] return None [EOL] [EOL] fm = NSFileManager . defaultManager ( ) [EOL] attrs , err = fm . attributesOfItemAtPath_error_ ( path , None ) [EOL] if err : [EOL] return None [EOL] [EOL] if [string] not in attrs : [EOL] return None [EOL] [EOL] extd_attrs = attrs [ [string] ] [EOL] [EOL] if [string] not in extd_attrs : [EOL] return None [EOL] else : [EOL] plist_data = extd_attrs [ [string] ] [EOL] value = plistlib . loads ( plist_data ) [EOL] if len ( value ) > [number] : [EOL] return value . pop ( [number] ) [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , metavar = [string] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] archive = XarFile ( path = args . source ) [EOL] distribution = archive . extract_bytes ( [string] ) [EOL] package_info = archive . extract_bytes ( [string] ) [EOL] packages = [ ] [EOL] bundles = [ ] [EOL] file_size = os . path . getsize ( args . source ) [EOL] title = os . path . basename ( args . source ) [EOL] [EOL] if distribution : [EOL] el = ElementTree . fromstring ( distribution ) [EOL] title = el . findtext ( [string] ) [EOL] for pkgRef in el . iter ( [string] ) : [EOL] if [string] in pkgRef . attrib : [EOL] packages . append ( ( pkgRef . attrib [ [string] ] , pkgRef . attrib [ [string] ] ) ) [EOL] [EOL] bundles = [ ( b . attrib [ [string] ] , b . attrib [ [string] ] ) for b in el . iter ( [string] ) ] [EOL] [EOL] if package_info : [EOL] el = ElementTree . fromstring ( package_info ) [EOL] for pkgInfo in el . iter ( [string] ) : [EOL] packages . append ( ( pkgInfo . attrib [ [string] ] , pkgInfo . attrib [ [string] ] ) ) [EOL] [EOL] with open ( args . source , [string] ) as fd : [EOL] total_hash , chunks = blow_chunks ( fd ) [EOL] [EOL] url = url_from_metadata ( args . source ) [EOL] [EOL] manifest = { [string] : [ { [string] : [ { [string] : [string] , [string] : MD5_CHUNK_SIZE , [string] : chunks , [string] : [string] . format ( url ) if url else [string] } ] , [string] : { [string] : [string] , [string] : title , [string] : file_size , [string] : [string] , [string] : [string] } } ] } [EOL] [EOL] pkgs_bundles = [ { [string] : i [ [number] ] , [string] : i [ [number] ] } for i in packages ] [EOL] manifest [ [string] ] [ [number] ] [ [string] ] . update ( pkgs_bundles [ [number] ] ) [EOL] [EOL] if len ( bundles ) > [number] : [EOL] manifest [ [string] ] [ [number] ] [ [string] ] [ [string] ] = [ { [string] : i [ [number] ] , [string] : i [ [number] ] } for i in bundles ] [EOL] [EOL] print ( plistlib . dumps ( manifest ) . decode ( [string] ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import commandment [EOL] from flask import g , current_app [EOL] [EOL] from commandment . vpp . errors import VPPError [EOL] from commandment . vpp . vpp import VPP [EOL] [EOL] [EOL] def get_vpp ( ) : [EOL] vpp = getattr ( g , [string] , None ) [EOL] [EOL] if vpp is None : [EOL] if [string] not in current_app . config : [EOL] raise VPPError ( [string] ) [EOL] [EOL] g . _vpp = VPP ( current_app . config [ [string] ] ) [EOL] [EOL] return vpp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.vpp.vpp.VPP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import IntEnum [EOL] [EOL] [EOL] class VPPErrorType ( IntEnum ) : [EOL] [docstring] [EOL] [EOL] MissingArgument = [number] [EOL] LoginRequired = [number] [EOL] InvalidArgument = [number] [EOL] InternalError = [number] [EOL] ResultNotFound = [number] [EOL] AccountStorefrontIncorrect = [number] [EOL] ErrorConstructingToken = [number] [EOL] LicenseIrrevocable = [number] [EOL] EmptyResponseFromSharedData = [number] [EOL] UserNotFound = [number] [EOL] LicenseNotFound = [number] [EOL] AdminNotFound = [number] [EOL] FailedCreatingClaimJob = [number] [EOL] FailedCreatingUnclaimJob = [number] [EOL] InvalidDateFormat = [number] [EOL] OrgCountryNotFound = [number] [EOL] LicenseAlreadyAssigned = [number] [EOL] UserAlreadyRetired = [number] [EOL] LicenseNotAssociated = [number] [EOL] UserAlreadyDeleted = [number] [EOL] TokenExpired = [number] [EOL] InvalidAuthenticationToken = [number] [EOL] InvalidAPNSToken = [number] [EOL] LicenseRefunded = [number] [EOL] STokenRevoked = [number] [EOL] LicenseAlreadyAssignedUser = [number] [EOL] DeviceAssignmentNotAllowed = [number] [EOL] TooManyAssignmentErrors = [number] [EOL] TooManyNoLicenseErrors = [number] [EOL] TooManyDuplicateAssignments = [number] [EOL] DataBatchUnrecoverable = [number] [EOL] Deprecated = [number] [EOL] AppleIDInvalid = [number] [EOL] RegisteredUserNotFound = [number] [EOL] STokenPermissionDenied = [number] [EOL] FacilitatorHasNoManagedID = [number] [EOL] FacilitatorMemberIDNotFound = [number] [EOL] FacilitatorDetailsNotAvailable = [number] [EOL] [EOL] [EOL] class VPPError ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class VPPAPIError ( VPPError ) : [EOL] [docstring] [EOL] def __init__ ( self , errno , message ) : [EOL] self . errno = errno [EOL] self . message = message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import commandment [EOL] from flask import Blueprint , jsonify , g , current_app , request , abort [EOL] from flask_rest_jsonapi import Api [EOL] from commandment . vpp . models import db , VPPAccount [EOL] from commandment . vpp . schema import VPPAccountSchema [EOL] [EOL] vpp_app = Blueprint ( [string] , __name__ ) [EOL] api = Api ( blueprint = vpp_app ) [EOL] [EOL] [EOL] @ vpp_app . route ( [string] , methods = [ [string] ] ) def token ( ) : [EOL] [docstring] [EOL] account = db . session . query ( VPPAccount ) . first ( ) [EOL] schema = VPPAccountSchema ( ) [EOL] result = schema . dumps ( account ) [EOL] if result . errors : [EOL] abort ( [number] ) [EOL] else : [EOL] return result . data , [number] , { [string] : [string] } [EOL] [EOL] [EOL] @ vpp_app . route ( [string] , methods = [ [string] ] ) def upload_token ( ) : [EOL] [docstring] [EOL] if [string] not in request . files : [EOL] abort ( [number] , [string] ) [EOL] [EOL] f = request . files [ [string] ] [EOL] [EOL] if not f . content_type == [string] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] data = f . read ( ) [EOL] account = VPPAccount ( stoken = data ) [EOL] db . session . add ( account ) [EOL] db . session . commit ( ) [EOL] [EOL] return [string] , [number] , { [string] : [string] } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import commandment [EOL] from typing import Tuple [EOL] from enum import Enum , IntEnum [EOL] [EOL] [EOL] class VPPPricingParam ( Enum ) : [EOL] [docstring] [EOL] [EOL] StandardQuality = [string] [EOL] [docstring] [EOL] HighQuality = [string] [EOL] [docstring] [EOL] [EOL] [EOL] class VPPUserStatus ( Enum ) : [EOL] [docstring] [EOL] [EOL] Registered = [string] [EOL] [docstring] [EOL] Associated = [string] [EOL] [docstring] [EOL] Retired = [string] [EOL] [docstring] [EOL] Deleted = [string] [EOL] [docstring] [EOL] [EOL] [EOL] AdamID = str [EOL] PricingParam = str [EOL] VPPAsset = Tuple [ AdamID , PricingParam ] [EOL] [docstring] [EOL] [EOL] class LicenseAssociationType ( Enum ) : [EOL] [docstring] [EOL] [EOL] ClientUserID = [string] [EOL] [docstring] [EOL] SerialNumber = [string] [EOL] [docstring] [EOL] [EOL] LicenseAssociation = Tuple [ LicenseAssociationType , AdamID ] [EOL] [docstring] [EOL] [EOL] class LicenseDisassociationType ( Enum ) : [EOL] [docstring] [EOL] [EOL] ClientUserID = [string] [EOL] [docstring] [EOL] SerialNumber = [string] [EOL] [docstring] [EOL] LicenseID = [string] [EOL] [docstring] [EOL] [EOL] LicenseDisassociation = Tuple [ LicenseDisassociationType , AdamID ] [EOL] [docstring] [EOL] [EOL] [EOL] class VPPProductType ( IntEnum ) : [EOL] [docstring] [EOL] Software = [number] [EOL] [docstring] [EOL] Application = [number] [EOL] [docstring] [EOL] Publication = [number] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Optional , Iterator , Tuple , Dict , List , Any , Union [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import commandment [EOL] [docstring] [EOL] [EOL] import requests [EOL] from typing import List , Optional , Iterator , Tuple , Dict , Text , Any [EOL] import json [EOL] import base64 [EOL] [EOL] from commandment . vpp . decorators import raise_error_replies [EOL] from commandment . vpp . enum import LicenseAssociation , LicenseDisassociation , LicenseAssociationType , LicenseDisassociationType , VPPPricingParam [EOL] [EOL] SERVICE_CONFIG_URL = [string] [EOL] [docstring] [EOL] [EOL] [EOL] def encode_stoken ( token ) : [EOL] [docstring] [EOL] return base64 . urlsafe_b64encode ( json . dumps ( token , separators = ( [string] , [string] ) ) . encode ( [string] ) ) [EOL] [EOL] [EOL] class VPPCursor ( object ) : [EOL] [docstring] [EOL] [EOL] @ property def batch_count ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] @ property def total ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] @ property def batch_token ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] @ property def since_modified_token ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] def __init__ ( self , since_modified_token = None , vpp = None ) : [EOL] self . _current = { } [EOL] if since_modified_token is not None : [EOL] self . _current [ [string] ] = since_modified_token [EOL] [EOL] self . _vpp = vpp [EOL] [EOL] [EOL] class VPPUserCursor ( VPPCursor ) : [EOL] [docstring] [EOL] [EOL] @ property def users ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] def __init__ ( self , includes_retired = True , vpp = None ) : [EOL] super ( VPPUserCursor , self ) . __init__ ( vpp = vpp ) [EOL] self . includes_retired = includes_retired [EOL] [EOL] def next ( self ) : [EOL] [docstring] [EOL] if self . batch_token is not None : [EOL] next_cursor = self . _vpp . users ( batch_token = self . batch_token ) [EOL] next_cursor . includes_retired = self . includes_retired [EOL] [EOL] return next_cursor [EOL] else : [EOL] return None [EOL] [EOL] [EOL] class VPPLicenseCursor ( VPPCursor ) : [EOL] [docstring] [EOL] [EOL] @ property def licenses ( self ) : [EOL] [docstring] [EOL] return self . _current . get ( [string] , None ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( VPPLicenseCursor , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def next ( self ) : [EOL] [docstring] [EOL] if self . batch_token is not None : [EOL] next_cursor = self . _vpp . licenses ( batch_token = self . batch_token ) [EOL] self . _current = next_cursor . _current [EOL] return self [EOL] else : [EOL] return None [EOL] [EOL] [EOL] class VPPLicenseOperation ( object ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] @ property def adam_id ( self ) : [EOL] return self . _adam_id [EOL] [EOL] @ property def pricing_param ( self ) : [EOL] return self . _pricing_param [EOL] [EOL] @ property def associations ( self ) : [EOL] return self . _association_type , self . _associate [EOL] [EOL] @ property def disassociations ( self ) : [EOL] return self . _disassociation_type , self . _disassociate [EOL] [EOL] def __init__ ( self , adam_id , pricing_param = [string] , license_association_type = None , license_disassociation_type = None ) : [EOL] self . _adam_id = adam_id [EOL] self . _pricing_param = pricing_param [EOL] self . _associate = [ ] [EOL] self . _disassociate = [ ] [EOL] self . _association_type = license_association_type [EOL] self . _disassociation_type = license_disassociation_type [EOL] [EOL] def add ( self , association_type , value ) : [EOL] if self . _association_type is None : [EOL] self . _association_type = association_type [EOL] elif association_type != self . _association_type : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _associate . append ( ( association_type , value ) ) [EOL] [EOL] def additions_for_type ( self , association_type ) : [EOL] return filter ( lambda x : x [ [number] ] == association_type , self . _associate ) [EOL] [EOL] def remove ( self , disassociation_type , value ) : [EOL] if self . _disassociation_type is None : [EOL] self . _disassociation_type = disassociation_type [EOL] elif disassociation_type != self . _disassociation_type : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _disassociate . append ( ( disassociation_type , value ) ) [EOL] [EOL] def removals_for_type ( self , disassociation_type ) : [EOL] return filter ( lambda x : x [ [number] ] == disassociation_type , self . _disassociate ) [EOL] [EOL] [EOL] class VPPUserLicenseOperation ( VPPLicenseOperation ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( VPPUserLicenseOperation , self ) . __init__ ( * args , ** kwargs ) [EOL] self . _association_type = LicenseAssociationType . ClientUserID [EOL] self . _disassociation_type = LicenseDisassociationType . ClientUserID [EOL] [EOL] [EOL] class VPPDeviceLicenseOperation ( VPPLicenseOperation ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( VPPDeviceLicenseOperation , self ) . __init__ ( * args , ** kwargs ) [EOL] self . _association_type = LicenseAssociationType . SerialNumber [EOL] self . _disassociation_type = LicenseDisassociationType . SerialNumber [EOL] [EOL] [EOL] class VPP ( object ) : [EOL] [docstring] [EOL] [EOL] AssociationProperties = { LicenseAssociationType . ClientUserID : [string] , LicenseAssociationType . SerialNumber : [string] } [EOL] [EOL] DisassociationProperties = { LicenseDisassociationType . SerialNumber : [string] , LicenseDisassociationType . ClientUserID : [string] , LicenseDisassociationType . LicenseID : [string] , } [EOL] [EOL] def __init__ ( self , stoken , vpp_service_config_url = SERVICE_CONFIG_URL , service_config = None ) : [EOL] [docstring] [EOL] self . _session = requests . Session ( ) [EOL] self . _session . headers . update ( { [string] : [string] } ) [EOL] self . _stoken = stoken [EOL] [EOL] if not service_config : [EOL] fetched_service_config = self . _fetch_config ( vpp_service_config_url ) [EOL] self . _service_config = fetched_service_config [EOL] else : [EOL] self . _service_config = service_config [EOL] [EOL] def _fetch_config ( self , service_config_url ) : [EOL] [docstring] [EOL] res = self . _session . get ( service_config_url ) [EOL] return res . json ( ) [EOL] [EOL] @ raise_error_replies def register_user ( self , client_user_id , email = None , facilitator_member_id = None , managed_apple_id = None ) : [EOL] [docstring] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( { [string] : client_user_id , [string] : email , [string] : self . _stoken , } ) ) [EOL] return res . json ( ) [EOL] [EOL] @ raise_error_replies def get_user ( self , client_user_id = None , its_id_hash = None , facilitator_member_id = None , user_id = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken } [EOL] if user_id is not None : [EOL] request_body [ [string] ] = user_id [EOL] else : [EOL] request_body [ [string] ] = client_user_id [EOL] if its_id_hash is not None : [EOL] request_body [ [string] ] = its_id_hash [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] return res . json ( ) [EOL] [EOL] def users ( self , include_retired = [number] , facilitator_member_id = None , batch_token = None , since_modified_token = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken } [EOL] if include_retired == [number] : [EOL] request_body [ [string] ] = [number] [EOL] [EOL] if batch_token is not None : [EOL] request_body [ [string] ] = batch_token [EOL] elif since_modified_token is not None : [EOL] request_body [ [string] ] = since_modified_token [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] results = res . json ( ) [EOL] cursor = VPPUserCursor ( includes_retired = ( include_retired == [number] ) ) [EOL] cursor . _current = results [EOL] cursor . _vpp = self [EOL] [EOL] return cursor [EOL] [EOL] @ raise_error_replies def retire_user ( self , client_user_id = None , facilitator_member_id = None , user_id = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken } [EOL] if user_id is not None : [EOL] request_body [ [string] ] = user_id [EOL] else : [EOL] request_body [ [string] ] = client_user_id [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] return res . json ( ) [EOL] [EOL] @ raise_error_replies def edit_user ( self , client_user_id = None , facilitator_member_id = None , email = None , managed_apple_id = None , user_id = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken } [EOL] if user_id is not None : [EOL] request_body [ [string] ] = user_id [EOL] else : [EOL] request_body [ [string] ] = client_user_id [EOL] [EOL] if email is not None : [EOL] request_body [ [string] ] = email [EOL] [EOL] if managed_apple_id is not None : [EOL] request_body [ [string] ] = managed_apple_id [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] return res . json ( ) [EOL] [EOL] @ raise_error_replies def assets ( self , include_license_counts = True , facilitator_member_id = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken , [string] : include_license_counts , } [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] return res . json ( ) [EOL] [EOL] def manage ( self , adam_id , pricing_param = [string] ) : [EOL] [docstring] [EOL] op = VPPLicenseOperation ( adam_id , pricing_param ) [EOL] op . _vpp = self [EOL] return op [EOL] [EOL] def manage_user_licenses ( self , adam_id , pricing_param = [string] ) : [EOL] [docstring] [EOL] op = VPPUserLicenseOperation ( adam_id , pricing_param ) [EOL] op . _vpp = self [EOL] return op [EOL] [EOL] def manage_device_licenses ( self , adam_id , pricing_param = [string] ) : [EOL] [docstring] [EOL] op = VPPDeviceLicenseOperation ( adam_id , pricing_param ) [EOL] op . _vpp = self [EOL] return op [EOL] [EOL] def licenses ( self , adam_id = None , pricing_param = None , assigned_only = False , facilitator_member_id = None , batch_token = None , since_modified_token = None ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken } [EOL] if assigned_only : [EOL] request_body [ [string] ] = True [EOL] if batch_token : [EOL] request_body [ [string] ] = batch_token [EOL] if since_modified_token : [EOL] request_body [ [string] ] = since_modified_token [EOL] [EOL] [comment] [EOL] if batch_token is None and since_modified_token is None : [EOL] if adam_id is not None : [EOL] request_body [ [string] ] = adam_id [EOL] if pricing_param is not None : [EOL] request_body [ [string] ] = pricing_param . value [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] reply = res . json ( ) [EOL] cursor = VPPLicenseCursor ( vpp = self ) [EOL] cursor . _current = reply [EOL] [EOL] return cursor [EOL] [EOL] def save ( self , operation , notify = False ) : [EOL] [docstring] [EOL] atype , associations = operation . associations [EOL] dtype , disassociations = operation . disassociations [EOL] [EOL] request_body = { [string] : self . _stoken , [string] : operation . adam_id , [string] : operation . pricing_param , [string] : notify , VPP . AssociationProperties [ atype ] : associations , VPP . DisassociationProperties [ dtype ] : disassociations , } [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] reply = res . json ( ) [EOL] [EOL] return reply [EOL] [EOL] def bulk_update_licenses ( self , adam_id , association_type = None , associate = None , disassociation_type = None , disassociate = None , pricing_param = [string] , notify = False ) : [EOL] [docstring] [EOL] request_body = { [string] : self . _stoken , [string] : adam_id , [string] : pricing_param , [string] : notify , } [EOL] [EOL] if association_type in VPP . AssociationProperties : [EOL] request_body [ VPP . AssociationProperties [ association_type ] ] = associate [EOL] [EOL] if disassociation_type in VPP . DisassociationProperties : [EOL] request_body [ VPP . DisassociationProperties [ disassociation_type ] ] = disassociate [EOL] [EOL] res = self . _session . post ( self . _service_config [ [string] ] , data = json . dumps ( request_body ) ) [EOL] reply = res . json ( ) [EOL] [EOL] return reply [EOL]	builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from marshmallow import Schema , fields [EOL] [EOL] [EOL] class VPPAccountSchema ( Schema ) : [EOL] exp_date = fields . DateTime ( ) [EOL] org_name = fields . String ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functools [EOL] [EOL] from commandment . vpp . errors import VPPAPIError [EOL] [EOL] [EOL] def raise_error_replies ( f ) : [EOL] [docstring] [EOL] @ functools . wraps ( f ) def wrapper ( * args , ** kwargs ) : [EOL] reply = f ( * args , ** kwargs ) [EOL] if reply [ [string] ] == - [number] : [comment] [EOL] raise VPPAPIError ( reply [ [string] ] , reply [ [string] ] ) [EOL] return reply [EOL] [EOL] return wrapper [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import cryptography [EOL] [docstring] [EOL] [EOL] from typing import Dict [EOL] from flask import Response [EOL] import json [EOL] from base64 import b64encode [EOL] import requests [EOL] from binascii import unhexlify [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives import serialization , padding [EOL] from cryptography . hazmat . primitives . asymmetric . rsa import RSAPrivateKeyWithSerialization [EOL] from commandment . dep . smime import decrypt , decrypt_smime_content [EOL] [EOL] MDMCERT_REQ_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MDMCERT_API_KEY = [string] [EOL] [EOL] CERT_REQ_TYPE = [string] [EOL] [EOL] [EOL] def submit_mdmcert_request ( email , csr_pem , encrypt_with_pem , api_key = MDMCERT_API_KEY ) : [EOL] [docstring] [EOL] base64_csr = b64encode ( csr_pem ) [EOL] base64_recipient = b64encode ( encrypt_with_pem ) [EOL] [EOL] mdmcert_dict = { [string] : base64_csr . decode ( [string] ) , [string] : email , [string] : api_key , [string] : base64_recipient . decode ( [string] ) , } [EOL] [EOL] session = requests . Session ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] session . trust_env = False [comment] [EOL] [EOL] res = session . post ( MDMCERT_REQ_URL , data = json . dumps ( mdmcert_dict ) . encode ( [string] ) , headers = { [string] : [string] , [string] : [string] , } ) [EOL] [EOL] return res . json ( ) [EOL] [EOL] [EOL] class FixedLocationResponse ( Response ) : [EOL] [comment] [EOL] [comment] [EOL] autocorrect_location_header = False [EOL] [EOL] [EOL] def decrypt_mdmcert ( response , decrypt_with ) : [EOL] [docstring] [EOL] decoded_payload = unhexlify ( response ) [EOL] [EOL] [comment] [EOL] result = decrypt_smime_content ( decoded_payload , decrypt_with ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from marshmallow import Schema , fields [EOL] [EOL] [EOL] class PushResponseFlatSchema ( Schema ) : [EOL] [docstring] [EOL] apns_id = fields . Integer ( ) [EOL] status_code = fields . Integer ( ) [EOL] reason = fields . Str ( ) [EOL] timestamp = fields . DateTime ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] from datetime import datetime [EOL] from flask import Blueprint , request , abort , current_app , jsonify [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from commandment . errors import JSONAPIError [EOL] from commandment . models import db , Device [EOL] from commandment . pki . models import RSAPrivateKey , CertificateSigningRequest , CACertificate , EncryptionCertificate [EOL] from commandment . pki import ssl as cmdssl [EOL] from . push import push_to_device [EOL] from . schema import PushResponseFlatSchema [EOL] from . mdmcert import submit_mdmcert_request , decrypt_mdmcert [EOL] import ssl [EOL] [EOL] api_push_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] MDMCERT_REQ_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MDMCERT_API_KEY = [string] [EOL] [EOL] [EOL] @ api_push_app . route ( [string] , methods = [ [string] , [string] ] ) def push ( device_id ) : [EOL] [docstring] [EOL] device = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] if device . token is None or device . push_magic is None : [EOL] abort ( jsonify ( error = True , message = [string] ) ) [EOL] [EOL] try : [EOL] response = push_to_device ( device ) [EOL] except ssl . SSLError : [EOL] return abort ( [number] , jsonify ( error = True , message = [string] ) ) [EOL] [EOL] current_app . logger . info ( [string] , response . status_code , response . reason , response . apns_id . decode ( [string] ) ) [EOL] device . last_push_at = datetime . utcnow ( ) [EOL] if response . status_code == [number] : [EOL] device . last_apns_id = response . apns_id [EOL] [EOL] db . session . commit ( ) [EOL] push_res_schema = PushResponseFlatSchema ( ) [EOL] result = push_res_schema . dumps ( response ) [EOL] [EOL] return result [EOL] [EOL] [EOL] @ api_push_app . route ( [string] , methods = [ [string] ] ) def mdmcert_request ( email ) : [EOL] [docstring] [EOL] try : [EOL] apns_csr_model = db . session . query ( CertificateSigningRequest ) . filter ( CertificateSigningRequest . x509_cn == [string] ) . one ( ) [EOL] except NoResultFound : [EOL] private_key , csr = cmdssl . generate_signing_request ( [string] ) [EOL] private_key_model = RSAPrivateKey . from_crypto ( private_key ) [EOL] db . session . add ( private_key_model ) [EOL] apns_csr_model = CertificateSigningRequest . from_crypto ( csr ) [EOL] apns_csr_model . rsa_private_key = private_key_model [EOL] db . session . add ( apns_csr_model ) [EOL] db . session . commit ( ) [EOL] [EOL] try : [EOL] encrypt_cert_model = db . session . query ( EncryptionCertificate ) . filter ( EncryptionCertificate . x509_cn == email ) . one ( ) [EOL] except NoResultFound : [EOL] encrypt_key , encrypt_with_cert = cmdssl . generate_self_signed_certificate ( email ) [EOL] encrypt_key_model = RSAPrivateKey . from_crypto ( encrypt_key ) [EOL] db . session . add ( encrypt_key_model ) [EOL] encrypt_cert_model = EncryptionCertificate . from_crypto ( encrypt_with_cert ) [EOL] encrypt_cert_model . rsa_private_key = encrypt_key_model [EOL] db . session . add ( encrypt_cert_model ) [EOL] db . session . commit ( ) [EOL] [EOL] current_app . logger . info ( [string] , email ) [EOL] mdmcert_result = submit_mdmcert_request ( email = email , csr_pem = apns_csr_model . pem_data , encrypt_with_pem = encrypt_cert_model . pem_data , ) [EOL] [EOL] return jsonify ( mdmcert_result ) [EOL] [EOL] [EOL] @ api_push_app . route ( [string] , methods = [ [string] ] ) def mdmcert_decrypt ( ) : [EOL] [docstring] [EOL] if [string] not in request . files : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] encrypted_payload = request . files [ [string] ] . stream . read ( ) [EOL] [EOL] try : [EOL] [comment] [EOL] encrypt_cert = db . session . query ( EncryptionCertificate ) . first ( ) [EOL] except NoResultFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] pk = encrypt_cert . rsa_private_key . to_crypto ( ) [EOL] [EOL] try : [EOL] result = decrypt_mdmcert ( encrypted_payload , pk ) [EOL] except ValueError as e : [EOL] raise JSONAPIError ( title = [string] , status = [number] , detail = [string] , ) [EOL] [EOL] return result , [number] , { [string] : [string] , [string] : [string] % datetime . now ( ) . strftime ( [string] ) , } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] import cryptography [EOL] import apns2 [EOL] import commandment [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import apns2 [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives import serialization [EOL] from cryptography . hazmat . backends import default_backend [EOL] from oscrypto . keys import parse_pkcs12 [EOL] from flask import g , current_app [EOL] from commandment . models import Device [EOL] import json [EOL] [EOL] [EOL] def get_apns ( ) : [EOL] apns = getattr ( g , [string] , None ) [EOL] [EOL] if apns is None : [EOL] push_certificate_path = current_app . config [ [string] ] [EOL] if not os . path . exists ( push_certificate_path ) : [EOL] raise RuntimeError ( [string] . format ( push_certificate_path ) ) [EOL] [EOL] client_cert = push_certificate_path [comment] [EOL] [EOL] [comment] [EOL] push_certificate_basename , ext = os . path . splitext ( push_certificate_path ) [EOL] if ext . lower ( ) == [string] : [EOL] pem_key_path = push_certificate_basename + [string] [EOL] pem_certificate_path = push_certificate_basename + [string] [EOL] [EOL] if not os . path . exists ( pem_key_path ) or not os . path . exists ( pem_certificate_path ) : [EOL] current_app . logger . info ( [string] ) [EOL] current_app . logger . info ( [string] ) [EOL] [EOL] with open ( push_certificate_path , [string] ) as fd : [EOL] if [string] in current_app . config : [EOL] key , certificate , intermediates = parse_pkcs12 ( fd . read ( ) , bytes ( current_app . config [ [string] ] , [string] ) ) [EOL] else : [EOL] key , certificate , intermediates = parse_pkcs12 ( fd . read ( ) ) [EOL] [EOL] crypto_key = serialization . load_der_private_key ( key . dump ( ) , None , default_backend ( ) ) [EOL] with open ( pem_key_path , [string] ) as fd : [EOL] fd . write ( crypto_key . private_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PrivateFormat . PKCS8 , encryption_algorithm = serialization . NoEncryption ( ) ) ) [EOL] [EOL] crypto_cert = x509 . load_der_x509_certificate ( certificate . dump ( ) , default_backend ( ) ) [EOL] with open ( pem_certificate_path , [string] ) as fd : [EOL] fd . write ( crypto_cert . public_bytes ( serialization . Encoding . PEM ) ) [EOL] [EOL] client_cert = pem_certificate_path , pem_key_path [EOL] [EOL] try : [EOL] apns = g . _apns = apns2 . APNSClient ( mode = [string] , client_cert = client_cert ) [EOL] except : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] return apns [EOL] [EOL] [EOL] class MDMPayload ( apns2 . Payload ) : [EOL] [docstring] [EOL] def __init__ ( self , push_magic ) : [EOL] [docstring] [EOL] super ( MDMPayload , self ) . __init__ ( custom = { [string] : push_magic } ) [EOL] self . _push_magic = push_magic [EOL] [EOL] def to_json ( self ) : [EOL] return json . dumps ( { [string] : self . _push_magic } ) [EOL] [EOL] [EOL] def push_to_device ( device ) : [EOL] [docstring] [EOL] current_app . logger . debug ( [string] . format ( device . hex_token , device . topic , device . push_magic ) ) [EOL] client = get_apns ( ) [EOL] payload = MDMPayload ( device . push_magic ) [EOL] notification = apns2 . Notification ( payload , priority = apns2 . PRIORITY_LOW ) [EOL] response = client . push ( notification , device . hex_token , device . topic ) [EOL] [EOL] [comment] [EOL] if response . status_code == [number] : [EOL] device . token = None [EOL] device . push_magic = None [EOL] [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $apns2.APNSClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $apns2.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple [EOL] import typing [EOL] import flask [EOL] import threading [EOL] import commandment [EOL] import logging [EOL] import builtins [EOL] from typing import Tuple [EOL] import logging [EOL] import threading [EOL] from datetime import datetime [EOL] import dateutil . parser [EOL] from flask import Flask [EOL] import ssl [EOL] [EOL] from commandment . mdm import CommandStatus [EOL] from commandment . models import db , Device , Command [EOL] from commandment . apns . push import push_to_device [EOL] import sqlalchemy . orm . exc [EOL] from sqlalchemy import func [EOL] [EOL] push_thread = None [EOL] push_start = [number] [EOL] push_time = [number] [EOL] push_thread_stopped = threading . Event ( ) [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def start ( app ) : [EOL] [docstring] [EOL] [EOL] logger . info ( [string] , push_start , push_time ) [EOL] push_thread = threading . Timer ( push_start , push_thread_callback , [ app ] ) [EOL] push_thread . daemon = True [EOL] push_thread . start ( ) [EOL] [EOL] [EOL] def stop ( ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] push_thread_stopped . set ( ) [EOL] [EOL] global push_thread [EOL] if push_thread is threading . Timer : [EOL] push_thread . cancel ( ) [EOL] [EOL] [EOL] def push_thread_callback ( app ) : [EOL] [docstring] [EOL] while not push_thread_stopped . wait ( push_time ) : [EOL] app . logger . info ( [string] ) [EOL] with app . app_context ( ) : [EOL] pending = db . session . query ( Device , func . Count ( Command . id ) ) . filter ( Device . id == Command . device_id ) . filter ( Command . status == CommandStatus . Queued ) . filter ( Command . ttl > [number] ) . filter ( Command . after == None ) . filter ( Device . is_enrolled == True ) . group_by ( Device . id ) . all ( ) [EOL] [EOL] for d , c in pending : [EOL] app . logger . info ( [string] , c , d . udid ) [EOL] [EOL] if d . token is None or d . push_magic is None : [EOL] app . logger . warn ( [string] ) [EOL] continue [EOL] [EOL] try : [EOL] response = push_to_device ( d ) [EOL] except ssl . SSLError : [EOL] return stop ( ) [EOL] [EOL] app . logger . info ( [string] , response . status_code , response . reason , response . apns_id . decode ( [string] ) ) [EOL] d . last_push_at = datetime . utcnow ( ) [EOL] if response . status_code == [number] : [EOL] d . last_apns_id = response . apns_id [EOL] [EOL] db . session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] [comment] [EOL] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] import commandment . dbtypes [EOL] [EOL] [EOL] from alembic import context [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] schema_upgrades ( ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] schema_downgrades ( ) [EOL] [EOL] [EOL] def schema_upgrades ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Enum ( [string] , [string] , [string] , name = [string] ) , nullable = True ) ) [EOL] [EOL] [EOL] def schema_downgrades ( ) : [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from requests import Response , HTTPError [EOL] [EOL] [EOL] class DEPServiceError ( HTTPError ) : [EOL] [docstring] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( DEPServiceError , self ) . __init__ ( * args , ** kwargs ) [EOL] if [string] in kwargs : [EOL] [comment] [EOL] self . text = kwargs . get ( [string] ) . content . decode ( [string] ) . strip ( [string] ) [EOL] else : [EOL] self . text = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . response . status_code , self . text ) [EOL] [EOL] [EOL] class DEPClientError ( Exception ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import commandment [EOL] import argparse [EOL] import asyncio [EOL] import logging [EOL] import builtins [EOL] import argparse [EOL] import logging [EOL] import asyncio [EOL] from commandment . dep . dep import DEP [EOL] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , default = [string] ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] async def initial_dep_fetch ( dep ) : [EOL] [docstring] [EOL] for page in dep . devices ( ) : [EOL] for device in page : [EOL] pass [EOL] [EOL] async def dep_sync ( consumer_key , consumer_secret , access_token , access_secret , url ) : [EOL] dep = DEP ( consumer_key , consumer_secret , access_token , access_secret , url ) [EOL] initial_fetch = await initial_dep_fetch ( dep ) [EOL] [EOL] [EOL] def main ( ) : [EOL] args = parser . parse_args ( ) [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] loop . run_until_complete ( dep_sync ( args . consumer_key , args . consumer_secret , args . access_token , args . access_secret , args . url , ) ) [EOL] [EOL] try : [EOL] loop . run_forever ( ) [EOL] finally : [EOL] loop . run_until_complete ( loop . shutdown_asyncgens ( ) ) [EOL] loop . close ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Iterator , Dict , List , Any , Union [EOL] import typing [EOL] import requests [EOL] import datetime [EOL] import commandment [EOL] import collections [EOL] import logging [EOL] import builtins [EOL] from collections . abc import Iterator [EOL] from typing import Union , List , Optional [EOL] import requests [EOL] from requests . auth import AuthBase [EOL] from requests_oauthlib import OAuth1 [EOL] import re [EOL] from datetime import timedelta , datetime [EOL] from dateutil import parser as dateparser [EOL] from locale import atof [EOL] import json [EOL] import logging [EOL] from flask import g , current_app [EOL] [EOL] from commandment . dep import DEPProfileRemovals [EOL] from . errors import DEPServiceError , DEPClientError [EOL] from email . utils import parsedate [comment] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class DEPAuth ( AuthBase ) : [EOL] [docstring] [EOL] def __init__ ( self , token ) : [EOL] self . token = token [EOL] [EOL] def __call__ ( self , r ) : [EOL] r . headers [ [string] ] = self . token [EOL] return r [EOL] [EOL] [EOL] class DEP : [EOL] [EOL] UserAgent = [string] [EOL] [EOL] def __init__ ( self , consumer_key = None , consumer_secret = None , access_token = None , access_secret = None , access_token_expiry = None , url = [string] ) : [EOL] [EOL] self . _session_token = None [EOL] self . _oauth = OAuth1 ( consumer_key , client_secret = consumer_secret , resource_owner_key = access_token , resource_owner_secret = access_secret , ) [EOL] [EOL] if access_token_expiry is not None : [EOL] access_token_expiry_date = dateparser . parse ( access_token_expiry ) [EOL] self . _access_token_expiry = access_token_expiry_date [EOL] else : [EOL] self . _access_token_expiry = None [EOL] [EOL] self . _url = url [EOL] self . _session = requests . session ( ) [EOL] self . _session . headers . update ( { [string] : [string] , [string] : [string] , [string] : DEP . UserAgent , } ) [EOL] self . _retry_after = None [EOL] [EOL] @ property def session_token ( self ) : [EOL] return self . _session_token [EOL] [EOL] @ classmethod def from_token ( cls , token ) : [comment] [EOL] [docstring] [EOL] stoken = json . loads ( token ) [EOL] return cls ( ** stoken ) [EOL] [EOL] def _response_hook ( self , r , * args , ** kwargs ) : [EOL] [docstring] [EOL] if r . status_code == [number] : [comment] [EOL] pass [comment] [EOL] [EOL] [comment] [EOL] if [string] in r . headers : [EOL] self . _session_token = r . headers [ [string] ] [EOL] [EOL] [comment] [EOL] if [string] in r . headers : [EOL] after = r . headers [ [string] ] [EOL] if re . compile ( [string] ) . match ( after ) : [EOL] d = timedelta ( seconds = atof ( after ) ) [EOL] self . _retry_after = datetime . utcnow ( ) + d [EOL] else : [comment] [EOL] self . _retry_after = datetime ( * parsedate ( after ) [ : [number] ] ) [EOL] [EOL] def send ( self , req , ** kwargs ) : [EOL] [docstring] [EOL] if self . _access_token_expiry is not None and datetime . now ( ) > self . _access_token_expiry : [EOL] raise DEPClientError ( [string] ) [EOL] [EOL] if self . _retry_after is not None : [comment] [EOL] return None [EOL] [EOL] if self . session_token is None : [EOL] self . fetch_token ( ) [EOL] [EOL] req . hooks = dict ( response = self . _response_hook ) [EOL] req . auth = DEPAuth ( self . _session_token ) [EOL] [EOL] prepared = self . _session . prepare_request ( req ) [EOL] [EOL] res = self . _session . send ( prepared , ** kwargs ) [EOL] [EOL] try : [EOL] res . raise_for_status ( ) [EOL] except requests . HTTPError as e : [EOL] raise DEPServiceError ( response = res , request = res . request ) from e [EOL] [EOL] return res [EOL] [EOL] def fetch_token ( self ) : [EOL] [docstring] [EOL] res = self . _session . get ( self . _url + [string] , auth = self . _oauth ) [EOL] try : [EOL] res . raise_for_status ( ) [EOL] except requests . HTTPError as e : [EOL] raise DEPServiceError ( response = res , request = res . request ) from e [EOL] [EOL] self . _session_token = res . json ( ) . get ( [string] , None ) [EOL] return self . _session_token [EOL] [EOL] def account ( self ) : [EOL] [docstring] [EOL] logger . debug ( [string] ) [EOL] res = self . send ( requests . Request ( [string] , self . _url + [string] ) ) [EOL] return res . json ( ) [EOL] [EOL] def fetch_devices ( self , cursor = None , limit = [number] ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = { [string] : limit , [string] : cursor } ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def sync_devices ( self , cursor , limit = [number] ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = { [string] : limit , [string] : cursor } ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def devices ( self , cursor = None ) : [EOL] [docstring] [EOL] if cursor is not None : [comment] [EOL] return DEPSyncCursor ( self , cursor = cursor ) [EOL] else : [EOL] return DEPFetchCursor ( self ) [EOL] [EOL] def device_detail ( self , * serial_numbers ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = { [string] : serial_numbers } ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def define_profile ( self , profile ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = profile ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def assign_profile ( self , profile_uuid , * serial_numbers ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = { [string] : profile_uuid , [string] : serial_numbers } ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def remove_profile ( self , * serial_numbers ) : [EOL] [docstring] [EOL] req = requests . Request ( [string] , self . _url + [string] , json = { [string] : serial_numbers } ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def profile ( self , uuid ) : [EOL] [docstring] [EOL] params = { [string] : uuid } if uuid is not None else None [EOL] req = requests . Request ( [string] , self . _url + [string] , params = params ) [EOL] res = self . send ( req ) [EOL] return res . json ( ) [EOL] [EOL] def activation_lock ( self , serial_number , escrow_key = None , lost_message = None ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def activation_lock_bypass ( self , serial_number , product_type , org_name , guid , escrow_key , imei = None , meid = None ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def disown ( self , * serial_numbers ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class DEPBaseCursor ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , owner , results = None ) : [EOL] self . owner = owner [EOL] self . results = results [EOL] [EOL] @ property def cursor ( self ) : [EOL] if not self . results : [EOL] return None [EOL] return self . results . get ( [string] , None ) [EOL] [EOL] @ property def more_to_follow ( self ) : [EOL] if not self . results : [EOL] return True [EOL] return self . results . get ( [string] , False ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return self [EOL] [EOL] [EOL] class DEPFetchCursor ( DEPBaseCursor , Iterator ) : [EOL] [docstring] [EOL] def __next__ ( self ) : [EOL] if not self . more_to_follow : [EOL] raise StopIteration ( ) [EOL] [EOL] if self . cursor is None : [EOL] self . results = self . owner . fetch_devices ( ) [EOL] else : [EOL] self . results = self . owner . fetch_devices ( cursor = self . cursor ) [EOL] [EOL] return self . results [EOL] [EOL] [EOL] class DEPSyncCursor ( DEPBaseCursor , Iterator ) : [EOL] [docstring] [EOL] def __init__ ( self , owner , cursor , results = None ) : [EOL] super ( DEPSyncCursor , self ) . __init__ ( owner , results ) [EOL] self . results = { [string] : cursor , [string] : True } [EOL] [EOL] def __next__ ( self ) : [EOL] if not self . more_to_follow : [EOL] raise StopIteration ( ) [EOL] [EOL] self . results = self . owner . sync_devices ( cursor = self . cursor ) [EOL] [EOL] return self . results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $commandment.dep.dep.DEP$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 $commandment.dep.dep.DEP$ 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $DEP$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DEP$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import flask [EOL] import typing [EOL] import cryptography [EOL] import commandment [EOL] import sqlalchemy . orm . exc [EOL] import datetime [EOL] import dateutil . parser [EOL] [EOL] from flask import Blueprint , jsonify , g , current_app , abort , request [EOL] from flask_rest_jsonapi import Api [EOL] from cryptography . hazmat . primitives . serialization import Encoding [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography import x509 [EOL] from cryptography . x509 import NameOID [EOL] from base64 import urlsafe_b64encode [EOL] [EOL] from commandment . models import db [EOL] from commandment . pki . models import RSAPrivateKey , CertificateSigningRequest [EOL] from commandment . dep . models import DEPServerTokenCertificate , DEPAccount [EOL] from commandment . enroll . util import generate_enroll_profile [EOL] from commandment . cms . decorators import verify_cms_signers [EOL] from commandment . plistutil . nonewriter import dumps as dumps_none [EOL] from commandment . profiles . plist_schema import ProfileSchema [EOL] from commandment . profiles import PROFILE_CONTENT_TYPE [EOL] from commandment . pki . ca import get_ca [EOL] from commandment . dep import smime [EOL] [EOL] from . resources import DEPProfileList , DEPProfileDetail , DEPProfileRelationship , DEPAccountList , DEPAccountDetail [EOL] import plistlib [EOL] import json [EOL] [EOL] dep_app = Blueprint ( [string] , __name__ ) [EOL] api = Api ( blueprint = dep_app ) [EOL] [EOL] api . route ( DEPProfileList , [string] , [string] , [string] ) [EOL] api . route ( DEPProfileDetail , [string] , [string] ) [EOL] api . route ( DEPProfileRelationship , [string] , [string] ) [EOL] api . route ( DEPProfileRelationship , [string] , [string] ) [EOL] api . route ( DEPAccountList , [string] , [string] ) [EOL] api . route ( DEPAccountDetail , [string] , [string] ) [EOL] [EOL] [EOL] @ dep_app . route ( [string] , methods = [ [string] ] ) def certificate_download ( ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] certificate_model = db . session . query ( DEPServerTokenCertificate ) . filter_by ( x509_cn = [string] ) . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] ca = get_ca ( ) [EOL] private_key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) , ) [EOL] private_key_model = RSAPrivateKey . from_crypto ( private_key ) [EOL] db . session . add ( private_key_model ) [EOL] [EOL] name = x509 . Name ( [ x509 . NameAttribute ( NameOID . COMMON_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) ] ) [EOL] [EOL] builder = x509 . CertificateSigningRequestBuilder ( ) [EOL] builder = builder . subject_name ( name ) [EOL] builder = builder . add_extension ( x509 . BasicConstraints ( ca = False , path_length = None ) , critical = True ) [EOL] [EOL] request = builder . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] request_model = CertificateSigningRequest . from_crypto ( request ) [EOL] request_model . rsa_private_key = private_key_model [EOL] db . session . add ( request_model ) [EOL] [EOL] certificate = ca . sign ( request ) [EOL] certificate_model = DEPServerTokenCertificate . from_crypto ( certificate ) [EOL] certificate_model . rsa_private_key = private_key_model [EOL] db . session . add ( certificate_model ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return certificate_model . pem_data , [number] , { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] @ dep_app . route ( [string] , methods = [ [string] ] ) def stoken_upload ( ) : [EOL] [docstring] [EOL] if [string] not in request . files : [EOL] abort ( [number] , [string] ) [EOL] [EOL] f = request . files [ [string] ] [EOL] [EOL] try : [EOL] certificate_model = db . session . query ( DEPServerTokenCertificate ) . filter_by ( x509_cn = [string] ) . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] pk = certificate_model . rsa_private_key [EOL] if pk is None : [EOL] return abort ( [number] , [string] ) [EOL] pk_crypto = pk . to_crypto ( ) [EOL] [EOL] smime_data = f . read ( ) [EOL] payload = smime . decrypt ( smime_data , pk_crypto ) [EOL] [EOL] [comment] [EOL] payload = payload . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] try : [EOL] stoken = json . loads ( payload ) [EOL] except json . decoder . JSONDecodeError : [EOL] current_app . logger . debug ( payload ) [EOL] return abort ( [number] , [string] ) [EOL] [EOL] try : [EOL] dep_account = db . session . query ( DEPAccount ) . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] dep_account = DEPAccount ( ) [EOL] [EOL] dep_account . certificate = certificate_model [EOL] dep_account . consumer_key = stoken [ [string] ] [EOL] dep_account . consumer_secret = stoken [ [string] ] [EOL] dep_account . access_token = stoken [ [string] ] [EOL] dep_account . access_secret = stoken [ [string] ] [EOL] dep_account . access_token_expiry = dateutil . parser . parse ( stoken [ [string] ] ) [EOL] dep_account . token_updated_at = datetime . datetime . utcnow ( ) [EOL] [EOL] db . session . commit ( ) [EOL] current_app . logger . debug ( [string] ) [EOL] [EOL] return jsonify ( stoken ) [EOL] [EOL] [EOL] @ dep_app . route ( [string] , methods = [ [string] ] ) @ verify_cms_signers def profile ( ) : [EOL] [docstring] [EOL] g . plist_data = plistlib . loads ( g . signed_data ) [EOL] profile = generate_enroll_profile ( ) [EOL] [EOL] schema = ProfileSchema ( ) [EOL] result = schema . dump ( profile ) [EOL] plist_data = dumps_none ( result . data , skipkeys = True ) [EOL] [EOL] return plist_data , [number] , { [string] : PROFILE_CONTENT_TYPE } [EOL] [EOL] [EOL] @ dep_app . route ( [string] , methods = [ [string] ] ) def anchor_certs ( ) : [EOL] [docstring] [EOL] anchors = [ ] [EOL] [EOL] if [string] in current_app . config : [EOL] with open ( current_app . config [ [string] ] , [string] ) as fd : [EOL] pem_data = fd . read ( ) [EOL] c = x509 . load_pem_x509_certificate ( pem_data , backend = default_backend ( ) ) [EOL] der = c . public_bytes ( Encoding . DER ) [EOL] anchors . append ( urlsafe_b64encode ( der ) ) [EOL] [EOL] if [string] in current_app . config : [EOL] with open ( current_app . config [ [string] ] , [string] ) as fd : [EOL] pem_data = fd . read ( ) [EOL] c = x509 . load_pem_x509_certificate ( pem_data , backend = default_backend ( ) ) [EOL] der = c . public_bytes ( Encoding . DER ) [EOL] anchors . append ( urlsafe_b64encode ( der ) ) [EOL] [EOL] return jsonify ( anchors ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import commandment [EOL] from flask import url_for [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_enum import EnumField [EOL] from . import SetupAssistantStep [EOL] [EOL] [EOL] class DEPProfileSchema ( Schema ) : [EOL] [docstring] [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] uuid = fields . UUID ( dump_only = True ) [EOL] [docstring] [EOL] [EOL] profile_name = fields . String ( required = True ) [EOL] [docstring] [EOL] url = fields . Url ( required = False ) [comment] [EOL] [docstring] [EOL] allow_pairing = fields . Boolean ( default = True ) [EOL] [docstring] [EOL] is_supervised = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] is_multi_user = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] is_mandatory = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] await_device_configured = fields . Boolean ( ) [EOL] [docstring] [EOL] is_mdm_removable = fields . Boolean ( ) [EOL] [docstring] [EOL] support_phone_number = fields . String ( allow_none = True ) [EOL] [docstring] [EOL] auto_advance_setup = fields . Boolean ( ) [EOL] [docstring] [EOL] support_email_address = fields . String ( allow_none = True ) [comment] [EOL] [docstring] [EOL] org_magic = fields . String ( allow_none = True ) [EOL] [docstring] [EOL] anchor_certs = fields . List ( fields . String ( ) ) [EOL] [docstring] [EOL] supervising_host_certs = fields . List ( fields . String ( ) ) [EOL] [docstring] [EOL] skip_setup_items = fields . List ( EnumField ( SetupAssistantStep ) ) [EOL] [docstring] [EOL] department = fields . String ( allow_none = True ) [EOL] [docstring] [EOL] last_upload_at = fields . DateTime ( dump_only = True ) [EOL] [docstring] [EOL] [EOL] devices = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , include_resource_linkage = True , schema = [string] , type_ = [string] ) [EOL] [EOL] dep_account = Relationship ( self_view = [string] , self_view_kwargs = { [string] : [string] } , related_view = [string] , related_view_kwargs = { [string] : [string] } , many = False , include_resource_linkage = True , schema = [string] , type_ = [string] ) [EOL] [EOL] [EOL] class DEPDeviceSchema ( Schema ) : [EOL] [docstring] [EOL] serial_number = fields . String ( ) [EOL] model = fields . String ( ) [EOL] description = fields . String ( ) [EOL] color = fields . String ( ) [EOL] asset_tag = fields . String ( ) [EOL] profile_status = fields . String ( ) [EOL] profile_uuid = fields . UUID ( ) [EOL] profile_assign_time = fields . DateTime ( ) [EOL] profile_push_time = fields . DateTime ( ) [EOL] device_assigned_date = fields . DateTime ( ) [EOL] device_assigned_by = fields . Email ( ) [EOL] os = fields . String ( ) [EOL] device_family = fields . String ( ) [EOL] [EOL] [EOL] class DEPDeviceSyncSchema ( Schema ) : [EOL] [docstring] [EOL] op_type = fields . String ( ) [EOL] op_date = fields . DateTime ( ) [EOL] [EOL] [EOL] class DEPDeviceCursorSchema ( Schema ) : [EOL] [docstring] [EOL] cursor = fields . String ( ) [EOL] more_to_follow = fields . Boolean ( ) [EOL] devices = fields . Nested ( DEPDeviceSchema , many = True ) [EOL] fetched_until = fields . DateTime ( ) [EOL] [EOL] [EOL] class MDMServiceURL ( Schema ) : [EOL] uri = fields . URL ( ) [EOL] http_method = fields . String ( ) [EOL] [comment] [EOL] [EOL] [EOL] class DEPAccountSchema ( Schema ) : [EOL] [docstring] [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] [EOL] [comment] [EOL] consumer_key = fields . String ( ) [EOL] consumer_secret = fields . String ( load_only = True ) [EOL] access_token = fields . String ( ) [EOL] access_secret = fields . String ( load_only = True ) [EOL] access_token_expiry = fields . DateTime ( dump_only = True ) [EOL] token_updated_at = fields . DateTime ( dump_only = True ) [EOL] auth_session_token = fields . String ( load_only = True ) [EOL] [EOL] [comment] [EOL] server_name = fields . String ( ) [EOL] server_uuid = fields . UUID ( ) [EOL] admin_id = fields . String ( ) [EOL] facilitator_id = fields . String ( ) [EOL] org_name = fields . String ( ) [EOL] org_email = fields . Email ( ) [EOL] org_phone = fields . String ( ) [EOL] org_address = fields . String ( ) [EOL] [comment] [EOL] org_type = fields . String ( ) [EOL] org_version = fields . String ( ) [EOL] org_id = fields . String ( ) [EOL] org_id_hash = fields . String ( ) [EOL] url = fields . String ( ) [EOL] [EOL] cursor = fields . String ( ) [EOL] more_to_follow = fields . Boolean ( ) [EOL] fetched_until = fields . DateTime ( ) [EOL] [EOL] dep_profiles = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , include_resource_linkage = True , schema = [string] , type_ = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSyncSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceSyncSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceCursorSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceCursorSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceCursorSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPDeviceCursorSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.MDMServiceURL]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.MDMServiceURL]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.dep.schema.DEPAccountSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from flask import url_for [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] from . schema import DEPProfileSchema , DEPAccountSchema [EOL] from . models import db , DEPProfile , DEPAccount [EOL] [EOL] [EOL] class DEPProfileList ( ResourceList ) : [EOL] schema = DEPProfileSchema [EOL] data_layer = { [string] : db . session , [string] : DEPProfile , } [EOL] [EOL] def before_post ( self , args , kwargs , data = None ) : [EOL] [docstring] [EOL] if [string] not in data or data [ [string] ] is None : [EOL] data [ [string] ] = url_for ( [string] , _external = True ) [EOL] [EOL] [EOL] class DEPProfileDetail ( ResourceDetail ) : [EOL] schema = DEPProfileSchema [EOL] data_layer = { [string] : db . session , [string] : DEPProfile , [string] : [string] } [EOL] [EOL] [EOL] class DEPProfileRelationship ( ResourceRelationship ) : [EOL] schema = DEPProfileSchema [EOL] data_layer = { [string] : db . session , [string] : DEPProfile , [string] : [string] } [EOL] [EOL] [EOL] class DEPAccountList ( ResourceList ) : [EOL] schema = DEPAccountSchema [EOL] data_layer = { [string] : db . session , [string] : DEPAccount , } [EOL] [EOL] [EOL] class DEPAccountDetail ( ResourceDetail ) : [EOL] schema = DEPAccountSchema [EOL] data_layer = { [string] : db . session , [string] : DEPAccount , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from marshmallow import fields , Schema [EOL] from marshmallow_enum import EnumField [EOL] from . import SetupAssistantStep [EOL] [EOL] [EOL] class AppleDEPProfileSchema ( Schema ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] profile_name = fields . String ( required = True ) [EOL] [docstring] [EOL] url = fields . Url ( required = False ) [comment] [EOL] [docstring] [EOL] allow_pairing = fields . Boolean ( default = True ) [EOL] [docstring] [EOL] is_supervised = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] is_multi_user = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] is_mandatory = fields . Boolean ( default = False ) [EOL] [docstring] [EOL] await_device_configured = fields . Boolean ( ) [EOL] [docstring] [EOL] is_mdm_removable = fields . Boolean ( ) [EOL] [docstring] [EOL] support_phone_number = fields . String ( allow_none = True ) [EOL] [docstring] [EOL] auto_advance_setup = fields . Boolean ( ) [EOL] [docstring] [EOL] support_email_address = fields . String ( allow_none = True ) [comment] [EOL] [docstring] [EOL] org_magic = fields . String ( allow_none = True ) [EOL] [docstring] [EOL] anchor_certs = fields . List ( fields . String ( ) ) [EOL] [docstring] [EOL] supervising_host_certs = fields . List ( fields . String ( ) ) [EOL] [docstring] [EOL] skip_setup_items = fields . List ( EnumField ( SetupAssistantStep ) ) [EOL] [docstring] [EOL] department = fields . String ( allow_none = True ) [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Set , Dict [EOL] import typing [EOL] import commandment [EOL] from typing import Set , Dict [EOL] from enum import Enum [EOL] [EOL] [EOL] class SetupAssistantStep ( Enum ) : [EOL] [docstring] [EOL] [docstring] [EOL] AppleID = [string] [EOL] [docstring] [EOL] Biometric = [string] [EOL] [docstring] [EOL] Diagnostics = [string] [EOL] [docstring] [EOL] DisplayTone = [string] [EOL] [docstring] [EOL] Location = [string] [EOL] [docstring] [EOL] Passcode = [string] [EOL] [docstring] [EOL] Payment = [string] [EOL] [docstring] [EOL] Privacy = [string] [EOL] [docstring] [EOL] Restore = [string] [EOL] SIMSetup = [string] [EOL] [docstring] [EOL] Siri = [string] [EOL] [docstring] [EOL] TOS = [string] [EOL] [docstring] [EOL] Zoom = [string] [EOL] [docstring] [EOL] Android = [string] [EOL] [docstring] [EOL] HomeButtonSensitivity = [string] [EOL] [docstring] [EOL] iMessageAndFaceTime = [string] [EOL] [docstring] [EOL] OnBoarding = [string] [EOL] [docstring] [EOL] ScreenTime = [string] [EOL] [docstring] [EOL] SoftwareUpdate = [string] [EOL] [docstring] [EOL] WatchMigration = [string] [EOL] [docstring] [EOL] Appearance = [string] [EOL] [docstring] [EOL] FileVault = [string] [EOL] [docstring] [EOL] iCloudDiagnostics = [string] [EOL] [docstring] [EOL] iCloudStorage = [string] [EOL] [docstring] [EOL] Registration = [string] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] ScreenSaver = [string] [EOL] [docstring] [EOL] TapToSetup = [string] [EOL] [docstring] [EOL] TVHomeScreenSync = [string] [EOL] [docstring] [EOL] TVProviderSignIn = [string] [EOL] [docstring] [EOL] TVRoom = [string] [EOL] [EOL] [EOL] SkipSetupSteps = Set [ SetupAssistantStep ] [EOL] [EOL] [EOL] class DEPProfileRemovalStatus ( Enum ) : [EOL] SUCCESS = [string] [EOL] NOT_ACCESSIBLE = [string] [EOL] FAILED = [string] [EOL] [EOL] [EOL] SerialNumber = str [EOL] DEPProfileRemovals = Dict [ SerialNumber , DEPProfileRemovalStatus ] [EOL] [EOL] [EOL] class DEPOrgType ( Enum ) : [EOL] [docstring] [EOL] Education = [string] [EOL] Organization = [string] [EOL] [EOL] [EOL] class DEPOrgVersion ( Enum ) : [EOL] [docstring] [EOL] v1 = [string] [comment] [EOL] v2 = [string] [comment] [EOL] [EOL] [EOL] class DEPOperationType ( Enum ) : [EOL] [docstring] [EOL] Added = [string] [EOL] Modified = [string] [EOL] Deleted = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,commandment.dep.DEPProfileRemovalStatus]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Optional , Dict , Any [EOL] import typing [EOL] import flask [EOL] import threading [EOL] import commandment [EOL] import logging [EOL] import builtins [EOL] [docstring] [EOL] import logging [EOL] import threading [EOL] import datetime [EOL] import dateutil . parser [EOL] from flask import Flask [EOL] [EOL] [comment] [EOL] from sqlalchemy . orm import scoped_session [EOL] from sqlalchemy . orm import sessionmaker [EOL] [EOL] from commandment . dep . apple_schema import AppleDEPProfileSchema [EOL] from commandment . dep . errors import DEPServiceError [EOL] from commandment . models import db , Device [EOL] from commandment . dep . models import DEPAccount , DEPProfile [EOL] from commandment . dep . dep import DEP [EOL] from commandment . dep import DEPOrgType , DEPOrgVersion , DEPOperationType [EOL] import sqlalchemy . orm . exc [EOL] import sqlalchemy . exc [EOL] [EOL] dep_thread = None [EOL] dep_start = [number] [EOL] dep_time = [number] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def start ( app ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] dep_thread = threading . Timer ( dep_start , dep_thread_callback , [ app ] ) [EOL] dep_thread . daemon = True [EOL] dep_thread . start ( ) [EOL] [EOL] [EOL] def stop ( ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] global dep_thread [EOL] if dep_thread is threading . Timer : [EOL] dep_thread . cancel ( ) [EOL] [EOL] [EOL] def dep_sync_organization ( app , dep ) : [EOL] [docstring] [EOL] with app . app_context ( ) : [EOL] try : [EOL] app . logger . debug ( [string] ) [EOL] dep_account = db . session . query ( DEPAccount ) . one ( ) [EOL] [EOL] [comment] [EOL] if dep_account . server_name is None or dep_account . server_uuid is None : [EOL] app . logger . debug ( [string] ) [EOL] account = dep . account ( ) [EOL] [EOL] if account is not None : [EOL] dep_account . server_uuid = account . get ( [string] , None ) [EOL] dep_account . server_name = account . get ( [string] , None ) [EOL] dep_account . facilitator_id = account . get ( [string] , None ) [EOL] dep_account . admin_id = account . get ( [string] , None ) [EOL] dep_account . org_name = account . get ( [string] , None ) [EOL] dep_account . org_email = account . get ( [string] , None ) [EOL] dep_account . org_phone = account . get ( [string] , None ) [EOL] dep_account . org_address = account . get ( [string] , None ) [EOL] dep_account . org_id = account . get ( [string] , None ) [EOL] dep_account . org_id_hash = account . get ( [string] , None ) [EOL] if [string] in account : [EOL] dep_account . org_type = DEPOrgType ( account [ [string] ] ) [EOL] [EOL] if [string] in account : [EOL] dep_account . org_version = DEPOrgVersion ( account [ [string] ] ) [EOL] [EOL] db . session . commit ( ) [EOL] app . logger . info ( [string] , dep_account . org_name ) [EOL] else : [EOL] app . logger . warn ( [string] ) [EOL] else : [EOL] app . logger . info ( [string] , dep_account . org_name ) [EOL] [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] app . logger . info ( [string] ) [EOL] [EOL] [EOL] def dep_fetch_devices ( app , dep , dep_account_id ) : [EOL] [docstring] [EOL] thread_session = db . create_scoped_session ( ) [EOL] [EOL] dep_account = thread_session . query ( DEPAccount ) . one ( ) [EOL] [EOL] if dep_account . cursor is not None : [EOL] app . logger . info ( [string] , dep_account . cursor ) [EOL] else : [EOL] app . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] for device_page in dep . devices ( dep_account . cursor ) : [EOL] print ( device_page ) [EOL] for device in device_page [ [string] ] : [EOL] if [string] in device : [comment] [EOL] optype = DEPOperationType ( device [ [string] ] ) [EOL] [EOL] if optype == DEPOperationType . Added : [EOL] app . logger . debug ( [string] , device [ [string] ] ) [EOL] elif optype == DEPOperationType . Modified : [EOL] app . logger . debug ( [string] , device [ [string] ] ) [EOL] elif optype == DEPOperationType . Deleted : [EOL] app . logger . debug ( [string] , device [ [string] ] ) [EOL] else : [EOL] app . logger . error ( [string] , device [ [string] ] ) [EOL] continue [EOL] else : [EOL] pass [EOL] [EOL] try : [EOL] d = thread_session . query ( Device ) . filter ( Device . serial_number == device [ [string] ] ) . one ( ) [EOL] d . description = device [ [string] ] [EOL] d . model = device [ [string] ] [EOL] d . os = device [ [string] ] [EOL] d . device_family = device [ [string] ] [EOL] d . color = device [ [string] ] [EOL] d . profile_status = device [ [string] ] [EOL] if device [ [string] ] != [string] : [EOL] d . profile_uuid = device . get ( [string] , None ) [comment] [EOL] d . profile_assign_time = dateutil . parser . parse ( device [ [string] ] ) [EOL] [EOL] d . device_assigned_by = device [ [string] ] [EOL] d . device_assigned_date = dateutil . parser . parse ( device [ [string] ] ) [EOL] d . is_dep = True [EOL] [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] app . logger . debug ( [string] , device [ [string] ] ) [EOL] [EOL] if device [ [string] ] != [string] : [EOL] device [ [string] ] = dateutil . parser . parse ( device [ [string] ] ) [EOL] [EOL] device [ [string] ] = dateutil . parser . parse ( device [ [string] ] ) [EOL] [EOL] if [string] in device : [EOL] del device [ [string] ] [EOL] del device [ [string] ] [EOL] del device [ [string] ] [EOL] del device [ [string] ] [EOL] [EOL] d = Device ( ** device ) [EOL] d . is_dep = True [EOL] thread_session . add ( d ) [EOL] [EOL] except sqlalchemy . exc . StatementError as e : [EOL] app . logger . error ( [string] . format ( e ) ) [EOL] [EOL] app . logger . debug ( [string] , device_page [ [string] ] ) [EOL] dep_account . cursor = device_page . get ( [string] , None ) [EOL] dep_account . more_to_follow = device_page . get ( [string] , None ) [EOL] dep_account . fetched_until = dateutil . parser . parse ( device_page [ [string] ] ) [EOL] thread_session . commit ( ) [EOL] [EOL] [EOL] def dep_define_profiles ( app , dep ) : [EOL] [docstring] [EOL] thread_session = db . create_scoped_session ( ) [EOL] [EOL] dep_profiles_pending = thread_session . query ( DEPProfile ) . filter ( DEPProfile . uuid . is_ ( None ) , DEPProfile . last_upload_at . is_ ( None ) ) . all ( ) [EOL] app . logger . debug ( [string] , len ( dep_profiles_pending ) ) [EOL] [EOL] for dep_profile in dep_profiles_pending : [EOL] try : [EOL] schema = AppleDEPProfileSchema ( ) [EOL] dep_profile_apple = schema . dump ( dep_profile ) [EOL] print ( dep_profile_apple . data ) [EOL] response = dep . define_profile ( dep_profile_apple . data ) [EOL] assert [string] in response [EOL] dep_profile . uuid = response [ [string] ] [EOL] dep_profile . last_uploaded_at = datetime . datetime . now ( ) [EOL] except Exception as e : [EOL] app . logger . error ( [string] . format ( e ) ) [EOL] [EOL] thread_session . commit ( ) [EOL] [EOL] [EOL] def dep_thread_callback ( app ) : [EOL] [docstring] [EOL] threadlocals = threading . local ( ) [EOL] [EOL] with app . app_context ( ) : [EOL] try : [EOL] dep_account = db . session . query ( DEPAccount ) . one ( ) [EOL] app . logger . info ( [string] ) [EOL] [EOL] dep = DEP ( consumer_key = dep_account . consumer_key , consumer_secret = dep_account . consumer_secret , access_token = dep_account . access_token , access_secret = dep_account . access_secret , ) [EOL] [EOL] dep_sync_organization ( app , dep ) [EOL] [EOL] try : [EOL] dep_fetch_devices ( app , dep , dep_account . id ) [EOL] except DEPServiceError as dse : [EOL] print ( dse ) [EOL] if dse . text == [string] : [EOL] app . logger . info ( [string] ) [EOL] dep_account . cursor = None [EOL] db . session . add ( dep_account ) [EOL] db . session . commit ( ) [EOL] [EOL] dep_define_profiles ( app , dep ) [EOL] [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] app . logger . info ( [string] ) [EOL] [EOL]	
from typing import Any [EOL] import flask [EOL] import typing [EOL] from flask import Blueprint , jsonify , current_app [EOL] [EOL] ac2_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ ac2_app . route ( [string] ) def mdm_service_config ( ) : [EOL] [docstring] [EOL] public_hostname = current_app . config . get ( [string] , [string] ) [EOL] port = current_app . config . get ( [string] , [number] ) [EOL] [EOL] return jsonify ( { [string] : [string] . format ( public_hostname , port ) , [string] : [string] . format ( public_hostname , port ) , [string] : [string] . format ( public_hostname , port ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any [EOL] import typing [EOL] import cryptography [EOL] import commandment [EOL] import os . path [EOL] from typing import Optional [EOL] from flask import abort , current_app [EOL] [EOL] from commandment . enroll . profiles import scep_payload_from_configuration , ca_trust_payload_from_configuration , ssl_trust_payload_from_configuration [EOL] from commandment . models import db , Organization [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . x509 . name import NameOID [EOL] from sqlalchemy . orm . exc import NoResultFound , MultipleResultsFound [EOL] from commandment . profiles import PayloadScope [EOL] from commandment . profiles . models import Profile , MDMPayload , PKCS12CertificatePayload [EOL] from uuid import uuid4 [EOL] [EOL] [EOL] def generate_enroll_profile ( pkcs12_payload = None ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] push_certificate_path = os . path . join ( os . path . dirname ( current_app . root_path ) , current_app . config [ [string] ] ) [EOL] [EOL] if os . path . exists ( push_certificate_path ) : [EOL] push_certificate_basename , ext = os . path . splitext ( push_certificate_path ) [EOL] if ext . lower ( ) == [string] : [comment] [EOL] push_certificate_path = push_certificate_basename + [string] [EOL] [EOL] with open ( push_certificate_path , [string] ) as fd : [EOL] push_certificate = x509 . load_pem_x509_certificate ( fd . read ( ) , backend = default_backend ( ) ) [EOL] else : [EOL] abort ( [number] , [string] . format ( push_certificate_path ) ) [EOL] [EOL] if not org . payload_prefix : [EOL] abort ( [number] , [string] ) [EOL] [EOL] profile = Profile ( identifier = org . payload_prefix + [string] , uuid = uuid4 ( ) , display_name = [string] , description = [string] , organization = org . name , version = [number] , scope = PayloadScope . System , ) [EOL] [EOL] if [string] in current_app . config : [EOL] [comment] [EOL] ca_payload = ca_trust_payload_from_configuration ( ) [EOL] profile . payloads . append ( ca_payload ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in current_app . config : [EOL] ssl_payload = ssl_trust_payload_from_configuration ( ) [EOL] profile . payloads . append ( ssl_payload ) [EOL] [EOL] if pkcs12_payload is None : [EOL] scep_payload = scep_payload_from_configuration ( ) [EOL] profile . payloads . append ( scep_payload ) [EOL] cert_uuid = scep_payload . uuid [EOL] else : [EOL] profile . payloads . append ( pkcs12_payload ) [EOL] cert_uuid = pkcs12_payload . uuid [EOL] [EOL] from commandment . mdm import AccessRights [EOL] [EOL] push_topics = push_certificate . subject . get_attributes_for_oid ( NameOID . USER_ID ) [EOL] if len ( push_topics ) != [number] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] push_topic = push_topics [ [number] ] . value [EOL] [EOL] mdm_payload = MDMPayload ( uuid = uuid4 ( ) , identifier = org . payload_prefix + [string] , identity_certificate_uuid = cert_uuid , topic = push_topic , server_url = [string] . format ( current_app . config [ [string] ] , current_app . config [ [string] ] ) , access_rights = AccessRights . All . value , check_in_url = [string] . format ( current_app . config [ [string] ] , current_app . config [ [string] ] ) , sign_message = True , check_out_when_removed = True , display_name = [string] , server_capabilities = [ [string] ] , description = [string] , version = [number] ) [EOL] profile . payloads . append ( mdm_payload ) [EOL] [EOL] return profile [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.profiles.models.Profile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] from enum import Enum [EOL] [EOL] [EOL] class DeviceAttributes ( Enum ) : [EOL] [docstring] [EOL] UDID = [string] [EOL] VERSION = [string] [EOL] PRODUCT = [string] [EOL] DEVICE_NAME = [string] [EOL] SERIAL = [string] [EOL] MODEL = [string] [EOL] MAC_ADDRESS_EN0 = [string] [EOL] MEID = [string] [EOL] IMEI = [string] [EOL] ICCID = [string] [EOL] COMPROMISED = [string] [EOL] DeviceID = [string] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] AllDeviceAttributes = { DeviceAttributes . UDID . value , DeviceAttributes . VERSION . value , DeviceAttributes . PRODUCT . value , DeviceAttributes . DEVICE_NAME . value , DeviceAttributes . SERIAL . value , DeviceAttributes . MODEL . value , DeviceAttributes . MEID . value , DeviceAttributes . IMEI . value , DeviceAttributes . ICCID . value , DeviceAttributes . COMPROMISED . value , DeviceAttributes . DeviceID . value , } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import flask [EOL] import typing [EOL] import commandment [EOL] [docstring] [EOL] [EOL] from uuid import uuid4 [EOL] import plistlib [EOL] [EOL] from flask import current_app , render_template , abort , Blueprint , make_response , url_for , request , g [EOL] import os [EOL] [EOL] from commandment . enroll import AllDeviceAttributes [EOL] from commandment . enroll . profiles import ca_trust_payload_from_configuration , scep_payload_from_configuration , identity_payload [EOL] from commandment . profiles . models import MDMPayload , Profile , PEMCertificatePayload , DERCertificatePayload , SCEPPayload [EOL] from commandment . profiles import PROFILE_CONTENT_TYPE , plist_schema as profile_schema , PayloadScope [EOL] from commandment . models import db , Organization , SCEPConfig [EOL] from sqlalchemy . orm . exc import NoResultFound , MultipleResultsFound [EOL] from commandment . plistutil . nonewriter import dumps as dumps_none [EOL] from commandment . enroll . util import generate_enroll_profile [EOL] from commandment . cms . decorators import verify_cms_signers [EOL] from commandment . pki . ca import get_ca [EOL] [EOL] enroll_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] def base64_to_pem ( crypto_type , b64_text , width = [number] ) : [EOL] lines = [string] [EOL] for pos in range ( [number] , len ( b64_text ) , width ) : [EOL] lines += b64_text [ pos : pos + width ] + [string] [EOL] [EOL] return [string] % ( crypto_type , lines , crypto_type ) [EOL] [EOL] [EOL] @ enroll_app . route ( [string] , methods = [ [string] ] ) def trust_mobileconfig ( ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] profile = Profile ( identifier = org . payload_prefix + [string] , uuid = uuid4 ( ) , display_name = [string] , description = [string] , organization = org . name , version = [number] , scope = PayloadScope . System , ) [EOL] [EOL] if [string] in current_app . config : [EOL] [comment] [EOL] ca_payload = ca_trust_payload_from_configuration ( ) [EOL] profile . payloads . append ( ca_payload ) [EOL] [EOL] if [string] in current_app . config : [EOL] basepath = os . path . dirname ( __file__ ) [EOL] certpath = os . path . join ( basepath , current_app . config [ [string] ] ) [EOL] with open ( certpath , [string] ) as fd : [EOL] pem_payload = PEMCertificatePayload ( uuid = uuid4 ( ) , identifier = org . payload_prefix + [string] , payload_content = fd . read ( ) , display_name = [string] , description = [string] , type = [string] , version = [number] ) [EOL] profile . payloads . append ( pem_payload ) [EOL] [EOL] schema = profile_schema . ProfileSchema ( ) [EOL] result = schema . dump ( profile ) [EOL] plist_data = dumps_none ( result . data , skipkeys = True ) [EOL] [EOL] return plist_data , [number] , { [string] : PROFILE_CONTENT_TYPE , [string] : [string] } [EOL] [EOL] [EOL] @ enroll_app . route ( [string] , methods = [ [string] , [string] ] ) def enroll ( ) : [EOL] [docstring] [EOL] [EOL] ca = get_ca ( ) [EOL] key , csr = ca . create_device_csr ( [string] ) [EOL] device_certificate = ca . sign ( csr ) [EOL] [EOL] pkcs12_payload = identity_payload ( key , device_certificate , [string] ) [EOL] profile = generate_enroll_profile ( pkcs12_payload ) [EOL] [EOL] schema = profile_schema . ProfileSchema ( ) [EOL] result = schema . dump ( profile ) [EOL] plist_data = dumps_none ( result . data , skipkeys = True ) [EOL] [EOL] return plist_data , [number] , { [string] : PROFILE_CONTENT_TYPE } [EOL] [EOL] [EOL] @ enroll_app . route ( [string] ) def ota_enroll ( ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] profile = { [string] : [string] , [string] : org . payload_prefix + [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : org . name , [string] : { [string] : [string] . format ( current_app . config [ [string] ] , current_app . config [ [string] ] ) , [string] : list ( AllDeviceAttributes ) , [string] : [string] , } , } [EOL] plist_data = dumps_none ( profile ) [EOL] [EOL] return plist_data , [number] , { [string] : PROFILE_CONTENT_TYPE } [EOL] [EOL] [EOL] @ enroll_app . route ( [string] , methods = [ [string] ] ) @ verify_cms_signers def ota_authenticate ( ) : [EOL] [docstring] [EOL] signed_data = g . signed_data [EOL] [comment] [EOL] [comment] [EOL] device_attributes = plistlib . loads ( signed_data ) [EOL] [EOL] current_app . logger . debug ( device_attributes ) [EOL] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in device_attributes : [EOL] [comment] [EOL] profile = Profile ( identifier = org . payload_prefix + [string] , uuid = uuid4 ( ) , display_name = [string] , description = [string] , organization = org . name , version = [number] , scope = PayloadScope . System , ) [EOL] [EOL] scep_payload = scep_payload_from_configuration ( ) [EOL] profile . payloads . append ( scep_payload ) [EOL] else : [EOL] profile = generate_enroll_profile ( ) [EOL] [EOL] schema = profile_schema . ProfileSchema ( ) [EOL] result = schema . dump ( profile ) [EOL] plist_data = dumps_none ( result . data , skipkeys = True ) [EOL] [EOL] return plist_data , [number] , { [string] : PROFILE_CONTENT_TYPE } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import builtins [EOL] import cryptography [EOL] import commandment [EOL] import os . path [EOL] from typing import Optional [EOL] from uuid import uuid4 [EOL] from flask import abort , current_app , url_for [EOL] from sqlalchemy . orm . exc import NoResultFound , MultipleResultsFound [EOL] [EOL] from commandment . profiles . certificates import KeyUsage [EOL] from commandment . profiles . models import SCEPPayload , PEMCertificatePayload , PKCS12CertificatePayload [EOL] from commandment . models import db , Organization , SCEPConfig [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography import x509 [EOL] from commandment . pki . openssl import create_pkcs12 [EOL] [EOL] [EOL] def scep_payload_from_configuration ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] try : [EOL] scep_config = db . session . query ( SCEPConfig ) . one ( ) [EOL] [EOL] scep_payload = SCEPPayload ( uuid = uuid4 ( ) , identifier = [string] , url = scep_config . url , name = [string] , subject = [ [ [string] , [string] ] ] , challenge = scep_config . challenge , key_size = scep_config . key_size , key_type = [string] , key_usage = scep_config . key_usage , display_name = [string] , description = [string] , retries = scep_config . retries , retry_delay = scep_config . retry_delay , version = [number] ) [EOL] except NoResultFound : [EOL] scep_payload = SCEPPayload ( uuid = uuid4 ( ) , identifier = [string] , url = url_for ( [string] , _external = True ) , name = [string] , subject = [ [ [string] , [string] ] ] , challenge = current_app . config . get ( [string] , None ) , key_size = [number] , key_type = [string] , key_usage = KeyUsage . All , display_name = [string] , description = [string] , retries = [number] , retry_delay = [number] , version = [number] ) [EOL] except MultipleResultsFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] return scep_payload [EOL] [EOL] [EOL] def ca_trust_payload_from_configuration ( ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] with open ( current_app . config [ [string] ] , [string] ) as fd : [EOL] pem_data = fd . read ( ) [EOL] pem_payload = PEMCertificatePayload ( uuid = uuid4 ( ) , identifier = org . payload_prefix + [string] , payload_content = pem_data , display_name = [string] , description = [string] , type = [string] , version = [number] ) [EOL] [EOL] return pem_payload [EOL] [EOL] [EOL] def ssl_trust_payload_from_configuration ( ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] basepath = os . path . dirname ( __file__ ) [EOL] certpath = os . path . join ( basepath , current_app . config [ [string] ] ) [EOL] [EOL] with open ( certpath , [string] ) as fd : [EOL] pem_payload = PEMCertificatePayload ( uuid = uuid4 ( ) , identifier = org . payload_prefix + [string] , payload_content = fd . read ( ) , display_name = [string] , description = [string] , type = [string] , version = [number] ) [EOL] return pem_payload [EOL] [EOL] [EOL] def identity_payload ( private_key , certificate , passphrase = None ) : [EOL] [docstring] [EOL] try : [EOL] org = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] , [string] ) [EOL] except MultipleResultsFound : [EOL] abort ( [number] , [string] ) [EOL] [EOL] pkcs12_data = create_pkcs12 ( private_key , certificate , passphrase ) [EOL] [EOL] pkcs12_payload = PKCS12CertificatePayload ( uuid = uuid4 ( ) , certificate_file_name = [string] , identifier = org . payload_prefix + [string] , display_name = [string] , description = [string] , type = [string] , password = passphrase , payload_content = pkcs12_data , version = [number] ) [EOL] [EOL] return pkcs12_payload [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.profiles.models.SCEPPayload$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.profiles.models.PEMCertificatePayload$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.profiles.models.PEMCertificatePayload$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.profiles.models.PKCS12CertificatePayload$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Optional , Iterator , Dict , Set , List , Any [EOL] import typing [EOL] import DeviceInformation [EOL] import uuid [EOL] import commandment [EOL] import builtins [EOL] from enum import Enum [EOL] from uuid import uuid4 , UUID [EOL] from typing import Dict , Set , List , Type , ClassVar , Any , Optional , Tuple [EOL] import semver [EOL] from base64 import urlsafe_b64encode , urlsafe_b64decode [EOL] from . import AccessRights , AccessRightsSet , Platform [EOL] [EOL] PlatformVersion = str [EOL] PlatformRequirements = Dict [ Platform , PlatformVersion ] [EOL] [EOL] [EOL] class CommandRegistry ( type ) : [EOL] command_classes = { } [EOL] [EOL] def __new__ ( mcs , name , bases , namespace , ** kwds ) : [EOL] ns = dict ( namespace ) [EOL] klass = type . __new__ ( mcs , name , bases , ns ) [EOL] if [string] in ns : [EOL] CommandRegistry . command_classes [ ns [ [string] ] ] = klass [EOL] [EOL] return klass [EOL] [EOL] [EOL] class Command ( metaclass = CommandRegistry ) : [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , uuid = None ) : [EOL] [docstring] [EOL] if uuid is None : [EOL] uuid = uuid4 ( ) [EOL] [EOL] self . _uuid = uuid [EOL] self . _attrs = { } [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ property def uuid ( self ) : [EOL] return self . _uuid [EOL] [EOL] @ property def parameters ( self ) : [EOL] return self . _attrs [EOL] [EOL] @ classmethod def new_request_type ( cls , request_type , parameters , uuid = None ) : [EOL] [docstring] [EOL] if request_type in CommandRegistry . command_classes : [EOL] klass = CommandRegistry . command_classes [ request_type ] [EOL] return klass ( uuid , ** parameters ) [EOL] else : [EOL] raise ValueError ( [string] . format ( request_type ) ) [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] command = { [string] : self . request_type } [EOL] [EOL] return { [string] : str ( self . _uuid ) , [string] : command , } [EOL] [EOL] [EOL] class DeviceInformation ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . QueryDeviceInformation , AccessRights . QueryNetworkInformation } [EOL] [EOL] class Queries ( Enum ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] UDID = [string] [EOL] Languages = [string] [EOL] Locales = [string] [EOL] DeviceID = [string] [EOL] OrganizationInfo = [string] [EOL] LastCloudBackupDate = [string] [EOL] AwaitingConfiguration = [string] [EOL] AutoSetupAdminAccounts = [string] [EOL] [EOL] [comment] [EOL] iTunesStoreAccountIsActive = [string] [EOL] iTunesStoreAccountHash = [string] [EOL] [EOL] [comment] [EOL] DeviceName = [string] [EOL] OSVersion = [string] [EOL] BuildVersion = [string] [EOL] ModelName = [string] [EOL] Model = [string] [EOL] ProductName = [string] [EOL] SerialNumber = [string] [EOL] DeviceCapacity = [string] [EOL] AvailableDeviceCapacity = [string] [EOL] BatteryLevel = [string] [EOL] CellularTechnology = [string] [EOL] IMEI = [string] [EOL] MEID = [string] [EOL] ModemFirmwareVersion = [string] [EOL] IsSupervised = [string] [EOL] IsDeviceLocatorServiceEnabled = [string] [EOL] IsActivationLockEnabled = [string] [EOL] IsDoNotDisturbInEffect = [string] [EOL] EASDeviceIdentifier = [string] [EOL] IsCloudBackupEnabled = [string] [EOL] OSUpdateSettings = [string] [EOL] LocalHostName = [string] [EOL] HostName = [string] [EOL] SystemIntegrityProtectionEnabled = [string] [EOL] ActiveManagedUsers = [string] [EOL] IsMDMLostModeEnabled = [string] [EOL] MaximumResidentUsers = [string] [EOL] [EOL] [comment] [EOL] ICCID = [string] [EOL] BluetoothMAC = [string] [EOL] WiFiMAC = [string] [EOL] EthernetMACs = [string] [EOL] CurrentCarrierNetwork = [string] [EOL] SIMCarrierNetwork = [string] [EOL] SubscriberCarrierNetwork = [string] [EOL] CarrierSettingsVersion = [string] [EOL] PhoneNumber = [string] [EOL] VoiceRoamingEnabled = [string] [EOL] DataRoamingEnabled = [string] [EOL] IsRoaming = [string] [EOL] PersonalHotspotEnabled = [string] [EOL] SubscriberMCC = [string] [EOL] SubscriberMNC = [string] [EOL] CurrentMCC = [string] [EOL] CurrentMNC = [string] [EOL] [EOL] [comment] [EOL] CurrentConsoleManagedUser = [string] [EOL] [EOL] Requirements = { [string] : [ ( Platform . iOS , [string] ) , ( Platform . tvOS , [string] ) , ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . tvOS , [string] ) , ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . tvOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . macOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . macOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . macOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . macOS , [string] ) ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . macOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] , [string] : [ ( Platform . iOS , [string] ) , ] } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( DeviceInformation , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] @ classmethod def for_platform ( cls , platform , min_os_version , queries = None ) : [EOL] [docstring] [EOL] [EOL] def supported ( query ) : [EOL] if query not in cls . Requirements : [EOL] return True [EOL] [EOL] platforms = cls . Requirements [ query ] [EOL] for req_platform , req_min_version in platforms : [EOL] if req_platform != platform : [EOL] continue [EOL] [EOL] [comment] [EOL] return True [comment] [EOL] [comment] [EOL] [EOL] return False [EOL] [EOL] if queries is None : [EOL] supported_queries = filter ( supported , [ q . value for q in cls . Queries ] ) [EOL] else : [EOL] supported_queries = filter ( supported , queries ) [EOL] [EOL] return cls ( Queries = list ( supported_queries ) ) [EOL] [EOL] @ property def queries ( self ) : [EOL] return self . _attrs . get ( [string] ) [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] return { [string] : str ( self . _uuid ) , [string] : { [string] : type ( self ) . request_type , [string] : self . _attrs . get ( [string] , None ) , } } [EOL] [EOL] [EOL] class SecurityInfo ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . SecurityQueries } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( SecurityInfo , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] [EOL] class DeviceLock ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . DeviceLockPasscodeRemoval } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( DeviceLock , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] def to_dict ( self ) : [EOL] command = { [string] : type ( self ) . request_type , [string] : self . _attrs . get ( [string] , [string] ) , } [EOL] [EOL] if [string] in self . _attrs : [EOL] command [ [string] ] = self . _attrs [ [string] ] [EOL] [EOL] if [string] in self . _attrs : [EOL] command [ [string] ] = self . _attrs [ [string] ] [EOL] [EOL] return { [string] : str ( self . _uuid ) , [string] : command , } [EOL] [EOL] [EOL] class ClearPasscode ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . DeviceLockPasscodeRemoval } [EOL] require_platforms = { Platform . iOS : [string] } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( ClearPasscode , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : str ( self . _uuid ) , [string] : { [string] : type ( self ) . request_type , [string] : urlsafe_b64decode ( self . _attrs [ [string] ] ) } } [EOL] [EOL] [EOL] class ProfileList ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ProfileInspection } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( ProfileList , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] [EOL] class InstallProfile ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ProfileInstallRemove } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( InstallProfile , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] if [string] in kwargs : [EOL] profile_data = kwargs [ [string] ] . data [EOL] self . _attrs [ [string] ] = urlsafe_b64encode ( profile_data ) . decode ( [string] ) [EOL] del self . _attrs [ [string] ] [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : str ( self . _uuid ) , [string] : { [string] : type ( self ) . request_type , [string] : urlsafe_b64decode ( self . _attrs [ [string] ] ) , } } [EOL] [EOL] [EOL] class RemoveProfile ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ProfileInstallRemove } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( RemoveProfile , self ) . __init__ ( uuid ) [EOL] self . _attrs = { [string] : kwargs . get ( [string] ) } [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] return { [string] : str ( self . _uuid ) , [string] : { [string] : type ( self ) . request_type , [string] : self . _attrs . get ( [string] , None ) , } } [EOL] [EOL] [EOL] class CertificateList ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ProfileInspection } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( CertificateList , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] [EOL] class ProvisioningProfileList ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ProfileInspection } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( ProvisioningProfileList , self ) . __init__ ( uuid ) [EOL] self . _attrs = kwargs [EOL] [EOL] [EOL] class InstalledApplicationList ( Command ) : [EOL] request_type = [string] [EOL] require_access = set ( ) [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( InstalledApplicationList , self ) . __init__ ( uuid ) [EOL] self . _attrs = { } [EOL] self . _attrs . update ( kwargs ) [EOL] [EOL] @ property def managed_apps_only ( self ) : [EOL] return self . _attrs . get ( [string] , None ) [EOL] [EOL] @ managed_apps_only . setter def managed_apps_only ( self , value ) : [EOL] self . _attrs [ [string] ] = value [EOL] [EOL] @ property def identifiers ( self ) : [EOL] return self . _attrs . get ( [string] , None ) [EOL] [EOL] @ identifiers . setter def identifiers ( self , bundle_ids ) : [EOL] [docstring] [EOL] self . _attrs [ [string] ] = bundle_ids [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] command = self . _attrs [EOL] command . update ( { [string] : type ( self ) . request_type } ) [EOL] [EOL] return { [string] : str ( self . _uuid ) , [string] : command , } [EOL] [EOL] [EOL] class InstallApplication ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ManageApps } [EOL] [EOL] def __init__ ( self , uuid = None , ** kwargs ) : [EOL] super ( InstallApplication , self ) . __init__ ( uuid ) [EOL] self . _attrs = { } [EOL] if [string] in kwargs : [EOL] app = kwargs [ [string] ] [EOL] self . _attrs [ [string] ] = app . itunes_store_id [EOL] self . _attrs [ [string] ] = [number] [EOL] self . _attrs [ [string] ] = [string] [EOL] else : [EOL] self . _attrs . update ( kwargs ) [EOL] [EOL] @ property def itunes_store_id ( self ) : [EOL] return self . _attrs . get ( [string] , None ) [EOL] [EOL] @ itunes_store_id . setter def itunes_store_id ( self , id ) : [EOL] self . _attrs [ [string] ] = id [EOL] if [string] not in self . _attrs : [EOL] self . _attrs [ [string] ] = { } [EOL] if [string] not in self . _attrs [ [string] ] : [EOL] self . _attrs [ [string] ] [ [string] ] = [number] [EOL] [EOL] def to_dict ( self ) : [EOL] cmd = super ( InstallApplication , self ) . to_dict ( ) [EOL] cmd [ [string] ] . update ( self . _attrs ) [EOL] print ( cmd ) [EOL] return cmd [EOL] [EOL] [EOL] class ManagedApplicationList ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . ManageApps } [EOL] [EOL] [EOL] class RestartDevice ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . DeviceLockPasscodeRemoval } [EOL] require_platforms = { Platform . iOS : [string] } [EOL] [EOL] [EOL] class ShutDownDevice ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . DeviceLockPasscodeRemoval } [EOL] require_platforms = { Platform . iOS : [string] , Platform . macOS : [string] } [EOL] [EOL] [EOL] class EraseDevice ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . DeviceErase } [EOL] require_platforms = { Platform . iOS : [string] , Platform . macOS : [string] } [EOL] [EOL] [EOL] class RequestMirroring ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] , Platform . macOS : [string] } [EOL] [EOL] [EOL] class StopMirroring ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] , Platform . macOS : [string] } [EOL] require_supervised = True [EOL] [EOL] [EOL] class Restrictions ( Command ) : [EOL] request_type = [string] [EOL] require_access = { AccessRights . RestrictionQueries , AccessRights . ProfileInspection } [EOL] [EOL] [EOL] class UsersList ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] [EOL] [EOL] class LogOutUser ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] [EOL] [EOL] class DeleteUser ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] [EOL] [EOL] class EnableLostMode ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] require_supervised = True [EOL] [EOL] [EOL] class DisableLostMode ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] require_supervised = True [EOL] [EOL] [EOL] class DeviceLocation ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] require_supervised = True [EOL] [EOL] [EOL] class PlayLostModeSound ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . iOS : [string] } [EOL] require_supervised = True [EOL] [EOL] [EOL] class AvailableOSUpdates ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . macOS : [string] , Platform . iOS : [string] } [EOL] [EOL] [EOL] class Settings ( Command ) : [EOL] request_type = [string] [EOL] require_platforms = { Platform . macOS : [string] , Platform . iOS : [string] } [EOL] require_access = { AccessRights . ChangeSettings } [EOL] [EOL] def __init__ ( self , uuid = None , device_name = None , hostname = None , voice_roaming = None , personal_hotspot = None , wallpaper = None , data_roaming = None , bluetooth = None , ** kwargs ) : [EOL] super ( Settings , self ) . __init__ ( uuid ) [EOL] if [string] in kwargs : [EOL] self . _attrs [ [string] ] = kwargs [ [string] ] [EOL] else : [EOL] self . _attrs [ [string] ] = [ ] [EOL] [EOL] if device_name is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : device_name , } ) [EOL] [EOL] if hostname is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : hostname , } ) [EOL] [EOL] if voice_roaming is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : voice_roaming , } ) [EOL] [EOL] if personal_hotspot is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : personal_hotspot , } ) [EOL] [EOL] if data_roaming is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : data_roaming , } ) [EOL] [EOL] if bluetooth is not None : [EOL] self . _attrs [ [string] ] . append ( { [string] : [string] , [string] : bluetooth , } ) [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : str ( self . _uuid ) , [string] : { [string] : type ( self ) . request_type , [string] : self . _attrs [ [string] ] , } } [EOL]	one$ 0 0 0 $typing.Optional[uuid.UUID]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[uuid.UUID]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] from commandment . mdm import commands [EOL] from commandment . models import db , Device , Command [EOL] [EOL] [EOL] def queryresponses_to_query_set ( responses ) : [EOL] return { commands . DeviceInformation . Queries ( k ) : v for k , v in responses . items ( ) } [EOL] [EOL] [EOL] def queue_full_inventory ( device ) : [EOL] [docstring] [EOL] [comment] [EOL] di = commands . DeviceInformation . for_platform ( device . platform , device . os_version ) [EOL] db_command = Command . from_model ( di ) [EOL] db_command . device = device [EOL] db . session . add ( db_command ) [EOL] [EOL] [comment] [EOL] ial = commands . InstalledApplicationList ( ) [EOL] db_command_ial = Command . from_model ( ial ) [EOL] db_command_ial . device = device [EOL] db . session . add ( db_command_ial ) [EOL] [EOL] [comment] [EOL] cl = commands . CertificateList ( ) [EOL] dbc = Command . from_model ( cl ) [EOL] dbc . device = device [EOL] db . session . add ( dbc ) [EOL] [EOL] [comment] [EOL] si = commands . SecurityInfo ( ) [EOL] dbsi = Command . from_model ( si ) [EOL] dbsi . device = device [EOL] db . session . add ( dbsi ) [EOL] [EOL] [comment] [EOL] pl = commands . ProfileList ( ) [EOL] db_pl = Command . from_model ( pl ) [EOL] db_pl . device = device [EOL] db . session . add ( db_pl ) [EOL] [EOL] [comment] [EOL] au = commands . AvailableOSUpdates ( ) [EOL] au_pl = Command . from_model ( au ) [EOL] au_pl . device = device [EOL] db . session . add ( au_pl ) [EOL] [EOL] db . session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import commandment [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] from flask_rest_jsonapi . exceptions import ObjectNotFound [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from commandment . mdm . schema import CommandSchema [EOL] from commandment . models import db , Command , Device [EOL] [EOL] [EOL] class CommandsList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( Command ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Device ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Device ) . filter ( Device . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = CommandSchema [EOL] view_kwargs = True [EOL] data_layer = { [string] : db . session , [string] : Command , [string] : { [string] : query } } [EOL] [EOL] [EOL] class CommandDetail ( ResourceDetail ) : [EOL] schema = CommandSchema [EOL] data_layer = { [string] : db . session , [string] : Command , [string] : [string] } [EOL] [EOL] [EOL] class CommandRelationship ( ResourceRelationship ) : [EOL] schema = CommandSchema [EOL] data_layer = { [string] : db . session , [string] : Command } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any , Union [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] [docstring] [EOL] [EOL] from typing import Union , Any , Type , Callable , Dict , List [EOL] from flask import Flask , app , Blueprint , request , abort , current_app [EOL] from functools import wraps [EOL] import biplist [EOL] from commandment . models import db , Device , Command [EOL] from commandment . mdm import commands [EOL] [EOL] CommandHandler = Callable [ [ Command , Device , dict ] , None ] [EOL] CommandHandlers = Dict [ str , CommandHandler ] [EOL] [EOL] [EOL] class CommandRouter ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , app ) : [EOL] self . _app = app [EOL] self . _handlers = { } [EOL] [EOL] def handle ( self , command , device , response ) : [EOL] current_app . logger . debug ( [string] . format ( command . request_type ) ) [EOL] if command . request_type in self . _handlers : [EOL] return self . _handlers [ command . request_type ] ( command , device , response ) [EOL] else : [EOL] current_app . logger . warning ( [string] . format ( command . request_type ) ) [EOL] return None [EOL] [EOL] def route ( self , request_type ) : [EOL] [docstring] [EOL] handlers = self . _handlers [EOL] [comment] [EOL] [EOL] def decorator ( f ) : [EOL] handlers [ request_type ] = f [EOL] [EOL] @ wraps ( f ) def wrapped ( * args , ** kwargs ) : [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return wrapped [EOL] return decorator [EOL] [EOL] [EOL] class PlistRouter ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , app , url ) : [EOL] self . _app = app [EOL] app . add_url_rule ( url , view_func = self . view , methods = [ [string] ] ) [EOL] self . kv_routes = [ ] [EOL] [EOL] def view ( self ) : [EOL] current_app . logger . debug ( request . data ) [EOL] [EOL] try : [EOL] plist_data = biplist . readPlistFromString ( request . data ) [EOL] except biplist . NotBinaryPlistException : [EOL] abort ( [number] , [string] ) [EOL] except biplist . InvalidPlistException : [EOL] abort ( [number] , [string] ) [EOL] [EOL] for kvr in self . kv_routes : [EOL] if kvr [ [string] ] not in plist_data : [EOL] continue [EOL] [EOL] if plist_data [ kvr [ [string] ] ] == kvr [ [string] ] : [EOL] return kvr [ [string] ] ( plist_data ) [EOL] [EOL] abort ( [number] , [string] ) [EOL] [EOL] def route ( self , key , value ) : [EOL] [docstring] [EOL] def decorator ( f ) : [EOL] self . kv_routes . append ( dict ( key = key , value = value , handler = f ) ) [EOL] [EOL] @ wraps ( f ) def wrapped ( * args , ** kwargs ) : [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return wrapped [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import flask [EOL] import typing [EOL] import commandment [EOL] [docstring] [EOL] from flask import Blueprint , make_response , abort , jsonify , g , current_app [EOL] from sqlalchemy . orm . exc import NoResultFound , MultipleResultsFound [EOL] from commandment . mdm import CommandStatus [EOL] from commandment . mdm . commands import Command [EOL] from commandment . decorators import parse_plist_input_data [EOL] from commandment . cms . decorators import verify_mdm_signature [EOL] from commandment . mdm . util import queue_full_inventory [EOL] from commandment . models import DeviceUser [EOL] from commandment . pki . models import DeviceIdentityCertificate [EOL] from commandment . mdm . routers import CommandRouter , PlistRouter [EOL] from commandment . utils import plistify [EOL] import plistlib [EOL] import ssl [EOL] from commandment . apns . push import push_to_device [EOL] from datetime import datetime [EOL] from commandment . signals import device_enrolled [EOL] [EOL] [EOL] mdm_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] plr = PlistRouter ( mdm_app , [string] ) [EOL] command_router = CommandRouter ( mdm_app ) [EOL] from . handlers import * [EOL] [EOL] [EOL] @ plr . route ( [string] , [string] ) def authenticate ( plist_data ) : [EOL] [docstring] [EOL] current_app . logger . debug ( [string] , plist_data . get ( [string] , None ) ) [EOL] [comment] [EOL] try : [EOL] device = db . session . query ( Device ) . filter ( Device . udid == plist_data [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] [comment] [EOL] device = Device ( ) [EOL] db . session . add ( device ) [EOL] [EOL] device . udid = plist_data [ [string] ] [EOL] device . build_version = plist_data . get ( [string] ) [EOL] device . device_name = plist_data . get ( [string] ) [EOL] device . model = plist_data . get ( [string] ) [EOL] device . model_name = plist_data . get ( [string] ) [EOL] device . os_version = plist_data . get ( [string] ) [EOL] device . product_name = plist_data . get ( [string] ) [EOL] device . serial_number = plist_data . get ( [string] ) [EOL] device . topic = plist_data . get ( [string] ) [EOL] [EOL] [comment] [EOL] device . imei = plist_data . get ( [string] , None ) [EOL] device . meid = plist_data . get ( [string] , None ) [EOL] [EOL] device . last_seen = datetime . now ( ) [EOL] [EOL] [comment] [EOL] device . is_enrolled = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] device . token = None [EOL] [EOL] [comment] [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ plr . route ( [string] , [string] ) @ verify_mdm_signature def token_update ( plist_data ) : [EOL] current_app . logger . debug ( [string] , plist_data . get ( [string] , None ) ) [EOL] try : [EOL] device = db . session . query ( Device ) . filter ( Device . udid == plist_data [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] current_app . logger . debug ( [string] , plist_data [ [string] ] ) [EOL] return abort ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] if [string] in plist_data : [EOL] device_user = DeviceUser ( ) [EOL] return [string] [EOL] [EOL] if not device . token : [comment] [EOL] device . is_enrolled = True [EOL] [EOL] if hasattr ( g , [string] ) : [EOL] device_certificate = DeviceIdentityCertificate . from_crypto ( g . signers [ [number] ] ) [EOL] db . session . add ( device_certificate ) [EOL] device . certificate = device_certificate [EOL] else : [EOL] pass [comment] [EOL] [EOL] device_enrolled . send ( device ) [EOL] queue_full_inventory ( device ) [EOL] [EOL] device . tokenupdate_at = datetime . utcnow ( ) [EOL] device . push_magic = plist_data [ [string] ] [EOL] device . topic = plist_data [ [string] ] [EOL] device . token = plist_data [ [string] ] [EOL] device . unlock_token = plist_data . get ( [string] , None ) [EOL] device . last_seen = datetime . now ( ) [EOL] db . session . commit ( ) [EOL] [EOL] try : [EOL] response = push_to_device ( device ) [EOL] except ssl . SSLError : [EOL] return abort ( jsonify ( error = True , message = [string] ) ) [EOL] [EOL] current_app . logger . info ( [string] , response . status_code , response . reason , response . apns_id . decode ( [string] ) ) [EOL] device . last_push_at = datetime . utcnow ( ) [EOL] if response . status_code == [number] : [EOL] device . last_apns_id = response . apns_id [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return [string] [EOL] [EOL] [EOL] @ plr . route ( [string] , [string] ) def user_authenticate ( plist_data ) : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [EOL] @ plr . route ( [string] , [string] ) def check_out ( plist_data ) : [EOL] [docstring] [EOL] device_udid = plist_data [ [string] ] [EOL] try : [EOL] d = db . session . query ( Device ) . filter ( Device . udid == device_udid ) . one ( ) [EOL] except NoResultFound : [EOL] current_app . logger . warning ( [string] . format ( device_udid ) ) [EOL] return abort ( [number] , [string] ) [EOL] [EOL] except MultipleResultsFound : [EOL] current_app . logger . warning ( [string] . format ( device_udid ) ) [EOL] return abort ( [number] , [string] ) [EOL] [EOL] d . last_seen = datetime . utcnow ( ) [EOL] d . is_enrolled = False [EOL] [EOL] [comment] [EOL] d . token = None [EOL] d . push_magic = None [EOL] [EOL] db . session . commit ( ) [EOL] current_app . logger . debug ( [string] . format ( device_udid ) ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ mdm_app . route ( [string] , methods = [ [string] ] ) @ verify_mdm_signature @ parse_plist_input_data def mdm ( ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] device = db . session . query ( Device ) . filter ( Device . udid == g . plist_data [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] current_app . logger . info ( [string] , g . plist_data [ [string] ] ) [EOL] return abort ( [number] ) [comment] [EOL] [EOL] if [string] in g . plist_data : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] current_app . logger . warn ( [string] ) [EOL] return [string] [EOL] [EOL] if [string] not in g . plist_data : [EOL] current_app . logger . error ( [string] % device . id ) [EOL] return abort ( [number] , [string] ) [EOL] else : [EOL] status = CommandStatus ( g . plist_data [ [string] ] ) [EOL] [EOL] current_app . logger . info ( [string] , device . id , device . udid , status ) [EOL] device . last_seen = datetime . utcnow ( ) [EOL] db . session . commit ( ) [EOL] [EOL] if current_app . config [ [string] ] : [EOL] try : [EOL] print ( g . plist_data ) [EOL] except UnicodeEncodeError : [EOL] print ( [string] ) [EOL] [EOL] if status != CommandStatus . Idle : [comment] [EOL] if [string] not in g . plist_data : [EOL] current_app . logger . error ( [string] ) [EOL] abort ( [number] , [string] ) [EOL] try : [EOL] command = DBCommand . find_by_uuid ( g . plist_data [ [string] ] ) [EOL] command . status = status [EOL] command . acknowledged_at = datetime . utcnow ( ) [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] command_router . handle ( command , device , g . plist_data ) [EOL] [EOL] except NoResultFound : [EOL] current_app . logger . warning ( [string] , g . plist_data [ [string] ] ) [EOL] [EOL] if status == CommandStatus . NotNow : [EOL] current_app . logger . warn ( [string] ) [comment] [EOL] [EOL] command = DBCommand . next_command ( device ) [EOL] [EOL] if not command : [EOL] current_app . logger . info ( [string] , device . id ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cmd = Command . new_request_type ( command . request_type , command . parameters , command . uuid ) [EOL] [EOL] [EOL] [comment] [EOL] output_dict = cmd . to_dict ( ) [EOL] [EOL] current_app . logger . info ( [string] , cmd . request_type , command . request_type , device . id ) [EOL] [EOL] current_app . logger . debug ( output_dict ) [EOL] [EOL] command . status = CommandStatus . Sent [EOL] command . sent_at = datetime . utcnow ( ) [EOL] db . session . commit ( ) [EOL] [EOL] return plistify ( output_dict ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.PlistRouter$ 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 $commandment.mdm.routers.CommandRouter$ 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.PlistRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.PlistRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.PlistRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.PlistRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.mdm.routers.CommandRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import commandment [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] [EOL] [EOL] class CommandSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] uuid = fields . Str ( dump_only = True ) [EOL] request_type = fields . Str ( ) [EOL] status = fields . Str ( ) [EOL] queued_at = fields . DateTime ( ) [EOL] sent_at = fields . DateTime ( ) [EOL] acknowledged_at = fields . DateTime ( ) [EOL] after = fields . DateTime ( ) [EOL] ttl = fields . Int ( ) [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , type_ = [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.mdm.schema.CommandSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Optional [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] from typing import Optional [EOL] from marshmallow import Schema , fields , post_load , ValidationError [EOL] from marshmallow_enum import EnumField [EOL] from enum import IntFlag [EOL] [EOL] import commandment . inventory . models [EOL] from . . import models [EOL] from commandment . inventory import models as inventory_models [EOL] [EOL] [EOL] class ErrorChainItem ( Schema ) : [EOL] [docstring] [EOL] LocalizedDescription = fields . String ( ) [EOL] USEnglishDescription = fields . String ( ) [EOL] ErrorDomain = fields . String ( ) [EOL] ErrorCode = fields . Number ( ) [EOL] [EOL] [EOL] class CommandResponse ( Schema ) : [EOL] [docstring] [EOL] Status = fields . String ( ) [EOL] UDID = fields . String ( ) [EOL] CommandUUID = fields . UUID ( ) [EOL] ErrorChain = fields . Nested ( ErrorChainItem , many = True ) [EOL] [EOL] [EOL] class OrganizationInfo ( Schema ) : [EOL] pass [EOL] [EOL] [EOL] class AutoSetupAdminAccount ( Schema ) : [EOL] GUID = fields . UUID ( ) [EOL] shortName = fields . String ( ) [EOL] [EOL] [EOL] class OSUpdateSettings ( Schema ) : [EOL] [docstring] [EOL] CatalogURL = fields . String ( attribute = [string] ) [EOL] IsDefaultCatalog = fields . Boolean ( attribute = [string] ) [EOL] PreviousScanDate = fields . Date ( attribute = [string] ) [EOL] PreviousScanResult = fields . String ( attribute = [string] ) [EOL] PerformPeriodicCheck = fields . Boolean ( attribute = [string] ) [EOL] AutomaticCheckEnabled = fields . Boolean ( attribute = [string] ) [EOL] BackgroundDownloadEnabled = fields . Boolean ( attribute = [string] ) [EOL] AutomaticAppInstallationEnabled = fields . Boolean ( attribute = [string] ) [EOL] AutomaticOSInstallationEnabled = fields . Boolean ( attribute = [string] ) [EOL] AutomaticSecurityUpdatesEnabled = fields . Boolean ( attribute = [string] ) [EOL] [EOL] [EOL] class DeviceInformation ( Schema ) : [EOL] [comment] [EOL] UDID = fields . String ( attribute = [string] ) [EOL] [comment] [EOL] DeviceID = fields . String ( attribute = [string] ) [EOL] OrganizationInfo = fields . Nested ( OrganizationInfo ) [EOL] LastCloudBackupDate = fields . Date ( attribute = [string] ) [EOL] AwaitingConfiguration = fields . Boolean ( attribute = [string] ) [EOL] AutoSetupAdminAccounts = fields . Nested ( AutoSetupAdminAccount , many = True ) [EOL] [EOL] [comment] [EOL] iTunesStoreAccountIsActive = fields . Boolean ( attribute = [string] ) [EOL] iTunesStoreAccountHash = fields . String ( attribute = [string] ) [EOL] [EOL] [comment] [EOL] DeviceName = fields . String ( attribute = [string] ) [EOL] OSVersion = fields . String ( attribute = [string] ) [EOL] BuildVersion = fields . String ( attribute = [string] ) [EOL] ModelName = fields . String ( attribute = [string] ) [EOL] Model = fields . String ( attribute = [string] ) [EOL] ProductName = fields . String ( attribute = [string] ) [EOL] SerialNumber = fields . String ( attribute = [string] ) [EOL] DeviceCapacity = fields . Float ( attribute = [string] ) [EOL] AvailableDeviceCapacity = fields . Float ( attribute = [string] ) [EOL] BatteryLevel = fields . Float ( attribute = [string] ) [EOL] CellularTechnology = fields . Integer ( attribute = [string] ) [EOL] IMEI = fields . String ( attribute = [string] ) [EOL] MEID = fields . String ( attribute = [string] ) [EOL] ModemFirmwareVersion = fields . String ( attribute = [string] ) [EOL] IsSupervised = fields . Boolean ( attribute = [string] ) [EOL] IsDeviceLocatorServiceEnabled = fields . Boolean ( attribute = [string] ) [EOL] IsActivationLockEnabled = fields . Boolean ( attribute = [string] ) [EOL] IsDoNotDisturbInEffect = fields . Boolean ( attribute = [string] ) [EOL] EASDeviceIdentifier = fields . String ( attribute = [string] ) [EOL] IsCloudBackupEnabled = fields . Boolean ( attribute = [string] ) [EOL] OSUpdateSettings = fields . Nested ( OSUpdateSettings , attribute = [string] ) [comment] [EOL] LocalHostName = fields . String ( attribute = [string] ) [EOL] HostName = fields . String ( attribute = [string] ) [EOL] SystemIntegrityProtectionEnabled = fields . Boolean ( attribute = [string] ) [EOL] [comment] [EOL] [comment] [EOL] IsMDMLostModeEnabled = fields . Boolean ( attribute = [string] ) [EOL] MaximumResidentUsers = fields . Integer ( attribute = [string] ) [EOL] [EOL] [comment] [EOL] ICCID = fields . String ( attribute = [string] ) [EOL] BluetoothMAC = fields . String ( attribute = [string] ) [EOL] WiFiMAC = fields . String ( attribute = [string] ) [EOL] EthernetMACs = fields . String ( attribute = [string] , many = True ) [EOL] CurrentCarrierNetwork = fields . String ( attribute = [string] ) [EOL] SIMCarrierNetwork = fields . String ( attribute = [string] ) [EOL] SubscriberCarrierNetwork = fields . String ( attribute = [string] ) [EOL] CarrierSettingsVersion = fields . String ( attribute = [string] ) [EOL] PhoneNumber = fields . String ( attribute = [string] ) [EOL] VoiceRoamingEnabled = fields . Boolean ( attribute = [string] ) [EOL] DataRoamingEnabled = fields . Boolean ( attribute = [string] ) [EOL] IsRoaming = fields . Boolean ( attribute = [string] ) [EOL] PersonalHotspotEnabled = fields . Boolean ( attribute = [string] ) [EOL] SubscriberMCC = fields . String ( attribute = [string] ) [EOL] SubscriberMNC = fields . String ( attribute = [string] ) [EOL] CurrentMCC = fields . String ( attribute = [string] ) [EOL] CurrentMNC = fields . String ( attribute = [string] ) [EOL] [EOL] @ post_load def normalize_osu ( self , data ) : [EOL] print ( data ) [EOL] for k , v in data . get ( [string] , { } ) . items ( ) : [EOL] setattr ( data , k , v ) [EOL] return data [EOL] [EOL] [EOL] class DeviceInformationResponse ( CommandResponse ) : [EOL] QueryResponses = fields . Nested ( DeviceInformation ) [EOL] [EOL] [EOL] class InstallApplicationResponse ( CommandResponse ) : [EOL] Identifier = fields . String ( ) [EOL] State = fields . String ( ) [EOL] [EOL] [EOL] class HardwareEncryptionCaps ( IntFlag ) : [EOL] Nothing = [number] [EOL] BlockLevelEncryption = [number] [EOL] FileLevelEncryption = [number] [EOL] [EOL] All = BlockLevelEncryption | FileLevelEncryption [EOL] [EOL] [EOL] class FirewallApplicationItem ( Schema ) : [EOL] BundleID = fields . String ( ) [EOL] Allowed = fields . Boolean ( ) [EOL] Name = fields . String ( ) [EOL] [EOL] [EOL] class FirewallSettings ( Schema ) : [EOL] FirewallEnabled = fields . Boolean ( ) [EOL] BlockAllIncoming = fields . Boolean ( ) [EOL] StealthMode = fields . Boolean ( ) [EOL] Applications = fields . Nested ( FirewallApplicationItem , many = True ) [EOL] [EOL] [EOL] class FirmwarePasswordStatus ( Schema ) : [EOL] PasswordExists = fields . Boolean ( ) [EOL] ChangePending = fields . Boolean ( ) [EOL] AllowOroms = fields . Boolean ( ) [EOL] [EOL] [EOL] class ManagementStatus ( Schema ) : [EOL] EnrolledViaDEP = fields . Boolean ( ) [EOL] UserApprovedEnrollment = fields . Boolean ( ) [EOL] [EOL] [EOL] class SecurityInfoResponse ( CommandResponse ) : [EOL] HardwareEncryptionCaps = EnumField ( HardwareEncryptionCaps ) [EOL] PasscodePresent = fields . Boolean ( ) [EOL] PasscodeCompliant = fields . Boolean ( ) [EOL] PasscodeCompliantWithProfiles = fields . Boolean ( ) [EOL] PasscodeLockGracePeriodEnforced = fields . Integer ( ) [EOL] FDE_Enabled = fields . Boolean ( ) [EOL] FDE_HasPersonalRecoveryKey = fields . Boolean ( ) [EOL] FDE_HasInstitutionalRecoveryKey = fields . Boolean ( ) [EOL] FDE_PersonalRecoveryKeyCMS = fields . String ( ) [EOL] FDE_PersonalRecoveryKeyDeviceKey = fields . String ( ) [EOL] FirewallSettings = fields . Nested ( FirewallSettings ) [EOL] SystemIntegrityProtectionEnabled = fields . Boolean ( ) [EOL] FirmwarePasswordStatus = fields . Nested ( FirmwarePasswordStatus ) [EOL] ManagementStatus = fields . Nested ( ManagementStatus ) [EOL] [EOL] [EOL] class InstalledApplicationItem ( Schema ) : [EOL] AdHocCodeSigned = fields . Boolean ( attribute = [string] ) [EOL] AppStoreVendable = fields . Boolean ( attribute = [string] ) [EOL] BetaApp = fields . Boolean ( attribute = [string] ) [EOL] DeviceBasedVPP = fields . Boolean ( attribute = [string] ) [EOL] HasUpdateAvailable = fields . Boolean ( attribute = [string] ) [EOL] Installing = fields . Boolean ( attribute = [string] ) [EOL] Identifier = fields . String ( attribute = [string] ) [EOL] Version = fields . String ( attribute = [string] ) [EOL] ShortVersion = fields . String ( attribute = [string] ) [EOL] Name = fields . String ( attribute = [string] ) [EOL] BundleSize = fields . Integer ( attribute = [string] ) [EOL] DynamicSize = fields . Integer ( attribute = [string] ) [EOL] IsValidated = fields . Boolean ( attribute = [string] ) [EOL] ExternalVersionIdentifier = fields . Integer ( attribute = [string] ) [comment] [EOL] [EOL] @ post_load ( pass_many = False ) def make_installed_application ( self , data ) : [EOL] return inventory_models . InstalledApplication ( ** data ) [EOL] [EOL] [EOL] class InstalledApplicationListResponse ( CommandResponse ) : [EOL] InstalledApplicationList = fields . Nested ( InstalledApplicationItem , many = True ) [EOL] [EOL] [EOL] class CertificateListItem ( Schema ) : [EOL] CommonName = fields . String ( ) [EOL] IsIdentity = fields . Boolean ( ) [EOL] Data = fields . String ( ) [EOL] [EOL] @ post_load def make_installed_certificate ( self , data ) : [EOL] return inventory_models . InstalledCertificate ( ** data ) [EOL] [EOL] [EOL] class CertificateListResponse ( CommandResponse ) : [EOL] CertificateList = fields . Nested ( CertificateListItem , many = True ) [EOL] [EOL] [EOL] class AvailableOSUpdate ( Schema ) : [EOL] AllowsInstallLater = fields . Boolean ( attribute = [string] ) [EOL] Build = fields . String ( attribute = [string] ) [EOL] DownloadSize = fields . Number ( attribute = [string] ) [EOL] AppIdentifiersToClose = fields . List ( fields . String , attribute = [string] , many = True ) [EOL] HumanReadableName = fields . String ( attribute = [string] ) [EOL] HumanReadableNameLocale = fields . String ( attribute = [string] ) [EOL] InstallSize = fields . Number ( attribute = [string] ) [EOL] IsConfigDataUpdate = fields . Boolean ( attribute = [string] ) [EOL] IsCritical = fields . Boolean ( attribute = [string] ) [EOL] IsFirmwareUpdate = fields . Boolean ( attribute = [string] ) [EOL] MetadataURL = fields . String ( attribute = [string] ) [EOL] ProductKey = fields . String ( attribute = [string] ) [EOL] ProductName = fields . String ( attribute = [string] ) [EOL] RestartRequired = fields . Boolean ( attribute = [string] ) [EOL] Version = fields . String ( attribute = [string] ) [EOL] [EOL] @ post_load def make_available_os_update ( self , data ) : [EOL] return commandment . inventory . models . AvailableOSUpdate ( ** data ) [EOL] [EOL] [EOL] class AvailableOSUpdateListResponse ( CommandResponse ) : [EOL] AvailableOSUpdates = fields . Nested ( AvailableOSUpdate , many = True ) [EOL] [EOL] [EOL] class ProfileListPayloadItem ( Schema ) : [EOL] PayloadDescription = fields . String ( attribute = [string] ) [EOL] PayloadDisplayName = fields . String ( attribute = [string] ) [EOL] PayloadIdentifier = fields . String ( attribute = [string] ) [EOL] PayloadOrganization = fields . String ( attribute = [string] ) [EOL] PayloadType = fields . String ( attribute = [string] ) [EOL] PayloadUUID = fields . UUID ( attribute = [string] ) [EOL] [comment] [EOL] [EOL] @ post_load def make_installed_payload ( self , data ) : [EOL] return inventory_models . InstalledPayload ( ** data ) [EOL] [EOL] [EOL] class ProfileListItem ( Schema ) : [EOL] HasRemovalPasscode = fields . Boolean ( attribute = [string] ) [EOL] IsEncrypted = fields . Boolean ( attribute = [string] ) [EOL] IsManaged = fields . Boolean ( attribute = [string] ) [EOL] PayloadDescription = fields . String ( attribute = [string] ) [EOL] PayloadDisplayName = fields . String ( attribute = [string] ) [EOL] PayloadIdentifier = fields . String ( attribute = [string] ) [EOL] PayloadOrganization = fields . String ( attribute = [string] ) [EOL] PayloadRemovalDisallowed = fields . Boolean ( attribute = [string] ) [EOL] PayloadUUID = fields . UUID ( attribute = [string] ) [EOL] [comment] [EOL] [comment] [EOL] PayloadContent = fields . Nested ( ProfileListPayloadItem , attribute = [string] , many = True ) [EOL] [EOL] @ post_load def make_installed_profile ( self , data ) : [EOL] return inventory_models . InstalledProfile ( ** data ) [EOL] [EOL] [EOL] class ProfileListResponse ( CommandResponse ) : [EOL] ProfileList = fields . Nested ( ProfileListItem , many = True ) [EOL] [EOL]	
import flask [EOL] from flask import Blueprint [EOL] from commandment . mdm . resources import CommandsList , CommandDetail [EOL] from commandment . api . app_jsonapi import api [EOL] [EOL] api_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [comment] [EOL] api . route ( CommandsList , [string] , [string] , [string] ) [EOL] api . route ( CommandDetail , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from functools import wraps [EOL] [EOL] [EOL] def handle_error_status ( func ) : [EOL] [docstring] [EOL] @ wraps ( func ) def handler ( * args , ** kwargs ) : [EOL] return func ( * args , ** kwargs ) [EOL] return handler [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum [EOL] [EOL] [EOL] class ManagedAppStatus ( Enum ) : [EOL] [docstring] [EOL] NeedsRedemption = [string] [EOL] Redeeming = [string] [EOL] Prompting = [string] [EOL] PromptingForLogin = [string] [EOL] Installing = [string] [EOL] ValidatingPurchase = [string] [EOL] Managed = [string] [EOL] ManagedButUninstalled = [string] [EOL] PromptingForUpdate = [string] [EOL] PromptingForUpdateLogin = [string] [EOL] PromptingForManagement = [string] [EOL] Updating = [string] [EOL] ValidatingUpdate = [string] [EOL] Unknown = [string] [EOL] [EOL] [comment] [EOL] UserInstalledApp = [string] [EOL] UserRejected = [string] [EOL] UpdateRejected = [string] [EOL] ManagementRejected = [string] [EOL] Failed = [string] [EOL] [EOL] [comment] [EOL] Queued = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import commandment [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] [EOL] [EOL] class ApplicationSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] display_name = fields . Str ( ) [EOL] description = fields . Str ( ) [EOL] version = fields . Str ( ) [EOL] itunes_store_id = fields . Int ( ) [EOL] bundle_id = fields . Str ( ) [EOL] purchase_method = fields . Int ( ) [EOL] manifest_url = fields . Url ( ) [EOL] management_flags = fields . Int ( ) [EOL] change_management_state = fields . Str ( ) [EOL] [EOL] [comment] [EOL] country = fields . Str ( ) [EOL] artist_id = fields . Int ( ) [EOL] artist_name = fields . Str ( ) [EOL] artist_view_url = fields . Url ( ) [EOL] artwork_url60 = fields . Url ( ) [EOL] artwork_url100 = fields . Url ( ) [EOL] artwork_url512 = fields . Url ( ) [EOL] release_notes = fields . Str ( ) [EOL] release_date = fields . DateTime ( ) [EOL] minimum_os_version = fields . Str ( ) [EOL] file_size_bytes = fields . Number ( ) [EOL] [EOL] [comment] [EOL] discriminator = fields . Str ( ) [EOL] [EOL] tags = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] [EOL] class ManagedApplicationSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] bundle_id = fields . Str ( ) [EOL] external_version_id = fields . Int ( ) [EOL] has_configuration = fields . Bool ( ) [EOL] has_feedback = fields . Bool ( ) [EOL] is_validated = fields . Bool ( ) [EOL] management_flags = fields . Int ( ) [EOL] status = fields . Str ( ) [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = False , schema = [string] , type_ = [string] , ) [EOL] [EOL] [EOL] class ApplicationManifestSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] checksums = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] full_size_image_url = fields . Url ( ) [EOL] display_image_url = fields . Url ( ) [EOL] [EOL] [EOL] class ApplicationManifestChecksumSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ManagedApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationManifestSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationManifestSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.apps.schema.ApplicationManifestSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] from flask import Blueprint , request [EOL] from flask_rest_jsonapi import Api [EOL] [EOL] from commandment . apps . resources import ApplicationDetail , ApplicationList , ApplicationRelationship , ManagedApplicationList , ManagedApplicationDetail , ManagedApplicationRelationship , MASApplicationList , MASApplicationDetail , IOSApplicationList , IOSApplicationDetail [EOL] [EOL] api_app = Blueprint ( [string] , __name__ ) [EOL] api = Api ( blueprint = api_app ) [EOL] [EOL] api . route ( ApplicationList , [string] , [string] ) [EOL] api . route ( ApplicationDetail , [string] , [string] ) [EOL] api . route ( ApplicationRelationship , [string] , [string] ) [EOL] [EOL] api . route ( ManagedApplicationList , [string] , [string] , [string] ) [EOL] api . route ( ManagedApplicationDetail , [string] , [string] ) [EOL] api . route ( ManagedApplicationRelationship , [string] , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] api . route ( MASApplicationList , [string] , [string] ) [EOL] api . route ( MASApplicationDetail , [string] , [string] ) [EOL] [EOL] api . route ( IOSApplicationList , [string] , [string] ) [EOL] api . route ( IOSApplicationDetail , [string] , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import commandment [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] from flask_rest_jsonapi . exceptions import ObjectNotFound [EOL] from commandment . apps . schema import ApplicationManifestSchema , ApplicationSchema , ManagedApplicationSchema [EOL] from commandment . apps . models import db , ApplicationManifest , Application , ManagedApplication , AppstoreMacApplication , AppstoreiOSApplication , EnterpriseMacApplication , EnterpriseiOSApplication [EOL] [EOL] [EOL] class ApplicationManifestDetail ( ResourceDetail ) : [EOL] schema = ApplicationManifestSchema [EOL] data_layer = { [string] : db . session , [string] : ApplicationManifest , [string] : [string] } [EOL] [EOL] [EOL] class ApplicationDetail ( ResourceDetail ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : Application , [string] : [string] } [EOL] [EOL] [EOL] class ApplicationList ( ResourceList ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : Application , [string] : [string] } [EOL] [EOL] [EOL] class ApplicationRelationship ( ResourceRelationship ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : Application , [string] : [string] } [EOL] [EOL] [EOL] class MASApplicationDetail ( ResourceDetail ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : AppstoreMacApplication , [string] : [string] } [EOL] [EOL] [EOL] class MASApplicationList ( ResourceList ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : AppstoreMacApplication , [string] : [string] } [EOL] [EOL] [EOL] class IOSApplicationDetail ( ResourceDetail ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : AppstoreiOSApplication , [string] : [string] } [EOL] [EOL] [EOL] class IOSApplicationList ( ResourceList ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : AppstoreiOSApplication , [string] : [string] } [EOL] [EOL] [EOL] class EnterpriseMacApplicationList ( ResourceList ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : EnterpriseMacApplication , [string] : [string] } [EOL] [EOL] [EOL] class EnterpriseMacApplicationDetail ( ResourceDetail ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : EnterpriseMacApplication , [string] : [string] } [EOL] [EOL] [EOL] class EnterpriseIosApplicationList ( ResourceList ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : EnterpriseiOSApplication , [string] : [string] } [EOL] [EOL] [EOL] class EnterpriseIosApplicationDetail ( ResourceDetail ) : [EOL] schema = ApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : EnterpriseiOSApplication , [string] : [string] } [EOL] [EOL] [EOL] class ManagedApplicationDetail ( ResourceDetail ) : [EOL] schema = ManagedApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : ManagedApplication , [string] : [string] , } [EOL] [EOL] [EOL] class ManagedApplicationList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( ManagedApplication ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Application ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Application ) . filter ( Application . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = ManagedApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : ManagedApplication , [string] : [string] , [string] : { [string] : query } , } [EOL] [EOL] [EOL] class ManagedApplicationRelationship ( ResourceRelationship ) : [EOL] schema = ManagedApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : ManagedApplication , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import commandment [EOL] [docstring] [EOL] from flask_rest_jsonapi . exceptions import ObjectNotFound [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from . schema import DeviceSchema , CertificateSchema , PrivateKeySchema , CertificateSigningRequestSchema , OrganizationSchema , TagSchema [EOL] from commandment . models import db , Device , Organization , Tag , Command [EOL] from commandment . pki . models import Certificate , CertificateSigningRequest , SSLCertificate , PushCertificate , CACertificate [EOL] [EOL] from commandment . mdm import commands as mdmcommands , CommandType [EOL] from commandment . auth import oauth2 [EOL] [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] [EOL] [EOL] class DeviceList ( ResourceList ) : [EOL] [comment] [EOL] schema = DeviceSchema [EOL] data_layer = { [string] : db . session , [string] : Device } [EOL] [EOL] [EOL] class DeviceDetail ( ResourceDetail ) : [EOL] schema = DeviceSchema [EOL] data_layer = { [string] : db . session , [string] : Device , [string] : [string] } [EOL] [EOL] def before_patch ( self , args , kwargs , data = None ) : [EOL] [docstring] [EOL] if [string] in data or [string] in data : [EOL] [comment] [EOL] cmd = mdmcommands . Command . new_request_type ( [string] , { } ) [EOL] [EOL] if [string] in data : [EOL] cmd . device_name = data [ [string] ] [EOL] del data [ [string] ] [EOL] [EOL] if [string] in data : [EOL] cmd . hostname = data [ [string] ] [EOL] del data [ [string] ] [EOL] [EOL] model = Command . from_model ( cmd ) [EOL] self . data_layer [ [string] ] . add ( model ) [EOL] [EOL] [EOL] class DeviceRelationship ( ResourceRelationship ) : [EOL] schema = DeviceSchema [EOL] data_layer = { [string] : db . session , [string] : Device , [string] : [string] } [EOL] [EOL] def before_post ( self , args , kwargs , json_data = None ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def before_patch ( self , args , kwargs , json_data = None ) : [EOL] pass [EOL] [EOL] def after_patch ( self , result ) : [EOL] [docstring] [EOL] pass [EOL] [comment] [EOL] [EOL] [EOL] [EOL] class CertificatesList ( ResourceList ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : Certificate } [EOL] [EOL] [EOL] class CertificateDetail ( ResourceDetail ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : Certificate } [EOL] [EOL] [EOL] class CertificateTypeDetail ( ResourceDetail ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : Certificate } [EOL] [EOL] [EOL] class PrivateKeyDetail ( ResourceDetail ) : [EOL] schema = PrivateKeySchema [EOL] data_layer = { [string] : db . session , [string] : Certificate } [EOL] [EOL] [EOL] class CertificateSigningRequestList ( ResourceList ) : [EOL] schema = CertificateSigningRequestSchema [EOL] data_layer = { [string] : db . session , [string] : CertificateSigningRequest , } [EOL] [EOL] [EOL] class CertificateSigningRequestDetail ( ResourceDetail ) : [EOL] schema = CertificateSigningRequestSchema [EOL] data_layer = { [string] : db . session , [string] : CertificateSigningRequest } [EOL] [EOL] [EOL] class PushCertificateList ( ResourceList ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : PushCertificate } [EOL] [EOL] [EOL] class CACertificateList ( ResourceList ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : CACertificate } [EOL] [EOL] [EOL] class SSLCertificatesList ( ResourceList ) : [EOL] schema = CertificateSchema [EOL] data_layer = { [string] : db . session , [string] : SSLCertificate } [EOL] [EOL] [EOL] class OrganizationList ( ResourceList ) : [EOL] schema = OrganizationSchema [EOL] data_layer = { [string] : db . session , [string] : Organization } [EOL] [EOL] [EOL] class OrganizationDetail ( ResourceDetail ) : [EOL] schema = OrganizationSchema [EOL] data_layer = { [string] : db . session , [string] : Organization } [EOL] [EOL] [EOL] class TagsList ( ResourceList ) : [EOL] schema = TagSchema [EOL] data_layer = { [string] : db . session , [string] : Tag } [EOL] view_kwargs = True [EOL] [EOL] [EOL] class TagDetail ( ResourceDetail ) : [EOL] schema = TagSchema [EOL] data_layer = { [string] : db . session , [string] : Tag , [string] : [string] } [EOL] [EOL] [EOL] class TagRelationship ( ResourceRelationship ) : [EOL] schema = TagSchema [EOL] data_layer = { [string] : db . session , [string] : Tag , [string] : [string] } [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import commandment [EOL] [docstring] [EOL] from flask import Blueprint , abort , jsonify , request [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from commandment . models import db , Organization , SCEPConfig [EOL] from . schema import OrganizationFlatSchema , SCEPConfigFlatSchema [EOL] from commandment . profiles . schema import ProfileSchema [EOL] [EOL] configuration_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ configuration_app . route ( [string] , methods = [ [string] ] ) def organization_get ( ) : [EOL] [docstring] [EOL] try : [EOL] o = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] schema = OrganizationFlatSchema ( ) [EOL] dump = schema . dumps ( o ) [EOL] [EOL] return dump . data , [number] , { [string] : [string] } [EOL] [EOL] [EOL] @ configuration_app . route ( [string] , methods = [ [string] , [string] ] ) def organization_post ( ) : [EOL] [docstring] [EOL] schema = OrganizationFlatSchema ( ) [EOL] data = request . data [EOL] result = schema . loads ( data ) [EOL] db . session . commit ( ) [EOL] [EOL] dump = schema . dumps ( result . data ) [EOL] [EOL] return dump . data , [number] , { [string] : [string] } [EOL] [EOL] [EOL] @ configuration_app . route ( [string] , methods = [ [string] ] ) def scep_get ( ) : [EOL] [docstring] [EOL] try : [EOL] c = db . session . query ( SCEPConfig ) . one ( ) [EOL] except NoResultFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] schema = SCEPConfigFlatSchema ( ) [EOL] dump = schema . dumps ( c ) [EOL] [EOL] return dump . data , [number] , { [string] : [string] } [EOL] [EOL] [EOL] @ configuration_app . route ( [string] , methods = [ [string] , [string] ] ) def scep_post ( ) : [EOL] [docstring] [EOL] schema = SCEPConfigFlatSchema ( ) [EOL] data = request . data [EOL] result = schema . loads ( data ) [EOL] db . session . commit ( ) [EOL] [EOL] dump = schema . dumps ( result . data ) [EOL] [EOL] return dump . data , [number] , { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] [docstring] [EOL] from flask import Blueprint [EOL] from flask_rest_jsonapi import Api [EOL] from . resources import CertificatesList , CertificateDetail , CertificateSigningRequestList , CertificateSigningRequestDetail , PushCertificateList , SSLCertificatesList , CACertificateList , PrivateKeyDetail , DeviceList , DeviceDetail , DeviceRelationship , TagsList , TagDetail , TagRelationship [EOL] [EOL] [EOL] [comment] [EOL] [EOL] api_app = Blueprint ( [string] , __name__ ) [EOL] api = Api ( blueprint = api_app ) [EOL] [EOL] [comment] [EOL] api . route ( CertificatesList , [string] , [string] ) [EOL] api . route ( CertificateDetail , [string] , [string] ) [EOL] [EOL] api . route ( CertificateSigningRequestList , [string] , [string] ) [EOL] api . route ( CertificateSigningRequestDetail , [string] , [string] ) [EOL] api . route ( PushCertificateList , [string] , [string] ) [EOL] api . route ( SSLCertificatesList , [string] , [string] ) [EOL] api . route ( CACertificateList , [string] , [string] ) [EOL] api . route ( PrivateKeyDetail , [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] api . route ( DeviceList , [string] , [string] , [string] , [string] , [string] ) [EOL] api . route ( DeviceDetail , [string] , [string] ) [EOL] api . route ( DeviceRelationship , [string] , [string] ) [EOL] api . route ( DeviceRelationship , [string] , [string] ) [EOL] api . route ( DeviceRelationship , [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] api . route ( TagsList , [string] , [string] , [string] ) [EOL] api . route ( TagDetail , [string] , [string] ) [EOL] api . route ( TagRelationship , [string] , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] [docstring] [EOL] [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] from marshmallow import Schema as FlatSchema , post_load [EOL] from commandment . models import db , Organization , SCEPConfig [EOL] [EOL] [EOL] class DeviceSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] udid = fields . Str ( dump_only = True ) [EOL] topic = fields . Str ( ) [EOL] [EOL] build_version = fields . Str ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] device_name = fields . Str ( ) [EOL] hostname = fields . Str ( ) [EOL] local_hostname = fields . Str ( dump_only = True ) [EOL] [EOL] model = fields . Str ( ) [EOL] model_name = fields . Str ( ) [EOL] os_version = fields . Str ( ) [EOL] product_name = fields . Str ( ) [EOL] serial_number = fields . Str ( ) [EOL] [EOL] awaiting_configuration = fields . Bool ( ) [EOL] last_seen = fields . DateTime ( dump_only = True ) [EOL] [EOL] available_device_capacity = fields . Float ( ) [EOL] device_capacity = fields . Float ( ) [EOL] wifi_mac = fields . Str ( ) [EOL] bluetooth_mac = fields . Str ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tokenupdate_at = fields . DateTime ( ) [EOL] [EOL] [comment] [EOL] passcode_present = fields . Bool ( ) [EOL] passcode_compliant = fields . Bool ( ) [EOL] passcode_compliant_with_profiles = fields . Bool ( ) [EOL] fde_enabled = fields . Bool ( ) [EOL] fde_has_prk = fields . Bool ( ) [EOL] fde_has_irk = fields . Bool ( ) [EOL] firewall_enabled = fields . Bool ( ) [EOL] block_all_incoming = fields . Bool ( ) [EOL] stealth_mode_enabled = fields . Bool ( ) [EOL] sip_enabled = fields . Bool ( ) [EOL] [EOL] battery_level = fields . Float ( dump_only = True ) [EOL] imei = fields . Str ( dump_only = True ) [EOL] [EOL] is_cloud_backup_enabled = fields . Bool ( dump_only = True ) [EOL] itunes_store_account_is_active = fields . Bool ( dump_only = True ) [EOL] [EOL] last_cloud_backup_date = fields . DateTime ( dump_only = True ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] is_dep = fields . Bool ( ) [EOL] description = fields . Str ( dump_only = True ) [EOL] color = fields . Str ( dump_only = True ) [EOL] asset_tag = fields . Str ( dump_only = True ) [EOL] profile_status = fields . Str ( dump_only = True ) [EOL] profile_uuid = fields . UUID ( dump_only = True ) [EOL] profile_assign_time = fields . DateTime ( dump_only = True ) [EOL] profile_push_time = fields . DateTime ( dump_only = True ) [EOL] device_assigned_date = fields . DateTime ( dump_only = True ) [EOL] device_assigned_by = fields . Str ( dump_only = True ) [EOL] os = fields . Str ( dump_only = True ) [EOL] device_family = fields . Str ( dump_only = True ) [EOL] [EOL] commands = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] installed_certificates = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] installed_applications = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] tags = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] available_os_updates = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL] dep_profile = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = False , schema = [string] , type_ = [string] , ) [EOL] [EOL] [EOL] class PrivateKeySchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] pem_key = fields . Str ( ) [EOL] [EOL] [EOL] class CertificateSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] type = fields . Str ( attribute = [string] ) [EOL] x509_cn = fields . Str ( dump_only = True ) [EOL] not_before = fields . DateTime ( dump_only = True ) [EOL] not_after = fields . DateTime ( dump_only = True ) [EOL] [comment] [EOL] pem_certificate = fields . Str ( ) [EOL] [EOL] private_key = Relationship ( self_view = [string] , self_view_kwargs = { [string] : [string] } , related_view = [string] , related_view_kwargs = { [string] : [string] } , many = False , schema = [string] , type_ = [string] ) [EOL] [EOL] [EOL] class CertificateSigningRequestSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] purpose = fields . Str ( load_only = True , attribute = [string] ) [EOL] subject = fields . Str ( ) [EOL] pem_request = fields . Str ( ) [EOL] [EOL] [EOL] class OrganizationSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] name = fields . Str ( ) [EOL] payload_prefix = fields . Str ( ) [EOL] [EOL] x509_ou = fields . Str ( ) [EOL] x509_o = fields . Str ( ) [EOL] x509_st = fields . Str ( ) [EOL] x509_c = fields . Str ( ) [EOL] [EOL] [EOL] class OrganizationFlatSchema ( FlatSchema ) : [EOL] name = fields . Str ( required = True ) [EOL] payload_prefix = fields . Str ( required = True ) [EOL] [EOL] x509_ou = fields . Str ( ) [EOL] x509_o = fields . Str ( ) [EOL] x509_st = fields . Str ( ) [EOL] x509_c = fields . Str ( ) [EOL] [EOL] @ post_load def make_organization ( self , data ) : [EOL] [docstring] [EOL] rows = db . session . query ( Organization ) . count ( ) [EOL] [EOL] if rows == [number] : [EOL] db . session . query ( Organization ) . update ( data ) [EOL] o = db . session . query ( Organization ) . first ( ) [EOL] else : [EOL] o = Organization ( ** data ) [EOL] db . session . add ( o ) [EOL] [EOL] return o [EOL] [EOL] [EOL] class SCEPConfigFlatSchema ( FlatSchema ) : [EOL] source_type = fields . String ( ) [EOL] url = fields . Url ( relative = False , schemes = [ [string] , [string] ] , required = True ) [EOL] challenge_enabled = fields . Boolean ( ) [EOL] ca_fingerprint = fields . String ( ) [EOL] subject = fields . String ( ) [EOL] key_size = fields . Integer ( ) [EOL] key_type = fields . String ( dump_only = True ) [EOL] key_usage = fields . Integer ( ) [EOL] subject_alt_name = fields . String ( ) [EOL] retries = fields . Integer ( ) [EOL] retry_delay = fields . Integer ( ) [EOL] certificate_renewal_time_interval = fields . Integer ( ) [EOL] [EOL] @ post_load def make_scepconfig ( self , data ) : [EOL] [docstring] [EOL] rows = db . session . query ( SCEPConfig ) . count ( ) [EOL] [EOL] if rows == [number] : [EOL] db . session . query ( SCEPConfig ) . update ( data ) [EOL] o = db . session . query ( SCEPConfig ) . first ( ) [EOL] else : [EOL] o = SCEPConfig ( ** data ) [EOL] db . session . add ( o ) [EOL] [EOL] return o [EOL] [EOL] [EOL] [EOL] [EOL] class TagSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] name = fields . Str ( ) [EOL] color = fields . Str ( ) [EOL] [EOL] devices = Relationship ( self_view = [string] , self_view_kwargs = { [string] : [string] } , related_view = [string] , related_view_kwargs = { [string] : [string] } , schema = [string] , many = True , type_ = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.DeviceSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.api.schema.PrivateKeySchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.PrivateKeySchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSigningRequestSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSigningRequestSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSigningRequestSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.CertificateSigningRequestSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.OrganizationFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $commandment.models.Organization$ 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.SCEPConfigFlatSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $commandment.models.SCEPConfig$ 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.api.schema.TagSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.TagSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.TagSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.api.schema.TagSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import commandment [EOL] import io [EOL] import builtins [EOL] [docstring] [EOL] import io [EOL] from flask import Blueprint , send_file , abort , current_app , jsonify , request , make_response [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] import plistlib [EOL] import string [EOL] from commandment . plistutil . nonewriter import dumps as dumps_none [EOL] from base64 import urlsafe_b64encode [EOL] from commandment . models import db , Organization , Device , Command [EOL] from commandment . pki . models import Certificate , RSAPrivateKey [EOL] from commandment . profiles . models import Profile [EOL] from commandment . mdm import commands , Platform [EOL] from . schema import OrganizationFlatSchema [EOL] from commandment . profiles . schema import ProfileSchema [EOL] from commandment . profiles . plist_schema import ProfileSchema as ProfilePlistSchema [EOL] [EOL] flat_api = Blueprint ( [string] , __name__ ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def organization_get ( ) : [EOL] [docstring] [EOL] try : [EOL] o = db . session . query ( Organization ) . one ( ) [EOL] except NoResultFound : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] org_schema = OrganizationFlatSchema ( ) [EOL] result = org_schema . dumps ( o ) [EOL] [EOL] return jsonify ( result . data ) [EOL] [EOL] [EOL] @ flat_api . route ( [string] ) def download_certificate ( certificate_id ) : [EOL] [docstring] [EOL] c = db . session . query ( Certificate ) . filter ( Certificate . id == certificate_id ) . one ( ) [EOL] bio = io . BytesIO ( c . pem_data ) [EOL] [EOL] return send_file ( bio , [string] , True , [string] ) [EOL] [EOL] [EOL] @ flat_api . route ( [string] ) def download_key ( rsa_private_key_id ) : [EOL] [docstring] [EOL] if not current_app . debug : [EOL] abort ( [number] , [string] ) [EOL] [EOL] c = db . session . query ( RSAPrivateKey ) . filter ( RSAPrivateKey . id == rsa_private_key_id ) . one ( ) [EOL] bio = io . BytesIO ( c . pem_data ) [EOL] [EOL] return send_file ( bio , [string] , True , [string] ) [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def device_test ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] [EOL] [comment] [EOL] ia = commands . Settings ( bluetooth = False ) [EOL] [EOL] dbc = Command . from_model ( ia ) [EOL] dbc . device = d [EOL] db . session . add ( dbc ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ flat_api . route ( [string] ) def device_inventory ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] [EOL] [comment] [EOL] di = commands . DeviceInformation . for_platform ( d . platform , d . os_version ) [EOL] db_command = Command . from_model ( di ) [EOL] db_command . device = d [EOL] db . session . add ( db_command ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] cl = commands . CertificateList ( ) [EOL] dbc = Command . from_model ( cl ) [EOL] dbc . device = d [EOL] db . session . add ( dbc ) [EOL] [EOL] [comment] [EOL] si = commands . SecurityInfo ( ) [EOL] dbsi = Command . from_model ( si ) [EOL] dbsi . device = d [EOL] db . session . add ( dbsi ) [EOL] [EOL] [comment] [EOL] pl = commands . ProfileList ( ) [EOL] db_pl = Command . from_model ( pl ) [EOL] db_pl . device = d [EOL] db . session . add ( db_pl ) [EOL] [EOL] [comment] [EOL] au = commands . AvailableOSUpdates ( ) [EOL] au_pl = Command . from_model ( au ) [EOL] au_pl . device = d [EOL] db . session . add ( au_pl ) [EOL] [EOL] mal = commands . ManagedApplicationList ( ) [EOL] mal_pl = Command . from_model ( mal ) [EOL] mal_pl . device = d [EOL] db . session . add ( mal_pl ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def clear_passcode ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] if d . platform == Platform . macOS : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] if d . unlock_token is None : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] cp = commands . ClearPasscode ( UnlockToken = urlsafe_b64encode ( d . unlock_token ) . decode ( [string] ) ) [EOL] cp_pl = Command . from_model ( cp ) [EOL] cp_pl . device = d [EOL] db . session . add ( cp_pl ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] , [number] , { } [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def lock ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] if d . platform == Platform . macOS : [EOL] return abort ( [number] , [string] ) [EOL] [EOL] dl = commands . DeviceLock ( ) [EOL] dl_pl = Command . from_model ( dl ) [EOL] dl_pl . device = d [EOL] db . session . add ( dl_pl ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] , [number] , { } [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def restart ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] [EOL] if d . model_name == [string] and not d . is_supervised : [EOL] return [string] , [number] , { } [EOL] [EOL] cmd = commands . RestartDevice ( ) [EOL] orm_cmd = Command . from_model ( cmd ) [EOL] orm_cmd . device = d [EOL] db . session . add ( orm_cmd ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def shutdown ( device_id ) : [EOL] [docstring] [EOL] d = db . session . query ( Device ) . filter ( Device . id == device_id ) . one ( ) [EOL] [EOL] if d . model_name == [string] and not d . is_supervised : [EOL] return [string] , [number] , { } [EOL] [EOL] cmd = commands . ShutDownDevice ( ) [EOL] orm_cmd = Command . from_model ( cmd ) [EOL] orm_cmd . device = d [EOL] db . session . add ( orm_cmd ) [EOL] [EOL] db . session . commit ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] @ flat_api . route ( [string] , methods = [ [string] ] ) def upload_profile ( ) : [EOL] [docstring] [EOL] if [string] not in request . files : [EOL] abort ( [number] , [string] ) [EOL] [EOL] f = request . files [ [string] ] [EOL] [EOL] if not f . content_type == [string] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] try : [EOL] data = f . read ( ) [EOL] plist = plistlib . loads ( data ) [EOL] [EOL] profile = ProfilePlistSchema ( ) . load ( plist ) . data [EOL] except plistlib . InvalidFileException as e : [EOL] current_app . logger . error ( e ) [EOL] abort ( [number] , [string] ) [EOL] [EOL] except BaseException as e : [comment] [EOL] current_app . logger . error ( e ) [EOL] abort ( [number] , [string] ) [EOL] [EOL] profile . data = data [EOL] db . session . add ( profile ) [EOL] db . session . commit ( ) [EOL] [EOL] profile_schema = ProfileSchema ( ) [EOL] model_data = profile_schema . dump ( profile ) . data [EOL] resp = make_response ( jsonify ( model_data ) , [number] , { [string] : [string] } ) [EOL] return resp [EOL] [EOL] [EOL] @ flat_api . route ( [string] ) def download_profile ( profile_id ) : [EOL] [docstring] [EOL] try : [EOL] profile = db . session . query ( Profile ) . filter ( Profile . id == profile_id ) . one ( ) [EOL] except NoResultFound : [EOL] abort ( [number] ) [EOL] [EOL] return profile . data , [number] , { [string] : [string] } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import flask [EOL] import typing [EOL] from flask import Blueprint , current_app [EOL] from uuid import uuid4 [EOL] import plistlib [EOL] [EOL] omdm_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ omdm_app . route ( [string] ) def omdm ( ) : [EOL] faux_command = { [string] : str ( uuid4 ( ) ) , [string] : [string] , [string] : [string] } [EOL] [EOL] return plistlib . dumps ( faux_command ) , { [string] : [string] }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] db = SQLAlchemy ( ) [EOL] [EOL] from sqlalchemy import Integer , String , ForeignKey , Table , Text , Boolean , DateTime , Enum as DBEnum , text , BigInteger , and_ , or_ , LargeBinary , Float [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import cryptography [EOL] import builtins [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography import x509 [EOL] from cryptography . x509 . oid import NameOID [EOL] from cryptography . hazmat . primitives import serialization , hashes [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from asn1crypto import pkcs12 , pem , x509 as asn1x509 [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def from_pem ( pem_data ) : [EOL] return x509 . load_pem_x509_certificate ( pem_data , default_backend ( ) ) [EOL] [EOL] [EOL] def from_der ( der_data ) : [EOL] return x509 . load_der_x509_certificate ( der_data , default_backend ( ) ) [EOL] [EOL] [EOL] def rsa_from_der ( rsa_der_data , password = None ) : [EOL] return serialization . load_der_private_key ( rsa_der_data , password , default_backend ( ) ) [EOL] [EOL] [EOL] def rsa_from_pem ( rsa_pem_data , password = None ) : [EOL] return serialization . load_pem_private_key ( rsa_pem_data , password , default_backend ( ) ) [EOL] [EOL] [EOL] def rsa_to_pem ( key ) : [EOL] return key . private_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PrivateFormat . PKCS8 , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] [EOL] [EOL] def to_pem ( certificate ) : [EOL] [docstring] [EOL] serialized = certificate . public_bytes ( encoding = serialization . Encoding . PEM ) [EOL] [EOL] return serialized [EOL] [EOL] [EOL] def to_der ( certificate ) : [EOL] [docstring] [EOL] serialized = certificate . public_bytes ( encoding = serialization . Encoding . DER , format = serialization . PublicFormat . PKCS8 , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] [EOL] return serialized [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import cryptography [EOL] import rsa [EOL] import builtins [EOL] import x509 [EOL] import datetime [EOL] from typing import Optional [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography import x509 [EOL] from cryptography . x509 import NameOID , DNSName [EOL] [EOL] [EOL] def generate_signing_request ( cn , dnsname = None ) : [EOL] [docstring] [EOL] private_key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) , ) [EOL] [EOL] name = x509 . Name ( [ x509 . NameAttribute ( NameOID . COMMON_NAME , cn ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) ] ) [EOL] [EOL] builder = x509 . CertificateSigningRequestBuilder ( ) [EOL] builder = builder . subject_name ( name ) [EOL] [EOL] if dnsname is not None : [EOL] san = x509 . SubjectAlternativeName ( [ x509 . DNSName ( dnsname ) ] ) [EOL] builder = builder . add_extension ( san , critical = True ) [EOL] [EOL] builder = builder . add_extension ( x509 . BasicConstraints ( ca = False , path_length = None ) , critical = True ) [EOL] [EOL] request = builder . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return private_key , request [EOL] [EOL] [EOL] def generate_self_signed_certificate ( cn ) : [EOL] [docstring] [EOL] name = x509 . Name ( [ x509 . NameAttribute ( NameOID . COMMON_NAME , cn ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) ] ) [EOL] [EOL] private_key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) , ) [EOL] [EOL] certificate = x509 . CertificateBuilder ( ) . subject_name ( name ) . issuer_name ( name ) . public_key ( private_key . public_key ( ) ) . serial_number ( x509 . random_serial_number ( ) ) . not_valid_before ( datetime . datetime . utcnow ( ) ) . not_valid_after ( datetime . datetime . utcnow ( ) + datetime . timedelta ( days = [number] ) ) . add_extension ( x509 . SubjectAlternativeName ( [ DNSName ( cn ) ] ) , False ) . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return private_key , certificate [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $(rsa.RSAPrivateKey,x509.CertificateSigningRequest)$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $(rsa.RSAPrivateKey,x509.Certificate)$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import commandment [EOL] import builtins [EOL] import asn1crypto [EOL] from typing import Optional [EOL] [EOL] from asn1crypto . cms import ContentInfo , EnvelopedData , KeyTransRecipientInfo , RecipientIdentifier [EOL] [EOL] from commandment . pki . models import Certificate [EOL] [EOL] [EOL] def find_recipient ( cms_data ) : [EOL] [docstring] [EOL] content_info = ContentInfo . load ( cms_data ) [EOL] [EOL] assert content_info [ [string] ] . native == [string] [EOL] content = content_info [ [string] ] [EOL] [EOL] for recipient_info in content [ [string] ] : [EOL] if recipient_info . name == [string] : [comment] [EOL] recipient = recipient_info . chosen [EOL] recipient_id = recipient [ [string] ] [EOL] assert recipient_id . name == [string] [EOL] [EOL] else : [EOL] pass [comment] [EOL] [EOL] return None [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[commandment.pki.models.Certificate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Any [EOL] import typing [EOL] import OpenSSL [EOL] import cryptography [EOL] import builtins [EOL] from typing import Optional [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives import serialization [EOL] import OpenSSL [EOL] [EOL] [EOL] def create_pkcs12 ( private_key , certificate , passphrase = None ) : [EOL] [docstring] [EOL] [EOL] p12 = OpenSSL . crypto . PKCS12 ( ) [EOL] pkey = OpenSSL . crypto . PKey . from_cryptography_key ( private_key ) [EOL] p12 . set_privatekey ( pkey ) [EOL] cert = OpenSSL . crypto . X509 . from_cryptography ( certificate ) [EOL] p12 . set_certificate ( cert ) [EOL] [EOL] return p12 . export ( passphrase ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] DEFAULT_BUNDLE_ID_BLACKLIST = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import commandment [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] from flask_rest_jsonapi . exceptions import ObjectNotFound [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] from commandment . inventory . schema import InstalledApplicationSchema , InstalledCertificateSchema , InstalledProfileSchema , AvailableOSUpdateSchema [EOL] from commandment . inventory . models import db , InstalledApplication , InstalledCertificate , InstalledProfile , AvailableOSUpdate [EOL] from commandment . models import Device [EOL] [EOL] [EOL] class InstalledApplicationsList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( InstalledApplication ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Device ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Device ) . filter ( Device . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = InstalledApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : InstalledApplication , [string] : { [string] : query } } [EOL] [EOL] [EOL] class InstalledApplicationDetail ( ResourceDetail ) : [EOL] schema = InstalledApplicationSchema [EOL] data_layer = { [string] : db . session , [string] : InstalledApplication } [EOL] [EOL] [EOL] class InstalledCertificatesList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( InstalledCertificate ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Device ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Device ) . filter ( Device . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = InstalledCertificateSchema [EOL] view_kwargs = True [EOL] data_layer = { [string] : db . session , [string] : InstalledCertificate , [string] : { [string] : query } } [EOL] [EOL] [EOL] class InstalledCertificateDetail ( ResourceDetail ) : [EOL] schema = InstalledCertificateSchema [EOL] data_layer = { [string] : db . session , [string] : InstalledCertificate , [string] : [string] } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class InstalledProfilesList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( InstalledProfile ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Device ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Device ) . filter ( Device . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = InstalledProfileSchema [EOL] view_kwargs = True [EOL] data_layer = { [string] : db . session , [string] : InstalledProfile , [string] : { [string] : query } } [EOL] [EOL] [EOL] class InstalledProfileDetail ( ResourceDetail ) : [EOL] schema = InstalledProfileSchema [EOL] data_layer = { [string] : db . session , [string] : InstalledProfile } [EOL] [EOL] [EOL] class AvailableOSUpdateList ( ResourceList ) : [EOL] def query ( self , view_kwargs ) : [EOL] query_ = self . session . query ( AvailableOSUpdate ) [EOL] if view_kwargs . get ( [string] ) is not None : [EOL] try : [EOL] self . session . query ( Device ) . filter_by ( id = view_kwargs [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] raise ObjectNotFound ( { [string] : [string] } , [string] . format ( view_kwargs [ [string] ] ) ) [EOL] else : [EOL] query_ = query_ . join ( Device ) . filter ( Device . id == view_kwargs [ [string] ] ) [EOL] return query_ [EOL] [EOL] schema = AvailableOSUpdateSchema [EOL] view_kwargs = True [EOL] data_layer = { [string] : db . session , [string] : AvailableOSUpdate , [string] : { [string] : query } } [EOL] [EOL] [EOL] class AvailableOSUpdateDetail ( ResourceDetail ) : [EOL] schema = AvailableOSUpdateSchema [EOL] data_layer = { [string] : db . session , [string] : AvailableOSUpdate , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import io [EOL] import builtins [EOL] from flask import Blueprint , send_file [EOL] from flask_rest_jsonapi import Api [EOL] import io [EOL] [EOL] from commandment . inventory . models import db , InstalledCertificate [EOL] from commandment . inventory . resources import InstalledApplicationsList , InstalledApplicationDetail , InstalledCertificatesList , InstalledCertificateDetail , InstalledProfilesList , InstalledProfileDetail , AvailableOSUpdateList , AvailableOSUpdateDetail [EOL] from commandment . api . app_jsonapi import api [EOL] [EOL] api_app = Blueprint ( [string] , __name__ ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] api . route ( InstalledApplicationsList , [string] , [string] , [string] ) [EOL] api . route ( InstalledApplicationDetail , [string] , [string] ) [EOL] [EOL] [comment] [EOL] api . route ( InstalledCertificatesList , [string] , [string] , [string] ) [EOL] api . route ( InstalledCertificateDetail , [string] , [string] ) [EOL] [EOL] api . route ( InstalledProfilesList , [string] , [string] , [string] ) [EOL] api . route ( InstalledProfileDetail , [string] , [string] ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] api . route ( AvailableOSUpdateList , [string] , [string] , [string] ) [EOL] api . route ( AvailableOSUpdateDetail , [string] , [string] ) [EOL] [EOL] [EOL] @ api_app . route ( [string] ) def download_installed_certificate ( installed_certificate_id ) : [EOL] [docstring] [EOL] c = db . session . query ( InstalledCertificate ) . filter ( InstalledCertificate . id == installed_certificate_id ) . one ( ) [EOL] bio = io . BytesIO ( c . der_data ) [EOL] [EOL] prefix = c . x509_cn . strip ( [string] ) if c . x509_cn is not None else [string] [EOL] [EOL] return send_file ( bio , [string] , True , [string] . format ( prefix ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import commandment [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] [EOL] [EOL] class InstalledProfileSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] [EOL] has_removal_password = fields . Bool ( ) [EOL] is_encrypted = fields . Bool ( ) [EOL] payload_description = fields . Str ( ) [EOL] payload_display_name = fields . Str ( ) [EOL] payload_identifier = fields . Str ( ) [EOL] payload_organization = fields . Str ( ) [EOL] payload_removal_disallowed = fields . Boolean ( ) [EOL] payload_uuid = fields . UUID ( ) [EOL] [comment] [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , type_ = [string] , ) [EOL] [EOL] [EOL] class InstalledCertificateSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] x509_cn = fields . Str ( dump_only = True ) [EOL] is_identity = fields . Boolean ( dump_only = True ) [EOL] fingerprint_sha256 = fields . String ( dump_only = True ) [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , type_ = [string] , ) [EOL] [EOL] [EOL] class InstalledApplicationSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] strict = True [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] bundle_identifier = fields . Str ( dump_only = True ) [EOL] name = fields . Str ( dump_only = True ) [EOL] short_version = fields . Str ( dump_only = True ) [EOL] version = fields . Str ( dump_only = True ) [EOL] bundle_size = fields . Int ( dump_only = True ) [EOL] dynamic_size = fields . Int ( dump_only = True ) [EOL] is_validated = fields . Bool ( dump_only = True ) [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , type_ = [string] , ) [EOL] [EOL] [EOL] class AvailableOSUpdateSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] allows_install_later = fields . Boolean ( ) [EOL] [comment] [EOL] human_readable_name = fields . Str ( ) [EOL] human_readable_name_locale = fields . Str ( ) [EOL] is_config_data_update = fields . Boolean ( ) [EOL] is_critical = fields . Boolean ( ) [EOL] is_firmware_update = fields . Boolean ( ) [EOL] metadata_url = fields . URL ( ) [EOL] product_key = fields . String ( ) [EOL] restart_required = fields . Boolean ( ) [EOL] version = fields . String ( ) [EOL] [EOL] device = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , type_ = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledCertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledCertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledCertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledCertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledCertificateSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.InstalledApplicationSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.inventory.schema.AvailableOSUpdateSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from commandment . models import db [EOL] from authlib . flask . oauth2 . sqla import OAuth2ClientMixin , OAuth2TokenMixin [EOL] [EOL] [EOL] class User ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] name = db . Column ( db . String ) [EOL] fullname = db . Column ( db . String ) [EOL] password = db . Column ( db . String ) [EOL] [EOL] def get_user_id ( self ) : [EOL] [docstring] [EOL] return self . id [EOL] [EOL] [EOL] class OAuth2Client ( db . Model , OAuth2ClientMixin ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] , ondelete = [string] ) ) [EOL] user = db . relationship ( [string] ) [EOL] [EOL] [EOL] class OAuth2Token ( db . Model , OAuth2TokenMixin ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] , ondelete = [string] ) ) [EOL] user = db . relationship ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.auth.models.OAuth2Token]$ 0 0 0 0 0 0 0 0 0
	0
import flask [EOL] from flask import Blueprint , request [EOL] from . oauth2 import authorization [EOL] [EOL] oauth_app = Blueprint ( [string] , __name__ ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ oauth_app . route ( [string] , methods = [ [string] ] ) def issue_token ( ) : [EOL] return authorization . create_token_response ( request = request ) [EOL] [EOL] [EOL] @ oauth_app . route ( [string] , methods = [ [string] ] ) def revoke_token ( ) : [EOL] return authorization . create_revocation_response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring]	0
from typing import Any [EOL] import flask [EOL] import typing [EOL] from flask import Blueprint [EOL] from flask_rest_jsonapi import Api [EOL] from commandment . profiles . resources import ProfilesList , ProfileDetail , ProfileRelationship [EOL] [EOL] profiles_api_app = Blueprint ( [string] , __name__ ) [EOL] api = Api ( blueprint = profiles_api_app ) [EOL] [EOL] [comment] [EOL] api . route ( ProfilesList , [string] , [string] ) [EOL] api . route ( ProfileDetail , [string] , [string] ) [EOL] api . route ( ProfileRelationship , [string] , [string] ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from enum import IntFlag [EOL] from marshmallow import Schema , fields , post_load , post_dump [EOL] [EOL] [EOL] class KeyUsage ( IntFlag ) : [EOL] [docstring] [EOL] Signing = [number] [EOL] Encryption = [number] [EOL] All = Signing | Encryption [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum [EOL] [EOL] [EOL] class WIFIEncryptionType ( Enum ) : [EOL] ENone = [string] [EOL] Any = [string] [EOL] WPA2 = [string] [EOL] WPA = [string] [EOL] WEP = [string] [EOL] [EOL] [EOL] class WIFIProxyType ( Enum ) : [EOL] ENone = [string] [EOL] Manual = [string] [EOL] Auto = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0
import builtins [EOL] from typing import Type , Set [EOL] import typing [EOL] import commandment [EOL] from typing import Set [EOL] from enum import Enum , IntEnum [EOL] [EOL] [EOL] class EAPTypes ( IntEnum ) : [EOL] [docstring] [EOL] Invalid = [number] [EOL] Identity = [number] [EOL] Notification = [number] [EOL] Nak = [number] [EOL] MD5Challenge = [number] [EOL] OneTimePassword = [number] [EOL] GenericTokenCard = [number] [EOL] TLS = [number] [EOL] CiscoLEAP = [number] [EOL] EAP_SIM = [number] [EOL] SRP_SHA1 = [number] [EOL] TTLS = [number] [EOL] EAP_AKA = [number] [EOL] PEAP = [number] [EOL] MSCHAPv2 = [number] [EOL] Extensions = [number] [EOL] EAP_FAST = [number] [EOL] EAP_AKA_Prime = [number] [EOL] [EOL] AcceptEAPTypes = Set [ EAPTypes ] [EOL] [EOL] [EOL] class TTLSInnerAuthentication ( Enum ) : [EOL] PAP = [string] [EOL] CHAP = [string] [EOL] MSCHAP = [string] [EOL] MSCHAPv2 = [string] [EOL] EAP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Type , Set [EOL] import typing [EOL] import commandment [EOL] from typing import Set [EOL] from enum import Enum , Flag , auto [EOL] [EOL] [EOL] class ADMountStyle ( Enum ) : [EOL] AFP = [string] [EOL] SMB = [string] [EOL] [EOL] [EOL] class ADNamespace ( Enum ) : [EOL] Domain = [string] [EOL] Forest = [string] [EOL] [EOL] [EOL] class ADOption ( Flag ) : [EOL] CreateMobileAccountAtLogin = auto ( ) [EOL] WarnUserBeforeCreatingMobileAccount = auto ( ) [EOL] ForceHomeLocal = auto ( ) [EOL] UseWindowsUNCPath = auto ( ) [EOL] AllowMultiDomainAuth = auto ( ) [EOL] [EOL] ADOptions = Set [ ADOption ] [EOL] [EOL] [EOL] class ADPacketSignPolicy ( Enum ) : [EOL] Allow = [string] [EOL] Disable = [string] [EOL] Require = [string] [EOL] [EOL] [EOL] class ADPacketEncryptPolicy ( Enum ) : [EOL] Allow = [string] [EOL] Disable = [string] [EOL] Require = [string] [EOL] SSL = [string] [EOL] [EOL] [EOL] class ADCertificateAcquisitionMechanism ( Enum ) : [EOL] RPC = [string] [EOL] HTTP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from enum import Enum [EOL] [EOL] class EmailAccountType ( Enum ) : [EOL] POP = [string] [EOL] IMAP = [string] [EOL] [EOL] [EOL] class EmailAuthenticationType ( Enum ) : [EOL] Password = [string] [EOL] CRAM_MD5 = [string] [EOL] NTLM = [string] [EOL] HTTP_MD5 = [string] [EOL] ENone = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from enum import Enum [EOL] [EOL] class VPNType ( Enum ) : [EOL] L2TP = [string] [EOL] PPTP = [string] [EOL] IPSec = [string] [EOL] IKEv2 = [string] [EOL] AlwaysOn = [string] [EOL] VPN = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import commandment [EOL] from marshmallow_jsonapi import fields [EOL] from marshmallow_jsonapi . flask import Relationship , Schema [EOL] from marshmallow import Schema as FlatSchema , post_load [EOL] [EOL] [EOL] class ProfileSchema ( Schema ) : [EOL] class Meta : [EOL] type_ = [string] [EOL] self_view = [string] [EOL] self_view_kwargs = { [string] : [string] } [EOL] self_view_many = [string] [EOL] [EOL] id = fields . Int ( dump_only = True ) [EOL] data = fields . String ( ) [EOL] [EOL] description = fields . Str ( ) [EOL] display_name = fields . Str ( ) [EOL] expiration_date = fields . DateTime ( ) [EOL] identifier = fields . Str ( ) [EOL] organization = fields . Str ( ) [EOL] uuid = fields . UUID ( ) [EOL] removal_disallowed = fields . Boolean ( ) [EOL] version = fields . Int ( ) [EOL] scope = fields . Str ( ) [EOL] removal_date = fields . DateTime ( ) [EOL] duration_until_removal = fields . Int ( ) [EOL] consent_en = fields . Str ( ) [EOL] [EOL] tags = Relationship ( related_view = [string] , related_view_kwargs = { [string] : [string] } , many = True , schema = [string] , type_ = [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 0 $typing.Type[commandment.profiles.schema.ProfileSchema]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from enum import Enum [EOL] [EOL] PROFILE_CONTENT_TYPE = [string] [EOL] [EOL] [EOL] class PayloadScope ( Enum ) : [EOL] User = [string] [EOL] System = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0
from typing import Type , Callable , Dict , List , Any , Union [EOL] import typing [EOL] import marshmallow [EOL] import builtins [EOL] import commandment [EOL] [docstring] [EOL] [EOL] from typing import Union , Callable , Type , List , Dict [EOL] from marshmallow import Schema , fields , post_load , post_dump [EOL] from marshmallow_enum import EnumField [EOL] from commandment . profiles import models [EOL] from commandment . profiles . certificates import KeyUsage [EOL] from . import PayloadScope [EOL] [EOL] _schemas = { } [EOL] [docstring] [EOL] [EOL] [EOL] def schema_for ( payload_type ) : [EOL] [docstring] [EOL] return _schemas . get ( payload_type , None ) [EOL] [EOL] [EOL] def register_payload_schema ( * args ) : [EOL] [docstring] [EOL] def wrapper ( cls ) : [EOL] for payload_type in args : [EOL] _schemas [ payload_type ] = cls [EOL] return cls [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] class Payload ( Schema ) : [EOL] PayloadType = fields . Str ( attribute = [string] , required = True ) [EOL] PayloadVersion = fields . Integer ( attribute = [string] , default = [number] ) [EOL] PayloadIdentifier = fields . String ( attribute = [string] ) [EOL] PayloadUUID = fields . UUID ( attribute = [string] ) [EOL] PayloadDisplayName = fields . String ( attribute = [string] ) [EOL] PayloadDescription = fields . String ( attribute = [string] ) [EOL] PayloadOrganization = fields . String ( attribute = [string] ) [EOL] [EOL] [EOL] @ register_payload_schema ( [string] ) class ProfileServicePayload ( Schema ) : [EOL] URL = fields . URL ( ) [EOL] DeviceAttributes = fields . String ( many = True ) [EOL] Challenge = fields . String ( ) [EOL] [EOL] [EOL] class ConsentTextSchema ( Schema ) : [EOL] en = fields . String ( attribute = [string] ) [EOL] [EOL] [EOL] @ register_payload_schema ( [string] , [string] , [string] , [string] ) class CertificatePayloadSchema ( Payload ) : [EOL] PayloadCertificateFileName = fields . Str ( attribute = [string] ) [EOL] PayloadContent = fields . Raw ( attribute = [string] ) [EOL] Password = fields . Str ( attribute = [string] ) [EOL] [EOL] [EOL] [EOL] @ register_payload_schema ( [string] ) class SCEPPayload ( Payload ) : [EOL] URL = fields . URL ( attribute = [string] ) [EOL] Name = fields . String ( attribute = [string] ) [EOL] [comment] [EOL] Challenge = fields . String ( attribute = [string] ) [EOL] Keysize = fields . Integer ( attribute = [string] ) [EOL] CAFingerprint = fields . String ( attribute = [string] ) [EOL] KeyType = fields . String ( attribute = [string] ) [EOL] KeyUsage = EnumField ( KeyUsage , attribute = [string] , by_value = True ) [EOL] [comment] [EOL] Retries = fields . Integer ( attribute = [string] ) [EOL] RetryDelay = fields . Integer ( attribute = [string] ) [EOL] [EOL] @ post_dump ( pass_many = False ) def wrap_payload_content ( self , data ) : [EOL] [docstring] [EOL] inner_content = { [string] : data . pop ( [string] , None ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , [string] : data . pop ( [string] ) , } [EOL] [EOL] data [ [string] ] = inner_content [EOL] return data [EOL] [EOL] @ post_load def make_payload ( self , data ) : [EOL] return models . SCEPPayload ( ** data ) [EOL] [EOL] [EOL] @ register_payload_schema ( [string] ) class MDMPayload ( Payload ) : [EOL] IdentityCertificateUUID = fields . UUID ( attribute = [string] , required = True ) [EOL] Topic = fields . String ( attribute = [string] , required = True ) [EOL] ServerURL = fields . URL ( attribute = [string] , required = True ) [EOL] [comment] [EOL] SignMessage = fields . Boolean ( attribute = [string] ) [EOL] CheckInURL = fields . String ( attribute = [string] ) [EOL] CheckOutWhenRemoved = fields . Boolean ( attribute = [string] ) [EOL] AccessRights = fields . Integer ( attribute = [string] ) [EOL] UseDevelopmentAPNS = fields . Boolean ( attribute = [string] ) [EOL] [EOL] @ post_load def make_payload ( self , data ) : [EOL] return models . MDMPayload ( ** data ) [EOL] [EOL] [EOL] [EOL] class ProfileSchema ( Schema ) : [EOL] PayloadDescription = fields . Str ( attribute = [string] ) [EOL] PayloadDisplayName = fields . Str ( attribute = [string] ) [EOL] PayloadExpirationDate = fields . DateTime ( attribute = [string] ) [EOL] PayloadIdentifier = fields . Str ( attribute = [string] , required = True ) [EOL] PayloadOrganization = fields . Str ( attribute = [string] ) [EOL] PayloadUUID = fields . UUID ( attribute = [string] ) [EOL] PayloadRemovalDisallowed = fields . Bool ( attribute = [string] ) [EOL] PayloadType = fields . Function ( lambda obj : [string] , attribute = [string] ) [EOL] PayloadVersion = fields . Function ( lambda obj : [number] , attribute = [string] ) [EOL] PayloadScope = EnumField ( PayloadScope , attribute = [string] ) [EOL] RemovalDate = fields . DateTime ( attribute = [string] ) [EOL] DurationUntilRemoval = fields . Float ( attribute = [string] ) [EOL] ConsentText = fields . Nested ( ConsentTextSchema ( ) ) [EOL] PayloadContent = fields . Method ( [string] , deserialize = [string] ) [EOL] [EOL] def get_payloads ( self , obj ) : [EOL] payloads = [ ] [EOL] [EOL] for payload in obj . payloads : [EOL] schema = schema_for ( payload . type ) [EOL] if schema is not None : [EOL] result = schema ( ) . dump ( payload ) [EOL] payloads . append ( result . data ) [EOL] else : [EOL] print ( [string] . format ( payload . type ) ) [EOL] [EOL] return payloads [EOL] [EOL] def load_payloads ( self , payload_content ) : [EOL] payloads = [ ] [EOL] [EOL] for content in payload_content : [EOL] schema = schema_for ( content [ [string] ] ) [EOL] if schema is not None : [EOL] result = schema ( ) . load ( content ) [EOL] payloads . append ( result . data ) [EOL] else : [EOL] print ( [string] . format ( content [ [string] ] ) ) [EOL] [EOL] return payloads [EOL] [EOL] [EOL] @ post_load def make_profile ( self , data ) : [EOL] payloads = data . pop ( [string] , [ ] ) [EOL] p = models . Profile ( ** data ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] return p	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[marshmallow.Schema]$ 0 0 0 $builtins.list$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$
from typing import Type [EOL] import typing [EOL] import commandment [EOL] from flask_rest_jsonapi import ResourceDetail , ResourceList , ResourceRelationship [EOL] from commandment . models import db [EOL] from commandment . profiles . models import Profile [EOL] from commandment . profiles . schema import ProfileSchema [EOL] [EOL] [EOL] class ProfilesList ( ResourceList ) : [EOL] schema = ProfileSchema [EOL] data_layer = { [string] : db . session , [string] : Profile } [EOL] [EOL] [EOL] class ProfileDetail ( ResourceDetail ) : [EOL] schema = ProfileSchema [EOL] data_layer = { [string] : db . session , [string] : Profile , [string] : [string] } [EOL] [EOL] [EOL] class ProfileRelationship ( ResourceRelationship ) : [EOL] schema = ProfileSchema [EOL] data_layer = { [string] : db . session , [string] : Profile , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from enum import Enum , IntFlag , auto [EOL] [EOL] [EOL] class ScheduledPowerEventType ( Enum ) : [EOL] wake = [string] [EOL] wakepoweron = [string] [EOL] sleep = [string] [EOL] shutdown = [string] [EOL] restart = [string] [EOL] [EOL] [EOL] class ScheduledPowerEventWeekdays ( IntFlag ) : [EOL] def _generate_next_value_ ( name , start , count , last_values ) : [EOL] return [number] ** count [EOL] [EOL] Monday = auto ( ) [EOL] Tuesday = auto ( ) [EOL] Wednesday = auto ( ) [EOL] Thursday = auto ( ) [EOL] Friday = auto ( ) [EOL] Saturday = auto ( ) [EOL] Sunday = auto ( ) [EOL] [EOL] All = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Set , Optional , Union [EOL] import typing [EOL] import cryptography [EOL] import asn1crypto [EOL] from typing import Union , Optional , Type [EOL] from asn1crypto . cms import CertificateSet , SignerIdentifier , Certificate , SignedDigestAlgorithm , DigestAlgorithm [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . asymmetric import padding [EOL] [EOL] [EOL] def _certificate_by_signer_identifier ( certificates , sid ) : [EOL] [docstring] [EOL] if sid . name != [string] : [EOL] return None [comment] [EOL] [EOL] [comment] [EOL] ias = sid . chosen [EOL] [EOL] for c in certificates : [EOL] if c . name != [string] : [EOL] continue [comment] [EOL] [EOL] chosen = c . chosen [comment] [EOL] [EOL] if chosen . serial_number != ias [ [string] ] . native : [EOL] continue [EOL] [EOL] if chosen . issuer == ias [ [string] ] : [EOL] return chosen [EOL] [EOL] return None [EOL] [EOL] [EOL] def _cryptography_hash_function ( algorithm ) : [EOL] [docstring] [EOL] [EOL] hash_algo = algorithm [ [string] ] . native [EOL] [EOL] if hash_algo == [string] : [EOL] return hashes . SHA1 [EOL] elif hash_algo == [string] : [EOL] return hashes . SHA256 [EOL] elif hash_algo == [string] : [EOL] return hashes . SHA512 [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def _cryptography_pad_function ( algorithm ) : [EOL] [docstring] [EOL] signature_algo = algorithm . signature_algo [EOL] [EOL] if signature_algo == [string] : [EOL] return padding . PKCS1v15 [EOL] else : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asn1crypto.cms.Certificate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Type[cryptography.hazmat.primitives.hashes.SHA1],typing.Type[cryptography.hazmat.primitives.hashes.SHA256],typing.Type[cryptography.hazmat.primitives.hashes.SHA512]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Type[cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from flask import Flask [EOL] from commandment import create_app [EOL] from commandment . models import db [EOL] import tempfile [EOL] import json [EOL] from . import JSON_API_HEADERS [EOL] [EOL] [EOL] class TestApiCertificates : [EOL] pass [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] JSON_API_HEADERS = { [string] : [string] , [string] : [string] }	0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0
from typing import Type , Generator , ContextManager , Dict , Any [EOL] import typing [EOL] import flask [EOL] import sqlalchemy [EOL] import flask_sqlalchemy [EOL] import tests [EOL] import pytest [EOL] import os [EOL] from flask import Flask [EOL] from typing import Generator [EOL] from commandment import create_app [EOL] from commandment . models import db as _db [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from sqlalchemy . orm import scoped_session [EOL] import sqlalchemy [EOL] from tests . client import MDMClient [EOL] from alembic . command import upgrade [EOL] from alembic . config import Config [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TEST_DATABASE_URI = [string] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] ALEMBIC_CONFIG = os . path . realpath ( TEST_DIR + [string] ) [EOL] TEST_APP_CONFIG = os . path . realpath ( TEST_DIR + [string] ) [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def app ( ) : [EOL] [docstring] [EOL] a = create_app ( TEST_APP_CONFIG ) [EOL] a . config [ [string] ] = True [EOL] a . config [ [string] ] = TEST_DATABASE_URI [EOL] [EOL] ctx = a . test_request_context ( ) [EOL] ctx . push ( ) [EOL] [EOL] yield a [EOL] [EOL] ctx . pop ( ) [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def db ( app ) : [EOL] [docstring] [EOL] _db . app = app [EOL] [comment] [EOL] yield _db [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def session ( db ) : [EOL] [docstring] [EOL] connection = db . engine . connect ( ) [EOL] [EOL] with db . app . app_context ( ) : [EOL] config = Config ( ALEMBIC_CONFIG ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] config . attributes [ [string] ] = connection [EOL] upgrade ( config , [string] ) [EOL] connection . execute ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] options = dict ( bind = connection ) [EOL] session = db . create_scoped_session ( options = options ) [EOL] [EOL] db . session = session [EOL] [EOL] yield session [EOL] [EOL] [comment] [EOL] session . remove ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def client ( app ) : [EOL] [docstring] [EOL] app . test_client_class = MDMClient [EOL] test_client = app . test_client ( ) [EOL] return test_client [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import cryptography [EOL] import pytest [EOL] import os . path [EOL] import logging [EOL] from cryptography import x509 [EOL] from cryptography . x509 . oid import NameOID [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography . hazmat . backends import default_backend [EOL] from commandment . apns . mdmcert import submit_mdmcert_request [EOL] [EOL] ENCRYPTION_CERT = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , [string] ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] @ pytest . fixture def private_key ( ) : [EOL] key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) , ) [EOL] return key [EOL] [EOL] [EOL] @ pytest . fixture def csr ( private_key ) : [EOL] b = x509 . CertificateSigningRequestBuilder ( ) [EOL] req = b . subject_name ( x509 . Name ( [ x509 . NameAttribute ( NameOID . COUNTRY_NAME , [string] ) , x509 . NameAttribute ( NameOID . STATE_OR_PROVINCE_NAME , [string] ) , x509 . NameAttribute ( NameOID . LOCALITY_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) , x509 . NameAttribute ( NameOID . COMMON_NAME , [string] ) , ] ) ) . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return req [EOL] [EOL] [EOL] @ pytest . fixture def encryption_cert ( ) : [EOL] with open ( ENCRYPTION_CERT , [string] ) as fd : [EOL] certdata = fd . read ( ) [EOL] [EOL] cert = x509 . load_pem_x509_certificate ( certdata , default_backend ( ) ) [EOL] return cert [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.CertificateSigningRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.Certificate$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask . testing import FlaskClient [EOL] [EOL] [EOL] class MDMClient ( FlaskClient ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . _private_key = kwargs . get ( [string] , None ) [EOL] self . _certificate = kwargs . get ( [string] , None ) [EOL] super ( MDMClient , self ) . __init__ ( * args , ** kwargs ) [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import os . path [EOL] import os [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography . hazmat . primitives import serialization , hashes [EOL] from commandment . dep import smime [EOL] [EOL] DEP_TOKEN_SMIME_PATH = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , [string] , [string] ) [EOL] DEP_TOKEN_KEY_PATH = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class TestDepSmime : [EOL] def test_decrypt ( self ) : [EOL] with open ( DEP_TOKEN_SMIME_PATH , [string] ) as fd : [EOL] message = fd . read ( ) [EOL] [EOL] with open ( DEP_TOKEN_KEY_PATH , [string] ) as fd : [EOL] pem_key = fd . read ( ) [EOL] [EOL] pk = serialization . load_pem_private_key ( pem_key , backend = default_backend ( ) , password = None , ) [EOL] [EOL] result = smime . decrypt ( message , pk ) [EOL] print ( result ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0
from typing import Optional , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] import pytest [EOL] from commandment . dep . dep import DEP [EOL] [EOL] [EOL] @ pytest . mark . dep class TestDEPLive : [EOL] def test_account ( self , dep_live ) : [EOL] dep_live . fetch_token ( ) [EOL] account = dep_live . account ( ) [EOL] assert account is not None [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] [EOL] [comment] [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] assert [string] in account [EOL] [EOL] def test_fetch_devices ( self , dep_live ) : [EOL] dep_live . fetch_token ( ) [EOL] devices = dep_live . fetch_devices ( ) [EOL] assert [string] in devices [EOL] assert [string] in devices [EOL] assert [string] in devices [EOL] assert [string] in devices [EOL] [EOL] def test_device_details ( self , dep_live , live_device ) : [EOL] dep_live . fetch_token ( ) [EOL] device_details = dep_live . device_detail ( live_device ) [EOL] print ( device_details ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_get_profile ( self , dep_live , live_dep_profile ) : [EOL] dep_live . fetch_token ( ) [EOL] profiles = dep_live . profile ( live_dep_profile ) [EOL] print ( profiles ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $commandment.dep.dep.DEP$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 $builtins.str$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Any$ 0 $commandment.dep.dep.DEP$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 $builtins.str$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $commandment.dep.dep.DEP$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0
from typing import Optional , Dict , Any [EOL] import typing [EOL] import commandment [EOL] import pytest [EOL] from commandment . dep . dep import DEP [EOL] [EOL] [EOL] @ pytest . mark . depsim class TestDEP : [EOL] def test_account ( self , dep ) : [EOL] dep . fetch_token ( ) [EOL] account = dep . account ( ) [EOL] assert account is not None [EOL] [EOL] def test_fetch_devices ( self , dep ) : [EOL] dep . fetch_token ( ) [EOL] devices = dep . fetch_devices ( ) [EOL] assert len ( devices ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_fetch_cursor ( self , dep ) : [EOL] dep . fetch_token ( ) [EOL] for page in dep . devices ( ) : [EOL] print ( len ( page ) ) [EOL] for d in page : [EOL] print ( d ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $commandment.dep.dep.DEP$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import tests [EOL] import flask [EOL] import commandment [EOL] import pytest [EOL] import os [EOL] import json [EOL] import sqlalchemy [EOL] from flask import Response [EOL] [EOL] from commandment . dep . models import DEPProfile [EOL] from commandment . models import Device [EOL] from tests . client import MDMClient [EOL] [EOL] [EOL] @ pytest . mark . dep @ pytest . mark . usefixtures ( [string] , [string] ) class TestDEPAPI : [EOL] [EOL] def test_post_dep_profile_relationship ( self , client , session ) : [EOL] [docstring] [EOL] request_json = json . dumps ( { [string] : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] } } ) [EOL] [EOL] response = client . patch ( [string] , data = request_json , content_type = [string] ) [EOL] print ( response . data ) [EOL] assert response . status_code == [number] [EOL] [EOL] d = session . query ( Device ) . filter ( Device . id == [number] ) . one ( ) [EOL] assert d . dep_profile_id is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 0 0
import builtins [EOL] import commandment [EOL] import pytest [EOL] from commandment . dep . dep import DEP [EOL] from commandment . dep . errors import DEPServiceError [EOL] [EOL] @ pytest . mark . depsim class TestDEPFailures : [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ] ) def test_token_failure ( self , dep , expected_status , expected_text ) : [EOL] try : [EOL] dep . fetch_token ( ) [EOL] except DEPServiceError as e : [EOL] assert e . response . status_code == expected_status [EOL] assert e . text == expected_text [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ] ) def test_account_failure ( self , dep , expected_status , expected_text ) : [EOL] try : [EOL] dep . fetch_token ( ) [EOL] dep . account ( ) [EOL] except DEPServiceError as e : [EOL] assert e . response . status_code == expected_status [EOL] assert e . text == expected_text [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Dict , Any , Union [EOL] import typing [EOL] import requests [EOL] import sqlalchemy [EOL] import commandment [EOL] import builtins [EOL] import pytest [EOL] import requests [EOL] import os . path [EOL] [EOL] from commandment . dep import SetupAssistantStep [EOL] from commandment . dep . dep import DEP [EOL] from commandment . dep . models import DEPProfile [EOL] from commandment . models import Device [EOL] from sqlalchemy . orm . session import Session [EOL] [EOL] SIMULATOR_URL = [string] [EOL] [EOL] [EOL] @ pytest . fixture def simulator_token ( ) : [EOL] res = requests . get ( [string] . format ( SIMULATOR_URL ) ) [EOL] return res . json ( ) [EOL] [EOL] [EOL] @ pytest . fixture def live_token ( ) : [EOL] dep_token_path = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] , [string] , [string] ) [EOL] with open ( dep_token_path , [string] ) as fd : [EOL] content = fd . read ( ) [EOL] [EOL] return content . decode ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def live_device ( ) : [EOL] return os . environ . get ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def live_dep_profile ( ) : [EOL] return os . environ . get ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def dep ( simulator_token ) : [EOL] d = DEP ( consumer_key = simulator_token [ [string] ] , consumer_secret = simulator_token [ [string] ] , access_token = simulator_token [ [string] ] , access_secret = simulator_token [ [string] ] , url = SIMULATOR_URL , ) [EOL] [EOL] return d [EOL] [EOL] [EOL] @ pytest . fixture def dep_live ( live_token ) : [EOL] return DEP . from_token ( live_token ) [EOL] [EOL] [EOL] @ pytest . fixture def dep_profile ( ) : [EOL] p = { [string] : [string] , [string] : [string] , [string] : True , [string] : True , [string] : False , [string] : False , [string] : False , [string] : True , [string] : [string] , [string] : False , [string] : [string] , [string] : [string] , [string] : [ SetupAssistantStep . AppleID , ] , [string] : [string] , [string] : [ ] , } [EOL] return p [EOL] [EOL] [EOL] @ pytest . fixture def dep_profile_committed ( dep_profile , session ) : [EOL] dp = DEPProfile ( ** dep_profile ) [EOL] session . add ( dp ) [EOL] session . commit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def device ( session ) : [EOL] [docstring] [EOL] d = Device ( udid = [string] , device_name = [string] ) [EOL] session . add ( d ) [EOL] session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.dep.dep.DEP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Union [EOL] import requests [EOL] import typing [EOL] import builtins [EOL] import commandment [EOL] import pytest [EOL] import requests [EOL] from commandment . vpp . vpp import VPP [EOL] [EOL] [EOL] SIMULATOR_URL = [string] [EOL] [EOL] SERVICE_CONFIG = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def simulator_token ( ) : [EOL] res = requests . get ( [string] . format ( SIMULATOR_URL ) ) [EOL] return res . json ( ) . get ( [string] , None ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def vpp ( simulator_token ) : [EOL] return VPP ( stoken = simulator_token , vpp_service_config_url = [string] , service_config = SERVICE_CONFIG ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.vpp.vpp.VPP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0
import flask [EOL] import builtins [EOL] import tests [EOL] import pytest [EOL] import os [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def profile_list_response ( ) : [EOL] with open ( os . path . join ( TEST_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestProfileList : [EOL] [EOL] def test_profile_list_response ( self , client , profile_list_response ) : [EOL] response = client . put ( [string] , data = profile_list_response , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import commandment [EOL] import tests [EOL] import builtins [EOL] import pytest [EOL] import os [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] from commandment . mdm import CommandStatus [EOL] from commandment . models import Command , Device [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def installed_application_list_response ( ) : [EOL] with open ( os . path . join ( TEST_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def installed_application_list_command ( session ) : [EOL] c = Command ( uuid = [string] , request_type = [string] , status = CommandStatus . Sent . value , parameters = { } , ) [EOL] session . add ( c ) [EOL] session . commit ( ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] , [string] ) class TestInstalledApplicationList : [EOL] [EOL] def test_installed_application_list_response ( self , client , installed_application_list_response , session ) : [EOL] response = client . put ( [string] , data = installed_application_list_response , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL] [EOL] d = session . query ( Device ) . filter ( Device . udid == [string] ) . one ( ) [EOL] ia = d . installed_applications [EOL] assert len ( ia ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] import builtins [EOL] import tests [EOL] import pytest [EOL] import os [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def device_information_response ( ) : [EOL] with open ( os . path . join ( TEST_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestDeviceInformation : [EOL] [EOL] def test_device_information_response ( self , client , device_information_response ) : [EOL] response = client . put ( [string] , data = device_information_response , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0
import flask [EOL] import builtins [EOL] import tests [EOL] import pytest [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestCheckin : [EOL] [EOL] def test_authenticate ( self , client , authenticate_request ) : [EOL] [docstring] [EOL] response = client . put ( [string] , data = authenticate_request , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL] [EOL] def test_tokenupdate ( self , client , tokenupdate_request ) : [EOL] [docstring] [EOL] response = client . put ( [string] , data = tokenupdate_request , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_checkout ( self , client , checkout_request ) : [EOL] [docstring] [EOL] response = client . put ( [string] , data = checkout_request , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sqlalchemy [EOL] import builtins [EOL] import pytest [EOL] import os [EOL] from tests . conftest import * [EOL] from commandment . models import Device [EOL] from sqlalchemy . orm . session import Session [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] TEST_DATA_DIR = os . path . realpath ( TEST_DIR + [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def device ( session ) : [EOL] [docstring] [EOL] d = Device ( udid = [string] , device_name = [string] ) [EOL] session . add ( d ) [EOL] session . commit ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def authenticate_request ( ) : [EOL] with open ( os . path . join ( TEST_DATA_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( ) def tokenupdate_request ( ) : [EOL] with open ( os . path . join ( TEST_DATA_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( ) def tokenupdate_user_request ( ) : [EOL] with open ( os . path . join ( TEST_DATA_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( ) def checkout_request ( ) : [EOL] with open ( os . path . join ( TEST_DATA_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( ) def available_os_updates_request ( ) : [EOL] with open ( os . path . join ( TEST_DATA_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] import tests [EOL] import pytest [EOL] import os [EOL] from flask import Response [EOL] [EOL] from commandment . mdm import CommandStatus [EOL] from tests . client import MDMClient [EOL] from commandment . models import Command , Device [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def security_info_response ( ) : [EOL] with open ( os . path . join ( TEST_DIR , [string] ) , [string] ) as fd : [EOL] plist_data = fd . read ( ) [EOL] [EOL] return plist_data [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def security_info_command ( session ) : [EOL] c = Command ( uuid = [string] , request_type = [string] , status = CommandStatus . Sent . value , parameters = { } , ) [EOL] session . add ( c ) [EOL] session . commit ( ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] , [string] ) class TestSecurityInfo : [EOL] [EOL] def test_security_info_response ( self , client , security_info_response , session ) : [EOL] response = client . put ( [string] , data = security_info_response , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL] [EOL] cmd = session . query ( Command ) . filter ( Command . uuid == [string] ) . one ( ) [EOL] assert CommandStatus ( cmd . status ) == CommandStatus . Acknowledged [EOL] [EOL] d = session . query ( Device ) . filter ( Device . udid == [string] ) . one ( ) [EOL] assert not d . fde_enabled	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import commandment [EOL] import tests [EOL] import builtins [EOL] import pytest [EOL] import os [EOL] import plistlib [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] from commandment . mdm import CommandStatus [EOL] from commandment . models import Command , Device [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def available_os_updates_command ( session ) : [EOL] [docstring] [EOL] c = Command ( uuid = [string] , request_type = [string] , status = CommandStatus . Sent . value , parameters = { } , ) [EOL] session . add ( c ) [EOL] session . commit ( ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] , [string] ) class TestAvailableOSUpdates : [EOL] [EOL] def test_available_os_updates_response ( self , client , available_os_updates_request , session ) : [EOL] response = client . put ( [string] , data = available_os_updates_request , content_type = [string] ) [EOL] assert response . status_code != [number] [EOL] assert response . status_code == [number] [EOL] [EOL] d = session . query ( Device ) . filter ( Device . udid == [string] ) . one ( ) [EOL] updates = d . available_os_updates [EOL] [EOL] plist = plistlib . loads ( available_os_updates_request . encode ( [string] ) ) [EOL] assert len ( updates ) == len ( plist [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 $builtins.str$ 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $commandment.models.Device$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import tests [EOL] import typing [EOL] import flask [EOL] import commandment [EOL] import pytest [EOL] import os [EOL] import json [EOL] import sqlalchemy [EOL] from flask import Response [EOL] from tests . client import MDMClient [EOL] from commandment . models import Command [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) class TestDevicesAPI : [EOL] [EOL] def test_patch_device_name ( self , client , session ) : [EOL] [docstring] [EOL] request_json = json . dumps ( { [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] } } ) [EOL] [EOL] response = client . patch ( [string] , data = request_json , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] try : [EOL] cmd = session . query ( Command ) . filter ( Command . request_type == [string] ) . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] assert False , [string] [EOL] [EOL] device = json . loads ( response . data ) [EOL] assert device [ [string] ] [ [string] ] [ [string] ] != [string] , [string] [EOL] [EOL] @ pytest . mark . skip def test_patch_hostname ( self , client , session ) : [EOL] [docstring] [EOL] request_json = json . dumps ( { [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] } } ) [EOL] [EOL] response = client . patch ( [string] , data = request_json , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] try : [EOL] cmd = session . query ( Command ) . filter ( Command . request_type == [string] ) . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] assert False , [string] [EOL] [EOL] device = json . loads ( response . data ) [EOL] assert device [ [string] ] [ [string] ] [ [string] ] != [string] , [string] [EOL] [EOL] def test_patch_hostname_ios ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ pytest . mark . skip def test_patch_device_name_reverted ( self , client , session ) : [EOL] [docstring] [EOL] request_json = json . dumps ( { [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] } } ) [EOL] [EOL] request_two_json = json . dumps ( { [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } , [string] : { [string] : [string] } } ) [EOL] [EOL] response = client . patch ( [string] , data = request_json , content_type = [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] second_response = client . patch ( [string] , data = request_two_json , content_type = [string] ) [EOL] assert second_response . status_code == [number] [EOL] [EOL] settings_commands = session . query ( Command ) . filter ( Command . request_type == [string] ) . count ( ) [EOL] assert settings_commands == [number] [EOL] [EOL] def test_patch_device_name_coalesced ( self , client , session ) : [EOL] [docstring] [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 $commandment.models.Command$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 $commandment.models.Command$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $tests.client.MDMClient$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sqlalchemy [EOL] import pytest [EOL] import os [EOL] from tests . conftest import * [EOL] from commandment . models import Device [EOL] from sqlalchemy . orm . session import Session [EOL] [EOL] TEST_DIR = os . path . realpath ( os . path . dirname ( __file__ ) ) [EOL] TEST_DATA_DIR = os . path . realpath ( TEST_DIR + [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def device ( session ) : [EOL] [docstring] [EOL] d = Device ( udid = [string] , device_name = [string] ) [EOL] session . add ( d ) [EOL] session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from commandment . threads import startup_thread [EOL] from commandment . pki . models import CACertificate [EOL] [EOL] [EOL] class TestStartupThread : [EOL] [EOL] def test_startup_thread_ca ( self , session ) : [EOL] [docstring] [EOL] startup_thread . startup_callback ( ) [EOL] certificate = session . query ( CACertificate ) . one ( ) [EOL] assert certificate . x509_cn == [string] [EOL] assert certificate . pem_data is not None [EOL] assert certificate . fingerprint is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
import logging [EOL] import pytest [EOL] import os . path [EOL] import logging [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from commandment . pki . models import RSAPrivateKey , CACertificate [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class TestORMUtils : [EOL] [EOL] def test_find_recipient ( self , certificate ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import logging [EOL] import cryptography [EOL] import pytest [EOL] import os . path [EOL] import logging [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from commandment . pki import openssl [EOL] import oscrypto [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class TestOpenssl : [EOL] [EOL] def test_pkcs12_from_crypto ( self , private_key , certificate ) : [EOL] pkcs12_data = openssl . create_pkcs12 ( private_key , certificate ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization$ 0 $cryptography.x509.Certificate$ 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization$ 0 $cryptography.x509.Certificate$ 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import cryptography [EOL] import pytest [EOL] import datetime [EOL] from cryptography import x509 [EOL] from cryptography . x509 . oid import NameOID [EOL] from cryptography . hazmat . primitives import hashes [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography . hazmat . backends import default_backend [EOL] [EOL] [EOL] @ pytest . fixture def private_key ( ) : [EOL] key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) , ) [EOL] return key [EOL] [EOL] [EOL] @ pytest . fixture def csr ( private_key ) : [EOL] b = x509 . CertificateSigningRequestBuilder ( ) [EOL] req = b . subject_name ( x509 . Name ( [ x509 . NameAttribute ( NameOID . COUNTRY_NAME , [string] ) , x509 . NameAttribute ( NameOID . STATE_OR_PROVINCE_NAME , [string] ) , x509 . NameAttribute ( NameOID . LOCALITY_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) , x509 . NameAttribute ( NameOID . COMMON_NAME , [string] ) , ] ) ) . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return req [EOL] [EOL] [EOL] @ pytest . fixture def certificate ( private_key ) : [EOL] b = x509 . CertificateBuilder ( ) [EOL] name = x509 . Name ( [ x509 . NameAttribute ( NameOID . COUNTRY_NAME , [string] ) , x509 . NameAttribute ( NameOID . STATE_OR_PROVINCE_NAME , [string] ) , x509 . NameAttribute ( NameOID . LOCALITY_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) , x509 . NameAttribute ( NameOID . COMMON_NAME , [string] ) , ] ) [EOL] [EOL] cer = b . subject_name ( name ) . issuer_name ( name ) . public_key ( private_key . public_key ( ) ) . serial_number ( [number] ) . not_valid_before ( datetime . datetime . utcnow ( ) ) . not_valid_after ( datetime . datetime . utcnow ( ) + datetime . timedelta ( days = [number] ) ) . add_extension ( x509 . BasicConstraints ( ca = False , path_length = None ) , True ) . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return cer [EOL] [EOL] [EOL] @ pytest . fixture def ca_certificate ( private_key ) : [EOL] b = x509 . CertificateBuilder ( ) [EOL] name = x509 . Name ( [ x509 . NameAttribute ( NameOID . COUNTRY_NAME , [string] ) , x509 . NameAttribute ( NameOID . STATE_OR_PROVINCE_NAME , [string] ) , x509 . NameAttribute ( NameOID . LOCALITY_NAME , [string] ) , x509 . NameAttribute ( NameOID . ORGANIZATION_NAME , [string] ) , x509 . NameAttribute ( NameOID . COMMON_NAME , [string] ) , ] ) [EOL] [EOL] cert = b . serial_number ( [number] ) . issuer_name ( name ) . subject_name ( name ) . public_key ( private_key . public_key ( ) ) . not_valid_before ( datetime . datetime . utcnow ( ) ) . not_valid_after ( datetime . datetime . utcnow ( ) + datetime . timedelta ( days = [number] ) ) . add_extension ( x509 . BasicConstraints ( ca = True , path_length = None ) , True ) . sign ( private_key , hashes . SHA256 ( ) , default_backend ( ) ) [EOL] [EOL] return cert [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.CertificateSigningRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import cryptography [EOL] import pytest [EOL] import os . path [EOL] import logging [EOL] from cryptography import x509 [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from commandment . pki . models import RSAPrivateKey , CACertificate [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class TestModels : [EOL] [EOL] def test_rsa_privatekey_from_crypto ( self , private_key , session ) : [EOL] m = RSAPrivateKey . from_crypto ( private_key ) [EOL] session . add ( m ) [EOL] session . commit ( ) [EOL] [EOL] assert m . id is not None [EOL] assert m . pem_data is not None [EOL] [EOL] def test_ca_certificate_from_crypto ( self , ca_certificate , session ) : [EOL] m = CACertificate . from_crypto ( ca_certificate ) [EOL] session . add ( m ) [EOL] session . commit ( ) [EOL] [EOL] assert m . id is not None [EOL] assert m . pem_data is not None [EOL] assert m . fingerprint is not None [EOL] assert m . x509_cn is not None [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.x509.Certificate$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $cryptography.x509.Certificate$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import os [EOL] import codecs [EOL] import sadisplay [EOL] from flask import Flask [EOL] [EOL] from commandment . models import db , Device , Command , InstalledApplication , InstalledCertificate , InstalledProfile [EOL] from commandment . pki . models import Certificate [EOL] [EOL] dummyapp = Flask ( __name__ ) [EOL] db . init_app ( dummyapp ) [EOL] [EOL] UML_PATH = os . path . realpath ( os . path . dirname ( __file__ ) + [string] ) [EOL] [EOL] classes = [ Certificate , Command , InstalledApplication , InstalledApplication , InstalledCertificate , InstalledProfile ] [EOL] [EOL] with dummyapp . app_context ( ) : [EOL] for cls in classes : [EOL] desc = sadisplay . describe ( [ getattr ( cls , attr ) for attr in dir ( cls ) ] , show_methods = True , show_properties = True , show_indexes = True , ) [EOL] [EOL] with codecs . open ( os . path . join ( UML_PATH , [string] . format ( cls . __name__ ) ) , [string] , encoding = [string] ) as f : [EOL] f . write ( sadisplay . plantuml ( desc ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0