[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] import ast [EOL] import os [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] ROOT = os . path . dirname ( __file__ ) [EOL] [EOL] PACKAGE_NAME = [string] [EOL] [EOL] VERSION = None [EOL] [EOL] with open ( os . path . join ( ROOT , [string] , PACKAGE_NAME , [string] ) ) as fin : [EOL] for line in fin : [EOL] if line . startswith ( [string] ) : [EOL] VERSION = ast . literal_eval ( line [ len ( [string] ) : ] . strip ( ) ) [EOL] break [EOL] [EOL] if VERSION is None : [EOL] raise EnvironmentError ( [string] ) [EOL] [EOL] PYTHON_REQUIRES = [string] [EOL] [EOL] REQUIRES = [ ] [EOL] [EOL] setup ( name = PACKAGE_NAME , version = VERSION , package_dir = { [string] : [string] } , packages = find_packages ( [string] , include = [ [string] , [string] ] ) , include_package_data = True , package_data = { [string] : [ [string] , [string] ] , } , python_requires = PYTHON_REQUIRES , install_requires = REQUIRES , extras_require = { [string] : [ [string] , [string] , [string] , [string] ] , } , project_urls = { [string] : [string] , [string] : [string] , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Pattern , List [EOL] import typing [EOL] [docstring] [EOL] from glob import glob [EOL] import os [EOL] import re [EOL] [EOL] import invoke [EOL] [EOL] from . helpers import log as hlog [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def log ( msg , level = None ) : [EOL] return hlog ( msg , name = [string] , level = level ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ invoke . task def generate_make ( ctx ) : [EOL] [docstring] [EOL] file = os . path . join ( [string] , [string] , [string] ) [EOL] [EOL] log ( [string] ) [EOL] ctx . run ( [string] % file ) [EOL] with open ( file , [string] ) as fin : [EOL] contents = fin . readlines ( ) [EOL] [EOL] log ( [string] ) [EOL] pattern = re . compile ( [string] ) [EOL] output = list ( ) [EOL] for line in contents [ [number] : - [number] ] : [EOL] output . append ( pattern . sub ( [string] , line ) ) [EOL] [EOL] log ( [string] ) [EOL] with open ( file , [string] ) as fout : [EOL] fout . writelines ( output ) [EOL] [EOL] return [EOL] [EOL] [EOL] @ invoke . task def clean_apidocs ( ctx ) : [EOL] [docstring] [EOL] log ( [string] ) [EOL] for f in glob ( os . path . join ( [string] , [string] , [string] ) ) : [EOL] if f in ( [string] , [string] ) : [EOL] continue [EOL] os . remove ( f ) [EOL] return [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import subprocess [EOL] [docstring] [EOL] import os [EOL] import subprocess [EOL] [EOL] from frequent import __version__ [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] VERSION = __version__ [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def convert_rst_to_markdown ( content ) : [EOL] [docstring] [EOL] ret = list ( ) [EOL] curr = content . splitlines ( keepends = False ) [EOL] for i in range ( len ( curr ) ) : [EOL] line = curr [ i ] . strip ( [string] ) . strip ( ) [EOL] if line . startswith ( [string] ) : [EOL] line = [string] % line [EOL] ret . append ( line ) [EOL] return [string] + [string] . join ( ret ) + [string] [EOL] [EOL] [EOL] def create_change_item ( reference , context , message ) : [EOL] [docstring] [EOL] file = os . path . join ( [string] , [string] % ( reference , context ) ) [EOL] with open ( file , [string] ) as fout : [EOL] fout . write ( message ) [EOL] return file [EOL] [EOL] [EOL] def log ( msg , name = None , level = None ) : [EOL] [docstring] [EOL] ret = [string] [EOL] if name : [EOL] ret += [string] % name . lower ( ) [EOL] if level : [EOL] ret += [string] % level . upper ( ) [EOL] print ( ret + msg ) [EOL] return [EOL] [EOL] [EOL] def ctx_run ( ctx , cmd , draft = False , log_fn = log ) : [EOL] [docstring] [EOL] if draft : [EOL] log_fn ( [string] % cmd ) [EOL] return [EOL] return ctx . run ( cmd ) [EOL] [EOL] [EOL] def get_alias_cmd ( alias ) : [EOL] [docstring] [EOL] res = subprocess . run ( [ [string] , [string] , [string] , [string] % alias ] , capture_output = True ) [EOL] if res . returncode == [number] : [EOL] s_out = res . stdout . decode ( [string] ) . strip ( ) [EOL] return s_out . split ( [string] ) [ - [number] ] . strip ( [string] ) . strip ( [string] ) [EOL] return alias [EOL] [EOL] [EOL] def get_todos ( file , context = None , project = None ) : [EOL] [docstring] [EOL] if not file . endswith ( [string] ) : [EOL] file = [string] % file [EOL] if not file . startswith ( [string] ) : [EOL] file = os . path . join ( [string] , file ) [EOL] [EOL] with open ( file , [string] ) as fin : [EOL] contents = fin . readlines ( ) [EOL] [EOL] return contents [EOL] [EOL] [EOL] def insert_text ( original , new , after ) : [EOL] [docstring] [EOL] ret = list ( ) [EOL] for line in original . split ( [string] ) : [EOL] ret . append ( line ) [EOL] if line == after : [EOL] for new_line in new . split ( [string] ) : [EOL] ret . append ( new_line ) [EOL] return [string] . join ( ret ) [EOL] [EOL] [EOL] def print_block ( text ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] for line in text . split ( [string] ) : [EOL] print ( [string] % line ) [EOL] print ( [string] ) [EOL] return [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TODO_CMD = get_alias_cmd ( os . getenv ( [string] , [string] ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] from . helpers import log as hlog [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def log ( msg , level = None ) : [EOL] hlog ( msg , name = [string] , level = level ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Set , Any , List , Pattern , Dict [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] import glob [EOL] import os [EOL] import re [EOL] import sys [EOL] import tempfile [EOL] [EOL] import invoke [EOL] [EOL] from . helpers import TODO_CMD [EOL] from . helpers import VERSION [EOL] from . helpers import convert_rst_to_markdown [EOL] from . helpers import create_change_item [EOL] from . helpers import ctx_run [EOL] from . helpers import get_todos [EOL] from . helpers import insert_text [EOL] from . helpers import log as hlog [EOL] from . helpers import print_block [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def log ( msg , level = None ) : [EOL] hlog ( msg , name = [string] , level = level ) [EOL] [EOL] [EOL] def run ( ctx , cmd , draft ) : [EOL] return ctx_run ( ctx , cmd , draft = draft , log_fn = log ) [EOL] [EOL] [EOL] def create_docs_changelog ( new_entry , write = True ) : [EOL] [docstring] [EOL] base_dir = [string] [EOL] curr_files = glob . glob ( os . path . join ( base_dir , [string] ) ) [EOL] curr_files = [ os . path . basename ( x ) for x in curr_files ] [EOL] [EOL] p = re . compile ( [string] ) [EOL] indices = sorted ( [ p . match ( f ) . groups ( ) [ [number] ] for f in curr_files ] ) [EOL] if indices : [EOL] next_idx = int ( indices [ - [number] ] ) + [number] [EOL] else : [EOL] next_idx = [number] [EOL] new_file = os . path . join ( base_dir , [string] % next_idx ) [EOL] [EOL] contents = new_entry . split ( [string] ) [EOL] version , date = ( x . strip ( ) for x in contents [ [number] ] . split ( [string] , maxsplit = [number] ) ) [EOL] version = version [ [number] : - [number] ] [EOL] date = datetime . datetime . strptime ( date , [string] ) . strftime ( [string] ) [EOL] [EOL] new_contents = list ( ) [EOL] new_contents . append ( version ) [EOL] new_contents . append ( [string] * len ( version ) + [string] ) [EOL] new_contents . append ( [string] % date ) [EOL] new_contents . extend ( contents [ [number] : ] ) [EOL] new_contents = [string] . join ( new_contents ) [EOL] [EOL] if write : [EOL] with open ( new_file , [string] ) as fout : [EOL] fout . write ( new_contents ) [EOL] return new_file [EOL] return new_contents [EOL] [EOL] [EOL] def changelog_rst_to_md ( ctx , path ) : [EOL] [docstring] [EOL] content = ctx . run ( [string] % path , hide = True ) . stdout . strip ( ) [EOL] [EOL] content = re . sub ( [string] , [string] , content , flags = re . MULTILINE ) [EOL] [EOL] return convert_rst_to_markdown ( content ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ invoke . task def authors ( ctx , draft = False , branch = [string] ) : [EOL] [docstring] [EOL] _ , tmp = tempfile . mkstemp ( suffix = [string] ) [EOL] log ( [string] ) [EOL] ctx . run ( f' [string] { branch } [string] { tmp }' , encoding = [string] , hide = True ) [EOL] fame = open ( tmp , [string] ) . readlines ( ) [EOL] os . remove ( tmp ) [EOL] [EOL] if not fame [ [number] ] . startswith ( [string] ) : [EOL] log ( [string] , level = [string] ) [EOL] errs = [ ] [EOL] for ln in fame : [EOL] if ln . startswith ( [string] ) : [EOL] break [EOL] errs . append ( ln ) [EOL] print_block ( [string] . join ( errs ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] log ( [string] ) [EOL] r = ctx . run ( [string] , encoding = [string] , hide = True ) [EOL] author_emails = { } [EOL] seen_authors = set ( ) [EOL] for author in r . stdout . splitlines ( ) : [EOL] author = author . strip ( ) . split ( ) [EOL] email = None if [string] not in author [ - [number] ] else author [ - [number] ] [EOL] author = [string] . join ( [ x for x in author if [string] not in x ] ) [EOL] if email and author . lower ( ) not in seen_authors : [EOL] seen_authors . add ( author . lower ( ) ) [EOL] author_emails [ author ] = email [EOL] [EOL] print ( fame ) [EOL] [EOL] log ( [string] ) [EOL] auths = [ ] [EOL] for ln in fame [ [number] : ] : [EOL] ln = ln . strip ( ) [EOL] if not ln : [EOL] break [EOL] t_auth = ln . split ( [string] ) [ [number] ] [EOL] if t_auth . lower ( ) not in ( [string] , ) : [EOL] if t_auth in author_emails : [EOL] t_auth += [string] % author_emails [ t_auth ] [EOL] auths . append ( t_auth . strip ( ) ) [EOL] [EOL] with open ( [string] , [string] ) as fin : [EOL] in_contents = fin . readlines ( ) [EOL] [EOL] out_contents = [ ] [EOL] for ln in in_contents : [EOL] ln = ln . strip ( [string] ) [EOL] if ln == [string] : [EOL] break [EOL] out_contents . append ( ln ) [EOL] [EOL] if auths : [EOL] out_contents . append ( [string] ) [EOL] for t_auth in auths : [EOL] out_contents . append ( [string] % t_auth ) [EOL] [EOL] out_contents = [string] . join ( out_contents ) [EOL] if draft : [EOL] log ( [string] ) [EOL] print_block ( out_contents ) [EOL] else : [EOL] with open ( [string] , [string] ) as fout : [EOL] fout . write ( out_contents ) [EOL] log ( [string] ) [EOL] [EOL] run ( ctx , [string] , draft ) [EOL] return [EOL] [EOL] [EOL] @ invoke . task def todos ( ctx , draft = False ) : [EOL] [docstring] [EOL] log ( [string] ) [EOL] t_done = get_todos ( [string] ) [EOL] if not t_done : [EOL] log ( [string] ) [EOL] return [EOL] else : [EOL] log ( [string] % len ( t_done ) ) [EOL] [EOL] run ( ctx , [string] % TODO_CMD , draft ) [EOL] run ( ctx , [string] , draft ) [EOL] [EOL] cnt = [number] [EOL] for i , t in enumerate ( t_done ) : [EOL] t_words = t . strip ( ) . split ( ) [EOL] t_date = t_words [ [number] ] . replace ( [string] , [string] ) [EOL] t_context = None [EOL] t_ref = None [EOL] n_str = list ( ) [EOL] for w in t_words [ [number] : ] : [EOL] if w . startswith ( [string] ) : [EOL] t_context = w [ [number] : ] . lower ( ) [EOL] elif w . startswith ( [string] ) : [EOL] try : [EOL] t_ref = int ( w [ [number] : ] ) [EOL] except ValueError : [EOL] log ( [string] % w , level = [string] ) [EOL] sys . exit ( [number] ) [EOL] else : [EOL] n_str . append ( w ) [EOL] n_str = [string] . join ( n_str ) [EOL] [EOL] if t_context is None : [EOL] log ( [string] , level = [string] ) [EOL] t_context = [string] [EOL] if t_context in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] if not t_context . endswith ( [string] ) : [EOL] t_context += [string] [EOL] if not t_context . endswith ( [string] ) : [EOL] t_context += [string] [EOL] elif t_context not in ( [string] , [string] ) : [EOL] log ( [string] % t_context , level = [string] ) [EOL] continue [EOL] [EOL] if t_ref is None : [EOL] t_ref = [string] % ( t_context [ [number] ] . upper ( ) , t_date , i + [number] ) [EOL] [EOL] if draft : [EOL] t_file = [string] % ( t_ref , t_context ) [EOL] log ( [string] % ( t_file , n_str ) ) [EOL] else : [EOL] t_file = create_change_item ( t_ref , t_context , n_str ) [EOL] log ( [string] % ( os . path . basename ( t_file ) , n_str ) ) [EOL] run ( ctx , [string] % t_file , draft ) [EOL] cnt += [number] [EOL] [EOL] if cnt > [number] : [EOL] tmp_str = [string] % cnt [EOL] if draft : [EOL] tmp_str = [string] % tmp_str [EOL] else : [EOL] tmp_str = [string] % tmp_str [EOL] log ( tmp_str ) [EOL] [EOL] if draft : [EOL] log ( [string] ) [EOL] else : [EOL] log ( [string] ) [EOL] open ( [string] , [string] ) . close ( ) [EOL] run ( ctx , [string] , draft ) [EOL] run ( ctx , [string] , draft ) [EOL] [EOL] return [EOL] [EOL] [EOL] @ invoke . task def changelog ( ctx , draft = False ) : [EOL] [docstring] [EOL] todos ( ctx , draft = draft ) [EOL] rel_ver = ctx . run ( [string] , hide = True ) . stdout [EOL] if rel_ver . startswith ( [string] ) or rel_ver . startswith ( [string] ) : [EOL] rel_ver = rel_ver . split ( [string] ) [ - [number] ] . strip ( [string] ) [EOL] else : [EOL] rel_ver = VERSION [EOL] [EOL] curr_md = open ( [string] , [string] ) . read ( ) [EOL] if draft : [EOL] ctx . run ( f" [string] { rel_ver } [string] " , hide = True ) [EOL] log ( [string] ) [EOL] md_content = changelog_rst_to_md ( ctx , [string] ) [EOL] new_md = insert_text ( curr_md , md_content , [string] ) [EOL] rst_content = open ( [string] , [string] ) . read ( ) [EOL] os . remove ( [string] ) [EOL] log ( [string] ) [EOL] print_block ( create_docs_changelog ( rst_content , write = False ) ) [EOL] [EOL] else : [EOL] if os . path . exists ( [string] ) : [EOL] os . remove ( [string] ) [EOL] ctx . run ( [string] ) [EOL] ctx . run ( f' [string] { rel_ver }' , hide = True ) [EOL] ctx . run ( [string] ) [EOL] md_content = changelog_rst_to_md ( ctx , [string] ) [EOL] new_md = insert_text ( curr_md , md_content , [string] ) [EOL] with open ( [string] , [string] ) as fout : [EOL] fout . writelines ( new_md ) [EOL] ctx . run ( [string] ) [EOL] rst_content = open ( [string] , [string] ) . read ( ) [EOL] os . remove ( [string] ) [EOL] ctx . run ( [string] ) [EOL] doc_file = create_docs_changelog ( rst_content ) [EOL] ctx . run ( [string] % doc_file ) [EOL] [EOL] return [EOL]	
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List [EOL] import frequent [EOL] import typing [EOL] import tests [EOL] [docstring] [EOL] from dataclasses import dataclass [EOL] from uuid import UUID [EOL] [EOL] from frequent import messaging [EOL] [EOL] [EOL] @ dataclass class BasicMessage ( messaging . Message ) : [EOL] target = ... [EOL] code = ... [EOL] [EOL] [EOL] @ messaging . message class DecoratedMessage : [EOL] to = ... [EOL] sender = ... [EOL] text = ... [EOL] [EOL] [EOL] class DecoratedHandler ( messaging . MessageHandler ) : [EOL] [EOL] def handle ( self , msg ) : [EOL] if msg . to == [string] : [EOL] self . bus ( DecoratedMessage ( msg . sender , msg . to , [string] ) ) [EOL] return [EOL] [EOL] [EOL] class TestMessage ( object ) : [EOL] [docstring] [EOL] [EOL] def test_create ( self ) : [EOL] msg = BasicMessage ( [string] , [number] ) [EOL] assert isinstance ( msg . id , UUID ) [EOL] assert msg . target == [string] [EOL] assert msg . code == [number] [EOL] [EOL] [EOL] def test_message_decorator ( ) : [EOL] [docstring] [EOL] msg = DecoratedMessage ( [string] , [string] , [string] ) [EOL] assert msg . to == [string] [EOL] assert msg . sender == [string] [EOL] assert msg . text == [string] [EOL] assert isinstance ( msg . id , UUID ) [EOL] return [EOL] [EOL] [EOL] def TestNoHandlersFoundException ( object ) : [EOL] [docstring] [EOL] [EOL] def test_exception ( self ) : [EOL] ex = messaging . NoHandlersFoundException ( DecoratedMessage ) [EOL] assert str ( ex ) == [string] [EOL] return [EOL] [EOL] [EOL] class TestMessageBus ( object ) : [EOL] [docstring] [EOL] [EOL] def test_create ( self ) : [EOL] t_bus = messaging . MessageBus ( ) [EOL] t_msg = DecoratedMessage ( [string] , [string] , [string] ) [EOL] try : [EOL] t_bus . handle ( t_msg ) [EOL] assert False [EOL] except messaging . NoHandlersFoundException : [EOL] assert True [EOL] try : [EOL] t_bus ( t_msg ) [EOL] assert False [EOL] except messaging . NoHandlersFoundException : [EOL] assert True [EOL] return [EOL] [EOL] [EOL] class TestHandlerRegistry ( object ) : [EOL] [docstring] [EOL] [EOL] def test_create ( self ) : [EOL] registry = messaging . HandlerRegistry ( ) [EOL] assert len ( registry ) == [number] [EOL] return [EOL] [EOL] def test_usage ( self ) : [EOL] registry = messaging . HandlerRegistry ( ) [EOL] [EOL] t_bus = messaging . MessageBus ( ) [EOL] t_handler_a = DecoratedHandler ( t_bus ) [EOL] [EOL] registry . add ( DecoratedMessage , t_handler_a ) [EOL] assert len ( registry ) == [number] [EOL] assert registry . get ( DecoratedMessage ) == [ t_handler_a ] [EOL] assert registry . get ( BasicMessage ) is None [EOL] [EOL] thl = registry . remove ( DecoratedMessage ) [EOL] assert len ( thl ) == [number] [EOL] assert len ( registry ) == [number] [EOL] assert thl [ [number] ] == t_handler_a [EOL] [EOL] o_bus = messaging . MessageBus ( ) [EOL] t_handler_b = DecoratedHandler ( o_bus ) [EOL] registry . add ( DecoratedMessage , t_handler_b , t_handler_a ) [EOL] assert len ( registry ) == [number] [EOL] assert len ( registry [ DecoratedMessage ] ) == [number] [EOL] assert registry . get ( DecoratedMessage ) == [ t_handler_b , t_handler_a ] [EOL] [EOL] registry . clear ( ) [EOL] assert len ( registry ) == [number] [EOL] try : [EOL] _ = registry [ DecoratedMessage ] [EOL] assert False [EOL] except messaging . NoHandlersFoundException : [EOL] assert True [EOL] return [EOL] [EOL] [EOL] def test_chain ( ) : [EOL] [docstring] [EOL] msg_q = BasicMessage ( [string] , - [number] ) [EOL] msg_a = BasicMessage ( [string] , [number] ) [EOL] [EOL] log_ids = [ ] [EOL] log_res = [ ] [EOL] [EOL] class LogMsgHandler ( messaging . MessageHandler ) : [EOL] def handle ( self , msg , successor = None ) : [EOL] log_ids . append ( msg . id ) [EOL] if successor : [EOL] successor ( msg ) [EOL] return [EOL] [EOL] def save_result ( msg ) : [EOL] log_res . append ( f"{ msg . target } [string] { msg . code }" ) [EOL] if msg . code == [number] : [EOL] log_res . append ( [string] ) [EOL] return [EOL] [EOL] bus = messaging . MessageBus ( ) [EOL] log_handler = LogMsgHandler ( bus ) [EOL] [EOL] chained = messaging . chain ( log_handler , save_result ) [EOL] chained ( msg_q ) [EOL] chained ( msg_a ) [EOL] [EOL] assert len ( log_ids ) == [number] [EOL] assert log_ids [ [number] ] == msg_q . id [EOL] assert log_ids [ [number] ] == msg_a . id [EOL] [EOL] assert len ( log_res ) == [number] [EOL] assert log_res [ [number] ] == f"{ msg_q . target } [string] { msg_q . code }" [EOL] assert log_res [ [number] ] == f"{ msg_a . target } [string] { msg_a . code }" [EOL] assert log_res [ [number] ] == [string] [EOL] [EOL] log_ids . clear ( ) [EOL] log_res . clear ( ) [EOL] [EOL] def check_target ( msg , successor ) : [EOL] if msg . target == [string] : [EOL] return successor ( msg ) [EOL] return [EOL] [EOL] chained_two = messaging . chain ( log_handler , check_target , save_result ) [EOL] chained_two ( msg_q ) [EOL] chained_two ( msg_a ) [EOL] [EOL] assert len ( log_ids ) == [number] [EOL] assert log_ids [ [number] ] == msg_q . id [EOL] assert log_ids [ [number] ] == msg_a . id [EOL] [EOL] assert len ( log_res ) == [number] [EOL] assert log_res [ [number] ] == f"{ msg_a . target } [string] { msg_a . code }" [EOL] assert log_res [ [number] ] == [string] [EOL] [EOL] chained_break = messaging . chain ( save_result , check_target ) [EOL] try : [EOL] chained_break ( msg_a ) [EOL] assert False [EOL] except TypeError : [EOL] assert True [EOL] [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $DecoratedMessage$ 0 0 0 0 $DecoratedMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 $DecoratedMessage$ 0 0 0 $DecoratedMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $tests.test_messaging.BasicMessage$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_messaging.BasicMessage$ 0 0 0 0 0 0 0 $tests.test_messaging.BasicMessage$ 0 0 0 0 0 0 $tests.test_messaging.BasicMessage$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_messaging.DecoratedMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $tests.test_messaging.DecoratedMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.test_messaging.DecoratedMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.test_messaging.DecoratedHandler$ 0 $tests.test_messaging.DecoratedHandler$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $BasicMessage$ 0 $frequent.messaging.T_Handler$ 0 0 0 0 0 0 0 0 0 $BasicMessage$ 0 0 0 0 0 $frequent.messaging.T_Handler$ 0 0 $frequent.messaging.T_Handler$ 0 $BasicMessage$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] from tempfile import mkstemp [EOL] [EOL] from frequent import config [EOL] [EOL] [EOL] class TestConfiguration ( object ) : [EOL] [docstring] [EOL] [EOL] def test_usage ( self ) : [EOL] cfg = config . Configuration ( ) [EOL] assert len ( cfg ) == [number] [EOL] [EOL] try : [EOL] _ = cfg . a [EOL] assert False [EOL] except AttributeError : [EOL] assert True [EOL] [EOL] cfg [ [string] ] = [number] [EOL] assert cfg [ [string] ] == [number] [EOL] assert cfg . a == [number] [EOL] assert cfg . a == cfg [ [string] ] [EOL] [EOL] assert cfg == cfg [EOL] [EOL] cfg . a = [number] [EOL] assert cfg [ [string] ] == [number] [EOL] cfg . a += [number] [EOL] assert cfg [ [string] ] == [number] [EOL] [EOL] cfg [ [string] ] = [number] [EOL] cfg [ [string] ] = [number] [EOL] [EOL] for k , v in cfg [ [string] ] . items ( ) : [EOL] if k == [string] : [EOL] assert v == [number] [EOL] elif k == [string] : [EOL] assert v == [number] [EOL] [EOL] for k in ( [string] , [string] , [string] , [string] ) : [EOL] assert k in cfg . keys ( ) [EOL] [EOL] return [EOL] [EOL] def test_clear ( self ) : [EOL] cfg = config . Configuration ( ) [EOL] cfg [ [string] ] = [number] [EOL] cfg [ [string] ] = [string] [EOL] assert len ( cfg ) == [number] [EOL] [EOL] cfg . clear ( ) [EOL] assert len ( cfg ) == [number] [EOL] [EOL] return [EOL] [EOL] def test_copy ( self ) : [EOL] cfg = config . Configuration ( ) [EOL] cfg . a = [number] [EOL] cfg . b = [number] [EOL] cfg . c = [string] [EOL] assert cfg == cfg . copy ( ) [EOL] [EOL] return [EOL] [EOL] def test_file_functions ( self ) : [EOL] cfg = config . Configuration ( ) [EOL] cfg . a = [number] [EOL] cfg . b = [number] [EOL] cfg . c = [string] [EOL] cfg [ [string] ] = [number] [EOL] cfg [ [string] ] = [number] [EOL] cfg [ [string] ] = [string] [EOL] [EOL] _ , tmp_path = mkstemp ( suffix = [string] ) [EOL] try : [EOL] cfg . save ( tmp_path ) [EOL] loaded = config . Configuration . load ( tmp_path ) [EOL] finally : [EOL] os . remove ( tmp_path ) [EOL] assert cfg == loaded [EOL] [EOL] return [EOL] [EOL] [EOL] def test_get_set_config ( ) : [EOL] [docstring] [EOL] config . clear_config ( ) [EOL] [EOL] cfg = config . get_config ( ) [EOL] assert type ( cfg ) == config . Configuration [EOL] assert len ( cfg ) == [number] [EOL] [EOL] try : [EOL] config . get_config ( [string] ) [EOL] assert False [EOL] except KeyError : [EOL] assert True [EOL] [EOL] assert config . get_config ( [string] , [number] ) == [number] [EOL] [EOL] config . set_config ( [string] , [string] ) [EOL] assert config . get_config ( [string] ) == [string] [EOL] assert config . get_config ( [string] , [string] ) == [string] [EOL] [EOL] [EOL] def test_temp_config ( ) : [EOL] [docstring] [EOL] config . clear_config ( ) [EOL] [EOL] config . set_config ( [string] , [number] ) [EOL] [EOL] with config . temp_config ( a = [number] ) as tmp_cfg : [EOL] assert type ( tmp_cfg ) == config . Configuration [EOL] assert tmp_cfg . a == [number] [EOL] assert config . get_config ( [string] ) == [number] [EOL] config . set_config ( [string] , [number] ) [EOL] assert config . get_config ( [string] ) == [number] [EOL] assert config . get_config ( [string] ) == [number] [EOL] [EOL] return [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List , Union , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] from frequent import __version__ [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] release = __version__ [EOL] version = [string] . join ( release . split ( [string] ) [ : [number] ] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] source_suffix = [string] [EOL] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] html_theme_path = [ [string] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] html_theme_options = { [string] : [string] , [string] : True , [string] : [string] , [string] : False , [string] : True , [string] : True , [string] : True , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] todo_include_todos = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] __version__ = [string] [EOL]	0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Iterator , Optional , Callable , Any , List , Type , Dict , Tuple [EOL] import builtins [EOL] import src [EOL] import typing [EOL] [docstring] [EOL] from collections . abc import MutableMapping [EOL] from contextlib import contextmanager [EOL] from copy import copy [EOL] from functools import wraps [EOL] import json [EOL] from typing import Any [EOL] from typing import Callable [EOL] from typing import Dict [EOL] from typing import Iterator as T_Iterator [EOL] from typing import Optional [EOL] from typing import Tuple [EOL] from typing import Type [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] _GLOBAL_CONFIG = None [EOL] [EOL] [EOL] def _make_sentinel ( name = [string] ) : [EOL] [docstring] [EOL] class Sentinel ( object ) : [EOL] def __init__ ( self ) : [EOL] self . name = name [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . __class__ . __name__ , self . name ) [EOL] [EOL] def __nonzero__ ( self ) : [EOL] return False [EOL] [EOL] __bool__ = __nonzero__ [EOL] [EOL] return Sentinel ( ) [EOL] [EOL] [EOL] _MISSING = _make_sentinel ( ) [EOL] [EOL] [EOL] class Configuration ( MutableMapping ) : [EOL] [docstring] [EOL] __key_seperator__ = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . _storage = dict ( ) [EOL] return super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . __class__ . __name__ } [string] { repr ( self . _storage ) } [string] " [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] key , subkey = self . _key_helper ( key ) [EOL] rv = self . _storage [ key ] [EOL] if subkey : [EOL] rv = rv [ subkey ] [EOL] return rv [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] key , subkey = self . _key_helper ( key ) [EOL] if isinstance ( value , dict ) : [EOL] value = self . __class__ ( value ) [EOL] if subkey : [EOL] if key not in self . _storage : [EOL] self . _storage [ key ] = self . __class__ ( ) [EOL] self . _storage [ key ] [ subkey ] = value [EOL] else : [EOL] self . _storage [ key ] = value [EOL] return [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] key , subkey = self . _key_helper ( key ) [EOL] if subkey : [EOL] del self . _storage [ key ] [ subkey ] [EOL] else : [EOL] del self . _storage [ key ] [EOL] return [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _storage ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . _storage ) [EOL] [EOL] def __getattr__ ( self , name ) : [EOL] try : [EOL] rv = super ( ) . __getattribute__ ( name ) [EOL] except AttributeError as ex : [EOL] try : [EOL] rv = self [ name ] [EOL] except KeyError : [EOL] raise ex [EOL] return rv [EOL] [EOL] def __setattr__ ( self , name , value ) : [EOL] if name != [string] and name not in self . __dict__ : [EOL] return self . __setitem__ ( name , value ) [EOL] return super ( ) . __setattr__ ( name , value ) [EOL] [EOL] def __delattr__ ( self , name ) : [EOL] if name == [string] : [EOL] raise Exception ( [string] ) [EOL] elif name not in self . __dict__ : [EOL] return self . __delitem__ ( name ) [EOL] return super ( ) . __delattr__ ( name ) [EOL] [EOL] def clear ( self ) : [EOL] [docstring] [EOL] return self . _storage . clear ( ) [EOL] [EOL] def copy ( self ) : [EOL] [docstring] [EOL] rv = self . __class__ ( ) [EOL] rv . update ( copy ( self . _storage ) ) [EOL] return rv [EOL] [EOL] def dumps ( self , compact = True , ** kwargs ) : [EOL] [docstring] [EOL] json_kws = { } [EOL] json_kws [ [string] ] = True [EOL] if not compact : [EOL] json_kws [ [string] ] = [number] [EOL] json_kws . update ( kwargs ) [EOL] return json . dumps ( self . to_dict ( ) , ** json_kws ) [EOL] [EOL] @ classmethod def loads ( cls , text , ** kwargs ) : [EOL] [docstring] [EOL] data = json . loads ( text , ** kwargs ) [EOL] return cls . from_dict ( data ) [EOL] [EOL] def save ( self , path , ** kwargs ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as fout : [EOL] fout . write ( self . dumps ( compact = False , ** kwargs ) ) [EOL] return [EOL] [EOL] @ classmethod def load ( cls , path , ** kwargs ) : [EOL] [docstring] [EOL] with open ( path , [string] ) as fin : [EOL] text = fin . readlines ( ) [EOL] return cls . loads ( [string] . join ( text ) , ** kwargs ) [EOL] [EOL] @ classmethod def from_dict ( cls , data ) : [EOL] [docstring] [EOL] rv = cls ( ) [EOL] for k , v in data . items ( ) : [EOL] if isinstance ( v , dict ) : [EOL] v = cls . from_dict ( v ) [EOL] rv [ k ] = v [EOL] return rv [EOL] [EOL] def to_dict ( self ) : [EOL] [docstring] [EOL] rv = { } [EOL] for k , v in self . items ( ) : [EOL] if isinstance ( v , Configuration ) : [EOL] v = v . to_dict ( ) [EOL] rv [ k ] = v [EOL] return rv [EOL] [EOL] @ classmethod def _key_helper ( cls , key ) : [EOL] [docstring] [EOL] if cls . __key_seperator__ in key : [EOL] r_key , r_subkey = key . split ( cls . __key_seperator__ , [number] ) [EOL] else : [EOL] r_key = key [EOL] r_subkey = None [EOL] return r_key , r_subkey [EOL] [EOL] [EOL] def load_config ( path = None , config_cls = Configuration ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] if path : [EOL] _GLOBAL_CONFIG = config_cls . load ( path ) [EOL] else : [EOL] _GLOBAL_CONFIG = config_cls ( ) [EOL] return [EOL] [EOL] [EOL] def _ensure_config ( f ) : [EOL] @ wraps ( f ) def wrapper ( * args , ** kwargs ) : [EOL] global _GLOBAL_CONFIG [EOL] if _GLOBAL_CONFIG is None : [EOL] load_config ( ) [EOL] return f ( * args , ** kwargs ) [EOL] return wrapper [EOL] [EOL] [EOL] @ _ensure_config def save_config ( path ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] return _GLOBAL_CONFIG . save ( path ) [EOL] [EOL] [EOL] @ _ensure_config def get_config ( name = None , default = _MISSING ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] if not name : [EOL] return _GLOBAL_CONFIG . copy ( ) [EOL] if default == _MISSING : [EOL] return _GLOBAL_CONFIG [ name ] [EOL] return _GLOBAL_CONFIG . get ( name , default ) [EOL] [EOL] [EOL] @ _ensure_config def set_config ( name , value ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] _GLOBAL_CONFIG [ name ] = value [EOL] return [EOL] [EOL] [EOL] def clear_config ( ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] if _GLOBAL_CONFIG is not None : [EOL] _GLOBAL_CONFIG . clear ( ) [EOL] _GLOBAL_CONFIG = None [EOL] return [EOL] [EOL] [EOL] @ contextmanager @ _ensure_config def temp_config ( ** settings ) : [EOL] [docstring] [EOL] global _GLOBAL_CONFIG [EOL] curr_config = _GLOBAL_CONFIG . copy ( ) [EOL] try : [EOL] for k , v in settings . items ( ) : [EOL] set_config ( k , v ) [EOL] yield _GLOBAL_CONFIG . copy ( ) [EOL] finally : [EOL] _GLOBAL_CONFIG = curr_config [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Configuration'$ 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $'Configuration'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Configuration'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $'Configuration'$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 0 0 0 $src.frequent.config.Configuration$ 0 0 $src.frequent.config.Configuration$ 0 0 0 0 $src.frequent.config.Configuration$ 0 0 $src.frequent.config.Configuration$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $None$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $None$ 0 0 0 0 $builtins.str$ 0 $None
[comment] [EOL] [docstring] [EOL] from . __version__ import __version__ [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Type [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from abc import ABC [EOL] from abc import abstractmethod [EOL] from typing import Type [EOL] [EOL] [EOL] class UnitOfWork ( ABC ) : [EOL] [docstring] [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] if exc_type is not None : [EOL] self . rollback ( ) [EOL] else : [EOL] self . commit ( ) [EOL] return [EOL] [EOL] @ abstractmethod def commit ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abstractmethod def rollback ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class UnitOfWorkManager ( ABC ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def start ( self ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'UnitOfWork'$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Type[builtins.Exception]$ 0 $builtins.Exception$ 0 0 0 0 0 0 $typing.Type[builtins.Exception]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $UnitOfWork$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Type [EOL] import builtins [EOL] import src [EOL] import typing [EOL] [docstring] [EOL] from weakref import WeakValueDictionary [EOL] [EOL] [EOL] class Singleton ( type ) : [EOL] [docstring] [EOL] __instances = WeakValueDictionary ( ) [EOL] [EOL] def __call__ ( cls , * args , ** kwargs ) : [EOL] if cls not in cls . __instances : [EOL] instance = super ( ) . __call__ ( * args , ** kwargs ) [EOL] cls . __instances [ cls ] = instance [EOL] return cls . __instances [ cls ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , Iterable , Type , Optional [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from abc import ABC [EOL] from abc import abstractmethod [EOL] from typing import Any [EOL] from typing import Iterable [EOL] from typing import Optional [EOL] from typing import Type [EOL] [EOL] [EOL] class RepositoryException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class ObjectNotFoundError ( RepositoryException ) : [EOL] [docstring] [EOL] __obj_cls__ = object [EOL] [EOL] def __init__ ( self , id , field = [string] ) : [EOL] return super ( ) . __init__ ( f" [string] { self . __obj_cls__ . __name__ } [string] { field } [string] { id } [string] " ) [EOL] [EOL] [EOL] class Repository ( ABC ) : [EOL] [docstring] [EOL] __not_found_ex__ = ObjectNotFoundError [EOL] [EOL] @ abstractmethod def add ( self , obj ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abstractmethod def all ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abstractmethod def _get ( self , id ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def get ( self , id ) : [EOL] [docstring] [EOL] obj = self . _get ( id ) [EOL] if obj is None : [EOL] raise self . __not_found_ex__ ( id ) [EOL] return obj [EOL] [EOL] @ abstractmethod def remove ( self , id ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[ObjectNotFoundError]$ 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0