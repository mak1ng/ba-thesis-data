	0
from typing import Any [EOL] import typing [EOL] def dev_cors_middleware ( get_response ) : [EOL] [docstring] [EOL] def middleware ( request ) : [EOL] response = get_response ( request ) [EOL] [EOL] response [ [string] ] = [string] [EOL] response [ [string] ] = [string] [EOL] response [ [string] ] = [string] [EOL] response [ [string] ] = [string] [EOL] return response [EOL] return middleware [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class PublicationsAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Tuple , Type , Any [EOL] import logging [EOL] import typing [EOL] import usados [EOL] [docstring] [EOL] [EOL] import logging [EOL] [EOL] [comment] [EOL] from rest_framework import status , viewsets [EOL] from rest_framework . exceptions import MethodNotAllowed [EOL] from rest_framework . permissions import AllowAny , IsAuthenticated [EOL] from rest_framework . response import Response [EOL] from rest_framework . filters import SearchFilter , OrderingFilter [EOL] [EOL] [comment] [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] [EOL] [comment] [EOL] from . models import Publications [EOL] [comment] [EOL] from . serializers import PublicationCreateSerializer , PublicationsModelSerializer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class PublicationsViewSet ( viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] queryset = Publications . objects . all ( ) [EOL] serializer_class = PublicationsModelSerializer [EOL] [EOL] [comment] [EOL] filter_backends = ( SearchFilter , OrderingFilter , DjangoFilterBackend ) [EOL] search_fields = ( [string] , [string] ) [EOL] ordering_filters = ( [string] , [string] ) [EOL] filterset_fields = ( [string] , [string] ) [EOL] [EOL] def get_permissions ( self ) : [EOL] [docstring] [EOL] if self . action in [ [string] ] : [EOL] permissions = [ AllowAny , ] [EOL] else : [EOL] permissions = [ IsAuthenticated , ] [EOL] return [ p ( ) for p in permissions ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def destroy ( self , request , pk = None ) : [EOL] raise MethodNotAllowed ( [string] ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] serializer = PublicationCreateSerializer ( data = request . data , context = { [string] : request } ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] publication = serializer . save ( ) [EOL] [EOL] data = self . get_serializer ( publication ) . data [EOL] return Response ( data , status = status . HTTP_201_CREATED ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.publications.serializers.PublicationCreateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.publications.serializers.PublicationCreateSerializer$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $usados.publications.serializers.PublicationCreateSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import usados [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] [docstring] [EOL] [EOL] name = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] is_active = models . BooleanField ( _ ( [string] ) , default = True , ) [EOL] created = models . DateTimeField ( _ ( [string] ) , auto_now_add = True , help_text = [string] ) [EOL] modified = models . DateTimeField ( _ ( [string] ) , auto_now = True , help_text = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . name ) [EOL] [EOL] [EOL] class Publications ( models . Model ) : [EOL] [docstring] [EOL] TYPE_OF_PUBLICATION = ( ( [number] , [string] ) , ( [number] , [string] ) , ) [EOL] profile = models . ForeignKey ( [string] , on_delete = models . CASCADE , related_name = [string] , ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] model = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] branch = models . CharField ( _ ( [string] ) , max_length = [number] , ) [EOL] type_of_publication = models . IntegerField ( choices = TYPE_OF_PUBLICATION , default = [number] , db_index = True ) [EOL] price = models . DecimalField ( _ ( [string] ) , default = [number] , max_digits = [number] , decimal_places = [number] ) [EOL] kilometers = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] city = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True , null = True ) [EOL] category = models . ForeignKey ( Category , on_delete = models . CASCADE ) [EOL] [EOL] is_active = models . BooleanField ( _ ( [string] ) , default = True , ) [EOL] is_premium = models . BooleanField ( _ ( [string] ) , default = False , ) [EOL] created = models . DateTimeField ( _ ( [string] ) , auto_now_add = True , help_text = [string] ) [EOL] [EOL] modified = models . DateTimeField ( _ ( [string] ) , auto_now = True , help_text = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . title , self . branch , self . model ) [EOL] [EOL] def get_pictures ( self ) : [EOL] [docstring] [EOL] return self . pictures . all ( ) [EOL] [EOL] def change_status ( self ) : [EOL] [docstring] [EOL] self . is_active = False if self . is_active else True [EOL] self . save ( ) [EOL] [EOL] [EOL] class PublicationPicture ( models . Model ) : [EOL] [docstring] [EOL] profile = models . ForeignKey ( Publications , related_name = [string] , on_delete = models . CASCADE ) [EOL] picture = models . ImageField ( _ ( [string] ) , upload_to = [string] , blank = True , null = True ) [EOL] created = models . DateTimeField ( _ ( [string] ) , auto_now_add = True , help_text = [string] ) [EOL] modified = models . DateTimeField ( _ ( [string] ) , auto_now = True , help_text = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . picture ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.PublicationPicture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.PublicationPicture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.PublicationPicture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.PublicationPicture]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Type , Any [EOL] import typing [EOL] import usados [EOL] from rest_framework import serializers [EOL] from rest_framework . generics import get_object_or_404 [EOL] [EOL] [comment] [EOL] from usados . users . serializers import ProfileModelSerializer [EOL] [EOL] [comment] [EOL] from . models import Category , Publications [EOL] [EOL] [comment] [EOL] from usados . utils import DynamicFieldsModelSerializer [EOL] [EOL] [EOL] class PublicationsModelSerializer ( DynamicFieldsModelSerializer ) : [EOL] [docstring] [EOL] profile = ProfileModelSerializer ( read_only = True ) [EOL] pictures = serializers . StringRelatedField ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Publications [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PublicationCreateSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] title = serializers . CharField ( ) [EOL] model = serializers . CharField ( ) [EOL] branch = serializers . CharField ( ) [EOL] type_of_publication = serializers . CharField ( ) [EOL] price = serializers . CharField ( ) [EOL] kilometers = serializers . CharField ( ) [EOL] city = serializers . CharField ( ) [EOL] category = serializers . CharField ( ) [EOL] user = serializers . HiddenField ( default = serializers . CurrentUserDefault ( ) ) [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] user = data [ [string] ] [EOL] category = get_object_or_404 ( Category , id = data [ [string] ] ) [EOL] data . pop ( [string] ) [EOL] data . pop ( [string] ) [EOL] if user . profile . publications_numbers < [number] : [EOL] publication = Publications . objects . create ( profile = user . profile , category = category , ** data ) [EOL] user . profile . publications_numbers += [number] [EOL] user . profile . save ( ) [EOL] return publication [EOL] else : [EOL] raise serializers . ValidationError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.ProfileModelSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationsModelSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.publications.serializers.PublicationCreateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from usados . users . tests . factories import ProfileFactory , UserFactory [EOL] [EOL] from . factories import CategoryFactory [EOL] [EOL] [EOL] class UserAPITestCase ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . user = UserFactory ( ) [EOL] self . profile = ProfileFactory ( user = self . user ) [EOL] self . category = CategoryFactory ( ) [EOL] [EOL] [comment] [EOL] self . url = [string] [EOL] self . url_with_params = self . url + [string] [EOL] self . data = { [string] : self . profile , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : self . category . id } [EOL] [EOL] def test_post_publications_with_anonymous_user ( self ) : [EOL] response = self . client . post ( self . url , self . data , ** { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , status . HTTP_401_UNAUTHORIZED ) [EOL] [EOL] def test_post_publications_success ( self ) : [EOL] [docstring] [EOL] self . client . force_authenticate ( self . user ) [EOL] response = self . client . post ( self . url , self . data , ** { [string] : [string] } ) [EOL] self . assertTrue ( response . data [ [string] ] ) [EOL] self . assertFalse ( response . data [ [string] ] ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( self . profile . publications_numbers , [number] ) [EOL] [EOL] def test_get_publications_with_anonymous_user ( self ) : [EOL] response = self . client . get ( self . url , ** { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_get_publications_success ( self ) : [EOL] [docstring] [EOL] self . client . force_authenticate ( self . user ) [EOL] response = self . client . get ( self . url , ** { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_filter_publications_success ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( self . url_with_params , ** { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( len ( response . data [ [string] ] ) , [number] ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . client . logout ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import usados [EOL] import factory [EOL] [EOL] from . . models import Category , Publications [EOL] from usados . users . tests . factories import ProfileFactory [EOL] [EOL] [EOL] class CategoryFactory ( factory . DjangoModelFactory ) : [EOL] [EOL] class Meta : [EOL] model = Category [EOL] [EOL] name = factory . Sequence ( lambda n : [string] % n ) [EOL] [EOL] [EOL] class PublicationFactory ( factory . DjangoModelFactory ) : [EOL] [EOL] class Meta : [EOL] model = Publications [EOL] [EOL] profile = factory . SubFactory ( ProfileFactory ) [EOL] title = factory . Sequence ( lambda n : [string] % n ) [EOL] model = factory . Sequence ( lambda n : [string] % n ) [EOL] branch = factory . Sequence ( lambda n : [string] % n ) [EOL] profile = factory . SubFactory ( ProfileFactory ) [EOL] category = factory . SubFactory ( CategoryFactory ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 $typing.Type[usados.publications.tests.factories.CategoryFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.models.Publications]$ 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[usados.publications.tests.factories.PublicationFactory]$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from . factories import CategoryFactory , PublicationFactory [EOL] [EOL] [EOL] [comment] [EOL] class PublicationModelTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . category = CategoryFactory ( ) [EOL] self . publication = PublicationFactory ( ) [EOL] [EOL] def test_category__str__ ( self ) : [EOL] self . assertEqual ( str ( self . category ) , [string] ) [EOL] [EOL] def test_category_is_active ( self ) : [EOL] self . assertTrue ( self . category . is_active ) [EOL] [EOL] def test_publication__str__ ( self ) : [EOL] self . assertEqual ( str ( self . publication ) , [string] ) [EOL] [EOL] def test_publication_pictures ( self ) : [EOL] pictures = self . publication . get_pictures ( ) [EOL] self . assertEqual ( pictures . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from datetime import timedelta [EOL] [EOL] [comment] [EOL] import jwt [EOL] [comment] [EOL] from celery . decorators import task [EOL] [comment] [EOL] from django . conf import settings [EOL] from django . utils import timezone [EOL] [EOL] [EOL] def gen_verification_token ( user ) : [EOL] [docstring] [EOL] exp_date = timezone . now ( ) + timedelta ( days = [number] ) [EOL] payload = { [string] : user . username , [string] : int ( exp_date . timestamp ( ) ) , [string] : [string] } [EOL] token = jwt . encode ( payload , settings . SECRET_KEY , algorithm = [string] ) [EOL] return token . decode ( ) [EOL] [EOL] [EOL] @ task ( name = [string] , max_retries = [number] ) def send_confirmation_email ( user_pk ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . urls import include , path [EOL] [comment] [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] [comment] [EOL] from . views import UserViewSet [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , UserViewSet , basename = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type , Any [EOL] import typing [EOL] import usados [EOL] from django . contrib . auth import authenticate , password_validation [EOL] from rest_framework import serializers [EOL] from rest_framework . validators import UniqueValidator [EOL] [comment] [EOL] from rest_framework_simplejwt . tokens import RefreshToken [EOL] [EOL] from . models import Profile , User [EOL] [EOL] [EOL] class TokenSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] token = serializers . CharField ( max_length = [number] ) [EOL] [EOL] [EOL] class UserLoginSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] email = serializers . EmailField ( ) [EOL] password = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] user = authenticate ( email = data [ [string] ] , password = data [ [string] ] ) [EOL] if not user : [EOL] raise serializers . ValidationError ( [string] ) [EOL] if not user . profile . can_access ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [comment] [EOL] self . context [ [string] ] = user [EOL] refresh = RefreshToken . for_user ( user ) [EOL] self . context [ [string] ] = str ( refresh ) [EOL] self . context [ [string] ] = str ( refresh . access_token ) [EOL] return data [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] return self . context [ [string] ] , self . context [ [string] ] , self . context [ [string] ] [EOL] [EOL] [EOL] class UserModelSerializerToProfile ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] class Meta : [EOL] [docstring] [EOL] [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ProfileModelSerializer ( serializers . ModelSerializer ) : [EOL] user = UserModelSerializerToProfile ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class UserModelSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] profile = ProfileModelSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserSignUpSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] email = serializers . EmailField ( validators = [ UniqueValidator ( queryset = User . objects . all ( ) ) ] ) [EOL] [EOL] [comment] [EOL] password = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] password_confirmation = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] [EOL] [comment] [EOL] first_name = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] last_name = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] birthdate = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] [EOL] address = serializers . CharField ( min_length = [number] , max_length = [number] , required = False ) [EOL] user_type = serializers . IntegerField ( required = False ) [EOL] dni = serializers . CharField ( min_length = [number] , max_length = [number] , required = False ) [EOL] [EOL] def validate_birthdate ( self , data ) : [EOL] if not data : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return data [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] password = data [ [string] ] [EOL] password_confirmation = data [ [string] ] [EOL] if password != password_confirmation : [EOL] raise serializers . ValidationError ( [string] ) [EOL] password_validation . validate_password ( password ) [EOL] return data [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] data . pop ( [string] ) [EOL] [EOL] username = [string] . format ( data [ [string] ] , data [ [string] ] ) [EOL] user = User . objects . create_user ( email = data [ [string] ] , username = username , password = data [ [string] ] , first_name = data [ [string] ] , last_name = data [ [string] ] ) [EOL] data . pop ( [string] ) [EOL] data . pop ( [string] ) [EOL] data . pop ( [string] ) [EOL] data . pop ( [string] ) [EOL] [EOL] Profile . objects . create ( user = user , ** data ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.TokenSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserLoginSerializer]$ 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserLoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserModelSerializerToProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.ProfileModelSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[usados.users.serializers.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0
[docstring] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from . . models import User [EOL] from usados . users . tests . factories import ProfileFactory [EOL] [EOL] [EOL] [comment] [EOL] class UserModelTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create_user ( username = [string] , email = [string] , password = [string] , first_name = [string] , last_name = [string] , ) [EOL] self . profile = self . profile = ProfileFactory ( user = self . user ) [EOL] [EOL] def test__str__ ( self ) : [EOL] self . assertEqual ( str ( self . profile ) , [string] ) [EOL] [EOL] def test__publications_numbers ( self ) : [EOL] self . assertEqual ( self . profile . publications_numbers , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] [EOL] class UserAPITestCase ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] self . url = [string] [EOL] self . data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [comment] [EOL] [EOL] def test_singup_success ( self ) : [EOL] [docstring] [EOL] request = self . client . post ( self . url , self . data , ** { [string] : [string] } ) [EOL] self . assertEqual ( request . status_code , status . HTTP_201_CREATED ) [EOL] [EOL] def test_singup_without_email ( self ) : [EOL] [docstring] [EOL] self . data . pop ( [string] ) [EOL] request = self . client . post ( self . url , self . data , ** { [string] : [string] } ) [EOL] self . assertEqual ( request . status_code , status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def test_singup_with_differents_pss ( self ) : [EOL] [docstring] [EOL] self . data [ [string] ] = [string] [EOL] request = self . client . post ( self . url , self . data , ** { [string] : [string] } ) [EOL] self . assertEqual ( request . status_code , status . HTTP_400_BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import usados [EOL] [docstring] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from . . models import Profile , User [EOL] from . . serializers import ProfileModelSerializer , UserSignUpSerializer [EOL] [EOL] [EOL] [comment] [EOL] class SerializerTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create_user ( username = [string] , email = [string] , password = [string] , first_name = [string] , last_name = [string] , ) [EOL] self . profile = Profile . objects . create ( id = [number] , user = self . user , birthdate = [string] ) [EOL] self . profile_serializer = ProfileModelSerializer ( instance = self . profile ) [EOL] self . serializer_data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def test_profile_serializer ( self ) : [EOL] self . profile_serializer . data [ [string] ] = [string] [EOL] serializer = ProfileModelSerializer ( data = self . profile_serializer ) [EOL] self . assertFalse ( serializer . is_valid ( ) ) [EOL] [EOL] def test_user_singup_serializer ( self ) : [EOL] serializer = UserSignUpSerializer ( data = self . serializer_data ) [EOL] self . assertTrue ( serializer . is_valid ( ) ) [EOL] [EOL] def test_user_singup_pass_error_serializer ( self ) : [EOL] self . serializer_data [ [string] ] = [string] [EOL] serializer = UserSignUpSerializer ( data = self . serializer_data ) [EOL] self . assertFalse ( serializer . is_valid ( ) ) [EOL] self . assertEqual ( set ( serializer . errors . keys ( ) ) , set ( [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.ProfileModelSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.ProfileModelSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserSignUpSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserSignUpSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserSignUpSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserSignUpSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $usados.users.serializers.UserSignUpSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from rest_framework_simplejwt . views import TokenRefreshView [EOL] [EOL] urlpatterns = [ path ( settings . ADMIN_URL , admin . site . urls ) , path ( [string] , include ( ( [string] , [string] ) , namespace = [string] ) ) , path ( [string] , include ( ( [string] , [string] ) , namespace = [string] ) ) , path ( [string] , TokenRefreshView . as_view ( ) , name = [string] ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Union , List , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] import environ [EOL] import datetime [EOL] [EOL] ROOT_DIR = environ . Path ( __file__ ) - [number] [EOL] APPS_DIR = ROOT_DIR . path ( [string] ) [EOL] [EOL] env = environ . Env ( ) [EOL] [EOL] [comment] [EOL] SECRET_KEY = env ( [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = env . bool ( [string] , False ) [EOL] [EOL] [comment] [EOL] TIME_ZONE = [string] [EOL] LANGUAGE_CODE = [string] [EOL] SITE_ID = [number] [EOL] USE_I18N = True [EOL] USE_L10N = True [EOL] USE_TZ = True [EOL] [EOL] [comment] [EOL] DATABASES = { [string] : env . db ( [string] ) , } [EOL] DATABASES [ [string] ] [ [string] ] = True [EOL] [EOL] [comment] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] [comment] [EOL] WSGI_APPLICATION = [string] [EOL] AUTH_USER_MODEL = [string] [EOL] [comment] [EOL] DJANGO_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] THIRD_PARTY_APPS = [ [string] , [string] , [string] ] [EOL] LOCAL_APPS = [ [string] , [string] , ] [EOL] INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS [EOL] [EOL] [comment] [EOL] PASSWORD_HASHERS = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] STATIC_ROOT = str ( ROOT_DIR ( [string] ) ) [EOL] STATIC_URL = [string] [EOL] STATICFILES_DIRS = [ str ( APPS_DIR . path ( [string] ) ) , ] [EOL] STATICFILES_FINDERS = [ [string] , [string] , ] [EOL] [EOL] [comment] [EOL] MEDIA_ROOT = str ( APPS_DIR ( [string] ) ) [EOL] MEDIA_URL = [string] [EOL] [EOL] [comment] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ str ( APPS_DIR . path ( [string] ) ) , ] , [string] : { [string] : DEBUG , [string] : [ [string] , [string] , ] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] [comment] [EOL] SESSION_COOKIE_HTTPONLY = True [EOL] CSRF_COOKIE_HTTPONLY = True [EOL] SECURE_BROWSER_XSS_FILTER = True [EOL] X_FRAME_OPTIONS = [string] [EOL] [EOL] [comment] [EOL] EMAIL_BACKEND = env ( [string] , default = [string] ) [EOL] [EOL] [comment] [EOL] ADMIN_URL = [string] [EOL] ADMINS = [ ( [string] , [string] ) , ] [EOL] MANAGERS = ADMINS [EOL] [EOL] [comment] [EOL] INSTALLED_APPS += [ [string] ] [EOL] if USE_TZ : [EOL] CELERY_TIMEZONE = TIME_ZONE [EOL] CELERY_BROKER_URL = env ( [string] ) [EOL] CELERY_RESULT_BACKEND = CELERY_BROKER_URL [EOL] CELERY_ACCEPT_CONTENT = [ [string] ] [EOL] CELERY_TASK_SERIALIZER = [string] [EOL] CELERY_RESULT_SERIALIZER = [string] [EOL] CELERYD_TASK_TIME_LIMIT = [number] * [number] [EOL] CELERYD_TASK_SOFT_TIME_LIMIT = [number] [EOL] [EOL] [comment] [EOL] CELERY_TASK_ALWAYS_EAGER = True [EOL] CELERY_TASK_EAGER_PROPAGATES = True [EOL] [EOL] [comment] [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , [string] , [string] , ) , [string] : ( [string] , ) , [string] : ( [string] , ) , [string] : [string] , [string] : [number] , } [EOL] CSRF_COOKIE_SECURE = True [EOL] CORS_ORIGIN_ALLOW_ALL = True [EOL] [EOL] [comment] [EOL] [EOL] SIMPLE_JWT = { [string] : datetime . timedelta ( minutes = [number] ) , [string] : datetime . timedelta ( days = [number] ) , [string] : False , [string] : True , [string] : [string] , [string] : SECRET_KEY , [string] : None , [string] : ( [string] , ) , [string] : [string] , [string] : [string] , [string] : ( [string] , ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime . timedelta ( minutes = [number] ) , [string] : datetime . timedelta ( days = [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],typing.List[typing.Any],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0