from typing import Any , Tuple , Dict , List [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import json [EOL] import logging [EOL] [EOL] from typing import List , Tuple [EOL] [EOL] from utils import command [EOL] [EOL] [comment] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def docker_cleaner ( ) : [EOL] [docstring] [EOL] [EOL] cmd = [string] [EOL] out , ok = command ( cmd ) [EOL] if ok : [EOL] container_list = out . split ( ) [EOL] print ( [string] ) [EOL] docker_stop ( container_list ) [EOL] print ( [string] ) [EOL] docker_rm ( container_list ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def docker_host_port ( container ) : [EOL] [docstring] [EOL] [EOL] host_post = dict ( ) [EOL] cmd = [string] [EOL] out , ok = command ( cmd , [ [string] , container ] ) [EOL] if ok : [EOL] port_dict = json . loads ( out ) [EOL] for port in port_dict . keys ( ) : [EOL] local_port = port . split ( [string] ) [ [number] ] [EOL] host_post [ local_port ] = port_dict [ port ] [ [number] ] [ [string] ] [EOL] return host_post [EOL] [EOL] [EOL] def docker_rm ( container_list ) : [EOL] [docstring] [EOL] [EOL] cmd = [string] [EOL] out , ok = command ( cmd , container_list ) [EOL] if ok : [EOL] print ( [string] , out ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def docker_run ( image , image_cmd = [string] , network = [string] , options = [string] ) : [EOL] [docstring] [EOL] [EOL] cmd = f" [string] { network } [string] { options } [string] { image } [string] { image_cmd }" [EOL] out , ok = command ( cmd ) [EOL] if out : [EOL] print ( [string] , out ) [EOL] return out [ : [number] ] , True [EOL] else : [EOL] print ( [string] ) [EOL] return [string] , False [EOL] [EOL] [EOL] def docker_stop ( container_list ) : [EOL] [docstring] [EOL] [EOL] cmd = [string] [EOL] out , ok = command ( cmd , container_list ) [EOL] if ok : [EOL] print ( [string] , out ) [EOL] else : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] from typing import List , Optional , Any , Union [EOL] import logging [EOL] import sqlite3 [EOL] import builtins [EOL] import src [EOL] import typing [EOL] import logging [EOL] import os [EOL] import re [EOL] import sqlite3 [EOL] [EOL] from pyinotify import ( IN_MODIFY , Notifier , ProcessEvent , WatchManager ) [EOL] from typing import Union [EOL] [EOL] from docker import docker_cleaner , docker_host_port , docker_run [EOL] from utils import banner , command , get_local_ip , iptables_cleaner [EOL] [EOL] [comment] [EOL] HOME = os . getenv ( [string] ) [EOL] CURRENT_CONTAINER = None [EOL] INTERFACE = [string] [EOL] KERN_LOG_PATH = [string] [EOL] KERN_LOG_CONTENT = open ( KERN_LOG_PATH , [string] ) . readlines ( ) [EOL] KERN_LOG_LEN = len ( KERN_LOG_CONTENT ) [EOL] [EOL] [comment] [EOL] HONEYPOT_DOCKER_IMAGE = [string] [EOL] HONEYPOT_DOCKER_IMAGE_CMD = [string] [EOL] HONEYPOT_DOCKER_OPTIONS = [string] f" [string] { HOME } [string] " [EOL] HONEYPOT_DOCKER_SERVICE_PORT = [string] [EOL] HONEYPOT_SERVICE_PORT = [string] [EOL] [EOL] [comment] [EOL] DB = sqlite3 . connect ( [string] ) [EOL] CONN = DB . cursor ( ) [EOL] [EOL] [comment] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def attacker_exists ( ip ) : [EOL] [docstring] [EOL] [EOL] CONN . execute ( f" [string] { ip } [string] " ) [EOL] rows = CONN . fetchall ( ) [EOL] return len ( rows ) == [number] [EOL] [EOL] [EOL] def create_attacker ( ip , container ) : [EOL] [docstring] [EOL] [EOL] CONN . execute ( f" [string] { ip } [string] { container } [string] " ) [EOL] return db_commit ( ) [EOL] [EOL] [EOL] def create_table ( ) : [EOL] [docstring] [EOL] [EOL] CONN . execute ( [string] ) [EOL] return db_commit ( ) [EOL] [EOL] [EOL] def db_commit ( ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] DB . commit ( ) [EOL] return True [EOL] except sqlite3 . Error : [EOL] DB . rollback ( ) [EOL] return False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def create_container ( ) : [EOL] [docstring] [EOL] global CURRENT_CONTAINER [EOL] [EOL] container , created = docker_run ( image = HONEYPOT_DOCKER_IMAGE , image_cmd = HONEYPOT_DOCKER_IMAGE_CMD , options = HONEYPOT_DOCKER_OPTIONS ) [EOL] CURRENT_CONTAINER = container [EOL] return container if created else created [EOL] [EOL] [EOL] def cleaner ( ) : [EOL] [docstring] [EOL] [EOL] banner ( ) [EOL] logger . info ( [string] ) [EOL] docker_cleaner ( ) [EOL] iptables_cleaner ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] class EventHandler ( ProcessEvent ) : [EOL] [EOL] def __init__ ( self , file_path , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . file_path = file_path [EOL] self . _last_position = [number] [EOL] logpats = [string] [EOL] self . _logpat = re . compile ( logpats ) [EOL] [EOL] def process_IN_MODIFY ( self , event ) : [EOL] global CURRENT_CONTAINER [EOL] global KERN_LOG_CONTENT [EOL] global KERN_LOG_LEN [EOL] [EOL] local_ip = get_local_ip ( INTERFACE ) [EOL] loglines = open ( self . file_path , [string] ) . readlines ( ) [EOL] loglines_len = len ( loglines ) [EOL] diff = loglines_len - KERN_LOG_LEN [EOL] changes = loglines [ - diff : ] [EOL] [EOL] KERN_LOG_CONTENT = open ( KERN_LOG_PATH , [string] ) . readlines ( ) [EOL] KERN_LOG_LEN = len ( KERN_LOG_CONTENT ) [EOL] [EOL] for log in changes : [EOL] if [string] not in log : [EOL] continue [EOL] [EOL] attacker_ip = ( re . search ( [string] , log ) ) . group ( [number] ) [EOL] [EOL] logger . debug ( [string] ) [EOL] logger . debug ( f" [string] { log }" ) [EOL] logger . debug ( f" [string] { attacker_ip } [string] " ) [EOL] if not attacker_exists ( attacker_ip ) : [EOL] logger . info ( f" [string] { attacker_ip } [string] " ) [EOL] created = create_attacker ( attacker_ip , CURRENT_CONTAINER ) [EOL] if not created : [EOL] return [EOL] [EOL] logger . info ( f" [string] { attacker_ip } [string] " ) [EOL] logger . info ( [string] ) [EOL] logger . info ( [string] ) [EOL] host_port = docker_host_port ( CURRENT_CONTAINER ) [ HONEYPOT_DOCKER_SERVICE_PORT ] [EOL] out , ok = command ( [string] f" [string] { local_ip } [string] { HONEYPOT_SERVICE_PORT } [string] " f" [string] { local_ip } [string] { host_port }" ) [EOL] if not ok : [EOL] return [EOL] [EOL] logger . info ( [string] ) [EOL] out , ok = command ( [string] f" [string] { attacker_ip } [string] { local_ip } [string] { HONEYPOT_SERVICE_PORT } [string] " f" [string] { local_ip } [string] { host_port }" ) [EOL] if not ok : [EOL] return [EOL] [EOL] logger . info ( [string] ) [EOL] container = create_container ( ) [EOL] if not container : [EOL] return [EOL] [EOL] host_port = docker_host_port ( CURRENT_CONTAINER ) [ HONEYPOT_DOCKER_SERVICE_PORT ] [EOL] logger . info ( f" [string] { host_port }" ) [EOL] [EOL] logger . info ( [string] ) [EOL] out , ok = command ( [string] f" [string] { local_ip } [string] { HONEYPOT_SERVICE_PORT } [string] " f" [string] { local_ip } [string] { host_port }" ) [EOL] if not ok : [EOL] return [EOL] [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . info ( f" [string] { attacker_ip } [string] " ) [EOL] [EOL] [EOL] def main ( ) : [EOL] banner ( ) [EOL] logger . info ( [string] ) [EOL] [EOL] logger . info ( [string] ) [EOL] container = create_container ( ) [EOL] if not container : [EOL] return [EOL] [EOL] host_port = docker_host_port ( CURRENT_CONTAINER ) [ HONEYPOT_DOCKER_SERVICE_PORT ] [EOL] logger . info ( [string] ) [EOL] [EOL] logger . info ( [string] ) [EOL] local_ip = get_local_ip ( INTERFACE ) [EOL] [EOL] out , ok = command ( [string] f" [string] { local_ip } [string] { HONEYPOT_SERVICE_PORT } [string] " f" [string] { local_ip } [string] { host_port }" ) [EOL] if not ok : [EOL] return [EOL] [EOL] out , ok = command ( f" [string] { INTERFACE } [string] " [string] [string] ) [EOL] if not ok : [EOL] return [EOL] [EOL] out , ok = command ( f" [string] { INTERFACE } [string] " [string] [string] ) [EOL] if not ok : [EOL] return [EOL] [EOL] out , ok = command ( f" [string] " , [ [string] , [string] , [string] , [string] ] ) [EOL] if not ok : [EOL] return [EOL] [EOL] logger . info ( [string] ) [EOL] [EOL] handler = EventHandler ( KERN_LOG_PATH ) [EOL] watch_manager = WatchManager ( ) [EOL] watch_manager . add_watch ( handler . file_path , IN_MODIFY ) [EOL] notifier = Notifier ( watch_manager , handler ) [EOL] notifier . loop ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $sqlite3.dbapi2.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.bool,builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Union[builtins.bool,builtins.str]$ 0 0 0 0 0 0 0 $typing.Union[builtins.bool,builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import smtplib [EOL] import builtins [EOL] import smtplib [EOL] [EOL] from email . MIMEMultipart import MIMEMultipart [EOL] from email . MIMEText import MIMEText [EOL] [EOL] [EOL] def send_email_alert ( attacker_ip , option ) : [EOL] [docstring] [EOL] [EOL] fromaddr = [string] [EOL] toaddr = [string] [EOL] msg = MIMEMultipart ( ) [EOL] msg [ [string] ] = fromaddr [EOL] msg [ [string] ] = toaddr [EOL] msg [ [string] ] = [string] [EOL] [EOL] if option == [number] : [EOL] body = [string] + attacker_ip [EOL] else : [EOL] body = [string] + attacker_ip [EOL] [EOL] msg . attach ( MIMEText ( body , [string] ) ) [EOL] [EOL] server = smtplib . SMTP ( [string] , [number] ) [EOL] server . starttls ( ) [EOL] server . login ( [string] , [string] ) [EOL] text = msg . as_string ( ) [EOL] server . sendmail ( fromaddr , toaddr , text ) [EOL] server . quit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0