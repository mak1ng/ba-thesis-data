	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] from typing import Dict , Type , Any [EOL] import builtins [EOL] import typing [EOL] import zulip_bots [EOL] from typing import Dict , Any [EOL] [EOL] class FollowupHandler ( object ) : [EOL] [docstring] [EOL] [EOL] def usage ( self ) : [EOL] return [string] [EOL] [EOL] def initialize ( self , bot_handler ) : [EOL] self . config_info = bot_handler . get_config_info ( [string] , optional = False ) [EOL] self . stream = self . config_info . get ( [string] , [string] ) [EOL] [EOL] def handle_message ( self , message , bot_handler ) : [EOL] if message [ [string] ] == [string] : [EOL] bot_response = [string] [EOL] bot_handler . send_reply ( message , bot_response ) [EOL] elif message [ [string] ] == [string] : [EOL] bot_handler . send_reply ( message , self . usage ( ) ) [EOL] else : [EOL] bot_response = self . get_bot_followup_response ( message ) [EOL] bot_handler . send_message ( dict ( type = [string] , to = self . stream , subject = message [ [string] ] , content = bot_response , ) ) [EOL] [EOL] def get_bot_followup_response ( self , message ) : [EOL] original_content = message [ [string] ] [EOL] original_sender = message [ [string] ] [EOL] temp_content = [string] % ( original_sender , ) [EOL] new_content = temp_content + original_content [EOL] [EOL] return new_content [EOL] [EOL] handler_class = FollowupHandler [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
from unittest . mock import patch [EOL] from requests . exceptions import ConnectionError [EOL] [EOL] from zulip_bots . test_lib import BotTestCase [EOL] from zulip_bots . bots . google_translate . google_translate import TranslateError [EOL] [EOL] help_text = [string] [EOL] [EOL] class TestGoogleTranslateBot ( BotTestCase ) : [EOL] bot_name = [string] [EOL] [EOL] def _test ( self , message , response , http_config_fixture , http_fixture = None ) : [EOL] with self . mock_config_info ( { [string] : [string] } ) , self . mock_http_conversation ( http_config_fixture ) : [EOL] if http_fixture : [EOL] with self . mock_http_conversation ( http_fixture ) : [EOL] self . verify_reply ( message , response ) [EOL] else : [EOL] self . verify_reply ( message , response ) [EOL] [EOL] def test_normal ( self ) : [EOL] self . _test ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_source_language_not_found ( self ) : [EOL] self . _test ( [string] , ( [string] [string] ) , [string] ) [EOL] [EOL] def test_target_language_not_found ( self ) : [EOL] self . _test ( [string] , ( [string] [string] ) , [string] ) [EOL] [EOL] def test_403 ( self ) : [EOL] self . _test ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] def test_bot_responds_to_empty_message ( self ) : [EOL] self . _test ( [string] , help_text , [string] ) [EOL] [EOL] def test_help_command ( self ) : [EOL] self . _test ( [string] , help_text , [string] ) [EOL] [EOL] def test_help_too_many_args ( self ) : [EOL] self . _test ( [string] , help_text , [string] ) [EOL] [EOL] def test_help_no_langs ( self ) : [EOL] self . _test ( [string] , help_text , [string] ) [EOL] [EOL] def test_quotation_in_text ( self ) : [EOL] self . _test ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_exception ( self ) : [EOL] with patch ( [string] , side_effect = Exception ) : [EOL] self . _test ( [string] , [string] , [string] ) [EOL] [EOL] def test_get_language_403 ( self ) : [EOL] with self . assertRaises ( TranslateError ) : [EOL] self . _test ( None , None , [string] ) [EOL] [EOL] def test_connection_error ( self ) : [EOL] with patch ( [string] , side_effect = ConnectionError ( ) ) , patch ( [string] ) : [EOL] self . _test ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Union , Dict , List [EOL] import typing [EOL] UNITS = { [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] , [string] : [ [number] , [number] , [string] ] } [EOL] [EOL] PREFIXES = { [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : - [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] ALIASES = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] HELP_MESSAGE = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] QUICK_HELP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] from typing import Dict , Type , Any , List [EOL] import builtins [EOL] import requests [EOL] import typing [EOL] import zulip_bots [EOL] import logging [EOL] from six . moves . urllib import parse [EOL] [EOL] import requests [EOL] [EOL] from bs4 import BeautifulSoup [EOL] [EOL] from typing import Dict , Any , Union , List [EOL] [EOL] def google_search ( keywords ) : [EOL] query = { [string] : keywords } [EOL] [comment] [EOL] page = requests . get ( [string] , params = query ) [EOL] [comment] [EOL] soup = BeautifulSoup ( page . text , [string] ) [EOL] [EOL] [comment] [EOL] anchors = soup . find ( id = [string] ) . findAll ( [string] ) [EOL] results = [ ] [EOL] [EOL] for a in anchors : [EOL] try : [EOL] [comment] [EOL] link = a [ [string] ] [EOL] except KeyError : [EOL] continue [EOL] [comment] [EOL] if not link . startswith ( [string] ) : [EOL] continue [EOL] [comment] [EOL] if a . text . strip ( ) == [string] and [string] in a [ [string] ] : [EOL] continue [EOL] [comment] [EOL] result = { [string] : [string] . format ( link ) , [string] : a . text } [EOL] results . append ( result ) [EOL] return results [EOL] [EOL] def get_google_result ( search_keywords ) : [EOL] help_message = [string] [EOL] [EOL] search_keywords = search_keywords . strip ( ) [EOL] [EOL] if search_keywords == [string] : [EOL] return help_message [EOL] elif search_keywords == [string] or search_keywords is None : [EOL] return help_message [EOL] else : [EOL] try : [EOL] results = google_search ( search_keywords ) [EOL] if ( len ( results ) == [number] ) : [EOL] return [string] [EOL] return [string] . format ( results [ [number] ] [ [string] ] , results [ [number] ] [ [string] ] ) [EOL] except Exception as e : [EOL] logging . exception ( str ( e ) ) [EOL] return [string] . format ( e ) [EOL] [EOL] class GoogleSearchHandler ( object ) : [EOL] [docstring] [EOL] [EOL] def usage ( self ) : [EOL] return [string] [EOL] [EOL] def handle_message ( self , message , bot_handler ) : [EOL] original_content = message [ [string] ] [EOL] result = get_google_result ( original_content ) [EOL] bot_handler . send_reply ( message , result ) [EOL] [EOL] handler_class = GoogleSearchHandler [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SLACK_TOKEN = [string] [EOL] [EOL] [comment] [EOL] ZULIP_USER = [string] [EOL] ZULIP_API_KEY = [string] [EOL] [EOL] [comment] [EOL] ZULIP_SITE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] ZULIP_USER = [string] [EOL] ZULIP_API_KEY = [string] [EOL] STREAM_FOR_NOTIFICATIONS = [string] [EOL] TRAC_BASE_TICKET_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TRAC_NOTIFY_FIELDS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] ZULIP_API_PATH = None [EOL] [EOL] [comment] [EOL] ZULIP_SITE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
import itertools [EOL] from __future__ import print_function , absolute_import [EOL] [EOL] import sys [EOL] import os [EOL] from itertools import cycle [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] OKBLUE = [string] [EOL] OKGREEN = [string] [EOL] WARNING = [string] [EOL] FAIL = [string] [EOL] ENDC = [string] [EOL] BLACKONYELLOW = [string] [EOL] WHITEONRED = [string] [EOL] BOLDRED = [string] [EOL] [EOL] GREEN = [string] [EOL] YELLOW = [string] [EOL] BLUE = [string] [EOL] MAGENTA = [string] [EOL] CYAN = [string] [EOL] [comment] [EOL] [EOL] from typing import Union , Text [EOL] [EOL] colors = cycle ( [ GREEN , YELLOW , BLUE , MAGENTA , CYAN ] ) [EOL] [EOL] [EOL] def print_err ( name , color , line ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if sys . version_info [ [number] ] == [number] and isinstance ( line , bytes ) : [EOL] line = line . decode ( [string] ) [EOL] [EOL] print ( [string] . format ( color , name , [string] * max ( [number] , [number] - len ( name ) ) , BOLDRED , line . rstrip ( ) , end = ENDC ) ) [EOL] [EOL] [comment] [EOL] sys . stdout . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $itertools.cycle[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0