[comment] [EOL] from typing import List , Pattern , Any , Iterable [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import pyfs [EOL] import io [EOL] import fs [EOL] import argparse [EOL] import re [EOL] import sys [EOL] from contextlib import suppress [EOL] from typing import Iterable [EOL] [EOL] import fs [EOL] from fs . base import FS [EOL] [EOL] from pyfs import PyCodeFS [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def get_parser ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , dest = [string] , type = get_scopes , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , choices = ( [string] , [string] ) , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , ) [EOL] [comment] [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] [comment] [EOL] [comment] [EOL] parser . add_argument ( [string] , nargs = [string] , help = [string] ) [EOL] [EOL] return parser [EOL] [EOL] [EOL] IDENTIFIER_PATT = re . compile ( [string] ) [EOL] [EOL] [EOL] def get_scopes ( dotted_name ) : [EOL] [comment] [EOL] if dotted_name == [string] : [EOL] return [string] [EOL] [EOL] parts = dotted_name . split ( [string] ) [EOL] for part in parts : [EOL] if not IDENTIFIER_PATT . fullmatch ( part ) : [EOL] raise argparse . ArgumentTypeError ( f" [string] { part } [string] " ) [EOL] return fs . path . join ( * parts ) [EOL] [EOL] [EOL] def scope_name_to_path ( filesystem , scope_path , valid_types = ( [string] , [string] ) , ) : [EOL] [comment] [EOL] for scope_type in valid_types : [EOL] possible_path = f"{ scope_path } [string] { scope_type } [string] " [EOL] if filesystem . exists ( possible_path ) : [EOL] return possible_path [EOL] raise fs . errors . ResourceNotFound ( possible_path ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] parser = get_parser ( ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] [comment] [EOL] if args . regex and args . identifier is None : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] if args . regex : [EOL] regex = re . compile ( args . identifier ) [EOL] [EOL] [comment] [EOL] if args . type is None : [EOL] args . type = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] args . type = set ( args . type ) [EOL] [EOL] [comment] [EOL] if args . regex or args . identifier is None : [EOL] [comment] [EOL] [comment] [EOL] file_patterns = [ f" [string] { scope_type }" for scope_type in args . type ] [EOL] else : [EOL] [comment] [EOL] file_patterns = [ f"{ args . identifier } [string] { scope_type }" for scope_type in args . type ] [EOL] [EOL] if args . recursive : [EOL] recursion_depth = None [EOL] else : [EOL] recursion_depth = [number] [EOL] [EOL] [comment] [EOL] output_separator = bytes ( args . separator , encoding = [string] ) . decode ( [string] ) [EOL] [EOL] for filename in args . files : [EOL] try : [EOL] f = open ( filename ) [EOL] program = PyCodeFS ( f . read ( ) ) [EOL] except Exception : [EOL] [comment] [EOL] print ( f" [string] { filename } [string] " , file = sys . stderr , ) [EOL] continue [EOL] finally : [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] with suppress ( fs . errors . ResourceNotFound ) : [EOL] [comment] [EOL] if args . recursive and args . path != [string] : [EOL] path = scope_name_to_path ( program , args . path ) [EOL] else : [EOL] path = args . path [EOL] [EOL] for code_filename in program . walk . files ( path , filter = file_patterns , max_depth = recursion_depth ) : [EOL] [comment] [EOL] filename , _ = fs . path . splitext ( fs . path . basename ( code_filename ) ) [EOL] [EOL] [comment] [EOL] if args . regex and not regex . match ( filename ) : [EOL] continue [EOL] [EOL] print ( program . gettext ( code_filename ) , end = output_separator ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyfs.PyCodeFS$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyfs.PyCodeFS$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyfs.PyCodeFS$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyfs.PyCodeFS$ 0 0 0 0 0 0 0 0 0 0 0
class Foo : [EOL] def bar ( self ) : [EOL] pass [EOL] [EOL] def baz ( ) : [EOL] pass [EOL] [EOL] abc = [string] [EOL] [EOL] def qux ( ) : [EOL] def quz ( ) : [EOL] pass [EOL] def quz ( ) : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0