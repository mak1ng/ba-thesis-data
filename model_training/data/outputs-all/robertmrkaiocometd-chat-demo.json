from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import sys [EOL] import asyncio [EOL] import logging [EOL] import os . path [EOL] [EOL] from quamash import QEventLoop [comment] [EOL] [comment] [EOL] from PyQt5 . QtGui import QGuiApplication [comment] [EOL] from PyQt5 . QtQml import ( QQmlApplicationEngine , qmlRegisterType , qmlRegisterUncreatableType ) [EOL] [comment] [EOL] [EOL] from aiocometd_chat_demo . chat_service import ChatService [EOL] from aiocometd_chat_demo . channels import ChannelsModel [EOL] from aiocometd_chat_demo . conversation import ConversationModel [EOL] from aiocometd_chat_demo . _metadata import AUTHOR , AUTHOR_EMAIL , VERSION , URL [EOL] [EOL] [EOL] [comment] [EOL] MAIN_QML_FILE = [string] [EOL] [comment] [EOL] HERE = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [comment] [EOL] MAIN_QML_PATH = os . path . join ( HERE , [string] , MAIN_QML_FILE ) [EOL] [comment] [EOL] QUICK_CONTROLS2_STYLE = [string] [EOL] [EOL] [EOL] def register_types ( ) : [EOL] [docstring] [EOL] qmlRegisterType ( ConversationModel , [string] , [number] , [number] , [string] ) [EOL] qmlRegisterType ( ChatService , [string] , [number] , [number] , [string] ) [EOL] qmlRegisterUncreatableType ( ChannelsModel , [string] , [number] , [number] , [string] , [string] ) [EOL] qmlRegisterUncreatableType ( ConversationModel , [string] , [number] , [number] , [string] , [string] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] [comment] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] [comment] [EOL] app = QGuiApplication ( sys . argv + [ [string] , QUICK_CONTROLS2_STYLE ] ) [EOL] loop = QEventLoop ( app ) [EOL] asyncio . set_event_loop ( loop ) [EOL] [EOL] [comment] [EOL] register_types ( ) [EOL] [EOL] [comment] [EOL] engine = QQmlApplicationEngine ( ) [EOL] [comment] [EOL] engine . rootContext ( ) . setContextProperty ( [string] , VERSION ) [EOL] engine . rootContext ( ) . setContextProperty ( [string] , AUTHOR ) [EOL] engine . rootContext ( ) . setContextProperty ( [string] , AUTHOR_EMAIL ) [EOL] engine . rootContext ( ) . setContextProperty ( [string] , URL ) [EOL] [comment] [EOL] engine . load ( MAIN_QML_PATH ) [EOL] [EOL] [comment] [EOL] with loop : [EOL] loop . run_forever ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [comment] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] TITLE = [string] [EOL] DESCRIPTION = [string] [string] [EOL] KEYWORDS = [string] [EOL] URL = [string] [EOL] VERSION = [string] [EOL] AUTHOR = [string] [EOL] AUTHOR_EMAIL = [string] [EOL]	0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Optional , Set , Dict , List , ClassVar [EOL] import typing [EOL] import PyQt5 [EOL] import conversation [EOL] import aiocometd_chat_demo [EOL] import builtins [EOL] [docstring] [EOL] from typing import List , ClassVar , Dict , Any , Optional , Set [EOL] from enum import IntEnum , Enum , unique [EOL] from bisect import bisect [EOL] from dataclasses import dataclass , field [EOL] [EOL] [comment] [EOL] from PyQt5 . QtCore import ( QAbstractListModel , Qt , QByteArray , QModelIndex , pyqtSignal ) [EOL] [comment] [EOL] [EOL] from . conversation import ConversationModel , ChatMessage [EOL] [EOL] [EOL] @ unique class ChannelType ( str , Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] GROUP = [string] [EOL] [comment] [EOL] USER = [string] [EOL] [EOL] [EOL] @ dataclass ( ) class ChannelItem : [EOL] [docstring] [EOL] [comment] [EOL] name = ... [EOL] [comment] [EOL] type = ... [EOL] [comment] [EOL] conversation = field ( init = False ) [EOL] [EOL] def __post_init__ ( self ) : [EOL] self . conversation = ConversationModel ( self . name ) [EOL] [EOL] def __lt__ ( self , other ) : [EOL] return self . name < other . name [EOL] [EOL] [EOL] @ unique class ChannelItemRole ( IntEnum ) : [EOL] [docstring] [EOL] [comment] [EOL] NAME = Qt . UserRole [EOL] [comment] [EOL] CONVERSATION = Qt . UserRole + [number] [EOL] [comment] [EOL] CHANNEL_TYPE = Qt . UserRole + [number] [EOL] [EOL] [EOL] @ dataclass ( ) class ChannelsModel ( QAbstractListModel ) : [comment] [EOL] [docstring] [EOL] [comment] [EOL] group_channel_name = ... [EOL] [comment] [EOL] group_channel = field ( init = False , repr = False ) [EOL] [comment] [EOL] _channels = field ( default_factory = list , init = False , repr = False ) [EOL] [comment] [EOL] _role_names = { ChannelItemRole . NAME : QByteArray ( [string] ) , ChannelItemRole . CONVERSATION : QByteArray ( [string] ) , ChannelItemRole . CHANNEL_TYPE : QByteArray ( [string] ) } [EOL] [comment] [EOL] [comment] [EOL] message_sending_requested = pyqtSignal ( str , str , str ) [EOL] [EOL] def __post_init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] [comment] [EOL] self . group_channel = ChannelItem ( name = self . group_channel_name , type = ChannelType . GROUP ) [EOL] [comment] [EOL] self . group_channel . conversation . message_sending_requested . connect ( lambda contents : self . message_sending_requested . emit ( self . group_channel . name , self . group_channel . type , contents ) ) [EOL] [EOL] [comment] [EOL] def rowCount ( self , parent = None ) : [EOL] [docstring] [EOL] [comment] [EOL] return len ( self . _channels ) + [number] [EOL] [EOL] def roleNames ( self ) : [EOL] [docstring] [EOL] return self . _role_names [EOL] [EOL] [comment] [EOL] [EOL] def data ( self , index , role = None ) : [EOL] [docstring] [EOL] channel = None [EOL] [comment] [EOL] if index . row ( ) == [number] : [EOL] channel = self . group_channel [EOL] [comment] [EOL] [comment] [EOL] elif [number] <= index . row ( ) < len ( self . _channels ) + [number] : [EOL] [comment] [EOL] channel = self . _channels [ index . row ( ) - [number] ] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if channel is not None : [EOL] if role == ChannelItemRole . NAME : [EOL] return channel . name [EOL] if role == ChannelItemRole . CONVERSATION : [EOL] return channel . conversation [EOL] if role == ChannelItemRole . CHANNEL_TYPE : [EOL] return channel . type . value [EOL] return None [EOL] [EOL] def _add_channel ( self , name ) : [EOL] [docstring] [EOL] [comment] [EOL] channel_item = ChannelItem ( name = name , type = ChannelType . USER ) [EOL] [comment] [EOL] channel_item . conversation . message_sending_requested . connect ( lambda contents : self . message_sending_requested . emit ( channel_item . name , channel_item . type , contents ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] index = bisect ( self . _channels , channel_item ) [EOL] [EOL] [comment] [EOL] self . beginInsertRows ( QModelIndex ( ) , index + [number] , index + [number] ) [EOL] [comment] [EOL] self . _channels . insert ( index , channel_item ) [EOL] [comment] [EOL] self . endInsertRows ( ) [EOL] [EOL] def _remove_channel ( self , name ) : [EOL] [docstring] [EOL] [comment] [EOL] index = self . _channel_index ( name ) [EOL] [comment] [EOL] if index >= [number] : [EOL] self . beginRemoveRows ( QModelIndex ( ) , index + [number] , index + [number] ) [EOL] [comment] [EOL] [comment] [EOL] channel_item = self . _channels . pop ( index ) [EOL] [comment] [EOL] [comment] [EOL] channel_item . conversation . disconnect ( ) [EOL] self . endRemoveRows ( ) [EOL] [EOL] def _channel_index ( self , name ) : [EOL] [docstring] [EOL] [comment] [EOL] left = [number] [EOL] right = len ( self . _channels ) - [number] [EOL] while left <= right : [EOL] [comment] [EOL] mid = left + ( right - left ) // [number] [EOL] if name < self . _channels [ mid ] . name : [EOL] right = mid - [number] [EOL] elif name > self . _channels [ mid ] . name : [EOL] left = mid + [number] [EOL] else : [EOL] return mid [EOL] [comment] [EOL] return - [number] [EOL] [EOL] def update_available_channels ( self , channel_names ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] current_names = set ( item . name for item in self . _channels ) [EOL] [comment] [EOL] dropped_channels = current_names - channel_names [EOL] new_channels = channel_names - current_names [EOL] [EOL] [comment] [EOL] for name in new_channels : [EOL] self . _add_channel ( name ) [EOL] [EOL] [comment] [EOL] for name in dropped_channels : [EOL] self . _remove_channel ( name ) [EOL] [EOL] [comment] [EOL] def add_incoming_message ( self , channel_name , channel_type , message ) : [EOL] [docstring] [EOL] [comment] [EOL] if channel_type == ChannelType . GROUP : [EOL] self . group_channel . conversation . add_incoming_message ( message ) [EOL] [EOL] [comment] [EOL] else : [EOL] [comment] [EOL] index = self . _channel_index ( channel_name ) [EOL] [comment] [EOL] if index >= [number] : [EOL] [comment] [EOL] channel = self . _channels [ index ] [EOL] [comment] [EOL] channel . conversation . add_incoming_message ( message ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $ChannelType$ 0 0 0 0 0 $ChannelItem.conversation.ConversationModel$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ConversationModel$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $"ChannelItem"$ 0 0 0 0 0 0 0 0 $"ChannelItem"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[ChannelItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[typing.Dict[builtins.int,PyQt5.QtCore.QByteArray]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[PyQt5.QtCore.pyqtSignal]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[PyQt5.QtCore.QModelIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,PyQt5.QtCore.QByteArray]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 $builtins.str$ 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $ChannelType$ 0 $conversation.ChatMessage$ 0 0 0 0 0 0 0 0 $ChannelType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $conversation.ChatMessage$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 $conversation.ChatMessage$ 0 0 0 0 0
[docstring] [EOL] from . _metadata import VERSION as __version__ [comment] [EOL] from . _metadata import AUTHOR as __author__ [comment] [EOL] from . _metadata import AUTHOR_EMAIL as __author_email__ [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] class ApplicationException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidStateError ( ApplicationException ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict , List , ClassVar [EOL] import PyQt5 [EOL] import typing [EOL] import aiocometd_chat_demo [EOL] import builtins [EOL] [docstring] [EOL] from typing import NamedTuple , List , ClassVar , Dict , Any , Optional [EOL] from datetime import datetime [EOL] from enum import IntEnum , unique [EOL] from dataclasses import dataclass , field [EOL] [EOL] [comment] [EOL] from PyQt5 . QtCore import ( QAbstractListModel , Qt , QByteArray , QModelIndex , QDateTime , pyqtSlot , pyqtSignal , pyqtProperty ) [EOL] [comment] [EOL] [EOL] [EOL] class ChatMessage ( NamedTuple ) : [EOL] [docstring] [EOL] [comment] [EOL] time = ... [EOL] [comment] [EOL] sender = ... [EOL] [comment] [EOL] contents = ... [EOL] [EOL] [EOL] @ unique class ItemRole ( IntEnum ) : [EOL] [docstring] [EOL] [comment] [EOL] TIME = Qt . UserRole [EOL] [comment] [EOL] SENDER = Qt . UserRole + [number] [EOL] [comment] [EOL] CONTENTS = Qt . UserRole + [number] [EOL] [EOL] [EOL] @ dataclass ( ) class ConversationModel ( QAbstractListModel ) : [comment] [EOL] [docstring] [EOL] [comment] [EOL] _channel = ... [EOL] [comment] [EOL] _messages = field ( default_factory = list , init = False , repr = False ) [EOL] [comment] [EOL] _role_names = { ItemRole . TIME : QByteArray ( [string] ) , ItemRole . SENDER : QByteArray ( [string] ) , ItemRole . CONTENTS : QByteArray ( [string] ) , } [EOL] [comment] [EOL] channel_changed = pyqtSignal ( str ) [EOL] [comment] [EOL] message_sending_requested = pyqtSignal ( str ) [EOL] [EOL] def __post_init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] [EOL] @ pyqtProperty ( str , notify = channel_changed ) def channel ( self ) : [EOL] [docstring] [EOL] return self . _channel [EOL] [EOL] [comment] [EOL] def rowCount ( self , parent = None ) : [EOL] [docstring] [EOL] return len ( self . _messages ) [EOL] [EOL] def roleNames ( self ) : [EOL] [docstring] [EOL] return self . _role_names [EOL] [EOL] [comment] [EOL] [EOL] def data ( self , index , role = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if [number] <= index . row ( ) < len ( self . _messages ) : [EOL] [comment] [EOL] message = self . _messages [ index . row ( ) ] [EOL] [comment] [EOL] if role == ItemRole . TIME : [EOL] return QDateTime ( message . time ) [EOL] if role == ItemRole . SENDER : [EOL] return message . sender [EOL] if role == ItemRole . CONTENTS : [EOL] return message . contents [EOL] return None [EOL] [EOL] @ pyqtSlot ( str , name = [string] ) def send_message ( self , contents ) : [EOL] [docstring] [EOL] self . message_sending_requested . emit ( contents ) [EOL] [EOL] @ pyqtSlot ( ChatMessage ) def add_incoming_message ( self , message ) : [EOL] [docstring] [EOL] self . beginInsertRows ( QModelIndex ( ) , len ( self . _messages ) , len ( self . _messages ) ) [EOL] self . _messages . append ( message ) [comment] [EOL] self . endInsertRows ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[typing.Dict[builtins.int,PyQt5.QtCore.QByteArray]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ClassVar[PyQt5.QtCore.pyqtSignal]$ 0 0 0 0 0 0 0 0 $typing.ClassVar[PyQt5.QtCore.pyqtSignal]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[PyQt5.QtCore.QModelIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,PyQt5.QtCore.QByteArray]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 0 $PyQt5.QtCore.QModelIndex$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import concurrent [EOL] import aiocometd_chat_demo [EOL] import concurrent . futures [EOL] [EOL] from asynctest import TestCase , mock [EOL] [EOL] from aiocometd_chat_demo . cometd import CometdClient , ClientState , MessageResponse , run_coro [EOL] from aiocometd_chat_demo . exceptions import InvalidStateError [EOL] [EOL] [EOL] class TestCometdClient ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . url = [string] [EOL] self . subscriptions = [ [string] , [string] ] [EOL] self . client = CometdClient ( self . url , self . subscriptions , self . loop ) [EOL] [EOL] def make_async_iterator ( self , iterable ) : [EOL] async def iterator ( instance ) : [EOL] for item in iterable : [EOL] yield item [EOL] return iterator [EOL] [EOL] def test_init ( self ) : [EOL] self . assertEqual ( self . client . _url , self . url ) [EOL] self . assertEqual ( self . client . _subscriptions , self . subscriptions ) [EOL] self . assertEqual ( self . client . _loop , self . loop ) [EOL] self . assertEqual ( self . client . _state , ClientState . DISCONNECTED ) [EOL] [EOL] @ mock . patch ( [string] ) def test_connect ( self , run_coro ) : [EOL] self . client . _connect = mock . MagicMock ( ) [EOL] [EOL] self . client . connect_ ( ) [EOL] [EOL] run_coro . assert_called_with ( self . client . _connect . return_value , self . client . _on_connect_done , self . client . _loop ) [EOL] [EOL] @ mock . patch ( [string] ) def test_connect_do_nothing_if_connected ( self , run_coro ) : [EOL] self . client . _state = ClientState . CONNECTED [EOL] self . client . _connect = mock . MagicMock ( ) [EOL] [EOL] self . client . connect_ ( ) [EOL] [EOL] run_coro . assert_not_called ( ) [EOL] [EOL] def test_disconnect ( self ) : [EOL] self . client . _connect_task = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . CONNECTED [EOL] [EOL] self . client . disconnect_ ( ) [EOL] [EOL] self . client . _connect_task . cancel . assert_called ( ) [EOL] [EOL] def test_disconnect_does_nothing_if_disconnected ( self ) : [EOL] self . client . _connect_task = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . DISCONNECTED [EOL] [EOL] self . client . disconnect_ ( ) [EOL] [EOL] self . client . _connect_task . cancel . assert_not_called ( ) [EOL] [EOL] def test_disconnect_does_nothing_in_error_state ( self ) : [EOL] self . client . _connect_task = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . ERROR [EOL] [EOL] self . client . disconnect_ ( ) [EOL] [EOL] self . client . _connect_task . cancel . assert_not_called ( ) [EOL] [EOL] def test_disconnect_error_on_no_task ( self ) : [EOL] self . client . _connect_task = None [EOL] self . client . _state = ClientState . CONNECTED [EOL] [EOL] with self . assertRaisesRegex ( InvalidStateError , [string] ) : [EOL] self . client . disconnect_ ( ) [EOL] [EOL] @ mock . patch ( [string] ) async def test__connect ( self , client_cls ) : [EOL] client = mock . MagicMock ( ) [EOL] client_cls . return_value = client [EOL] client . __aenter__ = mock . CoroutineMock ( return_value = client ) [EOL] client . __aexit__ = mock . CoroutineMock ( ) [EOL] client . subscribe = mock . CoroutineMock ( ) [EOL] messages = [ object ( ) , object ( ) ] [EOL] client . __aiter__ = self . make_async_iterator ( messages ) [EOL] loop = mock . MagicMock ( ) [EOL] cometd_client = CometdClient ( self . url , self . subscriptions , loop ) [EOL] cometd_client . message_received = mock . MagicMock ( ) [EOL] [EOL] await cometd_client . _connect ( ) [EOL] [EOL] client_cls . assert_called_with ( self . url , loop = loop ) [EOL] client . __aenter__ . assert_called ( ) [EOL] client . subscribe . assert_has_calls ( [ mock . call ( channel ) for channel in self . subscriptions ] ) [EOL] loop . call_soon_threadsafe . assert_has_calls ( [ mock . call ( cometd_client . message_received . emit , messages [ [number] ] ) , mock . call ( cometd_client . message_received . emit , messages [ [number] ] ) ] ) [EOL] self . assertEqual ( cometd_client . state , ClientState . DISCONNECTED ) [EOL] [EOL] @ mock . patch ( [string] ) async def test__connect_retruns_if_cancelled ( self , client_cls ) : [EOL] client = mock . MagicMock ( ) [EOL] client_cls . return_value = client [EOL] client . __aenter__ = mock . CoroutineMock ( return_value = client ) [EOL] client . __aexit__ = mock . CoroutineMock ( ) [EOL] client . subscribe = mock . CoroutineMock ( ) [EOL] client . receive = mock . CoroutineMock ( side_effect = concurrent . futures . CancelledError ( ) ) [EOL] loop = mock . MagicMock ( ) [EOL] cometd_client = CometdClient ( self . url , self . subscriptions , loop ) [EOL] cometd_client . message_received = mock . MagicMock ( ) [EOL] [EOL] await cometd_client . _connect ( ) [EOL] [EOL] client_cls . assert_called_with ( self . url , loop = loop ) [EOL] client . __aenter__ . assert_called ( ) [EOL] client . subscribe . assert_has_calls ( [ mock . call ( channel ) for channel in self . subscriptions ] ) [EOL] self . assertEqual ( cometd_client . state , ClientState . DISCONNECTED ) [EOL] [EOL] def test_on_connect_done_does_nothing_on_normal_return ( self ) : [EOL] future = mock . MagicMock ( ) [EOL] future . exception . return_value = None [EOL] self . client . _set_state = mock . MagicMock ( ) [EOL] self . client . error = mock . MagicMock ( ) [EOL] [EOL] self . client . _on_connect_done ( future ) [EOL] [EOL] self . client . _set_state . assert_not_called ( ) [EOL] self . client . error . emit . assert_not_called ( ) [EOL] [EOL] def test_on_connect_done_does_nothing_on_cancelled_error ( self ) : [EOL] future = mock . MagicMock ( ) [EOL] future . exception . side_effect = concurrent . futures . CancelledError ( ) [EOL] self . client . _set_state = mock . MagicMock ( ) [EOL] self . client . error = mock . MagicMock ( ) [EOL] [EOL] self . client . _on_connect_done ( future ) [EOL] [EOL] self . client . _set_state . assert_not_called ( ) [EOL] self . client . error . emit . assert_not_called ( ) [EOL] [EOL] def test_on_connect_done_set_error_on_exception ( self ) : [EOL] future = mock . MagicMock ( ) [EOL] future . exception . return_value = ValueError ( ) [EOL] self . client . _set_state = mock . MagicMock ( ) [EOL] self . client . error = mock . MagicMock ( ) [EOL] [EOL] self . client . _on_connect_done ( future ) [EOL] [EOL] self . assertEqual ( self . client . state , ClientState . ERROR ) [EOL] self . client . error . emit . assert_called_with ( future . exception . return_value ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_publish ( self , run_coro , partial_func ) : [EOL] channel = [string] [EOL] message = object ( ) [EOL] self . client . _client = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . CONNECTED [EOL] [EOL] response = self . client . publish ( channel , message ) [EOL] [EOL] self . client . _client . publish . assert_called_with ( channel , message ) [EOL] partial_func . assert_called_with ( self . client . _on_publish_done , response ) [EOL] run_coro . assert_called_with ( self . client . _client . publish . return_value , partial_func . return_value , self . loop ) [EOL] [EOL] def test_publish_error_if_not_connected ( self ) : [EOL] channel = [string] [EOL] message = object ( ) [EOL] [EOL] with self . assertRaisesRegex ( InvalidStateError , [string] [string] ) : [EOL] self . client . publish ( channel , message ) [EOL] [EOL] def test_publish_error_if_client_not_initialized ( self ) : [EOL] channel = [string] [EOL] message = object ( ) [EOL] self . client . _state = ClientState . CONNECTED [EOL] [EOL] with self . assertRaisesRegex ( InvalidStateError , [string] ) : [EOL] self . client . publish ( channel , message ) [EOL] [EOL] def test__on_publish_done_on_normal_return ( self ) : [EOL] future = mock . MagicMock ( ) [EOL] future . exception . return_value = None [EOL] response = MessageResponse ( ) [EOL] response . finished = mock . MagicMock ( ) [EOL] [EOL] self . client . _on_publish_done ( response , future ) [EOL] [EOL] self . assertIsNone ( response . error ) [EOL] self . assertEqual ( response . result , future . result . return_value ) [EOL] response . finished . emit . assert_called ( ) [EOL] [EOL] def test__on_publish_done_error_on_exception ( self ) : [EOL] future = mock . MagicMock ( ) [EOL] future . exception . return_value = ValueError ( ) [EOL] response = MessageResponse ( ) [EOL] response . finished = mock . MagicMock ( ) [EOL] [EOL] self . client . _on_publish_done ( response , future ) [EOL] [EOL] self . assertEqual ( response . error , future . exception . return_value ) [EOL] self . assertIsNone ( response . result ) [EOL] response . finished . emit . assert_called ( ) [EOL] [EOL] def test_set_state_connected ( self ) : [EOL] self . client . _state_signals [ ClientState . CONNECTED ] = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . DISCONNECTED [EOL] self . client . state_changed = mock . MagicMock ( ) [EOL] [EOL] self . client . state = ClientState . CONNECTED [EOL] [EOL] self . client . state_changed . emit . assert_called_with ( ClientState . CONNECTED ) [EOL] self . client . _state_signals [ ClientState . CONNECTED ] . emit . assert_called ( ) [EOL] [EOL] def test_set_state_disconnected ( self ) : [EOL] self . client . _state_signals [ ClientState . DISCONNECTED ] = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . CONNECTED [EOL] self . client . state_changed = mock . MagicMock ( ) [EOL] [EOL] self . client . state = ClientState . DISCONNECTED [EOL] [EOL] self . client . state_changed . emit . assert_called_with ( ClientState . DISCONNECTED ) [EOL] self . client . _state_signals [ ClientState . DISCONNECTED ] . emit . assert_called ( ) [EOL] [EOL] def test_set_state_no_state_change ( self ) : [EOL] self . client . _state_signals [ ClientState . DISCONNECTED ] = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . DISCONNECTED [EOL] self . client . state_changed = mock . MagicMock ( ) [EOL] [EOL] self . client . state = ClientState . DISCONNECTED [EOL] [EOL] self . client . state_changed . emit . assert_not_called ( ) [EOL] self . client . _state_signals [ ClientState . DISCONNECTED ] . emit . assert_not_called ( ) [EOL] [EOL] def test_set_state_on_error ( self ) : [EOL] self . client . _state_signals [ ClientState . DISCONNECTED ] = mock . MagicMock ( ) [EOL] self . client . _state = ClientState . DISCONNECTED [EOL] self . client . state_changed = mock . MagicMock ( ) [EOL] [EOL] self . client . state = ClientState . ERROR [EOL] [EOL] self . client . state_changed . emit . assert_called_with ( ClientState . ERROR ) [EOL] [EOL] [EOL] class TestRunCoro ( TestCase ) : [EOL] @ mock . patch ( [string] ) def test_with_loop_and_callback ( self , asyncio_mod ) : [EOL] coro = mock . MagicMock ( ) [EOL] callback = mock . MagicMock ( ) [EOL] loop = mock . MagicMock ( ) [EOL] future = mock . MagicMock ( ) [EOL] asyncio_mod . run_coroutine_threadsafe . return_value = future [EOL] [EOL] result = run_coro ( coro , callback , loop ) [EOL] [EOL] self . assertEqual ( result , future ) [EOL] asyncio_mod . run_coroutine_threadsafe . assert_called_with ( coro , loop ) [EOL] future . add_done_callback . assert_called_with ( callback ) [EOL] [EOL] @ mock . patch ( [string] ) def test_without_callback ( self , asyncio_mod ) : [EOL] coro = mock . MagicMock ( ) [EOL] loop = mock . MagicMock ( ) [EOL] future = mock . MagicMock ( ) [EOL] asyncio_mod . run_coroutine_threadsafe . return_value = future [EOL] [EOL] result = run_coro ( coro , None , loop ) [EOL] [EOL] self . assertEqual ( result , future ) [EOL] asyncio_mod . run_coroutine_threadsafe . assert_called_with ( coro , loop ) [EOL] future . add_done_callback . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_without_loop ( self , asyncio_mod ) : [EOL] coro = mock . MagicMock ( ) [EOL] callback = mock . MagicMock ( ) [EOL] loop = mock . MagicMock ( ) [EOL] future = mock . MagicMock ( ) [EOL] asyncio_mod . get_event_loop . return_value = loop [EOL] asyncio_mod . run_coroutine_threadsafe . return_value = future [EOL] [EOL] result = run_coro ( coro , callback , None ) [EOL] [EOL] self . assertEqual ( result , future ) [EOL] asyncio_mod . run_coroutine_threadsafe . assert_called_with ( coro , loop ) [EOL] future . add_done_callback . assert_called_with ( callback ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.object]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 $typing.List[builtins.object]$ 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 $typing.List[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.CometdClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 $typing.Any$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 $typing.Any$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 $aiocometd_chat_demo.cometd.MessageResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import Literal , Set , Any , Tuple [EOL] import typing [EOL] import aiocometd_chat_demo [EOL] import typing_extensions [EOL] from asynctest import TestCase , mock [EOL] from PyQt5 . QtCore import Qt , QModelIndex [EOL] [EOL] from aiocometd_chat_demo . channels import ChannelsModel , ChannelItemRole , ChannelType , ChannelItem [EOL] [EOL] [EOL] class TestChannelItem ( TestCase ) : [EOL] def test_less_then_comparable_by_name ( self ) : [EOL] channel1 = ChannelItem ( name = [string] , type = ChannelType . GROUP ) [EOL] channel2 = ChannelItem ( name = [string] , type = ChannelType . GROUP ) [EOL] channel3 = ChannelItem ( name = [string] , type = ChannelType . GROUP ) [EOL] [EOL] self . assertTrue ( channel1 < channel2 < channel3 ) [EOL] [EOL] [EOL] class TestChannelsModel ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . group_channel_name = [string] [EOL] self . model = ChannelsModel ( group_channel_name = self . group_channel_name ) [EOL] [EOL] def test_init ( self ) : [EOL] model = ChannelsModel ( group_channel_name = self . group_channel_name ) [EOL] [EOL] self . assertIsInstance ( model . group_channel , ChannelItem ) [EOL] self . assertEqual ( model . group_channel_name , self . group_channel_name ) [EOL] self . assertEqual ( model . group_channel . name , self . group_channel_name ) [EOL] [EOL] def test_init_sets_up_signal_forwarding ( self ) : [EOL] model = ChannelsModel ( group_channel_name = self . group_channel_name ) [EOL] model . message_sending_requested = mock . MagicMock ( ) [EOL] contents = [string] [EOL] [EOL] model . group_channel . conversation . message_sending_requested . emit ( contents ) [EOL] [EOL] model . message_sending_requested . emit . assert_called_with ( model . group_channel . name , model . group_channel . type , contents ) [EOL] [EOL] def test_row_count ( self ) : [EOL] for user_channels in range ( [number] ) : [EOL] with self . subTest ( user_channels = user_channels ) : [EOL] self . model . _channels = [ None ] * user_channels [EOL] self . assertEqual ( self . model . rowCount ( ) , user_channels + [number] ) [EOL] [EOL] def test_role_names ( self ) : [EOL] self . assertEqual ( self . model . roleNames ( ) , self . model . _role_names ) [EOL] [EOL] def test_channel_index ( self ) : [EOL] self . model . _channels = [ ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ] [EOL] cases = ( ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , - [number] ) , ( [string] , - [number] ) , ) [EOL] for channel_name , expected in cases : [EOL] with self . subTest ( channel_name = channel_name , expected = expected ) : [EOL] self . assertEqual ( self . model . _channel_index ( channel_name ) , expected ) [EOL] [EOL] def test_add_channel_inserts_channel_in_sorted_order ( self ) : [EOL] self . model . _channels = [ ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) ] [EOL] self . model . message_sending_requested = mock . MagicMock ( ) [EOL] self . model . beginInsertRows = mock . MagicMock ( ) [EOL] self . model . endInsertRows = mock . MagicMock ( ) [EOL] channel_name = [string] [EOL] expected_index = [number] [EOL] preinsert_count = len ( self . model . _channels ) [EOL] [EOL] self . model . _add_channel ( channel_name ) [EOL] [EOL] self . assertEqual ( len ( self . model . _channels ) , preinsert_count + [number] ) [EOL] self . assertEqual ( self . model . _channels [ expected_index ] . name , channel_name ) [EOL] self . model . beginInsertRows . assert_called_with ( QModelIndex ( ) , expected_index + [number] , expected_index + [number] ) [EOL] self . model . endInsertRows . assert_called ( ) [EOL] [EOL] def test_add_channel_sets_up_signal_forwarding ( self ) : [EOL] self . model . message_sending_requested = mock . MagicMock ( ) [EOL] self . model . _add_channel ( [string] ) [EOL] channel = self . model . _channels [ [number] ] [EOL] message_contents = [string] [EOL] [EOL] channel . conversation . message_sending_requested . emit ( message_contents ) [EOL] [EOL] self . model . message_sending_requested . emit . assert_called_with ( channel . name , channel . type , message_contents ) [EOL] [EOL] def test_remove_channel ( self ) : [EOL] self . model . beginRemoveRows = mock . MagicMock ( ) [EOL] self . model . endRemoveRows = mock . MagicMock ( ) [EOL] channel = mock . MagicMock ( ) [EOL] channel_name = [string] [EOL] self . model . _channels = [ channel ] [EOL] index = [number] [EOL] self . model . _channel_index = mock . MagicMock ( return_value = index ) [EOL] [EOL] self . model . _remove_channel ( channel_name ) [EOL] [EOL] self . model . beginRemoveRows . assert_called_with ( QModelIndex ( ) , index + [number] , index + [number] ) [EOL] self . assertEqual ( self . model . _channels , [ ] ) [EOL] channel . conversation . disconnect . assert_called ( ) [EOL] self . model . endRemoveRows . assert_called ( ) [EOL] [EOL] def test_remove_channel_does_nothing_on_nonexistant_channel ( self ) : [EOL] self . model . beginRemoveRows = mock . MagicMock ( ) [EOL] self . model . endRemoveRows = mock . MagicMock ( ) [EOL] channel = mock . MagicMock ( ) [EOL] self . model . _channels = [ channel ] [EOL] self . model . _channel_index = mock . MagicMock ( return_value = - [number] ) [EOL] [EOL] self . model . _remove_channel ( [string] ) [EOL] [EOL] self . model . beginRemoveRows . assert_not_called ( ) [EOL] self . assertEqual ( self . model . _channels , [ channel ] ) [EOL] channel . conversation . disconnect . assert_not_called ( ) [EOL] self . model . endRemoveRows . assert_not_called ( ) [EOL] [EOL] def test_update_available_channels ( self ) : [EOL] self . model . _channels = [ ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) , ChannelItem ( [string] , ChannelType . USER ) ] [EOL] updated_channel_names = { [string] , [string] , [string] , [string] } [EOL] self . model . _add_channel = mock . MagicMock ( ) [EOL] self . model . _remove_channel = mock . MagicMock ( ) [EOL] [EOL] self . model . update_available_channels ( updated_channel_names ) [EOL] [EOL] self . model . _add_channel . assert_has_calls ( [ mock . call ( [string] ) , mock . call ( [string] ) ] , any_order = True ) [EOL] self . model . _remove_channel . assert_has_calls ( [ mock . call ( [string] ) , mock . call ( [string] ) ] , any_order = True ) [EOL] [EOL] def test_add_incoming_message_on_group_channel ( self ) : [EOL] channel_name = [string] [EOL] channel_type = ChannelType . GROUP [EOL] message = object ( ) [EOL] self . model . group_channel . conversation . add_incoming_message = mock . MagicMock ( ) [EOL] [EOL] self . model . add_incoming_message ( channel_name , channel_type , message ) [EOL] [EOL] self . model . group_channel . conversation . add_incoming_message . assert_called_with ( message ) [EOL] [EOL] def test_add_incoming_message_on_user_channel ( self ) : [EOL] channel_name = [string] [EOL] channel_type = ChannelType . USER [EOL] message = object ( ) [EOL] channel = mock . MagicMock ( ) [EOL] self . model . _channels = [ channel ] [EOL] self . model . _channel_index = mock . MagicMock ( return_value = [number] ) [EOL] [EOL] self . model . add_incoming_message ( channel_name , channel_type , message ) [EOL] [EOL] channel . conversation . add_incoming_message . assert_called_with ( message ) [EOL] [EOL] def test_add_incoming_message_ignore_nonexistant_channel ( self ) : [EOL] channel_name = [string] [EOL] channel_type = ChannelType . USER [EOL] message = object ( ) [EOL] channel = mock . MagicMock ( ) [EOL] self . model . _channels = [ channel ] [EOL] self . model . _channel_index = mock . MagicMock ( return_value = - [number] ) [EOL] self . model . group_channel . conversation . add_incoming_message = mock . MagicMock ( ) [EOL] [EOL] self . model . add_incoming_message ( channel_name , channel_type , message ) [EOL] [EOL] channel . conversation . add_incoming_message . assert_not_called ( ) [EOL] self . model . group_channel . conversation . add_incoming_message . assert_not_called ( ) [EOL] [EOL] [EOL] class TestChannelsModelData ( TestCase ) : [EOL] channel1 = ChannelItem ( name = [string] , type = ChannelType . USER ) [EOL] channel2 = ChannelItem ( name = [string] , type = ChannelType . USER ) [EOL] group_channel_name = [string] [EOL] [EOL] def setUp ( self ) : [EOL] self . model = ChannelsModel ( self . group_channel_name ) [EOL] self . model . _channels = [ self . channel1 , self . channel2 ] [EOL] [EOL] def test_data ( self ) : [EOL] cases = ( ( [number] , [number] , ChannelItemRole . NAME , self . model . group_channel . name ) , ( [number] , [number] , ChannelItemRole . CONVERSATION , self . model . group_channel . conversation ) , ( [number] , [number] , ChannelItemRole . CHANNEL_TYPE , self . model . group_channel . type ) , ( [number] , [number] , ChannelItemRole . NAME , self . channel1 . name ) , ( [number] , [number] , ChannelItemRole . CONVERSATION , self . channel1 . conversation ) , ( [number] , [number] , ChannelItemRole . CHANNEL_TYPE , self . channel1 . type ) , ( [number] , [number] , ChannelItemRole . NAME , self . channel2 . name ) , ( [number] , [number] , ChannelItemRole . CONVERSATION , self . channel2 . conversation ) , ( [number] , [number] , ChannelItemRole . CHANNEL_TYPE , self . channel2 . type ) ) [EOL] [EOL] for row , column , role , expected in cases : [EOL] with self . subTest ( row = row , column = column , role = role , expected = expected ) : [EOL] index = self . model . createIndex ( row , column ) [EOL] self . assertEqual ( self . model . data ( index , role ) , expected ) [EOL] [EOL] def test_data_return_none_for_invalid_index ( self ) : [EOL] cases = ( ( - [number] , [number] , ChannelItemRole . NAME , None ) , ( - [number] , [number] , ChannelItemRole . CONVERSATION , None ) , ( - [number] , [number] , ChannelItemRole . CHANNEL_TYPE , None ) , ( [number] , [number] , ChannelItemRole . NAME , None ) , ( [number] , [number] , ChannelItemRole . CONVERSATION , None ) , ( [number] , [number] , ChannelItemRole . CHANNEL_TYPE , None ) ) [EOL] [EOL] for row , column , role , expected in cases : [EOL] with self . subTest ( row = row , column = column , role = role , expected = expected ) : [EOL] index = self . model . createIndex ( row , column ) [EOL] self . assertEqual ( self . model . data ( index , role ) , expected ) [EOL] [EOL] def test_data_return_none_for_unhandled_role ( self ) : [EOL] cases = ( ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) , ( [number] , [number] , Qt . DisplayRole , None ) ) [EOL] [EOL] for row , column , role , expected in cases : [EOL] with self . subTest ( row = row , column = column , role = role , expected = expected ) : [EOL] index = self . model . createIndex ( row , column ) [EOL] self . assertEqual ( self . model . data ( index , role ) , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal[-1]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal[-1]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal[-1]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal[-1]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.object$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.object$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],aiocometd_chat_demo.conversation.ConversationModel],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],aiocometd_chat_demo.channels.ChannelType],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],aiocometd_chat_demo.conversation.ConversationModel],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],aiocometd_chat_demo.channels.ChannelType]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],unknown],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],aiocometd_chat_demo.conversation.ConversationModel],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],aiocometd_chat_demo.channels.ChannelType],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],builtins.str],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],aiocometd_chat_demo.conversation.ConversationModel],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],aiocometd_chat_demo.channels.ChannelType]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],None],typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],None],typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],None],typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],None],typing.Tuple[typing_extensions.Literal[-1],typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.NAME],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CONVERSATION],None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelItemRole.CHANNEL_TYPE],None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,unknown,None]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any , Dict , Union , Tuple , Literal [EOL] import typing [EOL] import aiocometd_chat_demo [EOL] import typing_extensions [EOL] from datetime import datetime [EOL] [EOL] from asynctest import TestCase , mock [EOL] [EOL] from aiocometd_chat_demo . chat_service import ChatService , ChannelsModel , LOGGER as chat_service_logger , ChatMessage , ChannelType [EOL] [EOL] [EOL] class TestChatService ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . service = ChatService ( ) [EOL] self . logger = chat_service_logger [EOL] self . logger_name = [string] [EOL] [EOL] def test_url ( self ) : [EOL] self . service . url_changed = mock . MagicMock ( ) [EOL] url = [string] [EOL] [EOL] self . service . url = url [EOL] [EOL] self . assertEqual ( self . service . url , url ) [EOL] self . service . url_changed . emit . assert_called_with ( url ) [EOL] [EOL] def test_username ( self ) : [EOL] self . service . username_changed = mock . MagicMock ( ) [EOL] username = [string] [EOL] [EOL] self . service . username = username [EOL] [EOL] self . assertEqual ( self . service . username , username ) [EOL] self . service . username_changed . emit . assert_called_with ( username ) [EOL] [EOL] def test_channels_model ( self ) : [EOL] self . service . channels_model_changed = mock . MagicMock ( ) [EOL] channels_model = object ( ) [EOL] [EOL] self . service . channels_model = channels_model [EOL] [EOL] self . assertEqual ( self . service . channels_model , channels_model ) [EOL] self . service . channels_model_changed . emit . assert_called_with ( channels_model ) [EOL] [EOL] def test_last_error ( self ) : [EOL] self . service . last_error_changed = mock . MagicMock ( ) [EOL] self . service . error = mock . MagicMock ( ) [EOL] last_error = [string] [EOL] [EOL] self . service . last_error = last_error [EOL] [EOL] self . assertEqual ( self . service . last_error , last_error ) [EOL] self . service . last_error_changed . emit . assert_called_with ( last_error ) [EOL] self . service . error . emit . assert_called ( ) [EOL] [EOL] def test_room_channel ( self ) : [EOL] self . assertEqual ( self . service . _room_channel , [string] + self . service . _room_name ) [EOL] [EOL] def test_members_channel ( self ) : [EOL] self . assertEqual ( self . service . _members_channel , [string] + self . service . _room_name ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_connect ( self , cometd_cls , channels_cls ) : [EOL] cometd_client = mock . MagicMock ( ) [EOL] cometd_cls . return_value = cometd_client [EOL] channels_model = ChannelsModel ( [string] ) [EOL] channels_model . message_sending_requested = mock . MagicMock ( ) [EOL] channels_cls . return_value = channels_model [EOL] self . service . url = [string] [EOL] self . service . username = [string] [EOL] [EOL] self . service . connect_ ( ) [EOL] [EOL] channels_cls . assert_called_with ( self . service . _room_name ) [EOL] channels_model . message_sending_requested . connect . assert_called_with ( self . service . send_message ) [EOL] cometd_cls . assert_called_with ( self . service . url , ( self . service . _members_channel , self . service . _room_channel ) ) [EOL] cometd_client . connected . connect . assert_called_with ( self . service . on_connected ) [EOL] cometd_client . disconnected . connect . assert_called_with ( self . service . on_disconnected ) [EOL] cometd_client . error . connect . assert_has_calls ( [ mock . call ( self . service . on_error ) , mock . call ( self . service . on_disconnected ) ] ) [EOL] cometd_client . message_received . connect . assert_called_with ( self . service . message_received ) [EOL] cometd_client . connect_ . assert_called ( ) [EOL] [EOL] def test_on_connected ( self ) : [EOL] self . service . _client = mock . MagicMock ( ) [EOL] self . service . connected = mock . MagicMock ( ) [EOL] [EOL] self . service . on_connected ( ) [EOL] [EOL] self . service . _client . publish . assert_called_with ( self . service . _members_service_channel , dict ( user = self . service . username , room = self . service . _room_channel ) ) [EOL] self . service . connected . emit . assert_called ( ) [EOL] [EOL] def test_on_connected_sets_error_on_no_client ( self ) : [EOL] self . service . _client = None [EOL] expected_message = [string] [EOL] [EOL] with self . assertLogs ( self . logger , [string] ) as logs : [EOL] self . service . on_connected ( ) [EOL] [EOL] self . assertEqual ( logs . output , [ f" [string] { self . logger_name } [string] { expected_message }" ] ) [EOL] self . assertEqual ( self . service . last_error , expected_message ) [EOL] [EOL] def test_disconnect ( self ) : [EOL] self . service . _client = mock . MagicMock ( ) [EOL] [EOL] self . service . disconnect_ ( ) [EOL] [EOL] self . service . _client . disconnect_ . assert_called ( ) [EOL] [EOL] def test_disconnect_does_nothing_if_not_connected ( self ) : [EOL] self . service . disconnect_ ( ) [EOL] [EOL] def test_on_disconnected ( self ) : [EOL] client = mock . MagicMock ( ) [EOL] self . service . _client = client [EOL] channels_model = mock . MagicMock ( ) [EOL] self . service . _channels_model = channels_model [EOL] self . service . disconnected = mock . MagicMock ( ) [EOL] [EOL] self . service . on_disconnected ( ) [EOL] [EOL] client . disconnect . assert_called ( ) [EOL] channels_model . disconnect . assert_called ( ) [EOL] self . service . disconnected . emit . assert_called ( ) [EOL] self . assertIsNone ( self . service . _client ) [EOL] self . assertIsNone ( self . service . channels_model ) [EOL] [EOL] def test_on_disconnected_sets_error_on_no_client ( self ) : [EOL] self . service . _client = None [EOL] expected_message = [string] [EOL] [EOL] with self . assertLogs ( self . logger , [string] ) as logs : [EOL] self . service . on_disconnected ( ) [EOL] [EOL] self . assertEqual ( logs . output , [ f" [string] { self . logger_name } [string] { expected_message }" ] ) [EOL] self . assertEqual ( self . service . last_error , expected_message ) [EOL] [EOL] def test_on_error ( self ) : [EOL] error = ValueError ( [string] ) [EOL] [EOL] with self . assertLogs ( self . logger , [string] ) as logs : [EOL] self . service . on_error ( error ) [EOL] [EOL] self . assertEqual ( logs . output , [ f" [string] { self . logger_name } [string] { error !r}" ] ) [EOL] self . assertEqual ( self . service . last_error , repr ( error ) ) [EOL] [EOL] @ mock . patch ( [string] ) def test_message_received_on_chat_message ( self , datetime_cls ) : [EOL] self . service . username = [string] [EOL] other_user = [string] [EOL] datetime_cls . now . return_value = datetime . now ( ) [EOL] channels_model = mock . MagicMock ( ) [EOL] self . service . _channels_model = channels_model [EOL] self . service . _last_private_message_users . appendleft ( other_user ) [EOL] cases = ( ( [string] , other_user , None , self . service . _room_name , ChannelType . GROUP ) , ( [string] , other_user , [string] , other_user , ChannelType . USER ) , ( [string] , [string] , [string] , other_user , ChannelType . USER ) ) [EOL] for message_type , user , scope , exp_channel , exp_type in cases : [EOL] with self . subTest ( message_type = message_type ) : [EOL] cometd_chat_message = { [string] : self . service . _room_channel , [string] : dict ( user = user , scope = scope , chat = [string] ) } [EOL] chat_message = ChatMessage ( sender = cometd_chat_message [ [string] ] [ [string] ] , contents = cometd_chat_message [ [string] ] [ [string] ] , time = datetime_cls . now . return_value ) [EOL] [EOL] self . service . message_received ( cometd_chat_message ) [EOL] [EOL] channels_model . add_incoming_message . assert_called_with ( channel_name = exp_channel , channel_type = exp_type , message = chat_message ) [EOL] [EOL] def test_message_received_on_members_message ( self ) : [EOL] channels_model = mock . MagicMock ( ) [EOL] self . service . _channels_model = channels_model [EOL] other_user = [string] [EOL] self . service . username = [string] [EOL] cometd_message = { [string] : [ other_user , self . service . username ] , [string] : [string] } [EOL] [EOL] self . service . message_received ( cometd_message ) [EOL] [EOL] channels_model . update_available_channels . assert_called_with ( set ( ( other_user , ) ) ) [EOL] [EOL] def test_message_received_ignores_unrecognized_channels ( self ) : [EOL] channels_model = mock . MagicMock ( ) [EOL] self . service . _channels_model = channels_model [EOL] cometd_message = { [string] : { } , [string] : [string] } [EOL] [EOL] self . service . message_received ( cometd_message ) [EOL] [EOL] channels_model . update_available_channels . assert_not_called ( ) [EOL] channels_model . add_incoming_message . assert_not_called ( ) [EOL] self . assertEqual ( self . service . last_error , [string] ) [EOL] [EOL] def test_message_received_sets_error_on_no_channels_model ( self ) : [EOL] self . service . _channels_model = None [EOL] expected_message = [string] [EOL] [EOL] with self . assertLogs ( self . logger , [string] ) as logs : [EOL] self . service . message_received ( { } ) [EOL] [EOL] self . assertEqual ( logs . output , [ f" [string] { self . logger_name } [string] { expected_message }" ] ) [EOL] self . assertEqual ( self . service . last_error , expected_message ) [EOL] [EOL] def test_send_message_group_channel ( self ) : [EOL] self . service . username = [string] [EOL] contents = [string] [EOL] self . service . _client = mock . MagicMock ( ) [EOL] [EOL] self . service . send_message ( self . service . _room_name , ChannelType . GROUP , contents ) [EOL] [EOL] self . service . _client . publish . assert_called_with ( self . service . _room_channel , dict ( user = self . service . username , chat = contents ) ) [EOL] [EOL] def test_send_message_user_channel ( self ) : [EOL] self . service . username = [string] [EOL] contents = [string] [EOL] other_user = [string] [EOL] self . service . _client = mock . MagicMock ( ) [EOL] [EOL] self . service . send_message ( other_user , ChannelType . USER , contents ) [EOL] [EOL] self . service . _client . publish . assert_called_with ( [string] , dict ( room = self . service . _room_channel , user = self . service . username , chat = contents , peer = other_user ) ) [EOL] [EOL] def test_send_message_sets_error_on_no_client ( self ) : [EOL] self . service . _client = None [EOL] expected_message = [string] [EOL] [EOL] with self . assertLogs ( self . logger , [string] ) as logs : [EOL] self . service . send_message ( [string] , ChannelType . USER , [string] ) [EOL] [EOL] self . assertEqual ( logs . output , [ f" [string] { self . logger_name } [string] { expected_message }" ] ) [EOL] self . assertEqual ( self . service . last_error , expected_message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.channels.ChannelsModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.ValueError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.ValueError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.ValueError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.ValueError$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,None,unknown,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.GROUP]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.USER]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.USER]]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,None,unknown,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.GROUP]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.USER]],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal[aiocometd_chat_demo.channels.ChannelType.USER]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiocometd_chat_demo.conversation.ChatMessage$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.list,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.list,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
import unittest [EOL] from unittest import TestCase , mock [EOL] [EOL] import aiocometd_chat_demo . __main__ as main [EOL] from aiocometd_chat_demo . chat_service import ChatService [EOL] from aiocometd_chat_demo . channels import ChannelsModel [EOL] from aiocometd_chat_demo . conversation import ConversationModel [EOL] from aiocometd_chat_demo . _metadata import VERSION , AUTHOR , AUTHOR_EMAIL , URL [EOL] [EOL] [EOL] class TestMain ( TestCase ) : [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_register_types ( self , register_type , register_uncreatable_type ) : [EOL] main . register_types ( ) [EOL] [EOL] register_type . assert_has_calls ( [ mock . call ( ConversationModel , [string] , [number] , [number] , [string] ) , mock . call ( ChatService , [string] , [number] , [number] , [string] ) ] , any_order = True ) [EOL] register_uncreatable_type . assert_has_calls ( [ mock . call ( ChannelsModel , [string] , [number] , [number] , [string] , [string] ) , mock . call ( ConversationModel , [string] , [number] , [number] , [string] , [string] ) ] , any_order = True ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_main ( self , logging_mod , gui_app_cls , event_loop_cls , asyncio_mod , register_types_func , engine_cls , sys_mod ) : [EOL] sys_mod . argv = [ ] [EOL] gui_app = mock . MagicMock ( ) [EOL] gui_app_cls . return_value = gui_app [EOL] event_loop = mock . MagicMock ( ) [EOL] event_loop_cls . return_value = event_loop [EOL] engine = engine_cls . return_value [EOL] root_context = engine . rootContext . return_value [EOL] [EOL] main . main ( ) [EOL] [EOL] logging_mod . basicConfig . assert_called_with ( level = logging_mod . INFO ) [EOL] gui_app_cls . assert_called_with ( [ [string] , main . QUICK_CONTROLS2_STYLE ] ) [EOL] event_loop_cls . assert_called_with ( gui_app ) [EOL] asyncio_mod . set_event_loop . assert_called_with ( event_loop ) [EOL] register_types_func . assert_called ( ) [EOL] engine_cls . assert_called ( ) [EOL] root_context . setContextProperty . assert_has_calls ( [ mock . call ( [string] , VERSION ) , mock . call ( [string] , AUTHOR ) , mock . call ( [string] , AUTHOR_EMAIL ) , mock . call ( [string] , URL ) , ] , any_order = True ) [EOL] engine . load . assert_called_with ( main . MAIN_QML_PATH ) [EOL] event_loop . __enter__ . assert_called ( ) [EOL] event_loop . __exit__ . assert_called ( ) [EOL] event_loop . run_forever . assert_called ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0