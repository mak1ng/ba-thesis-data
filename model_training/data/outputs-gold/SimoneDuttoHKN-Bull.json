from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import aiy . assistant . grpc [EOL] import aiy . voice . audio [EOL] from aiy . board import Board , Led [EOL] from aiy . cloudspeech import CloudSpeechClient [EOL] import aiy . voice . tts [EOL] [EOL] import sys [EOL] [EOL] [EOL] def main ( ) : [EOL] with Board ( ) as board : [EOL] hints = get_hints ( args . language ) [EOL] client = CloudSpeechClient ( ) [EOL] while True : [EOL] print ( [string] ) [EOL] board . wait_for_press ( ) [EOL] text = client . recognize ( language_code = args . language , hint_phrases = hints ) [EOL] if text : [EOL] print ( [string] + text ) [EOL] if text == [string] : [EOL] text = [string] [EOL] aiy . voice . tts . say ( text ) [EOL] else : [EOL] text = [string] [EOL] aiy . voice . tts . say ( text ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import RPi . GPIO as GPIO [EOL] import time [EOL] while [number] : [EOL] try : [EOL] GPIO . setmode ( GPIO . BOARD ) [EOL] [EOL] PIN_TRIGGER = [number] [EOL] PIN_ECHO = [number] [EOL] [EOL] GPIO . setup ( PIN_TRIGGER , GPIO . OUT ) [EOL] GPIO . setup ( PIN_ECHO , GPIO . IN ) [EOL] [EOL] GPIO . output ( PIN_TRIGGER , GPIO . LOW ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] GPIO . output ( PIN_TRIGGER , GPIO . HIGH ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] GPIO . output ( PIN_TRIGGER , GPIO . LOW ) [EOL] [EOL] while GPIO . input ( PIN_ECHO ) == [number] : [EOL] pulse_start_time = time . time ( ) [EOL] while GPIO . input ( PIN_ECHO ) == [number] : [EOL] pulse_end_time = time . time ( ) [EOL] [EOL] pulse_duration = pulse_end_time - pulse_start_time [EOL] distance = round ( pulse_duration * [number] , [number] ) [EOL] print ( [string] + str ( distance ) + [string] ) [EOL] finally : [EOL] GPIO . cleanup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import RPi . GPIO as GPIO [EOL] import time [EOL] [EOL] def measure ( TRIG , ECHO ) : [EOL] GPIO . output ( TRIG , GPIO . HIGH ) [EOL] time . sleep ( [number] ) [EOL] GPIO . output ( TRIG , GPIO . LOW ) [EOL] while GPIO . input ( ECHO ) == [number] : [EOL] pulse_start = time . time ( ) [EOL] while GPIO . input ( ECHO ) == [number] : [EOL] pulse_end = time . time ( ) [EOL] pulse_duration = pulse_end - pulse_start [EOL] distance = pulse_duration * [number] [EOL] distance = round ( distance , [number] ) [EOL] return distance [EOL] [EOL] [EOL] GPIO . setmode ( GPIO . BOARD ) [EOL] [EOL] TRIG1 = [number] [EOL] ECHO1 = [number] [EOL] [EOL] TRIG2 = [number] [EOL] ECHO2 = [number] [EOL] [EOL] TRIG3 = [number] [EOL] ECHO3 = [number] [EOL] [EOL] print ( [string] ) [EOL] [EOL] GPIO . setup ( TRIG1 , GPIO . OUT ) [EOL] GPIO . setup ( TRIG2 , GPIO . OUT ) [EOL] GPIO . setup ( TRIG3 , GPIO . OUT ) [EOL] [EOL] GPIO . setup ( ECHO1 , GPIO . IN ) [EOL] GPIO . setup ( ECHO2 , GPIO . IN ) [EOL] GPIO . setup ( ECHO3 , GPIO . IN ) [EOL] [EOL] GPIO . output ( TRIG1 , GPIO . LOW ) [EOL] GPIO . output ( TRIG2 , GPIO . LOW ) [EOL] GPIO . output ( TRIG3 , GPIO . LOW ) [EOL] [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] while (True) : [EOL] distance1 = measure ( TRIG1 , ECHO1 ) [EOL] distance2 = measure ( TRIG2 , ECHO2 ) [EOL] distance3 = measure ( TRIG3 , ECHO3 ) [EOL] print ( [string] + str ( distance1 ) + [string] + str ( distance2 ) + [string] + str ( distance3 ) + [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] GPIO . cleanup ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import threading [EOL] import typing [EOL] import vehicle [EOL] import numpy as np [EOL] import threading [EOL] [EOL] class Vehicle : [EOL] pos = ( [number] , [number] ) [EOL] pos_old = ( [number] , [number] ) [EOL] dir = ( [number] , [number] ) [EOL] dead = [number] [EOL] old_action = [number] [EOL] actions = list ( ) [EOL] [EOL] def __init__ ( self , pos_iniz ) : [EOL] self . pos = pos_iniz [EOL] self . actions . append ( ( - [number] , [number] ) ) [EOL] self . actions . append ( ( - [number] , [number] ) ) [EOL] self . actions . append ( ( [number] , [number] ) ) [EOL] self . actions . append ( ( [number] , [number] ) ) [EOL] self . actions . append ( ( [number] , [number] ) ) [EOL] self . actions . append ( ( [number] , - [number] ) ) [EOL] self . actions . append ( ( [number] , - [number] ) ) [EOL] self . actions . append ( ( - [number] , - [number] ) ) [EOL] [EOL] def update_pos ( self , action ) : [EOL] tup = ( ( self . pos [ [number] ] + ( self . actions [ action ] ) [ [number] ] ) , ( self . pos [ [number] ] + ( self . actions [ action ] ) [ [number] ] ) ) [comment] [EOL] self . pos = tup [EOL] [EOL] self . old_action = action [EOL] [EOL] def move_gir ( self , move ) : [EOL] [comment] [EOL] new_action = [number] [EOL] [EOL] if move == [number] : [EOL] new_action = self . old_action [comment] [EOL] elif move == [number] : [EOL] new_action = ( self . old_action + [number] ) % [number] [comment] [EOL] elif move == [number] : [EOL] if self . old_action == [number] : [EOL] new_action = [number] [comment] [EOL] else : [EOL] new_action = self . old_action - [number] [EOL] self . update_pos ( new_action ) [EOL] [EOL] def move_vehicle ( self , move ) : [EOL] new_action_right = [number] [EOL] new_action_left = [number] [EOL] if move == [number] : [comment] [EOL] new_action_left = [number] [EOL] new_action_right = [number] [EOL] elif move == [number] : [comment] [EOL] new_action_left = [number] [EOL] new_action_right = [number] [EOL] elif move == [number] : [comment] [EOL] new_action_left = [number] [EOL] new_action_right = [number] [EOL] [comment] [EOL] try : [EOL] t1 = threading . Thread ( target = right_motor , args = [ new_action_right ] ) [EOL] t1 . daemon = True [comment] [EOL] t2 = threading . Thread ( target = left_motor , args = [ new_action_left ] ) [EOL] t2 . daemon = True [EOL] t1 . start ( ) [EOL] t2 . start ( ) [EOL] except : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] def right_motor ( r ) : [EOL] print ( [string] , r ) [EOL] def left_motor ( l ) : [EOL] print ( [string] , l ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $threading.Thread$ 0 $builtins.bool$ 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $threading.Thread$ 0 $builtins.bool$ 0 0 0 $threading.Thread$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import socket [EOL] import typing [EOL] [docstring] [EOL] import aiy . assistant . grpc [EOL] import aiy . audio [EOL] import aiy . voicehat [EOL] import sys [EOL] from socket import * [EOL] [EOL] aiy . i18n . set_language_code ( [string] ) [EOL] myHost = input ( [string] ) [EOL] myPort = [number] [EOL] [EOL] def main ( ) : [EOL] status_ui = aiy . voicehat . get_status_ui ( ) [EOL] status_ui . status ( [string] ) [EOL] assistant = aiy . assistant . grpc . get_assistant ( ) [EOL] button = aiy . voicehat . get_button ( ) [EOL] data = [string] [EOL] with aiy . audio . get_recorder ( ) : [EOL] while True : [EOL] status_ui . status ( [string] ) [EOL] print ( [string] ) [EOL] button . wait_for_press ( ) [EOL] status_ui . status ( [string] ) [EOL] print ( [string] ) [EOL] text , audio = assistant . recognize ( ) [EOL] if text : [EOL] s = socket ( AF_INET , SOCK_STREAM ) [comment] [EOL] s . connect ( ( myHost , myPort ) ) [comment] [EOL] print ( [string] + text ) [EOL] if text == [string] : [EOL] s . send ( [string] . encode ( ) ) [EOL] data = s . recv ( [number] ) . decode ( ) [EOL] elif text == [string] : [EOL] s . send ( [string] . encode ( ) ) [EOL] data = s . recv ( [number] ) . decode ( ) [EOL] elif text == [string] : [EOL] s . send ( [string] . encode ( ) ) [EOL] data = s . recv ( [number] ) . decode ( ) [EOL] elif text == [string] : [EOL] s . send ( [string] . encode ( ) ) [EOL] data = s . recv ( [number] ) . decode ( ) [EOL] print ( data ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import RPi . GPIO as GPIO [comment] [EOL] import time [comment] [EOL] [EOL] GPIO . setmode ( GPIO . BOARD ) [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] GPIO . setup ( [number] , GPIO . OUT ) [comment] [EOL] pwm = GPIO . PWM ( [number] , [number] ) [comment] [EOL] [EOL] [comment] [EOL] print ( [string] ) [comment] [EOL] dc = [number] [comment] [EOL] pwm . start ( dc ) [comment] [EOL] [EOL] try : [EOL] while True : [comment] [EOL] for dc in range ( [number] , [number] , [number] ) : [comment] [EOL] pwm . ChangeDutyCycle ( dc ) [EOL] time . sleep ( [number] ) [comment] [EOL] print ( dc ) [EOL] for dc in range ( [number] , [number] , - [number] ) : [comment] [EOL] pwm . ChangeDutyCycle ( dc ) [EOL] time . sleep ( [number] ) [comment] [EOL] print ( dc ) [EOL] except KeyboardInterrupt : [EOL] print ( [string] ) [EOL] [EOL] pwm . stop ( ) [comment] [EOL] GPIO . cleanup ( ) [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Literal , Tuple [EOL] import threading [EOL] import typing [EOL] import socket [EOL] import typing_extensions [EOL] import threading [EOL] import socket [EOL] import sys [EOL] [EOL] [comment] [EOL] right_dc = [number] [EOL] left_dc = [number] [EOL] [EOL] [comment] [EOL] def server ( ) : [EOL] [comment] [EOL] global right_dc [EOL] global left_dc [EOL] global tL [EOL] global tR [EOL] [EOL] [comment] [EOL] sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) [EOL] [comment] [EOL] hostname = input ( [string] ) [EOL] print ( hostname + [string] ) [EOL] [comment] [EOL] while tL == None and tR == None : [EOL] pass [EOL] [comment] [EOL] tL . start ( ) [EOL] tR . start ( ) [EOL] [EOL] [comment] [EOL] server_address = ( hostname , [number] ) [EOL] sock . bind ( server_address ) [EOL] [comment] [EOL] sock . listen ( [number] ) [EOL] [EOL] [comment] [EOL] while True : [EOL] [comment] [EOL] connection , client_address = sock . accept ( ) [EOL] try : [EOL] [comment] [EOL] while True : [EOL] [comment] [EOL] data = connection . recv ( [number] ) [EOL] if data : [EOL] [comment] [EOL] dec = data . decode ( ) [EOL] [EOL] [comment] [EOL] if dec == [string] : [EOL] [comment] [EOL] left_dc = [number] [EOL] right_dc = [number] [EOL] elif dec == [string] : [EOL] [comment] [EOL] left_dc = [number] [EOL] right_dc = [number] [EOL] elif dec == [string] : [EOL] [comment] [EOL] left_dc = [number] [EOL] right_dc = [number] [EOL] elif dec == [string] : [EOL] [comment] [EOL] left_dc = [number] [EOL] right_dc = [number] [EOL] [comment] [EOL] print ( [string] ) [EOL] connection . sendall ( data ) [EOL] else : [EOL] print ( [string] ) [EOL] break [EOL] finally : [EOL] [comment] [EOL] connection . close ( ) [EOL] [EOL] [comment] [EOL] def left_motor ( ) : [EOL] old_dc = left_dc [EOL] while True : [EOL] if old_dc != left_dc : [EOL] print ( [string] + str ( left_dc ) ) [EOL] old_dc = left_dc [EOL] [EOL] [comment] [EOL] def right_motor ( ) : [EOL] old_dc = right_dc [EOL] while True : [EOL] if old_dc != right_dc : [EOL] print ( [string] + str ( right_dc ) ) [EOL] old_dc = right_dc [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] try : [EOL] tS = threading . Thread ( target = server , args = [ ] ) [EOL] tS . daemon = True [comment] [EOL] tS . start ( ) [EOL] [EOL] [EOL] tL = threading . Thread ( target = left_motor , args = [ ] ) [EOL] tL . daemon = True [EOL] [EOL] tR = threading . Thread ( target = right_motor , args = [ ] ) [EOL] tR . daemon = True [EOL] except : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] while True : [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0