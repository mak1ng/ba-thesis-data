import pandas [EOL] import builtins [EOL] from __future__ import annotations [EOL] from lib . queries import SQLQueryBuilder [EOL] from lib . connections import EasySQLConnector [EOL] import pandas as pd [EOL] [EOL] class EasySQL ( SQLQueryBuilder , EasySQLConnector ) : [EOL] [EOL] def __init__ ( self , env_path , tunnel = False ) : [EOL] SQLQueryBuilder . __init__ ( self ) [EOL] EasySQLConnector . __init__ ( self , env_path , tunnel ) [EOL] self . _data = None [EOL] [EOL] def request_results_df ( self ) : [EOL] [EOL] self . _connect ( ) [EOL] query = self . query [EOL] self . _data = self . data_frame_query ( query ) [EOL] self . _disconnect ( ) [EOL] [EOL] @ property def execute ( self ) : [EOL] [EOL] self . request_results_df ( ) [EOL] return self . _data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Dict [EOL] import typing [EOL] import builtins [EOL] from __future__ import annotations [EOL] from typing import List , Optional [EOL] [EOL] [EOL] class SQLQueryBuilder : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . _query = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def SELECT ( self , selects ) : [EOL] [docstring] [EOL] [EOL] self . _query [ [string] ] = [string] + [string] . join ( selects ) [EOL] [EOL] return self [EOL] [EOL] def FROM ( self , table , alias = None ) : [EOL] [EOL] self . _query [ [string] ] += [string] + table + [string] [EOL] if alias : [EOL] self . _query [ [string] ] += [string] + alias + [string] [EOL] [EOL] return self [EOL] [EOL] def JOIN ( self , to , alias = None ) : [EOL] [EOL] self . _query [ [string] ] += [string] + to + [string] [EOL] if alias : [EOL] self . _query [ [string] ] += [string] + alias + [string] [EOL] [EOL] return self [EOL] [EOL] def SUBQUERY ( self , query_obj , alias , join_left , join_right ) : [EOL] [EOL] sub = query_obj . query [EOL] self . _query [ [string] ] += [string] + sub + [string] + alias + [string] [EOL] self . _query [ [string] ] += [string] + join_right + [string] + join_right + [string] [EOL] return self [EOL] [EOL] def LEFT ( self ) : [EOL] [docstring] [EOL] [EOL] self . _query [ [string] ] = [string] + self . _query [ [string] ] [EOL] return self [EOL] [EOL] def INNER ( self ) : [EOL] [docstring] [EOL] [EOL] self . _query [ [string] ] = [string] + self . _query [ [string] ] [EOL] return self [EOL] [EOL] def USING ( self , field ) : [EOL] [EOL] self . _query [ [string] ] += [string] + field + [string] [EOL] return self [EOL] [EOL] def ON ( self , field_left , field_right ) : [EOL] [docstring] [EOL] [EOL] self . _query [ [string] ] += [string] + field_left + [string] + field_right + [string] [EOL] return self [EOL] [EOL] def WHERE ( self , s ) : [EOL] [EOL] first_cond = False [EOL] [EOL] l = self . _query [ [string] ] . split ( ) [EOL] [EOL] if [string] not in l : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _query [ [string] ] += [string] [EOL] first_cond = True [EOL] [EOL] if not first_cond : [EOL] self . _query [ [string] ] += [string] [EOL] [EOL] self . _query [ [string] ] += s + [string] [EOL] [EOL] return self [EOL] [EOL] def GROUPBY ( self , cond ) : [EOL] [EOL] self . _query [ [string] ] += [string] + [string] . join ( cond ) + [string] [EOL] [EOL] return self [EOL] [EOL] def ORDERBY ( self , field , by = None ) : [EOL] [EOL] self . _query [ [string] ] += [string] + field + [string] [EOL] [EOL] if by : [EOL] self . _query [ [string] ] += by + [string] [EOL] [EOL] return self [EOL] [EOL] def LIMIT ( self , l ) : [EOL] [EOL] self . _query [ [string] ] += [string] + str ( l ) + [string] [EOL] return self [EOL] [EOL] [EOL] @ property def query ( self ) : [EOL] [docstring] [EOL] [EOL] statements = [ s for s in list ( self . _query . values ( ) ) if s != [string] ] [EOL] return [string] . join ( statements ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $SQLQueryBuilder$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $SQLQueryBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $SQLQueryBuilder$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0