from typing import List , Any [EOL] import typing [EOL] import pathlib [EOL] from pathlib import Path [EOL] from setuptools import setup [EOL] from setuptools import find_packages [EOL] [EOL] [EOL] HERE = Path ( __file__ ) . absolute ( ) . parent [EOL] [EOL] with ( HERE / [string] ) . open ( ) as f : [EOL] README = f . read ( ) [EOL] [EOL] with ( HERE / [string] / [string] ) . open ( ) as f : [EOL] rows = f . read ( ) . strip ( ) . split ( [string] ) [EOL] requires = [ ] [EOL] for row in rows : [EOL] row = row . strip ( ) [EOL] if row and not ( row . startswith ( [string] ) or row . startswith ( [string] ) ) : [EOL] requires . append ( row ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = README , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , author = [string] , author_email = [string] , url = [string] , keywords = [string] , packages = find_packages ( ) , include_package_data = True , zip_safe = False , test_suite = [string] , tests_require = [ [string] , [string] ] , install_requires = requires , entry_points = { [string] : [ [string] ] , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] TESTS_ROOT = Path ( __file__ ) . absolute ( ) . parent [EOL]	0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] def test_url__login__be__github ( web_client ) : [EOL] resp = web_client . post ( [string] , allow_redirects = False ) [EOL] assert resp . status_code == [number] [EOL] [EOL] [EOL] def test_url__login__be__github__callback ( web_client ) : [EOL] resp = web_client . get ( [string] , allow_redirects = False ) [EOL] assert resp . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0