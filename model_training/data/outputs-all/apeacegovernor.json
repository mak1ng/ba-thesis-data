from typing import Any , Set , Optional , Dict , Tuple , List [EOL] import builtins [EOL] import typing [EOL] from typing import Dict , Optional , List , Set , Tuple [EOL] import itertools [EOL] import collections [EOL] [EOL] def lowest ( members ) : [EOL] [docstring] [EOL] if len ( members ) == [number] : [EOL] return None [EOL] [EOL] reverse_members = { } [EOL] min = None [EOL] [EOL] for member in members : [EOL] reverse_members [ members [ member ] ] = member [EOL] if min is None : [EOL] min = members [ member ] [EOL] continue [EOL] if members [ member ] < min : [EOL] min = members [ member ] [EOL] [EOL] lowest_member = None [EOL] for member in members : [EOL] if members [ member ] == min : [EOL] if lowest_member is not None : [EOL] return None [EOL] lowest_member = member [EOL] [EOL] return lowest_member [EOL] [EOL] def highest ( members ) : [EOL] [docstring] [EOL] if len ( members ) == [number] : [EOL] return None [EOL] [EOL] reverse_members = { } [EOL] max = None [EOL] [EOL] for member in members : [EOL] reverse_members [ members [ member ] ] = member [EOL] if max is None : [EOL] max = members [ member ] [EOL] continue [EOL] if members [ member ] > max : [EOL] max = members [ member ] [EOL] [EOL] highest_member = None [EOL] for member in members : [EOL] if members [ member ] == max : [EOL] if highest_member is not None : [EOL] return None [EOL] highest_member = member [EOL] [EOL] return highest_member [EOL] [EOL] def unique_combinations ( nums , max_len = None ) : [EOL] combos = [ ] [EOL] alreadySeen = set ( ) [EOL] l = max_len [EOL] if l is None : [EOL] l = len ( nums ) [EOL] for i in range ( [number] , l + [number] ) : [EOL] for combo in [ x for x in itertools . combinations ( nums , i ) ] : [EOL] if combo in alreadySeen : [EOL] continue [EOL] alreadySeen . add ( combo ) [EOL] combos . append ( list ( combo ) ) [EOL] return combos [EOL] [EOL] [comment] [EOL] def unique_list_pairs ( lists1 , lists2 ) : [EOL] combos = [ ] [EOL] alreadySeen = set ( ) [EOL] for l1 in lists1 : [EOL] for l2 in lists2 : [EOL] combo = [ l1 , l2 ] [EOL] t = tuplize ( combo ) [EOL] if t in alreadySeen : [EOL] continue [EOL] alreadySeen . add ( t ) [EOL] combos . append ( combo ) [EOL] return combos [EOL] [EOL] def tuplize ( list ) : [EOL] out = [ ] [EOL] for item in list : [EOL] if not isinstance ( item , collections . abc . Iterable ) : [EOL] out . append ( item ) [EOL] else : [EOL] out . append ( tuplize ( item ) ) [EOL] return tuple ( out ) [EOL] [EOL] def list_minus ( list1 , list2 ) : [EOL] [docstring] [EOL] new_list1 = list1 [ : ] [EOL] new_list1_inprog = [ ] [EOL] while len ( list2 ) > [number] : [EOL] remove = list2 [ [number] ] [EOL] removed = False [EOL] list2 = list2 [ [number] : ] [EOL] for x in new_list1 : [EOL] if not removed and x == remove : [EOL] removed = True [EOL] continue [EOL] new_list1_inprog . append ( x ) [EOL] new_list1 = new_list1_inprog [EOL] new_list1_inprog = [ ] [EOL] return new_list1 [EOL] [EOL] def pick_best ( input ) : [EOL] max_val = float ( [string] ) [EOL] max_in = None [EOL] for x in input : [EOL] if x [ [number] ] >= max_val : [EOL] max_val = x [ [number] ] [EOL] max_in = x [EOL] return max_in [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Union [EOL] import kingsburg [EOL] import typing [EOL] from typing import List [EOL] [EOL] import kingsburg [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_choices_rewards ( ) : [EOL] advisor = kingsburg . ADVISOR [ kingsburg . ADVISOR_JESTER ] [EOL] expected = [ kingsburg . Reward ( victory_points = [number] ) ] [EOL] got = advisor . choices__rewards ( { } ) [EOL] assert got == expected [EOL] [EOL] advisor = kingsburg . ADVISOR [ kingsburg . ADVISOR_MERCHANT ] [EOL] expected = [ kingsburg . Reward ( resources = { kingsburg . RESOURCE_WOOD : [number] } ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_GOLD : [number] } ) , ] [EOL] got = advisor . choices__rewards ( { } ) [EOL] assert got == expected [EOL] [EOL] [comment] [EOL] advisor = kingsburg . ADVISOR [ kingsburg . ADVISOR_ALCHEMIST ] [EOL] expected = [ ] [EOL] got = advisor . choices__rewards ( { } ) [EOL] assert got == expected [EOL] [EOL] [comment] [EOL] advisor = kingsburg . ADVISOR [ kingsburg . ADVISOR_ALCHEMIST ] [EOL] expected = [ kingsburg . Reward ( resources = { kingsburg . RESOURCE_WOOD : - [number] , kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_STONE : [number] } ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_GOLD : - [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } ) , ] [EOL] got = advisor . choices__rewards ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] } ) [EOL] assert got == expected [EOL] [EOL] advisor = kingsburg . ADVISOR [ kingsburg . ADVISOR_DUCHESS ] [EOL] expected = [ kingsburg . Reward ( resources = { kingsburg . RESOURCE_GOLD : [number] } , plustwos = [number] ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_STONE : [number] } , plustwos = [number] ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_WOOD : [number] } , plustwos = [number] ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] } , plustwos = [number] ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_STONE : [number] } , plustwos = [number] ) , kingsburg . Reward ( resources = { kingsburg . RESOURCE_STONE : [number] , kingsburg . RESOURCE_WOOD : [number] } , plustwos = [number] ) , ] [EOL] got = advisor . choices__rewards ( { } ) [EOL] assert got == expected [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_productive_season_roll_total ( ) : [EOL] roll = kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ [number] ] ) [EOL] assert roll . totalValue ( ) == [number] [EOL] [EOL] def test_advisor_influence_score ( ) : [EOL] influence = kingsburg . AdvisorInfluence ( [ [number] , [number] , [number] ] , [ [number] ] , plus_two = True , market_modifier = - [number] ) [EOL] assert influence . advisorScore ( ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_set_players ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] ] ) [EOL] assert len ( state . players ) == [number] [EOL] [EOL] def test_next_year ( ) : [EOL] state = kingsburg . State ( ) [EOL] assert state . year == [number] [EOL] state = state . nextYear ( ) [EOL] assert state . year == [number] [EOL] [EOL] state . year = kingsburg . MAX_YEAR [EOL] state = state . nextYear ( ) [EOL] assert state . over [EOL] [EOL] def test_next_phase ( ) : [EOL] state = kingsburg . State ( ) . nextPhase ( ) [EOL] assert state . year == [number] [EOL] assert state . phase == [number] [EOL] [EOL] state . phase = kingsburg . MAX_PHASE [EOL] state = state . nextPhase ( ) [EOL] assert state . year == [number] [EOL] assert state . phase == [number] [EOL] [EOL] state . year = kingsburg . MAX_YEAR [EOL] state . phase = kingsburg . MAX_PHASE [EOL] state = state . nextPhase ( ) [EOL] assert state . year == kingsburg . MAX_YEAR [EOL] assert state . phase == kingsburg . MAX_PHASE [EOL] assert state . over [EOL] [EOL] def test_take_free_resource ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] ] ) . takeFreeResource ( [string] , kingsburg . RESOURCE_GOLD ) [EOL] assert state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] == [number] [EOL] [EOL] def test_kings_favor__tie ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] ] ) [EOL] result = state . kingsFavor ( ) [EOL] assert result == kingsburg . KINGS_FAVOR_TIE [EOL] [EOL] def test_kings_favor__fewest_buildings ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] ] ) . giveBuilding ( [string] , kingsburg . BUILDING_STATUE , False ) [EOL] assert not state . players [ [string] ] . has_kings_favor_bonus_die [EOL] assert not state . players [ [string] ] . has_kings_favor_bonus_die [EOL] [EOL] state = state . kingsFavor ( ) [EOL] assert state . players [ [string] ] . has_kings_favor_bonus_die [EOL] assert not state . players [ [string] ] . has_kings_favor_bonus_die [EOL] [EOL] def test_productive_season_rolls__no_tie ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] assert state . turn_order == [ [string] , [string] , [string] ] [EOL] [EOL] state = state . productiveSeasonRolls ( { [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) } ) [EOL] assert state . turn_order == [ [string] , [string] , [string] ] [EOL] [EOL] def test_productive_season_rolls__tie ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . turn_order = [ [string] , [string] , [string] ] [EOL] [EOL] state = state . productiveSeasonRolls ( { [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) } ) [EOL] assert state . turn_order == [ [string] , [string] , [string] ] [EOL] [EOL] def test_productive_season_rolls__tie2 ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . turn_order = [ [string] , [string] , [string] ] [EOL] [EOL] state = state . productiveSeasonRolls ( { [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) } ) [EOL] assert state . turn_order == [ [string] , [string] , [string] ] [EOL] [EOL] def test_productive_season_rolls__tie_bonus_die ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . turn_order = [ [string] , [string] , [string] ] [EOL] [EOL] state = state . productiveSeasonRolls ( { [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ [number] ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ ] ) , [string] : kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ [number] ] ) } ) [EOL] assert state . turn_order == [ [string] , [string] , [string] ] [EOL] [EOL] def test_get_winners__vp ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . victory_points = [number] [EOL] assert state . getWinners ( ) == [ [string] ] [EOL] [EOL] def test_get_winners__resources ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . victory_points = [number] [EOL] assert state . getWinners ( ) == [ [string] ] [EOL] [EOL] def test_get_winners__buildings ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . buildings . append ( kingsburg . BUILDING_STABLE ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] assert state . getWinners ( ) == [ [string] ] [EOL] [EOL] def test_get_winners__buildings_tie ( ) : [EOL] state = kingsburg . State ( ) . setPlayers ( [ [string] , [string] , [string] ] ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . buildings . append ( kingsburg . BUILDING_STABLE ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . buildings . append ( kingsburg . BUILDING_STABLE ) [EOL] state . players [ [string] ] . victory_points = [number] [EOL] state . players [ [string] ] . resources [ kingsburg . RESOURCE_GOLD ] = [number] [EOL] state . players [ [string] ] . buildings . append ( kingsburg . BUILDING_STABLE ) [EOL] assert state . getWinners ( ) == [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_add_resources ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addResources ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } ) [EOL] assert player . resources [ kingsburg . RESOURCE_GOLD ] == [number] [EOL] assert player . resources [ kingsburg . RESOURCE_WOOD ] == [number] [EOL] assert player . resources [ kingsburg . RESOURCE_STONE ] == [number] [EOL] [EOL] def test_add_building ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addResources ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] } ) . addBuilding ( kingsburg . BUILDING_STATUE , [ ] ) [EOL] assert player . buildings == [ kingsburg . BUILDING_STATUE ] [EOL] assert player . resources == { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } [EOL] assert player . victory_points == [number] [EOL] [EOL] player = player . addResources ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_STONE : [number] } ) . addBuilding ( kingsburg . BUILDING_CHAPEL , [ ] ) [EOL] assert player . buildings == [ kingsburg . BUILDING_STATUE , kingsburg . BUILDING_CHAPEL ] [EOL] assert player . resources == { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } [EOL] assert player . victory_points == [number] [EOL] [EOL] def test_add_building__stable ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addBuilding ( kingsburg . BUILDING_STABLE , [ kingsburg . ADVISOR_GENERAL ] ) [EOL] assert player . soldiers == [number] [EOL] [EOL] def test_add_bonus_die ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addKingsFavorBonusDie ( ) [EOL] assert player . has_kings_favor_bonus_die [EOL] [EOL] def test_get_num_player_dice ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) [EOL] assert player . getNumPlayerDice ( kingsburg . PHASE_SPRING ) == [number] [EOL] [EOL] player = kingsburg . PlayerState ( [string] ) . addKingsFavorBonusDie ( ) [EOL] assert player . getNumPlayerDice ( kingsburg . PHASE_SUMMER ) == [number] [EOL] assert player . getNumPlayerDice ( kingsburg . PHASE_SPRING ) == [number] [EOL] [EOL] def test_get_num_bonus_dice ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) [EOL] assert player . getNumBonusDice ( kingsburg . PHASE_SPRING ) == [number] [EOL] [EOL] player = kingsburg . PlayerState ( [string] ) . addKingsFavorBonusDie ( ) [EOL] assert player . getNumBonusDice ( kingsburg . PHASE_SPRING ) == [number] [EOL] [EOL] player = kingsburg . PlayerState ( [string] ) . addKingsFavorBonusDie ( ) . addBuilding ( kingsburg . BUILDING_FARMS , [ ] ) [EOL] assert player . getNumBonusDice ( kingsburg . PHASE_SPRING ) == [number] [EOL] [EOL] def test_roll ( ) : [EOL] roll = kingsburg . ProductiveSeasonRoll ( [ [number] , [number] , [number] ] , [ [number] ] ) [EOL] player = kingsburg . PlayerState ( [string] ) . addKingsFavorBonusDie ( ) . roll ( roll ) [EOL] assert player . dice . player_dice == [ [number] , [number] , [number] ] [EOL] assert player . dice . bonus_dice == [ [number] ] [EOL] assert not player . has_kings_favor_bonus_die [EOL] [EOL] def test_choices_advisor_influence__simple ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) , ] [EOL] assert player . choices__advisorInfluence ( kingsburg . ADVISORS ) == expected [EOL] [EOL] def test_choices_advisor_influence__simple_with_taken ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , ] [EOL] assert player . choices__advisorInfluence ( [ kingsburg . ADVISOR_JESTER ] ) == expected [EOL] [EOL] def test_choices_advisor_influence__simple2 ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) , ] [EOL] assert player . choices__advisorInfluence ( kingsburg . ADVISORS ) == expected [EOL] [EOL] def test_choices_advisor_influence__simple2_with_taken ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , ] [EOL] assert player . choices__advisorInfluence ( [ kingsburg . ADVISOR_JESTER , kingsburg . ADVISOR_ARCHITECT ] ) == expected [EOL] [EOL] def test_choices_advisor_influence__withbonus ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) , ] [EOL] assert player . choices__advisorInfluence ( kingsburg . ADVISORS ) == expected [EOL] [EOL] def test_choices_advisor_influence__insanebonus ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) , ] [EOL] assert player . choices__advisorInfluence ( kingsburg . ADVISORS ) == expected [EOL] [EOL] def test_choices_advisor_influence__withbonus_withplustwo ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) [EOL] player . plustwo_tokens = [number] [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True ) , ] [EOL] assert player . choices__advisorInfluence ( kingsburg . ADVISORS ) == expected [EOL] [EOL] def test_choices_advisor_influence__withbonus_withplustwo_withmarket ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) . addBuilding ( kingsburg . BUILDING_MARKET , [ ] ) [EOL] player . plustwo_tokens = [number] [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , ] [EOL] [EOL] got = player . choices__advisorInfluence ( kingsburg . ADVISORS ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) . addBuilding ( kingsburg . BUILDING_MARKET , [ ] ) [EOL] player . plustwo_tokens = [number] [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , ] [EOL] [EOL] got = player . choices__advisorInfluence ( [ kingsburg . ADVISOR_JESTER , kingsburg . ADVISOR_ARCHITECT ] ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded_withkingsenvoy ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) . addBuilding ( kingsburg . BUILDING_MARKET , [ ] ) [EOL] player . plustwo_tokens = [number] [EOL] player . has_kings_envoy = True [EOL] expected = [ kingsburg . ADVISOR_INFLUENCE_PASS , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) , kingsburg . AdvisorInfluence ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = [number] ) , ] [EOL] [EOL] got = player . choices__advisorInfluence ( [ kingsburg . ADVISOR_JESTER , kingsburg . ADVISOR_ARCHITECT ] ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_spenddice ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . roll ( kingsburg . ProductiveSeasonRoll ( player_dice = [ [number] , [number] , [number] ] , bonus_dice = [ [number] ] , ) ) . addBuilding ( kingsburg . BUILDING_MARKET , [ ] ) [EOL] player . plustwo_tokens = [number] [EOL] [EOL] influence = kingsburg . AdvisorInfluence ( player_dice = [ [number] ] , bonus_dice = [ [number] ] , plus_two = True , market_modifier = - [number] ) [EOL] player = player . spendDice ( influence ) [EOL] [EOL] assert player . dice . player_dice == [ [number] , [number] ] [EOL] assert player . dice . bonus_dice == [ ] [EOL] assert player . plustwo_tokens == [number] [EOL] [EOL] def test_applyreward ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . applyReward ( kingsburg . Reward ( victory_points = [number] , resources = { kingsburg . RESOURCE_STONE : [number] } , soldiers = [number] , plustwos = [number] , ) ) [EOL] [EOL] assert player . victory_points == [number] [EOL] assert player . resources == { kingsburg . RESOURCE_STONE : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_GOLD : [number] } [EOL] assert player . soldiers == [number] [EOL] assert player . plustwo_tokens == [number] [EOL] [EOL] player = player . applyReward ( kingsburg . Reward ( victory_points = - [number] , resources = { kingsburg . RESOURCE_STONE : - [number] , kingsburg . RESOURCE_WOOD : [number] } , soldiers = - [number] , plustwos = - [number] , ) ) [EOL] [EOL] assert player . victory_points == [number] [EOL] assert player . resources == { kingsburg . RESOURCE_STONE : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_GOLD : [number] } [EOL] assert player . soldiers == [number] [EOL] assert player . plustwo_tokens == [number] [EOL] [EOL] def test_choices_buildings__rich ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addResources ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } ) . addBuilding ( kingsburg . BUILDING_BARRICADE , [ ] ) . addBuilding ( kingsburg . BUILDING_CRANE , [ ] ) [EOL] choices = player . choices__buildings ( ) [EOL] [EOL] expected = [ kingsburg . BUILDING_STATUE , kingsburg . BUILDING_INN , kingsburg . BUILDING_GUARD_TOWER , kingsburg . BUILDING_PALISADE , kingsburg . BUILDING_TOWN_HALL , kingsburg . BUILD_PASS , ] [EOL] assert choices == expected [EOL] [EOL] def test_choices_buildings__broke ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) [EOL] choices = player . choices__buildings ( ) [EOL] [EOL] assert choices == [ kingsburg . BUILD_PASS ] [EOL] [EOL] def test_choices_buildings__limited ( ) : [EOL] player = kingsburg . PlayerState ( [string] ) . addResources ( { kingsburg . RESOURCE_GOLD : [number] , kingsburg . RESOURCE_WOOD : [number] , kingsburg . RESOURCE_STONE : [number] } ) . addBuilding ( kingsburg . BUILDING_BARRICADE , [ ] ) . addBuilding ( kingsburg . BUILDING_CRANE , [ ] ) [EOL] choices = player . choices__buildings ( ) [EOL] [EOL] expected = [ kingsburg . BUILDING_INN , kingsburg . BUILDING_PALISADE , kingsburg . BUILD_PASS , ] [EOL] assert choices == expected [EOL]	
from typing import List , Any , Optional [EOL] import builtins [EOL] import kingsburg [EOL] import typing [EOL] import random [EOL] from typing import List , Optional [EOL] [EOL] import keras [EOL] import numpy [EOL] [EOL] import kingsburg [EOL] import training [EOL] import util [EOL] [EOL] class Player ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def pickFreeResource ( self , state ) : [EOL] raise NotImplementedError [EOL] [EOL] def rollDice ( self , state ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseAdvisor ( self , state ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseReward ( self , state , advisorScore , possible_rewards ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseBuilding ( self , state , choices , use_kings_envoy ) : [EOL] raise NotImplementedError [EOL] [EOL] class CliPlayer ( Player ) : [EOL] [docstring] [EOL] [EOL] def pickFreeResource ( self , state ) : [EOL] resource = input ( self . name + [string] ) [EOL] if resource not in kingsburg . RESOURCES : [EOL] print ( [string] ) [EOL] return self . pickFreeResource ( state ) [EOL] return resource [EOL] [EOL] def rollDice ( self , state ) : [EOL] numpdice = state . getNumPlayerDice ( self . name ) [EOL] numbdice = state . getNumBonusDice ( self . name ) [EOL] rolls = input ( self . name + [string] + str ( numpdice ) + [string] ) [EOL] pdice = rolls . split ( ) [EOL] bdice = [ ] [EOL] if numbdice > [number] : [EOL] rolls = input ( self . name + [string] + str ( numpdice ) + [string] ) [EOL] bdice = rolls . split ( ) [EOL] if len ( pdice ) != numpdice or len ( bdice ) != numbdice : [EOL] return self . rollDice ( state ) [EOL] return kingsburg . ProductiveSeasonRoll ( player_dice = [ int ( die ) for die in pdice ] , bonus_dice = [ int ( die ) for die in bdice ] ) [EOL] [EOL] def chooseAdvisor ( self , state ) : [EOL] [comment] [EOL] return kingsburg . ADVISOR_INFLUENCE_PASS [EOL] [EOL] def chooseReward ( self , state , advisorScore , possible_rewards ) : [EOL] [comment] [EOL] raise NotImplementedError [EOL] [EOL] def chooseBuilding ( self , state , choices , use_kings_envoy ) : [EOL] [comment] [EOL] raise NotImplementedError [EOL] [EOL] class RandomPlayer ( Player ) : [EOL] [docstring] [EOL] [EOL] def pickFreeResource ( self , state ) : [EOL] return random . choice ( state . choices_freeResource ( self . name ) ) [EOL] [EOL] def rollDice ( self , state ) : [EOL] pdice = [ ] [EOL] bdice = [ ] [EOL] for i in range ( [number] , state . getNumPlayerDice ( self . name ) ) : [EOL] pdice . append ( random . randint ( [number] , [number] ) ) [EOL] for i in range ( [number] , state . getNumBonusDice ( self . name ) ) : [EOL] bdice . append ( random . randint ( [number] , [number] ) ) [EOL] return kingsburg . ProductiveSeasonRoll ( player_dice = pdice , bonus_dice = bdice ) [EOL] [EOL] def chooseAdvisor ( self , state ) : [EOL] [comment] [EOL] [comment] [EOL] choices = state . choices__advisorInfluence ( self . name ) [EOL] if len ( choices ) == [number] : [EOL] return choices [ [number] ] [EOL] if random . randint ( [number] , [number] ) > [number] : [EOL] return kingsburg . ADVISOR_INFLUENCE_PASS [EOL] choices = [ c for c in choices if c != kingsburg . ADVISOR_INFLUENCE_PASS ] [EOL] return random . choice ( choices ) [EOL] [EOL] def chooseReward ( self , state , advisorScore , possible_rewards ) : [EOL] if len ( possible_rewards ) == [number] : [EOL] return None [EOL] return random . choice ( possible_rewards ) [EOL] [EOL] def chooseBuilding ( self , state , choices , use_kings_envoy ) : [EOL] [comment] [EOL] [comment] [EOL] choices = state . choices__buildings ( self . name ) [EOL] if len ( choices ) == [number] : [EOL] return choices [ [number] ] [EOL] if random . randint ( [number] , [number] ) > [number] : [EOL] return kingsburg . BUILD_PASS [EOL] choices = [ c for c in choices if c != kingsburg . BUILD_PASS ] [EOL] return random . choice ( choices ) [EOL] [EOL] class GovAlphaPlayer ( RandomPlayer ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , filename ) : [EOL] Player . __init__ ( self , name ) [EOL] self . model = keras . models . load_model ( filename ) [EOL] [EOL] def pickFreeResource ( self , state ) : [EOL] choices = state . choices_freeResource ( self . name ) [EOL] scored_choices = [ ] [EOL] for c in choices : [EOL] new_state = state . takeFreeResource ( self . name , c ) [EOL] inp = training . state_to_input ( new_state ) [EOL] prediction = self . model . predict ( numpy . asarray ( [ inp ] ) ) [ [number] ] [ [number] ] [EOL] scored_choices . append ( ( prediction , c ) ) [EOL] print ( str ( scored_choices ) ) [EOL] chosen = util . pick_best ( scored_choices ) [EOL] print ( [string] + str ( chosen [ [number] ] ) ) [EOL] return chosen [ [number] ] [EOL] [EOL] def chooseAdvisor ( self , state ) : [EOL] choices = state . choices__advisorInfluence ( self . name ) [EOL] scored_choices = [ ] [EOL] for c in choices : [EOL] new_state = state . influenceAdvisor ( self . name , c ) [EOL] inp = training . state_to_input ( new_state ) [EOL] prediction = self . model . predict ( numpy . asarray ( [ inp ] ) ) [ [number] ] [ [number] ] [EOL] scored_choices . append ( ( prediction , c ) ) [EOL] print ( str ( scored_choices ) ) [EOL] chosen = util . pick_best ( scored_choices ) [EOL] print ( [string] + str ( chosen [ [number] ] ) ) [EOL] return chosen [ [number] ] [EOL] [EOL] def chooseReward ( self , state , advisorScore , possible_rewards ) : [EOL] scored_choices = [ ] [EOL] for c in possible_rewards : [EOL] new_state = state . giveReward ( self . name , advisorScore , c ) [EOL] inp = training . state_to_input ( new_state ) [EOL] prediction = self . model . predict ( numpy . asarray ( [ inp ] ) ) [ [number] ] [ [number] ] [EOL] scored_choices . append ( ( prediction , c ) ) [EOL] print ( str ( scored_choices ) ) [EOL] chosen = util . pick_best ( scored_choices ) [EOL] print ( [string] + str ( chosen [ [number] ] ) ) [EOL] return chosen [ [number] ] [EOL] [EOL] def chooseBuilding ( self , state , choices , use_kings_envoy ) : [EOL] scored_choices = [ ] [EOL] for c in choices : [EOL] new_state = state . giveBuilding ( self . name , c , use_kings_envoy ) [EOL] inp = training . state_to_input ( new_state ) [EOL] prediction = self . model . predict ( numpy . asarray ( [ inp ] ) ) [ [number] ] [ [number] ] [EOL] scored_choices . append ( ( prediction , c ) ) [EOL] print ( str ( scored_choices ) ) [EOL] chosen = util . pick_best ( scored_choices ) [EOL] print ( [string] + str ( chosen [ [number] ] ) ) [EOL] return chosen [ [number] ] [EOL] [EOL] class GovAlpha2Player ( RandomPlayer ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , filename ) : [EOL] Player . __init__ ( self , name ) [EOL] self . advisor_chooser = keras . models . load_model ( filename + [string] ) [EOL] [EOL] def chooseAdvisor ( self , state ) : [EOL] choices = state . choices__advisorInfluence ( self . name ) [EOL] best_choice = None [EOL] best_choice_score = None [EOL] base_inputs = training . state_to_input ( state ) [EOL] for c in choices : [EOL] additional_inputs = training . advisor_choice_to_input ( state , c ) [EOL] inputs = base_inputs + additional_inputs [EOL] prediction = self . advisor_chooser . predict ( numpy . asarray ( [ inputs ] ) ) [ [number] ] [ [number] ] [EOL] if best_choice_score is None or prediction > best_choice_score : [EOL] best_choice_score = prediction [EOL] best_choice = c [EOL] print ( [string] + str ( best_choice_score ) ) [EOL] return best_choice [EOL]	
import engine [EOL] import logger [EOL] import kingsburg [EOL] import game [EOL] import kingsburg [EOL] import engine [EOL] import logger [EOL] import game [EOL] [EOL] def test_random_game ( ) : [EOL] l = logger . SilentLogger ( ) [EOL] rand = engine . RandomEngine ( l ) [EOL] state = kingsburg . State ( ) [EOL] g = game . Game ( rand , state ) [EOL] g . setup ( ) [EOL] [EOL] [comment] [EOL] for i in range ( [number] , [number] ) : [EOL] if g . tick ( ) : [EOL] break [EOL] [EOL] assert g . state . year == kingsburg . MAX_YEAR [EOL] assert g . state . phase == kingsburg . MAX_PHASE [EOL] assert g . state . over [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import kingsburg [EOL] import typing [EOL] from typing import List , Dict [EOL] [EOL] import kingsburg [EOL] [EOL] def state_to_input ( s ) : [EOL] [docstring] [EOL] input = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] phases = [ ] [EOL] for year in range ( [number] , kingsburg . MAX_YEAR + [number] ) : [EOL] [comment] [EOL] for phase in range ( [number] , kingsburg . MAX_PHASE + [number] + [number] ) : [EOL] if year == s . year and phase == s . phase : [EOL] phases . append ( [number] ) [EOL] else : [EOL] phases . append ( [number] ) [EOL] assert len ( phases ) == [number] [EOL] assert len ( [ p for p in phases if p == [number] ] ) == [number] [EOL] input = input + phases [EOL] [EOL] for p in [ p for p in s . playerList ( ) if p . name == [string] ] : [EOL] input = input + player_to_input ( p ) [EOL] [EOL] [comment] [EOL] for p in [ p for p in s . playerList ( ) if p . name != [string] ] : [EOL] input = input + player_to_input ( p ) [EOL] [EOL] assert len ( input ) == [number] [EOL] [EOL] return input [EOL] [EOL] def player_to_input ( p ) : [EOL] [docstring] [EOL] input = [ ] [EOL] [EOL] [comment] [EOL] input . append ( int ( p . has_kings_favor_bonus_die ) ) [EOL] input . append ( int ( p . has_kings_envoy ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plustwo_tokens = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if i + [number] <= p . plustwo_tokens : [EOL] plustwo_tokens . append ( [number] ) [EOL] else : [EOL] plustwo_tokens . append ( [number] ) [EOL] assert len ( plustwo_tokens ) == [number] [EOL] input = input + plustwo_tokens [EOL] [EOL] [comment] [EOL] buildings = [ ] [EOL] for row in kingsburg . PROVINCE_SHEET : [EOL] for b in row : [EOL] buildings . append ( int ( b in p . buildings ) ) [EOL] assert len ( buildings ) == [number] [EOL] input = input + buildings [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] resources = [ ] [EOL] for r in kingsburg . RESOURCES : [EOL] for i in range ( [number] , [number] ) : [EOL] if i + [number] <= p . resources [ r ] : [EOL] resources . append ( [number] ) [EOL] else : [EOL] resources . append ( [number] ) [EOL] assert len ( resources ) == [number] [EOL] input = input + resources [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] soldiers = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if i + [number] <= p . soldiers : [EOL] soldiers . append ( [number] ) [EOL] else : [EOL] soldiers . append ( [number] ) [EOL] assert len ( soldiers ) == [number] [EOL] input = input + soldiers [EOL] [EOL] assert len ( input ) == [number] [EOL] [EOL] return input [EOL] [EOL] def advisor_choice_to_input ( s , influence ) : [EOL] input = [ ] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] score = influence . advisorScore ( ) [EOL] advisors = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if i + [number] == score : [EOL] advisors . append ( [number] ) [EOL] else : [EOL] advisors . append ( [number] ) [EOL] assert len ( advisors ) == [number] [EOL] assert len ( [ a for a in advisors if a == [number] ] ) <= [number] [EOL] input = input + advisors [EOL] [EOL] [comment] [EOL] input . append ( int ( influence . plus_two ) ) [EOL] [EOL] [comment] [EOL] input . append ( influence . market_modifier ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] player_dice = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( influence . player_dice ) >= i + [number] : [EOL] player_dice = player_dice + dice_to_input ( influence . player_dice [ i ] ) [EOL] else : [EOL] player_dice = player_dice + dice_to_input ( [number] ) [EOL] assert len ( player_dice ) == [number] [EOL] input = input + player_dice [EOL] [EOL] [comment] [EOL] [comment] [EOL] bonus_dice = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( influence . bonus_dice ) >= i + [number] : [EOL] bonus_dice = bonus_dice + dice_to_input ( influence . bonus_dice [ i ] ) [EOL] else : [EOL] bonus_dice = bonus_dice + dice_to_input ( [number] ) [EOL] assert len ( bonus_dice ) == [number] [EOL] input = input + bonus_dice [EOL] [EOL] [comment] [EOL] [comment] [EOL] remaining_dice = [ ] [EOL] [EOL] [comment] [EOL] for p in [ p for p in s . playerList ( ) if p . name == [string] ] : [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( p . dice . player_dice ) >= i + [number] : [EOL] remaining_dice = remaining_dice + dice_to_input ( p . dice . player_dice [ i ] ) [EOL] else : [EOL] remaining_dice = remaining_dice + dice_to_input ( [number] ) [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( p . dice . bonus_dice ) >= i + [number] : [EOL] remaining_dice = remaining_dice + dice_to_input ( p . dice . bonus_dice [ i ] ) [EOL] else : [EOL] remaining_dice = remaining_dice + dice_to_input ( [number] ) [EOL] [EOL] [comment] [EOL] for p in [ p for p in s . playerList ( ) if p . name != [string] ] : [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( p . dice . player_dice ) >= i + [number] : [EOL] remaining_dice = remaining_dice + dice_to_input ( p . dice . player_dice [ i ] ) [EOL] else : [EOL] remaining_dice = remaining_dice + dice_to_input ( [number] ) [EOL] for i in range ( [number] , [number] ) : [EOL] if len ( p . dice . bonus_dice ) >= i + [number] : [EOL] remaining_dice = remaining_dice + dice_to_input ( p . dice . bonus_dice [ i ] ) [EOL] else : [EOL] remaining_dice = remaining_dice + dice_to_input ( [number] ) [EOL] [EOL] assert len ( remaining_dice ) == [number] [EOL] input = input + remaining_dice [EOL] [EOL] assert len ( input ) == [number] [EOL] [EOL] return input [EOL] [EOL] def dice_to_input ( die ) : [EOL] input = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] if i + [number] == die : [EOL] input . append ( [number] ) [EOL] else : [EOL] input . append ( [number] ) [EOL] assert len ( input ) == [number] [EOL] assert len ( [ d for d in input if input == [number] ] ) <= [number] [EOL] return input [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict , List , Type , Union [EOL] import builtins [EOL] import kingsburg [EOL] import typing [EOL] from __future__ import annotations [EOL] import copy [EOL] from typing import Dict , Union , List , Optional [EOL] [EOL] import util [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] Resource = str [EOL] ResourceInventory = Dict [ Resource , int ] [EOL] [EOL] RESOURCE_GOLD = [string] [EOL] RESOURCE_STONE = [string] [EOL] RESOURCE_WOOD = [string] [EOL] [EOL] RESOURCES = [ RESOURCE_GOLD , RESOURCE_STONE , RESOURCE_WOOD ] [EOL] [EOL] class Reward ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , victory_points = [number] , resources = None , soldiers = [number] , plustwos = [number] , receive_any_resource = [number] , view_enemy = False ) : [EOL] self . victory_points = victory_points [EOL] self . resources = { } if resources is None else resources [EOL] self . soldiers = soldiers [EOL] self . plustwos = plustwos [EOL] self . receive_any_resource = receive_any_resource [EOL] self . view_enemy = view_enemy [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return self . __dict__ == other . __dict__ [EOL] [EOL] @ staticmethod def fromDict ( d ) : [EOL] if d is None : [EOL] return None [EOL] [comment] [EOL] return None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] RECEIVE_ANY_RESOURCE = { [number] : [ { RESOURCE_GOLD : [number] } , { RESOURCE_STONE : [number] } , { RESOURCE_WOOD : [number] } , ] , [number] : [ { RESOURCE_GOLD : [number] } , { RESOURCE_STONE : [number] } , { RESOURCE_WOOD : [number] } , { RESOURCE_GOLD : [number] , RESOURCE_WOOD : [number] } , { RESOURCE_GOLD : [number] , RESOURCE_STONE : [number] } , { RESOURCE_STONE : [number] , RESOURCE_WOOD : [number] } , ] , [number] : [ { RESOURCE_GOLD : [number] } , { RESOURCE_STONE : [number] } , { RESOURCE_WOOD : [number] } , { RESOURCE_GOLD : [number] , RESOURCE_WOOD : [number] } , { RESOURCE_GOLD : [number] , RESOURCE_STONE : [number] } , { RESOURCE_WOOD : [number] , RESOURCE_GOLD : [number] } , { RESOURCE_WOOD : [number] , RESOURCE_STONE : [number] } , { RESOURCE_STONE : [number] , RESOURCE_WOOD : [number] } , { RESOURCE_STONE : [number] , RESOURCE_GOLD : [number] } , { RESOURCE_WOOD : [number] , RESOURCE_GOLD : [number] , RESOURCE_STONE : [number] } , ] } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] Building = str [EOL] [EOL] BUILDING_STATUE = [string] [EOL] BUILDING_CHAPEL = [string] [EOL] BUILDING_CHURCH = [string] [EOL] BUILDING_CATHEDRAL = [string] [EOL] BUILDING_INN = [string] [EOL] BUILDING_MARKET = [string] [EOL] BUILDING_FARMS = [string] [EOL] BUILDING_MERCHANTS_GUILD = [string] [EOL] BUILDING_GUARD_TOWER = [string] [EOL] BUILDING_BLACKSMITH = [string] [EOL] BUILDING_BARRACKS = [string] [EOL] BUILDING_WIZARDS_GUILD = [string] [EOL] BUILDING_PALISADE = [string] [EOL] BUILDING_STABLE = [string] [EOL] BUILDING_STONE_WALL = [string] [EOL] BUILDING_FORTRESS = [string] [EOL] BUILDING_BARRICADE = [string] [EOL] BUILDING_CRANE = [string] [EOL] BUILDING_TOWN_HALL = [string] [EOL] BUILDING_EMBASSY = [string] [EOL] [EOL] PROVINCE_SHEET = [ [ BUILDING_STATUE , BUILDING_CHAPEL , BUILDING_CHURCH , BUILDING_CATHEDRAL ] , [ BUILDING_INN , BUILDING_MARKET , BUILDING_FARMS , BUILDING_MERCHANTS_GUILD ] , [ BUILDING_GUARD_TOWER , BUILDING_BLACKSMITH , BUILDING_BARRACKS , BUILDING_WIZARDS_GUILD ] , [ BUILDING_PALISADE , BUILDING_STABLE , BUILDING_STONE_WALL , BUILDING_FORTRESS ] , [ BUILDING_BARRICADE , BUILDING_CRANE , BUILDING_TOWN_HALL , BUILDING_EMBASSY ] , ] [EOL] [EOL] BUILD_PASS = [string] [EOL] [EOL] BUILDING_VP = { BUILDING_STATUE : [number] , BUILDING_CHAPEL : [number] , BUILDING_CHURCH : [number] , BUILDING_CATHEDRAL : [number] , BUILDING_INN : [number] , BUILDING_MARKET : [number] , BUILDING_FARMS : [number] , BUILDING_MERCHANTS_GUILD : [number] , BUILDING_GUARD_TOWER : [number] , BUILDING_BLACKSMITH : [number] , BUILDING_BARRACKS : [number] , BUILDING_WIZARDS_GUILD : [number] , BUILDING_PALISADE : [number] , BUILDING_STABLE : [number] , BUILDING_STONE_WALL : [number] , BUILDING_FORTRESS : [number] , BUILDING_BARRICADE : [number] , BUILDING_CRANE : [number] , BUILDING_TOWN_HALL : [number] , BUILDING_EMBASSY : [number] , } [EOL] [EOL] BUILDING_COST = { BUILDING_STATUE : { RESOURCE_GOLD : - [number] } , BUILDING_CHAPEL : { RESOURCE_GOLD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_CHURCH : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_CATHEDRAL : { RESOURCE_GOLD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_INN : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] } , BUILDING_MARKET : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] } , BUILDING_FARMS : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_MERCHANTS_GUILD : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_GUARD_TOWER : { RESOURCE_GOLD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_BLACKSMITH : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] } , BUILDING_BARRACKS : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_WIZARDS_GUILD : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_PALISADE : { RESOURCE_WOOD : - [number] } , BUILDING_STABLE : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_STONE_WALL : { RESOURCE_GOLD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_FORTRESS : { RESOURCE_GOLD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_BARRICADE : { RESOURCE_WOOD : - [number] } , BUILDING_CRANE : { RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_TOWN_HALL : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , BUILDING_EMBASSY : { RESOURCE_GOLD : - [number] , RESOURCE_WOOD : - [number] , RESOURCE_STONE : - [number] } , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] Phase = str [EOL] [EOL] PHASE_KINGS_FAVOR = [string] [EOL] PHASE_SPRING = [string] [EOL] PHASE_KINGS_REWARD = [string] [EOL] PHASE_SUMMER = [string] [EOL] PHASE_KINGS_ENVOY = [string] [EOL] PHASE_FALL = [string] [EOL] PHASE_RECRUIT_SOLDIERS = [string] [EOL] PHASE_WINTER = [string] [EOL] [EOL] PHASES = [ PHASE_KINGS_FAVOR , PHASE_SPRING , PHASE_KINGS_REWARD , PHASE_SUMMER , PHASE_KINGS_ENVOY , PHASE_FALL , PHASE_RECRUIT_SOLDIERS , PHASE_WINTER ] [EOL] [EOL] MAX_YEAR = [number] [EOL] MAX_PHASE = len ( PHASES ) - [number] [EOL] [EOL] PRODUCTIVE_SEASONS = [ PHASE_SPRING , PHASE_SUMMER , PHASE_FALL ] [EOL] [EOL] KINGS_FAVOR_TIE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AdvisorScore = int [EOL] [EOL] ADVISOR_JESTER = [number] [EOL] ADVISOR_SQUIRE = [number] [EOL] ADVISOR_ARCHITECT = [number] [EOL] ADVISOR_MERCHANT = [number] [EOL] ADVISOR_SERGEANT = [number] [EOL] ADVISOR_ALCHEMIST = [number] [EOL] ADVISOR_ASTRONOMER = [number] [EOL] ADVISOR_TREASURER = [number] [EOL] ADVISOR_MASTER_HUNTER = [number] [EOL] ADVISOR_GENERAL = [number] [EOL] ADVISOR_SWORDSMITH = [number] [EOL] ADVISOR_DUCHESS = [number] [EOL] ADVISOR_CHAMPION = [number] [EOL] ADVISOR_SMUGGLER = [number] [EOL] ADVISOR_INVENTOR = [number] [EOL] ADVISOR_WIZARD = [number] [EOL] ADVISOR_QUEEN = [number] [EOL] ADVISOR_KING = [number] [EOL] [EOL] ADVISORS = [ ADVISOR_JESTER , ADVISOR_SQUIRE , ADVISOR_ARCHITECT , ADVISOR_MERCHANT , ADVISOR_SERGEANT , ADVISOR_ALCHEMIST , ADVISOR_ASTRONOMER , ADVISOR_TREASURER , ADVISOR_MASTER_HUNTER , ADVISOR_GENERAL , ADVISOR_SWORDSMITH , ADVISOR_DUCHESS , ADVISOR_CHAMPION , ADVISOR_SMUGGLER , ADVISOR_INVENTOR , ADVISOR_WIZARD , ADVISOR_QUEEN , ADVISOR_KING ] [EOL] [EOL] ADVISOR_MAX = len ( ADVISORS ) [EOL] [EOL] class Advisor ( ) : [EOL] [docstring] [EOL] def __init__ ( self , name , rewards ) : [EOL] self . name = name [EOL] self . rewards = rewards [EOL] [EOL] def choices__rewards ( self , player_resources ) : [EOL] possible_rewards = [ ] [EOL] for reward in self . rewards : [EOL] skip_reward = False [EOL] [comment] [EOL] for resource in RESOURCES : [EOL] player_amount = player_resources [ resource ] if resource in player_resources else [number] [EOL] if resource in reward . resources and ( reward . resources [ resource ] + player_amount < [number] ) : [EOL] skip_reward = True [EOL] continue [EOL] [comment] [EOL] [comment] [EOL] if reward . receive_any_resource > [number] : [EOL] for resource_reward in RECEIVE_ANY_RESOURCE [ reward . receive_any_resource ] : [EOL] rew = copy . deepcopy ( reward ) [EOL] rew . receive_any_resource = [number] [EOL] rew . resources = resource_reward [EOL] possible_rewards . append ( rew ) [EOL] continue [EOL] if not skip_reward : [EOL] possible_rewards . append ( reward ) [EOL] return possible_rewards [EOL] [EOL] ADVISOR = { ADVISOR_JESTER : Advisor ( [string] , [ Reward ( victory_points = [number] ) ] ) , ADVISOR_SQUIRE : Advisor ( [string] , [ Reward ( resources = { RESOURCE_GOLD : [number] } ) ] ) , ADVISOR_ARCHITECT : Advisor ( [string] , [ Reward ( resources = { RESOURCE_WOOD : [number] } ) ] ) , ADVISOR_MERCHANT : Advisor ( [string] , [ Reward ( resources = { RESOURCE_WOOD : [number] } ) , Reward ( resources = { RESOURCE_GOLD : [number] } ) ] ) , ADVISOR_SERGEANT : Advisor ( [string] , [ Reward ( soldiers = [number] ) ] ) , ADVISOR_ALCHEMIST : Advisor ( [string] , [ Reward ( resources = { RESOURCE_WOOD : - [number] , RESOURCE_GOLD : [number] , RESOURCE_STONE : [number] } ) , Reward ( resources = { RESOURCE_WOOD : [number] , RESOURCE_GOLD : - [number] , RESOURCE_STONE : [number] } ) , Reward ( resources = { RESOURCE_WOOD : [number] , RESOURCE_GOLD : [number] , RESOURCE_STONE : - [number] } ) , ] ) , ADVISOR_ASTRONOMER : Advisor ( [string] , [ Reward ( receive_any_resource = [number] , plustwos = [number] ) ] ) , ADVISOR_TREASURER : Advisor ( [string] , [ Reward ( resources = { RESOURCE_GOLD : [number] } ) ] ) , ADVISOR_MASTER_HUNTER : Advisor ( [string] , [ Reward ( resources = { RESOURCE_WOOD : [number] , RESOURCE_GOLD : [number] } ) , Reward ( resources = { RESOURCE_WOOD : [number] , RESOURCE_STONE : [number] } ) ] ) , ADVISOR_GENERAL : Advisor ( [string] , [ Reward ( soldiers = [number] , view_enemy = True ) ] ) , ADVISOR_SWORDSMITH : Advisor ( [string] , [ Reward ( resources = { RESOURCE_STONE : [number] , RESOURCE_WOOD : [number] } ) , Reward ( resources = { RESOURCE_STONE : [number] , RESOURCE_GOLD : [number] } ) ] ) , ADVISOR_DUCHESS : Advisor ( [string] , [ Reward ( receive_any_resource = [number] , plustwos = [number] ) ] ) , ADVISOR_CHAMPION : Advisor ( [string] , [ Reward ( resources = { RESOURCE_STONE : [number] } ) ] ) , ADVISOR_SMUGGLER : Advisor ( [string] , [ Reward ( victory_points = - [number] , receive_any_resource = [number] ) ] ) , ADVISOR_INVENTOR : Advisor ( [string] , [ Reward ( resources = { RESOURCE_GOLD : [number] , RESOURCE_WOOD : [number] , RESOURCE_STONE : [number] } ) ] ) , ADVISOR_WIZARD : Advisor ( [string] , [ Reward ( resources = { RESOURCE_GOLD : [number] } ) ] ) , ADVISOR_QUEEN : Advisor ( [string] , [ Reward ( receive_any_resource = [number] , view_enemy = True , victory_points = [number] ) ] ) , ADVISOR_KING : Advisor ( [string] , [ Reward ( resources = { RESOURCE_GOLD : [number] , RESOURCE_WOOD : [number] , RESOURCE_STONE : [number] } , soldiers = [number] ) ] ) , } [EOL] [EOL] ADVISORS_STABLE = [ score for score in ADVISORS if ADVISOR [ score ] . rewards [ [number] ] . soldiers > [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DiceRoll = List [ int ] [EOL] [EOL] class ProductiveSeasonRoll ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , player_dice , bonus_dice ) : [EOL] self . player_dice = player_dice [EOL] self . bonus_dice = bonus_dice [EOL] [EOL] def totalValue ( self ) : [EOL] [docstring] [EOL] total = [number] [EOL] for die in self . player_dice : [EOL] total += die [EOL] for die in self . bonus_dice : [EOL] total += die [EOL] return total [EOL] [EOL] class AdvisorInfluence ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , player_dice , bonus_dice , plus_two = False , market_modifier = [number] , reward = None ) : [EOL] self . player_dice = player_dice [EOL] self . bonus_dice = bonus_dice [EOL] self . plus_two = plus_two [EOL] self . market_modifier = market_modifier [EOL] self . reward = reward [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return self . __dict__ == other . __dict__ [EOL] [EOL] def toDict ( self ) : [EOL] return self . __dict__ [EOL] [EOL] @ staticmethod def fromDict ( d ) : [EOL] player_dice = d [ [string] ] [EOL] bonus_dice = d [ [string] ] [EOL] plus_two = d [ [string] ] [EOL] market_modifier = d [ [string] ] [EOL] reward = Reward . fromDict ( d [ [string] ] ) [EOL] return AdvisorInfluence ( player_dice , bonus_dice , plus_two , market_modifier , reward ) [EOL] [EOL] def advisorScore ( self ) : [EOL] total = [number] [EOL] for die in self . player_dice : [EOL] total += die [EOL] for die in self . bonus_dice : [EOL] total += die [EOL] if self . plus_two : [EOL] total += [number] [EOL] total += self . market_modifier [EOL] return total [EOL] [EOL] ADVISOR_INFLUENCE_PASS = AdvisorInfluence ( [ ] , [ ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class State ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . messages = [ ] [EOL] self . players = { } [EOL] self . over = False [EOL] self . year = [number] [EOL] self . phase = [number] [EOL] self . last_phase_played = - [number] [EOL] self . turn_order = [ ] [EOL] self . taken_advisors = { } [EOL] [EOL] def toDict ( self ) : [EOL] d = self . __dict__ [EOL] del d [ [string] ] [EOL] d [ [string] ] = [ p . toDict ( ) for p in self . playerList ( ) ] [EOL] return d [EOL] [EOL] [comment] [EOL] def fromDict ( self , d ) : [EOL] self . messages = [ ] [EOL] self . players = { } [EOL] for p in d [ [string] ] : [EOL] player = PlayerState ( [string] ) . fromDict ( p ) [EOL] self . players [ player . name ] = player [EOL] self . over = d [ [string] ] [EOL] self . year = d [ [string] ] [EOL] self . phase = d [ [string] ] [EOL] self . last_phase_played = d [ [string] ] [EOL] self . turn_order = d [ [string] ] [EOL] self . taken_advisors = d [ [string] ] [EOL] return self [EOL] [EOL] def copy ( self ) : [EOL] return copy . deepcopy ( self ) [EOL] [EOL] def message ( self , message ) : [EOL] state = self . copy ( ) [EOL] state . messages . append ( message ) [EOL] return state [EOL] [EOL] def clearMessages ( self ) : [EOL] messages = self . messages [EOL] self . messages = [ ] [EOL] return messages [EOL] [EOL] def clearAdvisorInfluences ( self ) : [EOL] [comment] [EOL] state = self . copy ( ) [EOL] state . taken_advisors = { } [EOL] return state [EOL] [EOL] def playerList ( self ) : [EOL] return [ self . players [ name ] for name in self . players ] [EOL] [EOL] def updatePlayer ( self , name , player ) : [EOL] state = self . copy ( ) [EOL] state . players [ name ] = player [EOL] messages = player . clearMessages ( ) [EOL] for message in messages : [EOL] state = state . message ( message ) [EOL] return state [EOL] [EOL] def setPlayers ( self , playerNames ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] for name in playerNames : [EOL] player = PlayerState ( name ) [EOL] state . players [ name ] = player [EOL] state . turn_order . append ( name ) [EOL] return state [EOL] [EOL] def nextYear ( self ) : [EOL] state = self . copy ( ) [EOL] if state . year == MAX_YEAR : [EOL] state . over = True [EOL] else : [EOL] state . year += [number] [EOL] return state [EOL] [EOL] def nextPhase ( self ) : [EOL] state = self . copy ( ) [EOL] if state . phase == MAX_PHASE : [EOL] state = state . nextYear ( ) [EOL] if not state . over : [EOL] state . phase = [number] [EOL] else : [EOL] state . phase += [number] [EOL] return state . message ( [string] + str ( state . year ) + [string] + PHASES [ state . phase ] ) [EOL] [EOL] def phaseComplete ( self , phase ) : [EOL] if phase != PHASES [ self . phase ] : [EOL] raise Exception ( [string] ) [EOL] state = self . copy ( ) [EOL] state . last_phase_played = self . phase [EOL] return state [EOL] [EOL] def kingsFavor ( self ) : [EOL] [docstring] [EOL] building_count = { } [EOL] resource_count = { } [EOL] for name in self . players : [EOL] player = self . players [ name ] [EOL] building_count [ name ] = len ( player . buildings ) [EOL] resource_count [ name ] = [number] [EOL] for resource in player . resources : [EOL] resource_count [ name ] += player . resources [ resource ] [EOL] [EOL] fewest_buildings = util . lowest ( building_count ) [EOL] if fewest_buildings is not None : [EOL] return self . message ( fewest_buildings + [string] ) . giveKingsFavorBonusDie ( fewest_buildings ) [EOL] [EOL] fewest_resources = util . lowest ( resource_count ) [EOL] if fewest_resources is not None : [EOL] return self . message ( fewest_resources + [string] ) . giveKingsFavorBonusDie ( fewest_resources ) [EOL] [EOL] return KINGS_FAVOR_TIE [EOL] [EOL] def takeFreeResource ( self , name , resource ) : [EOL] [docstring] [EOL] return self . giveResources ( name , { resource : [number] } ) [EOL] [EOL] def giveResources ( self , name , resources ) : [EOL] [docstring] [EOL] player = self . players [ name ] [EOL] return self . updatePlayer ( name , player . addResources ( resources ) ) [EOL] [EOL] def giveBuilding ( self , name , building , use_kings_envoy ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] player_advisors = [ ] [EOL] for score in ADVISORS : [EOL] if score in self . taken_advisors and name in self . taken_advisors [ score ] : [EOL] player_advisors . append ( score ) [EOL] state = state . updatePlayer ( name , state . players [ name ] . addBuilding ( building , player_advisors ) ) [EOL] if building != BUILD_PASS and use_kings_envoy : [EOL] state = state . updatePlayer ( name , state . players [ name ] . useKingsEnvoy ( ) ) [EOL] return state [EOL] [EOL] def giveKingsFavorBonusDie ( self , name ) : [EOL] [docstring] [EOL] player = self . players [ name ] [EOL] return self . updatePlayer ( name , player . addKingsFavorBonusDie ( ) ) [EOL] [EOL] def getNumPlayerDice ( self , name ) : [EOL] [docstring] [EOL] return self . players [ name ] . getNumPlayerDice ( PHASES [ self . phase ] ) [EOL] [EOL] def getNumBonusDice ( self , name ) : [EOL] [docstring] [EOL] return self . players [ name ] . getNumBonusDice ( PHASES [ self . phase ] ) [EOL] [EOL] def getWinners ( self ) : [EOL] highest_vp_players = [ ] [EOL] highest_vp = [number] [EOL] highest_resource_players = [ ] [EOL] highest_resource = [number] [EOL] highest_building_players = [ ] [EOL] highest_building = [number] [EOL] for p in self . playerList ( ) : [EOL] if p . victory_points == highest_vp : [EOL] highest_vp_players . append ( p . name ) [EOL] elif p . victory_points > highest_vp : [EOL] highest_vp = p . victory_points [EOL] highest_vp_players = [ p . name ] [EOL] if p . getTotalResources ( ) == highest_resource : [EOL] highest_resource_players . append ( p . name ) [EOL] elif p . getTotalResources ( ) > highest_resource : [EOL] highest_resource = p . getTotalResources ( ) [EOL] highest_resource_players = [ p . name ] [EOL] if len ( p . buildings ) == highest_building : [EOL] highest_building_players . append ( p . name ) [EOL] elif len ( p . buildings ) > highest_building : [EOL] highest_building = len ( p . buildings ) [EOL] highest_building_players = [ p . name ] [EOL] if len ( highest_vp_players ) == [number] : [EOL] return highest_vp_players [EOL] highest_resource_players = [ p for p in highest_resource_players if p in highest_vp_players ] [EOL] if len ( highest_resource_players ) == [number] : [EOL] return highest_resource_players [EOL] highest_building_players = [ p for p in highest_building_players if p in highest_resource_players ] [EOL] return highest_building_players [EOL] [EOL] def productiveSeasonRolls ( self , rolls ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] [EOL] [comment] [EOL] for name in state . players : [EOL] player = state . players [ name ] [EOL] roll = rolls [ name ] [EOL] roll . player_dice . sort ( ) [EOL] roll . bonus_dice . sort ( ) [EOL] state = state . updatePlayer ( name , player . roll ( roll ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] rollers_by_score = { } [EOL] for name in rolls : [EOL] score = rolls [ name ] . totalValue ( ) [EOL] if score not in rollers_by_score : [EOL] rollers_by_score [ score ] = [ ] [EOL] rollers_by_score [ score ] . append ( name ) [EOL] scores = [ ] [EOL] for score in rollers_by_score : [EOL] scores . append ( score ) [EOL] scores . sort ( ) [EOL] new_turn_order = [ ] [EOL] for score in scores : [EOL] if len ( rollers_by_score [ score ] ) == [number] : [EOL] new_turn_order . append ( rollers_by_score [ score ] [ [number] ] ) [EOL] else : [EOL] for name in state . turn_order : [EOL] if name in rollers_by_score [ score ] : [EOL] new_turn_order . append ( name ) [EOL] state . turn_order = new_turn_order [EOL] state = state . message ( [string] + str ( state . turn_order ) ) [EOL] [EOL] return state [EOL] [EOL] def influenceAdvisor ( self , name , influence ) : [EOL] [comment] [EOL] state = self . copy ( ) [EOL] if influence == ADVISOR_INFLUENCE_PASS : [EOL] return state . message ( name + [string] ) [EOL] score = influence . advisorScore ( ) [EOL] influencers = state . taken_advisors [ score ] if score in state . taken_advisors else [ ] [EOL] influencers . append ( name ) [EOL] state . taken_advisors [ score ] = influencers [EOL] return state . updatePlayer ( name , state . players [ name ] . influenceAdvisor ( influence ) ) [EOL] [EOL] def giveReward ( self , name , advisor_score , reward ) : [EOL] [comment] [EOL] state = self . copy ( ) [EOL] state = state . message ( name + [string] + ADVISOR [ advisor_score ] . name + [string] + str ( advisor_score ) + [string] ) [EOL] state = state . updatePlayer ( name , state . players [ name ] . applyReward ( reward ) ) [EOL] return state [EOL] [EOL] def choices_freeResource ( self , name ) : [EOL] [docstring] [EOL] return RESOURCES [EOL] [EOL] def choices__advisorInfluence ( self , name ) : [EOL] [docstring] [EOL] available = [ ] [EOL] for advisor in ADVISORS : [EOL] if advisor not in self . taken_advisors : [EOL] available . append ( advisor ) [EOL] return self . players [ name ] . choices__advisorInfluence ( available ) [EOL] [EOL] def choices__buildings ( self , name ) : [EOL] [docstring] [EOL] return self . players [ name ] . choices__buildings ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class PlayerState ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . messages = [ ] [EOL] self . name = name [EOL] self . has_kings_favor_bonus_die = False [EOL] self . has_kings_envoy = False [EOL] [comment] [EOL] [comment] [EOL] self . used_kings_envoy = False [EOL] self . plustwo_tokens = [number] [EOL] self . used_plustwo_token = False [EOL] self . used_market = False [EOL] self . buildings = [ ] [EOL] self . resources = { RESOURCE_WOOD : [number] , RESOURCE_GOLD : [number] , RESOURCE_STONE : [number] } [EOL] self . dice = ProductiveSeasonRoll ( [ ] , [ ] ) [EOL] self . victory_points = [number] [EOL] self . soldiers = [number] [EOL] [EOL] def toDict ( self ) : [EOL] d = self . __dict__ [EOL] d [ [string] ] = self . dice . __dict__ [EOL] return d [EOL] [EOL] [comment] [EOL] def fromDict ( self , d ) : [EOL] self . messages = [ ] [EOL] self . name = d [ [string] ] [EOL] self . has_kings_favor_bonus_die = d [ [string] ] [EOL] self . has_kings_envoy = d [ [string] ] [EOL] self . plustwo_tokens = d [ [string] ] [EOL] self . used_plustwo_token = d [ [string] ] [EOL] self . used_market = d [ [string] ] [EOL] self . buildings = d [ [string] ] [EOL] self . resources = d [ [string] ] [EOL] self . victory_points = d [ [string] ] [EOL] self . soldiers = d [ [string] ] [EOL] self . dice = ProductiveSeasonRoll ( player_dice = d [ [string] ] [ [string] ] , bonus_dice = d [ [string] ] [ [string] ] , ) [EOL] return self [EOL] [EOL] def copy ( self ) : [EOL] return copy . deepcopy ( self ) [EOL] [EOL] def message ( self , message ) : [EOL] state = self . copy ( ) [EOL] state . messages . append ( self . name + [string] + message ) [EOL] return state [EOL] [EOL] def clearMessages ( self ) : [EOL] messages = self . messages [EOL] self . messages = [ ] [EOL] return messages [EOL] [EOL] def addVictoryPoints ( self , victory_points ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] state . victory_points += victory_points [EOL] if victory_points >= [number] : [EOL] state = state . message ( [string] + str ( victory_points ) + [string] ) [EOL] else : [EOL] state = state . message ( [string] + str ( victory_points ) + [string] ) [EOL] return state [EOL] [EOL] def addSoldiers ( self , soldiers ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] state . soldiers += soldiers [EOL] if soldiers >= [number] : [EOL] state = state . message ( [string] + str ( soldiers ) + [string] ) [EOL] else : [EOL] state = state . message ( [string] + str ( soldiers ) + [string] ) [EOL] return state [EOL] [EOL] def addResources ( self , resources ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] for resource in resources : [EOL] amount = resources [ resource ] [EOL] if amount > [number] : [EOL] state = state . message ( [string] + str ( amount ) + [string] + resource ) [EOL] else : [EOL] state = state . message ( [string] + str ( amount ) + [string] + resource ) [EOL] state . resources [ resource ] += resources [ resource ] [EOL] return state [EOL] [EOL] def addBuilding ( self , building , player_advisors ) : [EOL] [docstring] [EOL] if building in self . buildings : [EOL] raise Exception ( [string] ) [EOL] state = self . copy ( ) [EOL] if building == BUILD_PASS : [EOL] return state . message ( [string] ) [EOL] state = state . message ( [string] + building ) [EOL] state . buildings . append ( building ) [EOL] state = state . addResources ( BUILDING_COST [ building ] ) [EOL] state = state . addVictoryPoints ( BUILDING_VP [ building ] ) [EOL] if building == BUILDING_STABLE : [EOL] for advisor in ADVISORS_STABLE : [EOL] if advisor in player_advisors : [EOL] state = state . message ( [string] ) [EOL] state = state . addSoldiers ( [number] ) [EOL] break [EOL] pass [EOL] return state [EOL] [EOL] def addKingsFavorBonusDie ( self ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] state = state . message ( [string] ) [EOL] state . has_kings_favor_bonus_die = True [EOL] return state [EOL] [EOL] def influenceAdvisor ( self , influence ) : [EOL] [comment] [EOL] state = self . copy ( ) [EOL] score = influence . advisorScore ( ) [EOL] state = state . message ( [string] + ADVISOR [ score ] . name + [string] + str ( score ) + [string] ) [EOL] state = state . spendDice ( influence ) [EOL] return state [EOL] [EOL] def spendDice ( self , influence ) : [EOL] state = self . copy ( ) [EOL] state = state . message ( [string] + str ( influence . player_dice ) ) [EOL] state . dice . player_dice = util . list_minus ( state . dice . player_dice , influence . player_dice ) [EOL] if len ( influence . bonus_dice ) > [number] : [EOL] state = state . message ( [string] + str ( influence . bonus_dice ) ) [EOL] state . dice . bonus_dice = util . list_minus ( state . dice . bonus_dice , influence . bonus_dice ) [EOL] if influence . plus_two : [EOL] state = state . message ( [string] ) [EOL] state . plustwo_tokens -= [number] [EOL] if influence . market_modifier == - [number] : [EOL] state = state . message ( [string] ) [EOL] if influence . market_modifier == [number] : [EOL] state = state . message ( [string] ) [EOL] return state [EOL] [EOL] def applyReward ( self , reward ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] if reward . victory_points != [number] : [EOL] state = state . addVictoryPoints ( reward . victory_points ) [EOL] state = state . addResources ( reward . resources ) [EOL] if reward . soldiers != [number] : [EOL] state = state . addSoldiers ( reward . soldiers ) [EOL] if reward . plustwos < [number] : [EOL] state = state . message ( [string] + str ( reward . plustwos ) + [string] ) [EOL] elif reward . plustwos > [number] : [EOL] state = state . message ( [string] + str ( reward . plustwos ) + [string] ) [EOL] state . plustwo_tokens += reward . plustwos [EOL] [comment] [EOL] return state [EOL] [EOL] def getNumPlayerDice ( self , phase ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] def getNumBonusDice ( self , phase ) : [EOL] [docstring] [EOL] num = [number] [EOL] if self . has_kings_favor_bonus_die : [EOL] num += [number] [EOL] if BUILDING_FARMS in self . buildings : [EOL] num += [number] [EOL] return num [EOL] [EOL] def getTotalResources ( self ) : [EOL] return self . resources [ RESOURCE_GOLD ] + self . resources [ RESOURCE_WOOD ] + self . resources [ RESOURCE_STONE ] [EOL] [EOL] def roll ( self , roll ) : [EOL] [docstring] [EOL] state = self . copy ( ) [EOL] state . dice = copy . deepcopy ( roll ) [EOL] state . has_kings_favor_bonus_die = False [EOL] message = [string] + [string] . join ( [ str ( die ) for die in roll . player_dice ] ) [EOL] if len ( roll . bonus_dice ) > [number] : [EOL] message += [string] + [string] . join ( [ str ( die ) for die in roll . bonus_dice ] ) [EOL] state = state . message ( message ) [EOL] return state [EOL] [EOL] def useKingsEnvoy ( self ) : [EOL] if not self . has_kings_envoy : [EOL] raise Exception ( [string] ) [EOL] state = self . copy ( ) [EOL] state . has_kings_envoy = False [EOL] return state . message ( [string] ) [EOL] [EOL] def choices__advisorInfluence ( self , available ) : [EOL] [docstring] [EOL] [comment] [EOL] market_modifiers = [ ] [EOL] if not self . used_market and BUILDING_MARKET in self . buildings : [EOL] market_modifiers = [ - [number] , [number] ] [EOL] [EOL] [comment] [EOL] plustwos = [ ] [EOL] if not self . used_plustwo_token and self . plustwo_tokens > [number] : [EOL] plustwos = [ [number] ] [EOL] [EOL] [comment] [EOL] player_dice_combos = util . unique_combinations ( self . dice . player_dice ) [EOL] bonus_dice_combos = util . unique_combinations ( self . dice . bonus_dice ) [EOL] plustwo_combos = util . unique_combinations ( plustwos ) [EOL] market_combos = util . unique_combinations ( market_modifiers , [number] ) [EOL] [EOL] [comment] [EOL] all_possible_moves = util . unique_list_pairs ( util . unique_list_pairs ( util . unique_list_pairs ( player_dice_combos , bonus_dice_combos ) , plustwo_combos ) , market_combos ) [EOL] [EOL] [comment] [EOL] possible_influences = [ ADVISOR_INFLUENCE_PASS ] [EOL] for move in all_possible_moves : [EOL] player_dice = move [ [number] ] [ [number] ] [ [number] ] [EOL] bonus_dice = move [ [number] ] [ [number] ] [ [number] ] [EOL] plustwo = len ( move [ [number] ] [ [number] ] ) > [number] [EOL] market_modifier = move [ [number] ] [ [number] ] if len ( move [ [number] ] ) > [number] else [number] [EOL] influence = AdvisorInfluence ( player_dice , bonus_dice , plustwo , market_modifier ) [EOL] score = influence . advisorScore ( ) [EOL] [comment] [EOL] if score < [number] or score > ADVISOR_MAX : [EOL] continue [EOL] [comment] [EOL] if len ( influence . player_dice ) == [number] : [EOL] continue [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if ( not self . has_kings_envoy or self . used_kings_envoy ) and score not in available : [EOL] continue [EOL] possible_influences . append ( influence ) [EOL] [EOL] return possible_influences [EOL] [EOL] def choices__buildings ( self ) : [EOL] [docstring] [EOL] buildings = [ ] [EOL] for row in PROVINCE_SHEET : [EOL] for building in row : [EOL] if building in self . buildings : [EOL] continue [EOL] after_buying = self . addResources ( BUILDING_COST [ building ] ) [EOL] if after_buying . resources [ RESOURCE_GOLD ] < [number] : [EOL] break [EOL] if after_buying . resources [ RESOURCE_WOOD ] < [number] : [EOL] break [EOL] if after_buying . resources [ RESOURCE_STONE ] < [number] : [EOL] break [EOL] buildings . append ( building ) [EOL] break [EOL] buildings . append ( BUILD_PASS ) [EOL] return buildings [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[AdvisorInfluence]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $DiceRoll$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $DiceRoll$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 $typing.List[typing.List[builtins.int]]$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 $typing.List[AdvisorInfluence]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $DiceRoll$ 0 0 0 0 0 0 0 0 0 0 0 0 $DiceRoll$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 $DiceRoll$ 0 $DiceRoll$ 0 $builtins.bool$ 0 0 0 0 $builtins.int$ 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 $DiceRoll$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[AdvisorInfluence]$ 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 $typing.List[AdvisorInfluence]$ 0 0 0 $typing.List[Building]$ 0 0 0 0 0 0 0 $typing.List[Building]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Building]$ 0 0 0 0 $kingsburg.PlayerState$ 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.PlayerState$ 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.PlayerState$ 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.PlayerState$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Building]$ 0 0 0 0 0 0 0 0 $typing.List[Building]$ 0 0 0 0 0 0 0 $typing.List[Building]$ 0
from typing import Any , Optional , Dict , Tuple , List , Union [EOL] import logger [EOL] import kingsburg [EOL] import player [EOL] import builtins [EOL] import typing [EOL] from typing import Union , List , Dict , Optional , Tuple [EOL] [EOL] import kingsburg [EOL] import player [EOL] import logger [EOL] [EOL] class Engine ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , logger ) : [EOL] self . logger = logger [EOL] [EOL] def start ( self , state ) : [EOL] [docstring] [EOL] self . logger . start ( state ) [EOL] [EOL] def over ( self , state ) : [EOL] [docstring] [EOL] self . logger . over ( state ) [EOL] [EOL] def log ( self , state , message = None ) : [EOL] [docstring] [EOL] self . logger . log ( state , message = message ) [EOL] [EOL] def setupPlayers ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] def pickFreeResource ( self , state , name ) : [EOL] raise NotImplementedError [EOL] [EOL] def rollDice ( self , state , name ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseAdvisor ( self , state , name ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseReward ( self , state , name , advisorScore , possible_rewards ) : [EOL] raise NotImplementedError [EOL] [EOL] def chooseBuilding ( self , state , name , use_kings_envoy ) : [EOL] raise NotImplementedError [EOL] [EOL] def choices__buildings ( self , state , name ) : [EOL] return state . choices__buildings ( name ) [EOL] [EOL] class PlayerEngine ( Engine ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , logger ) : [EOL] super ( ) . __init__ ( logger ) [EOL] self . players = { } [EOL] [EOL] def pickFreeResource ( self , state , name ) : [EOL] return self . players [ name ] . pickFreeResource ( state ) [EOL] [EOL] def rollDice ( self , state , name ) : [EOL] return self . players [ name ] . rollDice ( state ) [EOL] [EOL] def chooseAdvisor ( self , state , name ) : [EOL] return self . players [ name ] . chooseAdvisor ( state ) [EOL] [EOL] def chooseReward ( self , state , name , advisorScore , possible_rewards ) : [EOL] return self . players [ name ] . chooseReward ( state , advisorScore , possible_rewards ) [EOL] [EOL] def chooseBuilding ( self , state , name , use_kings_envoy ) : [EOL] return self . players [ name ] . chooseBuilding ( state , self . choices__buildings ( state , name ) , use_kings_envoy ) [EOL] [EOL] class CliEngine ( PlayerEngine ) : [EOL] [docstring] [EOL] [EOL] def wait ( self ) : [EOL] input ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] def start ( self , state ) : [EOL] super ( ) . start ( state ) [EOL] self . wait ( ) [EOL] [EOL] def log ( self , state , message = None ) : [EOL] super ( ) . log ( state , message = message ) [EOL] self . wait ( ) [EOL] [EOL] def setupPlayers ( self ) : [EOL] names = [ ] [EOL] while True : [EOL] name = input ( [string] ) [EOL] [comment] [EOL] if name == [string] : [EOL] return names [EOL] names . append ( name ) [EOL] if name . startswith ( [string] ) : [EOL] self . players [ name ] = player . RandomPlayer ( name ) [EOL] elif name . startswith ( [string] ) : [EOL] self . players [ name ] = player . GovAlphaPlayer ( name , [string] + name ) [EOL] elif name . startswith ( [string] ) : [EOL] self . players [ name ] = player . GovAlpha2Player ( name , [string] + name ) [EOL] else : [EOL] self . players [ name ] = player . CliPlayer ( name ) [EOL] [EOL] class RandomEngine ( PlayerEngine ) : [EOL] [docstring] [EOL] [EOL] def setupPlayers ( self ) : [EOL] names = [ [string] , [string] , [string] ] [EOL] for name in names : [EOL] self . players [ name ] = player . RandomPlayer ( name ) [EOL] return names [EOL] [EOL] [comment] [EOL] class TrainingDataEngine ( RandomEngine ) : [EOL] def __init__ ( self , logger ) : [EOL] RandomEngine . __init__ ( self , logger ) [EOL] self . advisor_choices = [ ] [EOL] self . states = [ ] [EOL] [EOL] [comment] [EOL] def pickFreeResource ( self , state , name ) : [EOL] choice = RandomEngine . pickFreeResource ( self , state , name ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return choice [EOL] [EOL] def chooseAdvisor ( self , state , name ) : [EOL] choice = RandomEngine . chooseAdvisor ( self , state , name ) [EOL] if name == [string] : [EOL] self . states . append ( state ) [EOL] self . advisor_choices . append ( ( choice , len ( self . states ) - [number] ) ) [EOL] return choice [EOL] [EOL] def chooseReward ( self , state , name , advisorScore , possible_rewards ) : [EOL] choice = RandomEngine . chooseReward ( self , state , name , advisorScore , possible_rewards ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return choice [EOL] [EOL] def chooseBuilding ( self , state , name , use_kings_envoy ) : [EOL] choice = RandomEngine . chooseBuilding ( self , state , name , use_kings_envoy ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return choice [EOL] [EOL] def won ( self , state ) : [EOL] winners = state . getWinners ( ) [EOL] if [string] not in winners : [EOL] return [number] [EOL] if len ( winners ) > [number] : [EOL] return [number] [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 $builtins.str$ 0 $kingsburg.AdvisorScore$ 0 $typing.List[kingsburg.Reward]$ 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $kingsburg.AdvisorScore$ 0 $typing.List[kingsburg.Reward]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 $kingsburg.Building$ 0 0 0 $kingsburg.State$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $kingsburg.State$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 0 0 $kingsburg.State$ 0 0 0 $typing.List[builtins.str]$ 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union [EOL] import builtins [EOL] import kingsburg [EOL] import typing [EOL] from typing import Union , List [EOL] import collections [EOL] [EOL] import kingsburg [EOL] [EOL] class Logger ( ) : [EOL] [docstring] [EOL] [EOL] def log ( self , state , message = None ) : [EOL] pass [EOL] [EOL] def start ( self , state ) : [EOL] pass [EOL] [EOL] def over ( self , state ) : [EOL] pass [EOL] [EOL] class SilentLogger ( Logger ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] class StdoutLogger ( Logger ) : [EOL] [docstring] [EOL] [EOL] def startLog ( self ) : [EOL] print ( [string] ) [EOL] self . divider ( ) [EOL] [EOL] def endLog ( self ) : [EOL] self . divider ( ) [EOL] [EOL] def divider ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def log ( self , state , message = None ) : [EOL] self . startLog ( ) [EOL] if isinstance ( message , str ) : [EOL] print ( [string] + message ) [EOL] elif isinstance ( message , collections . Iterable ) and len ( message ) > [number] : [EOL] print ( [string] . join ( [ [string] + m for m in message ] ) ) [EOL] self . endLog ( ) [EOL] [EOL] def start ( self , state ) : [EOL] self . startLog ( ) [EOL] print ( [string] + str ( [ player . name for player in state . playerList ( ) ] ) ) [EOL] print ( [string] + str ( state . year ) ) [EOL] print ( [string] + kingsburg . PHASES [ state . phase ] + [string] + str ( state . phase ) + [string] ) [EOL] self . endLog ( ) [EOL] [EOL] def over ( self , state ) : [EOL] self . startLog ( ) [EOL] print ( [string] + str ( state . getWinners ( ) ) ) [EOL] print ( [string] ) [EOL] self . endLog ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 $typing.Union[builtins.str,typing.List[builtins.str],None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State
from typing import Any , Dict , List , Tuple , Union [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] import util [EOL] [EOL] def test_lowest ( ) : [EOL] members = { } [EOL] assert util . lowest ( members ) is None [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . lowest ( members ) == [string] [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . lowest ( members ) is None [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . lowest ( members ) is None [EOL] [EOL] def test_highest ( ) : [EOL] members = { } [EOL] assert util . highest ( members ) is None [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . highest ( members ) == [string] [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . highest ( members ) is None [EOL] [EOL] members = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] assert util . highest ( members ) is None [EOL] [EOL] def test_unique_combinations ( ) : [EOL] roll = [ [number] , [number] , [number] ] [EOL] expected = [ [ ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] got = util . unique_combinations ( roll ) [EOL] assert got == expected [EOL] [EOL] def test_unique_combinations__allones ( ) : [EOL] roll = [ [number] , [number] , [number] ] [EOL] expected = [ [ ] , [ [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] got = util . unique_combinations ( roll ) [EOL] assert got == expected [EOL] [EOL] def test_unique_list_pairs__withduplicate ( ) : [EOL] player_roll = [ [number] , [number] , [number] ] [EOL] bonus_roll = [ [number] ] [EOL] expected = [ [ [number] , [number] ] ] [EOL] got = util . unique_list_pairs ( player_roll , bonus_roll , ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_unique_list_pairs__onebonus ( ) : [EOL] player_roll = [ [number] , [number] , [number] ] [EOL] bonus_roll = [ [number] ] [EOL] expected = [ [ [ ] , [ ] ] , [ [ ] , [ [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] , [number] ] , [ ] ] , [ [ [number] , [number] , [number] ] , [ [number] ] ] , ] [EOL] got = util . unique_list_pairs ( util . unique_combinations ( player_roll ) , util . unique_combinations ( bonus_roll ) ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_unique_list_pairs__twobonus ( ) : [EOL] player_roll = [ [number] , [number] , [number] ] [EOL] bonus_roll = [ [number] , [number] ] [EOL] expected = [ [ [ ] , [ ] ] , [ [ ] , [ [number] ] ] , [ [ ] , [ [number] ] ] , [ [ ] , [ [number] , [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] , [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] , [number] ] ] , [ [ [number] ] , [ ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] ] ] , [ [ [number] ] , [ [number] , [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] , [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] , [number] ] ] , [ [ [number] , [number] ] , [ ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] ] , [ [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ ] ] , [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] ] ] , ] [EOL] got = util . unique_list_pairs ( util . unique_combinations ( player_roll ) , util . unique_combinations ( bonus_roll ) ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_unique_list_pairs__onebonusandplustwo ( ) : [EOL] player_roll = [ [number] , [number] , [number] ] [EOL] bonus_roll = [ [number] ] [EOL] plus_two = [ [number] ] [EOL] expected = [ [ [ [ ] , [ ] ] , [ ] ] , [ [ [ ] , [ ] ] , [ [number] ] ] , [ [ [ ] , [ [number] ] ] , [ ] ] , [ [ [ ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] ] , [ ] ] , [ ] ] , [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] ] , [ ] ] , [ ] ] , [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] ] , [ ] ] , [ ] ] , [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [number] , [number] , [number] ] , [ ] ] , [ ] ] , [ [ [ [number] , [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , ] [EOL] got = util . unique_list_pairs ( util . unique_list_pairs ( util . unique_combinations ( player_roll ) , util . unique_combinations ( bonus_roll ) ) , util . unique_combinations ( plus_two ) ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_unique_list_pairs__onebonusandplustwoandmarket ( ) : [EOL] player_roll = [ [number] , [number] , [number] ] [EOL] bonus_roll = [ [number] ] [EOL] plus_two = [ [number] ] [EOL] market = [ - [number] , [number] ] [EOL] expected = [ [ [ [ [ ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ ] ] , [ [number] ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ ] ] , [ ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ ] ] , [ [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ - [number] ] ] , [ [ [ [ [number] , [number] , [number] ] , [ [number] ] ] , [ [number] ] ] , [ [number] ] ] , ] [EOL] got = util . unique_list_pairs ( util . unique_list_pairs ( util . unique_list_pairs ( util . unique_combinations ( player_roll ) , util . unique_combinations ( bonus_roll ) ) , util . unique_combinations ( plus_two ) ) , util . unique_combinations ( market , [number] ) ) [EOL] [EOL] assert got == expected [EOL] [EOL] def test_list_minus ( ) : [EOL] list1 = [ [number] , [number] , [number] ] [EOL] list2 = [ [number] ] [EOL] assert util . list_minus ( list1 , list2 ) == [ [number] , [number] ] [EOL] [EOL] list1 = [ [number] , [number] , [number] ] [EOL] list2 = [ [number] , [number] ] [EOL] assert util . list_minus ( list1 , list2 ) == [ [number] ] [EOL] [EOL] list1 = [ [number] , [number] , [number] ] [EOL] list2 = [ [number] , [number] , [number] ] [EOL] assert util . list_minus ( list1 , list2 ) == [ ] [EOL] [EOL] def test_pick_best ( ) : [EOL] input = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] got = util . pick_best ( input ) [EOL] assert got == ( [number] , [string] ) [EOL] [EOL] input = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] [EOL] got = util . pick_best ( input ) [EOL] assert got == ( [number] , [string] ) [EOL] [EOL] input = [ ( - [number] , [string] ) , ( - [number] , [string] ) , ( - [number] , [string] ) ] [EOL] got = util . pick_best ( input ) [EOL] assert got == ( - [number] , [string] ) [EOL]	
from typing import Any , Set , Optional , Dict , List , Union [EOL] import engine [EOL] import builtins [EOL] import kingsburg [EOL] import typing [EOL] from typing import Dict , Set , Optional [EOL] [EOL] import engine [EOL] import kingsburg [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] class Game ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , engine , state ) : [EOL] [comment] [EOL] [comment] [EOL] self . engine = engine [EOL] self . state = state [EOL] [EOL] def play ( self ) : [EOL] [docstring] [EOL] self . setup ( ) [EOL] while True : [EOL] over = self . tick ( ) [EOL] if over : [EOL] break [EOL] self . engine . over ( self . state ) [EOL] [EOL] def setup ( self ) : [EOL] [docstring] [EOL] self . state = self . state . setPlayers ( self . engine . setupPlayers ( ) ) [EOL] self . engine . start ( self . state ) [EOL] [EOL] def tick ( self ) : [EOL] [docstring] [EOL] if self . state . last_phase_played == self . state . phase : [EOL] self . state = self . state . nextPhase ( ) [EOL] if self . state . over : [EOL] return True [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] return False [EOL] [EOL] phase = kingsburg . PHASES [ self . state . phase ] [EOL] if phase == kingsburg . PHASE_KINGS_FAVOR : [EOL] self . kingsFavor ( ) [EOL] elif phase in kingsburg . PRODUCTIVE_SEASONS : [EOL] self . productiveSeason ( phase ) [EOL] elif phase == kingsburg . PHASE_KINGS_REWARD : [EOL] [comment] [EOL] self . state = self . state . phaseComplete ( kingsburg . PHASE_KINGS_REWARD ) [EOL] elif phase == kingsburg . PHASE_KINGS_ENVOY : [EOL] [comment] [EOL] self . state = self . state . phaseComplete ( kingsburg . PHASE_KINGS_ENVOY ) [EOL] elif phase == kingsburg . PHASE_RECRUIT_SOLDIERS : [EOL] [comment] [EOL] self . state = self . state . phaseComplete ( kingsburg . PHASE_RECRUIT_SOLDIERS ) [EOL] elif phase == kingsburg . PHASE_WINTER : [EOL] [comment] [EOL] self . state = self . state . phaseComplete ( kingsburg . PHASE_WINTER ) [EOL] [EOL] return False [EOL] [EOL] def kingsFavor ( self ) : [EOL] [docstring] [EOL] result = self . state . kingsFavor ( ) [EOL] if result == kingsburg . KINGS_FAVOR_TIE : [EOL] messages = self . state . clearMessages ( ) [EOL] messages . append ( [string] ) [EOL] self . engine . log ( self . state , messages ) [EOL] for player in self . state . players : [EOL] resource = self . engine . pickFreeResource ( self . state , player ) [EOL] self . state = self . state . takeFreeResource ( player , resource ) [EOL] else : [EOL] self . state = result [EOL] self . state = self . state . phaseComplete ( kingsburg . PHASE_KINGS_FAVOR ) [EOL] [EOL] def productiveSeason ( self , phase ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] rolls = { } [EOL] for name in self . state . players : [EOL] rolls [ name ] = self . engine . rollDice ( self . state , name ) [EOL] self . state = self . state . productiveSeasonRolls ( rolls ) [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] passes = set ( ) [EOL] while len ( passes ) < len ( self . state . turn_order ) : [EOL] for name in self . state . turn_order : [EOL] if name in passes : [EOL] continue [EOL] influence = self . engine . chooseAdvisor ( self . state , name ) [EOL] if influence == kingsburg . ADVISOR_INFLUENCE_PASS : [EOL] passes . add ( name ) [EOL] self . state = self . state . influenceAdvisor ( name , influence ) [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] [EOL] [comment] [EOL] for advisorScore in kingsburg . ADVISORS : [EOL] if advisorScore in self . state . taken_advisors : [EOL] for name in self . state . taken_advisors [ advisorScore ] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] possible_rewards = kingsburg . ADVISOR [ advisorScore ] . choices__rewards ( self . state . players [ name ] . resources ) [EOL] reward = None [EOL] if len ( possible_rewards ) == [number] : [EOL] reward = possible_rewards [ [number] ] [EOL] else : [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] reward = self . engine . chooseReward ( self . state , name , advisorScore , possible_rewards ) [EOL] if reward is not None : [EOL] [comment] [EOL] self . state = self . state . giveReward ( name , advisorScore , reward ) [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] [EOL] [comment] [EOL] for name in self . state . turn_order : [EOL] building = self . engine . chooseBuilding ( self . state , name , use_kings_envoy = False ) [EOL] self . state = self . state . giveBuilding ( name , building , use_kings_envoy = False ) [EOL] if building != kingsburg . BUILD_PASS and self . state . players [ name ] . has_kings_envoy : [EOL] building = self . engine . chooseBuilding ( self . state , name , use_kings_envoy = True ) [EOL] self . state = self . state . giveBuilding ( name , building , use_kings_envoy = True ) [EOL] self . engine . log ( self . state , self . state . clearMessages ( ) ) [EOL] [EOL] self . engine . log ( self . state , [string] ) [EOL] self . state = self . state . clearAdvisorInfluences ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] self . state = self . state . phaseComplete ( phase ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,kingsburg.ProductiveSeasonRoll]$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 $typing.Dict[builtins.str,kingsburg.ProductiveSeasonRoll]$ 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 $typing.Dict[builtins.str,kingsburg.ProductiveSeasonRoll]$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 $typing.Optional[kingsburg.Reward]$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kingsburg.State$ 0 0 0 $kingsburg.State$ 0 0 0 0 0 0
import engine [EOL] import game [EOL] import kingsburg [EOL] import engine [EOL] import logger [EOL] import game [EOL] [EOL] if __name__ == [string] : [EOL] cli = engine . CliEngine ( logger . StdoutLogger ( ) ) [EOL] g = game . Game ( cli , kingsburg . State ( ) ) [EOL] g . play ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $engine.CliEngine$ 0 0 0 0 0 0 0 0 0 0 0 0 $game.Game$ 0 0 0 0 0 $engine.CliEngine$ 0 0 0 0 0 0 0 0 $game.Game$ 0 0 0 0 0
import builtins [EOL] import datetime [EOL] import logger [EOL] import kingsburg [EOL] import game [EOL] import engine [EOL] import io [EOL] import sys [EOL] import os [EOL] import errno [EOL] import json [EOL] import time [EOL] import datetime [EOL] import random [EOL] [EOL] import kingsburg [EOL] import engine [EOL] import logger [EOL] import game [EOL] [EOL] def mkdir_p ( path ) : [EOL] try : [EOL] os . makedirs ( path ) [EOL] except OSError as exc : [comment] [EOL] if exc . errno == errno . EEXIST and os . path . isdir ( path ) : [EOL] pass [EOL] else : [EOL] raise [EOL] [EOL] def ident ( ) : [EOL] d = datetime . datetime . now ( ) [EOL] unix = time . mktime ( d . timetuple ( ) ) [EOL] rand = random . randint ( [number] , [number] ) [EOL] return str ( unix ) + [string] + str ( rand ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] num = int ( sys . argv [ [number] ] ) [EOL] batchsize = int ( sys . argv [ [number] ] ) [EOL] dir = sys . argv [ [number] ] [EOL] [EOL] mkdir_p ( dir ) [EOL] [EOL] output = [string] [EOL] for i in range ( [number] , num + [number] ) : [EOL] l = logger . SilentLogger ( ) [EOL] eng = engine . TrainingDataEngine ( l ) [EOL] state = kingsburg . State ( ) [EOL] g = game . Game ( eng , kingsburg . State ( ) ) [EOL] g . play ( ) [EOL] game_json = json . dumps ( { [string] : [ state . toDict ( ) for state in eng . states ] , [string] : [ [ choice [ [number] ] . toDict ( ) , choice [ [number] ] ] for choice in eng . advisor_choices ] , [string] : eng . won ( g . state ) } ) [EOL] output += game_json + [string] [EOL] if i % batchsize == [number] : [EOL] filename = dir + [string] + ident ( ) [EOL] f = open ( filename , [string] ) [EOL] f . write ( output ) [EOL] f . close ( ) [EOL] output = [string] [EOL] print ( i ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import kingsburg [EOL] import typing [EOL] import sys [EOL] import os [EOL] import json [EOL] [EOL] import keras [EOL] import numpy [EOL] [EOL] import kingsburg [EOL] import training [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] num = int ( sys . argv [ [number] ] ) [EOL] out = sys . argv [ [number] ] [EOL] dir = sys . argv [ [number] ] [EOL] [EOL] files = os . listdir ( dir ) [EOL] files = [ dir + [string] + f for f in files if os . path . isfile ( dir + [string] + f ) ] [EOL] [EOL] advisor_chooser_inputs = [ ] [EOL] advisor_chooser_outputs = [ ] [EOL] [EOL] print ( [string] ) [EOL] stop = False [EOL] count = [number] [EOL] for file in files : [EOL] if stop : [EOL] break [EOL] with open ( file , [string] ) as f : [EOL] lines = f . readlines ( ) [EOL] for line in lines : [EOL] if count == num : [EOL] stop = True [EOL] break [EOL] d = json . loads ( line ) [EOL] states = [ kingsburg . State ( ) . fromDict ( s ) for s in d [ [string] ] ] [EOL] for choice in d [ [string] ] : [EOL] [comment] [EOL] influence = kingsburg . AdvisorInfluence . fromDict ( choice [ [number] ] ) [EOL] s = states [ choice [ [number] ] ] [EOL] base_input = training . state_to_input ( s ) [EOL] influence_input = training . advisor_choice_to_input ( s , influence ) [EOL] advisor_chooser_inputs . append ( base_input + influence_input ) [EOL] advisor_chooser_outputs . append ( [ int ( d [ [string] ] ) , [number] - int ( d [ [string] ] ) ] ) [EOL] [EOL] print ( [string] ) [EOL] advisor_chooser_model = keras . models . Sequential ( ) [EOL] advisor_chooser_model . add ( keras . layers . Dense ( [number] , input_dim = [number] , activation = [string] ) ) [EOL] advisor_chooser_model . add ( keras . layers . Dense ( [number] , activation = [string] ) ) [EOL] advisor_chooser_model . add ( keras . layers . Dense ( [number] , activation = [string] ) ) [EOL] advisor_chooser_model . add ( keras . layers . Dense ( [number] , activation = [string] , kernel_initializer = [string] ) ) [EOL] advisor_chooser_model . compile ( loss = [string] , optimizer = [string] , metrics = [ [string] ] ) [EOL] advisor_chooser_model . fit ( numpy . asarray ( advisor_chooser_inputs ) , numpy . asarray ( advisor_chooser_outputs ) , verbose = True ) [EOL] advisor_chooser_model . save ( out + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $kingsburg.AdvisorInfluence$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 $kingsburg.AdvisorInfluence$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0