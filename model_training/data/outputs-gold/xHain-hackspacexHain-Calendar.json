from typing import Dict [EOL] import hashlib [EOL] import builtins [EOL] import typing [EOL] import hashlib [EOL] import json [EOL] import os [EOL] from typing import cast , Dict [EOL] [EOL] [EOL] class Authentication : [EOL] [EOL] def __init__ ( self , data_folder , password_salt ) : [EOL] with open ( os . path . join ( [string] , data_folder , [string] ) ) as file : [EOL] self . contents = json . load ( file ) [EOL] self . password_salt = password_salt [EOL] [EOL] def is_valid ( self , username , password ) : [EOL] if username not in self . contents . keys ( ) : [EOL] return False [EOL] if self . _hash_password ( password ) != self . contents [ username ] [ [string] ] : [EOL] return False [EOL] return True [EOL] [EOL] def user_data ( self , username ) : [EOL] return cast ( Dict , self . contents [ username ] ) [EOL] [EOL] def create_hash ( self , plaintext_password ) : [EOL] return self . _hash_password ( plaintext_password ) [EOL] [EOL] def _hash_password ( self , plaintext_password ) : [EOL] hash_algoritm = hashlib . new ( [string] ) [EOL] hash_algoritm . update ( ( plaintext_password + self . password_salt ) . encode ( [string] ) ) [EOL] return hash_algoritm . hexdigest ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $hashlib._Hash$ 0 0 0 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import authentication [EOL] import pytest [EOL] [EOL] from authentication import Authentication [EOL] [EOL] EXISTING_USERNAME = [string] [EOL] CORRECT_PASSWORD = [string] [EOL] [EOL] [EOL] @ pytest . fixture def authentication ( ) : [EOL] return Authentication ( data_folder = [string] , password_salt = [string] ) [EOL] [EOL] [EOL] def test_not_authenticated_if_username_doesnt_exists ( authentication ) : [EOL] assert authentication . is_valid ( username = [string] , password = [string] ) is False [EOL] [EOL] [EOL] def test_not_authenticated_if_password_doesnt_matches ( authentication ) : [EOL] assert authentication . is_valid ( username = EXISTING_USERNAME , password = [string] ) is False [EOL] [EOL] [EOL] def test_authenticated_if_credentials_correct ( authentication ) : [EOL] assert authentication . is_valid ( username = EXISTING_USERNAME , password = CORRECT_PASSWORD ) is True [EOL] [EOL] [EOL] def test_retrieve_user_data ( authentication ) : [EOL] user = authentication . user_data ( username = EXISTING_USERNAME ) [EOL] assert user is not None [EOL] for key in [ [string] , [string] , [string] ] : [EOL] assert key in user . keys ( ) [EOL] assert user [ key ] is not None [EOL] [EOL] [EOL] def test_password_is_not_stored_plain ( authentication ) : [EOL] user = authentication . user_data ( username = EXISTING_USERNAME ) [EOL] assert user [ [string] ] != CORRECT_PASSWORD [EOL] assert user [ [string] ] == authentication . _hash_password ( CORRECT_PASSWORD ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $authentication.Authentication$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0