from typing import Any [EOL] import hashlib [EOL] import typing [EOL] import hashlib [EOL] from functools import partial [EOL] from slacker import Slacker [EOL] from django . conf import settings [EOL] [EOL] [EOL] def hash_file ( file , block_size = [number] ) : [EOL] hasher = hashlib . md5 ( ) [EOL] for buf in iter ( partial ( file . read , block_size ) , [string] ) : [EOL] hasher . update ( buf ) [EOL] [EOL] return hasher . hexdigest ( ) [EOL] [EOL] [EOL] def notify_slack ( channel , attachments ) : [EOL] if not settings . SLACK_TOKEN : [EOL] return False [EOL] try : [EOL] slack = Slacker ( settings . SLACK_TOKEN ) [EOL] slack . chat . post_message ( channel , attachments = attachments ) [EOL] except : [EOL] return False [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . test import RequestFactory [EOL] [EOL] from pinner . users . tests . factories import UserFactory [EOL] [EOL] [EOL] @ pytest . fixture def user ( ) : [EOL] return UserFactory ( ) [EOL] [EOL] [EOL] @ pytest . fixture def request_factory ( ) : [EOL] return RequestFactory ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.conf.settings.AUTH_USER_MODEL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.test.RequestFactory$ 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LocationsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import requests [EOL] import typing [EOL] import requests [EOL] import json [EOL] from django . conf import settings [EOL] [EOL] [EOL] def reverse_place ( placeId ) : [EOL] url = ( [string] . format ( placeId , settings . GOOGLE_MAPS_KEY ) ) [EOL] try : [EOL] response = requests . get ( url ) [EOL] resp_json_payload = response . json ( ) [EOL] lat = resp_json_payload [ [string] ] [ [number] ] [ [string] ] [ [string] ] [ [string] ] [EOL] lng = resp_json_payload [ [string] ] [ [number] ] [ [string] ] [ [string] ] [ [string] ] [EOL] for component in resp_json_payload [ [string] ] [ [number] ] [ [string] ] : [EOL] if component [ [string] ] [ [number] ] == [string] : [EOL] country_code = component [ [string] ] [EOL] [comment] [EOL] for components in resp_json_payload [ [string] ] : [EOL] for component in components [ [string] ] : [EOL] [EOL] if component [ [string] ] [ [number] ] == [string] or component [ [string] ] [ [number] ] == [string] or component [ [string] ] [ [number] ] == [string] : [EOL] city_name = component [ [string] ] [EOL] break [EOL] elif component [ [string] ] [ [number] ] == [string] : [EOL] city_name = component [ [string] ] [EOL] return lat , lng , city_name , country_code [EOL] except : [EOL] lat = [number] [EOL] lng = [number] [EOL] city_name = [string] [EOL] country_code = [string] [EOL] return lat , lng , city_name , country_code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import requests [EOL] import typing [EOL] import requests [EOL] import json [EOL] from contextlib import closing [EOL] from django . conf import settings [EOL] [EOL] [EOL] class get_photos ( object ) : [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . base_url = [string] [EOL] self . headers = { [string] : [string] , [string] : [string] + settings . UNSPLASH_KEY } [EOL] self . urls = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . term = kwargs . get ( [string] ) [EOL] [EOL] def get_urls ( self ) : [EOL] payload = { [string] : [string] , [string] : self . term } [EOL] req = requests . get ( url = self . base_url , headers = self . headers , params = payload ) [EOL] data = json . loads ( req . text ) [EOL] return data [ [string] ] [ [number] ] [ [string] ] [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from . import types , queries , mutations [EOL] [EOL] [EOL] class Query ( object ) : [EOL] [EOL] get_verifications = graphene . Field ( types . GetVerificationsResponse , resolver = queries . resolve_get_verifications , required = True , args = { [string] : graphene . String ( ) } ) [EOL] [EOL] [EOL] class Mutation ( object ) : [EOL] [EOL] mark_as_verified = mutations . MarkAsVerified . Field ( required = True ) [EOL] start_phone_verification = mutations . StartPhoneVerification . Field ( required = True ) [EOL] start_email_verification = mutations . StartEmailVerification . Field ( required = True ) [EOL] complete_phone_verification = mutations . CompletePhoneVerification . Field ( required = True ) [EOL] complete_email_verification = mutations . CompleteEmailVerification . Field ( required = True ) [EOL] start_edit_phone_verification = mutations . StartEditPhoneVerification . Field ( required = True ) [EOL] start_edit_email_verification = mutations . StartEditEmailVerification . Field ( required = True ) [EOL] complete_edit_phone_verification = mutations . CompleteEditPhoneVerification . Field ( required = True ) [EOL] complete_edit_email_verification = mutations . CompleteEditEmailVerification . Field ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . utils . html import strip_tags [EOL] from django . core . mail import send_mail [EOL] [EOL] from django . template . loader import render_to_string [EOL] [EOL] [EOL] def sendVerificationEMAIL ( to , key ) : [EOL] subject = [string] [EOL] to = [ to , ] [EOL] key = [string] . format ( key ) [EOL] ctx = { [string] : key } [EOL] msg_html = render_to_string ( [string] , ctx ) [EOL] send_mail ( subject , strip_tags ( msg_html ) , [string] , to , html_message = msg_html ) [EOL] return [EOL] [EOL] [EOL] def sendConfirmEMAIL ( to , key ) : [EOL] subject = [string] [EOL] to = [ to , ] [EOL] key = [string] . format ( key ) [EOL] ctx = { [string] : key } [EOL] msg_html = render_to_string ( [string] , ctx ) [EOL] send_mail ( subject , strip_tags ( msg_html ) , [string] , to , html_message = msg_html ) [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . import types , models [EOL] from graphql_jwt . decorators import login_required [EOL] [EOL] [EOL] @ login_required def resolve_get_verifications ( self , info , ** kwargs ) : [EOL] [EOL] payload = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] verifications = models . Verification . objects . filter ( payload = payload ) [EOL] return types . GetVerificationsResponse ( ok = True , verifications = verifications ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , List [EOL] import typing [EOL] import pinner [EOL] import random [EOL] import math [EOL] import uuid [EOL] import secrets [EOL] [EOL] from django . db import models [EOL] from config import models as config_models [EOL] from django . db . models . signals import pre_save [EOL] from django . dispatch import receiver [EOL] [EOL] [EOL] class Verification ( config_models . TimeStampedModel ) : [EOL] [EOL] TARGETS = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] user = models . ForeignKey ( [string] , blank = True , null = True , on_delete = models . CASCADE , related_name = [string] ) [EOL] target = models . CharField ( max_length = [number] , choices = TARGETS ) [EOL] payload = models . CharField ( max_length = [number] ) [EOL] key = models . CharField ( max_length = [number] , blank = True ) [EOL] is_verified = models . BooleanField ( default = False ) [EOL] is_edit = models . BooleanField ( default = False ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . payload [EOL] [EOL] [EOL] @ receiver ( pre_save , sender = Verification ) def create_key ( sender , ** kwargs ) : [EOL] instance = kwargs . pop ( [string] ) [EOL] if instance . target == [string] and instance . is_verified == False : [EOL] instance . key = str ( math . floor ( random . random ( ) * [number] ) ) . zfill ( [number] ) [EOL] elif instance . target == [string] and instance . is_verified == False : [EOL] instance . key = secrets . token_urlsafe ( [number] ) [EOL] else : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from graphene_django . types import DjangoObjectType [EOL] from config import types as config_types [EOL] from users import types as user_types [EOL] from . import models [EOL] [EOL] [EOL] class VerificationType ( DjangoObjectType ) : [EOL] [EOL] class Meta : [EOL] model = models . Verification [EOL] [EOL] [EOL] class GetVerificationsResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] verifications = graphene . List ( VerificationType ) [EOL] [EOL] [EOL] class MarkAsVerifiedResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class StartPhoneVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class StartEditPhoneVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class CompletePhoneVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] token = graphene . String ( ) [EOL] [EOL] [EOL] class CompleteEditPhoneVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] phoneNumber = graphene . String ( ) [EOL] countryPhoneNumber = graphene . String ( ) [EOL] countryPhoneCode = graphene . String ( ) [EOL] isVerifiedPhoneNumber = graphene . Boolean ( ) [EOL] [EOL] [EOL] class StartEmailVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class StartEditEmailVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class CompleteEmailVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] user = graphene . Field ( user_types . UserType ) [EOL] token = graphene . String ( ) [EOL] [EOL] [EOL] class CompleteEditEmailVerificationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] user = graphene . Field ( user_types . UserType ) [EOL] token = graphene . String ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.models.Verification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.GetVerificationsResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.GetVerificationsResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.MarkAsVerifiedResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompletePhoneVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompletePhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEditEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEmailVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditEmailVerificationResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditEmailVerificationResponse]$ 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class VerificationsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from . import models [EOL] [EOL] [EOL] @ admin . register ( models . Verification ) class Verifications ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from twilio . rest import Client [EOL] [EOL] TWILIOSID = settings . TWILIOSID [EOL] TWILIOTOKEN = settings . TWILIOTOKEN [EOL] [EOL] FROM = settings . FROM [EOL] client = Client ( TWILIOSID , TWILIOTOKEN ) [EOL] [EOL] [EOL] def sendSMS ( to , body ) : [EOL] return client . messages . create ( to = to , from_ = FROM , body = body ) [EOL] [EOL] [EOL] def sendVerificationSMS ( to , key ) : [EOL] return sendSMS ( to , [string] . format ( key ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import pinner [EOL] import random [EOL] import math [EOL] import json [EOL] [EOL] import uuid [EOL] import graphene [EOL] from django . db . models . expressions import RawSQL [EOL] from django . db import IntegrityError [EOL] from graphql_jwt . decorators import login_required [EOL] from graphql_jwt . shortcuts import get_token [EOL] from users import models as users_models [EOL] from notifications import models as notification_models [EOL] from locations import models as location_models [EOL] from locations import types as location_types [EOL] from locations import reversePlace [EOL] from locations import locationThumbnail [EOL] from . import models , types [EOL] from . import sendSMS [EOL] from . import sendEMAIL [EOL] [EOL] [EOL] class MarkAsVerified ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] verificationId = graphene . Int ( required = True ) [EOL] [EOL] Output = types . MarkAsVerifiedResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] verificationId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] verification = models . Verification . objects . get ( id = verificationId ) [EOL] verification . is_verified = True [EOL] verification . save ( ) [EOL] return types . MarkAsVerifiedResponse ( ok = True ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] return types . MarkAsVerifiedResponse ( ok = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class StartPhoneVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] phoneNumber = graphene . String ( required = True ) [EOL] [EOL] Output = types . StartPhoneVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] phoneNumber = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] existingVerification = models . Verification . objects . get ( payload = phoneNumber , target = [string] , is_verified = False ) [EOL] existingVerification . delete ( ) [EOL] newVerification = models . Verification . objects . create ( payload = phoneNumber , target = [string] , is_verified = False ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendSMS . sendVerificationSMS ( newVerification . payload , newVerification . key ) [EOL] return types . StartPhoneVerificationResponse ( ok = True ) [EOL] except : [EOL] return types . StartPhoneVerificationResponse ( ok = False ) [EOL] [EOL] except IntegrityError as e : [EOL] return types . StartPhoneVerificationResponse ( ok = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] newVerification = models . Verification . objects . create ( payload = phoneNumber , target = [string] , is_verified = False ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendSMS . sendVerificationSMS ( newVerification . payload , newVerification . key ) [EOL] return types . StartPhoneVerificationResponse ( ok = True ) [EOL] except : [EOL] return types . StartPhoneVerificationResponse ( ok = False ) [EOL] [EOL] except : [EOL] return types . StartPhoneVerificationResponse ( ok = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class CompletePhoneVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] phoneNumber = graphene . String ( required = True ) [EOL] countryPhoneNumber = graphene . String ( required = True ) [EOL] countryPhoneCode = graphene . String ( required = True ) [EOL] key = graphene . String ( required = True ) [EOL] cityId = graphene . String ( required = True ) [EOL] [EOL] Output = types . CompletePhoneVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] phoneNumber = kwargs . get ( [string] ) [EOL] countryPhoneNumber = kwargs . get ( [string] ) [EOL] countryPhoneCode = kwargs . get ( [string] ) [EOL] key = kwargs . get ( [string] ) [EOL] cityId = kwargs . get ( [string] ) [EOL] [EOL] if phoneNumber . startswith ( [string] ) : [EOL] phoneNumber = phoneNumber . replace ( [string] , [string] ) [EOL] return phoneNumber [EOL] [EOL] payload = countryPhoneNumber + phoneNumber [EOL] [EOL] try : [EOL] verification = models . Verification . objects . get ( key = key , target = [string] , payload = payload , is_verified = False , is_edit = False ) [EOL] [EOL] try : [EOL] exstingUser = users_models . User . objects . get ( phone_number = phoneNumber ) [EOL] exstingUser . is_verified_phone_number = True [EOL] exstingUser . save ( ) [EOL] verification . is_verified = True [EOL] verification . user = exstingUser [EOL] verification . save ( ) [EOL] token = get_token ( exstingUser ) [EOL] return types . CompletePhoneVerificationResponse ( ok = True , token = token ) [EOL] [EOL] except users_models . User . DoesNotExist : [EOL] [EOL] def get_locations_nearby_coords ( latitude , longitude , max_distance = [number] ) : [EOL] gcd_formula = [string] [EOL] distance_raw_sql = RawSQL ( gcd_formula , ( latitude , longitude , latitude ) ) [EOL] qs = location_models . City . objects . all ( ) . annotate ( distance = distance_raw_sql ) . order_by ( [string] ) [EOL] if max_distance is not None : [EOL] qs = qs . filter ( distance__lt = max_distance ) [EOL] for i in qs : [EOL] pass [EOL] return qs [EOL] [EOL] try : [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] except location_models . City . DoesNotExist : [EOL] cityLatitude , cityLongitude , cityName , countryCode = reversePlace . reverse_place ( cityId ) [EOL] nearCities = get_locations_nearby_coords ( cityLatitude , cityLongitude , [number] ) [ : [number] ] [EOL] [EOL] try : [EOL] country = location_models . Country . objects . get ( country_code = countryCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ countryCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] country = location_models . Country . objects . create ( country_code = countryCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] city = location_models . City . objects . create ( city_id = cityId , city_name = cityName , country = country , city_photo = cityPhotoURL , city_thumbnail = cityThumbnailURL , latitude = cityLatitude , longitude = cityLongitude ) [EOL] for i in nearCities : [EOL] city . near_city . add ( i ) [EOL] city . save ( ) [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as adjectives : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as nouns : [EOL] adjectives = json . load ( adjectives ) [EOL] nouns = json . load ( nouns ) [EOL] username = random . choice ( adjectives ) + random . choice ( nouns ) . capitalize ( ) [EOL] newUser = users_models . User . objects . create_user ( username = username ) [EOL] token = get_token ( newUser ) [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] newUser . country_phone_number = countryPhoneNumber [EOL] newUser . country_phone_code = countryPhoneCode [EOL] newUser . phone_number = phoneNumber [EOL] newUser . current_city = city [EOL] newUser . current_country = city . country [EOL] newUser . current_continent = city . country . continent [EOL] moveNotification = notification_models . MoveNotification . objects . create ( actor = newUser , city = city , country = city . country , continent = city . country . continent , ) [EOL] newUser . is_verified_phone_number = True [EOL] newUser . save ( ) [EOL] verification . is_verified = True [EOL] verification . user = newUser [EOL] verification . save ( ) [EOL] return types . CompletePhoneVerificationResponse ( ok = True , token = token ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] return types . CompletePhoneVerificationResponse ( ok = False , token = None ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class StartEditPhoneVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] phoneNumber = graphene . String ( required = True ) [EOL] countryPhoneNumber = graphene . String ( required = True ) [EOL] [EOL] Output = types . StartEditPhoneVerificationResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] phoneNumber = kwargs . get ( [string] ) [EOL] countryPhoneNumber = kwargs . get ( [string] ) [EOL] if phoneNumber . startswith ( [string] ) : [EOL] phoneNumber = phoneNumber . replace ( [string] , [string] ) [EOL] return phoneNumber [EOL] payload = countryPhoneNumber + phoneNumber [EOL] user = info . context . user [EOL] [EOL] try : [EOL] existingPhoneNumber = users_models . User . objects . get ( phone_number = phoneNumber ) [EOL] if existingPhoneNumber : [EOL] return types . StartEditPhoneVerificationResponse ( ok = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] except users_models . User . DoesNotExist : [EOL] try : [EOL] preVerification = models . Verification . objects . get ( payload = payload , target = [string] , user = user , is_verified = False , is_edit = True ) [EOL] preVerification . delete ( ) [EOL] newVerification = models . Verification . objects . create ( payload = payload , target = [string] , user = user , is_verified = False , is_edit = True ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendSMS . sendVerificationSMS ( newVerification . payload , newVerification . key ) [EOL] return types . StartEditPhoneVerificationResponse ( ok = True ) [EOL] except : [EOL] newVerification . delete ( ) [EOL] return types . StartEditPhoneVerificationResponse ( ok = False ) [EOL] except models . Verification . DoesNotExist : [EOL] newVerification = models . Verification . objects . create ( payload = payload , target = [string] , user = user , is_verified = False , is_edit = True ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendSMS . sendVerificationSMS ( newVerification . payload , newVerification . key ) [EOL] return types . StartEditPhoneVerificationResponse ( ok = True ) [EOL] except : [EOL] newVerification . delete ( ) [EOL] return types . StartEditPhoneVerificationResponse ( ok = False ) [EOL] [EOL] [EOL] class CompleteEditPhoneVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] phoneNumber = graphene . String ( required = True ) [EOL] countryPhoneNumber = graphene . String ( required = True ) [EOL] countryPhoneCode = graphene . String ( required = True ) [EOL] key = graphene . String ( required = True ) [EOL] [EOL] Output = types . CompleteEditPhoneVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] phoneNumber = kwargs . get ( [string] ) [EOL] countryPhoneNumber = kwargs . get ( [string] ) [EOL] countryPhoneCode = kwargs . get ( [string] ) [EOL] key = kwargs . get ( [string] ) [EOL] payload = countryPhoneNumber + phoneNumber [EOL] user = info . context . user [EOL] [EOL] try : [EOL] verification = models . Verification . objects . get ( payload = payload , key = key , target = [string] , is_verified = False , is_edit = True ) [EOL] user . phone_number = phoneNumber [EOL] user . country_phone_number = countryPhoneNumber [EOL] user . country_phone_code = countryPhoneCode [EOL] user . is_verified_phone_number = True [EOL] user . save ( ) [EOL] verification . is_verified = True [EOL] verification . save ( ) [EOL] return types . CompleteEditPhoneVerificationResponse ( ok = True , phoneNumber = phoneNumber , countryPhoneNumber = countryPhoneNumber , countryPhoneCode = countryPhoneCode , isVerifiedPhoneNumber = True ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] return types . CompleteEditPhoneVerificationResponse ( ok = False , phoneNumber = None , countryPhoneNumber = None , countryPhoneCode = None , isVerifiedPhoneNumber = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class StartEmailVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] emailAddress = graphene . String ( required = True ) [EOL] [EOL] Output = types . StartEmailVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] emailAddress = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] existingVerification = models . Verification . objects . get ( payload = emailAddress , target = [string] , is_verified = False ) [EOL] existingVerification . delete ( ) [EOL] newVerification = models . Verification . objects . create ( payload = emailAddress , target = [string] , is_verified = False ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendEMAIL . sendVerificationEMAIL ( emailAddress , newVerification . key ) [EOL] return types . StartEmailVerificationResponse ( ok = True ) [EOL] except : [EOL] return types . StartEmailVerificationResponse ( ok = False ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] newVerification = models . Verification . objects . create ( payload = emailAddress , target = [string] , is_verified = False ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendEMAIL . sendVerificationEMAIL ( emailAddress , newVerification . key ) [EOL] return types . StartEmailVerificationResponse ( ok = True ) [EOL] except : [EOL] return types . StartEmailVerificationResponse ( ok = False ) [EOL] [EOL] except : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class CompleteEmailVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] key = graphene . String ( required = True ) [EOL] cityId = graphene . String ( required = True ) [EOL] [EOL] Output = types . CompleteEmailVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] key = kwargs . get ( [string] ) [EOL] cityId = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] verification = models . Verification . objects . get ( key = key , target = [string] , is_verified = False , is_edit = False ) [EOL] [EOL] try : [EOL] exstingUser = users_models . User . objects . get ( email_address = verification . payload ) [EOL] exstingUser . is_verified_email_address = True [EOL] exstingUser . save ( ) [EOL] verification . is_verified = True [EOL] verification . user = exstingUser [EOL] verification . save ( ) [EOL] token = get_token ( exstingUser ) [EOL] return types . CompleteEmailVerificationResponse ( ok = True , token = token ) [EOL] [EOL] except users_models . User . DoesNotExist : [EOL] [EOL] def get_locations_nearby_coords ( latitude , longitude , max_distance = [number] ) : [EOL] gcd_formula = [string] [EOL] distance_raw_sql = RawSQL ( gcd_formula , ( latitude , longitude , latitude ) ) [EOL] qs = location_models . City . objects . all ( ) . annotate ( distance = distance_raw_sql ) . order_by ( [string] ) [EOL] if max_distance is not None : [EOL] qs = qs . filter ( distance__lt = max_distance ) [EOL] for i in qs : [EOL] pass [EOL] return qs [EOL] [EOL] try : [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] except location_models . City . DoesNotExist : [EOL] cityLatitude , cityLongitude , cityName , countryCode = reversePlace . reverse_place ( cityId ) [EOL] nearCities = get_locations_nearby_coords ( cityLatitude , cityLongitude , [number] ) [ : [number] ] [EOL] [EOL] try : [EOL] country = location_models . Country . objects . get ( country_code = countryCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ countryCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] country = location_models . Country . objects . create ( country_code = countryCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] city = location_models . City . objects . create ( city_id = cityId , city_name = cityName , country = country , city_photo = cityPhotoURL , city_thumbnail = cityThumbnailURL , latitude = cityLatitude , longitude = cityLongitude ) [EOL] for i in nearCities : [EOL] city . near_city . add ( i ) [EOL] city . save ( ) [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as adjectives : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as nouns : [EOL] adjectives = json . load ( adjectives ) [EOL] nouns = json . load ( nouns ) [EOL] username = random . choice ( adjectives ) + random . choice ( nouns ) . capitalize ( ) [EOL] newUser = users_models . User . objects . create_user ( username = username ) [EOL] token = get_token ( newUser ) [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] newUser . email_address = verification . payload , [EOL] newUser . current_city = city , [EOL] newUser . current_country = city . country , [EOL] newUser . current_continent = city . country . continent , [EOL] newUser . is_verified_email_address = True [EOL] newUser . save ( ) [EOL] verification . is_verified = True [EOL] verification . user = newUser [EOL] verification . save ( ) [EOL] return types . CompleteEmailVerificationResponse ( ok = True , token = token , user = verification . user ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] return types . CompleteEditEmailVerificationResponse ( ok = False , token = None , user = None , ) [EOL] [EOL] [EOL] class StartEditEmailVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] emailAddress = graphene . String ( required = True ) [EOL] [EOL] Output = types . StartEditEmailVerificationResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] emailAddress = kwargs . get ( [string] ) . lower ( ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] existingEmailAddress = users_models . User . objects . get ( email_address = emailAddress , is_verified_email_address = True ) [EOL] if existingEmailAddress : [EOL] return types . StartEditEmailVerificationResponse ( ok = False ) [EOL] raise Exception ( [string] ) [EOL] [EOL] except users_models . User . DoesNotExist : [EOL] try : [EOL] preVerification = models . Verification . objects . get ( target = [string] , user = user , is_verified = False , is_edit = True ) [EOL] preVerification . delete ( ) [EOL] newVerification = models . Verification . objects . create ( payload = emailAddress , user = user , target = [string] , is_edit = True ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendEMAIL . sendConfirmEMAIL ( emailAddress , newVerification . key ) [EOL] return types . StartEditEmailVerificationResponse ( ok = True ) [EOL] except : [EOL] newVerification . delete ( ) [EOL] return types . StartEditEmailVerificationResponse ( ok = False ) [EOL] except models . Verification . DoesNotExist : [EOL] newVerification = models . Verification . objects . create ( payload = emailAddress , target = [string] , user = user , is_verified = False , is_edit = True ) [EOL] newVerification . save ( ) [EOL] try : [EOL] sendEMAIL . sendConfirmEMAIL ( emailAddress , newVerification . key ) [EOL] return types . StartEditEmailVerificationResponse ( ok = True ) [EOL] except : [EOL] newVerification . delete ( ) [EOL] return types . StartEditEmailVerificationResponse ( ok = False ) [EOL] [EOL] [EOL] class CompleteEditEmailVerification ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] key = graphene . String ( required = True ) [EOL] [EOL] Output = types . CompleteEditEmailVerificationResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] key = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] verification = models . Verification . objects . get ( key = key , target = [string] , is_verified = False , is_edit = True ) [EOL] verification . user . email_address = verification . payload [EOL] verification . user . is_verified_email_address = True [EOL] verification . user . save ( ) [EOL] verification . is_verified = True [EOL] token = get_token ( verification . user ) [EOL] verification . save ( ) [EOL] return types . CompleteEditEmailVerificationResponse ( ok = True , token = token , user = verification . user , ) [EOL] [EOL] except models . Verification . DoesNotExist : [EOL] return types . CompleteEditEmailVerificationResponse ( ok = False , token = None , user = None , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.MarkAsVerified.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.MarkAsVerifiedResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompletePhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditPhoneVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditPhoneVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.StartEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.StartEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.StartEditEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.mutations.CompleteEditEmailVerification.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.verifications.types.CompleteEditEmailVerificationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Type , List [EOL] import typing [EOL] import hashlib [EOL] import pinner [EOL] import os [EOL] import uuid [EOL] from django . db import models [EOL] from config import models as config_models [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . contrib . humanize . templatetags . humanize import naturaltime [EOL] [EOL] from utils import notify_slack [EOL] from django . dispatch import receiver [EOL] from django . db . models . signals import post_delete , post_save [EOL] [EOL] from imagekit . models import ProcessedImageField [EOL] from imagekit . processors import ResizeToFill [EOL] from cached_property import cached_property [EOL] [EOL] [EOL] class User ( AbstractUser , config_models . TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] GENDERS = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] uuid = models . UUIDField ( default = uuid . uuid4 , editable = False , unique = True , blank = True , null = True ) [EOL] push_token = models . CharField ( blank = True , null = True , max_length = [number] ) [EOL] bio = models . TextField ( default = [string] , blank = True , null = True ) [EOL] distance = models . IntegerField ( default = [number] , blank = True , null = True ) [EOL] website = models . URLField ( blank = True , null = True ) [EOL] gender = models . CharField ( max_length = [number] , blank = True , null = True , choices = GENDERS ) [EOL] residence = models . ForeignKey ( [string] , blank = True , null = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] nationality = models . ForeignKey ( [string] , blank = True , null = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] avatar_url = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] app_avatar_url = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] country_phone_code = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] country_phone_number = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] phone_number = models . CharField ( max_length = [number] , blank = True , null = True , unique = True ) [EOL] is_verified_phone_number = models . BooleanField ( default = False ) [EOL] is_verified_email_address = models . BooleanField ( default = False ) [EOL] email_address = models . EmailField ( blank = True , null = True , max_length = [number] ) [EOL] fbId = models . CharField ( blank = True , null = True , max_length = [number] ) [EOL] appleId = models . CharField ( blank = True , null = True , max_length = [number] ) [EOL] is_dark_mode = models . BooleanField ( default = True ) [EOL] is_hide_photos = models . BooleanField ( default = False ) [EOL] is_hide_trips = models . BooleanField ( default = False ) [EOL] is_hide_cities = models . BooleanField ( default = False ) [EOL] is_hide_countries = models . BooleanField ( default = False ) [EOL] is_hide_continents = models . BooleanField ( default = False ) [EOL] is_auto_location_report = models . BooleanField ( default = True ) [EOL] current_city = models . ForeignKey ( [string] , on_delete = models . SET_NULL , null = True , blank = True , related_name = [string] , ) [EOL] current_country = models . ForeignKey ( [string] , on_delete = models . SET_NULL , null = True , blank = True , related_name = [string] , ) [EOL] current_continent = models . ForeignKey ( [string] , on_delete = models . SET_NULL , null = True , blank = True , related_name = [string] , ) [EOL] blocked_user = models . ManyToManyField ( [string] , blank = True , related_name = [string] ) [EOL] [EOL] send_instagram = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_phone = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_email = models . EmailField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_kakao = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_facebook = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_snapchat = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_line = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_wechat = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_kik = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_vk = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_whatsapp = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_twitter = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_youtube = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_telegram = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_behance = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_linkedin = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_pinterest = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_vine = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] send_tumblr = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] @ cached_property def id ( self ) : [EOL] return self . id [EOL] [EOL] @ cached_property def photo_count ( self ) : [EOL] return self . avatar . all ( ) . order_by ( [string] ) . count ( ) [EOL] [EOL] @ cached_property def blocked_user_count ( self ) : [EOL] return self . blocked_user . all ( ) . order_by ( [string] ) . count ( ) [EOL] [EOL] @ cached_property def city_count ( self ) : [EOL] return self . moveNotificationUser . all ( ) . order_by ( [string] ) . distinct ( [string] ) . count ( ) [EOL] [comment] [EOL] [EOL] @ cached_property def country_count ( self ) : [EOL] return self . moveNotificationUser . all ( ) . order_by ( [string] ) . distinct ( [string] ) . count ( ) [EOL] [comment] [EOL] [EOL] @ cached_property def continent_count ( self ) : [EOL] return self . moveNotificationUser . all ( ) . order_by ( [string] ) . distinct ( [string] ) . count ( ) [EOL] [comment] [EOL] [EOL] @ cached_property def trip_count ( self ) : [EOL] return self . moveNotificationUser . all ( ) . count ( ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ receiver ( post_delete , sender = User ) def delete_attached_image ( sender , ** kwargs ) : [EOL] instance = kwargs . pop ( [string] ) [EOL] instance . delete ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def upload_image ( instance , filename ) : [EOL] name , extension = os . path . splitext ( filename ) [EOL] return os . path . join ( [string] ) . format ( instance . creator . id , instance . uuid , extension . lower ( ) ) [EOL] [EOL] [EOL] def upload_thumbnail ( instance , filename ) : [EOL] name , extension = os . path . splitext ( filename ) [EOL] return os . path . join ( [string] ) . format ( instance . creator . id , instance . uuid , extension . lower ( ) ) [EOL] [EOL] [EOL] def upload_app_thumbnail ( instance , filename ) : [EOL] name , extension = os . path . splitext ( filename ) [EOL] return os . path . join ( [string] ) . format ( instance . creator . id , instance . uuid , extension . lower ( ) ) [EOL] [EOL] [EOL] class Avatar ( config_models . TimeStampedModel ) : [EOL] is_main = models . BooleanField ( default = False ) [EOL] uuid = models . UUIDField ( default = uuid . uuid4 , editable = False , unique = True , blank = True , null = True ) [EOL] creator = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE , related_name = [string] ) [EOL] image = ProcessedImageField ( upload_to = upload_image , null = True , blank = True , processors = [ ResizeToFill ( [number] , [number] ) ] , format = [string] , options = { [string] : [number] } ) [EOL] thumbnail = ProcessedImageField ( upload_to = upload_thumbnail , null = True , blank = True , processors = [ ResizeToFill ( [number] , [number] ) ] , format = [string] , options = { [string] : [number] } ) [EOL] app_thumbnail = ProcessedImageField ( upload_to = upload_app_thumbnail , null = True , blank = True , processors = [ ResizeToFill ( [number] , [number] ) ] , format = [string] , options = { [string] : [number] } ) [EOL] [EOL] @ cached_property def like_count ( self ) : [EOL] return self . likes . all ( ) . count ( ) [EOL] [EOL] @ property def natural_time ( self ) : [EOL] return naturaltime ( self . created_at ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ receiver ( post_delete , sender = Avatar ) def delete_attached_image ( sender , ** kwargs ) : [EOL] instance = kwargs . pop ( [string] ) [EOL] instance . image . delete ( save = False ) [EOL] instance . thumbnail . delete ( save = False ) [EOL] [EOL] @ property def natural_time ( self ) : [EOL] return naturaltime ( self . created_at ) [EOL] [EOL] [EOL] def logo_image_upload_to ( instance , filename ) : [EOL] m = hashlib . md5 ( ) [EOL] m . update ( f'{ instance . id }{ filename }' . encode ( [string] ) ) [EOL] return f' [string] { m . hexdigest ( ) } [string] { filename }' [EOL] [EOL] [EOL] class Like ( config_models . TimeStampedModel ) : [EOL] [EOL] creator = models . ForeignKey ( User , on_delete = models . CASCADE , null = True , related_name = [string] ) [EOL] avatar = models . ForeignKey ( Avatar , on_delete = models . CASCADE , null = True , related_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Avatar]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] from locations import types as location_types [EOL] from . import types , mutations , queries [EOL] import graphql_jwt [EOL] import graphene [EOL] [EOL] [EOL] class Query ( object ) : [EOL] [EOL] user_profile = graphene . Field ( types . UserProfileResponse , resolver = queries . resolve_profile , required = True , args = { [string] : graphene . String ( required = True ) , } ) [EOL] me = graphene . Field ( types . UserProfileResponse , resolver = queries . resolve_me , required = True ) [EOL] search_users = graphene . Field ( types . SearchUsersResponse , resolver = queries . resolve_search_users , required = True , args = { [string] : graphene . String ( required = True ) } ) [EOL] user_list = graphene . Field ( types . UserListResponse , resolver = queries . resolve_user_list , required = True ) [EOL] top_countries = graphene . Field ( location_types . CountriesResponse , resolver = queries . resolve_top_countries , required = True , args = { [string] : graphene . Int ( ) , [string] : graphene . String ( required = True ) , } ) [EOL] frequent_visits = graphene . Field ( location_types . CitiesResponse , resolver = queries . resolve_frequent_visits , required = True , args = { [string] : graphene . Int ( ) , [string] : graphene . String ( required = True ) , } ) [EOL] top_continents = graphene . Field ( location_types . ContinentsResponse , resolver = queries . resolve_top_continents , required = True , args = { [string] : graphene . Int ( ) , [string] : graphene . String ( required = True ) , } ) [EOL] get_avatars = graphene . Field ( types . AvatarListResponse , resolver = queries . resolve_get_avatars , required = True , args = { [string] : graphene . String ( required = True ) , } ) [EOL] get_avatar_detail = graphene . Field ( types . AvatarDetailResponse , resolver = queries . resolve_get_avatar_detail , required = True , args = { [string] : graphene . String ( required = True ) , } ) [EOL] get_same_trips = graphene . Field ( location_types . GetSameTripsResponse , resolver = queries . resolve_get_same_trips , required = True , args = { [string] : graphene . String ( required = True ) } ) [EOL] get_blocked_user = graphene . Field ( types . GetBlockedUserResponse , resolver = queries . resolve_get_blocked_user , required = True , ) [EOL] [EOL] [EOL] class Mutation ( object ) : [EOL] [EOL] edit_profile = mutations . EditProfile . Field ( required = True ) [EOL] delete_profile = mutations . DeleteProfile . Field ( required = True ) [EOL] log_in = graphql_jwt . ObtainJSONWebToken . Field ( required = True ) [EOL] facebook_connect = mutations . FacebookConnect . Field ( required = True ) [EOL] apple_connect = mutations . AppleConnect . Field ( required = True ) [EOL] upload_avatar = mutations . UploadAvatar . Field ( required = True ) [EOL] delete_avatar = mutations . DeleteAvatar . Field ( required = True ) [EOL] mark_as_main = mutations . MarkAsMain . Field ( required = True ) [EOL] toggle_settings = mutations . ToggleSettings . Field ( required = True ) [EOL] slack_report_users = mutations . SlackReportUsers . Field ( required = True ) [EOL] register_push = mutations . RegisterPush . Field ( required = True ) [EOL] add_block_user = mutations . AddBlockUser . Field ( required = True ) [EOL] delete_block_user = mutations . DeleteBlockUser . Field ( required = True ) [EOL] update_sns = mutations . UpdateSNS . Field ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from graphene_django . types import DjangoObjectType [EOL] from . import models [EOL] from config import types as config_types [EOL] from locations import types as location_types [EOL] from notifications import types as notification_types [EOL] from django . utils import timezone [EOL] import datetime [EOL] [EOL] [EOL] class UserType ( DjangoObjectType ) : [EOL] username = graphene . String ( source = [string] ) [EOL] photo_count = graphene . Int ( source = [string] ) [EOL] city_count = graphene . Int ( source = [string] ) [EOL] country_count = graphene . Int ( source = [string] ) [EOL] continent_count = graphene . Int ( source = [string] ) [EOL] post_count = graphene . Int ( source = [string] ) [EOL] trip_count = graphene . Int ( source = [string] ) [EOL] blocked_user_count = graphene . Int ( source = [string] ) [EOL] is_self = graphene . Boolean ( ) [EOL] [EOL] def resolve_is_self ( self , info ) : [EOL] user = info . context . user [EOL] if self . id == user . id : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] class Meta : [EOL] model = models . User [EOL] [EOL] [EOL] class AvatarType ( DjangoObjectType ) : [EOL] like_count = graphene . Int ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = models . Avatar [EOL] [EOL] [EOL] class LikeType ( DjangoObjectType ) : [EOL] [EOL] class Meta : [EOL] model = models . Like [EOL] [EOL] [EOL] class UpdateSNSResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] user = graphene . Field ( UserType ) [EOL] [EOL] [EOL] class ToggleSettingsResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] user = graphene . Field ( UserType ) [EOL] [EOL] [EOL] class AvatarListResponse ( graphene . ObjectType ) : [EOL] avatars = graphene . List ( AvatarType ) [EOL] [EOL] [EOL] class AvatarDetailResponse ( graphene . ObjectType ) : [EOL] avatar = graphene . Field ( AvatarType ) [EOL] [EOL] [EOL] class MarkAsMainResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] preAvatarUUID = graphene . String ( ) [EOL] newAvatarUUID = graphene . String ( ) [EOL] avatar = graphene . Field ( AvatarType ) [EOL] [EOL] [EOL] class UploadAvatarResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] preAvatarUUID = graphene . String ( ) [EOL] newAvatarUUID = graphene . String ( ) [EOL] avatar = graphene . Field ( AvatarType ) [EOL] [EOL] [EOL] class UserProfileResponse ( graphene . ObjectType ) : [EOL] user = graphene . Field ( UserType ) [EOL] [EOL] [EOL] class EditProfileResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] token = graphene . String ( ) [EOL] user = graphene . Field ( UserType ) [EOL] [EOL] [EOL] class DeleteProfileResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class DeleteAvatarResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] uuid = graphene . String ( ) [EOL] [EOL] [EOL] class SearchUsersResponse ( graphene . ObjectType ) : [EOL] users = graphene . List ( UserType ) [EOL] [EOL] [EOL] class FacebookConnectResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] token = graphene . String ( ) [EOL] [EOL] [EOL] class AppleConnectResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] token = graphene . String ( ) [EOL] [EOL] [EOL] class ReportLocationResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class UserListResponse ( graphene . ObjectType ) : [EOL] users = graphene . List ( UserType ) [EOL] [EOL] [EOL] class SlackReportUsersResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class UsersNowResponse ( graphene . ObjectType ) : [EOL] page = graphene . Int ( ) [EOL] hasNextPage = graphene . Boolean ( ) [EOL] usersNow = graphene . List ( UserType ) [EOL] [EOL] [EOL] class RegisterPushResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class AddBlockUserResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] blockedUser = graphene . Field ( UserType ) [EOL] [EOL] [EOL] class DeleteBlockUserResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] uuid = graphene . String ( ) [EOL] [EOL] [EOL] class GetBlockedUserResponse ( graphene . ObjectType ) : [EOL] blocked_users = graphene . List ( UserType ) [EOL] [EOL] [EOL] class GetUserListResponse ( graphene . ObjectType ) : [EOL] users = graphene . List ( UserType ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AvatarType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UpdateSNSResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UpdateSNSResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.ToggleSettingsResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.ToggleSettingsResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AvatarListResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AvatarDetailResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.MarkAsMainResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.MarkAsMainResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.MarkAsMainResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.MarkAsMainResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UploadAvatarResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UploadAvatarResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UploadAvatarResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UploadAvatarResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserProfileResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.EditProfileResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.EditProfileResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.EditProfileResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteProfileResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteAvatarResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteAvatarResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.SearchUsersResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.FacebookConnectResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.FacebookConnectResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AppleConnectResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AppleConnectResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.ReportLocationResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UserListResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.SlackReportUsersResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UsersNowResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UsersNowResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UsersNowResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.RegisterPushResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AddBlockUserResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AddBlockUserResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteBlockUserResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteBlockUserResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.GetBlockedUserResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.GetUserListResponse]$ 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] from graphql_jwt . decorators import login_required [EOL] from . import types , models [EOL] from django . db . models import Count , F , Sum , Q [EOL] from locations import types as location_types [EOL] from locations import models as location_models [EOL] from notifications import models as notification_models [EOL] [EOL] [EOL] def resolve_profile ( self , info , ** kwargs ) : [EOL] [EOL] uuid = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] user = models . User . objects . get ( uuid = uuid ) [EOL] return types . UserProfileResponse ( user = user ) [EOL] [EOL] except models . User . DoesNotExist : [EOL] return types . UserProfileResponse ( user = None ) [EOL] [EOL] [EOL] def resolve_get_same_trips ( self , info , ** kwargs ) : [EOL] [EOL] uuid = kwargs . get ( [string] ) [EOL] [EOL] Auser = info . context . user [EOL] Buser = models . User . objects . get ( uuid = uuid ) [EOL] [EOL] try : [EOL] ATrips = Auser . moveNotificationUser . values ( [string] ) [EOL] BTrips = Buser . moveNotificationUser . values ( [string] ) [EOL] Trips = ATrips . intersection ( BTrips ) [EOL] cities = location_models . City . objects . filter ( id__in = Trips ) [EOL] count = cities . count ( ) [EOL] return location_types . GetSameTripsResponse ( ok = True , cities = cities , count = count ) [EOL] [EOL] except models . User . DoesNotExist : [EOL] return location_types . GetSameTripsResponse ( ok = False , cities = None , count = None ) [EOL] [EOL] [EOL] def resolve_get_avatars ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] avatars = models . Avatar . objects . filter ( creator__uuid = uuid ) [EOL] return types . AvatarListResponse ( avatars = avatars ) [EOL] except models . Avatar . DoesNotExist : [EOL] return types . AvatarListResponse ( avatars = None ) [EOL] [EOL] [EOL] def resolve_get_avatar_detail ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] avatarId = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] avatar = models . Avatar . objects . get ( uuid = avatarId ) [EOL] return types . AvatarDetailResponse ( avatar = avatar ) [EOL] except models . Avatar . DoesNotExist : [EOL] return types . AvatarDetailResponse ( avatar = None ) [EOL] [EOL] [EOL] @ login_required def resolve_top_countries ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] page = kwargs . get ( [string] , [number] ) [EOL] [EOL] countries = location_models . Country . objects . filter ( cities__moveNotificationCity__actor__uuid = uuid ) . annotate ( count = Count ( [string] , distinct = True ) ) . order_by ( [string] ) [EOL] [EOL] return location_types . CountriesResponse ( countries = countries ) [EOL] [EOL] [EOL] @ login_required def resolve_frequent_visits ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] page = kwargs . get ( [string] , [number] ) [EOL] [EOL] cities = location_models . City . objects . filter ( moveNotificationCity__actor__uuid = uuid ) . annotate ( count = Count ( [string] , distinct = True ) ) . order_by ( [string] ) [EOL] [EOL] return location_types . CitiesResponse ( cities = cities ) [EOL] [EOL] [EOL] @ login_required def resolve_top_continents ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] page = kwargs . get ( [string] , [number] ) [EOL] [EOL] continents = location_models . Continent . objects . filter ( countries__cities__moveNotificationCity__actor__uuid = uuid ) . annotate ( count = Count ( [string] , distinct = True ) ) . order_by ( [string] ) [EOL] [EOL] return location_types . ContinentsResponse ( continents = continents ) [EOL] [EOL] [EOL] @ login_required def resolve_me ( self , info ) : [EOL] [EOL] user = info . context . user [EOL] users = models . User . objects . all ( ) [EOL] [EOL] return types . UserProfileResponse ( user = user ) [EOL] [EOL] [EOL] @ login_required def resolve_search_users ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] search = kwargs . get ( [string] ) [EOL] [EOL] users = models . User . objects . filter ( username__istartswith = search ) [ : [number] ] [EOL] [EOL] return types . SearchUsersResponse ( users = users ) [EOL] [EOL] [EOL] @ login_required def resolve_user_list ( self , info ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] users = models . User . objects . all ( ) . exclude ( pk = user . pk ) . order_by ( [string] ) [EOL] [EOL] return types . UserListResponse ( users = users ) [EOL] [EOL] [EOL] @ login_required def resolve_get_blocked_user ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] try : [EOL] blocked_users = user . blocked_user . all ( ) [EOL] return types . GetBlockedUserResponse ( blocked_users = blocked_users ) [EOL] except models . User . DoesNotExist : [EOL] return types . GetBlockedUserResponse ( blocked_users = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Type , List [EOL] import typing [EOL] import pinner [EOL] import random [EOL] import math [EOL] import json [EOL] [EOL] import graphene [EOL] from django . db import IntegrityError [EOL] from django . db . models import Q [EOL] from django . contrib . auth . models import User [EOL] from graphql_jwt . decorators import login_required [EOL] from graphql_jwt . shortcuts import get_token [EOL] from graphene_file_upload . scalars import Upload [EOL] [EOL] from django . db . models . expressions import RawSQL [EOL] from locations import locationThumbnail [EOL] from locations import reversePlace [EOL] from locations import models as location_models [EOL] from . import models , types [EOL] [EOL] from utils import notify_slack [EOL] from notifications import models as notification_models [EOL] [EOL] from django . core . files . base import ContentFile [EOL] from io import BytesIO [EOL] from urllib . request import urlopen [EOL] [EOL] [EOL] class UpdateSNS ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] payload = graphene . String ( required = True ) [EOL] username = graphene . String ( required = True ) [EOL] [EOL] Output = types . UpdateSNSResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] payload = kwargs . get ( [string] ) [EOL] username = kwargs . get ( [string] ) [EOL] [EOL] if payload == [string] : [EOL] try : [EOL] user . send_instagram = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_phone = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_email = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_kakao = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_facebook = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_youtube = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_twitter = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_telegram = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_snapchat = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_line = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_wechat = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_kik = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_vk = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_whatsapp = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_behance = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_linkedin = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_pinterest = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_vine = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] if payload == [string] : [EOL] try : [EOL] user . send_tumblr = username [EOL] user . save ( ) [EOL] return types . UpdateSNSResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . UpdateSNSResponse ( ok = False , user = None ) [EOL] [EOL] [EOL] class ToggleSettings ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] payload = graphene . String ( required = True ) [EOL] [EOL] Output = types . ToggleSettingsResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] payload = kwargs . get ( [string] ) [EOL] if payload == [string] : [EOL] if user . is_dark_mode == True : [EOL] try : [EOL] user . is_dark_mode = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_dark_mode == False : [EOL] try : [EOL] user . is_dark_mode = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_hide_photos == True : [EOL] try : [EOL] user . is_hide_photos = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_hide_photos == False : [EOL] try : [EOL] user . is_hide_photos = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_hide_trips == True : [EOL] try : [EOL] user . is_hide_trips = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_hide_trips == False : [EOL] try : [EOL] user . is_hide_trips = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_hide_cities == True : [EOL] try : [EOL] user . is_hide_cities = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_hide_cities == False : [EOL] try : [EOL] user . is_hide_cities = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_hide_countries == True : [EOL] try : [EOL] user . is_hide_countries = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_hide_countries == False : [EOL] try : [EOL] user . is_hide_countries = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_hide_continents == True : [EOL] try : [EOL] user . is_hide_continents = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_hide_continents == False : [EOL] try : [EOL] user . is_hide_continents = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif payload == [string] : [EOL] if user . is_auto_location_report == True : [EOL] try : [EOL] user . is_auto_location_report = False [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] elif user . is_auto_location_report == False : [EOL] try : [EOL] user . is_auto_location_report = True [EOL] user . save ( ) [EOL] return types . ToggleSettingsResponse ( ok = True , user = user ) [EOL] except : [EOL] return types . ToggleSettingsResponse ( ok = False , user = None ) [EOL] [EOL] [EOL] class EditProfile ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] username = graphene . String ( ) [EOL] bio = graphene . String ( ) [EOL] gender = graphene . String ( ) [EOL] firstName = graphene . String ( ) [EOL] lastName = graphene . String ( ) [EOL] nationalityCode = graphene . String ( ) [EOL] residenceCode = graphene . String ( ) [EOL] [EOL] Output = types . EditProfileResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] if user . is_authenticated : [EOL] [EOL] bio = kwargs . get ( [string] , user . bio ) [EOL] gender = kwargs . get ( [string] , user . gender ) [EOL] firstName = kwargs . get ( [string] , user . first_name ) [EOL] lastName = kwargs . get ( [string] , user . last_name ) [EOL] username = kwargs . get ( [string] , user . username ) [EOL] nationalityCode = kwargs . get ( [string] , user . nationality ) [EOL] residenceCode = kwargs . get ( [string] , user . residence ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] try : [EOL] nationality = location_models . Country . objects . get ( country_code = nationalityCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ nationalityCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] nationality = location_models . Country . objects . create ( country_code = nationalityCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] residence = location_models . Country . objects . get ( country_code = residenceCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ residenceCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] residence = location_models . Country . objects . create ( country_code = residenceCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] user . bio = bio [EOL] user . gender = gender [EOL] user . nationality = nationality [EOL] user . residence = residence [EOL] user . save ( ) [EOL] [EOL] user . first_name = firstName [EOL] user . last_name = lastName [EOL] if user . username != username : [EOL] try : [EOL] existing_user = models . User . objects . get ( username = username ) [EOL] raise Exception ( [string] ) [EOL] except models . User . DoesNotExist : [EOL] user . username = username [EOL] user . save ( ) [EOL] token = get_token ( user ) [EOL] return types . EditProfileResponse ( ok = True , user = user , token = token ) [EOL] [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] error = [string] [EOL] return types . EditProfileResponse ( ok = False , user = None , token = None ) [EOL] [EOL] else : [EOL] error = [string] [EOL] return types . EditProfileResponse ( ok = False , user = None , token = None ) [EOL] [EOL] [EOL] class MarkAsMain ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] uuid = graphene . String ( required = True ) [EOL] [EOL] Output = types . MarkAsMainResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] prevMainAvatar = models . Avatar . objects . get ( is_main = True , creator = user ) [EOL] if prevMainAvatar : [EOL] newMainAvatar = models . Avatar . objects . get ( uuid = uuid ) [EOL] prevMainAvatar . is_main = False [EOL] newMainAvatar . is_main = True [EOL] user . avatar_url = newMainAvatar . thumbnail [EOL] user . app_avatar_url = newMainAvatar . app_thumbnail [EOL] user . save ( ) [EOL] prevMainAvatar . save ( ) [EOL] newMainAvatar . save ( ) [EOL] return types . MarkAsMainResponse ( ok = True , avatar = newMainAvatar , preAvatarUUID = prevMainAvatar . uuid , newAvatarUUID = uuid ) [EOL] else : [EOL] newMainAvatar = models . Avatar . objects . get ( uuid = uuid ) [EOL] newMainAvatar . is_main = True [EOL] user . avatar_url = newMainAvatar . thumbnail [EOL] user . app_avatar_url = newMainAvatar . app_thumbnail [EOL] user . save ( ) [EOL] newMainAvatar . save ( ) [EOL] return types . MarkAsMainResponse ( ok = True , avatar = newMainAvatar , preAvatarUUID = None , newAvatarUUID = uuid ) [EOL] [EOL] except models . Avatar . DoesNotExist : [EOL] newMainAvatar = models . Avatar . objects . get ( uuid = uuid ) [EOL] newMainAvatar . is_main = True [EOL] user . avatar_url = newMainAvatar . thumbnail [EOL] user . app_avatar_url = newMainAvatar . app_thumbnail [EOL] user . save ( ) [EOL] newMainAvatar . save ( ) [EOL] return types . MarkAsMainResponse ( ok = True , avatar = newMainAvatar , preAvatarUUID = None , newAvatarUUID = uuid ) [EOL] [EOL] [EOL] class RegisterPush ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] push_token = graphene . String ( required = True ) [EOL] [EOL] Output = types . RegisterPushResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] push_token = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] if user . push_token == push_token : [EOL] return types . RegisterPushResponse ( ok = True ) [EOL] else : [EOL] user . push_token = push_token [EOL] user . save ( ) [EOL] return types . RegisterPushResponse ( ok = True ) [EOL] [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . RegisterPushResponse ( ok = False ) [EOL] [EOL] [EOL] class DeleteProfile ( graphene . Mutation ) : [EOL] [EOL] Output = types . DeleteProfileResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] try : [EOL] user . delete ( ) [EOL] user . delete ( ) [EOL] return types . DeleteProfileResponse ( ok = True ) [EOL] [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . DeleteProfileResponse ( ok = False ) [EOL] [EOL] [EOL] class UploadAvatar ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] file = Upload ( required = True ) [EOL] [EOL] Output = types . UploadAvatarResponse [EOL] [EOL] @ login_required def mutate ( self , info , file , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] try : [EOL] prevMainAvatar = models . Avatar . objects . filter ( is_main = True , creator = user ) [EOL] prevMainAvatar . update ( is_main = False ) [EOL] newMainAvatar = models . Avatar . objects . create ( is_main = True , image = file , thumbnail = file , app_thumbnail = file , creator = user ) [EOL] user . avatar_url = newMainAvatar . thumbnail [EOL] user . app_avatar_url = newMainAvatar . app_thumbnail [EOL] prevMainAvatar . save ( ) [EOL] user . save ( ) [EOL] return types . UploadAvatarResponse ( ok = True , preAvatarUUID = prevMainAvatar . uuid , newAvatarUUID = newMainAvatar . uuid , avatar = newMainAvatar ) [EOL] [EOL] except models . Avatar . DoesNotExist : [EOL] newMainAvatar = models . Avatar . objects . create ( is_main = True , image = file , thumbnail = file , app_thumbnail = file , creator = user ) [EOL] user . avatar_url = newMainAvatar . thumbnail [EOL] user . app_avatar_url = newMainAvatar . app_thumbnail [EOL] user . save ( ) [EOL] return types . UploadAvatarResponse ( ok = True , preAvatarUUID = None , newAvatarUUID = newMainAvatar . uuid , avatar = newMainAvatar ) [EOL] [EOL] [EOL] class DeleteAvatar ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] uuid = graphene . String ( required = True ) [EOL] [EOL] Output = types . DeleteAvatarResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] uuid = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] avatar = models . Avatar . objects . get ( uuid = uuid ) [EOL] if not avatar . is_main : [EOL] avatar . delete ( ) [EOL] return types . DeleteAvatarResponse ( ok = True , uuid = uuid ) [EOL] [EOL] except : [EOL] return types . DeleteAvatarResponse ( ok = False , uuid = uuid ) [EOL] [EOL] [EOL] class FacebookConnect ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] first_name = graphene . String ( ) [EOL] last_name = graphene . String ( ) [EOL] email = graphene . String ( ) [EOL] gender = graphene . String ( ) [EOL] cityId = graphene . String ( required = True ) [EOL] countryCode = graphene . String ( required = True ) [EOL] fbId = graphene . String ( required = True ) [EOL] [EOL] Output = types . FacebookConnectResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] first_name = kwargs . get ( [string] ) [EOL] last_name = kwargs . get ( [string] ) [EOL] email = kwargs . get ( [string] ) [EOL] gender = kwargs . get ( [string] ) [EOL] cityId = kwargs . get ( [string] ) [EOL] countryCode = kwargs . get ( [string] ) [EOL] fbId = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] user = models . User . objects . get ( fbId = fbId ) [EOL] token = get_token ( user ) [EOL] return types . FacebookConnectResponse ( ok = True , token = token ) [EOL] [EOL] except models . User . DoesNotExist : [EOL] [EOL] def get_locations_nearby_coords ( latitude , longitude , max_distance = [number] ) : [EOL] gcd_formula = [string] [EOL] distance_raw_sql = RawSQL ( gcd_formula , ( latitude , longitude , latitude ) ) [EOL] qs = location_models . City . objects . all ( ) . annotate ( distance = distance_raw_sql ) . order_by ( [string] ) [EOL] if max_distance is not None : [EOL] qs = qs . filter ( Q ( distance__lt = max_distance ) ) [EOL] for i in qs : [EOL] pass [EOL] return qs [EOL] [EOL] try : [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] except location_models . City . DoesNotExist : [EOL] cityLatitude , cityLongitude , cityName , countryCode = reversePlace . reverse_place ( cityId ) [EOL] nearCities = get_locations_nearby_coords ( cityLatitude , cityLongitude , [number] ) [ : [number] ] [EOL] [EOL] try : [EOL] country = location_models . Country . objects . get ( country_code = countryCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ countryCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] [EOL] country = location_models . Country . objects . create ( country_code = countryCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] [EOL] city = location_models . City . objects . create ( city_id = cityId , city_name = cityName , country = country , city_photo = cityPhotoURL , city_thumbnail = cityThumbnailURL , latitude = cityLatitude , longitude = cityLongitude ) [EOL] for i in nearCities : [EOL] city . near_city . add ( i ) [EOL] city . save ( ) [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] adjectives = json . load ( file ) [EOL] if email : [EOL] local , at , domain = email . rpartition ( [string] ) [EOL] username = random . choice ( adjectives ) + local . capitalize ( ) [EOL] [EOL] newUser = models . User . objects . create_user ( username ) [EOL] newUser . first_name = first_name [EOL] newUser . last_name = last_name [EOL] [EOL] avatar_url = [string] % fbId [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] newUser . fbId = fbId [EOL] newUser . email_address = email [EOL] newUser . is_verified_email_address = True [EOL] newUser . gender = gender [EOL] newUser . avatar_url = None [EOL] newUser . app_avatar_url = None [EOL] newUser . current_city = city [EOL] newUser . current_country = city . country [EOL] newUser . current_continent = city . country . continent [EOL] newUser . save ( ) [EOL] moveNotification = notification_models . MoveNotification . objects . create ( actor = newUser , city = city , country = city . country , continent = city . country . continent , ) [EOL] [EOL] token = get_token ( newUser ) [EOL] return types . FacebookConnectResponse ( ok = True , token = token ) [EOL] [EOL] [EOL] class AppleConnect ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] first_name = graphene . String ( ) [EOL] last_name = graphene . String ( ) [EOL] email = graphene . String ( ) [EOL] cityId = graphene . String ( required = True ) [EOL] countryCode = graphene . String ( required = True ) [EOL] appleId = graphene . String ( required = True ) [EOL] [EOL] Output = types . AppleConnectResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] first_name = kwargs . get ( [string] ) [EOL] last_name = kwargs . get ( [string] ) [EOL] email = kwargs . get ( [string] ) [EOL] gender = kwargs . get ( [string] ) [EOL] cityId = kwargs . get ( [string] ) [EOL] countryCode = kwargs . get ( [string] ) [EOL] appleId = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] user = models . User . objects . get ( appleId = appleId ) [EOL] token = get_token ( user ) [EOL] return types . AppleConnectResponse ( ok = True , token = token ) [EOL] [EOL] except models . User . DoesNotExist : [EOL] [EOL] def get_locations_nearby_coords ( latitude , longitude , max_distance = [number] ) : [EOL] gcd_formula = [string] [EOL] distance_raw_sql = RawSQL ( gcd_formula , ( latitude , longitude , latitude ) ) [EOL] qs = location_models . City . objects . all ( ) . annotate ( distance = distance_raw_sql ) . order_by ( [string] ) [EOL] if max_distance is not None : [EOL] qs = qs . filter ( Q ( distance__lt = max_distance ) ) [EOL] for i in qs : [EOL] pass [EOL] return qs [EOL] [EOL] try : [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] except location_models . City . DoesNotExist : [EOL] cityLatitude , cityLongitude , cityName , countryCode = reversePlace . reverse_place ( cityId ) [EOL] nearCities = get_locations_nearby_coords ( cityLatitude , cityLongitude , [number] ) [ : [number] ] [EOL] [EOL] try : [EOL] country = location_models . Country . objects . get ( country_code = countryCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ countryCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] [EOL] country = location_models . Country . objects . create ( country_code = countryCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] [EOL] city = location_models . City . objects . create ( city_id = cityId , city_name = cityName , country = country , city_photo = cityPhotoURL , city_thumbnail = cityThumbnailURL , latitude = cityLatitude , longitude = cityLongitude ) [EOL] for i in nearCities : [EOL] city . near_city . add ( i ) [EOL] city . save ( ) [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as adjectives : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as nouns : [EOL] adjectives = json . load ( adjectives ) [EOL] nouns = json . load ( nouns ) [EOL] [EOL] if email : [EOL] local , at , domain = email . rpartition ( [string] ) [EOL] username = random . choice ( adjectives ) + local . capitalize ( ) [EOL] is_verified_email_address = True [EOL] else : [EOL] username = random . choice ( adjectives ) + random . choice ( nouns ) . capitalize ( ) [EOL] is_verified_email_address = False [EOL] [EOL] newUser = models . User . objects . create_user ( username ) [EOL] if first_name : [EOL] newUser . first_name = first_name [EOL] if last_name : [EOL] newUser . last_name = last_name [EOL] newUser . save ( ) [EOL] newUser . appleId = appleId [EOL] newUser . email_address = email [EOL] newUser . is_verified_email_address = is_verified_email_address [EOL] newUser . gender = gender [EOL] newUser . current_city = city [EOL] newUser . current_country = city . country [EOL] newUser . current_continent = city . country . continent [EOL] newUser . save ( ) [EOL] [EOL] moveNotification = notification_models . MoveNotification . objects . create ( actor = newUser , city = city , country = city . country , continent = city . country . continent , ) [EOL] [EOL] token = get_token ( newUser ) [EOL] return types . AppleConnectResponse ( ok = True , token = token ) [EOL] [EOL] [EOL] class SlackReportUsers ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] targetUuid = graphene . String ( required = True ) [EOL] payload = graphene . String ( required = True ) [EOL] [EOL] Output = types . SlackReportUsersResponse [EOL] [EOL] def mutate ( self , info , ** kwargs ) : [EOL] [EOL] reportUsername = info . context . user . username [EOL] targetUuid = kwargs . get ( [string] ) [EOL] targetUsername = models . User . objects . get ( uuid = targetUuid ) . username [EOL] payload = kwargs . get ( [string] ) [EOL] [EOL] if payload == [string] : [EOL] to_channel = [string] [EOL] attachments = [ { [string] : [string] , [string] : [string] , [string] : reportUsername , [string] : [string] % (reportUsername) , [string] : [string] % (targetUsername) , [string] : [string] % (targetUsername) , [string] : [string] % ( reportUsername , targetUsername ) , [string] : [string] } ] [EOL] notify_slack ( to_channel , attachments ) [EOL] return types . SlackReportUsersResponse ( ok = True ) [EOL] elif ( payload == [string] ) : [EOL] to_channel = [string] [EOL] attachments = [ { [string] : [string] , [string] : [string] , [string] : reportUsername , [string] : [string] % (reportUsername) , [string] : [string] % (targetUsername) , [string] : [string] % (targetUsername) , [string] : [string] % ( reportUsername , targetUsername ) , [string] : [string] } ] [EOL] notify_slack ( to_channel , attachments ) [EOL] return types . SlackReportUsersResponse ( ok = True ) [EOL] elif ( payload == [string] ) : [EOL] to_channel = [string] [EOL] attachments = [ { [string] : [string] , [string] : [string] , [string] : reportUsername , [string] : [string] % (reportUsername) , [string] : [string] % (targetUsername) , [string] : [string] % (targetUsername) , [string] : [string] % ( reportUsername , targetUsername ) , [string] : [string] } ] [EOL] notify_slack ( to_channel , attachments ) [EOL] return types . SlackReportUsersResponse ( ok = True ) [EOL] elif ( payload == [string] ) : [EOL] to_channel = [string] [EOL] attachments = [ { [string] : [string] , [string] : [string] , [string] : reportUsername , [string] : [string] % (reportUsername) , [string] : [string] % (targetUsername) , [string] : [string] % (targetUsername) , [string] : [string] % ( reportUsername , targetUsername ) , [string] : [string] } ] [EOL] notify_slack ( to_channel , attachments ) [EOL] return types . SlackReportUsersResponse ( ok = True ) [EOL] else : [EOL] return types . SlackReportUsersResponse ( ok = False ) [EOL] [EOL] [EOL] class AddBlockUser ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] uuid = graphene . String ( required = True ) [EOL] [EOL] Output = types . AddBlockUserResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] uuid = kwargs . get ( [string] ) [EOL] blockedUser = models . User . objects . get ( uuid = uuid ) [EOL] [EOL] try : [EOL] user . blocked_user . add ( blockedUser ) [EOL] user . save ( ) [EOL] return types . AddBlockUserResponse ( ok = True , blockedUser = blockedUser ) [EOL] [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . AddBlockUserResponse ( ok = False , blockedUser = None ) [EOL] [EOL] [EOL] class DeleteBlockUser ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] uuid = graphene . String ( required = True ) [EOL] [EOL] Output = types . DeleteBlockUserResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] uuid = kwargs . get ( [string] ) [EOL] blockedUser = models . User . objects . get ( uuid = uuid ) [EOL] [EOL] try : [EOL] user . blocked_user . remove ( blockedUser ) [EOL] return types . DeleteBlockUserResponse ( ok = True , uuid = uuid ) [EOL] [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . DeleteBlockUserResponse ( ok = False , uuid = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.SlackReportUsers.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UpdateSNSResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.SlackReportUsers.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.ToggleSettingsResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.FacebookConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.EditProfile.Arguments]$ 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.EditProfileResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.DeleteBlockUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.MarkAsMainResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.RegisterPush.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.RegisterPushResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteProfileResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.UploadAvatar.Arguments]$ 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.UploadAvatarResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.DeleteBlockUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteAvatarResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.FacebookConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.FacebookConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.FacebookConnectResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.AppleConnect.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AppleConnectResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.SlackReportUsers.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.SlackReportUsers.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.SlackReportUsersResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.DeleteBlockUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.AddBlockUserResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.mutations.DeleteBlockUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.users.types.DeleteBlockUserResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import uuid [EOL] import json [EOL] import random [EOL] from django . core . management . base import BaseCommand [EOL] from locations import models as location_models [EOL] from locations import locationThumbnail [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [EOL] [comment] [EOL] [EOL] all_countries = location_models . Country . objects . all ( ) [EOL] for i in all_countries : [EOL] if i . countryPhotoURL == None or i . countryThumbnailURL == None : [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = i . countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] [EOL] i . country_photo = countryPhotoURL , [EOL] i . country_thumbnail = countryThumbnailURL [EOL] i . save ( ) [EOL] print ( i . country_name ) [EOL] [EOL] all_cities = location_models . City . objects . all ( ) [EOL] for i in all_cities : [EOL] if i . cityPhotoURL == None or i . cityThumbnailURL == None : [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = i . cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] [EOL] i . city_photo = cityPhotoURL , [EOL] i . city_thumbnail = cityThumbnailURL [EOL] i . save ( ) [EOL] print ( i . city_name ) [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f" [string] " ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import uuid [EOL] import json [EOL] import random [EOL] from django . core . management . base import BaseCommand [EOL] from users import models as user_models [EOL] from locations import models as location_models [EOL] from notifications import models as notification_models [EOL] from django_seed import Seed [EOL] from django . db . models . expressions import RawSQL [EOL] from locations import reversePlace , locationThumbnail [EOL] from googleplaces import GooglePlaces [EOL] from django . conf import settings [EOL] from math import radians , degrees , sin , cos , asin , acos , sqrt [EOL] [EOL] [EOL] def createCity ( cityId ) : [EOL] def get_locations_nearby_coords ( latitude , longitude , max_distance = [number] ) : [EOL] gcd_formula = [string] [EOL] distance_raw_sql = RawSQL ( gcd_formula , ( latitude , longitude , latitude ) ) [EOL] qs = location_models . City . objects . all ( ) . annotate ( distance = distance_raw_sql ) . order_by ( [string] ) [EOL] if max_distance is not None : [EOL] qs = qs . filter ( distance__lt = max_distance ) [EOL] for i in qs : [EOL] pass [EOL] return qs [EOL] [EOL] cityLatitude , cityLongitude , cityName , countryCode = reversePlace . reverse_place ( cityId ) [EOL] nearCities = get_locations_nearby_coords ( cityLatitude , cityLongitude , [number] ) [ : [number] ] [EOL] if cityLatitude and cityLongitude and cityName and countryCode : [EOL] try : [EOL] country = location_models . Country . objects . get ( country_code = countryCode ) [EOL] except location_models . Country . DoesNotExist : [EOL] [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] countryData = json . load ( file ) [EOL] currentCountry = countryData [ countryCode ] [EOL] countryName = currentCountry [ [string] ] [EOL] countryNameNative = currentCountry [ [string] ] [EOL] countryCapital = currentCountry [ [string] ] [EOL] countryCurrency = currentCountry [ [string] ] [EOL] countryPhone = currentCountry [ [string] ] [EOL] countryEmoji = currentCountry [ [string] ] [EOL] continentCode = currentCountry [ [string] ] [EOL] latitude = currentCountry [ [string] ] [EOL] longitude = currentCountry [ [string] ] [EOL] [EOL] try : [EOL] continent = location_models . Continent . objects . get ( continent_code = continentCode ) [EOL] except : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as file : [EOL] continentData = json . load ( file ) [EOL] continentName = continentData [ continentCode ] [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = continentName ) . get_urls ( ) [EOL] continentPhotoURL = gp + [string] [EOL] continentThumbnailURL = gp + [string] [EOL] except : [EOL] continentPhotoURL = None [EOL] continentThumbnailURL = None [EOL] [EOL] continent = location_models . Continent . objects . create ( continent_name = continentName , continent_photo = continentPhotoURL , continent_thumbnail = continentThumbnailURL , continent_code = continentCode ) [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = countryName ) . get_urls ( ) [EOL] countryPhotoURL = gp + [string] [EOL] countryThumbnailURL = gp + [string] [EOL] except : [EOL] countryPhotoURL = None [EOL] countryThumbnailURL = None [EOL] country = location_models . Country . objects . create ( country_code = countryCode , country_name = countryName , country_name_native = countryNameNative , country_capital = countryCapital , country_currency = countryCurrency , country_phone = countryPhone , country_emoji = countryEmoji , country_photo = countryPhotoURL , country_thumbnail = countryThumbnailURL , continent = continent , latitude = latitude , longitude = longitude ) [EOL] [EOL] try : [EOL] gp = locationThumbnail . get_photos ( term = cityName ) . get_urls ( ) [EOL] cityPhotoURL = gp + [string] [EOL] cityThumbnailURL = gp + [string] [EOL] except : [EOL] cityPhotoURL = None [EOL] cityThumbnailURL = None [EOL] city = location_models . City . objects . create ( city_id = cityId , city_name = cityName , country = country , city_photo = cityPhotoURL , city_thumbnail = cityThumbnailURL , latitude = cityLatitude , longitude = cityLongitude ) [EOL] print ( city . city_name ) [EOL] for i in nearCities : [EOL] city . near_city . add ( i ) [EOL] city . save ( ) [EOL] [EOL] [EOL] cityNames = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [EOL] [comment] [EOL] [EOL] google_places = GooglePlaces ( settings . GOOGLE_MAPS_KEY ) [EOL] for i in cityNames : [EOL] query_result = google_places . text_search ( query = i , language = [string] , types = [string] , ) [EOL] createCity ( query_result . places [ [number] ] . place_id ) [EOL] [EOL] [comment] [EOL] [EOL] user_seeder = Seed . seeder ( ) [EOL] randomCountry = location_models . Country . objects . all ( ) [EOL] randomCity = location_models . City . objects . all ( ) [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as adjectives : [EOL] with open ( [string] , mode = [string] , encoding = [string] ) as nouns : [EOL] adjectives = json . load ( adjectives ) [EOL] nouns = json . load ( nouns ) [EOL] user_seeder . add_entity ( user_models . User , [number] , { [string] : lambda x : uuid . uuid4 ( ) , [string] : lambda x : random . choice ( adjectives ) + random . choice ( nouns ) . capitalize ( ) , [string] : lambda x : random . choice ( randomCountry ) , [string] : lambda x : random . choice ( randomCountry ) , [string] : False , [string] : False , [string] : lambda x : random . choice ( randomCity ) , [string] : None , [string] : None , [string] : True , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : True , [string] : None , [string] : None , [string] : False , [string] : False , [string] : None , [string] : None , [string] : None , [string] : [number] , [string] : None , } , ) [EOL] user_seeder . execute ( ) [EOL] [EOL] [comment] [EOL] [EOL] move_otification_seeder = Seed . seeder ( ) [EOL] allUsers = user_models . User . objects . all ( ) [EOL] randomCity = location_models . City . objects . all ( ) [EOL] move_otification_seeder . add_entity ( notification_models . MoveNotification , [number] , { [string] : lambda x : random . choice ( allUsers ) , [string] : lambda x : random . choice ( randomCity ) , [string] : None , [string] : None , } , ) [EOL] move_otification_seeder . execute ( ) [EOL] [EOL] [comment] [EOL] [EOL] allUser = user_models . User . objects . all ( ) [EOL] for user in allUser : [EOL] distance = [number] [EOL] user . current_country = user . current_city . country [EOL] user . current_continent = user . current_city . country . continent [EOL] trips = notification_models . MoveNotification . objects . filter ( actor = user ) . order_by ( [string] ) [EOL] try : [EOL] for i , trip in enumerate ( trips ) : [EOL] try : [EOL] lon1 , lat1 , lon2 , lat2 = map ( radians , [ trips [ i ] . city . longitude , trips [ i ] . city . latitude , trips [ i + [number] ] . city . longitude , trips [ i + [number] ] . city . latitude ] ) [EOL] dist = [number] * ( acos ( sin ( lat1 ) * sin ( lat2 ) + cos ( lat1 ) * cos ( lat2 ) * cos ( lon1 - lon2 ) ) ) [EOL] distance += dist [EOL] except ( ZeroDivisionError , IndexError ) as e : [EOL] print ( e ) [EOL] user . distance = round ( distance ) [EOL] user . save ( ) [EOL] except notification_models . MoveNotification . DoesNotExist : [EOL] pass [EOL] [EOL] [comment] [EOL] [EOL] allMoveNotification = notification_models . MoveNotification . objects . all ( ) [EOL] for i in allMoveNotification : [EOL] i . country = i . city . country [EOL] i . continent = i . city . country . continent [EOL] i . save ( ) [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f" [string] " ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from django . db import IntegrityError [EOL] from . import models , types [EOL] from math import radians , degrees , sin , cos , asin , acos , sqrt [EOL] from graphql_jwt . decorators import login_required [EOL] [EOL] from locations import models as location_models [EOL] [EOL] [EOL] class MarkAsRead ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] notificationId = graphene . Int ( required = True ) [EOL] [EOL] Output = types . MarkAsReadResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] notificationId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] notification = models . Notification . objects . get ( id = notificationId ) [EOL] notification . is_read = True [EOL] notification . save ( ) [EOL] return types . MarkAsReadResponse ( ok = True , notificationId = notificationId ) [EOL] [EOL] except models . Notification . DoesNotExist : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class AddTrip ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] cityId = graphene . String ( required = True ) [EOL] [EOL] Output = types . AddTripResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] cityId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] moveNotification = models . MoveNotification . objects . create ( actor = user , city = location_models . City . objects . get ( city_id = cityId ) , country = location_models . Country . objects . get ( cities__city_id = cityId ) , continent = location_models . Continent . objects . get ( countries__cities__city_id = cityId ) , ) [EOL] return types . AddTripResponse ( ok = True , moveNotification = moveNotification ) [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . AddTripResponse ( ok = False , moveNotification = None ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class EditTrip ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] moveNotificationId = graphene . Int ( required = True ) [EOL] cityId = graphene . String ( ) [EOL] [EOL] Output = types . EditTripResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] moveNotificationId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] moveNotification = user . moveNotificationUser . get ( id = moveNotificationId ) [EOL] except user . moveNotificationUser . DoesNotExist : [EOL] raise Exception ( [string] ) [EOL] [EOL] if moveNotification . actor . id != user . id : [EOL] raise Exception ( [string] ) [EOL] [EOL] else : [EOL] try : [EOL] cityId = kwargs . get ( [string] , moveNotification . city . city_id ) [EOL] [EOL] moveNotification . city = location_models . City . objects . get ( city_id = cityId ) [EOL] moveNotification . country = location_models . Country . objects . get ( cities__city_id = cityId ) [EOL] moveNotification . continent = location_models . Continent . objects . get ( countries__cities__city_id = cityId ) [EOL] [EOL] moveNotification . save ( ) [EOL] return types . EditTripResponse ( ok = True , moveNotification = moveNotification ) [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] return types . EditTripResponse ( ok = False , moveNotification = moveNotification ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class DeleteTrip ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] moveNotificationId = graphene . Int ( required = True ) [EOL] [EOL] Output = types . DeleteTripResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] moveNotificationId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] moveNotification = user . moveNotificationUser . get ( id = moveNotificationId ) [EOL] except user . moveNotificationUser . DoesNotExist : [EOL] raise Exception ( [string] ) [EOL] [EOL] if moveNotification . actor . id == user . id : [EOL] [EOL] moveNotification . delete ( ) [EOL] return types . DeleteTripResponse ( ok = True , tripId = moveNotificationId ) [EOL] [EOL] else : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class CalculateDistance ( graphene . Mutation ) : [EOL] [EOL] Output = types . CalculateDistanceResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] distance = [number] [EOL] [EOL] try : [EOL] trips = models . MoveNotification . objects . filter ( actor = user ) . order_by ( [string] ) [EOL] except user . moveNotificationUser . DoesNotExist : [EOL] pass [EOL] [EOL] try : [EOL] for i , trip in enumerate ( trips ) : [EOL] try : [EOL] lon1 , lat1 , lon2 , lat2 = map ( radians , [ trips [ i ] . city . longitude , trips [ i ] . city . latitude , trips [ i + [number] ] . city . longitude , trips [ i + [number] ] . city . latitude ] ) [EOL] dist = [number] * ( acos ( sin ( lat1 ) * sin ( lat2 ) + cos ( lat1 ) * cos ( lat2 ) * cos ( lon1 - lon2 ) ) ) [EOL] distance += dist [EOL] except ( ZeroDivisionError , IndexError ) as e : [EOL] print ( e ) [EOL] [EOL] user . distance = int ( round ( distance ) ) [EOL] user . save ( ) [EOL] return types . CalculateDistanceResponse ( distance = int ( round ( distance ) ) ) [EOL] [EOL] except IntegrityError as e : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.mutations.MarkAsRead.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.MarkAsReadResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.mutations.EditTrip.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.AddTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.mutations.DeleteTrip.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.mutations.EditTrip.Arguments]$ 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.EditTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.mutations.DeleteTrip.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.DeleteTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.CalculateDistanceResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NotificationsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from graphene_django . types import DjangoObjectType [EOL] from config import types as config_types [EOL] from . import models [EOL] from graphene . types . union import Union [EOL] [EOL] [EOL] class NotificationType ( DjangoObjectType ) : [EOL] natural_time = graphene . String ( source = [string] ) [EOL] created_at = graphene . Date ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = models . Notification [EOL] [EOL] [EOL] class MoveNotificationType ( DjangoObjectType ) : [EOL] natural_time = graphene . String ( source = [string] ) [EOL] created_at = graphene . Date ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = models . MoveNotification [EOL] [EOL] [EOL] class MarkAsReadResponse ( graphene . ObjectType ) : [EOL] notificationId = graphene . Int ( ) [EOL] ok = graphene . Boolean ( ) [EOL] [EOL] [EOL] class AddTripResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] moveNotification = graphene . Field ( MoveNotificationType ) [EOL] distance = graphene . Int ( ) [EOL] [EOL] [EOL] class EditTripResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] moveNotification = graphene . Field ( MoveNotificationType ) [EOL] distance = graphene . Int ( ) [EOL] [EOL] [EOL] class DeleteTripResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] distance = graphene . Int ( ) [EOL] tripId = graphene . Int ( ) [EOL] [EOL] [EOL] class CalculateDistanceResponse ( graphene . ObjectType ) : [EOL] distance = graphene . Int ( ) [EOL] [EOL] [EOL] class DurationTripsResponse ( graphene . ObjectType ) : [EOL] moveNotifications = graphene . List ( MoveNotificationType ) [EOL] [EOL] [EOL] class usersBeforeResponse ( graphene . ObjectType ) : [EOL] page = graphene . Int ( ) [EOL] hasNextPage = graphene . Boolean ( ) [EOL] usersBefore = graphene . List ( MoveNotificationType ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.NotificationType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.NotificationType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.MoveNotificationType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.MoveNotificationType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.MarkAsReadResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.MarkAsReadResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.AddTripResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.AddTripResponse]$ 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.AddTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.EditTripResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.EditTripResponse]$ 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.EditTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.DeleteTripResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.DeleteTripResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.DeleteTripResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.CalculateDistanceResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.DurationTripsResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.usersBeforeResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.usersBeforeResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.types.usersBeforeResponse]$ 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import pinner [EOL] from django . db import models [EOL] from django . contrib . humanize . templatetags . humanize import naturaltime [EOL] from django . db . models import Q [EOL] from datetime import date [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from config import models as config_models [EOL] from matchs import models as match_models [EOL] from django . db . models . signals import pre_save [EOL] from django . dispatch import receiver [EOL] [EOL] [EOL] class Notification ( config_models . TimeStampedModel ) : [EOL] [EOL] VERBS = ( ( [string] , [string] ) , ) [EOL] [EOL] actor = models . ForeignKey ( [string] , on_delete = models . CASCADE , related_name = [string] ) [EOL] target = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] verb = models . CharField ( max_length = [number] , choices = VERBS , default = [string] ) [EOL] is_read = models . BooleanField ( default = False ) [EOL] match = models . ForeignKey ( match_models . Match , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] [EOL] @ property def natural_time ( self ) : [EOL] return naturaltime ( self . created_at ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id , self . actor . username , self . verb , self . is_read ) [EOL] [EOL] [EOL] class MoveNotification ( config_models . TimeStampedModel ) : [EOL] [EOL] VERBS = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] actor = models . ForeignKey ( [string] , on_delete = models . CASCADE , related_name = [string] ) [EOL] verb = models . CharField ( max_length = [number] , choices = VERBS , default = [string] ) [EOL] city = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] country = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] continent = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] [EOL] @ property def natural_time ( self ) : [EOL] return naturaltime ( self . created_at ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.models.MoveNotification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from . import types , queries , mutations [EOL] from locations import types as location_types [EOL] [EOL] [EOL] class Query ( object ) : [EOL] [EOL] get_trips = graphene . Field ( location_types . TripResponse , resolver = queries . resolve_get_trips , required = True , args = { [string] : graphene . String ( required = True ) , [string] : graphene . Int ( ) , } ) [EOL] [EOL] [EOL] class Mutation ( object ) : [EOL] [EOL] mark_as_read = mutations . MarkAsRead . Field ( required = True ) [EOL] add_trip = mutations . AddTrip . Field ( required = True ) [EOL] edit_trip = mutations . EditTrip . Field ( required = True ) [EOL] delete_trip = mutations . DeleteTrip . Field ( required = True ) [EOL] calculate_distance = mutations . CalculateDistance . Field ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.notifications.schema.Mutation]$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . import types , models [EOL] from django . utils import timezone [EOL] from django . db . models import Count , F , Q [EOL] from django . db . models . fields import DateField [EOL] from django . db . models . functions import Trunc [EOL] [EOL] from graphql_jwt . decorators import login_required [EOL] from locations import models as location_models [EOL] from locations import types as location_types [EOL] from users import models as user_models [EOL] [EOL] [EOL] @ login_required def resolve_get_trips ( self , info , ** kwargs ) : [EOL] [EOL] uuid = kwargs . get ( [string] ) [EOL] page = kwargs . get ( [string] , [number] ) [EOL] [EOL] try : [EOL] user = user_models . User . objects . prefetch_related ( [string] ) . get ( uuid = uuid ) [EOL] trip = user . moveNotificationUser . all ( ) . order_by ( [string] ) [EOL] [EOL] return location_types . TripResponse ( trip = trip ) [EOL] except user_models . User . DoesNotExist : [EOL] return location_types . TripResponse ( trip = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Match , Any , Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from django . db import IntegrityError [EOL] from . import models , types [EOL] from graphql_jwt . decorators import login_required [EOL] from locations import models as location_models [EOL] from notifications import models as notification_models [EOL] from users import models as user_models [EOL] from django . db . models import Q [EOL] [EOL] [EOL] class Match ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] cityId = graphene . String ( required = True ) [EOL] hostUuid = graphene . String ( required = True ) [EOL] guestUuid = graphene . String ( required = True ) [EOL] [EOL] Output = types . MatchResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] [EOL] cityId = kwargs . get ( [string] ) [EOL] hostUuid = kwargs . get ( [string] ) [EOL] guestUuid = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] host = user_models . User . objects . get ( uuid = hostUuid ) [EOL] guest = user_models . User . objects . get ( uuid = guestUuid ) [EOL] city = location_models . City . objects . get ( city_id = cityId ) [EOL] try : [EOL] existingMatch = models . Match . objects . get ( Q ( host = host , guest = guest ) | Q ( host = guest , guest = host ) ) [EOL] return types . MatchResponse ( ok = True , match = existingMatch ) [EOL] except models . Match . DoesNotExist : [EOL] match = models . Match . objects . create ( city = city , host = host , guest = guest , ) [EOL] notification_models . Notification . objects . create ( verb = [string] , actor = user , target = guest , match = match ) [EOL] return types . MatchResponse ( ok = True , match = match ) [EOL] except IntegrityError as e : [EOL] print ( e ) [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class UnMatch ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] matchId = graphene . Int ( required = True ) [EOL] [EOL] Output = types . UnMatchResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] matchId = kwargs . get ( [string] ) [EOL] [EOL] try : [EOL] match = models . Match . objects . get ( id = matchId ) [EOL] match . delete ( ) [EOL] return types . UnMatchResponse ( ok = True , matchId = matchId , ) [EOL] except models . Match . DoesNotExist : [EOL] return types . UnMatchResponse ( ok = False , matchId = None , ) [EOL] [EOL] [EOL] class MarkAsReadMatch ( graphene . Mutation ) : [EOL] [EOL] class Arguments : [EOL] matchId = graphene . Int ( required = True ) [EOL] [EOL] Output = types . MarkAsReadMatchResponse [EOL] [EOL] @ login_required def mutate ( self , info , ** kwargs ) : [EOL] [EOL] matchId = kwargs . get ( [string] ) [EOL] user = info . context . user [EOL] [EOL] try : [EOL] match = models . Match . objects . get ( id = matchId ) [EOL] if user == match . host : [EOL] match . is_read_by_host = True [EOL] match . save ( ) [EOL] return types . MarkAsReadMatchResponse ( ok = True , matchId = matchId , isReadByHost = match . is_read_by_host , isReadByGuest = match . is_read_by_guest ) [EOL] elif user == match . guest : [EOL] match . is_read_by_guest = True [EOL] match . save ( ) [EOL] return types . MarkAsReadMatchResponse ( ok = True , matchId = matchId , isReadByHost = match . is_read_by_host , isReadByGuest = match . is_read_by_guest ) [EOL] else : [EOL] return types . MarkAsReadMatchResponse ( ok = False , matchId = None , isReadByHost = None , isReadByGuest = None ) [EOL] [EOL] except models . Match . DoesNotExist : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.mutations.MarkAsReadMatch.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.UnMatchResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.mutations.MarkAsReadMatch.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MarkAsReadMatchResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . db import IntegrityError [EOL] from . import types , models [EOL] from graphql_jwt . decorators import login_required [EOL] from users import models as user_models [EOL] from locations import models as location_models [EOL] from django . utils import timezone [EOL] from django . db . models import Q [EOL] [EOL] [EOL] @ login_required def resolve_get_matches ( self , info , ** kwargs ) : [EOL] [EOL] user = info . context . user [EOL] page = kwargs . get ( [string] , [number] ) [EOL] [EOL] blockedUser = user . blocked_user . values ( [string] ) . all ( ) [EOL] host = user . host . exclude ( ( Q ( host__id__in = blockedUser ) | Q ( guest__id__in = blockedUser ) ) ) . all ( ) [EOL] guest = user . guest . exclude ( ( Q ( host__id__in = blockedUser ) | Q ( guest__id__in = blockedUser ) ) ) . all ( ) [EOL] [EOL] combined = host . union ( guest ) . order_by ( [string] ) [EOL] [EOL] return types . GetMatchesResponse ( matches = combined ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from channels . generic . websocket import WebsocketConsumer [EOL] import json [EOL] [EOL] [EOL] class ChatConsumer ( WebsocketConsumer ) : [EOL] def connect ( self ) : [EOL] self . accept ( ) [EOL] [EOL] def disconnect ( self , close_code ) : [EOL] pass [EOL] [EOL] def receive ( self , text_data ) : [EOL] text_data_json = json . loads ( text_data ) [EOL] message = text_data_json [ [string] ] [EOL] self . send ( text_data = json . dumps ( { [string] : message } ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Match , Type [EOL] import typing [EOL] import pinner [EOL] from django . db import models [EOL] from config import models as config_models [EOL] [EOL] from django . contrib . humanize . templatetags . humanize import naturaltime [EOL] [EOL] [EOL] class Match ( config_models . TimeStampedModel ) : [EOL] [EOL] city = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True ) [EOL] host = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] guest = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] is_read_by_host = models . BooleanField ( default = False ) [EOL] is_read_by_guest = models . BooleanField ( default = False ) [EOL] [EOL] @ property def country_count ( self ) : [EOL] return self . countries . all ( ) . count ( ) [EOL] [EOL] @ property def natural_time ( self ) : [EOL] return naturaltime ( self . created_at ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.models.Match]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.models.Match]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.models.Match]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.models.Match]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.models.Match]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MatchsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Match , Type [EOL] import typing [EOL] import pinner [EOL] import graphene [EOL] from users import models as user_models [EOL] from config import types as config_types [EOL] from graphene_django . types import DjangoObjectType [EOL] from . import models [EOL] [EOL] [EOL] class MatchType ( DjangoObjectType ) : [EOL] natural_time = graphene . String ( source = [string] ) [EOL] is_host = graphene . Boolean ( ) [EOL] is_guest = graphene . Boolean ( ) [EOL] is_matching = graphene . Boolean ( ) [EOL] [EOL] def resolve_is_host ( self , info ) : [EOL] user = info . context . user [EOL] if self in user . host . all ( ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def resolve_is_guest ( self , info ) : [EOL] user = info . context . user [EOL] if self in user . guest . all ( ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def resolve_is_matching ( self , info ) : [EOL] user = info . context . user [EOL] if self in user . host . all ( ) or user . guest . all ( ) : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] class Meta : [EOL] model = models . Match [EOL] [EOL] [EOL] class TokenType ( DjangoObjectType ) : [EOL] username = graphene . String ( source = [string] ) [EOL] photo_count = graphene . Int ( source = [string] ) [EOL] city_count = graphene . Int ( source = [string] ) [EOL] country_count = graphene . Int ( source = [string] ) [EOL] continent_count = graphene . Int ( source = [string] ) [EOL] post_count = graphene . Int ( source = [string] ) [EOL] trip_count = graphene . Int ( source = [string] ) [EOL] blocked_user_count = graphene . Int ( source = [string] ) [EOL] is_self = graphene . Boolean ( ) [EOL] [EOL] def resolve_is_self ( self , info ) : [EOL] user = info . context . user [EOL] if self . id == user . id : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] class Meta : [EOL] model = user_models . User [EOL] [EOL] [EOL] class GetMatchesResponse ( graphene . ObjectType ) : [EOL] matches = graphene . List ( MatchType ) [EOL] [EOL] [EOL] class MatchResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] match = graphene . Field ( MatchType ) [EOL] [EOL] [EOL] class UnMatchResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] matchId = graphene . Int ( ) [EOL] [EOL] [EOL] class MarkAsReadMatchResponse ( graphene . ObjectType ) : [EOL] ok = graphene . Boolean ( ) [EOL] matchId = graphene . String ( ) [EOL] isReadByHost = graphene . Boolean ( ) [EOL] isReadByGuest = graphene . Boolean ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchType]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchType]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.TokenType.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.GetMatchesResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MatchResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.UnMatchResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.UnMatchResponse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MarkAsReadMatchResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MarkAsReadMatchResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MarkAsReadMatchResponse]$ 0 0 0 0 0 0 0 $typing.Type[pinner.matchs.types.MarkAsReadMatchResponse]$ 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from . import models [EOL] [EOL] [EOL] @ admin . register ( models . Match ) class MatchAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] [EOL] from users import schema as user_schema [EOL] from notifications import schema as notification_schema [EOL] from verifications import schema as verification_schema [EOL] from locations import schema as location_schema [EOL] from matchs import schema as match_schema [EOL] [EOL] [EOL] class Query ( user_schema . Query , notification_schema . Query , verification_schema . Query , location_schema . Query , match_schema . Query , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] class Mutation ( user_schema . Mutation , notification_schema . Mutation , verification_schema . Mutation , location_schema . Mutation , match_schema . Mutation , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] schema = graphene . Schema ( query = Query , mutation = Mutation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import boto3 [EOL] import uuid [EOL] from django . http import JsonResponse , HttpResponseBadRequest [EOL] [EOL] [EOL] def sign_s3 ( request ) : [EOL] [EOL] if request . method != [string] : [EOL] [EOL] return HttpResponseBadRequest ( ) [EOL] [EOL] try : [EOL] [EOL] file = request . FILES . get ( [string] ) [EOL] [EOL] file_name = str ( uuid . uuid4 ( ) ) [EOL] [EOL] s3 = boto3 . resource ( [string] ) [EOL] [EOL] upload = s3 . Bucket ( [string] ) . upload_fileobj ( file , file_name , { [string] : [string] } ) [EOL] [EOL] url = f' [string] { file_name }' [EOL] [EOL] return JsonResponse ( { [string] : True , [string] : url } ) [EOL] [EOL] except Exception as e : [EOL] return HttpResponseBadRequest [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import config [EOL] from django . db import models [EOL] [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[config.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[config.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0
from typing import Type [EOL] import typing [EOL] import config [EOL] import graphene [EOL] from graphene_django . types import DjangoObjectType [EOL] [EOL] [EOL] class ResponseFields ( graphene . AbstractType ) : [EOL] ok = graphene . Boolean ( required = True ) [EOL] error = graphene . String ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[config.types.ResponseFields]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[config.types.ResponseFields]$ 0 0 0 0 0 0 0
	0
from typing import Dict , Union , List [EOL] import typing [EOL] from . base import * [comment] [EOL] from . base import env [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] LOGGING = { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] } } , [string] : { [string] : { [string] : [string] [string] } , } , [string] : { [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , } , [string] : { [string] : { [string] : [ [string] ] , [string] : [string] , [string] : True } , [string] : { [string] : [string] , [string] : [ [string] , [string] ] , [string] : True } } } [EOL] [EOL] [EOL] TEMPLATE_DEBUG = DEBUG [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]],typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.bool,builtins.str]]],typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]]],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0
from . base import * [EOL]	0 0 0 0 0 0