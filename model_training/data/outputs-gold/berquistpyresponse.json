from typing import List , Sequence [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] from pathlib import Path [EOL] from typing import List , Sequence [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] import versioneer [EOL] [EOL] short_description = __doc__ . split ( [string] ) [EOL] [EOL] try : [EOL] with open ( [string] , [string] , encoding = [string] ) as handle : [EOL] long_description = handle . read ( ) [EOL] except : [EOL] long_description = [string] . join ( short_description [ [number] : ] ) [EOL] [EOL] [EOL] def _get_files_recursive ( top ) : [EOL] def get_files_recursive_acc ( top , files ) : [EOL] for f in top . iterdir ( ) : [EOL] if f . is_file ( ) : [EOL] files . append ( f . resolve ( strict = True ) ) [EOL] elif f . is_dir ( ) : [EOL] get_files_recursive_acc ( f . resolve ( strict = True ) , files ) [EOL] return [EOL] [EOL] files = [ ] [EOL] get_files_recursive_acc ( top , files ) [EOL] return files [EOL] [EOL] [EOL] def _get_package_data ( ) : [EOL] files = [ ] [EOL] datadir = Path ( __file__ ) . resolve ( ) . parent / [string] / [string] [EOL] files . extend ( _get_files_recursive ( datadir / [string] ) ) [EOL] files . extend ( _get_files_recursive ( datadir / [string] ) ) [EOL] return sorted ( files ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] setup ( name = [string] , author = [string] , description = short_description [ [number] ] , long_description = long_description , long_description_content_type = [string] , version = versioneer . get_version ( ) , cmdclass = versioneer . get_cmdclass ( ) , license = [string] , packages = find_packages ( exclude = [ [string] ] ) , package_data = { [string] : tuple ( str ( f ) for f in _get_package_data ( ) ) } , url = [string] , python_requires = [string] , project_urls = { [string] : [string] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Sequence[pathlib.Path]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sequence[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List , Any , Dict , Tuple [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] needs_sphinx = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_sidebars = { [string] : [ [string] , [string] , [string] , [string] , [string] , ] } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] , ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] numpydoc_use_plots = True [EOL] numpydoc_show_class_members = False [EOL] numpydoc_show_inherited_class_members = False [EOL] numpydoc_class_members_toctree = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0
from typing import Any , Union , Dict [EOL] import pyresponse [EOL] import typing [EOL] import numpy as np [EOL] [EOL] import psi4 [EOL] [EOL] from pyresponse import utils [EOL] from pyresponse . psi4 import integrals , molecules [EOL] [EOL] [EOL] def test_integrals_psi4 ( ) : [EOL] mol = molecules . molecule_water_sto3g ( ) [EOL] mol . reset_point_group ( [string] ) [EOL] mol . update_geometry ( ) [EOL] psi4 . core . set_active_molecule ( mol ) [EOL] [EOL] options = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] [EOL] psi4 . set_options ( options ) [EOL] [EOL] _ , wfn = psi4 . energy ( [string] , return_wfn = True ) [EOL] [EOL] mints = psi4 . core . MintsHelper ( wfn ) [EOL] [EOL] integral_generator = integrals . IntegralsPsi4 ( wfn ) [EOL] [EOL] np . testing . assert_equal ( np . stack ( [ np . asarray ( Mc ) for Mc in mints . ao_dipole ( ) ] ) , integral_generator . integrals ( integrals . DIPOLE ) , ) [EOL] [EOL] [EOL] def test_jk_psi4 ( ) : [EOL] mol = molecules . molecule_water_sto3g ( ) [EOL] mol . reset_point_group ( [string] ) [EOL] mol . update_geometry ( ) [EOL] psi4 . core . set_active_molecule ( mol ) [EOL] [EOL] options = { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] [EOL] psi4 . set_options ( options ) [EOL] [EOL] _ , wfn = psi4 . energy ( [string] , return_wfn = True ) [EOL] C = utils . mocoeffs_from_psi4wfn ( wfn ) [EOL] jk_generator = integrals . JKPsi4 ( wfn ) [EOL] res_J , res_K = jk_generator . compute_from_mocoeffs ( C [ [number] ] ) [EOL] [EOL] [comment] [EOL] occupations = utils . occupations_from_psi4wfn ( wfn ) [EOL] [comment] [EOL] [comment] [EOL] nbasis = occupations [ [number] ] + occupations [ [number] ] [EOL] assert res_J . shape == ( nbasis , nbasis ) [EOL] assert res_K . shape == ( nbasis , nbasis ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pyresponse [EOL] import typing [EOL] import numpy as np [EOL] [EOL] from pyresponse . pyscf import integrals , molecules [EOL] [EOL] [EOL] def test_integrals_pyscf ( ) : [EOL] mol = molecules . molecule_water_sto3g ( ) [EOL] mol . build ( ) [EOL] integral_generator = integrals . IntegralsPyscf ( mol ) [EOL] np . testing . assert_equal ( mol . intor ( [string] , comp = [number] ) , integral_generator . integrals ( integrals . DIPOLE ) ) [EOL] np . testing . assert_equal ( mol . intor ( [string] , comp = [number] ) , integral_generator . integrals ( integrals . ANGMOM_COMMON_GAUGE ) , ) [EOL] [EOL] [EOL] def test_jk_pyscf ( ) : [EOL] mol = molecules . molecule_water_sto3g ( ) [EOL] mol . build ( ) [EOL] jk_generator = integrals . JKPyscf ( mol ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0