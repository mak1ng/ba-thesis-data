from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from allauth . account . signals import user_signed_up [EOL] from django . dispatch import receiver [EOL] from io import BytesIO [EOL] from urllib . request import urlopen [EOL] from django . core . files import File [EOL] import hashlib [EOL] from django . contrib . auth import get_user_model [EOL] User = get_user_model ( ) [EOL] [EOL] @ receiver ( user_signed_up ) def user_signed_up ( request , user , ** kwargs ) : [EOL] found_hash = hashlib . sha1 ( user . username . encode ( ) ) . hexdigest ( ) [EOL] user . referral_address = found_hash [EOL] [EOL] received_referral_address = request . build_absolute_uri ( ) [EOL] index = received_referral_address . find ( [string] ) [EOL] received_referral_address = received_referral_address [ index + [number] : ] [EOL] received_referral_address = received_referral_address . split ( [string] ) [ [number] ] [EOL] [EOL] try : [EOL] found_invitation = User . objects . get ( referral_address = received_referral_address ) [EOL] user . invitation = found_invitation [EOL] found_invitation . invitees . add ( user ) [EOL] found_invitation . save ( ) [EOL] message = [string] [EOL] User . create_notification ( found_invitation , [string] , message ) [EOL] [EOL] except User . DoesNotExist : [EOL] print ( [string] ) [EOL] [EOL] user . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Set , List , Any , Tuple , Type [EOL] import bluecots_ico [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] import os [EOL] from versatileimagefield . fields import VersatileImageField [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class User ( AbstractUser , TimeStampModel ) : [EOL] def create_notification ( to , notification_type , message = None ) : [EOL] notification = Notification . objects . create ( to = to , notification_type = notification_type , message = message , ) [EOL] notification . save ( ) [EOL] [EOL] def photo_file_name ( instance , filename ) : [EOL] ext = filename . split ( [string] ) [ - [number] ] [EOL] filename = [string] % ( instance . username , [string] , ext ) [EOL] return os . path . join ( [string] , filename ) [EOL] [EOL] USER_TYPE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] STATUS_TYPE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] PHOTO_TYPE = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] STATUS_REJECT_REASON = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] [comment] [EOL] [comment] [EOL] user_type = models . CharField ( max_length = [number] , choices = USER_TYPE , blank = True , null = True ) [EOL] referral_address = models . CharField ( max_length = [number] , blank = False , null = True ) [EOL] invitees = models . ManyToManyField ( [string] , blank = True ) [EOL] invitation = models . ForeignKey ( [string] , on_delete = models . PROTECT , blank = True , null = True ) [EOL] wallet_address = models . CharField ( max_length = [number] , blank = True ) [EOL] photo_type = models . CharField ( max_length = [number] , choices = PHOTO_TYPE , blank = True , default = [string] ) [EOL] photo = VersatileImageField ( upload_to = photo_file_name , blank = True ) [EOL] photo_bill_file_name = VersatileImageField ( upload_to = photo_file_name , blank = True ) [EOL] photo_passport_file_name = VersatileImageField ( upload_to = photo_file_name , blank = True ) [EOL] kyc_status = models . CharField ( max_length = [number] , choices = STATUS_TYPE , blank = False , default = [string] ) [EOL] kyc_agreement1 = models . BooleanField ( blank = False , default = False ) [EOL] kyc_agreement2 = models . BooleanField ( blank = False , default = False ) [EOL] country = models . CharField ( max_length = [number] , blank = True ) [EOL] mobile_number = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] mobile_country = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] kyc_reject_reason = models . CharField ( max_length = [number] , choices = STATUS_REJECT_REASON , blank = False , default = [string] , null = True ) [EOL] temp_string = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] is_whitelisted = models . BooleanField ( blank = False , default = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] @ property def invitees_count ( self ) : [EOL] return User . objects . filter ( invitation__username = self . username ) . count ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class Notification ( TimeStampModel ) : [EOL] NOTICE_TYPE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] to = models . ForeignKey ( User , on_delete = models . PROTECT , related_name = [string] , blank = False ) [EOL] notification_type = models . CharField ( max_length = [number] , choices = NOTICE_TYPE , blank = False ) [EOL] message = models . TextField ( blank = False ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class SignupTerms ( TimeStampModel ) : [EOL] creator = models . ForeignKey ( User , on_delete = models . PROTECT , related_name = [string] , blank = False ) [EOL] agreement = models . BooleanField ( blank = False , default = False ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.SignupTerms]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.users.models.SignupTerms]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
import builtins [EOL] from typing import Dict , Union , Any , Set , Type [EOL] import bluecots_ico [EOL] import typing [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from rest_framework import status [EOL] from rest_framework . permissions import BasePermission , AllowAny , IsAdminUser , IsAuthenticated [EOL] from django . core . mail import EmailMultiAlternatives [EOL] [EOL] from . import models , serializers [EOL] from datetime import datetime [EOL] import time [EOL] [EOL] from bluecots_ico . users import models as user_models [EOL] [EOL] class Initialdata ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] wallet_address = models . WalletAddress . objects . all ( ) [EOL] serializer = serializers . WalletAddressSerializer ( wallet_address , many = True ) [EOL] result_ico_wallet_list = serializer . data [EOL] [EOL] info = models . InvestmentInfo . objects . get ( key_string = [string] ) [EOL] serializer = serializers . InvestementInfoSerializer ( info ) [EOL] result_investment = serializer . data [EOL] [EOL] found_whitepaper = models . WhitePaper . objects . all ( ) [EOL] serializer = serializers . WhitePaperSerializer ( found_whitepaper , many = True ) [EOL] result_whitepaper_list = serializer . data [EOL] [EOL] timeStampPresaleStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampPresaleEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundAStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundAEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundBStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundBEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundCStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundCEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] now = datetime . now ( ) . timestamp ( ) [EOL] if now < timeStampPresaleStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now > timeStampPresaleStart and now < timeStampPresaleEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundAStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundAEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] else : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] [EOL] serializer = serializers . RoundScheduleSerializer ( rounds ) [EOL] result_current_round = serializer . data [EOL] [EOL] round_list = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundScheduleSerializer ( round_list , many = True ) [EOL] result_round_list = serializer . data [EOL] [EOL] rounds = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundSupplySerializer ( rounds , many = True ) [EOL] result_round_supply_list = serializer . data [EOL] [EOL] rounds = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundBonusSerializer ( rounds , many = True ) [EOL] result_round_bonus_list = serializer . data [EOL] [EOL] [EOL] result = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : { [string] : result_ico_wallet_list , [string] : result_investment , [string] : result_whitepaper_list , [string] : result_current_round , [string] : result_round_list , [string] : result_round_supply_list , [string] : result_round_bonus_list , } , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class SubscribeList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] subscribe_list = models . Subscribe . objects . all ( ) [EOL] serializer = serializers . SubscribeSerializer ( subscribe_list , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] def put ( self , request , format = None ) : [EOL] requested_email = request . data . get ( [string] , None ) [EOL] if requested_email == [string] : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_400_BAD_REQUEST ) [EOL] try : [EOL] found_email = models . Subscribe . objects . get ( email = requested_email ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] except models . Subscribe . DoesNotExist : [EOL] subscribe = models . Subscribe . objects . create ( email = requested_email , ) [EOL] subscribe . save ( ) [EOL] found_email = models . Subscribe . objects . get ( email = requested_email ) [EOL] serializer = serializers . SubscribeSerializer ( found_email ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] class RoundList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] round_list = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundScheduleSerializer ( round_list , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] class CurrentRound ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] timeStampPresaleStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampPresaleEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundAStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundAEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundBStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundBEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] timeStampRoundCStart = models . Round . objects . get ( round_type = [string] ) . start . timestamp ( ) [EOL] timeStampRoundCEnd = models . Round . objects . get ( round_type = [string] ) . end . timestamp ( ) [EOL] now = datetime . now ( ) . timestamp ( ) [EOL] [EOL] if now < timeStampPresaleStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now > timeStampPresaleStart and now < timeStampPresaleEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundAStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundAEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBEnd : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] elif now < timeStampRoundBStart : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] else : [EOL] rounds = models . Round . objects . get ( round_type = [string] ) [EOL] [EOL] serializer = serializers . RoundScheduleSerializer ( rounds ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class RoundSupplyList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] rounds = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundSupplySerializer ( rounds , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class RoundSupply ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , round_type , format = None ) : [EOL] try : [EOL] round_type = models . Round . objects . get ( round_type = round_type ) [EOL] except models . Round . DoesNotExist : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = serializers . RoundSupplySerializer ( round_type ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class RoundBonusList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] rounds = models . Round . objects . all ( ) [EOL] serializer = serializers . RoundBonusSerializer ( rounds , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class RoundBonus ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , round_type , format = None ) : [EOL] try : [EOL] round_type = models . Round . objects . get ( round_type = round_type ) [EOL] except models . Round . DoesNotExist : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = serializers . RoundBonusSerializer ( round_type ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class VolumeBonusList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] volumeBonusList = models . VolumeBonus . objects . all ( ) [EOL] serializer = serializers . VolumeBonusSerializer ( volumeBonusList , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class VolumeBonus ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , volume_type , format = None ) : [EOL] try : [EOL] volume_bonus = models . VolumeBonus . objects . get ( volume_bonus_type = volume_type ) [EOL] except models . VolumeBonus . DoesNotExist : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = serializers . VolumeBonusSerializer ( volume_bonus ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class IcoWalletList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] wallet_address = models . WalletAddress . objects . all ( ) [EOL] serializer = serializers . WalletAddressSerializer ( wallet_address , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class InvestmentInfo ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] info = models . InvestmentInfo . objects . get ( key_string = [string] ) [EOL] serializer = serializers . InvestementInfoSerializer ( info ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class WhitePaperList ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , format = None ) : [EOL] try : [EOL] found_whitepaper = models . WhitePaper . objects . all ( ) [EOL] except models . WhitePaper . DoesNotExist : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = serializers . WhitePaperSerializer ( found_whitepaper , many = True ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class WhitePaper ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def get ( self , request , language_type , format = None ) : [EOL] try : [EOL] whitePaper = models . WhitePaper . objects . get ( language = language_type ) [EOL] except models . WhitePaper . DoesNotExist : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = serializers . WhitePaperSerializer ( whitePaper ) [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : serializer . data , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class SendEmail ( APIView ) : [EOL] permission_classes = [ AllowAny ] [EOL] def put ( self , request , format = None ) : [EOL] email = request . data . get ( [string] , None ) [EOL] name = request . data . get ( [string] , None ) [EOL] message = request . data . get ( [string] , None ) [EOL] if email == [string] : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_400_BAD_REQUEST ) [EOL] if name == [string] : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_400_BAD_REQUEST ) [EOL] if message == [string] : [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] return Response ( data = ret_data , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] request_message_text = [string] + email + [string] + [string] + name + [string] + [string] + message [EOL] [EOL] mail_subject = [string] + name + [string] + [string] [EOL] to_email = [string] [EOL] from_email = email [EOL] email_contents = EmailMultiAlternatives ( mail_subject , request_message_text , from_email = from_email , to = [ to_email ] ) [EOL] email_contents . send ( ) [EOL] [EOL] ret_data = { [string] : [string] , [string] : [string] , [string] : email , } [EOL] return Response ( data = ret_data , status = status . HTTP_200_OK ) [EOL]	typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import bluecots_ico [EOL] import typing [EOL] from rest_framework import serializers [EOL] from . import models [EOL] import time [EOL] [EOL] class TimestampField ( serializers . Field ) : [EOL] def to_representation ( self , value ) : [EOL] return int ( time . mktime ( value . timetuple ( ) ) ) [EOL] [EOL] [EOL] class SubscribeSerializer ( serializers . ModelSerializer ) : [EOL] created_at = TimestampField ( ) [EOL] class Meta : [EOL] model = models . Subscribe [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] [EOL] class RoundSupplySerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Round [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] [EOL] class RoundScheduleSerializer ( serializers . ModelSerializer ) : [EOL] start = TimestampField ( ) [EOL] end = TimestampField ( ) [EOL] class Meta : [EOL] model = models . Round [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class RoundBonusSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Round [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] [EOL] class VolumeBonusSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . VolumeBonus [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] [EOL] class WalletAddressSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . WalletAddress [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] [EOL] class InvestementInfoSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . InvestmentInfo [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] class ReferralBounsSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . InvestmentInfo [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class WhitePaperSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . WhitePaper [EOL] fields = ( [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bluecots_ico.icoInfos.serializers.TimestampField$ 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bluecots_ico.icoInfos.serializers.TimestampField$ 0 0 0 0 0 $bluecots_ico.icoInfos.serializers.TimestampField$ 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[bluecots_ico.icoInfos.models.WhitePaper]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class IcoInfosConfig ( AppConfig ) : [EOL] name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . FloatField ( ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
	0