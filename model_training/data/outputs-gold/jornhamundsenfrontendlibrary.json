	0
	0
	0
	0
	0
	0
	0
import flask [EOL] import os [EOL] from amundsen_application import create_app [EOL] [EOL] app = create_app ( config_module_class = os . getenv ( [string] ) or [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Tuple [EOL] [EOL] from flask import Flask , render_template [EOL] [EOL] [EOL] def init_routes ( app ) : [EOL] app . add_url_rule ( [string] , [string] , healthcheck ) [EOL] app . add_url_rule ( [string] , [string] , index , defaults = { [string] : [string] } ) [comment] [EOL] app . add_url_rule ( [string] , [string] , index ) [comment] [EOL] [EOL] [EOL] def index ( path ) : [EOL] return render_template ( [string] ) [comment] [EOL] [EOL] [EOL] def healthcheck ( ) : [EOL] return [string] , [number] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0
import amundsen_application [EOL] import logging [EOL] import flask [EOL] import logging [EOL] [EOL] from flask import Response [EOL] from flask import current_app as app [EOL] from flask . blueprints import Blueprint [EOL] [EOL] from amundsen_application . models . user import load_user [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] blueprint = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ blueprint . route ( [string] , methods = [ [string] ] ) def current_user ( ) : [EOL] if ( app . config [ [string] ] ) : [EOL] user = app . config [ [string] ] ( app ) [EOL] else : [EOL] user = load_user ( { [string] : [string] , [string] : [string] } ) [EOL] [EOL] return user . to_json ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from http import HTTPStatus [EOL] from pkg_resources import iter_entry_points [EOL] [EOL] from flask import Response , jsonify , make_response [EOL] from flask . blueprints import Blueprint [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] ANNOUNCEMENT_CLIENT_CLASS = None [EOL] ANNOUNCEMENT_CLIENT_INSTANCE = None [EOL] [EOL] [comment] [EOL] for entry_point in iter_entry_points ( group = [string] , name = [string] ) : [EOL] announcement_client_class = entry_point . load ( ) [EOL] if announcement_client_class is not None : [EOL] ANNOUNCEMENT_CLIENT_CLASS = announcement_client_class [EOL] [EOL] announcements_blueprint = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ announcements_blueprint . route ( [string] , methods = [ [string] ] ) def get_announcements ( ) : [EOL] global ANNOUNCEMENT_CLIENT_INSTANCE [EOL] try : [EOL] if ANNOUNCEMENT_CLIENT_INSTANCE is None and ANNOUNCEMENT_CLIENT_CLASS is not None : [EOL] ANNOUNCEMENT_CLIENT_INSTANCE = ANNOUNCEMENT_CLIENT_CLASS ( ) [EOL] [EOL] if ANNOUNCEMENT_CLIENT_INSTANCE is None : [EOL] payload = jsonify ( { [string] : [ ] , [string] : [string] } ) [EOL] return make_response ( payload , HTTPStatus . NOT_IMPLEMENTED ) [EOL] [EOL] return ANNOUNCEMENT_CLIENT_INSTANCE . _get_posts ( ) [EOL] except Exception as e : [EOL] message = [string] + str ( e ) [EOL] logging . exception ( message ) [EOL] payload = jsonify ( { [string] : [ ] , [string] : message } ) [EOL] return make_response ( payload , HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] [EOL] from http import HTTPStatus [EOL] [EOL] from flask import Response , jsonify , make_response , render_template , request [EOL] from flask import current_app as app [EOL] from flask . blueprints import Blueprint [EOL] [EOL] from amundsen_application . log . action_log import action_logging [EOL] [EOL] LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] mail_blueprint = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ mail_blueprint . route ( [string] , methods = [ [string] ] ) def feedback ( ) : [EOL] [docstring] [EOL] mail_client = app . config [ [string] ] [EOL] [EOL] if not mail_client : [EOL] message = [string] [EOL] logging . exception ( message ) [EOL] return make_response ( jsonify ( { [string] : message } ) , HTTPStatus . NOT_IMPLEMENTED ) [EOL] [EOL] try : [EOL] data = request . form . to_dict ( ) [EOL] text_content = [string] . join ( [string] . format ( key , val ) for key , val in data . items ( ) ) [EOL] html_content = render_template ( [string] , form_data = data ) [EOL] [EOL] [comment] [EOL] feedback_type = data . get ( [string] ) [EOL] rating = data . get ( [string] ) [EOL] comment = data . get ( [string] ) [EOL] bug_summary = data . get ( [string] ) [EOL] repro_steps = data . get ( [string] ) [EOL] feature_summary = data . get ( [string] ) [EOL] value_prop = data . get ( [string] ) [EOL] [EOL] _feedback ( feedback_type = feedback_type , rating = rating , comment = comment , bug_summary = bug_summary , repro_steps = repro_steps , feature_summary = feature_summary , value_prop = value_prop ) [EOL] [EOL] response = mail_client . send_email ( text = text_content , html = html_content ) [EOL] status_code = response . status_code [EOL] [EOL] if status_code == HTTPStatus . OK : [EOL] message = [string] [EOL] else : [EOL] message = [string] + str ( status_code ) [EOL] logging . error ( message ) [EOL] [EOL] return make_response ( jsonify ( { [string] : message } ) , status_code ) [EOL] except Exception as e : [EOL] message = [string] + str ( e ) [EOL] logging . exception ( message ) [EOL] return make_response ( jsonify ( { [string] : message } ) , HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL] [EOL] [EOL] @ action_logging def _feedback ( * , feedback_type , rating , comment , bug_summary , repro_steps , feature_summary , value_prop ) : [EOL] [docstring] [EOL] pass [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Dict [EOL] import requests [EOL] [EOL] [EOL] def get_query_param ( args , param , error_msg = None ) : [EOL] value = args . get ( param ) [EOL] if value is None : [EOL] msg = [string] . format ( param ) if error_msg is not None else error_msg [EOL] raise Exception ( msg ) [EOL] return value [EOL] [EOL] [EOL] [comment] [EOL] def request_wrapper ( method , url , client , headers , timeout_sec ) : [comment] [EOL] [docstring] [EOL] if client is not None : [EOL] if method == [string] : [EOL] return client . delete ( url , headers = headers , raw_response = True ) [EOL] elif method == [string] : [EOL] return client . get ( url , headers = headers , raw_response = True ) [EOL] elif method == [string] : [EOL] return client . post ( url , headers = headers , raw_response = True ) [EOL] elif method == [string] : [EOL] return client . put ( url , headers = headers , raw_response = True ) [EOL] else : [EOL] raise Exception ( [string] . format ( method ) ) [EOL] else : [EOL] with requests . Session ( ) as s : [EOL] if method == [string] : [EOL] return s . delete ( url , timeout = timeout_sec ) [EOL] elif method == [string] : [EOL] return s . get ( url , timeout = timeout_sec ) [EOL] elif method == [string] : [EOL] return s . post ( url , timeout = timeout_sec ) [EOL] elif method == [string] : [EOL] return s . put ( url , timeout = timeout_sec ) [EOL] else : [EOL] raise Exception ( [string] . format ( method ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
	0
	0
from typing import Type , Dict , Any [EOL] import amundsen_application [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from marshmallow import Schema , fields , pre_load , post_load , validates_schema , ValidationError [EOL] [EOL] from flask import Response , jsonify [EOL] from flask import current_app as app [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] class User : [EOL] [comment] [EOL] def __init__ ( self , first_name = None , last_name = None , email = None , display_name = None , profile_url = None , user_id = None , github_name = None , is_active = True , manager_name = None , role_name = None , slack_url = None , team_name = None ) : [EOL] self . first_name = first_name [EOL] self . last_name = last_name [EOL] self . email = email [EOL] self . display_name = display_name [EOL] self . profile_url = profile_url [EOL] [EOL] [comment] [EOL] self . user_id = user_id [EOL] self . github_name = github_name [EOL] self . is_active = is_active [EOL] self . manager_name = manager_name [EOL] self . role_name = role_name [EOL] self . slack_url = slack_url [EOL] self . team_name = team_name [EOL] [comment] [EOL] [EOL] def to_json ( self ) : [EOL] user_info = dump_user ( self ) [EOL] return jsonify ( user_info ) [EOL] [EOL] [EOL] class UserSchema ( Schema ) : [EOL] first_name = fields . Str ( allow_none = True ) [EOL] last_name = fields . Str ( allow_none = True ) [EOL] email = fields . Str ( allow_none = True ) [EOL] display_name = fields . Str ( required = True ) [EOL] profile_url = fields . Str ( allow_none = True ) [EOL] [EOL] user_id = fields . Str ( required = True ) [EOL] github_name = fields . Str ( allow_none = True ) [EOL] is_active = fields . Bool ( allow_none = True ) [EOL] manager_name = fields . Str ( allow_none = True ) [EOL] role_name = fields . Str ( allow_none = True ) [EOL] slack_url = fields . Str ( allow_none = True ) [EOL] team_name = fields . Str ( allow_none = True ) [EOL] [EOL] @ pre_load def generate_display_name ( self , data ) : [EOL] if data . get ( [string] , None ) : [EOL] return data [EOL] [EOL] if data . get ( [string] , None ) or data . get ( [string] , None ) : [EOL] data [ [string] ] = [string] . format ( data . get ( [string] , [string] ) , data . get ( [string] , [string] ) ) . strip ( ) [EOL] return data [EOL] [EOL] data [ [string] ] = data . get ( [string] , None ) [EOL] return data [EOL] [EOL] @ pre_load def generate_profile_url ( self , data ) : [EOL] if data . get ( [string] , None ) : [EOL] return data [EOL] [EOL] data [ [string] ] = [string] [EOL] if app . config [ [string] ] : [EOL] data [ [string] ] = app . config [ [string] ] ( data [ [string] ] ) [EOL] return data [EOL] [EOL] @ post_load def make_user ( self , data ) : [EOL] return User ( ** data ) [EOL] [EOL] @ validates_schema def validate_user ( self , data ) : [EOL] if not data . get ( [string] , None ) : [EOL] raise ValidationError ( [string] ) [EOL] if not data . get ( [string] , None ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] def load_user ( user_data ) : [EOL] try : [EOL] schema = UserSchema ( ) [EOL] data , errors = schema . load ( user_data ) [EOL] return data [EOL] except ValidationError as err : [EOL] return err . messages [EOL] [EOL] [EOL] def dump_user ( user ) : [EOL] schema = UserSchema ( ) [EOL] try : [EOL] data , errors = schema . dump ( user ) [EOL] return data [EOL] except ValidationError as err : [EOL] return err . messages [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $typing.Dict$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 $typing.Dict$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 $typing.Dict$ 0 0 0 $typing.Dict$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 $User$ 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from typing import Any [EOL] [EOL] [EOL] class ActionLogParams ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , * , command , start_epoch_ms , end_epoch_ms = None , user , host_name , pos_args_json , keyword_args_json , output = None , error = None ) : [EOL] self . command = command [EOL] self . start_epoch_ms = start_epoch_ms [EOL] self . end_epoch_ms = end_epoch_ms [EOL] self . user = user [EOL] self . host_name = host_name [EOL] self . pos_args_json = pos_args_json [EOL] self . keyword_args_json = keyword_args_json [EOL] self . output = output [EOL] self . error = error [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] [string] . format ( self . command , self . start_epoch_ms , self . end_epoch_ms , self . user , self . host_name , self . pos_args_json , self . keyword_args_json , self . output , self . error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $builtins.Exception$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.Exception$ 0 $builtins.Exception$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] import amundsen_application [EOL] import builtins [EOL] import abc [EOL] import logging [EOL] [EOL] from http import HTTPStatus [EOL] [EOL] from flask import jsonify , make_response , Response [EOL] [EOL] from amundsen_application . models . announcements import Announcements , AnnouncementsSchema [EOL] [EOL] [EOL] class BaseAnnouncementClient ( abc . ABC ) : [EOL] @ abc . abstractmethod def __init__ ( self ) : [EOL] pass [comment] [EOL] [EOL] @ abc . abstractmethod def get_posts ( self ) : [EOL] [docstring] [EOL] pass [comment] [EOL] [EOL] def _get_posts ( self ) : [EOL] def _create_error_response ( message ) : [EOL] logging . exception ( message ) [EOL] payload = jsonify ( { [string] : [ ] , [string] : message } ) [EOL] return make_response ( payload , HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL] [EOL] try : [EOL] try : [EOL] announcements = self . get_posts ( ) [EOL] except Exception as e : [EOL] message = [string] + str ( e ) [EOL] return _create_error_response ( message ) [EOL] [EOL] [comment] [EOL] data , errors = AnnouncementsSchema ( ) . dump ( announcements ) [EOL] if not errors : [EOL] payload = jsonify ( { [string] : data . get ( [string] ) , [string] : [string] } ) [EOL] return make_response ( payload , HTTPStatus . OK ) [EOL] else : [EOL] message = [string] + str ( errors ) [EOL] return _create_error_response ( message ) [EOL] except Exception as e : [EOL] message = [string] + str ( e ) [EOL] return _create_error_response ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $amundsen_application.models.announcements.Announcements$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 $flask.Response$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0