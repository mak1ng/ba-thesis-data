[comment] [EOL]	0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import include , path [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . views . generic import TemplateView [EOL] from django . views import defaults as default_views [EOL] from django . conf . urls import url [EOL] [EOL] from alwahaj . core . views import contactUs , overview , index , adminSetting [EOL] [EOL] urlpatterns = [ path ( settings . ADMIN_URL , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] ) ) , url ( [string] , index . homeView , name = [string] ) , url ( [string] , index . logoutUser , name = [string] ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , adminSetting . addCompany , name = [string] ) , url ( [string] , adminSetting . addSystem , name = [string] ) , url ( [string] , adminSetting . addProject , name = [string] ) , url ( [string] , adminSetting . linkSystem , name = [string] ) , url ( [string] , adminSetting . linkStaff , name = [string] ) , url ( [string] , adminSetting . addStaff , name = [string] ) , url ( [string] , contactUs . contactUs , name = [string] ) , url ( [string] , overview . overviewView , name = [string] ) , url ( [string] , adminSetting . delete , name = [string] ) , url ( [string] , adminSetting . update , name = [string] ) , url ( [string] , adminSetting . update ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . server_error ) , ] [EOL] if [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
	0
	0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . urls import reverse , resolve [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_detail ( user ) : [EOL] assert ( reverse ( [string] , kwargs = { [string] : user . username } ) == f" [string] { user . username } [string] " ) [EOL] assert resolve ( f" [string] { user . username } [string] " ) . view_name == [string] [EOL] [EOL] [EOL] def test_update ( ) : [EOL] assert reverse ( [string] ) == [string] [EOL] assert resolve ( [string] ) . view_name == [string] [EOL] [EOL] [EOL] def test_redirect ( ) : [EOL] assert reverse ( [string] ) == [string] [EOL] assert resolve ( [string] ) . view_name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Tuple , Type [EOL] import typing [EOL] import alwahaj [EOL] from django import forms [EOL] from core . models import Systems , Company , Projects , Staff , ProjectSystemJoint , ProjectStaffJoint [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class UserForm ( forms . Form ) : [EOL] username = forms . CharField ( label = [string] , max_length = [number] ) [EOL] password = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] [EOL] class CompanyForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Company [EOL] fields = [string] [EOL] [EOL] class SystemsForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Systems [EOL] fields = [string] [EOL] [EOL] class ProjectsForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Projects [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] class StaffForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Staff [EOL] fields = [string] [EOL] [EOL] class ProjectSystemForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = ProjectSystemJoint [EOL] fields = [string] [EOL] [EOL] class ProjectStaffForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = ProjectStaffJoint [EOL] fields = [string] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.UserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.UserForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.forms.ProjectStaffForm.Meta]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import alwahaj [EOL] from django . db import models [EOL] [EOL] isLeaderChoices = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] statusChoices = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] class Company ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] url = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class Staff ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] position = models . CharField ( max_length = [number] ) [EOL] description = models . CharField ( max_length = [number] ) [EOL] education = models . CharField ( max_length = [number] ) [EOL] payroll = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class Systems ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] description = models . CharField ( max_length = [number] ) [EOL] cost = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] company = models . ForeignKey ( Company , on_delete = models . CASCADE ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class SystemImages ( models . Model ) : [EOL] system = models . ForeignKey ( Systems , on_delete = models . CASCADE ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . system . name + [string] [EOL] [EOL] [EOL] class Projects ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] description = models . CharField ( max_length = [number] ) [EOL] type = models . CharField ( max_length = [number] ) [EOL] location = models . CharField ( max_length = [number] ) [EOL] beneficiary = models . CharField ( max_length = [number] ) [EOL] status = models . CharField ( max_length = [number] , choices = statusChoices ) [EOL] budget = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] PojectSystemJoint = models . ManyToManyField ( Systems , through = [string] , related_name = [string] ) [EOL] ProjectStaffJoint = models . ManyToManyField ( Staff , through = [string] , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class ProjectImages ( models . Model ) : [EOL] project = models . ForeignKey ( Projects , on_delete = models . CASCADE ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . project . name + [string] [EOL] [EOL] class ProjectSystemJoint ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] Projects = models . ForeignKey ( Projects , on_delete = models . CASCADE ) [EOL] Systems = models . ForeignKey ( Systems , on_delete = models . CASCADE ) [EOL] startDate = models . DateField ( blank = True , null = True ) [EOL] endDate = models . DateField ( blank = True , null = True ) [EOL] [EOL] class ProjectStaffJoint ( models . Model ) : [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] Projects = models . ForeignKey ( Projects , on_delete = models . CASCADE ) [EOL] Staff = models . ForeignKey ( Staff , on_delete = models . CASCADE ) [EOL] isLeader = models . CharField ( max_length = [number] , choices = isLeaderChoices ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[alwahaj.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Staff]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[alwahaj.core.models.Systems]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Systems]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Systems]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Systems]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Systems]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.SystemImages]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.SystemImages]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.Projects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectImages]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectImages]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectSystemJoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[alwahaj.core.models.ProjectStaffJoint]$ 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectStaffJoint]$ 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectStaffJoint]$ 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectStaffJoint]$ 0 0 0 0 0 0 0 0 $typing.Type[alwahaj.core.models.ProjectStaffJoint]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] from core . models import Projects , Systems , Staff , Company , ProjectStaffJoint , ProjectSystemJoint , ProjectImages , SystemImages [EOL] [EOL] [EOL] admin . site . register ( Projects ) [EOL] admin . site . register ( Systems ) [EOL] admin . site . register ( Staff ) [EOL] admin . site . register ( Company ) [EOL] admin . site . register ( ProjectStaffJoint ) [EOL] admin . site . register ( ProjectSystemJoint ) [EOL] admin . site . register ( ProjectImages ) [EOL] admin . site . register ( SystemImages ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [EOL] [EOL] [EOL] [EOL] def solutionsView ( request ) : [EOL] context = dict ( x = [number] ) [EOL] return render ( request , [string] , context )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [EOL] [EOL] def overviewView ( request ) : [EOL] context = dict ( x = [number] ) [EOL] return render ( request , [string] , context )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [EOL] [EOL] def contactUs ( request ) : [EOL] context = dict ( x = [number] ) [EOL] return render ( request , [string] , context )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [EOL] [EOL] def projectsView ( request ) : [EOL] context = dict ( x = [number] ) [EOL] return render ( request , [string] , context )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . http import HttpResponse [EOL] [EOL] [EOL] def staffView ( request ) : [EOL] context = dict ( x = [number] ) [EOL] return render ( request , [string] , context )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . http import HttpResponse [EOL] from django . db import IntegrityError [EOL] from core . models import Systems , Company , Projects , Staff , ProjectSystemJoint , ProjectStaffJoint , SystemImages , ProjectImages [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . contrib . auth . decorators import login_required [EOL] from core . forms import CompanyForm , SystemsForm , ProjectsForm , StaffForm , ProjectSystemForm , ProjectStaffForm [EOL] from django . forms import modelformset_factory [EOL] from django import forms [EOL] [EOL] [EOL] @ login_required def addCompany ( request ) : [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = CompanyForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = CompanyForm ( ) [EOL] context [ [string] ] = [string] [EOL] [comment] [EOL] context [ [string] ] = [ [string] , [string] , [string] ] [EOL] context [ [string] ] = Company . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def addSystem ( request ) : [EOL] imageFormSet = modelformset_factory ( SystemImages , fields = ( [string] , ) , extra = [number] ) [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = SystemsForm ( request . POST , request . FILES or None ) [EOL] formset = imageFormSet ( request . POST or None , request . FILES or None ) [EOL] if form . is_valid ( ) and formset . is_valid ( ) : [EOL] system = form . save ( ) [EOL] form . save ( ) [EOL] print ( [string] , formset ) [EOL] for f in formset : [EOL] try : [EOL] image = SystemImages ( system = system , image = f . cleaned_data [ [string] ] ) [EOL] print ( [string] , image ) [EOL] image . save ( ) [EOL] except Exception as e : [EOL] break [EOL] [EOL] [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] context [ [string] ] = formset [EOL] [EOL] else : [EOL] context [ [string] ] = SystemsForm ( ) [EOL] context [ [string] ] = imageFormSet ( queryset = SystemImages . objects . none ( ) ) [EOL] context [ [string] ] = [string] [EOL] context [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] context [ [string] ] = Systems . objects . all ( ) [EOL] context [ [string] ] = SystemImages . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def linkSystem ( request ) : [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = ProjectSystemForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = ProjectSystemForm ( ) [EOL] context [ [string] ] = [string] [EOL] context [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] context [ [string] ] = ProjectSystemJoint . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def linkStaff ( request ) : [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = ProjectStaffForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = ProjectStaffForm ( ) [EOL] context [ [string] ] = [string] [EOL] context [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] context [ [string] ] = ProjectStaffJoint . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def addProject ( request ) : [EOL] imageFormSet = modelformset_factory ( ProjectImages , fields = ( [string] , ) , extra = [number] ) [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = ProjectsForm ( request . POST , request . FILES or None ) [EOL] formset = imageFormSet ( request . POST or None , request . FILES or None ) [EOL] if form . is_valid ( ) and formset . is_valid ( ) : [EOL] project = form . save ( ) [EOL] form . save ( ) [EOL] [EOL] for f in formset : [EOL] try : [EOL] image = ProjectImages ( project = project , image = f . cleaned_data [ [string] ] ) [EOL] image . save ( ) [EOL] except Exception as e : [EOL] break [EOL] [EOL] [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] context [ [string] ] = formset [EOL] [EOL] else : [EOL] context [ [string] ] = ProjectsForm ( ) [EOL] context [ [string] ] = imageFormSet ( queryset = ProjectImages . objects . none ( ) ) [EOL] context [ [string] ] = [string] [EOL] context [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] context [ [string] ] = Projects . objects . all ( ) [EOL] context [ [string] ] = ProjectImages . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ login_required def addStaff ( request ) : [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = StaffForm ( request . POST , request . FILES or None ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = StaffForm ( ) [EOL] context [ [string] ] = [string] [EOL] [EOL] context [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] context [ [string] ] = Staff . objects . all ( ) [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def iterateDelete ( array , model ) : [EOL] if model is ProjectImages or model is SystemImages : [EOL] image = [string] + array [ [number] ] . replace ( [string] , [string] ) [EOL] model . objects . filter ( image = image ) . delete ( ) [EOL] else : [EOL] for id in array : [EOL] model . objects . filter ( id = id ) . delete ( ) [EOL] [EOL] [EOL] def getModel ( path ) : [EOL] print ( path ) [EOL] if ( path == [string] ) : [EOL] return dict ( model = Staff , form = StaffForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = Projects , form = ProjectsForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = Systems , form = SystemsForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = Company , form = CompanyForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = ProjectStaffJoint , form = ProjectStaffForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = ProjectSystemJoint , form = ProjectSystemForm ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = ProjectImages , form = None ) [EOL] elif ( path == [string] ) : [EOL] return dict ( model = SystemImages , form = None ) [EOL] [EOL] @ login_required def delete ( request ) : [EOL] if request . method == [string] : [EOL] iterateDelete ( request . POST . getlist ( [string] , [string] ) , getModel ( request . POST . get ( [string] , [string] ) ) [ [string] ] ) [EOL] return render ( request , [string] , dict ( ) ) [EOL] [EOL] [EOL] [EOL] [EOL] @ login_required def update ( request , key = None ) : [EOL] if request . method == [string] : [EOL] if request . POST . get ( [string] , [string] ) and request . POST . get ( [string] , [string] ) : [EOL] result = getModel ( request . POST . get ( [string] , [string] ) ) [EOL] instance = get_object_or_404 ( result [ [string] ] , id = request . POST . get ( [string] , [string] ) ) [EOL] form = result [ [string] ] ( instance = instance ) [EOL] context = dict ( ) [EOL] context [ [string] ] = form [EOL] return render ( request , [string] , context ) [EOL] [EOL] path = request . META . get ( [string] ) . split ( [string] ) [EOL] relativePath = [string] + path [ len ( path ) - [number] ] + [string] [EOL] result = getModel ( relativePath ) [EOL] insta = result [ [string] ] . objects . get ( id = request . GET . get ( [string] , [string] ) ) [EOL] form = result [ [string] ] ( request . POST , request . FILES or None , instance = insta ) [EOL] form . save ( ) [EOL] [EOL] return redirect ( request . META . get ( [string] ) )	
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render , redirect [EOL] from django . contrib . auth import authenticate , login , logout [EOL] from django . http import HttpResponse [EOL] [EOL] from core . forms import UserForm [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def homeView ( request ) : [EOL] context = dict ( ) [EOL] if request . method == [string] : [EOL] form = UserForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] user = authenticate ( request , username = form . cleaned_data [ [string] ] , password = form . cleaned_data [ [string] ] ) [EOL] if user is not None : [EOL] login ( request , user ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] context [ [string] ] = [string] [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = form [EOL] else : [EOL] context [ [string] ] = UserForm ( ) [EOL] return render ( request , [string] , context ) [EOL] [EOL] def logoutUser ( request ) : [EOL] logout ( request ) [EOL] return redirect ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . conf . urls import url , include [EOL] [EOL] from core . views import solutions [EOL] [EOL] urlpatterns = [ path ( [string] , solutions . solutionsView , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . conf . urls import url , include [EOL] [EOL] from core . views import projects [EOL] [EOL] urlpatterns = [ path ( [string] , projects . projectsView , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . conf . urls import url , include [EOL] [EOL] from core . views import staff [EOL] [EOL] urlpatterns = [ path ( [string] , staff . staffView , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . conf . urls import url , include [EOL] [EOL] from core . views import index [EOL] [EOL] urlpatterns = [ ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0