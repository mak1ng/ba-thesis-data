from typing import List [EOL] import typing [EOL] import os [EOL] from setuptools import setup [EOL] [EOL] def read ( fname ) : [EOL] return open ( os . path . join ( os . path . dirname ( __file__ ) , fname ) ) . read ( ) [EOL] [EOL] REQUIRES = [ [string] ] [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = ( [string] ) , license = [string] , keywords = [ [string] , [string] , [string] , [string] ] , url = [string] , packages = [ [string] ] , packages_data = { [string] : [ [string] ] } , include_package_data = True , long_description = read ( [string] ) , classifiers = [ [string] , [string] , [string] , ] , ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] sys . path . insert ( [number] , os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL] [EOL] [comment] [EOL] autoclass_content = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def run_apidoc ( _ ) : [EOL] from sphinx . apidoc import main [EOL] cur_dir = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] sys . path . append ( os . path . join ( cur_dir , [string] , [string] , [string] ) ) [EOL] module = os . path . join ( cur_dir , [string] , [string] , [string] ) [EOL] output_dir = os . path . join ( cur_dir , [string] ) [EOL] main ( [ [string] , [string] , output_dir , module , [string] ] ) [EOL] [EOL] def setup ( app ) : [EOL] app . connect ( [string] , run_apidoc ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] epub_author = author [EOL] epub_publisher = author [EOL] epub_copyright = copyright [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import cerise_client . service as cs [EOL] import time [EOL] [EOL] [EOL] srv = cs . require_managed_service ( [string] , [number] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] job = srv . create_job ( [string] ) [EOL] job . set_workflow ( [string] ) [EOL] job . run ( ) [EOL] [EOL] while job . is_running ( ) : [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( job . outputs [ [string] ] . text ) [EOL] [EOL] srv . destroy_job ( job ) [EOL] cs . destroy_managed_service ( srv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import cerise_client . service as cs [EOL] import time [EOL] [EOL] [EOL] srv = cs . require_managed_service ( [string] , [number] , [string] ) [EOL] job1 = srv . create_job ( [string] ) [EOL] job1 . set_workflow ( [string] ) [EOL] job1 . run ( ) [EOL] [EOL] job2 = srv . create_job ( [string] ) [EOL] job2 . set_workflow ( [string] ) [EOL] job2 . add_input_file ( [string] , [string] ) [EOL] job2 . run ( ) [EOL] [EOL] while job1 . is_running ( ) or job2 . is_running ( ) : [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( job1 . outputs [ [string] ] . text ) [EOL] print ( job2 . outputs [ [string] ] . text ) [EOL] [EOL] srv . destroy_job ( job1 ) [EOL] srv . destroy_job ( job2 ) [EOL] cs . destroy_managed_service ( srv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import TYPE_CHECKING , Type [EOL] [EOL] [comment] [EOL] [comment] [EOL] if TYPE_CHECKING : [EOL] BaseExceptionType = Type [ BaseException ] [EOL] else : [EOL] BaseExceptionType = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import cerise [EOL] import os [EOL] import sys [EOL] [EOL] import connexion [EOL] [EOL] sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) ) ) [EOL] from cerise . config import make_config [EOL] from cerise . front_end . encoder import JSONEncoder [EOL] [EOL] [EOL] app = connexion . App ( __name__ , specification_dir = [string] ) [EOL] app . app . json_encoder = JSONEncoder [EOL] app . add_api ( [string] , base_path = [string] , arguments = { [string] : [string] } ) [EOL] [EOL] application = app . app [EOL] [EOL] if __name__ == [string] : [EOL] config = make_config ( ) [EOL] app . run ( host = config . get_service_host ( ) , port = config . get_service_port ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cerise.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $cerise.config.Config$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $cerise.config.Config$ 0 0 0 0 0 0 0 $cerise.config.Config$ 0 0 0 0 0 0
	0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] import cerise [EOL] from typing import List , Optional [EOL] [EOL] from cerulean import Path [EOL] [EOL] [EOL] class File : [EOL] def __init__ ( self , name , index , location , secondary_files ) : [EOL] [docstring] [EOL] self . name = name [EOL] [docstring] [EOL] self . index = index [EOL] [docstring] [EOL] self . location = location [EOL] [docstring] [EOL] self . source = None [comment] [EOL] [docstring] [EOL] self . secondary_files = secondary_files [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.int]$ 0 $builtins.str$ 0 $typing.List[cerise.back_end.file.File]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cerise.back_end.file.File]$ 0 $typing.List[cerise.back_end.file.File]$ 0 0 0
	0
from typing import Any , List , Dict [EOL] import typing [EOL] import builtins [EOL] import cerise [EOL] from typing import Any , Dict , List [EOL] [EOL] import yaml [EOL] [EOL] from cerise . back_end . file import File [EOL] from cerise . job_store . job_state import JobState [EOL] [EOL] [EOL] def is_workflow ( workflow_content ) : [EOL] [docstring] [EOL] try : [EOL] workflow = yaml . safe_load ( workflow_content . decode ( ) ) [EOL] except yaml . scanner . ScannerError : [comment] [EOL] return False [EOL] except yaml . parser . ParserError : [comment] [EOL] return False [EOL] [EOL] if [string] not in workflow : [EOL] return False [EOL] if [string] not in workflow or [string] not in workflow : [EOL] return False [EOL] if [string] not in workflow : [EOL] return False [EOL] [EOL] process_class = workflow . get ( [string] ) [EOL] return process_class == [string] [EOL] [EOL] [EOL] def get_workflow_step_names ( workflow_content ) : [EOL] [docstring] [EOL] workflow = yaml . safe_load ( workflow_content . decode ( ) ) [EOL] if [string] not in workflow or workflow [ [string] ] != [string] : [EOL] raise RuntimeError ( [string] ) [EOL] if [string] not in workflow : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] steps = None [EOL] if isinstance ( workflow [ [string] ] , dict ) : [EOL] steps = list ( workflow [ [string] ] . values ( ) ) [EOL] elif isinstance ( workflow [ [string] ] , list ) : [EOL] steps = workflow [ [string] ] [EOL] [EOL] if steps is None : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] return [ step [ [string] ] for step in steps ] [EOL] [EOL] [EOL] def get_required_num_cores ( cwl_content ) : [EOL] [docstring] [EOL] workflow = yaml . safe_load ( cwl_content . decode ( ) ) [EOL] hints = workflow . get ( [string] ) [EOL] if hints is None : [EOL] return [number] [EOL] [EOL] resource_requirement = hints . get ( [string] ) [EOL] if resource_requirement is None : [EOL] return [number] [EOL] [EOL] cores_min = resource_requirement . get ( [string] ) [EOL] cores_max = resource_requirement . get ( [string] ) [EOL] [EOL] if cores_min is not None : [EOL] return cores_min [EOL] if cores_max is not None : [EOL] return cores_max [EOL] return [number] [EOL] [EOL] [EOL] def get_time_limit ( cwl_content ) : [EOL] [docstring] [EOL] workflow = yaml . safe_load ( cwl_content . decode ( ) ) [EOL] hints = workflow . get ( [string] ) [EOL] if hints is None : [EOL] return [number] [EOL] [EOL] time_limit = hints . get ( [string] ) [EOL] if time_limit is None : [EOL] return [number] [EOL] [EOL] if isinstance ( time_limit , int ) : [EOL] return time_limit [EOL] elif isinstance ( time_limit , dict ) : [EOL] limit = time_limit . get ( [string] ) [EOL] if limit is None : [EOL] raise ValueError ( [string] [string] ) [EOL] return limit [EOL] else : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] [EOL] def get_secondary_files ( secondary_files ) : [EOL] [docstring] [EOL] result = [ ] [EOL] for value in secondary_files : [EOL] if isinstance ( value , dict ) : [EOL] if [string] in value and value [ [string] ] == [string] : [EOL] sf = [ ] [comment] [EOL] if [string] in value : [EOL] sf = get_secondary_files ( value [ [string] ] ) [EOL] new_file = File ( None , None , value [ [string] ] , sf ) [EOL] result . append ( new_file ) [EOL] elif [string] in value and value [ [string] ] == [string] : [EOL] raise RuntimeError ( [string] ) [EOL] else : [EOL] raise RuntimeError ( [string] [string] ) [EOL] return result [EOL] [EOL] [EOL] def get_files_from_binding ( cwl_binding ) : [EOL] [docstring] [EOL] result = [ ] [EOL] if cwl_binding is not None : [EOL] for name , value in cwl_binding . items ( ) : [EOL] if isinstance ( value , dict ) : [EOL] if value . get ( [string] ) == [string] : [EOL] secondary_files = get_secondary_files ( value . get ( [string] , [ ] ) ) [EOL] result . append ( File ( name , None , value [ [string] ] , secondary_files ) ) [EOL] elif value . get ( [string] ) == [string] : [EOL] raise RuntimeError ( [string] ) [EOL] elif isinstance ( value , list ) : [EOL] for i , val in enumerate ( value ) : [EOL] if isinstance ( val , dict ) : [EOL] if val . get ( [string] ) == [string] : [EOL] secondary_files = get_secondary_files ( val . get ( [string] , [ ] ) ) [EOL] input_file = File ( name , i , val [ [string] ] , secondary_files ) [EOL] result . append ( input_file ) [EOL] elif val . get ( [string] ) == [string] : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def get_cwltool_result ( cwltool_log ) : [EOL] [docstring] [EOL] if [string] in cwltool_log : [EOL] return JobState . PERMANENT_FAILURE [EOL] if [string] in cwltool_log : [EOL] return JobState . PERMANENT_FAILURE [EOL] elif [string] in cwltool_log : [EOL] return JobState . TEMPORARY_FAILURE [EOL] elif [string] in cwltool_log : [EOL] return JobState . SUCCESS [EOL] [EOL] return JobState . SYSTEM_ERROR [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cerise.back_end.file.File]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cerise.back_end.file.File]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] from time import time [EOL] [EOL] from cerise . job_store . job_state import JobState [EOL] [EOL] [EOL] class MockJob : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] def __init__ ( self , job_id , name , workflow , job_input ) : [EOL] [docstring] [EOL] [comment] [EOL] self . id = job_id [EOL] [docstring] [EOL] self . name = name [EOL] [docstring] [EOL] self . workflow = workflow [EOL] [docstring] [EOL] self . local_input = job_input [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . state = JobState . SUBMITTED [EOL] [docstring] [EOL] self . resolve_retry_count = [number] [EOL] [docstring] [EOL] self . please_delete = False [EOL] [docstring] [EOL] self . log = [string] [EOL] [docstring] [EOL] self . remote_output = [string] [EOL] [docstring] [EOL] self . remote_error = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . workflow_content = None [EOL] [docstring] [EOL] self . required_num_cores = [number] [EOL] [docstring] [EOL] self . time_limit = [number] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . remote_workdir_path = [string] [EOL] [docstring] [EOL] self . remote_workflow_path = [string] [EOL] [docstring] [EOL] self . remote_input_path = [string] [EOL] [docstring] [EOL] self . remote_stdout_path = [string] [EOL] [docstring] [EOL] self . remote_stderr_path = [string] [EOL] [docstring] [EOL] self . remote_system_out_path = [string] [EOL] [docstring] [EOL] self . remote_system_err_path = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . local_output = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . remote_job_id = None [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . __log = list ( ) [EOL] [docstring] [EOL] [EOL] def try_transition ( self , from_state , to_state ) : [EOL] [docstring] [EOL] if self . state == from_state : [EOL] self . state = to_state [EOL] return True [EOL] return False [EOL] [EOL] def add_log ( self , level , message ) : [EOL] [docstring] [EOL] self . __log . append ( ( level , time ( ) , message ) ) [EOL] [EOL] def debug ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . DEBUG , message ) [EOL] [EOL] def info ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . INFO , message ) [EOL] [EOL] def warning ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . WARNING , message ) [EOL] [EOL] def error ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . ERROR , message ) [EOL] [EOL] def critical ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . CRITICAL , message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import cerise [EOL] import pathlib [EOL] import json [EOL] import pathlib [EOL] import shutil [EOL] import time [EOL] [EOL] import pytest [EOL] import yaml [EOL] [EOL] from cerise . back_end . job_runner import JobRunner [EOL] from cerise . job_store . job_state import JobState [EOL] from cerise . test . fixture_jobs import BrokenJob [EOL] [EOL] [EOL] def _stage_test_api ( local_api_dir , remote_api_dir ) : [EOL] [docstring] [EOL] shutil . copytree ( str ( local_api_dir ) , str ( remote_api_dir ) ) [EOL] [EOL] for step in ( remote_api_dir / [string] / [string] / [string] ) . iterdir ( ) : [EOL] if step . suffix == [string] : [EOL] step_dict = yaml . safe_load ( step . read_text ( ) ) [EOL] step . write_text ( json . dumps ( step_dict ) ) [EOL] [EOL] cwltiny = pathlib . Path ( __file__ ) . parents [ [number] ] / [string] / [string] / [string] / [string] [EOL] shutil . copy ( str ( cwltiny ) , str ( remote_api_dir / [string] / [string] / [string] ) ) [EOL] [EOL] [EOL] @ pytest . fixture def runner_store ( mock_config , mock_store_staged , local_api_dir ) : [EOL] store , job_fixture = mock_store_staged [EOL] [EOL] remote_api_dir = mock_config . get_basedir ( ) / [string] [EOL] _stage_test_api ( local_api_dir , remote_api_dir ) [EOL] [EOL] runner_path = remote_api_dir / [string] / [string] / [string] [EOL] job_runner = JobRunner ( store , mock_config , str ( runner_path ) ) [EOL] [EOL] return job_runner , store , job_fixture [EOL] [EOL] [EOL] def _wait_for_state ( store , job_runner , state , timeout ) : [EOL] [docstring] [EOL] job = store . get_job ( [string] ) [EOL] total_time = [number] [EOL] while job . state != state and total_time < timeout : [EOL] time . sleep ( [number] ) [EOL] job_runner . update_job ( [string] ) [EOL] job = store . get_job ( [string] ) [EOL] total_time += [number] [EOL] [EOL] assert total_time < timeout [EOL] return job [EOL] [EOL] [EOL] def test_start_job ( runner_store , mock_config ) : [EOL] job_runner , store , job_fixture = runner_store [EOL] [EOL] job_runner . start_job ( [string] ) [EOL] store . get_job ( [string] ) . state = JobState . WAITING [EOL] [EOL] _wait_for_state ( store , job_runner , JobState . FINISHED , [number] ) [EOL] [EOL] logfile = mock_config . get_basedir ( ) / [string] / [string] / [string] [EOL] if job_fixture is not BrokenJob : [EOL] print ( logfile . read_text ( ) ) [EOL] assert [string] in logfile . read_text ( ) [EOL] [EOL] [EOL] def test_update ( runner_store ) : [EOL] job_runner , store , _ = runner_store [EOL] [EOL] job_runner . start_job ( [string] ) [EOL] store . get_job ( [string] ) . state = JobState . WAITING [EOL] [EOL] job = store . get_job ( [string] ) [EOL] cur_state = JobState . WAITING [EOL] states = [ cur_state ] [EOL] while cur_state != JobState . FINISHED : [EOL] job_runner . update_job ( [string] ) [EOL] job = store . get_job ( [string] ) [EOL] if job . state != cur_state : [EOL] cur_state = job . state [EOL] states . append ( cur_state ) [EOL] [EOL] i = [number] [EOL] if states [ i ] == JobState . WAITING : [EOL] i += [number] [EOL] if states [ i ] == JobState . RUNNING : [EOL] i += [number] [EOL] if states [ i ] == JobState . FINISHED : [EOL] i += [number] [EOL] assert i == len ( states ) [EOL] [EOL] [EOL] def test_cancel ( runner_store ) : [EOL] job_runner , store , _ = runner_store [EOL] [EOL] start_time = time . perf_counter ( ) [EOL] job_runner . start_job ( [string] ) [EOL] store . get_job ( [string] ) . state = JobState . WAITING [EOL] [EOL] _wait_for_state ( store , job_runner , JobState . RUNNING , [number] ) [EOL] [EOL] is_running = job_runner . cancel_job ( [string] ) [EOL] assert time . perf_counter ( ) < start_time + [number] [EOL] assert is_running is False [EOL] assert store . get_job ( [string] ) . state == JobState . RUNNING [EOL] [EOL] is_running = job_runner . cancel_job ( [string] ) [EOL] assert is_running is False [EOL] assert store . get_job ( [string] ) . state == JobState . RUNNING [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import cerise [EOL] import copy [EOL] import json [EOL] from pathlib import Path [EOL] [EOL] import cerulean [EOL] import pytest [EOL] import yaml [EOL] [EOL] from cerise . back_end . test . mock_job import MockJob [EOL] from cerise . job_store . job_state import JobState [EOL] from cerise . test . fixture_jobs import ( BrokenJob , FileArrayJob , HostnameJob , MissingInputJob , NoSuchStepJob , PassJob , SecondaryFilesJob , SlowJob , WcJob ) [EOL] [EOL] [EOL] def workflow_to_json ( yaml_string , test_steps_dir ) : [EOL] dict_form = yaml . safe_load ( str ( yaml_string , [string] ) ) [EOL] if dict_form [ [string] ] == [string] : [EOL] if [string] in dict_form : [EOL] steps = dict_form [ [string] ] [EOL] if isinstance ( steps , list ) : [EOL] for step in steps : [EOL] if [string] in step : [EOL] step [ [string] ] = [string] . format ( test_steps_dir , step [ [string] ] ) [EOL] elif isinstance ( steps , dict ) : [EOL] for _ , step in steps . items ( ) : [EOL] if [string] in step : [EOL] step [ [string] ] = [string] . format ( test_steps_dir , step [ [string] ] ) [EOL] return bytes ( json . dumps ( dict_form ) , [string] ) [EOL] [EOL] [EOL] class MockConfig : [EOL] def __init__ ( self , tmpdir ) : [EOL] self . _file_system = cerulean . LocalFileSystem ( ) [EOL] base_dir_path = tmpdir / [string] [EOL] base_dir_path . mkdir ( ) [EOL] self . _base_dir = self . _file_system / str ( base_dir_path ) [EOL] exchange_path = tmpdir / [string] [EOL] exchange_path . mkdir ( ) [EOL] self . _exchange_path = str ( exchange_path ) [EOL] [EOL] def get_scheduler ( self , run_on_head_node = False ) : [EOL] term = cerulean . LocalTerminal ( ) [EOL] return cerulean . DirectGnuScheduler ( term ) [EOL] [EOL] def get_queue_name ( self ) : [EOL] return None [EOL] [EOL] def get_slots_per_node ( self ) : [EOL] return [number] [EOL] [EOL] def get_cores_per_node ( self ) : [EOL] return [number] [EOL] [EOL] def get_scheduler_options ( self ) : [EOL] return None [EOL] [EOL] def get_remote_cwl_runner ( self ) : [EOL] return [string] [EOL] [EOL] def get_file_system ( self ) : [EOL] return self . _file_system [EOL] [EOL] def get_basedir ( self ) : [EOL] return self . _base_dir [EOL] [EOL] def get_username ( self , kind ) : [EOL] return None [EOL] [EOL] def get_store_location_service ( self ) : [EOL] return cerulean . LocalFileSystem ( ) / str ( self . _exchange_path ) [EOL] [EOL] def get_store_location_client ( self ) : [EOL] return [string] . format ( self . _exchange_path ) [EOL] [EOL] [EOL] @ pytest . fixture def mock_config ( tmpdir ) : [EOL] return MockConfig ( tmpdir ) [EOL] [EOL] [EOL] @ pytest . fixture def local_api_dir ( ) : [EOL] return Path ( __file__ ) . parents [ [number] ] / [string] / [string] [EOL] [EOL] [EOL] class MockStore : [EOL] def __init__ ( self , config ) : [EOL] self . _config = config [EOL] self . _jobs = [ ] [EOL] self . deleted_jobs = [ ] [EOL] [EOL] def __enter__ ( self ) : [EOL] pass [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] pass [EOL] [EOL] def add_job ( self , job ) : [EOL] [docstring] [EOL] self . _jobs . append ( job ) [EOL] [EOL] def list_jobs ( self ) : [EOL] return self . _jobs [EOL] [EOL] def get_job ( self , job_id ) : [EOL] return [ job for job in self . _jobs if job . id == job_id ] [ [number] ] [EOL] [EOL] def delete_job ( self , job_id ) : [EOL] self . deleted_jobs . extend ( [ job for job in self . _jobs if job . id == job_id ] ) [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PassJob , HostnameJob , WcJob , SlowJob , SecondaryFilesJob , FileArrayJob , MissingInputJob , BrokenJob ] ) def mock_store_submitted ( request , mock_config ) : [EOL] store = MockStore ( mock_config ) [EOL] job_fixture = request . param [EOL] [EOL] exchange_dir = mock_config . get_store_location_service ( ) [EOL] exchange_input_dir = exchange_dir / [string] [EOL] exchange_input_dir . mkdir ( ) [EOL] exchange_job_input_dir = exchange_input_dir / [string] [EOL] exchange_job_input_dir . mkdir ( ) [EOL] [EOL] wf_path = exchange_job_input_dir / [string] [EOL] wf_path . write_bytes ( job_fixture . workflow ) [EOL] [EOL] for input_file in job_fixture . local_input_files : [EOL] input_path = exchange_job_input_dir / input_file . location [EOL] if input_file . location in job_fixture . input_content : [EOL] input_path . write_bytes ( job_fixture . input_content [ input_file . location ] ) [EOL] input_file . source = input_path [EOL] [EOL] for sec_file in input_file . secondary_files : [EOL] sec_path = exchange_job_input_dir / sec_file . location [EOL] if sec_file . location in job_fixture . input_content : [EOL] sec_path . write_bytes ( job_fixture . input_content [ sec_file . location ] ) [EOL] sec_file . source = sec_path [EOL] [EOL] job = MockJob ( [string] , [string] , [string] + str ( wf_path ) , job_fixture . local_input ( [string] + str ( exchange_job_input_dir ) + [string] ) ) [EOL] job . state = JobState . SUBMITTED [EOL] [EOL] store . add_job ( job ) [EOL] yield store , job_fixture [EOL] [EOL] for input_file in job_fixture . local_input_files : [EOL] input_file . source = None [EOL] [EOL] for sec_file in input_file . secondary_files : [EOL] sec_file . source = None [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PassJob , HostnameJob , WcJob , SlowJob , SecondaryFilesJob , FileArrayJob , MissingInputJob , NoSuchStepJob ] ) def mock_store_resolved ( request , mock_config ) : [EOL] store = MockStore ( mock_config ) [EOL] job_fixture = copy . deepcopy ( request . param ) [EOL] [EOL] exchange_dir = mock_config . get_store_location_service ( ) [EOL] exchange_job_input_dir = exchange_dir / [string] / [string] [EOL] exchange_job_input_dir . mkdir ( parents = True ) [EOL] local_input = job_fixture . local_input ( [string] + str ( exchange_job_input_dir ) + [string] ) [EOL] [EOL] for input_file in job_fixture . local_input_files : [EOL] input_path = exchange_job_input_dir / input_file . location [EOL] if input_file . location in job_fixture . input_content : [EOL] input_path . write_bytes ( job_fixture . input_content [ input_file . location ] ) [EOL] input_file . source = input_path [EOL] [EOL] for sec_file in input_file . secondary_files : [EOL] sec_path = exchange_job_input_dir / sec_file . location [EOL] if sec_file . location in job_fixture . input_content : [EOL] sec_path . write_bytes ( job_fixture . input_content [ sec_file . location ] ) [EOL] sec_file . source = sec_path [EOL] [EOL] job = MockJob ( [string] , [string] , None , local_input ) [EOL] job . workflow_content = job_fixture . workflow [EOL] job . state = JobState . STAGING_IN [EOL] [EOL] store . add_job ( job ) [EOL] yield store , job_fixture [EOL] [EOL] for input_file in job_fixture . local_input_files : [EOL] input_file . source = None [EOL] [EOL] for sec_file in input_file . secondary_files : [EOL] sec_file . source = None [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PassJob , HostnameJob , WcJob , SlowJob , SecondaryFilesJob , FileArrayJob ] ) def mock_store_staged ( request , mock_config ) : [EOL] store = MockStore ( mock_config ) [EOL] job_fixture = request . param [EOL] [EOL] remote_base = mock_config . get_basedir ( ) [EOL] job_dir = remote_base / [string] / [string] [EOL] work_dir = job_dir / [string] [EOL] work_dir . mkdir ( parents = True ) [EOL] [EOL] test_steps_dir = mock_config . get_basedir ( ) / [string] / [string] / [string] [EOL] [EOL] ( job_dir / [string] ) . write_bytes ( workflow_to_json ( job_fixture . workflow , test_steps_dir ) ) [EOL] ( job_dir / [string] ) . write_text ( json . dumps ( job_fixture . remote_input ( work_dir ) ) ) [EOL] [EOL] for _ , name , content in job_fixture . remote_input_files : [EOL] ( work_dir / name ) . write_bytes ( content ) [EOL] [EOL] job = MockJob ( [string] , [string] , None , None ) [EOL] job . workflow_content = job_fixture . workflow [EOL] job . remote_workdir_path = str ( work_dir ) [EOL] job . remote_workflow_path = str ( job_dir / [string] ) [EOL] job . remote_input_path = str ( job_dir / [string] ) [EOL] job . remote_stdout_path = str ( job_dir / [string] ) [EOL] job . remote_stderr_path = str ( job_dir / [string] ) [EOL] job . remote_system_out_path = str ( job_dir / [string] ) [EOL] job . remote_system_err_path = str ( job_dir / [string] ) [EOL] job . state = JobState . STAGING_IN [EOL] [EOL] store . add_job ( job ) [EOL] return store , job_fixture [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PassJob , HostnameJob , WcJob , SlowJob , SecondaryFilesJob , FileArrayJob ] ) def mock_store_run ( request , mock_config ) : [EOL] store = MockStore ( mock_config ) [EOL] job_fixture = request . param [EOL] [EOL] remote_base = mock_config . get_basedir ( ) [EOL] job_dir = remote_base / [string] / [string] [EOL] work_dir = job_dir / [string] [EOL] work_dir . mkdir ( parents = True ) [EOL] [EOL] ( job_dir / [string] ) . write_text ( job_fixture . remote_output ( [string] . format ( work_dir ) ) ) [EOL] ( job_dir / [string] ) . write_text ( [string] ) [EOL] [EOL] for location , content in job_fixture . output_content . items ( ) : [EOL] ( work_dir / location ) . write_bytes ( content ) [EOL] [EOL] job = MockJob ( [string] , [string] , None , None ) [EOL] job . remote_workdir_path = str ( work_dir ) [EOL] job . remote_stdout_path = str ( job_dir / [string] ) [EOL] job . remote_stderr_path = str ( job_dir / [string] ) [EOL] job . state = JobState . STAGING_IN [EOL] [EOL] store . add_job ( job ) [EOL] return store , job_fixture [EOL] [EOL] [EOL] @ pytest . fixture def mock_store_run_and_updated ( mock_config , mock_store_run ) : [EOL] store , job_fixture = mock_store_run [EOL] [EOL] work_dir = mock_config . get_basedir ( ) / [string] / [string] / [string] [EOL] [EOL] for output_file in job_fixture . output_files : [EOL] output_path = work_dir / output_file . location [EOL] if output_file . location in job_fixture . output_content : [EOL] output_path . write_bytes ( job_fixture . output_content [ output_file . location ] ) [EOL] output_file . source = output_path [EOL] [EOL] job = store . get_job ( [string] ) [EOL] job . remote_output = job_fixture . remote_output ( [string] . format ( work_dir ) ) [EOL] [EOL] return store , job_fixture [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ PassJob , HostnameJob , WcJob , SlowJob , SecondaryFilesJob , FileArrayJob ] ) def mock_store_destaged ( request , mock_config ) : [EOL] store = MockStore ( mock_config ) [EOL] job_fixture = request . param [EOL] [EOL] work_dir = mock_config . get_basedir ( ) / [string] / [string] / [string] [EOL] work_dir . mkdir ( parents = True ) [EOL] [EOL] for output_file in job_fixture . output_files : [EOL] output_path = work_dir / output_file . location [EOL] if output_file . location in job_fixture . output_content : [EOL] output_path . write_bytes ( job_fixture . output_content [ output_file . location ] ) [EOL] output_file . source = output_path [EOL] [EOL] job = MockJob ( [string] , [string] , None , None ) [EOL] job . remote_output = job_fixture . remote_output ( [string] . format ( work_dir ) ) [EOL] [EOL] store . add_job ( job ) [EOL] [EOL] yield store , job_fixture [EOL] [EOL] for output_file in job_fixture . output_files : [EOL] output_file . source = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Union , List , Dict [EOL] import typing [EOL] import cerise [EOL] import pytest [EOL] [EOL] import cerise . back_end . cwl as cwl [EOL] from cerise . back_end . file import File [EOL] from cerise . job_store . job_state import JobState [EOL] [EOL] [EOL] def test_is_workflow ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . is_workflow ( wf ) [EOL] [EOL] [EOL] def test_is_not_workflow ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert not cwl . is_workflow ( wf ) [EOL] [EOL] [EOL] def test_is_workflow_invalid ( ) : [EOL] workflow = [string] [EOL] assert not cwl . is_workflow ( workflow ) [EOL] [EOL] [EOL] def test_is_workflow_required_attributes ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . is_workflow ( wf ) [EOL] [EOL] wf = bytes ( [string] , [string] ) [EOL] assert not cwl . is_workflow ( wf ) [EOL] [EOL] wf = bytes ( [string] , [string] ) [EOL] assert not cwl . is_workflow ( wf ) [EOL] [EOL] wf = bytes ( [string] , [string] ) [EOL] assert not cwl . is_workflow ( wf ) [EOL] [EOL] wf = bytes ( [string] , [string] ) [EOL] assert not cwl . is_workflow ( wf ) [EOL] [EOL] [EOL] def test_get_workflow_step_names_1 ( ) : [EOL] workflow = bytes ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] , [string] ) [EOL] [EOL] names = cwl . get_workflow_step_names ( workflow ) [EOL] assert len ( names ) == [number] [EOL] assert [string] in names [EOL] assert [string] in names [EOL] [EOL] [EOL] def test_get_workflow_step_names_2 ( ) : [EOL] workflow = bytes ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] , [string] ) [EOL] [EOL] names = cwl . get_workflow_step_names ( workflow ) [EOL] assert names == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_get_workflow_step_names_3 ( ) : [EOL] workflow = bytes ( [string] [string] [string] [string] [string] [string] [string] , [string] ) [EOL] [EOL] names = cwl . get_workflow_step_names ( workflow ) [EOL] assert names == [ ] [EOL] [EOL] [EOL] def test_get_workflow_step_names_4 ( ) : [EOL] workflow = bytes ( [string] [string] [string] [string] [string] [string] [string] , [string] ) [EOL] [EOL] with pytest . raises ( RuntimeError ) : [EOL] cwl . get_workflow_step_names ( workflow ) [EOL] [EOL] [EOL] def test_get_required_num_cores_coresmin ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_required_num_cores ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_required_num_cores_coresmax ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_required_num_cores ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_required_num_cores_both ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_required_num_cores ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_required_num_cores_default ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_required_num_cores ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_time_limit ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_time_limit ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_time_limit2 ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_time_limit ( wf ) == [number] [EOL] [EOL] [EOL] def test_no_time_limit ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] cwl . get_time_limit ( wf ) [EOL] [EOL] [EOL] def test_no_time_limit2 ( ) : [EOL] wf = bytes ( [string] , [string] ) [EOL] assert cwl . get_time_limit ( wf ) == [number] [EOL] [EOL] [EOL] def test_get_files_from_binding ( ) : [EOL] binding = { [string] : [number] , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] } ] } , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] } [EOL] files = cwl . get_files_from_binding ( binding ) [EOL] [EOL] assert len ( files ) == [number] [EOL] [EOL] for f in files : [EOL] assert isinstance ( f , File ) [EOL] [EOL] input_2 = [ f for f in files if f . name == [string] ] [ [number] ] [EOL] assert input_2 . index is None [EOL] assert input_2 . location == [string] [EOL] assert input_2 . source is None [EOL] assert input_2 . secondary_files == [ ] [EOL] [EOL] input_3 = [ f for f in files if f . name == [string] ] [ [number] ] [EOL] assert input_3 . index is None [EOL] assert input_3 . location == [string] [EOL] assert len ( input_3 . secondary_files ) == [number] [EOL] sf0 = input_3 . secondary_files [ [number] ] [EOL] assert sf0 . location == [string] [EOL] assert len ( sf0 . secondary_files ) == [number] [EOL] sf1 = sf0 . secondary_files [ [number] ] [EOL] assert sf1 . location == [string] [EOL] [EOL] input_4 = [ f for f in files if f . name == [string] and f . index == [number] ] [ [number] ] [EOL] assert input_4 . location == [string] [EOL] input_4 = [ f for f in files if f . name == [string] and f . index == [number] ] [ [number] ] [EOL] assert input_4 . location == [string] [EOL] [EOL] [EOL] def test_get_files_from_binding_directory_1 ( ) : [EOL] binding = { [string] : { [string] : [string] , [string] : [string] } } [EOL] [comment] [EOL] with pytest . raises ( RuntimeError ) : [EOL] cwl . get_files_from_binding ( binding ) [EOL] [EOL] [EOL] def test_get_files_from_binding_directory_2 ( ) : [EOL] binding = { [string] : { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] } } [EOL] [comment] [EOL] with pytest . raises ( RuntimeError ) : [EOL] cwl . get_files_from_binding ( binding ) [EOL] [EOL] [EOL] def test_get_cwltool_result ( ) : [EOL] result = ( [string] [string] [string] ) [EOL] assert cwl . get_cwltool_result ( result ) == JobState . PERMANENT_FAILURE [EOL] [EOL] result = ( [string] [string] [string] ) [EOL] assert cwl . get_cwltool_result ( result ) == JobState . PERMANENT_FAILURE [EOL] [EOL] result = ( [string] [string] [string] ) [EOL] assert cwl . get_cwltool_result ( result ) == JobState . TEMPORARY_FAILURE [EOL] [EOL] result = ( [string] [string] [string] ) [EOL] assert cwl . get_cwltool_result ( result ) == JobState . SUCCESS [EOL] [EOL] result = [string] [EOL] assert cwl . get_cwltool_result ( result ) == JobState . SYSTEM_ERROR [EOL] [EOL] result = [string] [EOL] assert cwl . get_cwltool_result ( result ) == JobState . SYSTEM_ERROR [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from connexion . decorators import produces [EOL] from six import iteritems [EOL] from front_end . models . base_model_ import Model [EOL] [EOL] [EOL] class JSONEncoder ( produces . JSONEncoder ) : [EOL] include_nulls = False [EOL] [EOL] def default ( self , o ) : [EOL] if isinstance ( o , Model ) : [EOL] dikt = { } [EOL] for attr , _ in iteritems ( o . swagger_types ) : [EOL] value = getattr ( o , attr ) [EOL] if value is None and not self . include_nulls : [EOL] continue [EOL] attr = o . attribute_map [ attr ] [EOL] dikt [ attr ] = value [EOL] return dikt [EOL] return produces . JSONEncoder . default ( self , o ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] [comment] [EOL] from . job import Job [EOL] from . job_description import JobDescription [EOL] from . workflow_binding import WorkflowBinding [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] from . base_model_ import Model [EOL] from datetime import date , datetime [EOL] from . . util import deserialize_model [EOL] [EOL] [EOL] class WorkflowBinding ( Model ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . swagger_types = { } [EOL] [EOL] self . attribute_map = { } [EOL] [EOL] [EOL] @ classmethod def from_dict ( cls , dikt ) : [EOL] [docstring] [EOL] return deserialize_model ( dikt , cls ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'WorkflowBinding'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] import builtins [EOL] import front_end [EOL] from __future__ import absolute_import [EOL] from front_end . models . workflow_binding import WorkflowBinding [EOL] from . base_model_ import Model [EOL] from datetime import datetime [EOL] from . . util import deserialize_model [EOL] [EOL] [EOL] class Job ( Model ) : [EOL] [docstring] [EOL] def __init__ ( self , id = None , name = None , workflow = None , input = None , state = None , output = None , log = None ) : [EOL] [docstring] [EOL] self . swagger_types = { [string] : str , [string] : str , [string] : str , [string] : WorkflowBinding , [string] : str , [string] : WorkflowBinding , [string] : str } [EOL] [EOL] self . attribute_map = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] self . _id = id [EOL] self . _name = name [EOL] self . _workflow = workflow [EOL] self . _input = input [EOL] self . _state = state [EOL] self . _output = output [EOL] self . _log = log [EOL] [EOL] @ classmethod def from_dict ( cls , dikt ) : [EOL] [docstring] [EOL] return deserialize_model ( dikt , cls ) [EOL] [EOL] @ property def id ( self ) : [EOL] [docstring] [EOL] return self . _id [EOL] [EOL] @ id . setter def id ( self , id ) : [EOL] [docstring] [EOL] if id is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _id = id [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , name ) : [EOL] [docstring] [EOL] if name is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _name = name [EOL] [EOL] @ property def workflow ( self ) : [EOL] [docstring] [EOL] return self . _workflow [EOL] [EOL] @ workflow . setter def workflow ( self , workflow ) : [EOL] [docstring] [EOL] if workflow is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _workflow = workflow [EOL] [EOL] @ property def input ( self ) : [EOL] [docstring] [EOL] return self . _input [EOL] [EOL] @ input . setter def input ( self , input ) : [EOL] [docstring] [EOL] if input is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _input = input [EOL] [EOL] @ property def state ( self ) : [EOL] [docstring] [EOL] return self . _state [EOL] [EOL] @ state . setter def state ( self , state ) : [EOL] [docstring] [EOL] allowed_values = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] if state not in allowed_values : [EOL] raise ValueError ( [string] . format ( state , allowed_values ) ) [EOL] [EOL] self . _state = state [EOL] [EOL] @ property def output ( self ) : [EOL] [docstring] [EOL] return self . _output [EOL] [EOL] @ output . setter def output ( self , output ) : [EOL] [docstring] [EOL] if output is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _output = output [EOL] [EOL] @ property def log ( self ) : [EOL] [docstring] [EOL] return self . _log [EOL] [EOL] @ log . setter def log ( self , log ) : [EOL] [docstring] [EOL] if log is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _log = log [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $'Job'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] import builtins [EOL] import front_end [EOL] from __future__ import absolute_import [EOL] from front_end . models . workflow_binding import WorkflowBinding [EOL] from . base_model_ import Model [EOL] from datetime import datetime [EOL] from . . util import deserialize_model [EOL] [EOL] [EOL] class JobDescription ( Model ) : [EOL] [docstring] [EOL] def __init__ ( self , name = None , workflow = None , input = None ) : [EOL] [docstring] [EOL] self . swagger_types = { [string] : str , [string] : str , [string] : WorkflowBinding } [EOL] [EOL] self . attribute_map = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] self . _name = name [EOL] self . _workflow = workflow [EOL] self . _input = input [EOL] [EOL] @ classmethod def from_dict ( cls , dikt ) : [EOL] [docstring] [EOL] return deserialize_model ( dikt , cls ) [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , name ) : [EOL] [docstring] [EOL] [EOL] self . _name = name [EOL] [EOL] @ property def workflow ( self ) : [EOL] [docstring] [EOL] return self . _workflow [EOL] [EOL] @ workflow . setter def workflow ( self , workflow ) : [EOL] [docstring] [EOL] if workflow is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . _workflow = workflow [EOL] [EOL] @ property def input ( self ) : [EOL] [docstring] [EOL] return self . _input [EOL] [EOL] @ input . setter def input ( self , input ) : [EOL] [docstring] [EOL] [EOL] self . _input = input [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 $'JobDescription'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0 0 0 0 0 0 0 0 0 $front_end.models.workflow_binding.WorkflowBinding$ 0 0
	0
	0
from typing import Union , Dict [EOL] import typing [EOL] import cerise [EOL] import logging [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] import cerise . config as config [EOL] [EOL] [EOL] @ pytest . fixture def config_0 ( ) : [EOL] config_0 = config . Config ( { } , { } ) [EOL] yield config_0 [EOL] config_0 . close_file_systems ( ) [EOL] [EOL] [EOL] @ pytest . fixture def config_1 ( ) : [EOL] test_config = { [string] : { [string] : [string] } , [string] : { [string] : [string] , [string] : [string] } , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [number] } } [EOL] [EOL] test_api_config = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [number] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] } } } [EOL] [EOL] config_1 = config . Config ( test_config , test_api_config ) [EOL] yield config_1 [EOL] [EOL] config_1 . close_file_systems ( ) [EOL] [EOL] [EOL] def test_create_config ( config_0 , config_1 ) : [EOL] pass [EOL] [EOL] [EOL] def test_get_service_host ( config_0 , config_1 ) : [EOL] assert config_0 . get_service_host ( ) == [string] [EOL] assert config_1 . get_service_host ( ) == [string] [EOL] [EOL] [EOL] def test_get_service_port ( config_0 , config_1 ) : [EOL] assert config_0 . get_service_port ( ) == [number] [EOL] assert config_1 . get_service_port ( ) == [number] [EOL] [EOL] [EOL] def test_get_username ( config_0 , config_1 ) : [EOL] assert config_0 . get_username ( [string] ) is None [EOL] assert config_0 . get_username ( [string] ) is None [EOL] assert config_1 . get_username ( [string] ) == [string] [EOL] assert config_1 . get_username ( [string] ) == [string] [EOL] [EOL] [EOL] def test_get_remote_cwl_runner ( config_0 , config_1 ) : [EOL] assert config_0 . get_remote_cwl_runner ( ) == [string] [EOL] assert config_1 . get_remote_cwl_runner ( ) == [string] [EOL] [EOL] [EOL] def test_get_basedir ( config_0 , config_1 ) : [EOL] assert str ( config_0 . get_basedir ( ) ) == [string] [EOL] assert str ( config_1 . get_basedir ( ) ) == [string] [EOL] [EOL] [EOL] def test_get_queue_name ( config_0 , config_1 ) : [EOL] assert config_0 . get_queue_name ( ) is None [EOL] assert config_1 . get_queue_name ( ) == [string] [EOL] [EOL] [EOL] def test_get_slots_per_node ( config_0 , config_1 ) : [EOL] assert config_0 . get_slots_per_node ( ) is [number] [EOL] assert config_1 . get_slots_per_node ( ) == [number] [EOL] [EOL] [EOL] def test_get_cores_per_node ( config_0 , config_1 ) : [EOL] assert config_0 . get_cores_per_node ( ) == [number] [EOL] assert config_1 . get_cores_per_node ( ) == [number] [EOL] [EOL] [EOL] def test_get_remote_refresh ( config_0 , config_1 ) : [EOL] assert config_0 . get_remote_refresh ( ) == [number] [EOL] assert config_1 . get_remote_refresh ( ) == [number] [EOL] [EOL] [EOL] def test_get_database_location ( config_0 , config_1 ) : [EOL] with pytest . raises ( KeyError ) : [EOL] config_0 . get_database_location ( ) [EOL] assert config_1 . get_database_location ( ) == [string] [EOL] [EOL] [EOL] def test_get_pid_file ( config_0 , config_1 ) : [EOL] assert config_0 . get_pid_file ( ) is None [EOL] assert config_1 . get_pid_file ( ) == [string] [EOL] [EOL] [EOL] def test_has_logging ( config_0 , config_1 ) : [EOL] assert not config_0 . has_logging ( ) [EOL] assert config_1 . has_logging ( ) [EOL] [EOL] [EOL] def test_get_log_file ( config_0 , config_1 ) : [EOL] assert config_1 . get_log_file ( ) == [string] [EOL] [EOL] [EOL] def test_get_log_level ( config_0 , config_1 ) : [EOL] assert config_0 . get_log_level ( ) == logging . INFO [EOL] assert config_1 . get_log_level ( ) == logging . DEBUG [EOL] os . environ [ [string] ] = [string] [EOL] assert config_0 . get_log_level ( ) == logging . WARNING [EOL] os . environ [ [string] ] = [string] [EOL] assert config_1 . get_log_level ( ) == logging . ERROR [EOL] del ( os . environ [ [string] ] ) [EOL] [EOL] [EOL] def test_get_store_location_service ( config_0 , config_1 ) : [EOL] with pytest . raises ( KeyError ) : [EOL] config_0 . get_store_location_service ( ) [EOL] assert str ( config_1 . get_store_location_service ( ) ) == [string] [EOL] [EOL] [EOL] def test_get_store_location_client ( config_0 , config_1 ) : [EOL] with pytest . raises ( KeyError ) : [EOL] config_0 . get_store_location_client ( ) [EOL] assert config_1 . get_store_location_client ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , List , Dict [EOL] import typing [EOL] import requests [EOL] import io [EOL] import pathlib [EOL] import io [EOL] import json [EOL] import tarfile [EOL] import time [EOL] from pathlib import Path [EOL] [EOL] import docker [EOL] import pytest [EOL] import requests [EOL] import webdav . client as wc [EOL] import webdav . urn as wu [EOL] from bravado . client import SwaggerClient [EOL] from bravado . exception import HTTPBadGateway , HTTPNotFound [EOL] from bravado_core . formatter import SwaggerFormat [EOL] [EOL] from cerise . test . fixture_jobs import ( BrokenJob , FileArrayJob , HostnameJob , InstallScriptTestJob , LongRunningJob , MissingInputJob , NoSuchStepJob , NoWorkflowJob , PartiallyFailingJob , SecondaryFilesJob , SlowJob , WcJob ) [EOL] [EOL] [EOL] def clear_old_container ( client , name ) : [EOL] [comment] [EOL] try : [EOL] old_container = client . containers . get ( name ) [EOL] old_container . stop ( ) [EOL] old_container . remove ( ) [EOL] except docker . errors . NotFound : [EOL] pass [EOL] [EOL] [EOL] def wait_for_container ( client , container ) : [EOL] while container . status == [string] : [EOL] time . sleep ( [number] ) [EOL] container . reload ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def clean_up_old_containers ( ) : [EOL] client = docker . from_env ( ) [EOL] [EOL] clear_old_container ( client , [string] ) [EOL] clear_old_container ( client , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def slurm_container ( clean_up_old_containers ) : [EOL] client = docker . from_env ( ) [EOL] [EOL] client . images . pull ( [string] ) [EOL] slurm_image = client . images . get ( [string] ) [EOL] slurm_container = client . containers . run ( slurm_image , name = [string] , hostname = [string] , detach = True ) [EOL] return slurm_container [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def cerise_service ( slurm_container ) : [EOL] client = docker . from_env ( ) [EOL] [EOL] client . images . build ( path = [string] , tag = [string] ) [EOL] service_image = client . images . build ( path = [string] , tag = [string] ) [EOL] [EOL] wait_for_container ( client , slurm_container ) [EOL] service_container = client . containers . run ( service_image , name = [string] , links = { [string] : [string] } , ports = { [string] : ( [string] , [number] ) } , detach = True ) [EOL] wait_for_container ( client , service_container ) [EOL] [EOL] yield service_container [EOL] [EOL] service_container . stop ( ) [EOL] [EOL] cur_dir = Path ( __file__ ) . parent [EOL] try : [EOL] stream , _ = service_container . get_archive ( [string] ) [EOL] buf = io . BytesIO ( stream . read ( ) ) [EOL] with tarfile . open ( fileobj = buf ) as archive : [EOL] for name in archive . getnames ( ) : [EOL] if name . startswith ( [string] ) : [EOL] with archive . extractfile ( name ) as cov_data : [EOL] external_path = cur_dir . parents [ [number] ] / name [ [number] : ] [EOL] with external_path . open ( [string] ) as cov_file : [EOL] cov_file . write ( cov_data . read ( ) ) [EOL] except docker . errors . NotFound : [EOL] print ( [string] ) [EOL] pass [EOL] [EOL] service_container . remove ( ) [EOL] slurm_container . stop ( ) [EOL] slurm_container . remove ( ) [EOL] [EOL] [EOL] @ pytest . fixture def webdav_client ( ) : [EOL] return wc . Client ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ pytest . fixture def cerise_client ( ) : [EOL] [comment] [EOL] [comment] [EOL] uri_format = SwaggerFormat ( description = [string] , format = [string] , to_wire = lambda uri : uri , to_python = lambda uri : uri , validate = lambda uri_string : True ) [EOL] [EOL] bravado_config = { [string] : True , [string] : [ uri_format ] } [EOL] [EOL] service = None [EOL] start_time = time . perf_counter ( ) [EOL] cur_time = start_time [EOL] while cur_time < start_time + [number] : [EOL] try : [EOL] service = SwaggerClient . from_url ( [string] , config = bravado_config ) [EOL] _ , response = service . jobs . get_jobs ( ) . result ( ) [EOL] if response . status_code == [number] : [EOL] break [EOL] except HTTPBadGateway : [EOL] pass [EOL] except requests . exceptions . ConnectionError : [EOL] pass [EOL] time . sleep ( [number] ) [EOL] cur_time = time . perf_counter ( ) [EOL] [EOL] if cur_time >= start_time + [number] : [EOL] print ( [string] ) [EOL] return service [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ HostnameJob , WcJob , SecondaryFilesJob , FileArrayJob ] ) def job_fixture_success ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . fixture ( params = [ MissingInputJob , BrokenJob , NoWorkflowJob , NoSuchStepJob , PartiallyFailingJob ] ) def job_fixture_permfail ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ pytest . fixture def debug_output ( request , tmpdir , cerise_client ) : [EOL] yield [EOL] [EOL] client = docker . from_env ( ) [EOL] service = client . containers . get ( [string] ) [EOL] slurm = client . containers . get ( [string] ) [EOL] [EOL] [comment] [EOL] archive_file = tmpdir / [string] [EOL] stream , _ = service . get_archive ( [string] ) [EOL] with archive_file . open ( [string] ) as f : [EOL] f . write ( stream . read ( ) ) [EOL] [EOL] [comment] [EOL] archive_file = tmpdir / [string] [EOL] stream , _ = service . get_archive ( [string] ) [EOL] with archive_file . open ( [string] ) as f : [EOL] f . write ( stream . read ( ) ) [EOL] [EOL] [comment] [EOL] archive_file = tmpdir / [string] [EOL] stream , _ = slurm . get_archive ( [string] ) [EOL] with archive_file . open ( [string] ) as f : [EOL] f . write ( stream . read ( ) ) [EOL] [EOL] [comment] [EOL] archive_file = tmpdir / [string] [EOL] stream , _ = slurm . get_archive ( [string] ) [EOL] with archive_file . open ( [string] ) as f : [EOL] f . write ( stream . read ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture def debug_print_log ( tmpdir , cerise_client ) : [EOL] yield [EOL] [EOL] [comment] [EOL] client = docker . from_env ( ) [EOL] service = client . containers . get ( [string] ) [EOL] archive_file = tmpdir / [string] [EOL] stream , _ = service . get_archive ( [string] ) [EOL] with archive_file . open ( [string] ) as f : [EOL] f . write ( stream . read ( ) ) [EOL] [EOL] with tarfile . open ( str ( archive_file ) ) as tf : [EOL] with tf . extractfile ( [string] ) as f : [EOL] print ( f . read ( ) . decode ( [string] ) ) [EOL] [EOL] [EOL] def _start_job ( cerise_client , webdav_client , job_fixture , test_name = None ) : [EOL] if test_name is None : [EOL] test_name = [string] + job_fixture . __name__ [EOL] [EOL] input_dir = [string] . format ( test_name ) [EOL] webdav_client . mkdir ( input_dir ) [EOL] [EOL] if job_fixture . workflow is not None : [EOL] workflow_file = input_dir + [string] [EOL] workflow_res = wc . Resource ( webdav_client , wu . Urn ( workflow_file ) ) [EOL] workflow_res . read_from ( io . BytesIO ( job_fixture . workflow ) ) [EOL] else : [EOL] workflow_file = [string] [EOL] [EOL] for input_file in job_fixture . local_input_files : [EOL] input_path = [string] . format ( input_dir , input_file . location ) [EOL] input_res = wc . Resource ( webdav_client , wu . Urn ( input_path ) ) [EOL] if input_file . location in job_fixture . input_content : [EOL] input_res . read_from ( io . BytesIO ( job_fixture . input_content [ input_file . location ] ) ) [EOL] [EOL] for secondary_file in input_file . secondary_files : [EOL] input_path = [string] . format ( input_dir , secondary_file . location ) [EOL] input_res = wc . Resource ( webdav_client , wu . Urn ( input_path ) ) [EOL] if secondary_file . location in job_fixture . input_content : [EOL] input_res . read_from ( io . BytesIO ( job_fixture . input_content [ secondary_file . location ] ) ) [EOL] [EOL] input_dir_url = [string] . format ( input_dir ) [EOL] input_text = job_fixture . local_input ( input_dir_url ) [EOL] input_data = json . loads ( input_text ) [EOL] [EOL] JobDescription = cerise_client . get_model ( [string] ) [EOL] job_desc = JobDescription ( name = test_name , workflow = [string] + workflow_file , input = input_data ) [EOL] [EOL] job , response = cerise_client . jobs . post_job ( body = job_desc ) . result ( ) [EOL] [EOL] assert response . status_code == [number] [EOL] return job [EOL] [EOL] [EOL] def _wait_for_state ( job_id , timeout , states , cerise_client ) : [EOL] if states == [string] : [EOL] states = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] if isinstance ( states , str ) : [EOL] states = [ states ] [EOL] [EOL] def get_state ( job_id ) : [EOL] [docstring] [EOL] try : [EOL] test_job , response = cerise_client . jobs . get_job_by_id ( jobId = job_id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] except HTTPNotFound : [EOL] return True , False , None [EOL] except requests . exceptions . ConnectionError : [EOL] return False , None , None [EOL] except HTTPBadGateway : [EOL] return False , None , None [EOL] return True , True , test_job [EOL] [EOL] connected , exists , test_job = get_state ( job_id ) [EOL] [EOL] start_time = time . perf_counter ( ) [EOL] while ( ( not connected or ( exists and test_job . state not in states ) ) [EOL] and time . perf_counter ( ) < start_time + timeout ) : [EOL] time . sleep ( [number] ) [EOL] connected , exists , test_job = get_state ( job_id ) [EOL] [EOL] assert time . perf_counter ( ) < start_time + timeout [EOL] assert ( [string] in states and not exists ) or test_job . state in states [EOL] return test_job [EOL] [EOL] [EOL] def _drop_connections ( slurm_container ) : [EOL] [comment] [EOL] [comment] [EOL] slurm_container . exec_run ( [string] , user = [string] ) [EOL] [EOL] [EOL] def _drop_network ( slurm_container ) : [EOL] [comment] [EOL] [comment] [EOL] slurm_container . exec_run ( [string] ) [EOL] _drop_connections ( slurm_container ) [EOL] [EOL] [EOL] def _restore_network ( slurm_container ) : [EOL] [comment] [EOL] slurm_container . exec_run ( [string] ) [EOL] [EOL] [EOL] def test_get_jobs ( cerise_service , cerise_client ) : [EOL] _ , response = cerise_client . jobs . get_jobs ( ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_api_install_script ( cerise_service , cerise_client , webdav_client ) : [EOL] job = _start_job ( cerise_client , webdav_client , InstallScriptTestJob ) [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] [EOL] output_path = [string] . format ( job . id ) [EOL] resource = wc . Resource ( webdav_client , wu . Urn ( output_path ) ) [EOL] output_buffer = io . BytesIO ( ) [EOL] resource . write_to ( output_buffer ) [EOL] assert output_buffer . getvalue ( ) == [string] [EOL] [EOL] [EOL] def test_run_job ( cerise_service , cerise_client , webdav_client , job_fixture_success ) : [EOL] job = _start_job ( cerise_client , webdav_client , job_fixture_success ) [EOL] assert job . state == [string] [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] [EOL] log , response = cerise_client . jobs . get_job_log_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert [string] in log [EOL] assert [string] in log [EOL] [EOL] [comment] [EOL] log_response = requests . get ( job . log ) [EOL] assert log_response . status_code == [number] [EOL] assert log_response . text == log [EOL] [EOL] [EOL] def test_run_broken_job ( cerise_service , cerise_client , webdav_client , job_fixture_permfail ) : [EOL] job = _start_job ( cerise_client , webdav_client , job_fixture_permfail ) [EOL] assert job . state == [string] [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] [EOL] if job_fixture_permfail == PartiallyFailingJob : [EOL] assert ( [string] not in job . output or job . output [ [string] ] is None ) [EOL] [EOL] out_data = requests . get ( job . output [ [string] ] [ [string] ] ) [EOL] assert out_data . status_code == [number] [EOL] assert out_data . text == [string] [EOL] [EOL] [EOL] def test_get_job_by_id ( cerise_service , cerise_client , webdav_client ) : [EOL] job1 = _start_job ( cerise_client , webdav_client , WcJob ) [EOL] job2 = _start_job ( cerise_client , webdav_client , SecondaryFilesJob ) [EOL] [EOL] job , response = cerise_client . jobs . get_job_by_id ( jobId = job1 . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert job . name == job1 . name [EOL] assert job . id == job1 . id [EOL] [EOL] job , response = cerise_client . jobs . get_job_by_id ( jobId = job2 . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert job . name == job2 . name [EOL] assert job . id == job2 . id [EOL] [EOL] with pytest . raises ( HTTPNotFound ) : [EOL] cerise_client . jobs . get_job_by_id ( jobId = [string] ) . result ( ) [EOL] [EOL] [EOL] def test_get_job_log_by_id ( cerise_service , cerise_client , webdav_client ) : [EOL] job = _start_job ( cerise_client , webdav_client , WcJob ) [EOL] [EOL] log , response = cerise_client . jobs . get_job_log_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert log != [string] [EOL] [EOL] with pytest . raises ( HTTPNotFound ) : [EOL] cerise_client . jobs . get_job_log_by_id ( jobId = [string] ) . result ( ) [EOL] [EOL] [EOL] def test_cancel_waiting_job ( cerise_service , cerise_client , webdav_client ) : [EOL] start_time = time . perf_counter ( ) [EOL] job = _start_job ( cerise_client , webdav_client , LongRunningJob , [string] ) [EOL] [EOL] assert job . state == [string] [EOL] _ , response = cerise_client . jobs . cancel_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] assert time . perf_counter ( ) < start_time + [number] [EOL] [EOL] [EOL] def test_cancel_running_job ( cerise_service , cerise_client , webdav_client ) : [EOL] start_time = time . perf_counter ( ) [EOL] job = _start_job ( cerise_client , webdav_client , LongRunningJob , [string] ) [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] _ , response = cerise_client . jobs . cancel_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] assert time . perf_counter ( ) < start_time + [number] [EOL] [EOL] [EOL] def test_delete_job ( cerise_service , cerise_client , webdav_client ) : [EOL] job = _start_job ( cerise_client , webdav_client , WcJob , [string] ) [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] _ , response = cerise_client . jobs . delete_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] [EOL] [EOL] def test_delete_running_job ( cerise_service , cerise_client , webdav_client ) : [EOL] job = _start_job ( cerise_client , webdav_client , LongRunningJob , [string] ) [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] _ , response = cerise_client . jobs . delete_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] [EOL] [EOL] def test_restart_service ( cerise_service , cerise_client , webdav_client , slurm_container ) : [EOL] job = _start_job ( cerise_client , webdav_client , SlowJob , [string] ) [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] cerise_service . stop ( ) [EOL] time . sleep ( [number] ) [EOL] cerise_service . start ( ) [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _drop_connections ( slurm_container ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] def test_dropped_ssh_connection ( cerise_service , cerise_client , webdav_client , slurm_container , debug_print_log ) : [EOL] job = _start_job ( cerise_client , webdav_client , SlowJob , [string] ) [EOL] print ( [string] . format ( job . id ) ) [EOL] _drop_connections ( slurm_container ) [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL] [EOL] [EOL] def test_no_resource_connection ( cerise_service , cerise_client , webdav_client , slurm_container , debug_print_log ) : [EOL] _drop_network ( slurm_container ) [EOL] time . sleep ( [number] ) [EOL] job = _start_job ( cerise_client , webdav_client , LongRunningJob , [string] ) [EOL] print ( [string] . format ( job . id ) ) [EOL] time . sleep ( [number] ) [EOL] job , response = cerise_client . jobs . get_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert job . state == [string] [EOL] [EOL] _restore_network ( slurm_container ) [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] [EOL] _drop_network ( slurm_container ) [EOL] [EOL] job , response = cerise_client . jobs . get_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] [EOL] assert job . state == [string] [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] job , response = cerise_client . jobs . get_job_by_id ( jobId = job . id ) . result ( ) [EOL] assert response . status_code == [number] [EOL] assert job . state == [string] [EOL] [EOL] _restore_network ( slurm_container ) [EOL] [EOL] job = _wait_for_state ( job . id , [number] , [string] , cerise_client ) [EOL] assert job . state == [string] [EOL]	
from typing import Optional , Union , List , Any [EOL] import typing [EOL] import builtins [EOL] import cerise [EOL] import logging [EOL] from time import asctime , localtime , time [EOL] from typing import Any , List , Optional , Union , cast [EOL] [EOL] from cerise . job_store . job_state import JobState [EOL] [EOL] [EOL] class SQLiteJob : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , store , job_id ) : [EOL] [docstring] [EOL] self . _store = store [EOL] [docstring] [EOL] [EOL] self . id = job_id [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ property def workflow ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ property def local_input ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] [comment] [EOL] @ property def state ( self ) : [EOL] [docstring] [EOL] state_str = cast ( str , self . _get_var ( [string] ) ) [EOL] return JobState [ state_str ] [EOL] [EOL] @ state . setter def state ( self , value ) : [EOL] self . _set_var ( [string] , value . name ) [EOL] [EOL] @ property def resolve_retry_count ( self ) : [EOL] [docstring] [EOL] return int ( self . _get_var ( [string] ) ) [EOL] [EOL] @ resolve_retry_count . setter def resolve_retry_count ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def please_delete ( self ) : [EOL] [docstring] [EOL] return bool ( self . _get_var ( [string] ) ) [EOL] [EOL] @ please_delete . setter def please_delete ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def log ( self ) : [EOL] [docstring] [EOL] result = [string] [EOL] cursor = self . _store . _thread_local_data . conn . execute ( [string] , ( self . id , ) ) [EOL] for row in cursor : [EOL] level_str = logging . getLevelName ( row [ [number] ] ) [EOL] time_str = asctime ( localtime ( row [ [number] ] ) ) [EOL] message = row [ [number] ] [EOL] result += [string] . format ( time_str , level_str , message ) [EOL] cursor . close ( ) [EOL] [EOL] return result [EOL] [EOL] @ property def remote_output ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_output . setter def remote_output ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_error ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_error . setter def remote_error ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] [comment] [EOL] @ property def workflow_content ( self ) : [EOL] [docstring] [EOL] return cast ( bytes , self . _get_var ( [string] ) ) [EOL] [EOL] @ workflow_content . setter def workflow_content ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def required_num_cores ( self ) : [EOL] [docstring] [EOL] return cast ( int , self . _get_var ( [string] ) ) [EOL] [EOL] @ required_num_cores . setter def required_num_cores ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def time_limit ( self ) : [EOL] [docstring] [EOL] return cast ( int , self . _get_var ( [string] ) ) [EOL] [EOL] @ time_limit . setter def time_limit ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] [comment] [EOL] @ property def remote_workdir_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_workdir_path . setter def remote_workdir_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_workflow_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_workflow_path . setter def remote_workflow_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_input_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_input_path . setter def remote_input_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_stdout_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_stdout_path . setter def remote_stdout_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_stderr_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_stderr_path . setter def remote_stderr_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_system_out_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_system_out_path . setter def remote_system_out_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] @ property def remote_system_err_path ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_system_err_path . setter def remote_system_err_path ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] [comment] [EOL] @ property def local_output ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ local_output . setter def local_output ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] [comment] [EOL] @ property def remote_job_id ( self ) : [EOL] [docstring] [EOL] return cast ( str , self . _get_var ( [string] ) ) [EOL] [EOL] @ remote_job_id . setter def remote_job_id ( self , value ) : [EOL] self . _set_var ( [string] , value ) [EOL] [EOL] def try_transition ( self , from_state , to_state ) : [EOL] [docstring] [EOL] res = self . _store . _thread_local_data . conn . execute ( [string] , ( to_state . name , self . id , from_state . name ) ) [EOL] self . _store . _thread_local_data . conn . commit ( ) [EOL] success = res . rowcount == [number] [EOL] res . close ( ) [EOL] return success [EOL] [EOL] def add_log ( self , level , message ) : [EOL] [docstring] [EOL] if not isinstance ( message , list ) : [EOL] message = [ message ] [EOL] cursor = self . _store . _thread_local_data . conn . cursor ( ) [EOL] for msg in message : [EOL] cursor . execute ( [string] [string] , ( self . id , level , time ( ) , msg ) ) [EOL] cursor . connection . commit ( ) [EOL] cursor . close ( ) [EOL] [EOL] def debug ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . DEBUG , message ) [EOL] [EOL] def info ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . INFO , message ) [EOL] [EOL] def warning ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . WARNING , message ) [EOL] [EOL] def error ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . ERROR , message ) [EOL] [EOL] def critical ( self , message ) : [EOL] [docstring] [EOL] self . add_log ( logging . CRITICAL , message ) [EOL] [EOL] def _get_var ( self , var ) : [EOL] [docstring] [EOL] cursor = self . _store . _thread_local_data . conn . execute ( [string] % var , ( self . id , ) ) [EOL] value = cursor . fetchone ( ) [ [number] ] [EOL] cursor . close ( ) [EOL] return value [EOL] [EOL] def _set_var ( self , var , value ) : [EOL] [docstring] [EOL] cursor = self . _store . _thread_local_data . conn . execute ( [string] % var , ( value , self . id ) ) [EOL] self . _store . _thread_local_data . conn . commit ( ) [EOL] cursor . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 0 0 0 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $cerise.job_store.job_state.JobState$ 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 0 0 $cerise.job_store.job_state.JobState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $None$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $typing.Union[builtins.str,builtins.int,builtins.bytes]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Union[builtins.str,builtins.int,builtins.bytes]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Union[builtins.str,builtins.int,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] import builtins [EOL] import cerise [EOL] from enum import Enum [EOL] [EOL] [EOL] class JobState ( Enum ) : [EOL] [docstring] [EOL] [comment] [EOL] SUBMITTED = [string] [EOL] STAGING_IN = [string] [EOL] WAITING = [string] [EOL] RUNNING = [string] [EOL] FINISHED = [string] [EOL] STAGING_OUT = [string] [EOL] SUCCESS = [string] [EOL] [EOL] [comment] [EOL] STAGING_IN_CR = [string] [EOL] WAITING_CR = [string] [EOL] RUNNING_CR = [string] [EOL] STAGING_OUT_CR = [string] [EOL] CANCELLED = [string] [EOL] [EOL] [comment] [EOL] SYSTEM_ERROR = [string] [EOL] TEMPORARY_FAILURE = [string] [EOL] PERMANENT_FAILURE = [string] [EOL] [EOL] @ staticmethod def is_final ( state ) : [EOL] [docstring] [EOL] return state in [ JobState . SUCCESS , JobState . CANCELLED , JobState . PERMANENT_FAILURE , JobState . TEMPORARY_FAILURE , JobState . SYSTEM_ERROR ] [EOL] [EOL] @ staticmethod def cancellation_active ( state ) : [EOL] [docstring] [EOL] return state in [ JobState . STAGING_IN_CR , JobState . WAITING_CR , JobState . RUNNING_CR , JobState . STAGING_OUT_CR ] [EOL] [EOL] @ staticmethod def is_remote ( state ) : [EOL] [docstring] [EOL] return state in [ JobState . WAITING , JobState . WAITING_CR , JobState . RUNNING , JobState . RUNNING_CR ] [EOL] [EOL] @ staticmethod def to_cwl_state_string ( state ) : [EOL] [docstring] [EOL] state_to_cwl_string = { JobState . SUBMITTED : [string] , JobState . STAGING_IN : [string] , JobState . WAITING : [string] , JobState . RUNNING : [string] , JobState . FINISHED : [string] , JobState . STAGING_OUT : [string] , JobState . SUCCESS : [string] , JobState . STAGING_IN_CR : [string] , JobState . WAITING_CR : [string] , JobState . RUNNING_CR : [string] , JobState . STAGING_OUT_CR : [string] , JobState . CANCELLED : [string] , JobState . SYSTEM_ERROR : [string] , JobState . TEMPORARY_FAILURE : [string] , JobState . PERMANENT_FAILURE : [string] , } [EOL] return state_to_cwl_string [ state ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $'JobState'$ 0 0 0 0 0 0 $'JobState'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $'JobState'$ 0 0 0 0 0 0 $'JobState'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $'JobState'$ 0 0 0 0 0 0 $'JobState'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $'JobState'$ 0 0 0 0 0 $typing.Dict[cerise.job_store.job_state.JobState,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[cerise.job_store.job_state.JobState,builtins.str]$ 0 $'JobState'$ 0 0
from cerise . job_store . job_state import JobState [EOL] [EOL] [EOL] def test_is_final ( ) : [EOL] assert not JobState . is_final ( JobState . SUBMITTED ) [EOL] assert JobState . is_final ( JobState . PERMANENT_FAILURE ) [EOL] [EOL] [EOL] def test_cancellation_active ( ) : [EOL] for state in JobState : [EOL] assert state . name . endswith ( [string] ) == JobState . cancellation_active ( state ) [EOL] [EOL] [EOL] def test_is_remote ( ) : [EOL] for state in JobState : [EOL] assert ( [string] in state . name or [string] in state . name ) == JobState . is_remote ( state ) [EOL] [EOL] [EOL] def test_to_cwl_state_string ( ) : [EOL] assert JobState . to_cwl_state_string ( JobState . SUBMITTED ) == [string] [EOL] assert JobState . to_cwl_state_string ( JobState . TEMPORARY_FAILURE ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import cerise [EOL] import logging [EOL] import os [EOL] import sqlite3 [EOL] [EOL] import pytest [EOL] [EOL] from cerise . job_store . job_state import JobState [EOL] from cerise . job_store . sqlite_job_store import JobNotFound , SQLiteJobStore [EOL] [EOL] [EOL] @ pytest . fixture def db_name ( request , tmpdir ) : [EOL] return os . path . join ( str ( tmpdir ) , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def empty_db ( request , db_name ) : [EOL] return { [string] : db_name , [string] : sqlite3 . connect ( db_name ) } [EOL] [EOL] [EOL] @ pytest . fixture def inited_db ( request , empty_db ) : [EOL] empty_db [ [string] ] . execute ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] empty_db [ [string] ] . execute ( [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] empty_db [ [string] ] . commit ( ) [EOL] return empty_db [EOL] [EOL] [EOL] @ pytest . fixture def workflow_content ( ) : [EOL] return ( [string] [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def local_input ( ) : [EOL] return ( [string] [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def onejob_db ( request , inited_db , workflow_content , local_input ) : [EOL] inited_db [ [string] ] . execute ( [string] , ( workflow_content , local_input , JobState . SUBMITTED . name ) ) [EOL] inited_db [ [string] ] . commit ( ) [EOL] return inited_db [EOL] [EOL] [EOL] @ pytest . fixture def empty_store ( request , empty_db ) : [EOL] return { [string] : empty_db [ [string] ] , [string] : SQLiteJobStore ( empty_db [ [string] ] ) } [EOL] [EOL] [EOL] @ pytest . fixture def onejob_store ( request , onejob_db ) : [EOL] return { [string] : onejob_db [ [string] ] , [string] : SQLiteJobStore ( onejob_db [ [string] ] ) } [EOL] [EOL] [EOL] @ pytest . fixture def job ( request , onejob_store ) : [EOL] with onejob_store [ [string] ] : [EOL] yield onejob_store [ [string] ] . get_job ( [string] ) [EOL] [EOL] [EOL] def test_create_store ( db_name ) : [EOL] SQLiteJobStore ( db_name ) [EOL] [EOL] [EOL] def test_open_existing_store ( empty_db ) : [EOL] SQLiteJobStore ( empty_db [ [string] ] ) [EOL] [EOL] [EOL] def test_open_existing_store_data ( onejob_db ) : [EOL] store = SQLiteJobStore ( onejob_db [ [string] ] ) [EOL] with store : [EOL] assert store . get_job ( [string] ) . name == [string] [EOL] [EOL] [EOL] def test_create_job ( onejob_store ) : [EOL] with onejob_store [ [string] ] : [EOL] onejob_store [ [string] ] . create_job ( [string] , [string] , [string] ) [EOL] res = onejob_store [ [string] ] . execute ( [string] ) [EOL] assert len ( res . fetchall ( ) ) == [number] [EOL] [EOL] [EOL] def test_list_jobs_empty ( empty_store ) : [EOL] with empty_store [ [string] ] : [EOL] joblist = empty_store [ [string] ] . list_jobs ( ) [EOL] assert len ( joblist ) == [number] [EOL] [EOL] [EOL] def test_list_jobs ( onejob_store ) : [EOL] with onejob_store [ [string] ] : [EOL] joblist = onejob_store [ [string] ] . list_jobs ( ) [EOL] assert len ( joblist ) == [number] [EOL] assert joblist [ [number] ] . name == [string] [EOL] [EOL] [EOL] def test_get_job ( onejob_store ) : [EOL] with onejob_store [ [string] ] : [EOL] job = onejob_store [ [string] ] . get_job ( [string] ) [EOL] assert job . name == [string] [EOL] [EOL] with pytest . raises ( JobNotFound ) : [EOL] onejob_store [ [string] ] . get_job ( [string] ) [EOL] [EOL] [EOL] def test_delete_job ( onejob_store ) : [EOL] with onejob_store [ [string] ] : [EOL] onejob_store [ [string] ] . delete_job ( [string] ) [EOL] res = onejob_store [ [string] ] . execute ( [string] ) [EOL] assert len ( res . fetchall ( ) ) == [number] [EOL] [EOL] [EOL] def test_reading_name ( job ) : [EOL] assert job . name == [string] [EOL] [EOL] [EOL] def test_reading_workflow ( job , workflow_content ) : [EOL] assert job . workflow == workflow_content [EOL] [EOL] [EOL] def test_reading_local_input ( job , local_input ) : [EOL] assert job . local_input == local_input [EOL] [EOL] [EOL] def test_reading_state ( job ) : [EOL] assert job . state == JobState . SUBMITTED [EOL] [EOL] [EOL] def test_setting_state ( job ) : [EOL] job . state = JobState . CANCELLED [EOL] assert job . state == JobState . CANCELLED [EOL] [EOL] [EOL] def test_reading_please_delete ( job ) : [EOL] assert job . please_delete is False [EOL] [EOL] [EOL] def test_setting_please_delete ( job ) : [EOL] job . please_delete = True [EOL] assert job . please_delete is True [EOL] [EOL] [EOL] def test_state_transitions ( job ) : [EOL] assert not job . try_transition ( JobState . STAGING_IN , JobState . STAGING_IN_CR ) [EOL] assert job . try_transition ( JobState . SUBMITTED , JobState . STAGING_IN ) [EOL] assert job . state == JobState . STAGING_IN [EOL] assert job . try_transition ( JobState . STAGING_IN , JobState . STAGING_IN_CR ) [EOL] assert job . state == JobState . STAGING_IN_CR [EOL] [EOL] [EOL] def test_set_get_log ( job ) : [EOL] job . debug ( [string] ) [EOL] job . info ( [string] ) [EOL] job . warning ( [string] ) [EOL] job . error ( [string] ) [EOL] job . critical ( [string] ) [EOL] job . add_log ( logging . WARNING , [string] ) [EOL] [EOL] lines = job . log . splitlines ( ) [EOL] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] assert [string] in lines [ [number] ] [EOL] [EOL] [EOL] def test_set_get_output ( job ) : [EOL] test_output = [string] [EOL] job . output = test_output [EOL] assert job . output == test_output [EOL] [EOL] [EOL] def test_set_get_workflow_content ( job , workflow_content ) : [EOL] job . workflow_content = workflow_content [EOL] assert job . workflow_content == workflow_content [EOL] [EOL] [EOL] def test_set_get_remote_workdir_path ( job ) : [EOL] job . remote_workdir_path = [string] [EOL] assert job . remote_workdir_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_workflow_path ( job ) : [EOL] job . remote_workflow_path = [string] [EOL] assert job . remote_workflow_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_input_path ( job ) : [EOL] job . remote_input_path = [string] [EOL] assert job . remote_input_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_stdout_path ( job ) : [EOL] job . remote_stdout_path = [string] [EOL] assert job . remote_stdout_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_stderr_path ( job ) : [EOL] job . remote_stderr_path = [string] [EOL] assert job . remote_stderr_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_system_out_path ( job ) : [EOL] job . remote_system_out_path = [string] [EOL] assert job . remote_system_out_path == [string] [EOL] [EOL] [EOL] def test_set_get_remote_system_err_path ( job ) : [EOL] job . remote_system_err_path = [string] [EOL] assert job . remote_system_err_path == [string] [EOL] [EOL] [EOL] def test_set_get_local_output ( job ) : [EOL] local_output = [string] [EOL] job . local_output = local_output [EOL] assert job . local_output == local_output [EOL] [EOL] [EOL] def test_set_get_remote_job_id ( job ) : [EOL] job . remote_job_id = [string] [EOL] assert job . remote_job_id == [string] [EOL]	
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , List , Dict [EOL] import typing [EOL] import io [EOL] import argparse [EOL] import urllib [EOL] import argparse [EOL] import glob [EOL] import json [EOL] import logging [EOL] import os [EOL] import shutil [EOL] import subprocess [EOL] import sys [EOL] import tempfile [EOL] [EOL] from urllib . parse import urlparse [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def setup_logging ( ) : [EOL] format = [string] [EOL] logging . basicConfig ( level = logging . INFO , format = format , stream = sys . stderr ) [EOL] [EOL] [EOL] def log ( * args , ** kwargs ) : [EOL] logging . info ( * args , ** kwargs ) [EOL] [EOL] def exit_validation ( message ) : [EOL] log ( message ) [EOL] log ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def exit_perm_fail ( message ) : [EOL] log ( message ) [EOL] log ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def exit_system_error ( message ) : [EOL] log ( message ) [EOL] log ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def exit_success ( ) : [EOL] log ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] def process_type ( process_dict ) : [EOL] [docstring] [EOL] if [string] not in process_dict : [EOL] exit_perm_fail ( [string] ) [EOL] if process_dict [ [string] ] not in [ [string] , [string] ] : [EOL] exit_perm_fail ( [string] . format ( process_dict [ [string] ] ) ) [EOL] return process_dict [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def normalise_parameter ( dict_of_dicts ) : [EOL] [docstring] [EOL] new_inputs = [ ] [EOL] for key , inner_dict in dict_of_dicts . items ( ) : [EOL] if not isinstance ( inner_dict , dict ) : [EOL] inner_dict = { [string] : inner_dict } [EOL] inner_dict [ [string] ] = key [EOL] new_inputs . append ( inner_dict ) [EOL] return new_inputs [EOL] [EOL] def normalise_process ( process_desc ) : [EOL] [docstring] [EOL] if not [string] in process_desc : [EOL] exit_validation ( [string] ) [EOL] [EOL] if isinstance ( process_desc [ [string] ] , dict ) : [EOL] process_desc [ [string] ] = normalise_parameter ( process_desc [ [string] ] ) [EOL] [EOL] if not [string] in process_desc : [EOL] exit_validation ( [string] ) [EOL] [EOL] if isinstance ( process_desc [ [string] ] , dict ) : [EOL] process_desc [ [string] ] = normalise_parameter ( process_desc [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] _workdirs = [ ] [EOL] def make_workdir ( ) : [EOL] [docstring] [EOL] workdir = tempfile . mkdtemp ( prefix = [string] ) [EOL] _workdirs . append ( workdir ) [EOL] return workdir [EOL] [EOL] def remove_workdirs ( ) : [EOL] [docstring] [EOL] for workdir in _workdirs : [EOL] shutil . rmtree ( workdir , ignore_errors = True ) [EOL] [EOL] def stage_input_file ( workdir_path , files ) : [EOL] [docstring] [EOL] if not isinstance ( files , list ) : [EOL] files = [ files ] [EOL] [EOL] for file_dict in files : [EOL] location = urlparse ( file_dict [ [string] ] ) [EOL] if [string] in file_dict : [EOL] dest_path = os . path . join ( workdir_path , file_dict [ [string] ] ) [EOL] else : [EOL] dest_path = os . path . join ( workdir_path , os . path . basename ( location . path ) ) [EOL] shutil . copy ( location . path , dest_path ) [EOL] file_dict [ [string] ] = dest_path [EOL] [EOL] for i , secondary_file in enumerate ( file_dict . get ( [string] , [ ] ) ) : [EOL] stage_input_file ( workdir_path , file_dict [ [string] ] [ i ] ) [EOL] [EOL] def stage_input ( workdir_path , input_dict ) : [EOL] [docstring] [EOL] for input_name , input_value in input_dict . items ( ) : [EOL] if not isinstance ( input_value , list ) : [EOL] input_value = [ input_value ] [EOL] for obj in input_value : [EOL] if isinstance ( obj , dict ) : [EOL] if [string] not in obj : [EOL] exit_perm_fail ( [string] + input_name ) [EOL] if obj [ [string] ] == [string] : [EOL] exit_system_error ( [string] [string] ) [EOL] if obj [ [string] ] == [string] : [EOL] stage_input_file ( workdir_path , obj ) [EOL] [EOL] def create_argument ( parameter , input_dict ) : [EOL] [docstring] [EOL] arg = [ ] [EOL] position = [number] [EOL] [EOL] if [string] not in parameter : [EOL] exit_perm_fail ( [string] ) [EOL] par_id = parameter [ [string] ] [EOL] [EOL] [comment] [EOL] par_type = parameter . get ( [string] ) [EOL] [EOL] is_optional = False [EOL] if par_type . endswith ( [string] ) : [EOL] is_optional = True [EOL] par_type = par_type [ [number] : - [number] ] [EOL] [EOL] is_array = False [EOL] if par_type . endswith ( [string] ) : [EOL] is_array = True [EOL] par_type = par_type [ [number] : - [number] ] [EOL] [EOL] [comment] [EOL] value = parameter . get ( [string] ) [EOL] if par_id in input_dict : [EOL] value = input_dict [ par_id ] [EOL] [EOL] [comment] [EOL] if not is_optional and value is None : [EOL] exit_perm_fail ( [string] . format ( str ( par_id ) ) ) [EOL] if is_array and not isinstance ( value , list ) : [EOL] exit_perm_fail ( [string] . format ( str ( par_id ) ) ) [EOL] [EOL] if [string] in parameter and value is not None : [EOL] binding = parameter [ [string] ] [EOL] [EOL] [comment] [EOL] separate = [string] not in binding or binding [ [string] ] [EOL] item_separator = binding . get ( [string] ) [EOL] prefix = binding . get ( [string] ) [EOL] [EOL] [comment] [EOL] if is_array : [EOL] if par_type == [string] : [EOL] value = list ( map ( lambda x : x [ [string] ] , value ) ) [EOL] else : [EOL] value = list ( map ( str , value ) ) [EOL] [EOL] if item_separator : [EOL] value = [ item_separator . join ( value ) ] [EOL] else : [EOL] if par_type == [string] : [EOL] value = [ value [ [string] ] ] [EOL] else : [EOL] value = [ value ] [EOL] [EOL] for val in value : [EOL] if prefix : [EOL] if separate : [EOL] arg . append ( prefix ) [EOL] arg . append ( str ( val ) ) [EOL] else : [EOL] arg . append ( prefix + str ( val ) ) [EOL] else : [EOL] arg . append ( str ( val ) ) [EOL] [EOL] [comment] [EOL] if [string] in binding : [EOL] position = int ( binding [ [string] ] ) [EOL] [EOL] return position , arg [EOL] [EOL] def create_command_line ( clt_desc , input_dict ) : [EOL] [docstring] [EOL] args = [ ] [EOL] if [string] in clt_desc : [EOL] for argument in clt_desc [ [string] ] : [EOL] if not isinstance ( argument , str ) : [EOL] exit_system_error ( [string] [string] ) [EOL] args . append ( ( - [number] , clt_desc [ [string] ] ) ) [EOL] [EOL] for parameter in clt_desc [ [string] ] : [EOL] args . append ( create_argument ( parameter , input_dict ) ) [EOL] [EOL] args . sort ( key = lambda arg : arg [ [number] ] ) [EOL] [EOL] [comment] [EOL] command_line = [ ] [EOL] for _ , items in args : [EOL] if items is not None : [EOL] command_line . extend ( items ) [EOL] return command_line [EOL] [EOL] def execute_clt ( workdir_path , in_out , base_command , command_line ) : [EOL] [docstring] [EOL] if base_command is not None : [EOL] command_line . insert ( [number] , base_command ) [EOL] [EOL] stdin_file = subprocess . DEVNULL [EOL] if in_out [ [string] ] is not None : [EOL] stdin_path = os . path . join ( workdir_path , in_out [ [string] ] ) [EOL] stdin_file = open ( stdin_path , [string] ) [EOL] stdout_file = subprocess . DEVNULL [EOL] if in_out [ [string] ] is not None : [EOL] stdout_path = os . path . join ( workdir_path , in_out [ [string] ] ) [EOL] log ( [string] + stdout_path ) [EOL] stdout_file = open ( stdout_path , [string] ) [EOL] stderr_file = subprocess . DEVNULL [EOL] if in_out [ [string] ] is not None : [EOL] stderr_path = os . path . join ( workdir_path , in_out [ [string] ] ) [EOL] stderr_file = open ( stderr_path , [string] ) [EOL] [EOL] log ( [string] + str ( command_line ) ) [EOL] result = subprocess . call ( command_line , cwd = workdir_path , stdin = stdin_file , stdout = stdout_file , stderr = stderr_file ) [EOL] [EOL] log ( [string] ) [EOL] log ( [string] + str ( result ) ) [EOL] return result [EOL] [EOL] def collect_output ( workdir_path , outputs ) : [EOL] [docstring] [EOL] output_dict = { } [EOL] for output_parameter in outputs : [EOL] if [string] not in output_parameter : [EOL] exit_validation ( [string] ) [EOL] if [string] not in output_parameter : [EOL] exit_validation ( [string] ) [EOL] if output_parameter [ [string] ] != [string] : [EOL] exit_system_error ( [string] ) [EOL] if [string] in output_parameter : [EOL] binding = output_parameter [ [string] ] [EOL] paths = [ ] [EOL] if [string] in binding : [EOL] paths = glob . glob ( os . path . join ( workdir_path , binding [ [string] ] ) ) [EOL] log ( [string] + str ( paths ) ) [EOL] if paths != [ ] : [EOL] output_dict [ output_parameter [ [string] ] ] = { [string] : [string] , [string] : [string] + paths [ [number] ] } [EOL] return output_dict [EOL] [EOL] def destage_output ( output_dict ) : [EOL] [docstring] [EOL] for _ , desc in output_dict . items ( ) : [EOL] if isinstance ( desc , dict ) : [EOL] if desc [ [string] ] == [string] : [EOL] location = urlparse ( desc [ [string] ] ) [EOL] dest_path = os . path . join ( os . getcwd ( ) , os . path . basename ( location . path ) ) [EOL] shutil . move ( location . path , dest_path ) [EOL] desc [ [string] ] = [string] + dest_path [EOL] [EOL] return output_dict [EOL] [EOL] def run_command_line_tool ( workdir_path , clt_dict , input_dict ) : [EOL] [docstring] [EOL] log ( [string] . format ( json . dumps ( clt_dict , indent = [number] ) , json . dumps ( input_dict , indent = [number] ) ) ) [EOL] has_error = False [EOL] normalise_process ( clt_dict ) [EOL] stage_input ( workdir_path , input_dict ) [EOL] command_line = create_command_line ( clt_dict , input_dict ) [EOL] base_command = clt_dict . get ( [string] ) [EOL] in_out = { [string] : clt_dict . get ( [string] ) , [string] : clt_dict . get ( [string] ) , [string] : clt_dict . get ( [string] ) } [EOL] result = execute_clt ( workdir_path , in_out , base_command , command_line ) [EOL] if result != [number] : [EOL] has_error = True [EOL] output_dict = collect_output ( workdir_path , clt_dict [ [string] ] ) [EOL] return has_error , output_dict [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def normalise_workflow ( workflow_dict ) : [EOL] [docstring] [EOL] normalise_process ( workflow_dict ) [EOL] if not [string] in workflow_dict : [EOL] exit_perm_fail ( [string] ) [EOL] [EOL] if isinstance ( workflow_dict [ [string] ] , dict ) : [EOL] new_steps = [ ] [EOL] for step_id , step in workflow_dict [ [string] ] . items ( ) : [EOL] step [ [string] ] = step_id [EOL] new_steps . append ( step ) [EOL] workflow_dict [ [string] ] = new_steps [EOL] [EOL] for step in workflow_dict [ [string] ] : [EOL] if [string] in step : [EOL] if isinstance ( step [ [string] ] , dict ) : [EOL] new_in = [ ] [EOL] for key , value in step [ [string] ] . items ( ) : [EOL] if isinstance ( value , str ) : [EOL] new_in . append ( { [string] : key , [string] : value } ) [EOL] elif isinstance ( value , dict ) : [EOL] value [ [string] ] = key [EOL] new_in . append ( value ) [EOL] step [ [string] ] = new_in [EOL] [EOL] if [string] in step : [EOL] if not isinstance ( step [ [string] ] , list ) : [EOL] exit_perm_fail ( [string] ) [EOL] for i , output in enumerate ( step [ [string] ] ) : [EOL] if isinstance ( output , str ) : [EOL] step [ [string] ] [ i ] = { [string] : output } [EOL] [EOL] def has_unexecuted_steps ( workflow_dict ) : [EOL] [docstring] [EOL] for step in workflow_dict [ [string] ] : [EOL] if not [string] in step : [EOL] log ( [string] + step [ [string] ] ) [EOL] return True [EOL] return False [EOL] [EOL] def resolve_output_reference ( reference , workflow_dict , input_dict ) : [EOL] [docstring] [EOL] log ( [string] + str ( reference ) ) [EOL] source = reference . split ( sep = [string] ) [EOL] if len ( source ) == [number] : [EOL] if reference not in input_dict : [EOL] input_def = [ d for d in workflow_dict [ [string] ] if d [ [string] ] == reference ] [EOL] if input_def : [EOL] input_def = input_def [ [number] ] [EOL] if [string] in input_def : [EOL] return input_def [ [string] ] , True [EOL] else : [EOL] if [string] in input_def and input_def [ [string] ] . endswith ( [string] ) : [EOL] return None , True [EOL] else : [EOL] exit_perm_fail ( [string] . format ( reference ) ) [EOL] else : [EOL] exit_perm_fail ( [string] . format ( reference ) ) [EOL] exit_perm_fail ( [string] + reference ) [EOL] return input_dict [ reference ] , True [EOL] [EOL] if len ( source ) != [number] : [EOL] exit_perm_fail ( [string] ) [EOL] [EOL] step_id = source [ [number] ] [EOL] output_id = source [ [number] ] [EOL] for step in workflow_dict [ [string] ] : [EOL] if [string] in step and step [ [string] ] == step_id : [EOL] if [string] not in step : [EOL] return None , False [EOL] if not [string] in step : [EOL] exit_perm_fail ( [string] . format ( step_id ) ) [EOL] for output in step [ [string] ] : [EOL] if output [ [string] ] == output_id : [EOL] return output [ [string] ] , True [EOL] [EOL] def resolve_step_inputs ( step , workflow_dict , input_dict ) : [EOL] [docstring] [EOL] log ( [string] . format ( step [ [string] ] ) ) [EOL] all_bound = True [EOL] if [string] not in step : [EOL] step [ [string] ] = { } [EOL] [EOL] if [string] in step : [EOL] for step_input in step [ [string] ] : [EOL] value , ready = None , False [EOL] if [string] in step_input : [EOL] value , ready = step_input [ [string] ] , True [EOL] if [string] in step_input : [EOL] value , ready = resolve_output_reference ( step_input [ [string] ] , workflow_dict , input_dict ) [EOL] [EOL] log ( [string] . format ( step [ [string] ] , step_input [ [string] ] , json . dumps ( value , indent = [number] ) ) ) [EOL] [EOL] step [ [string] ] [ step_input [ [string] ] ] = value [EOL] if not ready : [EOL] all_bound = False [EOL] [EOL] return all_bound [EOL] [EOL] def execute_workflow_step ( step ) : [EOL] [docstring] [EOL] if [string] in step : [EOL] log ( [string] . format ( step [ [string] ] , step [ [string] ] ) ) [EOL] run_dict = json . load ( open ( step [ [string] ] , [string] ) ) [EOL] workdir_path = make_workdir ( ) [EOL] input_dict = step [ [string] ] [EOL] if process_type ( run_dict ) == [string] : [EOL] has_error , output_dict = run_workflow ( workdir_path , run_dict , input_dict ) [EOL] elif process_type ( run_dict ) == [string] : [EOL] has_error , output_dict = run_command_line_tool ( workdir_path , run_dict , input_dict ) [EOL] [EOL] log ( [string] . format ( json . dumps ( output_dict , indent = [number] ) ) ) [EOL] [EOL] if [string] in step : [EOL] for output in step [ [string] ] : [EOL] output [ [string] ] = output_dict . get ( output [ [string] ] ) [EOL] [EOL] step [ [string] ] = True [EOL] return has_error [EOL] [EOL] [EOL] def get_workflow_outputs ( workflow_dict , input_dict ) : [EOL] [docstring] [EOL] output_dict = { } [EOL] for output_parameter in workflow_dict [ [string] ] : [EOL] if [string] in output_parameter : [EOL] value , found = resolve_output_reference ( output_parameter [ [string] ] , workflow_dict , input_dict ) [EOL] if found : [EOL] output_dict [ output_parameter [ [string] ] ] = value [EOL] return output_dict [EOL] [EOL] def run_workflow ( workdir_path , workflow_dict , input_dict ) : [EOL] [docstring] [EOL] normalise_workflow ( workflow_dict ) [EOL] log ( [string] + json . dumps ( workflow_dict , indent = [number] ) ) [EOL] log ( [string] + json . dumps ( input_dict , indent = [number] ) ) [EOL] has_error = False [EOL] while has_unexecuted_steps ( workflow_dict ) and not has_error : [EOL] for step in workflow_dict [ [string] ] : [EOL] if not step . get ( [string] , False ) : [EOL] log ( [string] . format ( step [ [string] ] ) ) [EOL] all_bound = resolve_step_inputs ( step , workflow_dict , input_dict ) [EOL] if all_bound : [EOL] step_error = execute_workflow_step ( step ) [EOL] if step_error : [EOL] has_error = True [EOL] break [EOL] [EOL] return has_error , get_workflow_outputs ( workflow_dict , input_dict ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] setup_logging ( ) [EOL] [EOL] log ( [string] ) [EOL] log ( [string] ) [EOL] log ( [string] ) [EOL] [EOL] log ( [string] + args . cwlfile ) [EOL] input_dict = json . load ( open ( args . inputfile , [string] ) ) [EOL] cwl_dict = json . load ( open ( args . cwlfile , [string] ) ) [EOL] workdir_path = make_workdir ( ) [EOL] [EOL] proc_type = process_type ( cwl_dict ) [EOL] [EOL] if proc_type == [string] : [EOL] has_error , output_dict = run_command_line_tool ( workdir_path , cwl_dict , input_dict ) [EOL] elif proc_type == [string] : [EOL] has_error , output_dict = run_workflow ( workdir_path , cwl_dict , input_dict ) [EOL] [EOL] output_dict = destage_output ( output_dict ) [EOL] print ( json . dumps ( output_dict ) ) [EOL] [EOL] if has_error : [EOL] exit_perm_fail ( [string] ) [EOL] [EOL] remove_workdirs ( ) [EOL] [EOL] log ( [string] ) [EOL] log ( [string] ) [EOL] log ( [string] ) [EOL] exit_success ( ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any