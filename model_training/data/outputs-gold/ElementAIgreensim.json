from typing import Set , Iterator [EOL] import builtins [EOL] import typing [EOL] import greensim [EOL] from enum import Enum [EOL] from typing import Iterator , Set [EOL] [EOL] [EOL] [comment] [EOL] class Tags ( Enum ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class TaggedObject : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] _tag_set = set ( ) [EOL] [EOL] def __init__ ( self , * tag_set ) : [EOL] self . _tag_set = set ( tag_set ) [EOL] [EOL] def iter_tags ( self ) : [EOL] return iter ( self . _tag_set ) [EOL] [EOL] def has_tag ( self , needle ) : [EOL] [docstring] [EOL] return needle in self . _tag_set [EOL] [EOL] def tag_with ( self , * new_tags ) : [EOL] [docstring] [EOL] self . _tag_set |= set ( new_tags ) [EOL] [EOL] def untag ( self , * drop_tags ) : [EOL] [docstring] [EOL] self . _tag_set -= set ( drop_tags ) [EOL] [EOL] def clear_tags ( self ) : [EOL] [docstring] [EOL] self . _tag_set . clear ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[Tags]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 $Tags$ 0 0 0 0 0 $typing.Set[greensim.tags.Tags]$ 0 0 0 $Tags$ 0 0 0 0 $typing.Iterator[Tags]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $Tags$ 0 0 0 0 0 0 $Tags$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 $Tags$ 0 0 0 0 0 0 0 0 0 0 0 $Tags$ 0 0 0 0 $None$ 0 0 0 0 $Tags$ 0 0 0 0 0 0 0 0 0 0 0 $Tags$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import logging [EOL] import logging [EOL] [EOL] from greensim import now , local [EOL] [EOL] [EOL] class Filter ( logging . Filter ) : [EOL] [docstring] [EOL] [EOL] def filter ( self , record ) : [EOL] try : [EOL] sim_time = now ( ) [EOL] sim_process = local . name [EOL] except TypeError : [EOL] sim_time = - [number] [EOL] sim_process = [string] [EOL] [EOL] for attr , value in [ ( [string] , sim_time ) , ( [string] , sim_process ) ] : [EOL] if not hasattr ( record , attr ) : [EOL] setattr ( record , attr , value ) [EOL] [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Callable , IO , Sequence , Union , Any , Tuple , Type [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] from math import ceil , inf [EOL] import sys [EOL] import time [EOL] from typing import Callable , Sequence , Tuple , IO , Optional , Union [EOL] [EOL] from greensim import now , advance , stop [EOL] [EOL] [EOL] MetricProgress = Sequence [ float ] [EOL] MeasureProgress = Callable [ [ ] , MetricProgress ] [EOL] MeasureComparison = Sequence [ Tuple [ float , float ] ] [EOL] CaptureProgress = Callable [ [ float , float , MeasureComparison ] , None ] [EOL] [EOL] [EOL] def combine ( * measures ) : [EOL] [docstring] [EOL] return sum ( ( list ( measure ( ) ) for measure in measures ) , [ ] ) [EOL] [EOL] [EOL] def sim_time ( ) : [EOL] return [ now ( ) ] [EOL] [EOL] [EOL] def capture_print ( file_dest_maybe = None ) : [EOL] [docstring] [EOL] file_dest = file_dest_maybe or sys . stderr [EOL] [EOL] def _print_progress ( progress_min , rt_remaining , _mc ) : [EOL] nonlocal file_dest [EOL] percent_progress = progress_min * [number] [EOL] time_remaining , unit = _display_time ( rt_remaining ) [EOL] print ( f" [string] { percent_progress : [string] } [string] { time_remaining } [string] { unit } [string] " , end = [string] , file = file_dest ) [EOL] [EOL] return _print_progress [EOL] [EOL] [EOL] def now_real ( ) : [EOL] return time . time ( ) [EOL] [EOL] [EOL] def track_progress ( measure , target , interval_check , capture_maybe = None ) : [EOL] [docstring] [EOL] [EOL] def measure_to_target ( ) : [EOL] return list ( zip ( measure ( ) , target ) ) [EOL] [EOL] def is_finished ( progress ) : [EOL] return all ( p >= t for p , t in progress ) [EOL] [EOL] capture = capture_maybe or capture_print ( ) [EOL] rt_started = now_real ( ) [EOL] while True : [EOL] advance ( interval_check ) [EOL] [EOL] rt_elapsed = now_real ( ) - rt_started [EOL] progress = measure_to_target ( ) [EOL] ratio_progress_min = min ( m / t for m , t in progress ) [EOL] if ratio_progress_min == [number] : [EOL] rt_total_projected = inf [EOL] else : [EOL] rt_total_projected = rt_elapsed / ratio_progress_min [EOL] capture ( ratio_progress_min , rt_total_projected - rt_elapsed , progress ) [EOL] [EOL] if is_finished ( progress ) : [EOL] stop ( ) [EOL] break [EOL] [EOL] [EOL] def _divide_round ( dividend , divider ) : [EOL] return int ( ceil ( float ( dividend ) / divider ) ) [EOL] [EOL] [EOL] def _display_time ( seconds ) : [EOL] if seconds == inf : [EOL] delay = [number] [EOL] unit = [string] [EOL] else : [EOL] delay = _divide_round ( seconds , [number] ) [EOL] unit = [string] [EOL] [EOL] if delay > [number] : [EOL] delay = _divide_round ( delay , [number] ) [EOL] unit = [string] [EOL] [EOL] if delay > [number] : [EOL] delay = _divide_round ( delay , [number] ) [EOL] unit = [string] [EOL] [EOL] if delay > [number] : [EOL] delay = _divide_round ( delay , [number] ) [EOL] unit = [string] [EOL] [EOL] if delay > [number] : [EOL] unit += [string] [EOL] [EOL] return delay , unit [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $MetricProgress$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $MeasureComparison$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import random [EOL] import typing [EOL] import greensim [EOL] from random import Random [EOL] [EOL] from greensim import Simulator , advance , add , Resource , now [EOL] from greensim . progress import track_progress [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] rng = Random ( ) [EOL] sim = Simulator ( ) [EOL] resource = Resource ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] RATE_ARRIVAL = [number] / [number] [EOL] RATE_SERVICE = [number] / [number] [EOL] [EOL] [comment] [EOL] num_served = [number] [EOL] NUM_CLIENTS_STOP = [number] [EOL] [EOL] [comment] [EOL] times_service = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def arrival ( ) : [EOL] while True : [EOL] advance ( rng . expovariate ( RATE_ARRIVAL ) ) [EOL] add ( service ) [EOL] [EOL] [EOL] sim . add ( arrival ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def service ( ) : [EOL] global num_served [EOL] time_start = now ( ) [EOL] with resource . using ( ) : [EOL] advance ( rng . expovariate ( RATE_SERVICE ) ) [EOL] times_service . append ( now ( ) - time_start ) [EOL] num_served += [number] [EOL] [EOL] [EOL] [comment] [EOL] sim . add ( track_progress , lambda : [ num_served ] , [ NUM_CLIENTS_STOP ] , [number] * NUM_CLIENTS_STOP ) [EOL] sim . run ( ) [EOL] [EOL] print ( ) [EOL] print ( f" [string] { sum ( times_service ) / len ( times_service ) : [string] } [string] " ) [EOL] print ( f" [string] { [number] / ( RATE_SERVICE - RATE_ARRIVAL ) : [string] } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 0 0 $greensim.Simulator$ 0 0 0 0 0 $greensim.Resource$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $greensim.Simulator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $greensim.Resource$ 0 0 0 0 0 0 0 0 $random.Random$ 0 0 0 $builtins.float$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $greensim.Simulator$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 $greensim.Simulator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import tests [EOL] import typing [EOL] import greensim [EOL] import logging [EOL] import logging [EOL] from math import inf [EOL] from typing import cast [EOL] [EOL] import pytest [EOL] [EOL] from greensim import Simulator , advance , pause , local , add , Process , Queue , Signal , Resource , enable_logging , disable_logging , Interrupt [EOL] from greensim . logging import Filter [EOL] [EOL] [EOL] class HandlerTestsGeneral ( logging . Handler ) : [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( logging . DEBUG ) [EOL] self . log = [ ] [EOL] [EOL] def handle ( self , record ) : [EOL] self . log . append ( ( record . levelno , record . sim_time , record . sim_process , record . msg ) ) [EOL] [EOL] [EOL] @ pytest . fixture def logger ( ) : [EOL] disable_logging ( ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] for h in [ handler for handler in logger . handlers if isinstance ( handler , HandlerTestsGeneral ) ] : [EOL] logger . removeHandler ( h ) [EOL] logger . addHandler ( HandlerTestsGeneral ( ) ) [EOL] [EOL] if len ( logger . filters ) == [number] : [EOL] logger . addFilter ( Filter ( ) ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] [EOL] return logger [EOL] [EOL] [EOL] def test_sanity_logging ( logger ) : [EOL] logger . debug ( [string] ) [EOL] logger . info ( [string] ) [EOL] logger . warning ( [string] ) [EOL] logger . error ( [string] ) [EOL] logger . critical ( [string] ) [EOL] assert [ ( level , - [number] , [string] , msg ) for level , msg in [ ( logging . DEBUG , [string] ) , ( logging . INFO , [string] ) , ( logging . WARNING , [string] ) , ( logging . ERROR , [string] ) , ( logging . CRITICAL , [string] ) ] ] == logger . handlers [ [number] ] . log [EOL] [EOL] [EOL] def test_log_additional_fields ( logger ) : [EOL] def ordeal ( queue , signal , resource ) : [EOL] logger . debug ( [string] ) [EOL] advance ( [number] ) [EOL] logger . info ( [string] ) [EOL] pause ( ) [EOL] logger . warning ( [string] ) [EOL] queue . join ( ) [EOL] logger . error ( [string] , extra = dict ( sim_process = [string] ) ) [EOL] signal . wait ( ) [EOL] logger . critical ( [string] ) [EOL] resource . take ( ) [EOL] advance ( [number] ) [EOL] logger . critical ( [string] , extra = dict ( sim_time = [number] ) ) [EOL] resource . release ( ) [EOL] [EOL] def do_resume ( proc_ordeal ) : [EOL] advance ( [number] ) [EOL] proc_ordeal . resume ( ) [EOL] [EOL] def do_pop ( queue ) : [EOL] advance ( [number] ) [EOL] queue . pop ( ) [EOL] [EOL] def do_open ( signal ) : [EOL] advance ( [number] ) [EOL] signal . turn_on ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] queue = Queue ( ) [EOL] signal = Signal ( ) . turn_off ( ) [EOL] resource = Resource ( [number] ) [EOL] proc_ordeal = sim . add ( ordeal , queue , signal , resource ) [EOL] name_ordeal = proc_ordeal . local . name [EOL] sim . add ( do_resume , proc_ordeal ) [EOL] sim . add ( do_pop , queue ) [EOL] sim . add ( do_open , signal ) [EOL] sim . run ( ) [EOL] [EOL] assert [ ( logging . DEBUG , [number] , name_ordeal , [string] ) , ( logging . INFO , [number] , name_ordeal , [string] ) , ( logging . WARNING , [number] , name_ordeal , [string] ) , ( logging . ERROR , [number] , [string] , [string] ) , ( logging . CRITICAL , [number] , name_ordeal , [string] ) , ( logging . CRITICAL , [number] , name_ordeal , [string] ) ] == logger . handlers [ [number] ] . log [EOL] [EOL] [EOL] class HandlerTestsAutoLog ( HandlerTestsGeneral ) : [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . log = [ ] [EOL] [EOL] def handle ( self , record ) : [EOL] self . log . append ( ( record . levelno , record . sim_time , record . sim_process , record . sim_object , record . sim_name , record . sim_event , record . sim_params ) ) [EOL] [EOL] [EOL] @ pytest . fixture def auto_logger ( ) : [EOL] enable_logging ( ) [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . setLevel ( logging . INFO ) [EOL] [EOL] handlers_test = [ h for h in logger . handlers if isinstance ( h , HandlerTestsAutoLog ) ] [EOL] if len ( handlers_test ) == [number] : [EOL] logger . addHandler ( HandlerTestsAutoLog ( ) ) [EOL] else : [EOL] for h in handlers_test : [EOL] cast ( HandlerTestsAutoLog , h ) . log . clear ( ) [EOL] [EOL] return logger [EOL] [EOL] [EOL] def check_log ( auto_logger , * entries ) : [EOL] for handler in auto_logger . handlers : [EOL] if isinstance ( handler , HandlerTestsAutoLog ) : [EOL] assert list ( entries ) == handler . log [EOL] break [EOL] [EOL] [EOL] def test_auto_log_process ( auto_logger ) : [EOL] proc_resumer = None [EOL] auto_logger . setLevel ( logging . DEBUG ) [EOL] [EOL] def resumer ( i_am_process ) : [EOL] advance ( [number] ) [EOL] i_am_process . resume ( ) [EOL] [EOL] def proc ( ) : [EOL] nonlocal proc_resumer [EOL] local . name = [string] [EOL] advance ( [number] ) [EOL] proc_resumer = add ( resumer , Process . current ( ) ) [EOL] pause ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] proc_proc = sim . add ( proc ) [EOL] name_proc_orig = proc_proc . local . name [EOL] sim . run ( ) [EOL] [EOL] name_proc = proc_proc . local . name [EOL] check_log ( auto_logger , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( fn = proc , args = ( ) , kwargs = { } ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = inf ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . DEBUG , [number] , name_proc_orig , [string] , name_proc_orig , [string] , dict ( new = [string] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , dict ( delay = [number] ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , sim . name , [string] , dict ( fn = resumer , args = ( proc_proc , ) , kwargs = { } ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_resumer . switch , args = ( proc_proc , ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , { } ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , proc_resumer . local . name , [string] , proc_resumer . local . name , [string] , dict ( delay = [number] ) ) , ( logging . DEBUG , [number] , proc_resumer . local . name , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_resumer . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , proc_resumer . local . name , [string] , name_proc , [string] , { } ) , ( logging . DEBUG , [number] , proc_resumer . local . name , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , proc_resumer . local . name , [string] , proc_resumer . local . name , [string] , { } ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , { } ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) ) [EOL] [EOL] [EOL] def test_auto_log_interrupt ( auto_logger ) : [EOL] proc_interrupter = None [EOL] auto_logger . setLevel ( logging . DEBUG ) [EOL] [EOL] def interrupter ( main ) : [EOL] advance ( [number] ) [EOL] main . interrupt ( ) [EOL] [EOL] def proc ( ) : [EOL] nonlocal proc_interrupter [EOL] local . name = [string] [EOL] proc_interrupter = add ( interrupter , Process . current ( ) ) [EOL] advance ( [number] ) [EOL] advance ( [number] ) [EOL] [EOL] sim = Simulator ( ) [EOL] proc_proc = sim . add ( proc ) [EOL] name_proc_orig = proc_proc . local . name [EOL] sim . run ( ) [EOL] [EOL] name_proc = proc_proc . local . name [EOL] check_log ( auto_logger , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( fn = proc , args = ( ) , kwargs = { } ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = inf ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . DEBUG , [number] , name_proc_orig , [string] , name_proc_orig , [string] , dict ( new = [string] ) ) , ( logging . INFO , [number] , name_proc , [string] , sim . name , [string] , dict ( fn = interrupter , args = ( proc_proc , ) , kwargs = { } ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_interrupter . switch , args = ( proc_proc , ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , dict ( delay = [number] ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , proc_interrupter . local . name , [string] , proc_interrupter . local . name , [string] , dict ( delay = [number] ) ) , ( logging . DEBUG , [number] , proc_interrupter . local . name , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_interrupter . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , dict ( delay = [number] ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . switch , args = ( ) , kwargs = { } , counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . INFO , [number] , proc_interrupter . local . name , [string] , name_proc , [string] , dict ( type = [string] ) ) , ( logging . DEBUG , [number] , proc_interrupter . local . name , [string] , sim . name , [string] , dict ( delay = [number] , fn = proc_proc . throw , args = ( Interrupt ( ) , ) , kwargs = { } , counter = [number] ) ) , ( logging . INFO , [number] , proc_interrupter . local . name , [string] , proc_interrupter . local . name , [string] , { } ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . DEBUG , [number] , name_proc , [string] , sim . name , [string] , dict ( id = [number] ) ) , ( logging . INFO , [number] , name_proc , [string] , name_proc , [string] , { } ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , dict ( counter = [number] ) ) , ( logging . DEBUG , [number] , [string] , [string] , sim . name , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) ) [EOL] [EOL] [EOL] def test_auto_log_queue ( auto_logger ) : [EOL] def proc ( q ) : [EOL] local . name = [string] [EOL] q . join ( ) [EOL] advance ( [number] ) [EOL] [EOL] sim = Simulator ( ) [EOL] queue = Queue ( name = [string] ) [EOL] sim . add ( proc , queue ) [EOL] sim . run ( ) [EOL] queue . pop ( ) [EOL] sim . run ( [number] ) [EOL] [EOL] check_log ( auto_logger , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( fn = proc , args = ( queue , ) , kwargs = { } ) ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = inf ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , dict ( process = [string] ) ) , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) ) [EOL] [EOL] [EOL] def test_auto_log_signal ( auto_logger ) : [EOL] def proc ( sig ) : [EOL] local . name = [string] [EOL] sig . wait ( ) [EOL] advance ( [number] ) [EOL] sig . wait ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] signal = Signal ( name = [string] ) . turn_off ( ) [EOL] sim . add ( proc , signal ) [EOL] sim . run ( ) [EOL] signal . turn_on ( ) [EOL] sim . run ( ) [EOL] [EOL] check_log ( auto_logger , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( fn = proc , args = ( signal , ) , kwargs = { } ) ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = inf ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , dict ( process = [string] ) ) , ( logging . INFO , - [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , dict ( duration = inf ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , sim . name , [string] , { } ) ) [EOL] [EOL] [EOL] def test_auto_log_resource ( auto_logger ) : [EOL] def proc ( res , name , delay_before , delay_with ) : [EOL] local . name = name [EOL] advance ( delay_before ) [EOL] with res . using ( ) : [EOL] advance ( delay_with ) [EOL] [EOL] resource = Resource ( [number] , name = [string] ) [EOL] sim = Simulator ( name = [string] ) [EOL] sim . add ( proc , resource , [string] , [number] , [number] ) [EOL] sim . add ( proc , resource , [string] , [number] , [number] ) [EOL] sim . run ( ) [EOL] [EOL] check_log ( auto_logger , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( fn = proc , args = ( resource , [string] , [number] , [number] ) , kwargs = { } ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( fn = proc , args = ( resource , [string] , [number] , [number] ) , kwargs = { } ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( duration = inf ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , keeping = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( process = [string] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , keeping = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) ) [EOL] [EOL] [EOL] def test_auto_log_resource_take_again ( auto_logger ) : [EOL] def process ( res ) : [EOL] local . name = [string] [EOL] res . take ( [number] ) [EOL] advance ( [number] ) [EOL] res . take ( [number] ) [EOL] advance ( [number] ) [EOL] res . release ( [number] ) [EOL] [EOL] sim = Simulator ( name = [string] ) [EOL] resource = Resource ( [number] , name = [string] ) [EOL] sim . add ( process , resource ) [EOL] sim . run ( ) [EOL] [EOL] check_log ( auto_logger , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( fn = process , args = ( resource , ) , kwargs = { } ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( duration = inf ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , free = [number] ) ) , ( logging . WARNING , [number] , [string] , [string] , [string] , [string] , dict ( already = [number] , more = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( delay = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , dict ( num_instances = [number] , keeping = [number] , free = [number] ) ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) , ( logging . INFO , [number] , [string] , [string] , [string] , [string] , { } ) ) [EOL]	
from typing import Any , Set [EOL] import builtins [EOL] import typing [EOL] import greensim [EOL] from greensim . tags import Tags , TaggedObject [EOL] [EOL] [EOL] class TestTag ( Tags ) : [EOL] [comment] [EOL] __test__ = False [EOL] ALICE = [number] [EOL] BOB = [string] [EOL] [comment] [EOL] CANADA = { } [EOL] [EOL] [EOL] def test_empty_init ( ) : [EOL] tagged = TaggedObject ( ) [EOL] assert tagged . _tag_set == set ( ) [EOL] [EOL] [EOL] def test_tag_set_init ( ) : [EOL] tagged = TaggedObject ( TestTag . ALICE ) [EOL] assert tagged . has_tag ( TestTag . ALICE ) [EOL] assert tagged . _tag_set == set ( [ TestTag . ALICE ] ) [EOL] [EOL] [EOL] def test_tag_set_iterator ( ) : [EOL] tags = set ( [ TestTag . ALICE , TestTag . BOB , TestTag . CANADA ] ) [EOL] tagged = TaggedObject ( * tags ) [EOL] collect = set ( ) [EOL] for tag in tagged . iter_tags ( ) : [EOL] assert tag in tags [EOL] collect |= set ( [ tag ] ) [EOL] assert collect == tags [EOL] [EOL] [EOL] def test_tag_set_match ( ) : [EOL] tagged = TaggedObject ( ) [EOL] tagged . tag_with ( TestTag . ALICE ) [EOL] assert tagged . has_tag ( TestTag . ALICE ) [EOL] assert not tagged . has_tag ( TestTag . BOB ) [EOL] [EOL] [EOL] def test_tag_apply ( ) : [EOL] tagged = TaggedObject ( TestTag . BOB ) [EOL] tagged . tag_with ( TestTag . ALICE ) [EOL] assert tagged . has_tag ( TestTag . ALICE ) [EOL] assert tagged . _tag_set == set ( [ TestTag . ALICE , TestTag . BOB ] ) [EOL] [EOL] [EOL] def test_tag_set_apply ( ) : [EOL] tagged = TaggedObject ( TestTag . ALICE ) [EOL] tagged . tag_with ( TestTag . ALICE , TestTag . BOB , TestTag . CANADA ) [EOL] assert tagged . _tag_set == set ( [ TestTag . ALICE , TestTag . BOB , TestTag . CANADA ] ) [EOL] [EOL] [EOL] def test_tag_remove ( ) : [EOL] tagged = TaggedObject ( TestTag . ALICE , TestTag . BOB ) [EOL] tagged . untag ( TestTag . ALICE ) [EOL] assert not tagged . has_tag ( TestTag . ALICE ) [EOL] assert tagged . _tag_set == set ( [ TestTag . BOB ] ) [EOL] [EOL] [EOL] def test_tag_set_remove ( ) : [EOL] tagged = TaggedObject ( TestTag . ALICE , TestTag . BOB , TestTag . CANADA ) [EOL] tagged . untag ( TestTag . ALICE , TestTag . CANADA ) [EOL] assert tagged . _tag_set == set ( [ TestTag . BOB ] ) [EOL] [EOL] [EOL] def test_tag_set_clear ( ) : [EOL] tagged = TaggedObject ( TestTag . ALICE , TestTag . BOB ) [EOL] tagged . clear_tags ( ) [EOL] assert tagged . _tag_set == set ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , List , Any , Tuple , Type [EOL] import tests [EOL] import builtins [EOL] import typing [EOL] import greensim [EOL] import gc [EOL] from itertools import repeat [EOL] import re [EOL] from typing import List , Callable [EOL] [EOL] import greenlet [EOL] import pytest [EOL] [EOL] from greensim import GREENSIM_TAG_ATTRIBUTE , Simulator , Process , Named , now , advance , pause , add , happens , local , Queue , Signal , select , Resource , add_in , add_at , tagged , Interrupt , _Event , Timeout [EOL] from greensim . tags import Tags [EOL] [EOL] [EOL] class TestTag ( Tags ) : [EOL] [comment] [EOL] __test__ = False [EOL] ALICE = [number] [EOL] BOB = [string] [EOL] [EOL] [EOL] def test_event_order ( ) : [EOL] assert _Event ( [number] , [number] , lambda : None ) < _Event ( [number] , [number] , lambda : None ) [EOL] assert _Event ( [number] , [number] , lambda : None ) < _Event ( [number] , [number] , lambda : None ) [EOL] [EOL] [EOL] def test_event_order_misuse ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] _Event ( [number] , [number] , lambda : None ) < [number] [EOL] [EOL] [EOL] def test_nonevent_inequality ( ) : [EOL] assert _Event ( [number] , [number] , lambda : None ) != [number] [EOL] [EOL] [EOL] def test_schedule_none ( ) : [EOL] sim = Simulator ( ) [EOL] assert [number] == sim . now ( ) [EOL] [EOL] [EOL] def append ( n , ll ) : [EOL] ll . append ( n ) [EOL] [EOL] [EOL] def test_schedule_1_event ( ) : [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] sim . _schedule ( [number] , append , [number] , ll ) [EOL] sim . run ( ) [EOL] assert ll == [ [number] ] [EOL] [EOL] [EOL] def test_schedule_multiple_events ( ) : [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] sim . _schedule ( [number] , append , [number] , ll ) [EOL] sim . _schedule ( [number] , append , [number] , ll ) [EOL] sim . _schedule ( [number] , append , [number] , ll ) [EOL] sim . run ( ) [EOL] assert ll == [ [number] , [number] , [number] ] [EOL] assert sim . now ( ) == [number] [EOL] [EOL] [EOL] def test_schedule_negative ( ) : [EOL] sim = Simulator ( ) [EOL] ll = [ ] [EOL] with pytest . raises ( ValueError ) : [EOL] sim . _schedule ( - [number] , append , [number] , ll ) [EOL] [EOL] [EOL] def test_schedule_recurring ( ) : [EOL] ll = [ [number] ] [EOL] [EOL] def _append ( ) : [EOL] if sim . now ( ) <= [number] : [EOL] ll . append ( ll [ - [number] ] + [number] ) [EOL] sim . _schedule ( [number] , _append ) [EOL] else : [EOL] sim . stop ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . _schedule ( [number] , _append ) [EOL] sim . run ( ) [EOL] assert sim . now ( ) == [number] [EOL] assert ll == list ( range ( [number] ) ) [EOL] [EOL] [EOL] @ pytest . fixture def sim_cancellable ( ) : [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] id_event = [ ] [EOL] for n in [ [number] , [number] , [number] ] : [EOL] id_event . append ( sim . _schedule ( n , append , n , ll ) ) [EOL] return ll , sim , id_event [EOL] [EOL] [EOL] def test_schedule_cancel ( sim_cancellable ) : [EOL] ll , sim , id_event = sim_cancellable [EOL] sim . _cancel ( id_event [ [number] ] ) [EOL] sim . run ( ) [EOL] assert ll == [ [number] , [number] ] [EOL] assert sim . now ( ) == [number] [EOL] [EOL] [EOL] def test_schedule_cancel_last ( sim_cancellable ) : [EOL] ll , sim , id_event = sim_cancellable [EOL] sim . _cancel ( id_event [ [number] ] ) [EOL] sim . run ( ) [EOL] assert ll == [ [number] , [number] ] [EOL] assert sim . now ( ) == [number] [EOL] [EOL] [EOL] def test_process_advance ( ) : [EOL] def process ( ll ) : [EOL] ll . append ( now ( ) ) [EOL] advance ( [number] ) [EOL] ll . append ( now ( ) ) [EOL] advance ( [number] ) [EOL] ll . append ( now ( ) ) [EOL] [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] sim . add ( process , ll ) [EOL] sim . run ( ) [EOL] assert ll == [ [number] , [number] , [number] ] [EOL] [EOL] [EOL] def test_simulator_step ( ) : [EOL] def process ( ll ) : [EOL] ll . append ( now ( ) ) [EOL] advance ( [number] ) [EOL] ll . append ( now ( ) ) [EOL] advance ( [number] ) [EOL] ll . append ( now ( ) ) [EOL] [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] sim . add ( process , ll ) [EOL] sim . step ( ) [EOL] assert ll == pytest . approx ( [ [number] ] ) [EOL] sim . step ( ) [EOL] assert ll == pytest . approx ( [ [number] , [number] ] ) [EOL] sim . step ( ) [EOL] assert ll == pytest . approx ( [ [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_process_multiple ( ) : [EOL] def tick ( name , period , log ) : [EOL] while True : [EOL] advance ( period ) [EOL] log . append ( ( int ( now ( ) ) , name ) ) [EOL] [EOL] sim = Simulator ( ) [EOL] log = [ ] [EOL] sim . add ( tick , [string] , [number] , log ) [EOL] sim . add ( tick , [string] , [number] , log ) [EOL] sim . add ( tick , [string] , [number] , log ) [EOL] sim . run ( [number] ) [EOL] expectation = [ ( n , [string] ) for n in range ( [number] , [number] , [number] ) ] [EOL] expectation += [ ( n , [string] ) for n in range ( [number] , [number] , [number] ) ] [EOL] expectation += [ ( n , [string] ) for n in range ( [number] , [number] , [number] ) ] [EOL] assert sorted ( expectation , key = lambda p : p [ [number] ] ) == log [EOL] [EOL] [EOL] def test_interleaved_sequence ( ) : [EOL] def process ( name , results , delay_start ) : [EOL] advance ( delay_start ) [EOL] for n in range ( [number] ) : [EOL] results . append ( ( now ( ) , name , n ) ) [EOL] advance ( [number] ) [EOL] [EOL] sim = Simulator ( ) [EOL] results_p1 = [ ] [EOL] sim . add ( process , [string] , results_p1 , [number] ) [EOL] results_p2 = [ ] [EOL] sim . add ( process , [string] , results_p2 , [number] ) [EOL] [EOL] sim . run ( ) [EOL] assert [ ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) ] == results_p1 [EOL] assert [ ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) , ( [number] , [string] , [number] ) ] == results_p2 [EOL] assert not sim . is_running [EOL] [EOL] [EOL] def test_schedule_functions ( ) : [EOL] def f1 ( sim , results ) : [EOL] res = f" [string] { sim . now ( ) }" [EOL] results . append ( res ) [EOL] [EOL] def f2 ( sim , results ) : [EOL] res = f" [string] { sim . now ( ) }" [EOL] results . append ( res ) [EOL] [EOL] sim = Simulator ( ) [EOL] results = [ ] [EOL] sim . _schedule ( [number] , f1 , sim , results ) [EOL] sim . _schedule ( [number] , f2 , sim , results ) [EOL] sim . _schedule ( [number] , f1 , sim , results ) [EOL] sim . run ( ) [EOL] assert [ [string] , [string] , [string] ] == results [EOL] [EOL] [EOL] def run_test_process_add ( launcher ) : [EOL] when_last = [number] [EOL] [EOL] def last_proc ( ) : [EOL] nonlocal when_last [EOL] when_last = now ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( launcher , last_proc ) [EOL] sim . run ( ) [EOL] assert pytest . approx ( [number] ) == when_last [EOL] [EOL] [EOL] def test_process_add_in ( ) : [EOL] def launch ( last ) : [EOL] advance ( [number] ) [EOL] add_in ( [number] , last ) [EOL] [EOL] run_test_process_add ( launch ) [EOL] [EOL] [EOL] def test_process_add_at ( ) : [EOL] def launch ( last ) : [EOL] advance ( [number] ) [EOL] add_at ( [number] , last ) [EOL] [EOL] run_test_process_add ( launch ) [EOL] [EOL] [EOL] def test_process_add_at_past ( ) : [EOL] def launch ( last ) : [EOL] advance ( [number] ) [EOL] add_at ( [number] , last ) [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] run_test_process_add ( launch ) [EOL] [EOL] [EOL] def test_process_pause_resume ( ) : [EOL] counter = [number] [EOL] [EOL] def pausing ( ) : [EOL] nonlocal counter [EOL] advance ( [number] ) [EOL] counter += [number] [EOL] pause ( ) [EOL] advance ( [number] ) [EOL] counter += [number] [EOL] [EOL] sim = Simulator ( ) [EOL] process = sim . add ( pausing ) [EOL] sim . run ( ) [EOL] assert sim . now ( ) == pytest . approx ( [number] ) [EOL] assert counter == [number] [EOL] sim . run ( ) [EOL] assert sim . now ( ) == pytest . approx ( [number] ) [EOL] assert counter == [number] [EOL] process . resume ( ) [EOL] sim . run ( ) [EOL] assert sim . now ( ) == pytest . approx ( [number] ) [EOL] assert counter == [number] [EOL] [EOL] [EOL] def do_test_with_interrupter ( main , ll_expected , now_expected ) : [EOL] def interrupter ( main ) : [EOL] advance ( [number] ) [EOL] main . interrupt ( ) [EOL] [EOL] ll = [ ] [EOL] sim = Simulator ( ) [EOL] proc_main = sim . add ( main , ll ) [EOL] sim . add ( interrupter , proc_main ) [EOL] sim . run ( ) [EOL] assert ll == pytest . approx ( ll_expected ) [EOL] assert sim . now ( ) == pytest . approx ( now_expected ) [EOL] [EOL] [EOL] def test_process_interrupt_advancing ( ) : [EOL] def main ( ll ) : [EOL] for n in range ( [number] ) : [EOL] t = n * [number] [EOL] ll . append ( t ) [EOL] advance ( t ) [EOL] [EOL] do_test_with_interrupter ( main , [ [number] , [number] , [number] ] , [number] ) [EOL] [EOL] [EOL] def test_process_interrupt_paused ( ) : [EOL] def main ( ll ) : [EOL] ll . append ( [number] ) [EOL] pause ( ) [EOL] ll . append ( [number] ) [EOL] [EOL] do_test_with_interrupter ( main , [ [number] ] , [number] ) [EOL] [EOL] [EOL] def test_process_interrupt_catch ( ) : [EOL] def main ( ll ) : [EOL] try : [EOL] ll . append ( [number] ) [EOL] advance ( [number] ) [EOL] ll . append ( [number] ) [EOL] except Interrupt : [EOL] ll . append ( [number] ) [EOL] advance ( [number] ) [EOL] ll . append ( [number] ) [EOL] [EOL] do_test_with_interrupter ( main , [ [number] , [number] , [number] ] , [number] ) [EOL] [EOL] [EOL] def test_getting_current_process ( ) : [EOL] def proc ( ) : [EOL] assert isinstance ( Process . current ( ) , Process ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( proc ) [EOL] sim . run ( ) [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] proc ( ) [EOL] [EOL] [EOL] def test_probing_current_process ( ) : [EOL] def proc ( ) : [EOL] assert Process . current_exists ( ) [EOL] [EOL] assert not Process . current_exists ( ) [EOL] sim = Simulator ( ) [EOL] sim . add ( proc ) [EOL] sim . run ( ) [EOL] assert not Process . current_exists ( ) [EOL] [EOL] [EOL] def test_process_adding_process ( ) : [EOL] log = [ ] [EOL] [EOL] def proc ( delay ) : [EOL] advance ( delay ) [EOL] log . append ( now ( ) ) [EOL] add ( proc , delay * [number] ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( proc , [number] ) [EOL] sim . run ( [number] ) [EOL] assert [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] == pytest . approx ( log ) [EOL] [EOL] [EOL] def test_happens ( ) : [EOL] sim = Simulator ( ) [EOL] log = [ ] [EOL] [EOL] @ happens ( repeat ( [number] , [number] ) ) def process ( the_log ) : [EOL] the_log . append ( now ( ) ) [EOL] [EOL] sim . add ( process , log ) [EOL] sim . run ( ) [EOL] assert pytest . approx ( [ [number] , [number] , [number] , [number] , [number] ] ) == log [EOL] [EOL] [EOL] def test_happens_named ( ) : [EOL] @ happens ( [ [number] ] , name = [string] ) def process ( ) : [EOL] advance ( [number] ) [EOL] [EOL] sim = Simulator ( ) [EOL] proc = sim . add ( process ) [EOL] sim . run ( ) [EOL] assert proc . local . name == [string] [EOL] assert [number] == pytest . approx ( sim . now ( ) ) [EOL] [EOL] [EOL] def sim_add_run ( proc ) : [EOL] sim = Simulator ( ) [EOL] sim . add ( proc ) [EOL] sim . run ( ) [EOL] [EOL] [EOL] def test_local_set_get ( ) : [EOL] def fn ( ) : [EOL] assert local . param == [string] [EOL] assert local . parent . child == [string] [EOL] [EOL] def proc ( ) : [EOL] local . param = [string] [EOL] local . parent . child = [string] [EOL] fn ( ) [EOL] [EOL] sim_add_run ( proc ) [EOL] [EOL] [EOL] def test_local_get_unknown ( ) : [EOL] def proc ( ) : [EOL] assert local . unknown is not None [EOL] local . unknown = [number] [EOL] assert local . unknown == [number] [EOL] [EOL] sim_add_run ( proc ) [EOL] [EOL] [EOL] def test_local_replace_hierarchy ( ) : [EOL] def proc ( ) : [EOL] local . a . a = [number] [EOL] local . a . b = [number] [EOL] local . b . a = [number] [EOL] local . b . b = [number] [EOL] local . a = [number] [EOL] with pytest . raises ( AttributeError ) : [EOL] assert local . a . a == [number] [EOL] assert local . b . a == [number] [EOL] assert local . b . b == [number] [EOL] assert local . a == [number] [EOL] [EOL] sim_add_run ( proc ) [EOL] [EOL] [EOL] def is_uuid ( s ) : [EOL] return re . match ( [string] , s ) is not None [EOL] [EOL] [EOL] def test_process_has_default_name ( ) : [EOL] def proc ( ) : [EOL] assert isinstance ( local . name , str ) [EOL] assert is_uuid ( local . name ) [EOL] [EOL] sim_add_run ( proc ) [EOL] [EOL] [EOL] def test_named_default_name ( ) : [EOL] assert ( is_uuid ( Named ( None ) . name ) ) [EOL] [EOL] [EOL] def test_named_set_name ( ) : [EOL] named = Named ( [string] ) [EOL] assert named . name == [string] [EOL] [EOL] [EOL] def queuer ( name , queue , log , delay ) : [EOL] local . name = name [EOL] advance ( delay ) [EOL] queue . join ( ) [EOL] log . append ( name ) [EOL] [EOL] [EOL] def dequeueing ( queue , delay ) : [EOL] advance ( delay ) [EOL] while not queue . is_empty ( ) : [EOL] advance ( [number] ) [EOL] queue . pop ( ) [EOL] [EOL] [EOL] def run_test_queue_join_pop ( queue ) : [EOL] sim = Simulator ( ) [EOL] log = [ ] [EOL] for n in range ( [number] ) : [EOL] sim . add ( queuer , n , queue , log , float ( n + [number] ) ) [EOL] sim . add ( dequeueing , queue , [number] ) [EOL] sim . run ( ) [EOL] return log [EOL] [EOL] [EOL] def test_queue_join_pop_chrono ( ) : [EOL] assert list ( range ( [number] ) ) == run_test_queue_join_pop ( Queue ( ) ) [EOL] [EOL] [EOL] def test_queue_join_pop_evenodd ( ) : [EOL] assert [ [number] * n for n in range ( [number] ) ] + [ [number] * n + [number] for n in range ( [number] ) ] == run_test_queue_join_pop ( Queue ( lambda counter : counter + [number] * ( local . name % [number] ) ) ) [EOL] [EOL] [EOL] def test_queue_pop_empty ( ) : [EOL] sim = Simulator ( ) [EOL] queue = Queue ( ) [EOL] log = [ ] [EOL] sim . add ( queuer , [number] , queue , log , [number] ) [EOL] sim . run ( ) [EOL] assert [ ] == log [EOL] queue . pop ( ) [EOL] sim . run ( ) [EOL] assert [ [number] ] == log [EOL] assert queue . is_empty ( ) [EOL] queue . pop ( ) [comment] [EOL] sim . run ( ) [EOL] assert [ [number] ] == log [EOL] [EOL] [EOL] def test_queue_length ( ) : [EOL] sim = Simulator ( ) [EOL] queue = Queue ( ) [EOL] assert [number] == len ( queue ) [EOL] log = [ ] [EOL] for n in range ( [number] ) : [EOL] sim . add ( queuer , n , queue , log , float ( n + [number] ) ) [EOL] sim . run ( ) [EOL] assert [number] == len ( queue ) [EOL] sim . add ( dequeueing , queue , [number] ) [EOL] sim . run ( ) [EOL] assert [number] == len ( queue ) [EOL] [EOL] [EOL] def test_queue_timeout ( ) : [EOL] result = [number] [EOL] queue = Queue ( ) [EOL] sim = Simulator ( ) [EOL] [EOL] def join_then_balk ( ) : [EOL] nonlocal result [EOL] try : [EOL] queue . join ( [number] ) [EOL] result = - [number] [EOL] except Timeout : [EOL] result = [number] [EOL] sim . stop ( ) [EOL] [EOL] def would_pop ( ) : [EOL] nonlocal result [EOL] advance ( [number] ) [EOL] queue . pop ( ) [EOL] result += [number] [EOL] [EOL] sim . add ( join_then_balk ) [EOL] sim . add ( would_pop ) [EOL] sim . run ( ) [EOL] assert result == [number] [EOL] assert ( sim . now ( ) == pytest . approx ( [number] ) ) [EOL] assert len ( queue ) == [number] [EOL] sim . run ( ) [EOL] assert result == [number] [EOL] assert ( sim . now ( ) == pytest . approx ( [number] ) ) [EOL] [EOL] [EOL] def test_queue_timeout_maintain_order ( ) : [EOL] queue = Queue ( ) [EOL] log = [ ] [EOL] [EOL] def join_and_balk ( name , timeout ) : [EOL] try : [EOL] queue . join ( timeout ) [EOL] log . append ( ( name , [string] ) ) [EOL] except Timeout : [EOL] log . append ( ( name , [string] ) ) [EOL] [EOL] def pop ( ) : [EOL] while len ( queue ) > [number] : [EOL] advance ( [number] ) [EOL] queue . pop ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] for name , timeout_balk in [ ( [string] , None ) , ( [string] , [number] ) , ( [string] , None ) , ( [string] , [number] ) , ( [string] , None ) ] : [EOL] sim . add ( join_and_balk , name , timeout_balk ) [EOL] sim . add ( pop ) [EOL] sim . run ( ) [EOL] assert log == [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [EOL] def test_cancel_timeout ( ) : [EOL] queue = Queue ( ) [EOL] log = [ ] [EOL] [EOL] def join_and_balk ( name ) : [EOL] try : [EOL] queue . join ( [number] ) [EOL] log . append ( ( name , [string] ) ) [EOL] except Timeout : [EOL] log . append ( ( name , [string] ) ) [EOL] [EOL] def pop ( ) : [EOL] queue . pop ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( join_and_balk , [string] ) [EOL] sim . add_in ( [number] , pop ) [EOL] sim . run ( ) [EOL] assert log == [ ( [string] , [string] ) ] [EOL] [EOL] [EOL] class InterruptCustom ( Interrupt ) : [EOL] pass [EOL] [EOL] [EOL] def test_timeout_interrupt ( ) : [EOL] queue = Queue ( ) [EOL] sim = Simulator ( ) [EOL] log = [ ] [EOL] [EOL] def queueing ( ) : [EOL] log . append ( [string] ) [EOL] try : [EOL] queue . join ( timeout = [number] ) [EOL] except InterruptCustom : [EOL] log . append ( [string] ) [EOL] [EOL] proc_queueing = sim . add ( queueing ) [EOL] sim . run ( [number] ) [EOL] assert ( log == [ [string] ] ) [EOL] assert ( len ( queue ) == [number] ) [EOL] [EOL] proc_queueing . interrupt ( InterruptCustom ( ) ) [EOL] sim . run ( [number] ) [EOL] assert ( log == [ [string] , [string] ] ) [EOL] assert ( len ( queue ) == [number] ) [EOL] assert ( len ( list ( sim . events ( ) ) ) == [number] ) [EOL] [EOL] [EOL] def wait_for ( signal , times_expected , delay_between , log = [ ] ) : [EOL] for expected in times_expected : [EOL] advance ( delay_between ) [EOL] signal . wait ( ) [EOL] assert pytest . approx ( expected ) == now ( ) [EOL] log . append ( now ( ) ) [EOL] [EOL] [EOL] def test_signal_already_on ( ) : [EOL] sim = Simulator ( ) [EOL] signal = Signal ( ) . turn_on ( ) [EOL] log = [ ] [EOL] expectation = [ [number] ] [EOL] sim . add ( wait_for , signal , expectation , [number] , log ) [EOL] sim . run ( ) [EOL] assert expectation == log [EOL] [EOL] [EOL] def test_signal_wait_a_while ( ) : [EOL] sim = Simulator ( ) [EOL] signal = Signal ( ) . turn_off ( ) [EOL] log = [ ] [EOL] expectation = [ [number] , [number] ] [EOL] sim . add ( wait_for , signal , expectation , [number] , log ) [EOL] sim . _schedule ( [number] , signal . turn_on ) [EOL] sim . run ( ) [EOL] assert expectation == log [EOL] [EOL] [EOL] def test_signal_toggling ( ) : [EOL] sim = Simulator ( ) [EOL] signal = Signal ( ) . turn_off ( ) [EOL] log = [ ] [EOL] expectation = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] sim . add ( wait_for , signal , expectation , [number] , log ) [EOL] sim . _schedule ( [number] , signal . turn_on ) [EOL] sim . _schedule ( [number] , signal . turn_off ) [EOL] sim . _schedule ( [number] , signal . turn_on ) [EOL] sim . _schedule ( [number] , signal . turn_off ) [EOL] sim . _schedule ( [number] , signal . turn_on ) [EOL] sim . run ( ) [EOL] assert expectation == log [EOL] [EOL] [EOL] def test_signal_waiter_turning_off ( ) : [EOL] def waiter_turning_off ( signal , log ) : [EOL] signal . wait ( ) [EOL] signal . turn_off ( ) [EOL] log . append ( now ( ) ) [EOL] [EOL] sim = Simulator ( ) [EOL] signal = Signal ( ) . turn_off ( ) [EOL] log_time = [ ] [EOL] for n in range ( [number] ) : [EOL] sim . add ( waiter_turning_off , signal , log_time ) [EOL] schedule_signal_on = [ [number] , [number] , [number] , [number] , [number] ] [EOL] for moment in schedule_signal_on : [EOL] sim . _schedule ( moment , signal . turn_on ) [EOL] sim . run ( ) [EOL] assert schedule_signal_on == pytest . approx ( log_time ) [EOL] [EOL] [EOL] def turn_on ( delay , signal ) : [EOL] advance ( delay ) [EOL] signal . turn_on ( ) [EOL] [EOL] [EOL] def test_signal_timeout ( ) : [EOL] log = [ ] [EOL] signal = Signal ( ) . turn_off ( ) [EOL] [EOL] def wait_then_balk ( name , delay_balk ) : [EOL] try : [EOL] signal . wait ( delay_balk ) [EOL] log . append ( ( name , [string] ) ) [EOL] except Timeout : [EOL] log . append ( ( name , [string] ) ) [EOL] [EOL] def turn_on ( ) : [EOL] advance ( [number] ) [EOL] signal . turn_on ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( wait_then_balk , [string] , [number] ) [EOL] sim . add ( wait_then_balk , [string] , [number] ) [EOL] sim . add ( turn_on ) [EOL] sim . run ( ) [EOL] assert log == [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [EOL] def test_select_one_on ( ) : [EOL] has_passed = False [EOL] [EOL] def selecter ( sigs ) : [EOL] nonlocal has_passed [EOL] select ( * sigs ) [EOL] has_passed = True [EOL] [EOL] sim = Simulator ( ) [EOL] signals = [ Signal ( ) . turn_off ( ) for n in range ( [number] ) ] [EOL] sim . add ( selecter , signals ) [EOL] sim . run ( ) [EOL] assert not has_passed [EOL] signals [ [number] ] . turn_on ( ) [EOL] sim . run ( ) [EOL] assert has_passed [EOL] [EOL] [EOL] def test_select_multiple_turn_on ( ) : [EOL] def selecter ( sigs , expected ) : [EOL] signals_on = select ( * sigs ) [EOL] for expd , sig in zip ( expected , sigs ) : [EOL] if expd : [EOL] assert sig in signals_on [EOL] else : [EOL] assert sig not in signals_on [EOL] [EOL] def enabler ( delay , sig ) : [EOL] advance ( delay ) [EOL] sig . turn_on ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] delays = [ [number] , [number] , [number] , [number] , [number] ] [EOL] signals = [ Signal ( ) . turn_off ( ) for n in range ( [number] ) ] [EOL] for delay , signal in zip ( delays , signals ) : [EOL] sim . add ( enabler , delay , signal ) [EOL] sim . add ( selecter , signals , [ delay < [number] for delay in delays ] ) [EOL] sim . run ( ) [EOL] [EOL] [EOL] def test_select_timeout ( ) : [EOL] sigs = [ Signal ( ) . turn_off ( ) for n in range ( [number] ) ] [EOL] log = [ ] [EOL] [EOL] def selecter ( ) : [EOL] try : [EOL] select ( * sigs , timeout = [number] ) [EOL] log . append ( [number] ) [EOL] except Timeout : [EOL] log . append ( [number] ) [EOL] [EOL] def turn_on ( ) : [EOL] advance ( [number] ) [EOL] sigs [ [number] ] . turn_on ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( selecter ) [EOL] sim . add ( turn_on ) [EOL] sim . run ( ) [EOL] assert log == [ [number] ] [EOL] [EOL] [EOL] def test_select_timeout_bad_parameter ( ) : [EOL] sigs = [ Signal ( ) . turn_off ( ) for n in range ( [number] ) ] [EOL] log = [ ] [EOL] [EOL] def selecter ( ) : [EOL] try : [EOL] select ( * sigs , timeout = [string] ) [EOL] log . append ( [number] ) [EOL] except Timeout : [EOL] log . append ( [number] ) [EOL] [EOL] def turn_on ( ) : [EOL] advance ( [number] ) [EOL] sigs [ [number] ] . turn_on ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( selecter ) [EOL] sim . add ( turn_on ) [EOL] with pytest . raises ( ValueError ) : [EOL] sim . run ( ) [EOL] [EOL] [EOL] def do_while_holding_resource ( delay , log ) : [EOL] advance ( delay ) [EOL] log . append ( now ( ) ) [EOL] [EOL] [EOL] ResourceTaker = Callable [ [ Resource , float , List [ float ] ] , None ] [EOL] [EOL] [EOL] def run_test_resource ( resource_taker , num_instances , expected ) : [EOL] sim = Simulator ( ) [EOL] resource = Resource ( num_instances ) [EOL] log = [ ] [EOL] for n in range ( [number] ) : [EOL] sim . add ( resource_taker , resource , float ( n + [number] ) , log ) [EOL] sim . run ( ) [EOL] assert expected == pytest . approx ( log ) [EOL] [EOL] [EOL] def take_release ( resource , delay , log ) : [EOL] resource . take ( ) [EOL] do_while_holding_resource ( delay , log ) [EOL] resource . release ( ) [EOL] [EOL] [EOL] def test_resource_take_release_1 ( ) : [EOL] run_test_resource ( take_release , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_resource_take_release_5 ( ) : [EOL] run_test_resource ( take_release , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def take_using ( resource , delay , log ) : [EOL] with resource . using ( ) : [EOL] do_while_holding_resource ( delay , log ) [EOL] [EOL] [EOL] def test_resource_context_manager ( ) : [EOL] run_test_resource ( take_using , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def take_many ( resource , delay , log ) : [EOL] with resource . using ( int ( delay ) ) : [EOL] do_while_holding_resource ( delay , log ) [EOL] [EOL] [EOL] def test_resource_many_once ( ) : [EOL] run_test_resource ( take_many , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def take_M_release_N ( resource , num_take , num_release ) : [EOL] resource . take ( num_take ) [EOL] advance ( [number] ) [EOL] resource . release ( num_release ) [EOL] [EOL] [EOL] def run_resource_test_incoherent ( num_take , num_release ) : [EOL] sim = Simulator ( ) [EOL] resource = Resource ( [number] ) [EOL] sim . add ( take_M_release_N , resource , num_take , num_release ) [EOL] with pytest . raises ( ValueError ) : [EOL] sim . run ( ) [EOL] assert resource . num_instances_free >= [number] [EOL] assert resource . num_instances_total == [number] [EOL] [EOL] [EOL] def test_resource_take_less_than_1 ( ) : [EOL] for num in [ [number] , - [number] ] : [EOL] run_resource_test_incoherent ( num , [number] ) [EOL] [EOL] [EOL] def test_resource_take_more_than_max ( ) : [EOL] run_resource_test_incoherent ( [number] , [number] ) [EOL] [EOL] [EOL] def test_resource_release_more_than_take ( ) : [EOL] run_resource_test_incoherent ( [number] , [number] ) [EOL] run_resource_test_incoherent ( [number] , [number] ) [EOL] [EOL] [EOL] def test_resource_release_while_holding_none ( ) : [EOL] def proc ( resource ) : [EOL] resource . release ( ) [EOL] pytest . fail ( ) [EOL] [EOL] sim = Simulator ( ) [EOL] resource = Resource ( [number] ) [EOL] sim . add ( proc , resource ) [EOL] with pytest . raises ( RuntimeError ) : [EOL] sim . run ( ) [EOL] [EOL] [EOL] def test_resource_timeout ( ) : [EOL] resource = Resource ( [number] ) [EOL] log = [ ] [EOL] [EOL] def take_but_balk ( name , delay_balk ) : [EOL] try : [EOL] with resource . using ( timeout = delay_balk ) : [EOL] advance ( [number] ) [EOL] log . append ( ( name , [string] ) ) [EOL] except Timeout : [EOL] log . append ( ( name , [string] ) ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( take_but_balk , [string] , [number] ) [EOL] sim . add_in ( [number] , take_but_balk , [string] , [number] ) [EOL] sim . run ( ) [EOL] assert log == [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [EOL] class SimulatorWithDestructor ( Simulator ) : [EOL] [EOL] def __init__ ( self , log_destroy ) : [EOL] super ( ) . __init__ ( ) [EOL] self . _log_destroy = log_destroy [EOL] [EOL] def __del__ ( self ) : [EOL] super ( ) . __del__ ( ) [EOL] self . _log_destroy . append ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def log_destroy ( ) : [EOL] return [ ] [EOL] [EOL] [EOL] def just_advance ( name , delay , log ) : [EOL] try : [EOL] local . name = name [EOL] advance ( delay ) [EOL] except greenlet . GreenletExit : [EOL] log . append ( local . name + [string] ) [EOL] finally : [EOL] log . append ( local . name + [string] ) [EOL] [EOL] [EOL] def set_up_simulator_with_destructor ( log_destroy ) : [EOL] sim = SimulatorWithDestructor ( log_destroy ) [EOL] sim . add ( just_advance , [string] , [number] , log_destroy ) [EOL] sim . add ( just_advance , [string] , [number] , log_destroy ) [EOL] sim . add ( just_advance , [string] , [number] , log_destroy ) [EOL] sim . add ( just_advance , [string] , [number] , log_destroy ) [EOL] return sim [EOL] [EOL] [EOL] def test_simulator_gc_all_proceses_done ( log_destroy ) : [EOL] sim = set_up_simulator_with_destructor ( log_destroy ) [EOL] sim . run ( ) [EOL] assert len ( list ( sim . events ( ) ) ) == [number] [EOL] assert log_destroy == [ [string] , [string] , [string] , [string] ] [EOL] sim = None [EOL] gc . collect ( ) [EOL] assert log_destroy == [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_simulator_gc_processes_hanging ( log_destroy ) : [EOL] sim = set_up_simulator_with_destructor ( log_destroy ) [EOL] sim . run ( [number] ) [EOL] assert len ( list ( sim . events ( ) ) ) > [number] [EOL] assert log_destroy == [ [string] ] [EOL] sim = None [EOL] gc . collect ( [number] ) [EOL] assert log_destroy == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_simulator_context_manager ( log_destroy ) : [EOL] with set_up_simulator_with_destructor ( log_destroy ) as sim : [EOL] sim . run ( [number] ) [EOL] assert len ( list ( sim . events ( ) ) ) > [number] [EOL] assert log_destroy == [ [string] ] [EOL] [comment] [EOL] assert log_destroy [ [number] : [number] ] == [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_tagged_constructor ( ) : [EOL] @ tagged ( TestTag . ALICE ) def f ( ) : [EOL] pass [EOL] [EOL] proc = Process ( Simulator ( ) , f , None ) [EOL] assert proc . has_tag ( TestTag . ALICE ) [EOL] [EOL] [EOL] def test_tag_in_place ( ) : [EOL] [comment] [EOL] @ tagged ( TestTag . ALICE ) def f ( ) : [EOL] pass [EOL] [EOL] assert getattr ( f , GREENSIM_TAG_ATTRIBUTE ) == ( TestTag . ALICE , ) [EOL] [EOL] def g ( ) : [EOL] pass [EOL] [EOL] [comment] [EOL] assert getattr ( tagged ( TestTag . BOB ) ( g ) , GREENSIM_TAG_ATTRIBUTE ) == ( TestTag . BOB , ) [EOL] [comment] [EOL] assert not hasattr ( g , GREENSIM_TAG_ATTRIBUTE ) [EOL] [EOL] [EOL] def test_tagged_constructor_multi ( ) : [EOL] @ tagged ( TestTag . ALICE , TestTag . BOB ) def f ( ) : [EOL] pass [EOL] [EOL] proc = Process ( Simulator ( ) , f , None ) [EOL] assert proc . has_tag ( TestTag . ALICE ) [EOL] assert proc . has_tag ( TestTag . BOB ) [EOL] [EOL] [EOL] def run_test_tagged_add ( tagged_launcher , stop ) : [EOL] when_last = [number] [EOL] [EOL] def last_proc ( ) : [EOL] nonlocal when_last [EOL] when_last = now ( ) [EOL] assert Process . current ( ) . has_tag ( TestTag . ALICE ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( tagged_launcher , last_proc ) [EOL] sim . run ( ) [EOL] assert pytest . approx ( stop ) == when_last [EOL] [EOL] [EOL] def run_test_tagged_add_extra_tag ( tagged_launcher , stop ) : [EOL] when_last = [number] [EOL] [EOL] @ tagged ( TestTag . BOB ) def last_proc ( ) : [EOL] nonlocal when_last [EOL] when_last = now ( ) [EOL] assert Process . current ( ) . has_tag ( TestTag . ALICE ) [EOL] assert Process . current ( ) . has_tag ( TestTag . BOB ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( tagged_launcher , last_proc ) [EOL] sim . run ( ) [EOL] assert pytest . approx ( stop ) == when_last [EOL] [EOL] [EOL] def test_tagged_process_add_vanilla ( ) : [EOL] [EOL] step = [number] [EOL] [EOL] @ tagged ( TestTag . ALICE ) def good_launch ( last ) : [EOL] advance ( step ) [EOL] add ( last ) [EOL] [EOL] run_test_tagged_add ( good_launch , step ) [EOL] run_test_tagged_add_extra_tag ( good_launch , step ) [EOL] [EOL] [EOL] def test_tagged_process_add_in ( ) : [EOL] [EOL] step = [number] [EOL] [EOL] @ tagged ( TestTag . ALICE ) def good_launch ( last ) : [EOL] advance ( step ) [EOL] add_in ( step , last ) [EOL] [EOL] run_test_tagged_add ( good_launch , [number] * step ) [EOL] run_test_tagged_add_extra_tag ( good_launch , [number] * step ) [EOL] [EOL] [EOL] def test_tagged_process_add_at ( ) : [EOL] [EOL] step = [number] [EOL] [EOL] @ tagged ( TestTag . ALICE ) def good_launch ( last ) : [EOL] advance ( step ) [EOL] add_at ( [number] * step , last ) [EOL] [EOL] run_test_tagged_add ( good_launch , [number] * step ) [EOL] run_test_tagged_add_extra_tag ( good_launch , [number] * step ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
	0
from typing import Any , List [EOL] import unittest [EOL] import typing [EOL] import greensim [EOL] import io [EOL] from io import StringIO [EOL] import itertools [EOL] from math import inf [EOL] from unittest . mock import Mock , patch [EOL] [EOL] import pytest [EOL] [EOL] from greensim import Simulator , advance [EOL] from greensim . progress import _display_time , _divide_round , combine , track_progress , sim_time , capture_print [EOL] [EOL] [EOL] def test_divide_round ( ) : [EOL] assert _divide_round ( [number] , [number] ) == [number] [EOL] assert _divide_round ( [number] , [number] ) == [number] [EOL] [EOL] [EOL] def test_display_seconds ( ) : [EOL] assert _display_time ( [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] ) == ( [number] , [string] ) [EOL] [EOL] [EOL] def test_display_minutes ( ) : [EOL] assert _display_time ( [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] * [number] ) == ( [number] , [string] ) [EOL] [EOL] [EOL] def test_display_hours ( ) : [EOL] assert _display_time ( [number] * [number] + [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] * [number] * [number] ) == ( [number] , [string] ) [EOL] [EOL] [EOL] def test_display_days ( ) : [EOL] assert _display_time ( [number] * [number] * [number] + [number] ) == ( [number] , [string] ) [EOL] assert _display_time ( [number] * [number] * [number] ) == ( [number] , [string] ) [EOL] [EOL] [EOL] def test_display_inf ( ) : [EOL] assert _display_time ( inf ) == ( [number] , [string] ) [EOL] [EOL] [EOL] def test_combine ( ) : [EOL] [EOL] def _measure1 ( ) : [EOL] return [ [number] , [number] ] [EOL] [EOL] def _measure2 ( ) : [EOL] return [ [number] ] [EOL] [EOL] def _measure3 ( ) : [EOL] return [ [number] , [number] , [number] ] [EOL] [EOL] assert combine ( _measure1 ) == [ [number] , [number] ] [EOL] assert combine ( _measure1 , _measure2 , _measure3 ) == [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] def has_tracker ( sim , tracker ) : [EOL] return any ( event == tracker . switch for _ , event , _ , _ in sim . events ( ) ) [EOL] [EOL] [EOL] def test_tracker_lifecycle ( ) : [EOL] def capture_pass ( progress , rt_remaining , mc ) : [EOL] pass [EOL] [EOL] sim = Simulator ( ) [EOL] tracker = sim . add ( track_progress , sim_time , [ [number] ] , [number] , capture_pass ) [EOL] assert has_tracker ( sim , tracker ) [EOL] [EOL] def check_tracker ( ) : [EOL] advance ( [number] ) [EOL] assert has_tracker ( sim , tracker ) [EOL] [EOL] sim . add ( check_tracker ) [EOL] sim . run ( [number] ) [EOL] assert not has_tracker ( sim , tracker ) [EOL] assert sim . now ( ) == pytest . approx ( [number] ) [EOL] [EOL] [EOL] def test_progress_capture ( ) : [EOL] log = [ ] [EOL] [EOL] def capture ( progress_min , _rt_remaining , mc ) : [EOL] log . append ( progress_min ) [EOL] [EOL] a = [number] [EOL] b = [number] [EOL] [EOL] def set_ab ( new_a , new_b ) : [EOL] nonlocal a , b [EOL] a = new_a [EOL] b = new_b [EOL] [EOL] def measure ( ) : [EOL] return ( a , b ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( track_progress , measure , [ [number] , [number] ] , [number] , capture ) [EOL] sim . _schedule ( [number] , set_ab , [number] , [number] ) [EOL] sim . _schedule ( [number] , set_ab , [number] , [number] ) [EOL] sim . _schedule ( [number] , set_ab , [number] , [number] ) [EOL] sim . _schedule ( [number] , set_ab , [number] , [number] ) [EOL] sim . _schedule ( [number] , set_ab , [number] , [number] ) [EOL] sim . run ( [number] ) [EOL] [EOL] assert sim . now ( ) == pytest . approx ( [number] ) [EOL] assert log == pytest . approx ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] ticker_200ms = Mock ( side_effect = ( [number] * n for n in itertools . count ( [number] ) ) ) [EOL] [EOL] [EOL] @ patch ( [string] , ticker_200ms ) def test_progress_real_time ( ) : [EOL] log = [ ] [EOL] [EOL] def capture ( _progress_min , rt_remaining , mc ) : [EOL] log . append ( rt_remaining ) [EOL] [EOL] def sleeper ( interval , rt_delay ) : [EOL] while True : [EOL] advance ( interval ) [EOL] [EOL] sim = Simulator ( ) [EOL] sim . add ( track_progress , sim_time , [ [number] ] , [number] , capture ) [EOL] sim . add ( sleeper , [number] , [number] ) [EOL] sim . run ( ) [EOL] [EOL] assert log == pytest . approx ( [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_capture_print ( ) : [EOL] strio = StringIO ( ) [EOL] pp = capture_print ( strio ) [EOL] pp ( [number] , [number] , [ ( [number] , [number] ) ] ) [EOL] assert [string] in strio . getvalue ( ) [EOL] assert [string] in strio . getvalue ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Set [EOL] import tests [EOL] import typing [EOL] import greensim [EOL] from greensim import GREENSIM_TAG_ATTRIBUTE , now , Process , Simulator , tagged [EOL] from greensim . tags import Tags [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_tag_clear ( ) : [EOL] sim . _clear ( ) [EOL] [EOL] @ tagged ( IntegTestTag . CANADA ) def tag_carrier ( ) : [EOL] pass [EOL] [EOL] sim . add ( tag_carrier ) [EOL] sim . run ( ) [EOL] [EOL] def tag_receiver ( ) : [EOL] assert not Process . current ( ) . has_tag ( IntegTestTag . CANADA ) [EOL] [EOL] sim . add ( tag_receiver ) [EOL] sim . run ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class IntegTestTag ( Tags ) : [EOL] ALICE = [number] [EOL] BOB = [string] [EOL] CANADA = { } [EOL] [EOL] [EOL] flag = [number] [EOL] sim = Simulator ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def create_time_check ( delay , fn ) : [EOL] def time_check ( * args , ** kwargs ) : [EOL] assert delay == now ( ) [EOL] fn ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( fn , GREENSIM_TAG_ATTRIBUTE ) : [EOL] time_check = tagged ( * getattr ( fn , GREENSIM_TAG_ATTRIBUTE ) ) ( time_check ) [EOL] [EOL] return time_check [EOL] [EOL] [EOL] [comment] [EOL] def run_add ( fn , * args , ** kwargs ) : [EOL] global flag [EOL] flag = [number] [EOL] sim . _clear ( ) [EOL] sim . add ( fn , * args , ** kwargs ) [EOL] sim . run ( ) [EOL] assert flag == [number] [EOL] [EOL] [EOL] [comment] [EOL] def run_add_at ( fn , * args , ** kwargs ) : [EOL] global flag [EOL] flag = [number] [EOL] delay = [number] [EOL] [EOL] sim . _clear ( ) [EOL] sim . add_at ( delay , create_time_check ( delay , fn ) , * args , ** kwargs ) [EOL] sim . run ( ) [EOL] assert flag == [number] [EOL] [EOL] [EOL] [comment] [EOL] def run_add_in ( fn , * args , ** kwargs ) : [EOL] global flag [EOL] flag = [number] [EOL] delay = [number] [EOL] [EOL] sim . _clear ( ) [EOL] sim . run ( delay ) [EOL] sim . add_in ( delay , create_time_check ( [number] * delay , fn ) , * args , ** kwargs ) [EOL] sim . run ( ) [EOL] assert flag == [number] [EOL] [EOL] [EOL] short_tag_set = set ( [ IntegTestTag . ALICE , IntegTestTag . BOB ] ) [EOL] [EOL] [EOL] @ tagged ( * short_tag_set ) def tag_checker ( tag_set ) : [EOL] global flag , short_tag_set [EOL] flag = [number] [EOL] assert tag_set == Process . current ( ) . _tag_set [EOL] [EOL] [EOL] def test_add_tags ( ) : [EOL] run_add ( tag_checker , short_tag_set ) [EOL] [EOL] [EOL] def test_add_at_tags ( ) : [EOL] run_add_at ( tag_checker , short_tag_set ) [EOL] [EOL] [EOL] def test_add_in_tags ( ) : [EOL] run_add_in ( tag_checker , short_tag_set ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_add_propogate ( ) : [EOL] [EOL] @ tagged ( IntegTestTag . CANADA ) def tag_propogator ( tag_set ) : [EOL] sim . add ( tag_checker , tag_set | set ( [ IntegTestTag . CANADA ] ) ) [EOL] [EOL] run_add ( tag_propogator , short_tag_set ) [EOL] [EOL] [EOL] def test_add_at_propogate ( ) : [EOL] [EOL] @ tagged ( IntegTestTag . CANADA ) def tag_propogator ( tag_set ) : [EOL] sim . add_at ( now ( ) + [number] , create_time_check ( now ( ) + [number] , tag_checker ) , tag_set | set ( [ IntegTestTag . CANADA ] ) ) [EOL] [EOL] run_add_at ( tag_propogator , short_tag_set ) [EOL] [EOL] [EOL] def test_add_in_propogate ( ) : [EOL] [EOL] @ tagged ( IntegTestTag . CANADA ) def tag_propogator ( tag_set ) : [EOL] sim . add_in ( [number] , create_time_check ( now ( ) + [number] , tag_checker ) , tag_set | set ( [ IntegTestTag . CANADA ] ) ) [EOL] [EOL] run_add_in ( tag_propogator , short_tag_set ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0