	0
[comment] [EOL] [EOL] import builtins [EOL] from . check_similarity import similar [EOL] from . find_pswd import find_pswd [EOL] from . log import LogMsgChangePaswd [EOL] from . verify_pswd import verify_pswd [EOL] [EOL] [EOL] def change_pswd ( old_pswd , new_pswd ) : [EOL] if not find_pswd ( old_pswd ) : [EOL] [docstring] [EOL] print ( LogMsgChangePaswd . INVALID_OLD_PSWD ) [EOL] elif not verify_pswd ( new_pswd ) : [EOL] [docstring] [EOL] print ( LogMsgChangePaswd . INVALID_NEW_PSWD ) [EOL] elif similar ( old_pswd , new_pswd ) : [EOL] [docstring] [EOL] print ( LogMsgChangePaswd . SIMILAR_TO_OLD_ONE ) [EOL] else : [EOL] print ( LogMsgChangePaswd . SUCCESS ) [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] import re [EOL] [EOL] from . constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH , SP_CHARS ) [EOL] from . log import LogMsgVerifyPswd [EOL] [EOL] [EOL] def verify_pswd ( pswd ) : [EOL] print ( [string] . format ( pswd ) ) [comment] [EOL] if _check_length ( pswd ) : [EOL] print ( [string] . format ( len ( pswd ) ) ) [EOL] print ( LogMsgVerifyPswd . INVALID_LENGTH ) [EOL] elif _include_invalid_char ( pswd ) : [EOL] print ( LogMsgVerifyPswd . INVALID_CHAR ) [EOL] elif _include_not_all_patterns ( pswd ) : [EOL] print ( LogMsgVerifyPswd . NOT_ALL_PATTERNS ) [EOL] elif _include_over_continuous_same_chars ( pswd ) : [EOL] print ( LogMsgVerifyPswd . OVER_CONTINUOUS_SAME_CHARS ) [EOL] elif _include_over_sp_char_num ( pswd ) : [EOL] print ( LogMsgVerifyPswd . OVER_SP_CHAR_NUM ) [EOL] elif _include_num_more_than_half_of_length ( pswd ) : [EOL] print ( LogMsgVerifyPswd . MORE_THAN_HALF_OF_LENGTH ) [EOL] else : [EOL] print ( LogMsgVerifyPswd . VALID ) [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _check_length ( pswd ) : [EOL] [docstring] [EOL] return len ( pswd ) < MIN_VALID_LENGTH or len ( pswd ) > MAX_VALID_LENGTH [EOL] [EOL] [EOL] def _include_invalid_char ( pswd ) : [EOL] [docstring] [EOL] for x in pswd : [EOL] [comment] [EOL] if not bool ( re . search ( [string] , x ) ) and x not in SP_CHARS : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _include_not_all_patterns ( pswd ) : [EOL] [docstring] [EOL] upper_flg = False [EOL] lower_flg = False [EOL] num_flg = False [EOL] special_flg = False [EOL] for x in pswd : [EOL] if x . isupper ( ) : [EOL] upper_flg = True [EOL] elif x . islower ( ) : [EOL] lower_flg = True [EOL] elif x . isnumeric ( ) : [EOL] num_flg = True [EOL] elif x in SP_CHARS : [EOL] special_flg = True [EOL] if upper_flg and lower_flg and num_flg and special_flg : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def _include_over_continuous_same_chars ( pswd ) : [EOL] [docstring] [EOL] count = [number] [EOL] prev_char = pswd [ [number] ] [EOL] for x in list ( pswd ) [ [number] : ] : [EOL] if x == prev_char : [EOL] count += [number] [EOL] else : [EOL] [comment] [EOL] count = [number] [EOL] prev_char = x [EOL] if count > MAX_CHAR_CONTINUOUS_NUM : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _include_over_sp_char_num ( pswd ) : [EOL] [docstring] [EOL] count = [number] [EOL] for c in SP_CHARS : [EOL] count += pswd . count ( c ) [EOL] return count > MAX_SP_CHAR_NUM [EOL] [EOL] [EOL] def _include_num_more_than_half_of_length ( pswd ) : [EOL] [docstring] [EOL] count = [number] [EOL] for c in pswd : [EOL] if c . isnumeric ( ) : [EOL] count += [number] [EOL] return count >= len ( pswd ) / [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import TypeVar , Type [EOL] import typing [EOL] import change_pswd_func [EOL] from typing import Generic , TypeVar [EOL] [EOL] from . constants import ( MAX_CHAR_CONTINUOUS_NUM , MAX_SP_CHAR_NUM , MAX_VALID_LENGTH , MIN_VALID_LENGTH ) [EOL] [EOL] T = TypeVar ( [string] ) [EOL] [EOL] [EOL] class LogMsgVerifyPswd ( Generic [ T ] ) : [EOL] [comment] [EOL] [EOL] INVALID_LENGTH = [string] . format ( MIN_VALID_LENGTH , MAX_VALID_LENGTH ) [EOL] [EOL] INVALID_CHAR = [string] [EOL] [EOL] NOT_ALL_PATTERNS = [string] [EOL] [EOL] OVER_CONTINUOUS_SAME_CHARS = [string] . format ( MAX_CHAR_CONTINUOUS_NUM ) [EOL] [EOL] OVER_SP_CHAR_NUM = [string] . format ( MAX_SP_CHAR_NUM ) [EOL] [EOL] MORE_THAN_HALF_OF_LENGTH = [string] [EOL] [EOL] VALID = [string] [EOL] [EOL] [EOL] class LogMsgChangePaswd ( Generic [ T ] ) : [EOL] [comment] [EOL] [EOL] INVALID_OLD_PSWD = [string] [EOL] [EOL] INVALID_NEW_PSWD = [string] [EOL] [EOL] SIMILAR_TO_OLD_ONE = [string] [EOL] [EOL] SUCCESS = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] SP_CHARS = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] MIN_VALID_LENGTH = [number] [EOL] [EOL] MAX_VALID_LENGTH = [number] [EOL] [EOL] MAX_CHAR_CONTINUOUS_NUM = [number] [EOL] [EOL] MAX_SP_CHAR_NUM = [number] [EOL] [EOL] SIMILARITY_THRESHOLD = [number] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] def find_pswd ( pswd ) : [EOL] return pswd in load_system_pswd ( ) [EOL] [EOL] [EOL] def load_system_pswd ( filepath = [string] ) : [EOL] pswds = [ ] [EOL] with open ( filepath , [string] ) as fr : [EOL] for line in fr . readlines ( ) : [EOL] pswds . append ( line . strip ( ) ) [EOL] return pswds [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from test . helper . helper import ( strings_generator_dest_str_longer , strings_generator_matched_char_mixed , strings_generator_same_center , strings_generator_same_head , strings_generator_same_tail , strings_generator_src_string_longer ) [EOL] [EOL] import pytest [comment] [EOL] [EOL] from change_pswd_func . check_similarity import similar [EOL] [EOL] [EOL] class TestCheckSimilarity ( object ) : [EOL] [EOL] def test_similar_exception ( self ) : [EOL] with pytest . raises ( TypeError ) : [EOL] similar ( [number] , [ [number] , [number] , [number] ] ) [EOL] [EOL] class TestCheckSimilaritySameLengthMatchTailString ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_tail ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_tail ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL] [EOL] class TestCheckSimilaritySameLengthMatchCenterString ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_center ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_center ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL] [EOL] class TestCheckSimilaritySameLengthMatchHeadString ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_head ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_same_head ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL] [EOL] class TestCheckSimilaritySameLengthMixedMatchStrings ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_matched_char_mixed ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar ( self , str_diff_num ) : [EOL] str1 , str2 = strings_generator_matched_char_mixed ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL] [EOL] class TestCheckSimilarityDifferentStringLength ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar_dest_string_longer ( self , str_diff_num ) : [comment] [EOL] str1 , str2 = strings_generator_dest_str_longer ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar_dest_string_longer ( self , str_diff_num ) : [comment] [EOL] str1 , str2 = strings_generator_dest_str_longer ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL] [EOL] [docstring] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] ] ) def test_similar_dissimilar_src_string_longer ( self , str_diff_num ) : [comment] [EOL] str1 , str2 = strings_generator_src_string_longer ( str_diff_num ) [EOL] assert not similar ( str1 , str2 ) [EOL] [EOL] [comment] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] ] ) def test_similar_similar_src_string_longer ( self , str_diff_num ) : [comment] [EOL] str1 , str2 = strings_generator_src_string_longer ( str_diff_num ) [EOL] assert similar ( str1 , str2 ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from change_pswd_func . find_pswd import find_pswd , load_system_pswd [EOL] [EOL] [EOL] class TestFindPswd ( object ) : [EOL] [EOL] [comment] [EOL] def test_find_pswd_found ( self ) : [EOL] pswd = load_system_pswd ( ) [ - [number] ] [EOL] assert find_pswd ( pswd ) [EOL] [EOL] [comment] [EOL] def test_find_pswd_not_found ( self ) : [EOL] pswd = load_system_pswd ( ) [ - [number] ] * [number] [EOL] assert not find_pswd ( pswd ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] from change_pswd_func . constants import ( MIN_VALID_LENGTH , SIMILARITY_THRESHOLD , SP_CHARS ) [EOL] [EOL] CHAR_UPPER_1 = [string] [EOL] [EOL] CHAR_UPPER_2 = [string] [EOL] [EOL] CHAR_LOWER = [string] [EOL] [EOL] CHAR_NUM = [string] [EOL] [EOL] PSWD_LENGTH = [number] [EOL] [EOL] [EOL] def pswd_generator ( pswd_base = [string] , length = MIN_VALID_LENGTH , incl_upper_char = True , incl_lower_char = True , incl_num = True , incl_sp_char = True ) : [EOL] [docstring] [EOL] [EOL] base_str = [string] [EOL] base_str += CHAR_UPPER_1 if incl_upper_char else [string] [EOL] base_str += CHAR_LOWER if incl_lower_char else [string] [EOL] base_str += CHAR_NUM * len ( base_str ) if incl_num else [string] [EOL] for i in range ( length - len ( pswd_base ) ) : [EOL] pswd_base += base_str [ i % len ( base_str ) ] [EOL] if incl_sp_char : [EOL] pswd_base = pswd_base [ : - [number] ] + SP_CHARS [ [number] ] [EOL] return pswd_base [EOL] [EOL] [EOL] def pswd_changer ( pswd , diff_ratio = ( [number] - SIMILARITY_THRESHOLD + [number] ) ) : [EOL] [docstring] [EOL] print ( int ( len ( pswd ) * diff_ratio ) ) [EOL] return pswd . replace ( CHAR_UPPER_1 , CHAR_UPPER_2 , int ( len ( pswd ) * diff_ratio ) ) [EOL] [EOL] [EOL] def strings_generator_same_tail ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] [EOL] len1 = int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] str1 = [string] . format ( [string] * ( length - len1 ) , [string] * len1 ) [EOL] str2 = [string] * length [EOL] return str1 , str2 [EOL] [EOL] [EOL] def strings_generator_same_center ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] [EOL] len1 = int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] str1 = [string] . format ( [string] * int ( len1 / [number] ) , [string] * ( length - len1 ) , [string] * ( len1 - int ( len1 / [number] ) ) ) [EOL] str2 = [string] * length [EOL] return str1 , str2 [EOL] [EOL] [EOL] def strings_generator_same_head ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] [EOL] len1 = int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] str1 = [string] . format ( [string] * len1 , [string] * ( length - len1 ) ) [EOL] str2 = [string] * length [EOL] return str1 , str2 [EOL] [EOL] [EOL] def strings_generator_matched_char_mixed ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] [EOL] len1 = int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] char_list = [ [string] ] * length [EOL] for i in range ( length - len1 ) : [EOL] if char_list [ [number] * i + [number] ] != [string] : [EOL] char_list [ [number] * i + [number] ] = [string] [EOL] else : [EOL] char_list [ [number] * i ] = [string] [EOL] str1 = [string] . join ( char_list ) [EOL] str2 = [string] * length [EOL] return str1 , str2 [EOL] [EOL] [EOL] def strings_generator_dest_str_longer ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] [EOL] str1 = [string] * int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] str2 = [string] * length [EOL] return str1 , str2 [EOL] [EOL] [EOL] def strings_generator_src_string_longer ( str_diff_num , length = PSWD_LENGTH ) : [EOL] [docstring] [EOL] str1 = [string] * length [EOL] str2 = [string] * int ( length * SIMILARITY_THRESHOLD + str_diff_num ) [EOL] return str1 , str2 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0