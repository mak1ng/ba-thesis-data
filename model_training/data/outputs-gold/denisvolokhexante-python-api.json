from typing import List , Any [EOL] import typing [EOL] import setuptools [EOL] [EOL] import exante [EOL] [EOL] packages = setuptools . find_packages ( exclude = [ [string] , [string] , [string] ] ) [EOL] requires = [ [string] , [string] ] [EOL] [EOL] [EOL] setuptools . setup ( name = [string] , version = exante . __version__ , description = [string] , author = [string] , author_email = [string] , packages = packages , install_requires = requires , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0
class APIError ( Exception ) : [EOL] def __init__ ( self , code , message ) : [EOL] self . code = code [EOL] self . message = message [EOL] [EOL] super ( APIError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class BadEnvironment ( Exception ) : [EOL] def __init__ ( self , message ) : [EOL] self . message = message [EOL] [EOL] super ( BadEnvironment , self ) . __init__ ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __build__ = ( [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0
class Scope : [EOL] [EOL] Symbols = [string] [EOL] Feed = [string] [EOL] Change = [string] [EOL] Ohlc = [string] [EOL] Crossrates = [string] [EOL] Accounts = [string] [EOL] AccountsSummary = [string] [EOL] Orders = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
class Environment : [EOL] [EOL] Demo = [string] [EOL] Live = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
class OrderType : [EOL] [EOL] Market = [string] [EOL] Limit = [string] [EOL] [EOL] [EOL] class OrderSide : [EOL] [EOL] Buy = [string] [EOL] Sell = [string] [EOL] [EOL] [EOL] class OrderDuration : [EOL] [EOL] Day = [string] [EOL] FillOrKill = [string] [EOL] ImmediateOrCancel = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] from . apirequest import APIRequest [EOL] [EOL] [EOL] class Orders ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] [EOL] def __init__ ( self , params = None ) : [EOL] [docstring] [EOL] [EOL] super ( Orders , self ) . __init__ ( self . ENDPOINT , method = self . METHOD , scope = self . SCOPE ) [EOL] [EOL] self . params = params [EOL] [EOL] [EOL] class OrderCreate ( Orders ) : [EOL] [docstring] [EOL] [EOL] METHOD = [string] [EOL] [EOL] def __init__ ( self , data ) : [EOL] super ( OrderCreate , self ) . __init__ ( ) [EOL] self . data = data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] class APIRequest ( object ) : [EOL] def __init__ ( self , endpoint , method = [string] , scope = [string] , expected_status = [number] ) : [EOL] self . _endpoint = endpoint [EOL] self . _response = None [EOL] self . _status_code = None [EOL] self . _expected_status = [number] [EOL] [EOL] self . method = method [EOL] self . scope = scope [EOL] [EOL] @ property def response ( self ) : [EOL] return self . _response [EOL] [EOL] @ response . setter def response ( self , value ) : [EOL] self . _response = value [EOL] [EOL] @ property def status_code ( self ) : [EOL] return self . _status_code [EOL] [EOL] @ status_code . setter def status_code ( self , value ) : [EOL] self . _status_code = value [EOL] [EOL] @ property def expected_status ( self ) : [EOL] return self . _expected_status [EOL] [EOL] @ expected_status . setter def expected_status ( self , value ) : [EOL] self . _expected_status = value [EOL] [EOL] def __str__ ( self ) : [EOL] return self . _endpoint [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import builtins [EOL] from . apirequest import APIRequest [EOL] [EOL] [EOL] class Feed ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] HEADER = { [string] : [string] } [EOL] [EOL] def __init__ ( self , symbols ) : [EOL] endpoint = self . ENDPOINT . format ( symbols = symbols ) [EOL] [EOL] super ( Feed , self ) . __init__ ( endpoint , method = self . METHOD , scope = self . SCOPE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from . apirequest import APIRequest [EOL] [EOL] [EOL] class Accounts ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] EXPECTED_STATUS = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( Accounts , self ) . __init__ ( self . ENDPOINT , method = self . METHOD , scope = self . SCOPE , expected_status = self . EXPECTED_STATUS , ) [EOL] [EOL] [EOL] class AccountSummary ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] EXPECTED_STATUS = [number] [EOL] [EOL] def __init__ ( self , account_id , currency = [string] ) : [EOL] endpoint = self . ENDPOINT . format ( account_id = account_id , currency = currency ) [EOL] [EOL] super ( AccountSummary , self ) . __init__ ( endpoint , method = self . METHOD , scope = self . SCOPE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from . apirequest import APIRequest [EOL] [EOL] [EOL] class Symbols ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] [EOL] def __init__ ( self , params = None ) : [EOL] super ( Symbols , self ) . __init__ ( self . ENDPOINT , method = self . METHOD , scope = self . SCOPE , params = params ) [EOL] [EOL] [EOL] class Symbol ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] [EOL] def __init__ ( self , symbol_id ) : [EOL] endpoint = self . ENDPOINT . format ( symbol_id = symbol_id ) [EOL] [EOL] super ( Symbol , self ) . __init__ ( endpoint , method = self . METHOD , scope = self . SCOPE ) [EOL] [EOL] [EOL] class SymbolSpecification ( APIRequest ) : [EOL] [docstring] [EOL] [EOL] ENDPOINT = [string] [EOL] METHOD = [string] [EOL] SCOPE = [string] [EOL] [EOL] def __init__ ( self , symbol_id ) : [EOL] endpoint = self . ENDPOINT . format ( symbol_id = symbol_id ) [EOL] [EOL] super ( SymbolSpecification , self ) . __init__ ( endpoint , method = self . METHOD , scope = self . SCOPE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import json [EOL] [EOL] [EOL] class BasePayload ( object ) : [EOL] def __init__ ( self ) : [EOL] self . _data = dict ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return json . dumps ( self . __dict__ ) [EOL] [EOL] @ property def data ( self ) : [EOL] [comment] [EOL] [EOL] return self . _data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import logging [EOL] import exante [EOL] import logging [EOL] import os [EOL] [EOL] import betamax [EOL] import pytest [EOL] from betamax_serializers import pretty_json [EOL] [EOL] from exante . api import ExanteAPI [EOL] from exante . definitions . environment import Environment [EOL] from exante . definitions . scope import Scope [EOL] [EOL] betamax . Betamax . register_serializer ( pretty_json . PrettyJSONSerializer ) [EOL] [EOL] with betamax . Betamax . configure ( ) as config : [EOL] config . cassette_library_dir = [string] [EOL] config . default_cassette_options [ [string] ] = [string] [EOL] [EOL] [EOL] SHARED_KEY = os . getenv ( [string] , None ) [EOL] CLIENT_ID = os . getenv ( [string] , None ) [EOL] APPLICATION_ID = os . getenv ( [string] , None ) [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def exante_api_demo_client ( ) : [EOL] [docstring] [EOL] [EOL] logger . info ( f" [string] { CLIENT_ID }" ) [EOL] [EOL] api_client = ExanteAPI ( client_id = CLIENT_ID , application_id = APPLICATION_ID , shared_key = SHARED_KEY , api_scopes = [ Scope . Symbols , Scope . Change , Scope . Crossrates , Scope . Feed , Scope . Accounts , Scope . AccountsSummary , Scope . Orders , ] , environment = Environment . Demo , ) [EOL] [EOL] return api_client [EOL] [EOL] [EOL] @ pytest . fixture def exante_api_demo_client_no_scopes ( ) : [EOL] [docstring] [EOL] [EOL] api_client = ExanteAPI ( client_id = CLIENT_ID , application_id = APPLICATION_ID , shared_key = SHARED_KEY , api_scopes = [ ] , environment = Environment . Demo , ) [EOL] [EOL] return api_client [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any [EOL] import typing [EOL] import logging [EOL] import exante [EOL] import logging [EOL] import os [EOL] [EOL] import betamax [EOL] import pytest [EOL] [EOL] from exante . endpoints . accounts import Accounts , AccountSummary [EOL] from exante . exceptions import APIError [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . setLevel ( level = logging . DEBUG ) [EOL] [EOL] [EOL] class TestSaxoOpenAPI ( object ) : [EOL] [docstring] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup ( self , exante_api_demo_client , exante_api_demo_client_no_scopes ) : [EOL] [docstring] [EOL] [EOL] self . client = exante_api_demo_client [EOL] self . recorder = betamax . Betamax ( session = self . client . session ) [EOL] [EOL] self . client_no_scopes = exante_api_demo_client_no_scopes [EOL] self . recorder_no_scopes = betamax . Betamax ( session = self . client_no_scopes . session ) [EOL] [EOL] @ staticmethod def generate_cassette_name ( method_name ) : [EOL] [docstring] [EOL] return [string] + method_name [EOL] [EOL] def test__accounts_list ( self ) : [EOL] [docstring] [EOL] [EOL] accounts_list_request = Accounts ( ) [EOL] [EOL] cassette_name = self . generate_cassette_name ( [string] ) [EOL] with self . recorder . use_cassette ( cassette_name ) : [EOL] accounts_list_response = self . client . request ( accounts_list_request ) [EOL] [EOL] assert isinstance ( accounts_list_response , list ) [EOL] [EOL] def test__account_details ( self ) : [EOL] account_id = os . getenv ( [string] , None ) [EOL] [EOL] account_summary_request = AccountSummary ( account_id = account_id , currency = [string] ) [EOL] [EOL] cassette_name = self . generate_cassette_name ( [string] ) [EOL] with self . recorder . use_cassette ( cassette_name ) : [EOL] [EOL] with pytest . raises ( APIError ) : [EOL] self . client_no_scopes . request ( account_summary_request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $exante.endpoints.accounts.Accounts$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $exante.endpoints.accounts.Accounts$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $exante.endpoints.accounts.AccountSummary$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $exante.endpoints.accounts.AccountSummary$ 0 0
	0
	0
	0
import logging [EOL] import os [EOL] import pytest [EOL] from exante . api import ExanteAPI [EOL] from exante . exceptions import BadEnvironment [EOL] from exante . definitions . environment import Environment [EOL] [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] logger . setLevel ( level = logging . DEBUG ) [EOL] [EOL] [EOL] def test_bad_api_environment_exception ( ) : [EOL] with pytest . raises ( BadEnvironment ) : [EOL] ExanteAPI ( client_id = [string] , application_id = [string] , shared_key = [string] , api_scopes = [ ] , environment = [string] , ) [EOL] [EOL] def test_api_environment ( exante_api_demo_client ) : [EOL] assert exante_api_demo_client . environment == Environment . Demo [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0