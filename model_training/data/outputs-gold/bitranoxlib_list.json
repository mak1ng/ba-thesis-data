from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] collect_ignore = [ ] [EOL] [EOL] [EOL] def pytest_cmdline_preparse ( args ) : [EOL] [docstring] [EOL] [EOL] additional_pytest_args = [ ] [EOL] args [ : ] = list ( set ( args + additional_pytest_args ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Dict [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] import os [EOL] import pathlib [EOL] [EOL] [comment] [EOL] import click [EOL] [EOL] [comment] [EOL] CLICK_CONTEXT_SETTINGS = dict ( help_option_names = [ [string] , [string] ] ) [EOL] logger = logging . getLogger ( ) [EOL] logger . level = logging . INFO [EOL] [EOL] [EOL] def append_subdirs_to_mypy_paths ( root_directory ) : [EOL] [docstring] [EOL] path_root_directory = pathlib . Path ( root_directory ) . resolve ( ) [EOL] if not path_root_directory . is_dir ( ) : [EOL] logger . warning ( [string] . format ( path_root_directory ) ) [EOL] return [string] [EOL] l_subdirs = [ str ( path_root_directory / _dir ) for _dir in next ( os . walk ( path_root_directory ) ) [ [number] ] ] [EOL] str_current_mypy_paths = get_env_data ( env_variable = [string] ) [EOL] if str_current_mypy_paths : [EOL] l_subdirs . insert ( [number] , str_current_mypy_paths ) [EOL] str_new_mypy_paths = [string] . join ( l_subdirs ) [EOL] set_env_data ( env_variable = [string] , env_str = str_new_mypy_paths ) [EOL] return str_new_mypy_paths [EOL] [EOL] [EOL] def append_directory_to_env_path_variable ( env_variable , directory ) : [EOL] [docstring] [EOL] path_directory = pathlib . Path ( directory ) . resolve ( ) [EOL] if not path_directory . is_dir ( ) : [EOL] logger . warning ( [string] . format ( env_variable , directory ) ) [EOL] return [string] [EOL] l_subdirs = [ str ( path_directory ) ] [EOL] str_current_paths = get_env_data ( env_variable = env_variable ) [EOL] if str_current_paths : [EOL] l_subdirs . insert ( [number] , str_current_paths ) [EOL] str_new_mypy_paths = [string] . join ( l_subdirs ) [EOL] set_env_data ( env_variable = env_variable , env_str = str_new_mypy_paths ) [EOL] return str_new_mypy_paths [EOL] [EOL] [EOL] def get_env_data ( env_variable ) : [EOL] [docstring] [EOL] if env_variable in os . environ : [EOL] env_data = os . environ [ env_variable ] [EOL] else : [EOL] env_data = [string] [EOL] return env_data [EOL] [EOL] [EOL] def set_env_data ( env_variable , env_str ) : [EOL] os . environ [ env_variable ] = env_str [EOL] [EOL] [EOL] @ click . group ( context_settings = CLICK_CONTEXT_SETTINGS ) def cli_main ( ) : [comment] [EOL] [docstring] [EOL] pass [comment] [EOL] [EOL] [EOL] @ cli_main . command ( [string] , context_settings = CLICK_CONTEXT_SETTINGS ) @ click . argument ( [string] , type = click . Path ( exists = False , file_okay = False , dir_okay = True ) ) def cli_append_immediate_subdirs_to_mypy_path ( root_directory ) : [comment] [EOL] [docstring] [EOL] response = append_subdirs_to_mypy_paths ( root_directory ) [comment] [EOL] print ( response ) [EOL] [EOL] [EOL] @ cli_main . command ( [string] , context_settings = CLICK_CONTEXT_SETTINGS ) @ click . argument ( [string] , type = click . Path ( exists = False , file_okay = False , dir_okay = True ) ) def cli_append_directory_to_mypy_path ( directory ) : [comment] [EOL] [docstring] [EOL] response = append_directory_to_env_path_variable ( env_variable = [string] , directory = directory ) [comment] [EOL] print ( response ) [EOL] [EOL] [EOL] @ cli_main . command ( [string] , context_settings = CLICK_CONTEXT_SETTINGS ) @ click . argument ( [string] , type = click . Path ( exists = False , file_okay = False , dir_okay = True ) ) def cli_append_directory_to_python_path ( directory ) : [comment] [EOL] [docstring] [EOL] response = append_directory_to_env_path_variable ( env_variable = [string] , directory = directory ) [comment] [EOL] print ( response ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] cli_main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List , Union [EOL] import typing [EOL] import builtins [EOL] import fnmatch [EOL] import sys [EOL] from typing import Any , List , Union [EOL] [EOL] [EOL] def str_in_list_non_case_sensitive ( string , list_of_strings ) : [EOL] [docstring] [EOL] string = string . lower ( ) [EOL] list_of_strings = [ my_string . lower ( ) for my_string in list_of_strings ] [EOL] if string in list_of_strings : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def del_double_elements ( list_elements ) : [EOL] [docstring] [EOL] [EOL] if not list_elements : [comment] [EOL] return list_elements [EOL] return list ( set ( list_elements ) ) [EOL] [EOL] [EOL] def str_in_list_to_lower ( list_of_strings ) : [EOL] [docstring] [EOL] if not list_of_strings : [comment] [EOL] return list_of_strings [EOL] [EOL] return [ string . lower ( ) for string in list_of_strings ] [EOL] [EOL] [EOL] def str_in_list_lower_and_de_double ( list_of_strings ) : [EOL] if not list_of_strings : [comment] [EOL] return list_of_strings [EOL] list_of_strings_lower = str_in_list_to_lower ( list_of_strings = list_of_strings ) [EOL] list_of_strings_lower_and_de_double = del_double_elements ( list_elements = list_of_strings_lower ) [EOL] return list_of_strings_lower_and_de_double [EOL] [EOL] [EOL] def ls_strip_elements ( ls_elements , chars = None ) : [EOL] [docstring] [EOL] [EOL] if ( not ls_elements ) or ( ls_elements is None ) : [comment] [EOL] return list ( ) [EOL] return [ s_element . strip ( chars ) for s_element in ls_elements ] [EOL] [EOL] [EOL] def ls_rstrip_elements ( ls_elements , chars = None ) : [EOL] [docstring] [EOL] [EOL] if ( not ls_elements ) or ( ls_elements is None ) : [comment] [EOL] return list ( ) [EOL] return [ s_element . rstrip ( chars ) for s_element in ls_elements ] [EOL] [EOL] [EOL] def ls_strip_list ( list_of_strings , chars = [string] ) : [EOL] [docstring] [EOL] [EOL] list_of_strings = ls_lstrip_list ( list_of_strings , chars ) [EOL] list_of_strings = ls_rstrip_list ( list_of_strings , chars ) [EOL] return list_of_strings [EOL] [EOL] [EOL] def ls_lstrip_list ( list_of_strings , chars = [string] ) : [EOL] [docstring] [EOL] while list_of_strings and list_of_strings [ [number] ] == chars : [EOL] list_of_strings = list_of_strings [ [number] : ] [EOL] return list_of_strings [EOL] [EOL] [EOL] def ls_rstrip_list ( list_of_strings , chars = [string] ) : [EOL] [docstring] [EOL] while list_of_strings and list_of_strings [ - [number] ] == chars : [EOL] list_of_strings = list_of_strings [ : - [number] ] [EOL] return list_of_strings [EOL] [EOL] [EOL] def ls_del_empty_elements ( ls_elements ) : [EOL] [docstring] [EOL] [EOL] return list ( filter ( None , ls_elements ) ) [EOL] [EOL] [EOL] def ls_strip_afz ( ls_elements ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] if ( not ls_elements ) or ( ls_elements is None ) : [comment] [EOL] return [ ] [EOL] [EOL] ls_newelements = [ ] [EOL] for s_element in ls_elements : [EOL] [comment] [EOL] s_element = s_element . strip ( ) [EOL] if ( s_element . startswith ( [string] ) and s_element . endswith ( [string] ) ) or ( s_element . startswith ( [string] ) and s_element . endswith ( [string] ) ) : [EOL] s_element = s_element [ [number] : - [number] ] [EOL] ls_newelements . append ( s_element ) [EOL] return ls_newelements [EOL] [EOL] [EOL] def ls_double_quote_if_contains_blank ( ls_elements ) : [EOL] if ( not ls_elements ) or ( ls_elements is None ) : [comment] [EOL] return [ ] [EOL] [EOL] ls_newelements = [ ] [EOL] for s_element in ls_elements : [EOL] if [string] in s_element : [EOL] s_element = [string] + s_element + [string] [EOL] ls_newelements . append ( s_element ) [EOL] return ls_newelements [EOL] [EOL] [EOL] def is_str_in_list_elements ( ls_elements , s_search_string ) : [EOL] [docstring] [EOL] [EOL] if not ls_elements : [comment] [EOL] return False [EOL] [EOL] for s_element in ls_elements : [EOL] if type ( s_element ) == str : [EOL] if s_search_string in s_element : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def ls_del_elements_containing ( ls_elements , s_search_string ) : [EOL] [docstring] [EOL] if ( not ls_elements ) or ( not s_search_string ) : [comment] [EOL] return ls_elements [EOL] [EOL] ls_results = [ ] [EOL] for s_element in ls_elements : [EOL] if s_search_string not in s_element : [EOL] ls_results . append ( s_element ) [EOL] return ls_results [EOL] [EOL] [EOL] def get_list_elements_containing ( ls_elements , s_search_string ) : [EOL] [docstring] [EOL] if ( not ls_elements ) or ( not s_search_string ) : [comment] [EOL] return ls_elements [EOL] [EOL] ls_results = [ ] [EOL] for s_element in ls_elements : [EOL] if type ( s_element ) == str : [EOL] if s_search_string in s_element : [EOL] ls_results . append ( s_element ) [EOL] else : [EOL] continue [EOL] return ls_results [EOL] [EOL] [EOL] def ls_elements_replace_strings ( ls_elements , s_old , s_new ) : [EOL] [docstring] [EOL] [EOL] if not ls_elements : [comment] [EOL] return ls_elements [EOL] [EOL] ls_results = [ ] [EOL] for s_element in ls_elements : [EOL] if type ( s_element ) == str : [EOL] s_element = s_element . replace ( s_old , s_new ) [EOL] ls_results . append ( s_element ) [EOL] return ls_results [EOL] [EOL] [EOL] def is_list_element_fnmatching ( ls_elements , s_fnmatch_searchpattern ) : [EOL] [docstring] [EOL] [EOL] if ( not ls_elements ) or ( ls_elements is None ) : [comment] [EOL] return False [EOL] [EOL] b_ls_fnmatching_searchstring = False [EOL] for s_element in ls_elements : [EOL] if type ( s_element ) == str : [EOL] if fnmatch . fnmatch ( s_element , s_fnmatch_searchpattern ) : [EOL] b_ls_fnmatching_searchstring = True [EOL] break [EOL] [EOL] return b_ls_fnmatching_searchstring [EOL] [EOL] [EOL] def get_elements_fnmatching ( ls_elements , s_fnmatch_searchpattern ) : [EOL] [docstring] [EOL] if not ls_elements : [comment] [EOL] return ls_elements [EOL] [EOL] ls_results = [ ] [EOL] for s_element in ls_elements : [EOL] if type ( s_element ) == str : [EOL] if fnmatch . fnmatch ( s_element , s_fnmatch_searchpattern ) : [EOL] ls_results . append ( s_element ) [EOL] else : [EOL] continue [EOL] return ls_results [EOL] [EOL] [EOL] def is_list_element_l_fnmatching ( ls_elements , ls_fnmatch_searchpattern ) : [EOL] [docstring] [EOL] [EOL] if not ls_elements : [comment] [EOL] return False [EOL] [EOL] if not ls_fnmatch_searchpattern : [comment] [EOL] return False [EOL] [EOL] for s_fnmatch_searchpattern in ls_fnmatch_searchpattern : [EOL] if fnmatch . filter ( ls_elements , s_fnmatch_searchpattern ) : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] def strip_and_add_non_empty_args_to_list ( * args ) : [EOL] [docstring] [EOL] [EOL] if ( not args ) or ( args is None ) : [comment] [EOL] return list ( ) [EOL] [EOL] ls_args = [ ] [EOL] for s_arg in args : [EOL] s_arg = s_arg . strip ( ) [EOL] if s_arg : [EOL] ls_args . append ( s_arg ) [EOL] return ls_args [EOL] [EOL] [EOL] def ls_substract ( ls_minuend , ls_subtrahend ) : [EOL] [docstring] [EOL] for s_element in ls_subtrahend : [EOL] if s_element in ls_minuend : [EOL] ls_minuend . remove ( s_element ) [EOL] return ls_minuend [EOL] [EOL] [EOL] def l_substract_all_keep_sorting ( l_minuend , l_subtrahend ) : [EOL] [docstring] [EOL] l_subtrahend = list ( set ( l_subtrahend ) ) [EOL] for s_element in l_subtrahend : [EOL] while s_element in l_minuend : [EOL] l_minuend . remove ( s_element ) [EOL] return l_minuend [EOL] [EOL] [EOL] def l_substract_unsorted_fast ( ls_minuend , ls_subtrahend ) : [EOL] [docstring] [EOL] l_result = list ( set ( ls_minuend ) - set ( ls_subtrahend ) ) [EOL] return l_result [EOL] [EOL] [EOL] def split_list_into_junks ( source_list , junk_size = sys . maxsize ) : [EOL] [docstring] [EOL] l_lists = [ ] [EOL] remaining_list = source_list [EOL] [EOL] while len ( remaining_list ) > junk_size : [EOL] part_list = remaining_list [ : junk_size ] [EOL] l_lists . append ( part_list ) [EOL] remaining_list = remaining_list [ junk_size : ] [EOL] l_lists . append ( remaining_list ) [EOL] return l_lists [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from . lib_list import * [EOL] [EOL] [comment] [EOL] from . import __init__conf__ [EOL] __title__ = __init__conf__ . title [EOL] __version__ = __init__conf__ . version [EOL] __name__ = __init__conf__ . name [EOL] __url__ = __init__conf__ . url [EOL] __author__ = __init__conf__ . author [EOL] __author_email__ = __init__conf__ . author_email [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
[comment] [EOL] from typing import List , Optional , Dict [EOL] import typing [EOL] import builtins [EOL] import sys [EOL] from typing import Optional [EOL] [EOL] [comment] [EOL] import cli_exit_tools [EOL] [EOL] [comment] [EOL] import click [EOL] [EOL] [comment] [EOL] try : [EOL] from . import __init__conf__ [EOL] from . import lib_list [EOL] except ( ImportError , ModuleNotFoundError ) : [comment] [EOL] [comment] [EOL] import __init__conf__ [comment] [EOL] import lib_list [comment] [EOL] [EOL] [EOL] [comment] [EOL] CLICK_CONTEXT_SETTINGS = dict ( help_option_names = [ [string] , [string] ] ) [EOL] [EOL] [EOL] def info ( ) : [EOL] [docstring] [EOL] __init__conf__ . print_info ( ) [EOL] [EOL] [EOL] @ click . group ( help = __init__conf__ . title , context_settings = CLICK_CONTEXT_SETTINGS ) @ click . version_option ( version = __init__conf__ . version , prog_name = __init__conf__ . shell_command , message = [string] . format ( __init__conf__ . shell_command ) ) @ click . option ( [string] , is_flag = True , type = bool , default = None , help = [string] ) def cli_main ( traceback = None ) : [EOL] if traceback is not None : [EOL] cli_exit_tools . config . traceback = traceback [EOL] [EOL] [EOL] @ cli_main . command ( [string] , context_settings = CLICK_CONTEXT_SETTINGS ) def cli_info ( ) : [EOL] [docstring] [EOL] info ( ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] try : [EOL] cli_main ( ) [EOL] except Exception as exc : [EOL] cli_exit_tools . print_exception_message ( ) [EOL] sys . exit ( cli_exit_tools . get_system_exit_code ( exc ) ) [EOL] finally : [EOL] cli_exit_tools . flush_streams ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
name = [string] [EOL] title = [string] [EOL] version = [string] [EOL] url = [string] [EOL] author = [string] [EOL] author_email = [string] [EOL] shell_command = [string] [EOL] [EOL] [EOL] def print_info ( ) : [EOL] print ( [string] ) [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0