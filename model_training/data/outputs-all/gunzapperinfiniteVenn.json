	0
	0
[EOL] from typing import Tuple , Set , Any , List [EOL] import typing [EOL] import random [EOL] import string [EOL] from copy import deepcopy [EOL] from itertools import permutations [EOL] [EOL] import pytest [EOL] from hypothesis import given , assume , strategies as st [EOL] [EOL] from set2net import set2net as s2n [EOL] [EOL] [EOL] def test_purge_simple ( ) : [EOL] [docstring] [EOL] result = s2n . purge ( { [number] , [number] , [number] , [number] , [number] , [number] } , [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] ) [EOL] assert result == { [number] } [EOL] result = s2n . purge ( { [number] , [number] , [number] , [number] , [number] } , [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] ) [EOL] assert result == set ( ) [EOL] result = s2n . purge ( [ ] , [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] ) [EOL] assert result == set ( ) [EOL] result = s2n . purge ( { [number] } , [ ] ) [EOL] assert result == { [number] } [EOL] [EOL] [EOL] def test_purge_other_sets_no_change ( ) : [EOL] [docstring] [EOL] [EOL] other_sets = [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] [EOL] copy_of_other_sets = deepcopy ( other_sets ) [EOL] assert other_sets == copy_of_other_sets [EOL] assert other_sets is not copy_of_other_sets [EOL] [EOL] s2n . purge ( { [number] , [number] , [number] , [number] , [number] , [number] } , other_sets ) [EOL] assert other_sets == copy_of_other_sets [EOL] [EOL] [EOL] def test_purge_any_iterable ( ) : [EOL] [docstring] [EOL] result = s2n . purge ( range ( [number] ) , [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] ) [EOL] assert result == { [number] } [EOL] result = s2n . purge ( { [number] , [number] , [number] , [number] , [number] } , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] ) [EOL] assert result == set ( ) [EOL] [EOL] [EOL] def test_purge_no ( ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError ) : [EOL] s2n . purge ( [number] , [ { [number] , [number] , [number] } , { [number] , [number] , [number] } , { [number] , [number] , [number] } ] ) [EOL] with pytest . raises ( TypeError ) : [EOL] s2n . purge ( { [number] , [number] , [number] , [number] , [number] } , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [EOL] def test_purge_torture ( ) : [EOL] [docstring] [EOL] for i in range ( [number] ) : [EOL] my_string = list ( string . ascii_uppercase [ : i ] ) [EOL] random . shuffle ( my_string ) [EOL] other_strings = list ( permutations ( string . ascii_uppercase [ : [number] ] , [number] ) ) [EOL] random . shuffle ( other_strings ) [EOL] res = s2n . purge ( my_string , other_strings ) [EOL] assert res == set ( ) [EOL] [EOL] [EOL] @ given ( my = st . lists ( st . characters ( ) ) , others = st . lists ( st . iterables ( st . characters ( ) ) ) ) def test_hypothesis ( my , others ) : [EOL] assume ( len ( others ) > [number] ) [EOL] res = s2n . purge ( my , others ) [EOL] assert res <= set ( my ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0