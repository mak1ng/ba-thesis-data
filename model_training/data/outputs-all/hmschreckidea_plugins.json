import sys [EOL] import os . path [EOL] for x in sys . path : [EOL] if x != os . path . dirname ( sys . argv [ [number] ] ) and x != [string] : sys . stdout . write ( x + chr ( [number] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] import traceback [EOL] [EOL] ERROR_WRONG_USAGE = [number] [EOL] ERROR_EXCEPTION = [number] [EOL] [EOL] def usage ( ) : [EOL] sys . stderr . write ( [string] ) [EOL] sys . stderr . flush ( ) [EOL] exit ( ERROR_WRONG_USAGE ) [EOL] [EOL] def do_list_available_packages ( ) : [EOL] try : [EOL] from conda . cli . main_search import common [EOL] index = common . get_index_trap ( ) [EOL] except ImportError : [EOL] from conda . cli . main_search import get_index [EOL] index = get_index ( ) [EOL] [EOL] for pkg in index . values ( ) : [EOL] sys . stdout . write ( [string] . join ( [ pkg [ [string] ] , pkg [ [string] ] , [string] . join ( pkg [ [string] ] ) ] ) + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] [EOL] def do_list_channels ( ) : [EOL] import conda . config as config [EOL] if hasattr ( config , [string] ) : [EOL] channels = config . get_channel_urls ( ) [EOL] else : [EOL] channels = config . context . channels [EOL] for channel in channels : [EOL] if channel != [string] : [EOL] sys . stdout . write ( channel + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] retcode = [number] [EOL] try : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] cmd = sys . argv [ [number] ] [EOL] if cmd == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] usage ( ) [EOL] return [EOL] do_list_available_packages ( ) [EOL] elif cmd == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] usage ( ) [EOL] return [EOL] do_list_channels ( ) [EOL] else : [EOL] usage ( ) [EOL] except Exception : [EOL] traceback . print_exc ( ) [EOL] exit ( ERROR_EXCEPTION ) [EOL] exit ( retcode ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Set , Iterator , Any , Type , List , Dict [EOL] import python [EOL] import typing [EOL] import optparse [EOL] [docstring] [EOL] [EOL] import glob [EOL] import itertools [EOL] import json [EOL] import optparse [EOL] import os [EOL] import os . path [EOL] import random [EOL] import re [EOL] import socket [EOL] [EOL] from coverage import env [EOL] from coverage . backward import iitems , string_class [EOL] from coverage . debug import _TEST_NAME_FILE [EOL] from coverage . files import PathAliases [EOL] from coverage . misc import CoverageException , file_be_gone , isolate_module [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] class CoverageData ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __init__ ( self , debug = None ) : [EOL] [docstring] [EOL] self . _debug = debug [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _lines = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _arcs = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _file_tracers = { } [EOL] [EOL] [comment] [EOL] self . _runs = [ ] [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( klass = self . __class__ . __name__ , lines = [string] if self . _lines is None else [string] . format ( len ( self . _lines ) ) , arcs = [string] if self . _arcs is None else [string] . format ( len ( self . _arcs ) ) , tracers = [string] . format ( len ( self . _file_tracers ) ) , runs = [string] . format ( len ( self . _runs ) ) , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def has_arcs ( self ) : [EOL] [docstring] [EOL] return self . _has_arcs ( ) [EOL] [EOL] def lines ( self , filename ) : [EOL] [docstring] [EOL] if self . _arcs is not None : [EOL] arcs = self . _arcs . get ( filename ) [EOL] if arcs is not None : [EOL] all_lines = itertools . chain . from_iterable ( arcs ) [EOL] return list ( set ( l for l in all_lines if l > [number] ) ) [EOL] elif self . _lines is not None : [EOL] return self . _lines . get ( filename ) [EOL] return None [EOL] [EOL] def arcs ( self , filename ) : [EOL] [docstring] [EOL] if self . _arcs is not None : [EOL] if filename in self . _arcs : [EOL] return self . _arcs [ filename ] [EOL] return None [EOL] [EOL] def file_tracer ( self , filename ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if filename in ( self . _arcs or self . _lines or { } ) : [EOL] return self . _file_tracers . get ( filename , [string] ) [EOL] return None [EOL] [EOL] def run_infos ( self ) : [EOL] [docstring] [EOL] return self . _runs [EOL] [EOL] def measured_files ( self ) : [EOL] [docstring] [EOL] return list ( self . _arcs or self . _lines or { } ) [EOL] [EOL] def line_counts ( self , fullpath = False ) : [EOL] [docstring] [EOL] summ = { } [EOL] if fullpath : [EOL] filename_fn = lambda f : f [EOL] else : [EOL] filename_fn = os . path . basename [EOL] for filename in self . measured_files ( ) : [EOL] summ [ filename_fn ( filename ) ] = len ( self . lines ( filename ) ) [EOL] return summ [EOL] [EOL] def __nonzero__ ( self ) : [EOL] return bool ( self . _lines or self . _arcs ) [EOL] [EOL] __bool__ = __nonzero__ [EOL] [EOL] def read_fileobj ( self , file_obj ) : [EOL] [docstring] [EOL] data = self . _read_raw_data ( file_obj ) [EOL] [EOL] self . _lines = self . _arcs = None [EOL] [EOL] if [string] in data : [EOL] self . _lines = data [ [string] ] [EOL] if [string] in data : [EOL] self . _arcs = dict ( ( fname , [ tuple ( pair ) for pair in arcs ] ) for fname , arcs in iitems ( data [ [string] ] ) ) [EOL] self . _file_tracers = data . get ( [string] , { } ) [EOL] self . _runs = data . get ( [string] , [ ] ) [EOL] [EOL] self . _validate ( ) [EOL] [EOL] def read_file ( self , filename ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( filename , ) ) [EOL] try : [EOL] with self . _open_for_reading ( filename ) as f : [EOL] self . read_fileobj ( f ) [EOL] except Exception as exc : [EOL] raise CoverageException ( [string] % ( filename , exc . __class__ . __name__ , exc , ) ) [EOL] [EOL] _GO_AWAY = [string] [EOL] [EOL] @ classmethod def _open_for_reading ( cls , filename ) : [EOL] [docstring] [EOL] return open ( filename , [string] ) [EOL] [EOL] @ classmethod def _read_raw_data ( cls , file_obj ) : [EOL] [docstring] [EOL] go_away = file_obj . read ( len ( cls . _GO_AWAY ) ) [EOL] if go_away != cls . _GO_AWAY : [EOL] raise CoverageException ( [string] ) [EOL] return json . load ( file_obj ) [EOL] [EOL] @ classmethod def _read_raw_data_file ( cls , filename ) : [EOL] [docstring] [EOL] with cls . _open_for_reading ( filename ) as f : [EOL] return cls . _read_raw_data ( f ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def add_lines ( self , line_data ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( len ( line_data ) , sum ( len ( lines ) for lines in line_data . values ( ) ) ) ) [EOL] if self . _has_arcs ( ) : [EOL] raise CoverageException ( [string] ) [EOL] [EOL] if self . _lines is None : [EOL] self . _lines = { } [EOL] for filename , linenos in iitems ( line_data ) : [EOL] if filename in self . _lines : [EOL] new_linenos = set ( self . _lines [ filename ] ) [EOL] new_linenos . update ( linenos ) [EOL] linenos = new_linenos [EOL] self . _lines [ filename ] = list ( linenos ) [EOL] [EOL] self . _validate ( ) [EOL] [EOL] def add_arcs ( self , arc_data ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( len ( arc_data ) , sum ( len ( arcs ) for arcs in arc_data . values ( ) ) ) ) [EOL] if self . _has_lines ( ) : [EOL] raise CoverageException ( [string] ) [EOL] [EOL] if self . _arcs is None : [EOL] self . _arcs = { } [EOL] for filename , arcs in iitems ( arc_data ) : [EOL] if filename in self . _arcs : [EOL] new_arcs = set ( self . _arcs [ filename ] ) [EOL] new_arcs . update ( arcs ) [EOL] arcs = new_arcs [EOL] self . _arcs [ filename ] = list ( arcs ) [EOL] [EOL] self . _validate ( ) [EOL] [EOL] def add_file_tracers ( self , file_tracers ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( len ( file_tracers ) , ) ) [EOL] [EOL] existing_files = self . _arcs or self . _lines or { } [EOL] for filename , plugin_name in iitems ( file_tracers ) : [EOL] if filename not in existing_files : [EOL] raise CoverageException ( [string] % ( filename , ) ) [EOL] existing_plugin = self . _file_tracers . get ( filename ) [EOL] if existing_plugin is not None and plugin_name != existing_plugin : [EOL] raise CoverageException ( [string] % ( filename , existing_plugin , plugin_name , ) ) [EOL] self . _file_tracers [ filename ] = plugin_name [EOL] [EOL] self . _validate ( ) [EOL] [EOL] def add_run_info ( self , ** kwargs ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( kwargs , ) ) [EOL] if not self . _runs : [EOL] self . _runs = [ { } ] [EOL] self . _runs [ [number] ] . update ( kwargs ) [EOL] self . _validate ( ) [EOL] [EOL] def touch_file ( self , filename ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( filename , ) ) [EOL] if not self . _has_arcs ( ) and not self . _has_lines ( ) : [EOL] raise CoverageException ( [string] ) [EOL] [EOL] if self . _has_arcs ( ) : [EOL] where = self . _arcs [EOL] else : [EOL] where = self . _lines [EOL] where . setdefault ( filename , [ ] ) [EOL] [EOL] self . _validate ( ) [EOL] [EOL] def write_fileobj ( self , file_obj ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] file_data = { } [EOL] [EOL] if self . _has_arcs ( ) : [EOL] file_data [ [string] ] = self . _arcs [EOL] [EOL] if self . _has_lines ( ) : [EOL] file_data [ [string] ] = self . _lines [EOL] [EOL] if self . _file_tracers : [EOL] file_data [ [string] ] = self . _file_tracers [EOL] [EOL] if self . _runs : [EOL] file_data [ [string] ] = self . _runs [EOL] [EOL] [comment] [EOL] file_obj . write ( self . _GO_AWAY ) [EOL] json . dump ( file_data , file_obj ) [EOL] [EOL] def write_file ( self , filename ) : [EOL] [docstring] [EOL] if self . _debug and self . _debug . should ( [string] ) : [EOL] self . _debug . write ( [string] % ( filename , ) ) [EOL] with open ( filename , [string] ) as fdata : [EOL] self . write_fileobj ( fdata ) [EOL] [EOL] def erase ( self ) : [EOL] [docstring] [EOL] self . _lines = None [EOL] self . _arcs = None [EOL] self . _file_tracers = { } [EOL] self . _runs = [ ] [EOL] self . _validate ( ) [EOL] [EOL] def update ( self , other_data , aliases = None ) : [EOL] [docstring] [EOL] if self . _has_lines ( ) and other_data . _has_arcs ( ) : [EOL] raise CoverageException ( [string] ) [EOL] if self . _has_arcs ( ) and other_data . _has_lines ( ) : [EOL] raise CoverageException ( [string] ) [EOL] [EOL] aliases = aliases or PathAliases ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for filename in other_data . measured_files ( ) : [EOL] other_plugin = other_data . file_tracer ( filename ) [EOL] filename = aliases . map ( filename ) [EOL] this_plugin = self . file_tracer ( filename ) [EOL] if this_plugin is None : [EOL] if other_plugin : [EOL] self . _file_tracers [ filename ] = other_plugin [EOL] elif this_plugin != other_plugin : [EOL] raise CoverageException ( [string] % ( filename , this_plugin , other_plugin , ) ) [EOL] [EOL] [comment] [EOL] self . _runs . extend ( other_data . _runs ) [EOL] [EOL] [comment] [EOL] if other_data . _has_lines ( ) : [EOL] if self . _lines is None : [EOL] self . _lines = { } [EOL] for filename , file_lines in iitems ( other_data . _lines ) : [EOL] filename = aliases . map ( filename ) [EOL] if filename in self . _lines : [EOL] lines = set ( self . _lines [ filename ] ) [EOL] lines . update ( file_lines ) [EOL] file_lines = list ( lines ) [EOL] self . _lines [ filename ] = file_lines [EOL] [EOL] [comment] [EOL] if other_data . _has_arcs ( ) : [EOL] if self . _arcs is None : [EOL] self . _arcs = { } [EOL] for filename , file_arcs in iitems ( other_data . _arcs ) : [EOL] filename = aliases . map ( filename ) [EOL] if filename in self . _arcs : [EOL] arcs = set ( self . _arcs [ filename ] ) [EOL] arcs . update ( file_arcs ) [EOL] file_arcs = list ( arcs ) [EOL] self . _arcs [ filename ] = file_arcs [EOL] [EOL] self . _validate ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _validate ( self ) : [EOL] [docstring] [EOL] if env . TESTING : [EOL] self . _validate_invariants ( ) [EOL] [EOL] def _validate_invariants ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] assert not ( self . _has_lines ( ) and self . _has_arcs ( ) ) , ( [string] ) [EOL] [EOL] [comment] [EOL] if self . _has_lines ( ) : [EOL] for fname , lines in iitems ( self . _lines ) : [EOL] assert isinstance ( fname , string_class ) , [string] % ( fname , ) [EOL] assert all ( isinstance ( x , int ) for x in lines ) , ( [string] % ( fname , lines ) ) [EOL] [EOL] [comment] [EOL] if self . _has_arcs ( ) : [EOL] for fname , arcs in iitems ( self . _arcs ) : [EOL] assert isinstance ( fname , string_class ) , [string] % ( fname , ) [EOL] assert all ( isinstance ( x , int ) and isinstance ( y , int ) for x , y in arcs ) , ( [string] % ( fname , arcs ) ) [EOL] [EOL] [comment] [EOL] for fname , plugin in iitems ( self . _file_tracers ) : [EOL] assert isinstance ( fname , string_class ) , ( [string] % ( fname , ) ) [EOL] assert plugin and isinstance ( plugin , string_class ) , ( [string] % ( fname , plugin ) ) [EOL] [EOL] [comment] [EOL] for val in self . _runs : [EOL] assert isinstance ( val , dict ) [EOL] for key in val : [EOL] assert isinstance ( key , string_class ) , [string] % ( key , ) [EOL] [EOL] def add_to_hash ( self , filename , hasher ) : [EOL] [docstring] [EOL] if self . _has_arcs ( ) : [EOL] hasher . update ( sorted ( self . arcs ( filename ) or [ ] ) ) [EOL] else : [EOL] hasher . update ( sorted ( self . lines ( filename ) or [ ] ) ) [EOL] hasher . update ( self . file_tracer ( filename ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _has_lines ( self ) : [EOL] [docstring] [EOL] return self . _lines is not None [EOL] [EOL] def _has_arcs ( self ) : [EOL] [docstring] [EOL] return self . _arcs is not None [EOL] [EOL] [EOL] class CoverageDataFiles ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , basename = None , warn = None ) : [EOL] [docstring] [EOL] self . warn = warn [EOL] [comment] [EOL] self . filename = os . path . abspath ( basename or [string] ) [EOL] [EOL] def erase ( self , parallel = False ) : [EOL] [docstring] [EOL] file_be_gone ( self . filename ) [EOL] if parallel : [EOL] data_dir , local = os . path . split ( self . filename ) [EOL] localdot = local + [string] [EOL] pattern = os . path . join ( os . path . abspath ( data_dir ) , localdot ) [EOL] for filename in glob . glob ( pattern ) : [EOL] file_be_gone ( filename ) [EOL] [EOL] def read ( self , data ) : [EOL] [docstring] [EOL] if os . path . exists ( self . filename ) : [EOL] data . read_file ( self . filename ) [EOL] [EOL] def write ( self , data , suffix = None ) : [EOL] [docstring] [EOL] filename = self . filename [EOL] if suffix is True : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extra = [string] [EOL] if _TEST_NAME_FILE : [comment] [EOL] with open ( _TEST_NAME_FILE ) as f : [EOL] test_name = f . read ( ) [EOL] extra = [string] + test_name [EOL] suffix = [string] % ( socket . gethostname ( ) , extra , os . getpid ( ) , random . randint ( [number] , [number] ) ) [EOL] [EOL] if suffix : [EOL] filename += [string] + suffix [EOL] data . write_file ( filename ) [EOL] [EOL] def combine_parallel_data ( self , data , aliases = None , data_paths = None ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] data_dir , local = os . path . split ( self . filename ) [EOL] localdot = local + [string] [EOL] [EOL] data_paths = data_paths or [ data_dir ] [EOL] files_to_combine = [ ] [EOL] for p in data_paths : [EOL] if os . path . isfile ( p ) : [EOL] files_to_combine . append ( os . path . abspath ( p ) ) [EOL] elif os . path . isdir ( p ) : [EOL] pattern = os . path . join ( os . path . abspath ( p ) , localdot ) [EOL] files_to_combine . extend ( glob . glob ( pattern ) ) [EOL] else : [EOL] raise CoverageException ( [string] % ( p , ) ) [EOL] [EOL] for f in files_to_combine : [EOL] new_data = CoverageData ( ) [EOL] try : [EOL] new_data . read_file ( f ) [EOL] except CoverageException as exc : [EOL] if self . warn : [EOL] [comment] [EOL] [comment] [EOL] self . warn ( str ( exc ) ) [EOL] else : [EOL] data . update ( new_data , aliases = aliases ) [EOL] file_be_gone ( f ) [EOL] [EOL] [EOL] def canonicalize_json_data ( data ) : [EOL] [docstring] [EOL] for fname , lines in iitems ( data . get ( [string] , { } ) ) : [EOL] data [ [string] ] [ fname ] = sorted ( lines ) [EOL] for fname , arcs in iitems ( data . get ( [string] , { } ) ) : [EOL] data [ [string] ] [ fname ] = sorted ( arcs ) [EOL] [EOL] [EOL] def pretty_data ( data ) : [EOL] [docstring] [EOL] [comment] [EOL] out = json . dumps ( data , indent = [number] , sort_keys = True ) [EOL] [comment] [EOL] out = re . sub ( [string] , [string] , out ) [EOL] [comment] [EOL] out = re . sub ( [string] , [string] , out ) [EOL] return out [EOL] [EOL] [EOL] def debug_main ( args ) : [EOL] [docstring] [EOL] parser = optparse . OptionParser ( ) [EOL] parser . add_option ( [string] , [string] , action = [string] , help = [string] , ) [EOL] options , args = parser . parse_args ( args ) [EOL] [EOL] for filename in ( args or [ [string] ] ) : [EOL] print ( [string] . format ( filename ) ) [EOL] data = CoverageData . _read_raw_data_file ( filename ) [EOL] if options . canonical : [EOL] canonicalize_json_data ( data ) [EOL] print ( pretty_data ( data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import sys [EOL] debug_main ( sys . argv [ [number] : ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $python.helpers.coveragepy.coverage.data.CoverageData$ 0 0 0 0 0 0 0 0 $python.helpers.coveragepy.coverage.data.CoverageData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $python.helpers.coveragepy.coverage.data.CoverageData
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import zipimport [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os . path [EOL] import types [EOL] import zipimport [EOL] [EOL] from coverage import env , files [EOL] from coverage . misc import ( contract , CoverageException , expensive , NoSource , join_regex , isolate_module , ) [EOL] from coverage . parser import PythonParser [EOL] from coverage . phystokens import source_token_lines , source_encoding [EOL] from coverage . plugin import FileReporter [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] @ contract ( returns = [string] ) def read_python_source ( filename ) : [EOL] [docstring] [EOL] with open ( filename , [string] ) as f : [EOL] return f . read ( ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] [EOL] @ contract ( returns = [string] ) def get_python_source ( filename ) : [EOL] [docstring] [EOL] base , ext = os . path . splitext ( filename ) [EOL] if ext == [string] and env . WINDOWS : [EOL] exts = [ [string] , [string] ] [EOL] else : [EOL] exts = [ ext ] [EOL] [EOL] for ext in exts : [EOL] try_filename = base + ext [EOL] if os . path . exists ( try_filename ) : [EOL] [comment] [EOL] source = read_python_source ( try_filename ) [EOL] break [EOL] [EOL] [comment] [EOL] source = get_zip_bytes ( try_filename ) [EOL] if source is not None : [EOL] break [EOL] else : [EOL] [comment] [EOL] exc_msg = [string] % ( filename , ) [EOL] exc_msg += [string] [EOL] raise NoSource ( exc_msg ) [EOL] [EOL] [comment] [EOL] source = source . replace ( [string] , [string] ) [EOL] source = source . decode ( source_encoding ( source ) , [string] ) [EOL] [EOL] [comment] [EOL] if source and source [ - [number] ] != [string] : [EOL] source += [string] [EOL] [EOL] return source [EOL] [EOL] [EOL] @ contract ( returns = [string] ) def get_zip_bytes ( filename ) : [EOL] [docstring] [EOL] markers = [ [string] + os . sep , [string] + os . sep ] [EOL] for marker in markers : [EOL] if marker in filename : [EOL] parts = filename . split ( marker ) [EOL] try : [EOL] zi = zipimport . zipimporter ( parts [ [number] ] + marker [ : - [number] ] ) [EOL] except zipimport . ZipImportError : [EOL] continue [EOL] try : [EOL] data = zi . get_data ( parts [ [number] ] ) [EOL] except IOError : [EOL] continue [EOL] return data [EOL] return None [EOL] [EOL] [EOL] class PythonFileReporter ( FileReporter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , morf , coverage = None ) : [EOL] self . coverage = coverage [EOL] [EOL] if hasattr ( morf , [string] ) : [EOL] filename = morf . __file__ [EOL] elif isinstance ( morf , types . ModuleType ) : [EOL] [comment] [EOL] [comment] [EOL] raise CoverageException ( [string] . format ( morf ) ) [EOL] else : [EOL] filename = morf [EOL] [EOL] filename = files . unicode_filename ( filename ) [EOL] [EOL] [comment] [EOL] if filename . endswith ( ( [string] , [string] ) ) : [EOL] filename = filename [ : - [number] ] [EOL] elif filename . endswith ( [string] ) : [comment] [EOL] filename = filename [ : - [number] ] + [string] [EOL] [EOL] super ( PythonFileReporter , self ) . __init__ ( files . canonical_filename ( filename ) ) [EOL] [EOL] if hasattr ( morf , [string] ) : [EOL] name = morf . __name__ [EOL] name = name . replace ( [string] , os . sep ) + [string] [EOL] name = files . unicode_filename ( name ) [EOL] else : [EOL] name = files . relative_filename ( filename ) [EOL] self . relname = name [EOL] [EOL] self . _source = None [EOL] self . _parser = None [EOL] self . _statements = None [EOL] self . _excluded = None [EOL] [EOL] @ contract ( returns = [string] ) def relative_filename ( self ) : [EOL] return self . relname [EOL] [EOL] @ property def parser ( self ) : [EOL] [docstring] [EOL] if self . _parser is None : [EOL] self . _parser = PythonParser ( filename = self . filename , exclude = self . coverage . _exclude_regex ( [string] ) , ) [EOL] self . _parser . parse_source ( ) [EOL] return self . _parser [EOL] [EOL] def lines ( self ) : [EOL] [docstring] [EOL] return self . parser . statements [EOL] [EOL] def excluded_lines ( self ) : [EOL] [docstring] [EOL] return self . parser . excluded [EOL] [EOL] def translate_lines ( self , lines ) : [EOL] return self . parser . translate_lines ( lines ) [EOL] [EOL] def translate_arcs ( self , arcs ) : [EOL] return self . parser . translate_arcs ( arcs ) [EOL] [EOL] @ expensive def no_branch_lines ( self ) : [EOL] no_branch = self . parser . lines_matching ( join_regex ( self . coverage . config . partial_list ) , join_regex ( self . coverage . config . partial_always_list ) ) [EOL] return no_branch [EOL] [EOL] @ expensive def arcs ( self ) : [EOL] return self . parser . arcs ( ) [EOL] [EOL] @ expensive def exit_counts ( self ) : [EOL] return self . parser . exit_counts ( ) [EOL] [EOL] def missing_arc_description ( self , start , end , executed_arcs = None ) : [EOL] return self . parser . missing_arc_description ( start , end , executed_arcs ) [EOL] [EOL] @ contract ( returns = [string] ) def source ( self ) : [EOL] if self . _source is None : [EOL] self . _source = get_python_source ( self . filename ) [EOL] return self . _source [EOL] [EOL] def should_be_python ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] _ , ext = os . path . splitext ( self . filename ) [EOL] [EOL] [comment] [EOL] if ext . startswith ( [string] ) : [EOL] return True [EOL] [comment] [EOL] if not ext : [EOL] return True [EOL] [comment] [EOL] return False [EOL] [EOL] def source_token_lines ( self ) : [EOL] return source_token_lines ( self . source ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from coverage . cmdline import main [EOL] sys . exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] from coverage import files [EOL] from coverage . misc import contract , _needs_to_implement [EOL] [EOL] [EOL] class CoveragePlugin ( object ) : [EOL] [docstring] [EOL] [EOL] def file_tracer ( self , filename ) : [comment] [EOL] [docstring] [EOL] return None [EOL] [EOL] def file_reporter ( self , filename ) : [comment] [EOL] [docstring] [EOL] _needs_to_implement ( self , [string] ) [EOL] [EOL] def sys_info ( self ) : [EOL] [docstring] [EOL] return [ ] [EOL] [EOL] [EOL] class FileTracer ( object ) : [EOL] [docstring] [EOL] [EOL] def source_filename ( self ) : [EOL] [docstring] [EOL] _needs_to_implement ( self , [string] ) [EOL] [EOL] def has_dynamic_source_filename ( self ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] def dynamic_source_filename ( self , filename , frame ) : [comment] [EOL] [docstring] [EOL] return None [EOL] [EOL] def line_number_range ( self , frame ) : [EOL] [docstring] [EOL] lineno = frame . f_lineno [EOL] return lineno , lineno [EOL] [EOL] [EOL] class FileReporter ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , filename ) : [EOL] [docstring] [EOL] self . filename = filename [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self ) [EOL] [EOL] def relative_filename ( self ) : [EOL] [docstring] [EOL] return files . relative_filename ( self . filename ) [EOL] [EOL] @ contract ( returns = [string] ) def source ( self ) : [EOL] [docstring] [EOL] with open ( self . filename , [string] ) as f : [EOL] return f . read ( ) . decode ( [string] ) [EOL] [EOL] def lines ( self ) : [EOL] [docstring] [EOL] _needs_to_implement ( self , [string] ) [EOL] [EOL] def excluded_lines ( self ) : [EOL] [docstring] [EOL] return set ( ) [EOL] [EOL] def translate_lines ( self , lines ) : [EOL] [docstring] [EOL] return set ( lines ) [EOL] [EOL] def arcs ( self ) : [EOL] [docstring] [EOL] return set ( ) [EOL] [EOL] def no_branch_lines ( self ) : [EOL] [docstring] [EOL] return set ( ) [EOL] [EOL] def translate_arcs ( self , arcs ) : [EOL] [docstring] [EOL] return arcs [EOL] [EOL] def exit_counts ( self ) : [EOL] [docstring] [EOL] return { } [EOL] [EOL] def missing_arc_description ( self , start , end , executed_arcs = None ) : [comment] [EOL] [docstring] [EOL] return [string] . format ( start = start , end = end ) [EOL] [EOL] def source_token_lines ( self ) : [EOL] [docstring] [EOL] for line in self . source ( ) . splitlines ( ) : [EOL] yield [ ( [string] , line ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return isinstance ( other , FileReporter ) and self . filename == other . filename [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not ( self == other ) [EOL] [EOL] def __lt__ ( self , other ) : [EOL] return self . filename < other . filename [EOL] [EOL] def __le__ ( self , other ) : [EOL] return self . filename <= other . filename [EOL] [EOL] def __gt__ ( self , other ) : [EOL] return self . filename > other . filename [EOL] [EOL] def __ge__ ( self , other ) : [EOL] return self . filename >= other . filename [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any [EOL] import python [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] from coverage import env [EOL] from coverage . backward import iitems [EOL] from coverage . files import abs_file [EOL] from coverage . misc import CoverageException , isolate_module [EOL] from coverage . pytracer import PyTracer [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] try : [EOL] [comment] [EOL] from coverage . tracer import CTracer , CFileDisposition [EOL] except ImportError : [EOL] [comment] [EOL] if os . getenv ( [string] ) == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sys . stderr . write ( [string] ) [EOL] sys . exit ( [number] ) [EOL] CTracer = None [EOL] [EOL] [EOL] class FileDisposition ( object ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def should_start_context ( frame ) : [EOL] [docstring] [EOL] fn_name = frame . f_code . co_name [EOL] if fn_name . startswith ( [string] ) : [EOL] return fn_name [EOL] [EOL] [EOL] class Collector ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _collectors = [ ] [EOL] [EOL] [comment] [EOL] SUPPORTED_CONCURRENCIES = set ( [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] def __init__ ( self , should_trace , check_include , timid , branch , warn , concurrency ) : [EOL] [docstring] [EOL] self . should_trace = should_trace [EOL] self . check_include = check_include [EOL] self . warn = warn [EOL] self . branch = branch [EOL] self . threading = None [EOL] [EOL] self . concur_id_func = None [EOL] [EOL] [comment] [EOL] these_concurrencies = self . SUPPORTED_CONCURRENCIES . intersection ( concurrency ) [EOL] if len ( these_concurrencies ) > [number] : [EOL] raise CoverageException ( [string] % concurrency ) [EOL] self . concurrency = these_concurrencies . pop ( ) if these_concurrencies else [string] [EOL] [EOL] try : [EOL] if self . concurrency == [string] : [EOL] import greenlet [EOL] self . concur_id_func = greenlet . getcurrent [EOL] elif self . concurrency == [string] : [EOL] import eventlet . greenthread [comment] [EOL] self . concur_id_func = eventlet . greenthread . getcurrent [EOL] elif self . concurrency == [string] : [EOL] import gevent [comment] [EOL] self . concur_id_func = gevent . getcurrent [EOL] elif self . concurrency == [string] or not self . concurrency : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import threading [EOL] self . threading = threading [EOL] else : [EOL] raise CoverageException ( [string] % concurrency ) [EOL] except ImportError : [EOL] raise CoverageException ( [string] % ( self . concurrency , ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . wtw = int ( os . getenv ( [string] , [number] ) ) [EOL] [EOL] self . reset ( ) [EOL] [EOL] if timid : [EOL] [comment] [EOL] self . _trace_class = PyTracer [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] self . _trace_class = CTracer or PyTracer [EOL] [EOL] if self . _trace_class is CTracer : [EOL] self . file_disposition_class = CFileDisposition [EOL] self . supports_plugins = True [EOL] else : [EOL] self . file_disposition_class = FileDisposition [EOL] self . supports_plugins = False [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( id ( self ) , self . tracer_name ( ) ) [EOL] [EOL] def tracer_name ( self ) : [EOL] [docstring] [EOL] return self . _trace_class . __name__ [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . data = { } [EOL] [EOL] [comment] [EOL] self . contexts = { } [EOL] self . contexts [ None ] = self . data [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . file_tracers = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if env . PYPY : [EOL] import __pypy__ [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . should_trace_cache = __pypy__ . newdict ( [string] ) [EOL] else : [EOL] self . should_trace_cache = { } [EOL] [EOL] [comment] [EOL] self . tracers = [ ] [EOL] [EOL] def _start_tracer ( self ) : [EOL] [docstring] [EOL] tracer = self . _trace_class ( ) [EOL] tracer . data = self . data [EOL] tracer . trace_arcs = self . branch [EOL] tracer . should_trace = self . should_trace [EOL] tracer . should_trace_cache = self . should_trace_cache [EOL] tracer . warn = self . warn [EOL] [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . concur_id_func = self . concur_id_func [EOL] elif self . concur_id_func : [EOL] raise CoverageException ( [string] % ( self . concurrency , self . tracer_name ( ) , ) ) [EOL] [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . file_tracers = self . file_tracers [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . threading = self . threading [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . check_include = self . check_include [EOL] if self . wtw : [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . should_start_context = should_start_context [EOL] if hasattr ( tracer , [string] ) : [EOL] tracer . switch_context = self . switch_context [EOL] [EOL] fn = tracer . start ( ) [EOL] self . tracers . append ( tracer ) [EOL] [EOL] return fn [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _installation_trace ( self , frame , event , arg ) : [EOL] [docstring] [EOL] [comment] [EOL] sys . settrace ( None ) [EOL] [comment] [EOL] fn = self . _start_tracer ( ) [EOL] [comment] [EOL] [comment] [EOL] if fn : [EOL] fn = fn ( frame , event , arg ) [EOL] [comment] [EOL] return fn [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] if self . _collectors : [EOL] self . _collectors [ - [number] ] . pause ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] traces0 = [ ] [EOL] fn0 = sys . gettrace ( ) [EOL] if fn0 : [EOL] tracer0 = getattr ( fn0 , [string] , None ) [EOL] if tracer0 : [EOL] traces0 = getattr ( tracer0 , [string] , [ ] ) [EOL] [EOL] try : [EOL] [comment] [EOL] fn = self . _start_tracer ( ) [EOL] except : [EOL] if self . _collectors : [EOL] self . _collectors [ - [number] ] . resume ( ) [EOL] raise [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . _collectors . append ( self ) [EOL] [EOL] [comment] [EOL] for args in traces0 : [EOL] ( frame , event , arg ) , lineno = args [EOL] try : [EOL] fn ( frame , event , arg , lineno = lineno ) [EOL] except TypeError : [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . threading : [EOL] self . threading . settrace ( self . _installation_trace ) [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] assert self . _collectors [EOL] assert self . _collectors [ - [number] ] is self , ( [string] % ( self , self . _collectors [ - [number] ] ) ) [EOL] [EOL] self . pause ( ) [EOL] self . tracers = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . _collectors . pop ( ) [EOL] if self . _collectors : [EOL] self . _collectors [ - [number] ] . resume ( ) [EOL] [EOL] def pause ( self ) : [EOL] [docstring] [EOL] for tracer in self . tracers : [EOL] tracer . stop ( ) [EOL] stats = tracer . get_stats ( ) [EOL] if stats : [EOL] print ( [string] ) [EOL] for k in sorted ( stats . keys ( ) ) : [EOL] print ( [string] % ( k , stats [ k ] ) ) [EOL] if self . threading : [EOL] self . threading . settrace ( None ) [EOL] [EOL] def resume ( self ) : [EOL] [docstring] [EOL] for tracer in self . tracers : [EOL] tracer . start ( ) [EOL] if self . threading : [EOL] self . threading . settrace ( self . _installation_trace ) [EOL] else : [EOL] self . _start_tracer ( ) [EOL] [EOL] def switch_context ( self , new_context ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] data = self . contexts . setdefault ( new_context , { } ) [EOL] for tracer in self . tracers : [EOL] tracer . data = data [EOL] [EOL] def save_data ( self , covdata ) : [EOL] [docstring] [EOL] def abs_file_dict ( d ) : [EOL] [docstring] [EOL] return dict ( ( abs_file ( k ) , v ) for k , v in iitems ( d ) ) [EOL] [EOL] if self . branch : [EOL] covdata . add_arcs ( abs_file_dict ( self . data ) ) [EOL] else : [EOL] covdata . add_lines ( abs_file_dict ( self . data ) ) [EOL] covdata . add_file_tracers ( abs_file_dict ( self . file_tracers ) ) [EOL] [EOL] if self . wtw : [EOL] [comment] [EOL] import pprint [EOL] out_file = [string] . format ( os . getpid ( ) ) [EOL] with open ( out_file , [string] ) as wtw_out : [EOL] pprint . pprint ( self . contexts , wtw_out ) [EOL] [EOL] self . reset ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] __import__ ( [string] ) . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Any , Dict [EOL] import typing [EOL] import _importlib_modulespec [EOL] [docstring] [EOL] [EOL] import sys [EOL] [EOL] from six import iteritems [EOL] from sphinxcontrib . napoleon . docstring import GoogleDocstring , NumpyDocstring [EOL] from sphinxcontrib . napoleon . _version import __version__ [EOL] assert __version__ [comment] [EOL] [EOL] [EOL] class Config ( object ) : [EOL] [docstring] [EOL] _config_values = { [string] : ( True , [string] ) , [string] : ( True , [string] ) , [string] : ( False , [string] ) , [string] : ( True , [string] ) , [string] : ( False , [string] ) , [string] : ( False , [string] ) , [string] : ( False , [string] ) , [string] : ( False , [string] ) , [string] : ( True , [string] ) , [string] : ( True , [string] ) , } [EOL] [EOL] def __init__ ( self , ** settings ) : [EOL] for name , ( default , rebuild ) in iteritems ( self . _config_values ) : [EOL] setattr ( self , name , default ) [EOL] for name , value in iteritems ( settings ) : [EOL] setattr ( self , name , value ) [EOL] [EOL] [EOL] def setup ( app ) : [EOL] [docstring] [EOL] from sphinx . application import Sphinx [EOL] if not isinstance ( app , Sphinx ) : [EOL] return [comment] [EOL] [EOL] app . connect ( [string] , _process_docstring ) [EOL] app . connect ( [string] , _skip_member ) [EOL] [EOL] for name , ( default , rebuild ) in iteritems ( Config . _config_values ) : [EOL] app . add_config_value ( name , default , rebuild ) [EOL] [EOL] [EOL] def _process_docstring ( app , what , name , obj , options , lines ) : [EOL] [docstring] [EOL] result_lines = lines [EOL] if app . config . napoleon_numpy_docstring : [EOL] docstring = NumpyDocstring ( result_lines , app . config , app , what , name , obj , options ) [EOL] result_lines = docstring . lines ( ) [EOL] if app . config . napoleon_google_docstring : [EOL] docstring = GoogleDocstring ( result_lines , app . config , app , what , name , obj , options ) [EOL] result_lines = docstring . lines ( ) [EOL] lines [ : ] = result_lines [ : ] [EOL] [EOL] [EOL] def _skip_member ( app , what , name , obj , skip , options ) : [EOL] [docstring] [EOL] has_doc = getattr ( obj , [string] , False ) [EOL] is_member = ( what == [string] or what == [string] or what == [string] ) [EOL] if name != [string] and name != [string] and has_doc and is_member : [EOL] cls_is_owner = False [EOL] if what == [string] or what == [string] : [EOL] if sys . version_info [ [number] ] < [number] : [EOL] cls = getattr ( obj , [string] , getattr ( obj , [string] , None ) ) [EOL] cls_is_owner = ( cls and hasattr ( cls , name ) and name in cls . __dict__ ) [EOL] elif sys . version_info [ [number] ] >= [number] : [EOL] qualname = getattr ( obj , [string] , [string] ) [EOL] cls_path , _ , _ = qualname . rpartition ( [string] ) [EOL] if cls_path : [EOL] try : [EOL] if [string] in cls_path : [EOL] import importlib [EOL] import functools [EOL] [EOL] mod = importlib . import_module ( obj . __module__ ) [EOL] mod_path = cls_path . split ( [string] ) [EOL] cls = functools . reduce ( getattr , mod_path , mod ) [EOL] else : [EOL] cls = obj . __globals__ [ cls_path ] [EOL] except : [EOL] cls_is_owner = False [EOL] else : [EOL] cls_is_owner = ( cls and hasattr ( cls , name ) and name in cls . __dict__ ) [EOL] else : [EOL] cls_is_owner = False [EOL] else : [EOL] cls_is_owner = True [EOL] [EOL] if what == [string] or cls_is_owner : [EOL] is_special = name . startswith ( [string] ) and name . endswith ( [string] ) [EOL] is_private = not is_special and name . startswith ( [string] ) [EOL] inc_special = app . config . napoleon_include_special_with_doc [EOL] inc_private = app . config . napoleon_include_private_with_doc [EOL] if ( is_special and inc_special ) or ( is_private and inc_private ) : [EOL] return False [EOL] return skip [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.bool,builtins.str
[docstring]	0
	0
	0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from distutils . version import LooseVersion [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def check_version ( v , check ) : [EOL] [docstring] [EOL] try : [EOL] return LooseVersion ( v ) >= LooseVersion ( check ) [EOL] except TypeError : [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from pydev_ipython . inputhook import stdin_ready [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TCL_DONT_WAIT = [number] << [number] [EOL] [EOL] def create_inputhook_tk ( app ) : [EOL] def inputhook_tk ( ) : [EOL] while app . dooneevent ( TCL_DONT_WAIT ) == [number] : [EOL] if stdin_ready ( ) : [EOL] break [EOL] return [number] [EOL] return inputhook_tk [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] from pydev_ipython . version import check_version [EOL] from pydev_ipython . qt_loaders import ( load_qt , QT_API_PYSIDE , QT_API_PYQT , QT_API_PYQT_DEFAULT , loaded_api , QT_API_PYQT5 ) [EOL] [EOL] [comment] [EOL] def matplotlib_options ( mpl ) : [EOL] if mpl is None : [EOL] return [EOL] mpqt = mpl . rcParams . get ( [string] , None ) [EOL] if mpqt is None : [EOL] mpqt = mpl . rcParams . get ( [string] , None ) [EOL] [EOL] if mpqt is None : [EOL] return None [EOL] if mpqt . lower ( ) == [string] : [EOL] return [ QT_API_PYSIDE ] [EOL] elif mpqt . lower ( ) == [string] : [EOL] return [ QT_API_PYQT_DEFAULT ] [EOL] elif mpqt . lower ( ) == [string] : [EOL] return [ QT_API_PYQT5 ] [EOL] raise ImportError ( [string] % mpqt ) [EOL] [EOL] def get_options ( ) : [EOL] [docstring] [EOL] [comment] [EOL] loaded = loaded_api ( ) [EOL] if loaded is not None : [EOL] return [ loaded ] [EOL] [EOL] mpl = sys . modules . get ( [string] , None ) [EOL] [EOL] if mpl is not None and not check_version ( mpl . __version__ , [string] ) : [EOL] [comment] [EOL] return [ QT_API_PYQT_DEFAULT ] [EOL] [EOL] if os . environ . get ( [string] , None ) is None : [EOL] [comment] [EOL] return matplotlib_options ( mpl ) or [ QT_API_PYQT_DEFAULT , QT_API_PYSIDE , QT_API_PYQT5 ] [EOL] [EOL] [comment] [EOL] return None [EOL] [EOL] api_opts = get_options ( ) [EOL] if api_opts is not None : [EOL] QtCore , QtGui , QtSvg , QT_API = load_qt ( api_opts ) [EOL] [EOL] else : [comment] [EOL] from pydev_ipython . qt import QtCore , QtGui , QtSvg , QT_API [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import gtk , gobject [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def _main_quit ( * args , ** kwargs ) : [EOL] gtk . main_quit ( ) [EOL] return False [EOL] [EOL] def create_inputhook_gtk ( stdin_file ) : [EOL] def inputhook_gtk ( ) : [EOL] gobject . io_add_watch ( stdin_file , gobject . IO_IN , _main_quit ) [EOL] gtk . main ( ) [EOL] return [number] [EOL] return inputhook_gtk [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] from __future__ import print_function [EOL] [EOL] import os [EOL] import codeop [EOL] [EOL] from IPython . core . error import UsageError [EOL] from IPython . core . completer import IPCompleter [EOL] from IPython . core . interactiveshell import InteractiveShell , InteractiveShellABC [EOL] from IPython . core . usage import default_banner_parts [EOL] from IPython . utils . strdispatch import StrDispatch [EOL] import IPython . core . release as IPythonRelease [EOL] try : [EOL] from IPython . terminal . interactiveshell import TerminalInteractiveShell [EOL] except ImportError : [EOL] [comment] [EOL] from IPython . frontend . terminal . interactiveshell import TerminalInteractiveShell [EOL] try : [EOL] from traitlets import CBool , Unicode [EOL] except ImportError : [EOL] from IPython . utils . traitlets import CBool , Unicode [EOL] from IPython . core import release [EOL] [EOL] from _pydev_bundle . pydev_imports import xmlrpclib [EOL] from _pydevd_bundle . pydevd_constants import dict_keys [EOL] [EOL] default_pydev_banner_parts = default_banner_parts [EOL] [EOL] default_pydev_banner = [string] . join ( default_pydev_banner_parts ) [EOL] [EOL] def show_in_pager ( self , strng , * args , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] print ( strng ) [EOL] [EOL] def create_editor_hook ( pydev_host , pydev_client_port ) : [EOL] [EOL] def call_editor ( filename , line = [number] , wait = True ) : [EOL] [docstring] [EOL] if line is None : [EOL] line = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] filename = os . path . abspath ( filename ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] server = xmlrpclib . Server ( [string] % ( pydev_host , pydev_client_port ) ) [EOL] server . IPythonEditor ( filename , str ( line ) ) [EOL] [EOL] if wait : [EOL] try : [EOL] raw_input ( [string] ) [EOL] except NameError : [EOL] input ( [string] ) [EOL] return call_editor [EOL] [EOL] [EOL] [EOL] class PyDevIPCompleter ( IPCompleter ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] IPCompleter . __init__ ( self , * args , ** kwargs ) [EOL] [comment] [EOL] self . matchers . remove ( self . python_matches ) [EOL] [EOL] class PyDevTerminalInteractiveShell ( TerminalInteractiveShell ) : [EOL] banner1 = Unicode ( default_pydev_banner , config = True , help = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] term_title = CBool ( False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] readline_use = CBool ( False ) [EOL] [comment] [EOL] [comment] [EOL] autoindent = CBool ( False ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] colors_force = CBool ( True ) [EOL] colors = Unicode ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] simple_prompt = CBool ( True ) [EOL] [EOL] [comment] [EOL] @ staticmethod def enable_gui ( gui = None , app = None ) : [EOL] [docstring] [EOL] [comment] [EOL] from pydev_ipython . inputhook import enable_gui as real_enable_gui [EOL] try : [EOL] return real_enable_gui ( gui , app ) [EOL] except ValueError as e : [EOL] raise UsageError ( [string] % e ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def init_hooks ( self ) : [EOL] super ( PyDevTerminalInteractiveShell , self ) . init_hooks ( ) [EOL] self . set_hook ( [string] , show_in_pager ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def showtraceback ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import traceback ; traceback . print_exc ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _new_completer_011 ( self ) : [EOL] return PyDevIPCompleter ( self , self . user_ns , self . user_global_ns , self . readline_omit__names , self . alias_manager . alias_table , self . has_readline ) [EOL] [EOL] [EOL] def _new_completer_012 ( self ) : [EOL] completer = PyDevIPCompleter ( shell = self , namespace = self . user_ns , global_namespace = self . user_global_ns , alias_table = self . alias_manager . alias_table , use_readline = self . has_readline , config = self . config , ) [EOL] return completer [EOL] [EOL] [EOL] def _new_completer_100 ( self ) : [EOL] completer = PyDevIPCompleter ( shell = self , namespace = self . user_ns , global_namespace = self . user_global_ns , alias_table = self . alias_manager . alias_table , use_readline = self . has_readline , parent = self , ) [EOL] return completer [EOL] [EOL] def _new_completer_234 ( self ) : [EOL] [comment] [EOL] completer = PyDevIPCompleter ( shell = self , namespace = self . user_ns , global_namespace = self . user_global_ns , use_readline = self . has_readline , parent = self , ) [EOL] return completer [EOL] [EOL] def _new_completer_500 ( self ) : [EOL] completer = PyDevIPCompleter ( shell = self , namespace = self . user_ns , global_namespace = self . user_global_ns , use_readline = False , parent = self ) [EOL] return completer [EOL] [EOL] def add_completer_hooks ( self ) : [EOL] from IPython . core . completerlib import module_completer , magic_run_completer , cd_completer [EOL] try : [EOL] from IPython . core . completerlib import reset_completer [EOL] except ImportError : [EOL] [comment] [EOL] reset_completer = None [EOL] self . configurables . append ( self . Completer ) [EOL] [EOL] [comment] [EOL] sdisp = self . strdispatchers . get ( [string] , StrDispatch ( ) ) [EOL] self . strdispatchers [ [string] ] = sdisp [EOL] self . Completer . custom_completers = sdisp [EOL] [EOL] self . set_hook ( [string] , module_completer , str_key = [string] ) [EOL] self . set_hook ( [string] , module_completer , str_key = [string] ) [EOL] self . set_hook ( [string] , magic_run_completer , str_key = [string] ) [EOL] self . set_hook ( [string] , cd_completer , str_key = [string] ) [EOL] if reset_completer : [EOL] self . set_hook ( [string] , reset_completer , str_key = [string] ) [EOL] [EOL] def init_completer ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if IPythonRelease . _version_major >= [number] : [EOL] self . Completer = self . _new_completer_500 ( ) [EOL] elif IPythonRelease . _version_major >= [number] : [EOL] self . Completer = self . _new_completer_234 ( ) [EOL] elif IPythonRelease . _version_major >= [number] : [EOL] self . Completer = self . _new_completer_100 ( ) [EOL] elif IPythonRelease . _version_minor >= [number] : [EOL] self . Completer = self . _new_completer_012 ( ) [EOL] else : [EOL] self . Completer = self . _new_completer_011 ( ) [EOL] [EOL] self . add_completer_hooks ( ) [EOL] [EOL] if IPythonRelease . _version_major <= [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if self . has_readline : [EOL] self . set_readline_completer ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def init_alias ( self ) : [EOL] [comment] [EOL] [comment] [EOL] InteractiveShell . init_alias ( self ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def ask_exit ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] super ( PyDevTerminalInteractiveShell , self ) . ask_exit ( ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def init_magics ( self ) : [EOL] super ( PyDevTerminalInteractiveShell , self ) . init_magics ( ) [EOL] [comment] [EOL] [EOL] InteractiveShellABC . register ( PyDevTerminalInteractiveShell ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class _PyDevFrontEnd : [EOL] [EOL] version = release . __version__ [EOL] [EOL] def __init__ ( self , show_banner = True ) : [EOL] [comment] [EOL] if hasattr ( PyDevTerminalInteractiveShell , [string] ) and PyDevTerminalInteractiveShell . _instance is not None : [EOL] self . ipython = PyDevTerminalInteractiveShell . _instance [EOL] else : [EOL] self . ipython = PyDevTerminalInteractiveShell . instance ( ) [EOL] [EOL] if show_banner : [EOL] [comment] [EOL] [comment] [EOL] self . ipython . show_banner ( ) [EOL] [EOL] self . _curr_exec_line = [number] [EOL] self . _curr_exec_lines = [ ] [EOL] [EOL] [EOL] def update ( self , globals , locals ) : [EOL] ns = self . ipython . user_ns [EOL] [EOL] for key in dict_keys ( self . ipython . user_ns ) : [EOL] locals [ key ] = ns [ key ] [EOL] [EOL] self . ipython . user_global_ns . clear ( ) [EOL] self . ipython . user_global_ns . update ( globals ) [EOL] self . ipython . user_ns = locals [EOL] [EOL] if hasattr ( self . ipython , [string] ) and hasattr ( self . ipython . history_manager , [string] ) : [EOL] self . ipython . history_manager . save_thread . pydev_do_not_trace = True [comment] [EOL] [EOL] def complete ( self , string ) : [EOL] try : [EOL] if string : [EOL] return self . ipython . complete ( None , line = string , cursor_pos = string . __len__ ( ) ) [EOL] else : [EOL] return self . ipython . complete ( string , string , [number] ) [EOL] except : [EOL] [comment] [EOL] pass [EOL] [EOL] def is_complete ( self , string ) : [EOL] [comment] [EOL] [EOL] if string in ( [string] , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return True [EOL] else : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] clean_string = string . rstrip ( [string] ) [EOL] if not clean_string . endswith ( [string] ) : [EOL] clean_string += [string] [EOL] [EOL] is_complete = codeop . compile_command ( clean_string , [string] , [string] ) [EOL] except Exception : [EOL] [comment] [EOL] [comment] [EOL] is_complete = True [EOL] return is_complete [EOL] [EOL] [EOL] def getCompletions ( self , text , act_tok ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] TYPE_IPYTHON = [string] [EOL] TYPE_IPYTHON_MAGIC = [string] [EOL] _line , ipython_completions = self . complete ( text ) [EOL] [EOL] from _pydev_bundle . _pydev_completer import Completer [EOL] completer = Completer ( self . get_namespace ( ) , None ) [EOL] ret = completer . complete ( act_tok ) [EOL] append = ret . append [EOL] ip = self . ipython [EOL] pydev_completions = set ( [ f [ [number] ] for f in ret ] ) [EOL] for ipython_completion in ipython_completions : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if ipython_completion not in pydev_completions : [EOL] pydev_completions . add ( ipython_completion ) [EOL] inf = ip . object_inspect ( ipython_completion ) [EOL] if inf [ [string] ] == [string] : [EOL] pydev_type = TYPE_IPYTHON_MAGIC [EOL] else : [EOL] pydev_type = TYPE_IPYTHON [EOL] pydev_doc = inf [ [string] ] [EOL] if pydev_doc is None : [EOL] pydev_doc = [string] [EOL] append ( ( ipython_completion , pydev_doc , [string] , pydev_type ) ) [EOL] return ret [EOL] except : [EOL] import traceback ; traceback . print_exc ( ) [EOL] return [ ] [EOL] [EOL] [EOL] def get_namespace ( self ) : [EOL] return self . ipython . user_ns [EOL] [EOL] def clear_buffer ( self ) : [EOL] del self . _curr_exec_lines [ : ] [EOL] [EOL] def add_exec ( self , line ) : [EOL] if self . _curr_exec_lines : [EOL] self . _curr_exec_lines . append ( line ) [EOL] [EOL] buf = [string] . join ( self . _curr_exec_lines ) [EOL] [EOL] if self . is_complete ( buf ) : [EOL] self . _curr_exec_line += [number] [EOL] self . ipython . run_cell ( buf ) [EOL] del self . _curr_exec_lines [ : ] [EOL] return False [comment] [EOL] [EOL] return True [comment] [EOL] else : [EOL] [EOL] if not self . is_complete ( line ) : [EOL] [comment] [EOL] self . _curr_exec_lines . append ( line ) [EOL] return True [comment] [EOL] else : [EOL] self . _curr_exec_line += [number] [EOL] self . ipython . run_cell ( line , store_history = True ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return False [comment] [EOL] [EOL] def is_automagic ( self ) : [EOL] return self . ipython . automagic [EOL] [EOL] def get_greeting_msg ( self ) : [EOL] return [string] % self . version [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import IPython . lib . inputhook [EOL] import pydev_ipython . inputhook [EOL] IPython . lib . inputhook . enable_gui = pydev_ipython . inputhook . enable_gui [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for name in pydev_ipython . inputhook . __all__ : [EOL] setattr ( IPython . lib . inputhook , name , getattr ( pydev_ipython . inputhook , name ) ) [EOL] [EOL] [EOL] class _PyDevFrontEndContainer : [EOL] _instance = None [EOL] _last_host_port = None [EOL] [EOL] def get_pydev_frontend ( pydev_host , pydev_client_port , show_banner = True ) : [EOL] if _PyDevFrontEndContainer . _instance is None : [EOL] _PyDevFrontEndContainer . _instance = _PyDevFrontEnd ( show_banner = show_banner ) [EOL] [EOL] if _PyDevFrontEndContainer . _last_host_port != ( pydev_host , pydev_client_port ) : [EOL] _PyDevFrontEndContainer . _last_host_port = pydev_host , pydev_client_port [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _PyDevFrontEndContainer . _instance . ipython . hooks [ [string] ] = create_editor_hook ( pydev_host , pydev_client_port ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return _PyDevFrontEndContainer . _instance [EOL] [EOL] [EOL]	
import sys [EOL] [EOL] def versionok_for_gui ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . hexversion >= [number] and sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . platform . startswith ( [string] ) or sys . platform . startswith ( [string] ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] import sys [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] class UserModuleDeleter : [EOL] [docstring] [EOL] def __init__ ( self , namelist = None , pathlist = None ) : [EOL] if namelist is None : [EOL] namelist = [ ] [EOL] self . namelist = namelist [EOL] if pathlist is None : [EOL] pathlist = [ ] [EOL] self . pathlist = pathlist [EOL] try : [EOL] [comment] [EOL] import pydev_pysrc , inspect [EOL] self . pathlist . append ( os . path . dirname ( pydev_pysrc . __file__ ) ) [EOL] except : [EOL] pass [EOL] self . previous_modules = list ( sys . modules . keys ( ) ) [EOL] [EOL] def is_module_blacklisted ( self , modname , modpath ) : [EOL] for path in [ sys . prefix ] + self . pathlist : [EOL] if modpath . startswith ( path ) : [EOL] return True [EOL] else : [EOL] return set ( modname . split ( [string] ) ) & set ( self . namelist ) [EOL] [EOL] def run ( self , verbose = False ) : [EOL] [docstring] [EOL] log = [ ] [EOL] modules_copy = dict ( sys . modules ) [EOL] for modname , module in modules_copy . items ( ) : [EOL] if modname == [string] : [EOL] print ( modname , module ) [EOL] print ( self . previous_modules ) [EOL] if modname not in self . previous_modules : [EOL] modpath = getattr ( module , [string] , None ) [EOL] if modpath is None : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] if not self . is_module_blacklisted ( modname , modpath ) : [EOL] log . append ( modname ) [EOL] del sys . modules [ modname ] [EOL] if verbose and log : [EOL] print ( [string] % ( [string] , [string] + [string] . join ( log ) ) ) [EOL] [EOL] __umd__ = None [EOL] [EOL] _get_globals_callback = None [EOL] def _set_globals_function ( get_globals ) : [EOL] global _get_globals_callback [EOL] _get_globals_callback = get_globals [EOL] def _get_globals ( ) : [EOL] [docstring] [EOL] if _get_globals_callback is not None : [EOL] return _get_globals_callback ( ) [EOL] else : [EOL] try : [EOL] from __main__ import __dict__ as namespace [EOL] except ImportError : [EOL] try : [EOL] [comment] [EOL] import __main__ [EOL] namespace = __main__ . __dict__ [EOL] except : [EOL] namespace [EOL] shell = namespace . get ( [string] ) [EOL] if shell is not None and hasattr ( shell , [string] ) : [EOL] [comment] [EOL] return shell . user_ns [EOL] else : [EOL] [comment] [EOL] return namespace [EOL] return namespace [EOL] [EOL] [EOL] def runfile ( filename , args = None , wdir = None , namespace = None ) : [EOL] [docstring] [EOL] try : [EOL] if hasattr ( filename , [string] ) : [EOL] filename = filename . decode ( [string] ) [EOL] except ( UnicodeError , TypeError ) : [EOL] pass [EOL] global __umd__ [EOL] if os . environ . get ( [string] , [string] ) . lower ( ) == [string] : [EOL] if __umd__ is None : [EOL] namelist = os . environ . get ( [string] , None ) [EOL] if namelist is not None : [EOL] namelist = namelist . split ( [string] ) [EOL] __umd__ = UserModuleDeleter ( namelist = namelist ) [EOL] else : [EOL] verbose = os . environ . get ( [string] , [string] ) . lower ( ) == [string] [EOL] __umd__ . run ( verbose = verbose ) [EOL] if args is not None and not isinstance ( args , basestring ) : [EOL] raise TypeError ( [string] ) [EOL] if namespace is None : [EOL] namespace = _get_globals ( ) [EOL] if [string] in namespace : [EOL] old_file = namespace [ [string] ] [EOL] else : [EOL] old_file = None [EOL] namespace [ [string] ] = filename [EOL] sys . argv = [ filename ] [EOL] if args is not None : [EOL] for arg in args . split ( ) : [EOL] sys . argv . append ( arg ) [EOL] if wdir is not None : [EOL] try : [EOL] if hasattr ( wdir , [string] ) : [EOL] wdir = wdir . decode ( [string] ) [EOL] except ( UnicodeError , TypeError ) : [EOL] pass [EOL] os . chdir ( wdir ) [EOL] execfile ( filename , namespace ) [EOL] sys . argv = [ [string] ] [EOL] if old_file is None : [EOL] del namespace [ [string] ] [EOL] else : [EOL] namespace [ [string] ] = old_file [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def overrides ( method ) : [EOL] [docstring] [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def implements ( method ) : [EOL] return [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] if __name__ == [string] : [EOL] from gi . repository import Gtk [EOL] [EOL] [EOL] def hello_world ( wigdet , data = None ) : [EOL] print ( [string] ) [EOL] [EOL] def delete_event ( widget , event , data = None ) : [EOL] return False [EOL] [EOL] def destroy ( widget , data = None ) : [EOL] Gtk . main_quit ( ) [EOL] [EOL] window = Gtk . Window ( Gtk . WindowType . TOPLEVEL ) [EOL] window . connect ( [string] , delete_event ) [EOL] window . connect ( [string] , destroy ) [EOL] button = Gtk . Button ( [string] ) [EOL] button . connect ( [string] , hello_world , None ) [EOL] [EOL] window . add ( button ) [EOL] button . show ( ) [EOL] window . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] import unittest [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] IS_JYTHON = [number] [EOL] if sys . platform . find ( [string] ) != - [number] : [EOL] IS_JYTHON = [number] [EOL] from _pydev_bundle . _pydev_jy_imports_tipper import ismethod [EOL] from _pydev_bundle . _pydev_jy_imports_tipper import isclass [EOL] from _pydev_bundle . _pydev_jy_imports_tipper import dir_obj [EOL] from _pydev_bundle import _pydev_jy_imports_tipper [EOL] from java . lang . reflect import Method [comment] [EOL] from java . lang import System [comment] [EOL] from java . lang import String [comment] [EOL] from java . lang . System import arraycopy [comment] [EOL] from java . lang . System import out [comment] [EOL] import java . lang . String [comment] [EOL] import org . python . core . PyDictionary [comment] [EOL] [EOL] [EOL] __DBG = [number] [EOL] def dbg ( s ) : [EOL] if __DBG : [EOL] sys . stdout . write ( [string] % ( s , ) ) [EOL] [EOL] [EOL] [EOL] class TestMod ( unittest . TestCase ) : [EOL] [EOL] def assert_args ( self , tok , args , tips ) : [EOL] for a in tips : [EOL] if tok == a [ [number] ] : [EOL] self . assertEquals ( args , a [ [number] ] ) [EOL] return [EOL] raise AssertionError ( [string] , tok , tips ) [EOL] [EOL] def assert_in ( self , tok , tips ) : [EOL] self . assertEquals ( [number] , len ( tips [ [number] ] ) ) [EOL] for a in tips : [EOL] if tok == a [ [number] ] : [EOL] return a [EOL] s = [string] [EOL] for a in tips : [EOL] s += str ( a ) [EOL] s += [string] [EOL] raise AssertionError ( [string] % ( tok , s ) ) [EOL] [EOL] def test_imports1a ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] [EOL] def test_imports1c ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] [EOL] def test_imports1b ( self ) : [EOL] try : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] self . fail ( [string] ) [EOL] except : [EOL] pass [EOL] [EOL] def test_imports1 ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] ret = self . assert_in ( [string] , tip ) [EOL] [comment] [EOL] [EOL] def test_imports2 ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] ret = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( [string] , ret [ [number] ] ) [EOL] [EOL] def test_imports2a ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] ret = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( [string] , ret [ [number] ] ) [EOL] [EOL] def test_imports3 ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] ret = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( [string] , ret [ [number] ] ) [EOL] [EOL] def test_tip_on_string ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] self . assert_in ( [string] , tip ) [EOL] self . assert_in ( [string] , tip ) [EOL] [EOL] def test_imports ( self ) : [EOL] tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [ [number] ] [EOL] self . assert_in ( [string] , tip ) [EOL] self . assert_in ( [string] , tip ) [EOL] self . assert_in ( [string] , tip ) [EOL] [EOL] def test_imports5 ( self ) : [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_CLASS ) , tup [ [number] ] ) [EOL] [EOL] tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [ [number] ] [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_IMPORT ) , tup [ [number] ] ) [EOL] [EOL] tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [ [number] ] [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_FUNCTION ) , tup [ [number] ] ) [EOL] [EOL] tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [ [number] ] [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_FUNCTION ) , tup [ [number] ] ) [EOL] self . assertEquals ( [string] , tup [ [number] ] ) [EOL] [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_FUNCTION ) , tup [ [number] ] ) [EOL] self . assertEquals ( [string] , tup [ [number] ] ) [EOL] self . assert_ ( tup [ [number] ] . find ( [string] ) == - [number] ) [EOL] [EOL] tup = self . assert_in ( [string] , tip ) [EOL] self . assertEquals ( str ( _pydev_jy_imports_tipper . TYPE_FUNCTION ) , tup [ [number] ] ) [EOL] self . assert_ ( tup [ [number] ] . find ( [string] ) == - [number] ) [EOL] self . assert_ ( tup [ [number] ] . find ( [string] ) != - [number] ) [EOL] [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] self . assert_in ( [string] , tip ) [EOL] [EOL] f , tip = _pydev_jy_imports_tipper . generate_tip ( [string] ) [EOL] assert f . endswith ( [string] ) [EOL] self . assert_in ( [string] , tip ) [EOL] [EOL] [EOL] class TestSearch ( unittest . TestCase ) : [EOL] [EOL] def test_search_on_jython ( self ) : [EOL] self . assertEqual ( [string] , _pydev_jy_imports_tipper . search_definition ( [string] ) [ [number] ] [ [number] ] . split ( os . sep ) [ - [number] ] ) [EOL] self . assertEqual ( [number] , _pydev_jy_imports_tipper . search_definition ( [string] ) [ [number] ] [ [number] ] ) [EOL] [EOL] self . assertEqual ( [string] , _pydev_jy_imports_tipper . search_definition ( [string] ) [ [number] ] [ [number] ] . split ( os . sep ) [ - [number] ] ) [EOL] self . assertNotEqual ( [number] , _pydev_jy_imports_tipper . search_definition ( [string] ) [ [number] ] [ [number] ] ) [EOL] [EOL] [comment] [EOL] [EOL] class TestCompl ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] unittest . TestCase . setUp ( self ) [EOL] [EOL] def tearDown ( self ) : [EOL] unittest . TestCase . tearDown ( self ) [EOL] [EOL] def test_getting_info_on_jython ( self ) : [EOL] [EOL] dbg ( [string] ) [EOL] assert not ismethod ( java ) [ [number] ] [EOL] assert not isclass ( java ) [EOL] assert _pydev_jy_imports_tipper . ismodule ( java ) [EOL] [EOL] dbg ( [string] ) [EOL] assert not ismethod ( java . lang ) [ [number] ] [EOL] assert not isclass ( java . lang ) [EOL] assert _pydev_jy_imports_tipper . ismodule ( java . lang ) [EOL] [EOL] dbg ( [string] ) [EOL] assert not ismethod ( Method ) [ [number] ] [EOL] assert isclass ( Method ) [EOL] [EOL] dbg ( [string] ) [EOL] assert not ismethod ( System ) [ [number] ] [EOL] assert isclass ( System ) [EOL] [EOL] dbg ( [string] ) [EOL] assert not ismethod ( System ) [ [number] ] [EOL] assert isclass ( String ) [EOL] assert len ( dir_obj ( String ) ) > [number] [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( arraycopy ) [EOL] assert isMet [ [number] ] [EOL] assert isMet [ [number] ] [ [number] ] . basic_as_str ( ) == [string] [EOL] assert not isclass ( arraycopy ) [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( out ) [EOL] assert not isMet [ [number] ] [EOL] assert not isclass ( out ) [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( out . println ) [comment] [EOL] assert isMet [ [number] ] [EOL] assert len ( isMet [ [number] ] ) == [number] [EOL] self . assertEquals ( isMet [ [number] ] [ [number] ] . basic_as_str ( ) , [string] ) [EOL] assert isMet [ [number] ] [ [number] ] . basic_as_str ( ) == [string] [EOL] assert not isclass ( out . println ) [comment] [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( str ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert not isclass ( str ) [EOL] [EOL] [EOL] def met1 ( ) : [EOL] a = [number] [EOL] return a [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( met1 ) [EOL] assert isMet [ [number] ] [EOL] assert isMet [ [number] ] [ [number] ] . basic_as_str ( ) == [string] [EOL] assert not isclass ( met1 ) [EOL] [EOL] def met2 ( arg1 , arg2 , * vararg , ** kwarg ) : [EOL] [docstring] [EOL] [EOL] a = [number] [EOL] return a [EOL] [EOL] dbg ( [string] ) [EOL] isMet = ismethod ( met2 ) [EOL] assert isMet [ [number] ] [EOL] assert isMet [ [number] ] [ [number] ] . basic_as_str ( ) == [string] [EOL] assert not isclass ( met2 ) [EOL] [EOL] [EOL] if not IS_JYTHON : [EOL] [comment] [EOL] class TestMod ( unittest . TestCase ) : [EOL] pass [EOL] class TestCompl ( TestMod ) : [EOL] pass [EOL] class TestSearch ( TestMod ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] suite = unittest . makeSuite ( TestCompl ) [EOL] suite2 = unittest . makeSuite ( TestMod ) [EOL] suite3 = unittest . makeSuite ( TestSearch ) [EOL] [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( suite ) [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( suite2 ) [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( suite3 ) [EOL] [EOL]	
[docstring] [EOL] import sys [EOL] import unittest [EOL] import socket [EOL] import urllib [EOL] [EOL] [EOL] IS_JYTHON = sys . platform . find ( [string] ) != - [number] [EOL] [EOL] if IS_JYTHON : [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] sys . argv [ [number] ] = os . path . dirname ( sys . argv [ [number] ] ) [EOL] [comment] [EOL] sys . path . insert ( [number] , os . path . join ( os . path . dirname ( sys . argv [ [number] ] ) ) ) [EOL] [EOL] import pycompletionserver as jycompletionserver [EOL] [EOL] [EOL] DEBUG = [number] [EOL] [EOL] def dbg ( s ) : [EOL] if DEBUG : [EOL] sys . stdout . write ( [string] % s ) [EOL] [EOL] class Test ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] unittest . TestCase . setUp ( self ) [EOL] [EOL] def tearDown ( self ) : [EOL] unittest . TestCase . tearDown ( self ) [EOL] [EOL] def test_it ( self ) : [EOL] if not IS_JYTHON : [EOL] return [EOL] dbg ( [string] ) [EOL] [EOL] def test_message ( self ) : [EOL] if not IS_JYTHON : [EOL] return [EOL] t = jycompletionserver . T ( [number] ) [EOL] t . exit_process_on_kill = False [EOL] [EOL] l = [ ] [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] [EOL] msg = t . processor . format_completion_message ( [string] , l ) [EOL] [EOL] self . assertEquals ( [string] , msg ) [EOL] [EOL] l = [ ] [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] l . append ( ( [string] , [string] , [string] ) ) [EOL] msg = t . processor . format_completion_message ( None , l ) [EOL] expected = [string] [EOL] [EOL] self . assertEquals ( expected , msg ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] def test_completion_sockets_and_messages ( self ) : [EOL] if not IS_JYTHON : [EOL] return [EOL] dbg ( [string] ) [EOL] t , socket = self . create_connections ( ) [EOL] self . socket = socket [EOL] dbg ( [string] ) [EOL] [EOL] try : [EOL] [comment] [EOL] msg = urllib . quote_plus ( [string] ) [EOL] [EOL] toWrite = [string] % msg [EOL] dbg ( [string] + str ( toWrite ) ) [EOL] socket . send ( toWrite ) [comment] [EOL] completions = self . read_msg ( ) [EOL] dbg ( urllib . unquote_plus ( completions ) ) [EOL] [EOL] start = [string] [EOL] self . assert_ ( completions . startswith ( start ) , [string] % ( completions , start ) ) [EOL] self . assert_ ( completions . find ( [string] ) != - [number] ) [EOL] self . assert_ ( completions . find ( [string] ) != - [number] ) [EOL] [EOL] [EOL] msg = urllib . quote_plus ( [string] ) [EOL] toWrite = [string] % msg [EOL] dbg ( [string] + str ( toWrite ) ) [EOL] socket . send ( toWrite ) [comment] [EOL] completions = self . read_msg ( ) [EOL] dbg ( urllib . unquote_plus ( completions ) ) [EOL] [EOL] start = [string] [EOL] self . assert_ ( completions . startswith ( start ) , [string] % ( completions , start ) ) [EOL] self . assert_ ( completions . find ( [string] ) != - [number] ) [EOL] self . assert_ ( completions . find ( [string] ) != - [number] ) [EOL] [EOL] [EOL] [EOL] finally : [EOL] try : [EOL] self . send_kill_msg ( socket ) [EOL] [EOL] [EOL] while not t . ended : [EOL] pass [comment] [EOL] [EOL] [EOL] socket . close ( ) [EOL] except : [EOL] pass [EOL] [EOL] [EOL] [EOL] [EOL] def create_connections ( self , p1 = [number] ) : [EOL] [docstring] [EOL] t = jycompletionserver . T ( p1 ) [EOL] t . exit_process_on_kill = False [EOL] [EOL] t . start ( ) [EOL] [EOL] server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) [EOL] server . bind ( ( jycompletionserver . HOST , p1 ) ) [EOL] server . listen ( [number] ) [EOL] [EOL] sock , _addr = server . accept ( ) [EOL] [EOL] return t , sock [EOL] [EOL] [EOL] def read_msg ( self ) : [EOL] msg = [string] [EOL] while msg . startswith ( [string] ) : [EOL] msg = self . socket . recv ( [number] ) [EOL] if msg . startswith ( [string] ) : [EOL] dbg ( [string] + str ( msg ) ) [EOL] [EOL] while msg . find ( [string] ) == - [number] : [EOL] msg += self . socket . recv ( [number] ) [EOL] [EOL] return msg [EOL] [EOL] def send_kill_msg ( self , socket ) : [EOL] socket . send ( jycompletionserver . MSG_KILL_SERVER ) [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] if IS_JYTHON : [EOL] suite = unittest . makeSuite ( Test ) [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( suite ) [EOL] else : [EOL] sys . stdout . write ( [string] % sys . platform ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def Exec ( exp , global_vars , local_vars = None ) : [EOL] if local_vars is not None : [EOL] exec ( exp , global_vars , local_vars ) [EOL] else : [EOL] exec ( exp , global_vars )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def add_line_breakpoint ( plugin , pydb , type , file , line , condition , expression , func_name ) : [EOL] return None [EOL] [EOL] def add_exception_breakpoint ( plugin , pydb , type , exception ) : [EOL] return False [EOL] [EOL] def remove_exception_breakpoint ( plugin , pydb , type , exception ) : [EOL] return False [EOL] [EOL] def get_breakpoints ( plugin , pydb ) : [EOL] return None [EOL] [EOL] def can_not_skip ( plugin , pydb , pydb_frame , frame ) : [EOL] return False [EOL] [EOL] def has_exception_breaks ( plugin ) : [EOL] return False [EOL] [EOL] def has_line_breaks ( plugin ) : [EOL] return False [EOL] [EOL] def cmd_step_into ( plugin , pydb , frame , event , args , stop_info , stop ) : [EOL] return False [EOL] [EOL] def cmd_step_over ( plugin , pydb , frame , event , args , stop_info , stop ) : [EOL] return False [EOL] [EOL] def stop ( plugin , pydb , frame , event , args , stop_info , arg , step_cmd ) : [EOL] return False [EOL] [EOL] def get_breakpoint ( plugin , pydb , pydb_frame , frame , event , args ) : [EOL] return None [EOL] [EOL] def suspend ( plugin , pydb , thread , frame ) : [EOL] return None [EOL] [EOL] def exception_break ( plugin , pydb , pydb_frame , frame , args , arg ) : [EOL] return None [EOL] [EOL] def change_variable ( plugin , frame , attr , expression ) : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Literal , Any , Tuple , List , Dict [EOL] import python [EOL] import typing [EOL] import typing_extensions [EOL] class ArgHandlerWithParam : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , arg_name , convert_val = None , default_val = None ) : [EOL] self . arg_name = arg_name [EOL] self . arg_v_rep = [string] % ( arg_name , ) [EOL] self . convert_val = convert_val [EOL] self . default_val = default_val [EOL] [EOL] def to_argv ( self , lst , setup ) : [EOL] v = setup . get ( self . arg_name ) [EOL] if v is not None and v != self . default_val : [EOL] lst . append ( self . arg_v_rep ) [EOL] lst . append ( [string] % ( v , ) ) [EOL] [EOL] def handle_argv ( self , argv , i , setup ) : [EOL] assert argv [ i ] == self . arg_v_rep [EOL] del argv [ i ] [EOL] [EOL] val = argv [ i ] [EOL] if self . convert_val : [EOL] val = self . convert_val ( val ) [EOL] [EOL] setup [ self . arg_name ] = val [EOL] del argv [ i ] [EOL] [EOL] class ArgHandlerBool : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , arg_name , default_val = False ) : [EOL] self . arg_name = arg_name [EOL] self . arg_v_rep = [string] % ( arg_name , ) [EOL] self . default_val = default_val [EOL] [EOL] def to_argv ( self , lst , setup ) : [EOL] v = setup . get ( self . arg_name ) [EOL] if v : [EOL] lst . append ( self . arg_v_rep ) [EOL] [EOL] def handle_argv ( self , argv , i , setup ) : [EOL] assert argv [ i ] == self . arg_v_rep [EOL] del argv [ i ] [EOL] setup [ self . arg_name ] = True [EOL] [EOL] [EOL] ACCEPTED_ARG_HANDLERS = [ ArgHandlerWithParam ( [string] , int , [number] ) , ArgHandlerWithParam ( [string] ) , ArgHandlerWithParam ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ArgHandlerBool ( [string] ) , ] [EOL] [EOL] ARGV_REP_TO_HANDLER = { } [EOL] for handler in ACCEPTED_ARG_HANDLERS : [EOL] ARGV_REP_TO_HANDLER [ handler . arg_v_rep ] = handler [EOL] [EOL] def get_pydevd_file ( ) : [EOL] import pydevd [EOL] f = pydevd . __file__ [EOL] if f . endswith ( [string] ) : [EOL] f = f [ : - [number] ] [EOL] return f [EOL] [EOL] def setup_to_argv ( setup ) : [EOL] [docstring] [EOL] ret = [ get_pydevd_file ( ) ] [EOL] [EOL] for handler in ACCEPTED_ARG_HANDLERS : [EOL] if handler . arg_name in setup : [EOL] handler . to_argv ( ret , setup ) [EOL] return ret [EOL] [EOL] def process_command_line ( argv ) : [EOL] [docstring] [EOL] setup = { } [EOL] for handler in ACCEPTED_ARG_HANDLERS : [EOL] setup [ handler . arg_name ] = handler . default_val [EOL] setup [ [string] ] = [string] [EOL] setup [ [string] ] = [string] [EOL] [EOL] i = [number] [EOL] del argv [ [number] ] [EOL] while i < len ( argv ) : [EOL] handler = ARGV_REP_TO_HANDLER . get ( argv [ i ] ) [EOL] if handler is not None : [EOL] handler . handle_argv ( argv , i , setup ) [EOL] [EOL] elif argv [ i ] . startswith ( [string] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if argv [ i ] == [string] : [EOL] setup [ [string] ] = [string] [EOL] [EOL] elif argv [ i ] . startswith ( [string] ) : [EOL] qt_support = argv [ i ] [ len ( [string] ) : ] [EOL] valid_modes = ( [string] , [string] , [string] , [string] , [string] ) [EOL] if qt_support not in valid_modes : [EOL] raise ValueError ( [string] + qt_support ) [EOL] if qt_support == [string] : [EOL] [comment] [EOL] setup [ [string] ] = [string] [EOL] else : [EOL] setup [ [string] ] = qt_support [EOL] else : [EOL] raise ValueError ( [string] + argv [ i ] ) [EOL] [EOL] del argv [ i ] [EOL] [EOL] [EOL] elif argv [ i ] == [string] : [EOL] [comment] [EOL] del argv [ i ] [EOL] setup [ [string] ] = argv [ i ] [EOL] i = len ( argv ) [comment] [EOL] [EOL] elif argv [ i ] == [string] : [EOL] from pydevd import set_debug [EOL] del argv [ i ] [EOL] set_debug ( setup ) [EOL] [EOL] else : [EOL] raise ValueError ( [string] + argv [ i ] ) [EOL] return setup [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerBool,python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerWithParam]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Union[python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerBool,python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerWithParam]]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerBool,python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerWithParam]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerBool,python.helpers.pydev._pydevd_bundle.pydevd_command_line_handling.ArgHandlerWithParam]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import dis [EOL] import traceback [EOL] from opcode import opmap , EXTENDED_ARG [EOL] from types import CodeType [EOL] [EOL] MAX_BYTE = [number] [EOL] [EOL] [EOL] def _add_attr_values_from_insert_to_original ( original_code , insert_code , insert_code_obj , attribute_name , op_list ) : [EOL] [docstring] [EOL] orig_value = getattr ( original_code , attribute_name ) [EOL] insert_value = getattr ( insert_code , attribute_name ) [EOL] orig_names_len = len ( orig_value ) [EOL] code_with_new_values = list ( insert_code_obj ) [EOL] offset = [number] [EOL] while offset < len ( code_with_new_values ) : [EOL] op = code_with_new_values [ offset ] [EOL] if op in op_list : [EOL] new_val = code_with_new_values [ offset + [number] ] + orig_names_len [EOL] if new_val > MAX_BYTE : [EOL] code_with_new_values [ offset + [number] ] = new_val & MAX_BYTE [EOL] code_with_new_values = code_with_new_values [ : offset ] + [ EXTENDED_ARG , new_val >> [number] ] + code_with_new_values [ offset : ] [EOL] offset += [number] [EOL] else : [EOL] code_with_new_values [ offset + [number] ] = new_val [EOL] offset += [number] [EOL] new_values = orig_value + insert_value [EOL] return bytes ( code_with_new_values ) , new_values [EOL] [EOL] [EOL] def _modify_new_lines ( code_to_modify , all_inserted_code ) : [EOL] [docstring] [EOL] new_list = list ( code_to_modify . co_lnotab ) [EOL] abs_offset = prev_abs_offset = [number] [EOL] i = [number] [EOL] while i < len ( new_list ) : [EOL] prev_abs_offset = abs_offset [EOL] abs_offset += new_list [ i ] [EOL] for ( inserted_offset , inserted_code ) in all_inserted_code : [EOL] if prev_abs_offset <= inserted_offset < abs_offset : [EOL] size_of_inserted = len ( inserted_code ) [EOL] new_list [ i ] += size_of_inserted [EOL] abs_offset += size_of_inserted [EOL] if new_list [ i ] > MAX_BYTE : [EOL] new_list [ i ] = new_list [ i ] - MAX_BYTE [EOL] new_list = new_list [ : i ] + [ MAX_BYTE , [number] ] + new_list [ i : ] [EOL] i += [number] [EOL] return bytes ( new_list ) [EOL] [EOL] [EOL] def _update_label_offsets ( code_obj , breakpoint_offset , breakpoint_code_list ) : [EOL] [docstring] [EOL] inserted_code = list ( ) [EOL] [comment] [EOL] inserted_code . append ( ( breakpoint_offset , breakpoint_code_list ) ) [EOL] code_list = list ( code_obj ) [EOL] j = [number] [EOL] [EOL] while j < len ( inserted_code ) : [EOL] current_offset , current_code_list = inserted_code [ j ] [EOL] offsets_for_modification = [ ] [EOL] [EOL] for offset , op , arg in dis . _unpack_opargs ( code_list ) : [EOL] if arg is not None : [EOL] if op in dis . hasjrel : [EOL] [comment] [EOL] label = offset + [number] + arg [EOL] if offset < current_offset < label : [EOL] [comment] [EOL] offsets_for_modification . append ( offset ) [EOL] elif op in dis . hasjabs : [EOL] [comment] [EOL] if current_offset < arg : [EOL] offsets_for_modification . append ( offset ) [EOL] for i in range ( [number] , len ( code_list ) , [number] ) : [EOL] op = code_list [ i ] [EOL] if i in offsets_for_modification and op >= dis . HAVE_ARGUMENT : [EOL] new_arg = code_list [ i + [number] ] + len ( current_code_list ) [EOL] if new_arg <= MAX_BYTE : [EOL] code_list [ i + [number] ] = new_arg [EOL] else : [EOL] [comment] [EOL] extended_arg_code = [ EXTENDED_ARG , new_arg >> [number] ] [EOL] code_list [ i + [number] ] = new_arg & MAX_BYTE [EOL] inserted_code . append ( ( i , extended_arg_code ) ) [EOL] [EOL] code_list = code_list [ : current_offset ] + current_code_list + code_list [ current_offset : ] [EOL] [EOL] for k in range ( len ( inserted_code ) ) : [EOL] offset , inserted_code_list = inserted_code [ k ] [EOL] if current_offset < offset : [EOL] inserted_code [ k ] = ( offset + len ( current_code_list ) , inserted_code_list ) [EOL] j += [number] [EOL] [EOL] return bytes ( code_list ) , inserted_code [EOL] [EOL] [EOL] def _return_none_fun ( ) : [EOL] return None [EOL] [EOL] [EOL] def insert_code ( code_to_modify , code_to_insert , before_line ) : [EOL] [docstring] [EOL] linestarts = dict ( dis . findlinestarts ( code_to_modify ) ) [EOL] if before_line not in linestarts . values ( ) : [EOL] return code_to_modify [EOL] offset = None [EOL] for off , line_no in linestarts . items ( ) : [EOL] if line_no == before_line : [EOL] offset = off [EOL] [EOL] return_none_size = len ( _return_none_fun . __code__ . co_code ) [EOL] code_to_insert_obj = code_to_insert . co_code [ : - return_none_size ] [EOL] try : [EOL] code_to_insert_obj , new_names = _add_attr_values_from_insert_to_original ( code_to_modify , code_to_insert , code_to_insert_obj , [string] , dis . hasname ) [EOL] code_to_insert_obj , new_consts = _add_attr_values_from_insert_to_original ( code_to_modify , code_to_insert , code_to_insert_obj , [string] , [ opmap [ [string] ] ] ) [EOL] code_to_insert_obj , new_vars = _add_attr_values_from_insert_to_original ( code_to_modify , code_to_insert , code_to_insert_obj , [string] , dis . haslocal ) [EOL] new_bytes , all_inserted_code = _update_label_offsets ( code_to_modify . co_code , offset , list ( code_to_insert_obj ) ) [EOL] [EOL] new_lnotab = _modify_new_lines ( code_to_modify , all_inserted_code ) [EOL] except ValueError : [EOL] traceback . print_exc ( ) [EOL] return False , code_to_modify [EOL] [EOL] new_code = CodeType ( code_to_modify . co_argcount , code_to_modify . co_kwonlyargcount , len ( new_vars ) , code_to_modify . co_stacksize , code_to_modify . co_flags , new_bytes , new_consts , new_names , new_vars , code_to_modify . co_filename , code_to_modify . co_name , code_to_modify . co_firstlineno , new_lnotab , code_to_modify . co_freevars , code_to_modify . co_cellvars ) [EOL] return True , new_code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] NAMES = [string]	0 0 $builtins.str$ 0 0
[docstring] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
import sys [EOL] from . main import main [EOL] [EOL] sys . exit ( main ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0
[comment] [EOL]	0 0
import unittest [EOL] [EOL] def setUpModule ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] class SetUpModuleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( cls ) : [EOL] pass [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class StillYetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class YetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_abc ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class SetUpClassTest ( unittest . TestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class NestedSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class SampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] def test_asdf2 ( self ) : [EOL] pass [EOL] [EOL] def test_i_am_a_unique_test_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
[EOL]	0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
	0
def method ( ) : [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] [EOL] if __name__ == [string] : [EOL] method ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] % i ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Call ( ) : [EOL] variable_for_test_1 = [number] [EOL] variable_for_test_2 = [number] [EOL] variable_for_test_3 = [number] [EOL] [EOL] if __name__ == [string] : [EOL] Call ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import python [EOL] class A : [EOL] [EOL] def __init__ ( self ) : [EOL] self . __var = [number] [EOL] [EOL] if __name__ == [string] : [EOL] a = A ( ) [EOL] print ( a . _A__var ) [EOL] [comment] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $python.helpers.pydev.tests_pydevd_python._debugger_case19.A$ 0 0 0 0 0 0 0 $python.helpers.pydev.tests_pydevd_python._debugger_case19.A$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import sys [EOL] import os [EOL] import unittest [EOL] try : [EOL] from _pydev_bundle import pydev_monkey [EOL] except : [EOL] sys . path . append ( os . path . dirname ( os . path . dirname ( __file__ ) ) ) [EOL] from _pydev_bundle import pydev_monkey [EOL] from pydevd import SetupHolder [EOL] from _pydev_bundle . pydev_monkey import pydev_src_dir [EOL] [EOL] [EOL] [EOL] class TestCase ( unittest . TestCase ) : [EOL] [EOL] def test_monkey ( self ) : [EOL] original = SetupHolder . setup [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] } [EOL] check = [string] [EOL] debug_command = ( [string] [string] [string] [string] [string] [string] ) % pydev_src_dir [EOL] if sys . platform == [string] : [EOL] debug_command = debug_command . replace ( [string] , [string] ) [EOL] debug_command = [string] % debug_command [EOL] self . assertEqual ( [string] % debug_command , pydev_monkey . patch_arg_str_win ( check ) ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] def test_str_to_args_windows ( self ) : [EOL] self . assertEqual ( [ [string] , [string] ] , pydev_monkey . str_to_args_windows ( [string] ) ) [EOL] [EOL] def test_monkey_patch_args_indc ( self ) : [EOL] original = SetupHolder . setup [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] } [EOL] check = [ [string] , [string] , [string] , [string] ] [EOL] debug_command = ( [string] [string] [string] [string] ) % pydev_src_dir [EOL] if sys . platform == [string] : [EOL] debug_command = debug_command . replace ( [string] , [string] ) [EOL] debug_command = [string] % debug_command [EOL] res = pydev_monkey . patch_args ( check ) [EOL] self . assertEqual ( res , [ [string] , [string] , [string] , debug_command ] ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] def test_monkey_patch_args_module ( self ) : [EOL] original = SetupHolder . setup [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] , [string] : True } [EOL] check = [ [string] , [string] , [string] ] [EOL] from _pydevd_bundle . pydevd_command_line_handling import get_pydevd_file [EOL] self . assertEqual ( pydev_monkey . patch_args ( check ) , [ [string] , get_pydevd_file ( ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] def test_monkey_patch_args_no_indc ( self ) : [EOL] original = SetupHolder . setup [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] } [EOL] check = [ [string] , [string] ] [EOL] from _pydevd_bundle . pydevd_command_line_handling import get_pydevd_file [EOL] self . assertEqual ( pydev_monkey . patch_args ( check ) , [ [string] , get_pydevd_file ( ) , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] def test_monkey_patch_args_no_indc_with_pydevd ( self ) : [EOL] original = SetupHolder . setup [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] } [EOL] check = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] self . assertEqual ( pydev_monkey . patch_args ( check ) , [ [string] , [string] , [string] , [string] ] ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] def test_monkey_patch_args_no_indc_without_pydevd ( self ) : [EOL] original = SetupHolder . setup [EOL] from _pydevd_bundle . pydevd_command_line_handling import get_pydevd_file [EOL] [EOL] try : [EOL] SetupHolder . setup = { [string] : [string] , [string] : [string] } [EOL] check = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] self . assertEqual ( pydev_monkey . patch_args ( check ) , [ [string] , get_pydevd_file ( ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] finally : [EOL] SetupHolder . setup = original [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Method1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Method2 ( ) : [EOL] print ( [string] ) [EOL] Method1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def Method3 ( ) : [EOL] print ( [string] ) [EOL] Method2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Method3 ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Call2 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Call1 ( a ) : [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Call1 ( Call2 ( ) ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import python [EOL] import typing [EOL] import sys [EOL] import weakref [EOL] [EOL] def set_up ( ) : [EOL] observable = Observable ( ) [EOL] observer = Observer ( ) [EOL] observable . add_observer ( observer ) [EOL] return observable [EOL] [EOL] [EOL] class Observable ( object ) : [EOL] def __init__ ( self ) : [EOL] self . observers = [ ] [EOL] [EOL] def add_observer ( self , observer ) : [EOL] sys . stdout . write ( [string] % ( observer , ) ) [EOL] ref = weakref . ref ( observer ) [EOL] self . observers . append ( ref ) [EOL] sys . stdout . write ( [string] % ( ref ( ) , ) ) [EOL] [EOL] def Notify ( self ) : [EOL] for o in self . observers : [EOL] o = o ( ) [EOL] [EOL] [EOL] try : [EOL] import gc [EOL] except ImportError : [EOL] o = None [comment] [EOL] else : [EOL] try : [EOL] gc . get_referrers ( o ) [EOL] except : [EOL] o = None [comment] [EOL] [EOL] if o is not None : [EOL] sys . stdout . write ( [string] % ( o , ) ) [EOL] sys . stdout . write ( [string] % len ( gc . get_referrers ( o ) ) ) [EOL] frame = gc . get_referrers ( o ) [ [number] ] [EOL] frame_referrers = gc . get_referrers ( frame ) [EOL] sys . stdout . write ( [string] % ( frame_referrers , ) ) [EOL] referrers1 = gc . get_referrers ( frame_referrers [ [number] ] ) [EOL] sys . stdout . write ( [string] % ( referrers1 , ) ) [EOL] sys . stderr . write ( [string] ) [EOL] else : [EOL] sys . stdout . write ( [string] ) [EOL] [EOL] sys . stdout . flush ( ) [EOL] sys . stderr . flush ( ) [EOL] [EOL] class Observer ( object ) : [EOL] pass [EOL] [EOL] [EOL] def main ( ) : [EOL] observable = set_up ( ) [EOL] observable . Notify ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . import _debugger_case_m_switch_2 [EOL] print ( _debugger_case_m_switch_2 . ClassToBeImported ) [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy [EOL] [EOL] def main ( ) : [EOL] smallarray = numpy . arange ( [number] ) * [number] + [number] [EOL] bigarray = numpy . arange ( [number] ) . reshape ( ( [number] , [number] ) ) [comment] [EOL] hugearray = numpy . arange ( [number] ) [comment] [EOL] [EOL] pass [comment] [EOL] [EOL] main ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def m1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def m2 ( ) : [comment] [EOL] m1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def m3 ( ) : [EOL] m2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] m3 ( ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class ClassToBeImported ( object ) : [EOL] pass	0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from typing import List , Any , Dict [EOL] import python [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] from django . http import HttpResponse [EOL] import sys [EOL] [EOL] class Entry ( object ) : [EOL] [EOL] def __init__ ( self , key , val ) : [EOL] self . key = key [EOL] self . val = val [EOL] [EOL] def __unicode__ ( self ) : [EOL] return [string] % ( self . key , self . val ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . key , self . val ) [EOL] [EOL] def index ( request ) : [EOL] context = { [string] : [ Entry ( [string] , [string] ) , Entry ( [string] , [string] ) ] } [EOL] ret = render ( request , [string] , context ) [EOL] return ret	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . index , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] from __future__ import with_statement [EOL] [EOL] __revision__ = [string] [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] from winappdbg import win32 [EOL] from winappdbg . registry import Registry [EOL] from winappdbg . textio import HexInput , HexDump [EOL] from winappdbg . util import Regenerator , PathOperations , MemoryAddresses , DebugRegister , classproperty [EOL] from winappdbg . process import _ProcessContainer [EOL] from winappdbg . window import Window [EOL] [EOL] import sys [EOL] import os [EOL] import ctypes [EOL] import warnings [EOL] [EOL] from os import path , getenv [EOL] [EOL] [comment] [EOL] [EOL] class System ( _ProcessContainer ) : [EOL] [docstring] [EOL] [EOL] arch = win32 . arch [EOL] bits = win32 . bits [EOL] os = win32 . os [EOL] wow64 = win32 . wow64 [EOL] [EOL] @ classproperty def pageSize ( cls ) : [EOL] pageSize = MemoryAddresses . pageSize [EOL] cls . pageSize = pageSize [EOL] return pageSize [EOL] [EOL] registry = Registry ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def find_window ( className = None , windowName = None ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] hWnd = win32 . FindWindow ( className , windowName ) [EOL] if hWnd : [EOL] return Window ( hWnd ) [EOL] [EOL] @ staticmethod def get_window_at ( x , y ) : [EOL] [docstring] [EOL] return Window ( win32 . WindowFromPoint ( ( x , y ) ) ) [EOL] [EOL] @ staticmethod def get_foreground_window ( ) : [EOL] [docstring] [EOL] return Window ( win32 . GetForegroundWindow ( ) ) [EOL] [EOL] @ staticmethod def get_desktop_window ( ) : [EOL] [docstring] [EOL] return Window ( win32 . GetDesktopWindow ( ) ) [EOL] [EOL] @ staticmethod def get_shell_window ( ) : [EOL] [docstring] [EOL] return Window ( win32 . GetShellWindow ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def request_debug_privileges ( cls , bIgnoreExceptions = False ) : [EOL] [docstring] [EOL] try : [EOL] cls . request_privileges ( win32 . SE_DEBUG_NAME ) [EOL] return True [EOL] except Exception : [EOL] if not bIgnoreExceptions : [EOL] raise [EOL] return False [EOL] [EOL] @ classmethod def drop_debug_privileges ( cls , bIgnoreExceptions = False ) : [EOL] [docstring] [EOL] try : [EOL] cls . drop_privileges ( win32 . SE_DEBUG_NAME ) [EOL] return True [EOL] except Exception : [EOL] if not bIgnoreExceptions : [EOL] raise [EOL] return False [EOL] [EOL] @ classmethod def request_privileges ( cls , * privileges ) : [EOL] [docstring] [EOL] cls . adjust_privileges ( True , privileges ) [EOL] [EOL] @ classmethod def drop_privileges ( cls , * privileges ) : [EOL] [docstring] [EOL] cls . adjust_privileges ( False , privileges ) [EOL] [EOL] @ staticmethod def adjust_privileges ( state , privileges ) : [EOL] [docstring] [EOL] with win32 . OpenProcessToken ( win32 . GetCurrentProcess ( ) , win32 . TOKEN_ADJUST_PRIVILEGES ) as hToken : [EOL] NewState = ( ( priv , state ) for priv in privileges ) [EOL] win32 . AdjustTokenPrivileges ( hToken , NewState ) [EOL] [EOL] @ staticmethod def is_admin ( ) : [EOL] [docstring] [EOL] return win32 . IsUserAnAdmin ( ) [EOL] [EOL] [comment] [EOL] [EOL] __binary_types = { win32 . VFT_APP : [string] , win32 . VFT_DLL : [string] , win32 . VFT_STATIC_LIB : [string] , win32 . VFT_FONT : [string] , win32 . VFT_DRV : [string] , win32 . VFT_VXD : [string] , } [EOL] [EOL] __driver_types = { win32 . VFT2_DRV_COMM : [string] , win32 . VFT2_DRV_DISPLAY : [string] , win32 . VFT2_DRV_INSTALLABLE : [string] , win32 . VFT2_DRV_KEYBOARD : [string] , win32 . VFT2_DRV_LANGUAGE : [string] , win32 . VFT2_DRV_MOUSE : [string] , win32 . VFT2_DRV_NETWORK : [string] , win32 . VFT2_DRV_PRINTER : [string] , win32 . VFT2_DRV_SOUND : [string] , win32 . VFT2_DRV_SYSTEM : [string] , win32 . VFT2_DRV_VERSIONED_PRINTER : [string] , } [EOL] [EOL] __font_types = { win32 . VFT2_FONT_RASTER : [string] , win32 . VFT2_FONT_TRUETYPE : [string] , win32 . VFT2_FONT_VECTOR : [string] , } [EOL] [EOL] __months = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] __days_of_the_week = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] @ classmethod def get_file_version_info ( cls , filename ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] pBlock = win32 . GetFileVersionInfo ( filename ) [EOL] pBuffer , dwLen = win32 . VerQueryValue ( pBlock , [string] ) [EOL] if dwLen != ctypes . sizeof ( win32 . VS_FIXEDFILEINFO ) : [EOL] raise ctypes . WinError ( win32 . ERROR_BAD_LENGTH ) [EOL] pVersionInfo = ctypes . cast ( pBuffer , ctypes . POINTER ( win32 . VS_FIXEDFILEINFO ) ) [EOL] VersionInfo = pVersionInfo . contents [EOL] if VersionInfo . dwSignature != [number] : [EOL] raise ctypes . WinError ( win32 . ERROR_BAD_ARGUMENTS ) [EOL] [EOL] [comment] [EOL] FileVersion = [string] % ( VersionInfo . dwFileVersionMS , VersionInfo . dwFileVersionLS ) [EOL] ProductVersion = [string] % ( VersionInfo . dwProductVersionMS , VersionInfo . dwProductVersionLS ) [EOL] [EOL] [comment] [EOL] if VersionInfo . dwFileFlagsMask & win32 . VS_FF_DEBUG : [EOL] DebugBuild = ( VersionInfo . dwFileFlags & win32 . VS_FF_DEBUG ) != [number] [EOL] else : [EOL] DebugBuild = None [EOL] [EOL] [comment] [EOL] LegacyBuild = ( VersionInfo . dwFileOS != win32 . VOS_NT_WINDOWS32 ) [EOL] [EOL] [comment] [EOL] FileType = cls . __binary_types . get ( VersionInfo . dwFileType ) [EOL] if VersionInfo . dwFileType == win32 . VFT_DRV : [EOL] FileType = cls . __driver_types . get ( VersionInfo . dwFileSubtype ) [EOL] elif VersionInfo . dwFileType == win32 . VFT_FONT : [EOL] FileType = cls . __font_types . get ( VersionInfo . dwFileSubtype ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] FileDate = ( VersionInfo . dwFileDateMS << [number] ) + VersionInfo . dwFileDateLS [EOL] if FileDate : [EOL] CreationTime = win32 . FileTimeToSystemTime ( FileDate ) [EOL] CreationTimestamp = [string] % ( cls . __days_of_the_week [ CreationTime . wDayOfWeek ] , cls . __months [ CreationTime . wMonth ] , CreationTime . wDay , CreationTime . wYear , CreationTime . wHour , CreationTime . wMinute , CreationTime . wSecond , CreationTime . wMilliseconds , ) [EOL] else : [EOL] CreationTimestamp = None [EOL] [EOL] [comment] [EOL] return ( FileVersion , ProductVersion , DebugBuild , LegacyBuild , FileType , CreationTimestamp , ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __dbghelp_locations = { win32 . ARCH_AMD64 : set ( [ path . join ( getenv ( [string] , [string] ) , [string] , [string] , [string] , [string] , [string] ) , path . join ( getenv ( [string] , getenv ( [string] , [string] ) ) , [string] , [string] , [string] , [string] , [string] ) , path . join ( getenv ( [string] , [string] ) , [string] , [string] ) , ] ) , win32 . ARCH_I386 : set ( [ path . join ( getenv ( [string] , [string] ) , [string] , [string] , [string] , [string] , [string] ) , path . join ( getenv ( [string] , getenv ( [string] , [string] ) ) , [string] , [string] , [string] , [string] , [string] ) , path . join ( getenv ( [string] , [string] ) , [string] , [string] ) , path . join ( getenv ( [string] , [string] ) , [string] , [string] ) , ] ) , } [EOL] [EOL] @ classmethod def load_dbghelp ( cls , pathname = None ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if not pathname : [EOL] [EOL] [comment] [EOL] arch = win32 . arch [EOL] if arch == win32 . ARCH_AMD64 and win32 . bits == [number] : [EOL] arch = win32 . ARCH_I386 [EOL] [EOL] [comment] [EOL] if not arch in cls . __dbghelp_locations : [EOL] msg = [string] [EOL] raise NotImplementedError ( msg % arch ) [EOL] [EOL] [comment] [EOL] found = [ ] [EOL] for pathname in cls . __dbghelp_locations [ arch ] : [EOL] if path . isfile ( pathname ) : [EOL] try : [EOL] f_ver , p_ver = cls . get_file_version_info ( pathname ) [ : [number] ] [EOL] except WindowsError : [EOL] msg = [string] [EOL] warnings . warn ( msg % pathname ) [EOL] if not f_ver : [EOL] f_ver = p_ver [EOL] elif p_ver and p_ver > f_ver : [EOL] f_ver = p_ver [EOL] found . append ( ( f_ver , pathname ) ) [EOL] [EOL] [comment] [EOL] if found : [EOL] found . sort ( ) [EOL] pathname = found . pop ( ) [ [number] ] [EOL] [EOL] [comment] [EOL] else : [EOL] pathname = [string] [EOL] [EOL] [comment] [EOL] dbghelp = ctypes . windll . LoadLibrary ( pathname ) [EOL] [EOL] [comment] [EOL] ctypes . windll . dbghelp = dbghelp [EOL] [EOL] [comment] [EOL] return dbghelp [EOL] [EOL] @ staticmethod def fix_symbol_store_path ( symbol_store_path = None , remote = True , force = False ) : [EOL] [docstring] [EOL] try : [EOL] if symbol_store_path is None : [EOL] local_path = [string] [EOL] if not path . isdir ( local_path ) : [EOL] local_path = [string] [EOL] if not path . isdir ( local_path ) : [EOL] local_path = path . abspath ( [string] ) [EOL] if remote : [EOL] symbol_store_path = ( [string] + local_path + [string] [string] ) [EOL] else : [EOL] symbol_store_path = [string] + local_path [EOL] previous = os . environ . get ( [string] , None ) [EOL] if not previous or force : [EOL] os . environ [ [string] ] = symbol_store_path [EOL] return previous [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , RuntimeWarning ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def set_kill_on_exit_mode ( bKillOnExit = False ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] win32 . DebugSetProcessKillOnExit ( bKillOnExit ) [EOL] except ( AttributeError , WindowsError ) : [EOL] return False [EOL] return True [EOL] [EOL] @ staticmethod def read_msr ( address ) : [EOL] [docstring] [EOL] if win32 . arch not in ( win32 . ARCH_I386 , win32 . ARCH_AMD64 ) : [EOL] raise NotImplementedError ( [string] ) [EOL] msr = win32 . SYSDBG_MSR ( ) [EOL] msr . Address = address [EOL] msr . Data = [number] [EOL] win32 . NtSystemDebugControl ( win32 . SysDbgReadMsr , InputBuffer = msr , OutputBuffer = msr ) [EOL] return msr . Data [EOL] [EOL] @ staticmethod def write_msr ( address , value ) : [EOL] [docstring] [EOL] if win32 . arch not in ( win32 . ARCH_I386 , win32 . ARCH_AMD64 ) : [EOL] raise NotImplementedError ( [string] ) [EOL] msr = win32 . SYSDBG_MSR ( ) [EOL] msr . Address = address [EOL] msr . Data = value [EOL] win32 . NtSystemDebugControl ( win32 . SysDbgWriteMsr , InputBuffer = msr ) [EOL] [EOL] @ classmethod def enable_step_on_branch_mode ( cls ) : [EOL] [docstring] [EOL] cls . write_msr ( DebugRegister . DebugCtlMSR , DebugRegister . BranchTrapFlag | DebugRegister . LastBranchRecord ) [EOL] [EOL] @ classmethod def get_last_branch_location ( cls ) : [EOL] [docstring] [EOL] LastBranchFromIP = cls . read_msr ( DebugRegister . LastBranchFromIP ) [EOL] LastBranchToIP = cls . read_msr ( DebugRegister . LastBranchToIP ) [EOL] return ( LastBranchFromIP , LastBranchToIP ) [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def get_postmortem_debugger ( cls , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] bits = cls . bits [EOL] elif bits not in ( [number] , [number] ) : [EOL] raise NotImplementedError ( [string] % bits ) [EOL] [EOL] if bits == [number] and cls . bits == [number] : [EOL] keyname = [string] [EOL] else : [EOL] keyname = [string] [EOL] [EOL] key = cls . registry [ keyname ] [EOL] [EOL] debugger = key . get ( [string] ) [EOL] auto = key . get ( [string] ) [EOL] hotkey = key . get ( [string] ) [EOL] [EOL] if auto is not None : [EOL] auto = bool ( auto ) [EOL] [EOL] return ( debugger , auto , hotkey ) [EOL] [EOL] @ classmethod def get_postmortem_exclusion_list ( cls , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] bits = cls . bits [EOL] elif bits not in ( [number] , [number] ) : [EOL] raise NotImplementedError ( [string] % bits ) [EOL] [EOL] if bits == [number] and cls . bits == [number] : [EOL] keyname = [string] [EOL] else : [EOL] keyname = [string] [EOL] [EOL] try : [EOL] key = cls . registry [ keyname ] [EOL] except KeyError : [EOL] return [ ] [EOL] [EOL] return [ name for ( name , enabled ) in key . items ( ) if enabled ] [EOL] [EOL] @ classmethod def set_postmortem_debugger ( cls , cmdline , auto = None , hotkey = None , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] bits = cls . bits [EOL] elif bits not in ( [number] , [number] ) : [EOL] raise NotImplementedError ( [string] % bits ) [EOL] [EOL] if bits == [number] and cls . bits == [number] : [EOL] keyname = [string] [EOL] else : [EOL] keyname = [string] [EOL] [EOL] key = cls . registry [ keyname ] [EOL] [EOL] if cmdline is not None : [EOL] key [ [string] ] = cmdline [EOL] if auto is not None : [EOL] key [ [string] ] = int ( bool ( auto ) ) [EOL] if hotkey is not None : [EOL] key [ [string] ] = int ( hotkey ) [EOL] [EOL] @ classmethod def add_to_postmortem_exclusion_list ( cls , pathname , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] bits = cls . bits [EOL] elif bits not in ( [number] , [number] ) : [EOL] raise NotImplementedError ( [string] % bits ) [EOL] [EOL] if bits == [number] and cls . bits == [number] : [EOL] keyname = [string] [EOL] else : [EOL] keyname = [string] [EOL] [EOL] try : [EOL] key = cls . registry [ keyname ] [EOL] except KeyError : [EOL] key = cls . registry . create ( keyname ) [EOL] [EOL] key [ pathname ] = [number] [EOL] [EOL] @ classmethod def remove_from_postmortem_exclusion_list ( cls , pathname , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] bits = cls . bits [EOL] elif bits not in ( [number] , [number] ) : [EOL] raise NotImplementedError ( [string] % bits ) [EOL] [EOL] if bits == [number] and cls . bits == [number] : [EOL] keyname = [string] [EOL] else : [EOL] keyname = [string] [EOL] [EOL] try : [EOL] key = cls . registry [ keyname ] [EOL] except KeyError : [EOL] return [EOL] [EOL] try : [EOL] del key [ pathname ] [EOL] except KeyError : [EOL] return [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def get_services ( ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : [EOL] try : [EOL] return win32 . EnumServicesStatusEx ( hSCManager ) [EOL] except AttributeError : [EOL] return win32 . EnumServicesStatus ( hSCManager ) [EOL] [EOL] @ staticmethod def get_active_services ( ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : [EOL] return [ entry for entry in win32 . EnumServicesStatusEx ( hSCManager , dwServiceType = win32 . SERVICE_WIN32 , dwServiceState = win32 . SERVICE_ACTIVE ) if entry . ProcessId ] [EOL] [EOL] @ staticmethod def get_service ( name ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : [EOL] with win32 . OpenService ( hSCManager , name , dwDesiredAccess = win32 . SERVICE_QUERY_STATUS ) as hService : [EOL] try : [EOL] return win32 . QueryServiceStatusEx ( hService ) [EOL] except AttributeError : [EOL] return win32 . QueryServiceStatus ( hService ) [EOL] [EOL] @ staticmethod def get_service_display_name ( name ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : [EOL] return win32 . GetServiceDisplayName ( hSCManager , name ) [EOL] [EOL] @ staticmethod def get_service_from_display_name ( displayName ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : [EOL] return win32 . GetServiceKeyName ( hSCManager , displayName ) [EOL] [EOL] @ staticmethod def start_service ( name , argv = None ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_CONNECT ) as hSCManager : [EOL] with win32 . OpenService ( hSCManager , name , dwDesiredAccess = win32 . SERVICE_START ) as hService : [EOL] win32 . StartService ( hService ) [EOL] [EOL] @ staticmethod def stop_service ( name ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_CONNECT ) as hSCManager : [EOL] with win32 . OpenService ( hSCManager , name , dwDesiredAccess = win32 . SERVICE_STOP ) as hService : [EOL] win32 . ControlService ( hService , win32 . SERVICE_CONTROL_STOP ) [EOL] [EOL] @ staticmethod def pause_service ( name ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_CONNECT ) as hSCManager : [EOL] with win32 . OpenService ( hSCManager , name , dwDesiredAccess = win32 . SERVICE_PAUSE_CONTINUE ) as hService : [EOL] win32 . ControlService ( hService , win32 . SERVICE_CONTROL_PAUSE ) [EOL] [EOL] @ staticmethod def resume_service ( name ) : [EOL] [docstring] [EOL] with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_CONNECT ) as hSCManager : [EOL] with win32 . OpenService ( hSCManager , name , dwDesiredAccess = win32 . SERVICE_PAUSE_CONTINUE ) as hService : [EOL] win32 . ControlService ( hService , win32 . SERVICE_CONTROL_CONTINUE ) [EOL] [EOL] [comment] [EOL]	
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import sys [EOL] import types [EOL] [EOL] [EOL] [EOL] [comment] [EOL] PY2 = sys . version_info [ [number] ] == [number] [EOL] PY3 = sys . version_info [ [number] ] == [number] [EOL] [EOL] if PY3 : [EOL] string_types = str , [EOL] integer_types = int , [EOL] class_types = type , [EOL] text_type = str [EOL] binary_type = bytes [EOL] [EOL] MAXSIZE = sys . maxsize [EOL] else : [EOL] string_types = basestring , [EOL] integer_types = ( int , long ) [EOL] class_types = ( type , types . ClassType ) [EOL] text_type = unicode [EOL] binary_type = str [EOL] [EOL] if sys . platform . startswith ( [string] ) : [EOL] [comment] [EOL] MAXSIZE = int ( ( [number] << [number] ) - [number] ) [EOL] else : [EOL] [comment] [EOL] class X ( object ) : [EOL] def __len__ ( self ) : [EOL] return [number] << [number] [EOL] try : [EOL] len ( X ( ) ) [EOL] except OverflowError : [EOL] [comment] [EOL] MAXSIZE = int ( ( [number] << [number] ) - [number] ) [EOL] else : [EOL] [comment] [EOL] MAXSIZE = int ( ( [number] << [number] ) - [number] ) [EOL] del X [EOL] [EOL] [EOL] if PY3 : [EOL] xrange = range [EOL] unicode = str [EOL] bytes = bytes [EOL] def iterkeys ( d , ** kw ) : [EOL] if hasattr ( d , [string] ) : [EOL] return iter ( d . iterkeys ( ** kw ) ) [EOL] return iter ( d . keys ( ** kw ) ) [EOL] [EOL] def itervalues ( d , ** kw ) : [EOL] if hasattr ( d , [string] ) : [EOL] return iter ( d . itervalues ( ** kw ) ) [EOL] return iter ( d . values ( ** kw ) ) [EOL] [EOL] def iteritems ( d , ** kw ) : [EOL] if hasattr ( d , [string] ) : [EOL] return iter ( d . iteritems ( ** kw ) ) [EOL] return iter ( d . items ( ** kw ) ) [EOL] [EOL] def iterlists ( d , ** kw ) : [EOL] if hasattr ( d , [string] ) : [EOL] return iter ( d . iterlists ( ** kw ) ) [EOL] return iter ( d . lists ( ** kw ) ) [EOL] [EOL] def keys ( d , ** kw ) : [EOL] return list ( iterkeys ( d , ** kw ) ) [EOL] else : [EOL] unicode = unicode [EOL] xrange = xrange [EOL] bytes = str [EOL] def keys ( d , ** kw ) : [EOL] return d . keys ( ** kw ) [EOL] [EOL] def iterkeys ( d , ** kw ) : [EOL] return iter ( d . iterkeys ( ** kw ) ) [EOL] [EOL] def itervalues ( d , ** kw ) : [EOL] return iter ( d . itervalues ( ** kw ) ) [EOL] [EOL] def iteritems ( d , ** kw ) : [EOL] return iter ( d . iteritems ( ** kw ) ) [EOL] [EOL] def iterlists ( d , ** kw ) : [EOL] return iter ( d . iterlists ( ** kw ) ) [EOL] [EOL] if PY3 : [EOL] import builtins [EOL] exec_ = getattr ( builtins , [string] ) [EOL] [EOL] [EOL] def reraise ( tp , value , tb = None ) : [EOL] if value is None : [EOL] value = tp ( ) [EOL] if value . __traceback__ is not tb : [EOL] raise value . with_traceback ( tb ) [EOL] raise value [EOL] [EOL] else : [EOL] def exec_ ( _code_ , _globs_ = None , _locs_ = None ) : [EOL] [docstring] [EOL] if _globs_ is None : [EOL] frame = sys . _getframe ( [number] ) [EOL] _globs_ = frame . f_globals [EOL] if _locs_ is None : [EOL] _locs_ = frame . f_locals [EOL] del frame [EOL] elif _locs_ is None : [EOL] _locs_ = _globs_ [EOL] exec ( [string] ) [EOL] [EOL] [EOL] exec_ ( [string] ) [EOL] [EOL] [EOL] if PY3 : [EOL] import operator [EOL] def b ( s ) : [EOL] if isinstance ( s , str ) : [EOL] return s . encode ( [string] ) [EOL] assert isinstance ( s , bytes ) [EOL] return s [EOL] def u ( s ) : [EOL] return s [EOL] unichr = chr [EOL] if sys . version_info [ [number] ] <= [number] : [EOL] def int2byte ( i ) : [EOL] return bytes ( ( i , ) ) [EOL] else : [EOL] [comment] [EOL] int2byte = operator . methodcaller ( [string] , [number] , [string] ) [EOL] byte2int = operator . itemgetter ( [number] ) [EOL] indexbytes = operator . getitem [EOL] iterbytes = iter [EOL] import io [EOL] StringIO = io . StringIO [EOL] BytesIO = io . BytesIO [EOL] else : [EOL] def b ( s ) : [EOL] return s [EOL] [comment] [EOL] def u ( s ) : [EOL] return unicode ( s . replace ( [string] , [string] ) , [string] ) [EOL] unichr = unichr [EOL] int2byte = chr [EOL] def byte2int ( bs ) : [EOL] return ord ( bs [ [number] ] ) [EOL] def indexbytes ( buf , i ) : [EOL] return ord ( buf [ i ] ) [EOL] def iterbytes ( buf ) : [EOL] return ( ord ( byte ) for byte in buf ) [EOL] import StringIO [EOL] StringIO = BytesIO = StringIO . StringIO	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] __revision__ = [string] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] from winappdbg import win32 [EOL] from winappdbg import compat [EOL] from winappdbg . system import System [EOL] from winappdbg . textio import HexDump , CrashDump [EOL] from winappdbg . util import StaticClass , MemoryAddresses , PathOperations [EOL] [EOL] import sys [EOL] import os [EOL] import time [EOL] import zlib [EOL] import warnings [EOL] [EOL] [comment] [EOL] sql = None [EOL] anydbm = None [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] try : [EOL] import cerealizer [EOL] pickle = cerealizer [EOL] [EOL] [comment] [EOL] def optimize ( picklestring ) : [EOL] return picklestring [EOL] [EOL] [comment] [EOL] HIGHEST_PROTOCOL = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] except ImportError : [EOL] [EOL] [comment] [EOL] try : [EOL] import cPickle as pickle [EOL] [EOL] [comment] [EOL] except ImportError : [EOL] import pickle [EOL] [EOL] [comment] [EOL] HIGHEST_PROTOCOL = pickle . HIGHEST_PROTOCOL [EOL] [EOL] [comment] [EOL] try : [EOL] from pickletools import optimize [EOL] except ImportError : [EOL] def optimize ( picklestring ) : [EOL] return picklestring [EOL] [EOL] class Marshaller ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def dumps ( obj , protocol = HIGHEST_PROTOCOL ) : [EOL] return zlib . compress ( optimize ( pickle . dumps ( obj ) ) , [number] ) [EOL] [EOL] @ staticmethod def loads ( data ) : [EOL] return pickle . loads ( zlib . decompress ( data ) ) [EOL] [EOL] [comment] [EOL] [EOL] class CrashWarning ( Warning ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] class Crash ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , event ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . timeStamp = time . time ( ) [EOL] [EOL] [comment] [EOL] self . notes = list ( ) [EOL] [EOL] [comment] [EOL] process = event . get_process ( ) [EOL] thread = event . get_thread ( ) [EOL] [EOL] [comment] [EOL] self . os = System . os [EOL] self . arch = process . get_arch ( ) [EOL] self . bits = process . get_bits ( ) [EOL] [EOL] [comment] [EOL] self . eventCode = event . get_event_code ( ) [EOL] self . eventName = event . get_event_name ( ) [EOL] self . pid = event . get_pid ( ) [EOL] self . tid = event . get_tid ( ) [EOL] self . registers = dict ( thread . get_context ( ) ) [EOL] self . labelPC = process . get_label_at_address ( self . pc ) [EOL] [EOL] [comment] [EOL] self . commandLine = None [EOL] self . environment = None [EOL] self . environmentData = None [EOL] self . registersPeek = None [EOL] self . debugString = None [EOL] self . modFileName = None [EOL] self . lpBaseOfDll = None [EOL] self . exceptionCode = None [EOL] self . exceptionName = None [EOL] self . exceptionDescription = None [EOL] self . exceptionAddress = None [EOL] self . exceptionLabel = None [EOL] self . firstChance = None [EOL] self . faultType = None [EOL] self . faultAddress = None [EOL] self . faultLabel = None [EOL] self . isOurBreakpoint = None [EOL] self . isSystemBreakpoint = None [EOL] self . stackTrace = None [EOL] self . stackTracePC = None [EOL] self . stackTraceLabels = None [EOL] self . stackTracePretty = None [EOL] self . stackRange = None [EOL] self . stackFrame = None [EOL] self . stackPeek = None [EOL] self . faultCode = None [EOL] self . faultMem = None [EOL] self . faultPeek = None [EOL] self . faultDisasm = None [EOL] self . memoryMap = None [EOL] [EOL] [comment] [EOL] if self . eventCode == win32 . OUTPUT_DEBUG_STRING_EVENT : [EOL] self . debugString = event . get_debug_string ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] elif self . eventCode in ( win32 . CREATE_PROCESS_DEBUG_EVENT , win32 . EXIT_PROCESS_DEBUG_EVENT , win32 . LOAD_DLL_DEBUG_EVENT , win32 . UNLOAD_DLL_DEBUG_EVENT ) : [EOL] aModule = event . get_module ( ) [EOL] self . modFileName = event . get_filename ( ) [EOL] if not self . modFileName : [EOL] self . modFileName = aModule . get_filename ( ) [EOL] self . lpBaseOfDll = event . get_module_base ( ) [EOL] if not self . lpBaseOfDll : [EOL] self . lpBaseOfDll = aModule . get_base ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] elif self . eventCode == win32 . EXCEPTION_DEBUG_EVENT : [EOL] [EOL] [comment] [EOL] self . exceptionCode = event . get_exception_code ( ) [EOL] self . exceptionName = event . get_exception_name ( ) [EOL] self . exceptionDescription = event . get_exception_description ( ) [EOL] self . exceptionAddress = event . get_exception_address ( ) [EOL] self . firstChance = event . is_first_chance ( ) [EOL] self . exceptionLabel = process . get_label_at_address ( self . exceptionAddress ) [EOL] if self . exceptionCode in ( win32 . EXCEPTION_ACCESS_VIOLATION , win32 . EXCEPTION_GUARD_PAGE , win32 . EXCEPTION_IN_PAGE_ERROR ) : [EOL] self . faultType = event . get_fault_type ( ) [EOL] self . faultAddress = event . get_fault_address ( ) [EOL] self . faultLabel = process . get_label_at_address ( self . faultAddress ) [EOL] elif self . exceptionCode in ( win32 . EXCEPTION_BREAKPOINT , win32 . EXCEPTION_SINGLE_STEP ) : [EOL] self . isOurBreakpoint = hasattr ( event , [string] ) \ [EOL] and event . breakpoint [EOL] self . isSystemBreakpoint = process . is_system_defined_breakpoint ( self . exceptionAddress ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . stackTracePretty = thread . get_stack_trace_with_labels ( ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] try : [EOL] self . stackTrace = thread . get_stack_trace ( ) [EOL] stackTracePC = [ ra for ( _ , ra , _ ) in self . stackTrace ] [EOL] self . stackTracePC = tuple ( stackTracePC ) [EOL] stackTraceLabels = [ process . get_label_at_address ( ra ) for ra in self . stackTracePC ] [EOL] self . stackTraceLabels = tuple ( stackTraceLabels ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] [EOL] def fetch_extra_data ( self , event , takeMemorySnapshot = [number] ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] process = event . get_process ( ) [EOL] thread = event . get_thread ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . commandLine = process . get_command_line ( ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . environmentData = process . get_environment_data ( ) [EOL] self . environment = process . parse_environment_data ( self . environmentData ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] [EOL] [comment] [EOL] self . registersPeek = thread . peek_pointers_in_registers ( ) [EOL] [EOL] [comment] [EOL] aModule = process . get_module_at_address ( self . pc ) [EOL] if aModule is not None : [EOL] self . modFileName = aModule . get_filename ( ) [EOL] self . lpBaseOfDll = aModule . get_base ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . stackRange = thread . get_stack_range ( ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] try : [EOL] self . stackFrame = thread . get_stack_frame ( ) [EOL] stackFrame = self . stackFrame [EOL] except Exception : [EOL] self . stackFrame = thread . peek_stack_data ( ) [EOL] stackFrame = self . stackFrame [ : [number] ] [EOL] if stackFrame : [EOL] self . stackPeek = process . peek_pointers_in_data ( stackFrame ) [EOL] [EOL] [comment] [EOL] self . faultCode = thread . peek_code_bytes ( ) [EOL] try : [EOL] self . faultDisasm = thread . disassemble_around_pc ( [number] ) [EOL] except Exception : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] warnings . warn ( [string] % str ( e ) , CrashWarning ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . eventCode == win32 . EXCEPTION_DEBUG_EVENT : [EOL] if self . pc != self . exceptionAddress and self . exceptionCode in ( win32 . EXCEPTION_ACCESS_VIOLATION , win32 . EXCEPTION_ARRAY_BOUNDS_EXCEEDED , win32 . EXCEPTION_DATATYPE_MISALIGNMENT , win32 . EXCEPTION_IN_PAGE_ERROR , win32 . EXCEPTION_STACK_OVERFLOW , win32 . EXCEPTION_GUARD_PAGE , ) : [EOL] self . faultMem = process . peek ( self . exceptionAddress , [number] ) [EOL] if self . faultMem : [EOL] self . faultPeek = process . peek_pointers_in_data ( self . faultMem ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if takeMemorySnapshot == [number] : [EOL] self . memoryMap = process . get_memory_map ( ) [EOL] mappedFilenames = process . get_mapped_filenames ( self . memoryMap ) [EOL] for mbi in self . memoryMap : [EOL] mbi . filename = mappedFilenames . get ( mbi . BaseAddress , None ) [EOL] mbi . content = None [EOL] elif takeMemorySnapshot == [number] : [EOL] self . memoryMap = process . take_memory_snapshot ( ) [EOL] elif takeMemorySnapshot == [number] : [EOL] self . memoryMap = process . generate_memory_snapshot ( ) [EOL] [EOL] @ property def pc ( self ) : [EOL] [docstring] [EOL] try : [EOL] return self . registers [ [string] ] [comment] [EOL] except KeyError : [EOL] return self . registers [ [string] ] [comment] [EOL] [EOL] @ property def sp ( self ) : [EOL] [docstring] [EOL] try : [EOL] return self . registers [ [string] ] [comment] [EOL] except KeyError : [EOL] return self . registers [ [string] ] [comment] [EOL] [EOL] @ property def fp ( self ) : [EOL] [docstring] [EOL] try : [EOL] return self . registers [ [string] ] [comment] [EOL] except KeyError : [EOL] return self . registers [ [string] ] [comment] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . fullReport ( ) [EOL] [EOL] def key ( self ) : [EOL] [docstring] [EOL] warnings . warn ( [string] , DeprecationWarning ) [EOL] return self . signature [EOL] [EOL] @ property def signature ( self ) : [EOL] if self . labelPC : [EOL] pc = self . labelPC [EOL] else : [EOL] pc = self . pc [EOL] if self . stackTraceLabels : [EOL] trace = self . stackTraceLabels [EOL] else : [EOL] trace = self . stackTracePC [EOL] return ( self . arch , self . eventCode , self . exceptionCode , pc , trace , self . debugString , ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] def isExploitable ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] if self . eventCode != win32 . EXCEPTION_DEBUG_EVENT : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . stackRange and self . pc is not None and self . stackRange [ [number] ] <= self . pc < self . stackRange [ [number] ] : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] if self . stackRange and self . sp is not None and not ( self . stackRange [ [number] ] <= self . sp < self . stackRange [ [number] ] ) : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . EXCEPTION_ILLEGAL_INSTRUCTION : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . EXCEPTION_PRIV_INSTRUCTION : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . EXCEPTION_GUARD_PAGE : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . STATUS_STACK_BUFFER_OVERRUN : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . STATUS_HEAP_CORRUPTION : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . EXCEPTION_ACCESS_VIOLATION : [EOL] nearNull = self . faultAddress is None or MemoryAddresses . align_address_to_page_start ( self . faultAddress ) == [number] [EOL] controlFlow = self . __is_control_flow ( ) [EOL] blockDataMove = self . __is_block_data_move ( ) [EOL] if self . faultType == win32 . EXCEPTION_EXECUTE_FAULT : [EOL] if nearNull : [EOL] return ( [string] , [string] , [string] ) [EOL] else : [EOL] return ( [string] , [string] , [string] ) [EOL] elif self . faultType == win32 . EXCEPTION_WRITE_FAULT : [EOL] if nearNull : [EOL] return ( [string] , [string] , [string] ) [EOL] else : [EOL] return ( [string] , [string] , [string] ) [EOL] elif self . faultType == win32 . EXCEPTION_READ_FAULT : [EOL] if self . faultAddress == self . pc : [EOL] if nearNull : [EOL] return ( [string] , [string] , [string] ) [EOL] else : [EOL] return ( [string] , [string] , [string] ) [EOL] if controlFlow : [EOL] if nearNull : [EOL] return ( [string] , [string] , [string] ) [EOL] else : [EOL] return ( [string] , [string] , [string] ) [EOL] if blockDataMove : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] result = ( [string] , [string] , [string] ) [EOL] [EOL] if self . exceptionCode == win32 . EXCEPTION_ACCESS_VIOLATION : [EOL] if self . faultType == win32 . EXCEPTION_READ_FAULT : [EOL] if nearNull : [EOL] result = ( [string] , [string] , [string] ) [EOL] [EOL] elif self . exceptionCode == win32 . EXCEPTION_INT_DIVIDE_BY_ZERO : [EOL] result = ( [string] , [string] , [string] ) [EOL] [EOL] elif self . exceptionCode == win32 . EXCEPTION_FLT_DIVIDE_BY_ZERO : [EOL] result = ( [string] , [string] , [string] ) [EOL] [EOL] elif self . exceptionCode in ( win32 . EXCEPTION_BREAKPOINT , win32 . STATUS_WX86_BREAKPOINT ) : [EOL] result = ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return result [EOL] [EOL] def __is_control_flow ( self ) : [EOL] [docstring] [EOL] jump_instructions = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] call_instructions = ( [string] , [string] , [string] ) [EOL] loop_instructions = ( [string] , [string] , [string] , [string] , [string] ) [EOL] control_flow_instructions = call_instructions + loop_instructions + jump_instructions [EOL] isControlFlow = False [EOL] instruction = None [EOL] if self . pc is not None and self . faultDisasm : [EOL] for disasm in self . faultDisasm : [EOL] if disasm [ [number] ] == self . pc : [EOL] instruction = disasm [ [number] ] . lower ( ) . strip ( ) [EOL] break [EOL] if instruction : [EOL] for x in control_flow_instructions : [EOL] if x in instruction : [EOL] isControlFlow = True [EOL] break [EOL] return isControlFlow [EOL] [EOL] def __is_block_data_move ( self ) : [EOL] [docstring] [EOL] block_data_move_instructions = ( [string] , [string] , [string] ) [EOL] isBlockDataMove = False [EOL] instruction = None [EOL] if self . pc is not None and self . faultDisasm : [EOL] for disasm in self . faultDisasm : [EOL] if disasm [ [number] ] == self . pc : [EOL] instruction = disasm [ [number] ] . lower ( ) . strip ( ) [EOL] break [EOL] if instruction : [EOL] for x in block_data_move_instructions : [EOL] if x in instruction : [EOL] isBlockDataMove = True [EOL] break [EOL] return isBlockDataMove [EOL] [EOL] def briefReport ( self ) : [EOL] [docstring] [EOL] if self . exceptionCode is not None : [EOL] if self . exceptionCode == win32 . EXCEPTION_BREAKPOINT : [EOL] if self . isOurBreakpoint : [EOL] what = [string] [EOL] elif self . isSystemBreakpoint : [EOL] what = [string] [EOL] else : [EOL] what = [string] [EOL] elif self . exceptionDescription : [EOL] what = self . exceptionDescription [EOL] elif self . exceptionName : [EOL] what = self . exceptionName [EOL] else : [EOL] what = [string] % HexDump . integer ( self . exceptionCode , self . bits ) [EOL] if self . firstChance : [EOL] chance = [string] [EOL] else : [EOL] chance = [string] [EOL] if self . exceptionLabel : [EOL] where = self . exceptionLabel [EOL] elif self . exceptionAddress : [EOL] where = HexDump . address ( self . exceptionAddress , self . bits ) [EOL] elif self . labelPC : [EOL] where = self . labelPC [EOL] else : [EOL] where = HexDump . address ( self . pc , self . bits ) [EOL] msg = [string] % ( what , chance , where ) [EOL] elif self . debugString is not None : [EOL] if self . labelPC : [EOL] where = self . labelPC [EOL] else : [EOL] where = HexDump . address ( self . pc , self . bits ) [EOL] msg = [string] % ( where , self . debugString ) [EOL] else : [EOL] if self . labelPC : [EOL] where = self . labelPC [EOL] else : [EOL] where = HexDump . address ( self . pc , self . bits ) [EOL] msg = [string] % ( self . eventName , HexDump . integer ( self . eventCode , self . bits ) , where ) [EOL] return msg [EOL] [EOL] def fullReport ( self , bShowNotes = True ) : [EOL] [docstring] [EOL] msg = self . briefReport ( ) [EOL] msg += [string] [EOL] [EOL] if self . bits == [number] : [EOL] width = [number] [EOL] else : [EOL] width = [number] [EOL] [EOL] if self . eventCode == win32 . EXCEPTION_DEBUG_EVENT : [EOL] ( exploitability , expcode , expdescription ) = self . isExploitable ( ) [EOL] msg += [string] % exploitability [EOL] msg += [string] % expdescription [EOL] [EOL] if bShowNotes and self . notes : [EOL] msg += [string] [EOL] msg += self . notesReport ( ) [EOL] [EOL] if self . commandLine : [EOL] msg += [string] % self . commandLine [EOL] [EOL] if self . environment : [EOL] msg += [string] [EOL] msg += self . environmentReport ( ) [EOL] [EOL] if not self . labelPC : [EOL] base = HexDump . address ( self . lpBaseOfDll , self . bits ) [EOL] if self . modFileName : [EOL] fn = PathOperations . pathname_to_filename ( self . modFileName ) [EOL] msg += [string] % ( fn , base ) [EOL] else : [EOL] msg += [string] % base [EOL] [EOL] if self . registers : [EOL] msg += [string] [EOL] msg += CrashDump . dump_registers ( self . registers ) [EOL] if self . registersPeek : [EOL] msg += [string] [EOL] msg += CrashDump . dump_registers_peek ( self . registers , self . registersPeek , width = width ) [EOL] [EOL] if self . faultDisasm : [EOL] msg += [string] [EOL] msg += CrashDump . dump_code ( self . faultDisasm , self . pc , bits = self . bits ) [EOL] [EOL] if self . stackTrace : [EOL] msg += [string] [EOL] if self . stackTracePretty : [EOL] msg += CrashDump . dump_stack_trace_with_labels ( self . stackTracePretty , bits = self . bits ) [EOL] else : [EOL] msg += CrashDump . dump_stack_trace ( self . stackTrace , bits = self . bits ) [EOL] [EOL] if self . stackFrame : [EOL] if self . stackPeek : [EOL] msg += [string] [EOL] msg += CrashDump . dump_stack_peek ( self . stackPeek , width = width ) [EOL] msg += [string] [EOL] msg += HexDump . hexblock ( self . stackFrame , self . sp , bits = self . bits , width = width ) [EOL] [EOL] if self . faultCode and not self . modFileName : [EOL] msg += [string] [EOL] msg += HexDump . hexblock ( self . faultCode , self . pc , bits = self . bits , width = width ) [EOL] [EOL] if self . faultMem : [EOL] if self . faultPeek : [EOL] msg += [string] [EOL] msg += CrashDump . dump_data_peek ( self . faultPeek , self . exceptionAddress , bits = self . bits , width = width ) [EOL] msg += [string] [EOL] msg += HexDump . hexblock ( self . faultMem , self . exceptionAddress , bits = self . bits , width = width ) [EOL] [EOL] if self . memoryMap : [EOL] msg += [string] [EOL] mappedFileNames = dict ( ) [EOL] for mbi in self . memoryMap : [EOL] if hasattr ( mbi , [string] ) and mbi . filename : [EOL] mappedFileNames [ mbi . BaseAddress ] = mbi . filename [EOL] msg += CrashDump . dump_memory_map ( self . memoryMap , mappedFileNames , bits = self . bits ) [EOL] [EOL] if not msg . endswith ( [string] ) : [EOL] if not msg . endswith ( [string] ) : [EOL] msg += [string] [EOL] msg += [string] [EOL] return msg [EOL] [EOL] def environmentReport ( self ) : [EOL] [docstring] [EOL] msg = [string] [EOL] if self . environment : [EOL] for key , value in compat . iteritems ( self . environment ) : [EOL] msg += [string] % ( key , value ) [EOL] return msg [EOL] [EOL] def notesReport ( self ) : [EOL] [docstring] [EOL] msg = [string] [EOL] if self . notes : [EOL] for n in self . notes : [EOL] n = n . strip ( [string] ) [EOL] if [string] in n : [EOL] n = n . strip ( [string] ) [EOL] msg += [string] % n . pop ( [number] ) [EOL] for x in n : [EOL] msg += [string] % x [EOL] else : [EOL] msg += [string] % n [EOL] return msg [EOL] [EOL] def addNote ( self , msg ) : [EOL] [docstring] [EOL] self . notes . append ( msg ) [EOL] [EOL] def clearNotes ( self ) : [EOL] [docstring] [EOL] self . notes = list ( ) [EOL] [EOL] def getNotes ( self ) : [EOL] [docstring] [EOL] return self . notes [EOL] [EOL] def iterNotes ( self ) : [EOL] [docstring] [EOL] return self . notes . __iter__ ( ) [EOL] [EOL] def hasNotes ( self ) : [EOL] [docstring] [EOL] return bool ( self . notes ) [EOL] [EOL] [comment] [EOL] [EOL] class CrashContainer ( object ) : [EOL] [docstring] [EOL] [EOL] optimizeKeys = False [EOL] optimizeValues = True [EOL] compressKeys = False [EOL] compressValues = True [EOL] escapeKeys = False [EOL] escapeValues = False [EOL] binaryKeys = False [EOL] binaryValues = False [EOL] [EOL] def __init__ ( self , filename = None , allowRepeatedKeys = False ) : [EOL] [docstring] [EOL] if allowRepeatedKeys : [EOL] raise NotImplementedError ( ) [EOL] self . __filename = filename [EOL] if filename : [EOL] global anydbm [EOL] if not anydbm : [EOL] import anydbm [EOL] self . __db = anydbm . open ( filename , [string] ) [EOL] self . __keys = dict ( [ ( self . unmarshall_key ( mk ) , mk ) for mk in self . __db . keys ( ) ] ) [EOL] else : [EOL] self . __db = dict ( ) [EOL] self . __keys = dict ( ) [EOL] [EOL] def remove_key ( self , key ) : [EOL] [docstring] [EOL] del self . __keys [ key ] [EOL] [EOL] def marshall_key ( self , key ) : [EOL] [docstring] [EOL] if key in self . __keys : [EOL] return self . __keys [ key ] [EOL] skey = pickle . dumps ( key , protocol = [number] ) [EOL] if self . compressKeys : [EOL] skey = zlib . compress ( skey , zlib . Z_BEST_COMPRESSION ) [EOL] if self . escapeKeys : [EOL] skey = skey . encode ( [string] ) [EOL] if self . binaryKeys : [EOL] skey = buffer ( skey ) [EOL] self . __keys [ key ] = skey [EOL] return skey [EOL] [EOL] def unmarshall_key ( self , key ) : [EOL] [docstring] [EOL] key = str ( key ) [EOL] if self . escapeKeys : [EOL] key = key . decode ( [string] ) [EOL] if self . compressKeys : [EOL] key = zlib . decompress ( key ) [EOL] key = pickle . loads ( key ) [EOL] return key [EOL] [EOL] def marshall_value ( self , value , storeMemoryMap = False ) : [EOL] [docstring] [EOL] if hasattr ( value , [string] ) : [EOL] crash = value [EOL] memoryMap = crash . memoryMap [EOL] try : [EOL] crash . memoryMap = None [EOL] if storeMemoryMap and memoryMap is not None : [EOL] [comment] [EOL] crash . memoryMap = list ( memoryMap ) [EOL] if self . optimizeValues : [EOL] value = pickle . dumps ( crash , protocol = HIGHEST_PROTOCOL ) [EOL] value = optimize ( value ) [EOL] else : [EOL] value = pickle . dumps ( crash , protocol = [number] ) [EOL] finally : [EOL] crash . memoryMap = memoryMap [EOL] del memoryMap [EOL] del crash [EOL] if self . compressValues : [EOL] value = zlib . compress ( value , zlib . Z_BEST_COMPRESSION ) [EOL] if self . escapeValues : [EOL] value = value . encode ( [string] ) [EOL] if self . binaryValues : [EOL] value = buffer ( value ) [EOL] return value [EOL] [EOL] def unmarshall_value ( self , value ) : [EOL] [docstring] [EOL] value = str ( value ) [EOL] if self . escapeValues : [EOL] value = value . decode ( [string] ) [EOL] if self . compressValues : [EOL] value = zlib . decompress ( value ) [EOL] value = pickle . loads ( value ) [EOL] return value [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return len ( self . __keys ) [EOL] [EOL] def __bool__ ( self ) : [EOL] [docstring] [EOL] return bool ( self . __keys ) [EOL] [EOL] def __contains__ ( self , crash ) : [EOL] [docstring] [EOL] return self . has_key ( crash . key ( ) ) [EOL] [EOL] def has_key ( self , key ) : [EOL] [docstring] [EOL] return key in self . __keys [EOL] [EOL] def iterkeys ( self ) : [EOL] [docstring] [EOL] return compat . iterkeys ( self . __keys ) [EOL] [EOL] class __CrashContainerIterator ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , container ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . __container = container [EOL] self . __keys_iter = compat . iterkeys ( container ) [EOL] [EOL] def next ( self ) : [EOL] [docstring] [EOL] key = self . __keys_iter . next ( ) [EOL] return self . __container . get ( key ) [EOL] [EOL] def __del__ ( self ) : [EOL] [docstring] [EOL] try : [EOL] if self . __filename : [EOL] self . __db . close ( ) [EOL] except : [EOL] pass [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] return self . itervalues ( ) [EOL] [EOL] def itervalues ( self ) : [EOL] [docstring] [EOL] return self . __CrashContainerIterator ( self ) [EOL] [EOL] def add ( self , crash ) : [EOL] [docstring] [EOL] if crash not in self : [EOL] key = crash . key ( ) [EOL] skey = self . marshall_key ( key ) [EOL] data = self . marshall_value ( crash , storeMemoryMap = True ) [EOL] self . __db [ skey ] = data [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] [docstring] [EOL] skey = self . marshall_key ( key ) [EOL] del self . __db [ skey ] [EOL] self . remove_key ( key ) [EOL] [EOL] def remove ( self , crash ) : [EOL] [docstring] [EOL] del self [ crash . key ( ) ] [EOL] [EOL] def get ( self , key ) : [EOL] [docstring] [EOL] skey = self . marshall_key ( key ) [EOL] data = self . __db [ skey ] [EOL] crash = self . unmarshall_value ( data ) [EOL] return crash [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] [docstring] [EOL] return self . get ( key ) [EOL] [EOL] [comment] [EOL] [EOL] class CrashDictionary ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , url , creator = None , allowRepeatedKeys = True ) : [EOL] [docstring] [EOL] global sql [EOL] if sql is None : [EOL] from winappdbg import sql [EOL] self . _allowRepeatedKeys = allowRepeatedKeys [EOL] self . _dao = sql . CrashDAO ( url , creator ) [EOL] [EOL] def add ( self , crash ) : [EOL] [docstring] [EOL] self . _dao . add ( crash , self . _allowRepeatedKeys ) [EOL] [EOL] def get ( self , key ) : [EOL] [docstring] [EOL] found = self . _dao . find ( signature = key , limit = [number] , order = - [number] ) [EOL] if not found : [EOL] raise KeyError ( key ) [EOL] return found [ [number] ] [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] offset = [number] [EOL] limit = [number] [EOL] while [number] : [EOL] found = self . _dao . find ( offset = offset , limit = limit ) [EOL] if not found : [EOL] break [EOL] offset += len ( found ) [EOL] for crash in found : [EOL] yield crash [EOL] [EOL] def itervalues ( self ) : [EOL] [docstring] [EOL] return self . __iter__ ( ) [EOL] [EOL] def iterkeys ( self ) : [EOL] [docstring] [EOL] for crash in self : [EOL] yield crash . signature [comment] [EOL] [EOL] def __contains__ ( self , crash ) : [EOL] [docstring] [EOL] return self . _dao . count ( signature = crash . signature ) > [number] [EOL] [EOL] def has_key ( self , key ) : [EOL] [docstring] [EOL] return self . _dao . count ( signature = key ) > [number] [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return self . _dao . count ( ) [EOL] [EOL] def __bool__ ( self ) : [EOL] [docstring] [EOL] return bool ( len ( self ) ) [EOL] [EOL] class CrashTable ( CrashDictionary ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , location = None , allowRepeatedKeys = True ) : [EOL] [docstring] [EOL] warnings . warn ( [string] % self . __class__ , DeprecationWarning ) [EOL] if location : [EOL] url = [string] % location [EOL] else : [EOL] url = [string] [EOL] super ( CrashTable , self ) . __init__ ( url , allowRepeatedKeys ) [EOL] [EOL] class CrashTableMSSQL ( CrashDictionary ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , location = None , allowRepeatedKeys = True ) : [EOL] [docstring] [EOL] warnings . warn ( [string] % self . __class__ , DeprecationWarning ) [EOL] import urllib [EOL] url = [string] + urllib . quote_plus ( location ) [EOL] super ( CrashTableMSSQL , self ) . __init__ ( url , allowRepeatedKeys ) [EOL] [EOL] class VolatileCrashContainer ( CrashTable ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , allowRepeatedKeys = True ) : [EOL] [docstring] [EOL] super ( VolatileCrashContainer , self ) . __init__ ( allowRepeatedKeys = allowRepeatedKeys ) [EOL] [EOL] class DummyCrashContainer ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , allowRepeatedKeys = True ) : [EOL] [docstring] [EOL] self . __keys = set ( ) [EOL] self . __count = [number] [EOL] self . __allowRepeatedKeys = allowRepeatedKeys [EOL] [EOL] def __contains__ ( self , crash ) : [EOL] [docstring] [EOL] return crash . signature in self . __keys [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] if self . __allowRepeatedKeys : [EOL] return self . __count [EOL] return len ( self . __keys ) [EOL] [EOL] def __bool__ ( self ) : [EOL] [docstring] [EOL] return bool ( len ( self ) ) [EOL] [EOL] def add ( self , crash ) : [EOL] [docstring] [EOL] self . __keys . add ( crash . signature ) [EOL] self . __count += [number] [EOL] [EOL] def get ( self , key ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] def has_key ( self , key ) : [EOL] [docstring] [EOL] return self . __keys . has_key ( key ) [EOL] [EOL] def iterkeys ( self ) : [EOL] [docstring] [EOL] return iter ( self . __keys ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] try : [EOL] cerealizer . register ( Crash ) [EOL] cerealizer . register ( win32 . MemoryBasicInformation ) [EOL] except NameError : [EOL] pass [EOL]	
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] __revision__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] __revision__ = [string] [EOL] [EOL] def do ( self , arg ) : [EOL] [docstring] [EOL] self . debug . system . fix_symbol_store_path ( remote = True , force = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] __author__ = [string] [EOL] [EOL] [EOL] def get_namespace_by_name ( object_name ) : [EOL] [docstring] [EOL] ( imported_object , object_name ) = _import_first ( object_name ) [EOL] parts = object_name . partition ( [string] ) [EOL] first_part = parts [ [number] ] [EOL] remain_part = parts [ [number] ] [EOL] [EOL] while remain_part and type ( _get_attr_by_name ( imported_object , remain_part ) ) is type : [comment] [EOL] remain_part = remain_part . rpartition ( [string] ) [ [number] ] [EOL] [EOL] if remain_part : [EOL] return first_part + [string] + remain_part [EOL] else : [EOL] return first_part [EOL] [EOL] [EOL] def _import_first ( object_name ) : [EOL] [docstring] [EOL] while object_name : [EOL] try : [EOL] return ( __import__ ( object_name , globals = [ ] , locals = [ ] , fromlist = [ ] ) , object_name ) [EOL] except ImportError : [EOL] object_name = object_name . rpartition ( [string] ) [ [number] ] [comment] [EOL] raise Exception ( [string] + object_name ) [EOL] [EOL] [EOL] def _get_attr_by_name ( obj , name ) : [EOL] [docstring] [EOL] result = obj [EOL] parts = name . split ( [string] ) [EOL] for part in parts : [EOL] result = getattr ( result , part ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import List , Any [EOL] import python [EOL] import typing [EOL] import sys [EOL] import os [EOL] [EOL] helpers_dir = os . getenv ( [string] , sys . path [ [number] ] ) [EOL] if sys . path [ [number] ] != helpers_dir : [EOL] sys . path . insert ( [number] , helpers_dir ) [EOL] [EOL] from nose_utils import TeamcityPlugin [EOL] [EOL] from pycharm_run_utils import debug , import_system_module [EOL] from pycharm_run_utils import adjust_sys_path [EOL] [EOL] adjust_sys_path ( False ) [EOL] [EOL] shlex = import_system_module ( [string] ) [EOL] [EOL] try : [EOL] from nose . core import TestProgram [EOL] from nose . config import Config [EOL] from nose . plugins . manager import DefaultPluginManager [EOL] except : [EOL] raise NameError ( [string] ) [EOL] [EOL] teamcity_plugin = TeamcityPlugin ( ) [EOL] [EOL] class MyConfig ( Config ) : [EOL] def __init__ ( self , ** kw ) : [EOL] super ( MyConfig , self ) . __init__ ( ** kw ) [EOL] [EOL] def __setstate__ ( self , state ) : [EOL] super ( MyConfig , self ) . __setstate__ ( state ) [EOL] self . plugins . addPlugin ( teamcity_plugin ) [EOL] [EOL] def process_args ( ) : [EOL] tests = [ ] [EOL] [EOL] opts = None [EOL] if sys . argv [ - [number] ] . startswith ( [string] ) : [EOL] test_names = sys . argv [ [number] : - [number] ] [EOL] opts = sys . argv [ - [number] ] [EOL] else : [EOL] test_names = sys . argv [ [number] : ] [EOL] [EOL] for arg in test_names : [EOL] arg = arg . strip ( ) [EOL] if len ( arg ) == [number] : [EOL] return [EOL] [EOL] a = arg . split ( [string] ) [EOL] if len ( a ) == [number] : [EOL] [comment] [EOL] a_splitted = a [ [number] ] . split ( [string] ) [EOL] if len ( a_splitted ) != [number] : [EOL] [comment] [EOL] if a_splitted [ [number] ] . endswith ( [string] ) : [EOL] debug ( [string] + a_splitted [ [number] ] + [string] + a_splitted [ [number] ] ) [EOL] tests . append ( a_splitted [ [number] ] ) [EOL] else : [EOL] if a [ [number] ] . endswith ( [string] ) : [EOL] debug ( [string] + a [ [number] ] ) [EOL] tests . append ( a [ [number] ] ) [EOL] else : [EOL] debug ( [string] + a [ [number] ] ) [EOL] tests . append ( a [ [number] ] ) [EOL] [EOL] elif len ( a ) == [number] : [EOL] [comment] [EOL] debug ( [string] + a [ [number] ] + [string] + a [ [number] ] ) [EOL] tests . append ( a [ [number] ] + [string] + a [ [number] ] ) [EOL] else : [EOL] [comment] [EOL] debug ( [string] + a [ [number] ] + [string] + a [ [number] ] + [string] + a [ [number] ] ) [EOL] if a [ [number] ] == [string] : [EOL] [comment] [EOL] tests . append ( a [ [number] ] + [string] + a [ [number] ] ) [EOL] else : [EOL] tests . append ( a [ [number] ] + [string] + a [ [number] ] + [string] + a [ [number] ] ) [EOL] [EOL] argv = [ [string] ] [EOL] [EOL] argv . extend ( tests ) [EOL] [EOL] [EOL] if opts : [EOL] options = shlex . split ( opts ) [EOL] argv . extend ( options ) [EOL] [EOL] manager = DefaultPluginManager ( ) [EOL] manager . addPlugin ( teamcity_plugin ) [EOL] config = MyConfig ( plugins = manager ) [EOL] config . configure ( argv ) [EOL] [EOL] TestProgram ( argv = argv , config = config , exit = False ) [EOL] [EOL] if __name__ == [string] : [EOL] process_args ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union [EOL] import typing [EOL] __author__ = [string] [EOL] import os [EOL] import sys [EOL] import imp [EOL] [EOL] [EOL] PYTHON_VERSION_MAJOR = sys . version_info [ [number] ] [EOL] PYTHON_VERSION_MINOR = sys . version_info [ [number] ] [EOL] [EOL] ENABLE_DEBUG_LOGGING = False [EOL] if os . getenv ( [string] ) : [EOL] ENABLE_DEBUG_LOGGING = True [EOL] [EOL] def debug ( what ) : [EOL] if ENABLE_DEBUG_LOGGING : [EOL] sys . stdout . writelines ( str ( what ) + [string] ) [EOL] [EOL] def adjust_sys_path ( add_script_parent = True , script_index = [number] ) : [EOL] sys . path . pop ( [number] ) [EOL] if add_script_parent : [EOL] script_path = os . path . dirname ( sys . argv [ script_index ] ) [EOL] insert_to_sys_path ( script_path ) [EOL] [EOL] def adjust_django_sys_path ( ) : [EOL] pycharm_path = sys . path . pop ( [number] ) [EOL] script_path = sys . argv [ - [number] ] [EOL] insert_to_sys_path ( script_path ) [EOL] sys . path . append ( pycharm_path ) [EOL] [EOL] def import_system_module ( name ) : [EOL] if sys . platform == [string] : [comment] [EOL] return __import__ ( name ) [EOL] f , filename , desc = imp . find_module ( name ) [EOL] return imp . load_module ( [string] + name , f , filename , desc ) [EOL] [EOL] def getModuleName ( prefix , cnt ) : [EOL] return prefix + [string] + str ( cnt ) [EOL] [EOL] def insert_to_sys_path ( script_path ) : [EOL] while script_path in sys . path : [EOL] sys . path . remove ( script_path ) [EOL] sys . path . insert ( [number] , script_path ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import sys [EOL] [EOL] [EOL] class TeamcityServiceMessages : [EOL] quote = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def __init__ ( self , output = sys . stdout , prepend_linebreak = False ) : [EOL] self . output = output [EOL] self . prepend_linebreak = prepend_linebreak [EOL] self . test_stack = [ ] [EOL] [docstring] [EOL] self . topmost_suite = None [EOL] [docstring] [EOL] [EOL] self . number_of_tests = [number] [EOL] [EOL] def escapeValue ( self , value ) : [EOL] if sys . version_info [ [number] ] <= [number] and isinstance ( value , unicode ) : [EOL] s = value . encode ( [string] ) [EOL] else : [EOL] s = str ( value ) [EOL] return [string] . join ( [ self . quote . get ( x , x ) for x in s ] ) [EOL] [EOL] def message ( self , messageName , ** properties ) : [EOL] s = [string] + messageName [EOL] for k , v in properties . items ( ) : [EOL] if v is None : [EOL] continue [EOL] s = s + [string] % ( k , self . escapeValue ( v ) ) [EOL] s += [string] [EOL] [EOL] if self . prepend_linebreak : self . output . write ( [string] ) [EOL] self . output . write ( s ) [EOL] [EOL] def testSuiteStarted ( self , suiteName , location = None ) : [EOL] self . message ( [string] , name = suiteName , locationHint = location ) [EOL] self . test_stack . append ( suiteName ) [EOL] self . topmost_suite = suiteName [EOL] [EOL] def testSuiteFinished ( self , suiteName ) : [EOL] self . message ( [string] , name = suiteName ) [EOL] self . __pop_current_test ( ) [EOL] [EOL] def testStarted ( self , testName , location = None ) : [EOL] self . message ( [string] , name = testName , locationHint = location ) [EOL] self . test_stack . append ( testName ) [EOL] self . number_of_tests = self . number_of_tests + [number] [EOL] [EOL] [EOL] def testFinished ( self , testName , duration = None ) : [EOL] self . message ( [string] , name = testName , duration = duration ) [EOL] self . __pop_current_test ( ) [EOL] [EOL] [EOL] [EOL] def testIgnored ( self , testName , message = [string] ) : [EOL] self . message ( [string] , name = testName , message = message ) [EOL] self . testFinished ( testName ) [EOL] [EOL] def testFailed ( self , testName , message = [string] , details = [string] , expected = [string] , actual = [string] , duration = None ) : [EOL] [docstring] [EOL] if expected and actual : [EOL] self . message ( [string] , type = [string] , name = testName , message = message , details = details , expected = expected , actual = actual ) [EOL] else : [EOL] self . message ( [string] , name = testName , message = message , details = details ) [EOL] self . testFinished ( testName , int ( duration ) if duration else None ) [EOL] [EOL] [EOL] def __pop_current_test ( self ) : [EOL] try : [EOL] self . test_stack . pop ( ) [EOL] except IndexError : [EOL] pass [EOL] [EOL] def testError ( self , testName , message = [string] , details = [string] , duration = None ) : [EOL] self . message ( [string] , name = testName , message = message , details = details , error = [string] ) [EOL] self . testFinished ( testName , int ( duration ) if duration else None ) [EOL] [EOL] [EOL] def current_test_name ( self ) : [EOL] [docstring] [EOL] return self . test_stack [ - [number] ] if len ( self . test_stack ) > [number] else None [EOL] [EOL] def testStdOut ( self , testName , out ) : [EOL] self . message ( [string] , name = testName , out = out ) [EOL] [EOL] def testStdErr ( self , testName , out ) : [EOL] self . message ( [string] , name = testName , out = out ) [EOL] [EOL] def testCount ( self , count ) : [EOL] self . message ( [string] , count = count ) [EOL] [EOL] def testMatrixEntered ( self ) : [EOL] self . message ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment]	0
try : [EOL] from nose_helper . _2 import * [EOL] except ( ImportError , SyntaxError ) : [EOL] from nose_helper . _3 import * [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def reraise ( exc_class , exc_val , tb ) : [EOL] raise exc_class ( exc_val ) . with_traceback ( tb ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from nose_helper . suite import ContextSuite [EOL] from nose_helper . loader import TestLoader [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Tuple , Type , List , Dict [EOL] import python [EOL] import typing [EOL] import os [EOL] import re [EOL] [EOL] class Config ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** kw ) : [EOL] self . env = kw . pop ( [string] , { } ) [EOL] self . testMatchPat = [string] % os . sep [EOL] self . testMatch = re . compile ( self . testMatchPat ) [EOL] self . srcDirs = ( [string] , [string] ) [EOL] self . workingDir = os . getcwd ( ) [EOL] self . update ( kw ) [EOL] [EOL] def __repr__ ( self ) : [EOL] dict = self . __dict__ . copy ( ) [EOL] dict [ [string] ] = { } [EOL] keys = [ k for k in dict . keys ( ) if not k . startswith ( [string] ) ] [EOL] keys . sort ( ) [EOL] return [string] % [string] . join ( [ [string] % ( k , dict [ k ] ) for k in keys ] ) [EOL] __str__ = __repr__ [EOL] [EOL] def update ( self , d ) : [EOL] self . __dict__ . update ( d ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [docstring] [EOL] __author__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] __author__ = [string] [EOL] from django_manage_commands_provider . _parser import _utils [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def process_command ( dumper , command , parser ) : [EOL] [docstring] [EOL] dumper . set_arguments ( str ( command . args ) ) [comment] [EOL] [comment] [EOL] for opt in command . option_list : [EOL] num_of_args = int ( opt . nargs ) if opt . nargs else [number] [EOL] opt_type = None [EOL] if num_of_args > [number] : [EOL] opt_type = _utils . get_opt_type ( opt ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] dumper . add_command_option ( long_opt_names = opt . _long_opts , short_opt_names = opt . _short_opts , help_text = opt . help , argument_info = ( num_of_args , opt_type ) if num_of_args else None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] __version__ = [string] [EOL] [EOL] teamcity_presence_env_var = [string] [EOL] [EOL] [EOL] def is_running_under_teamcity ( ) : [EOL] return os . getenv ( teamcity_presence_env_var ) is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from __future__ import absolute_import [EOL] from django . test . runner import DiscoverRunner [EOL] from teamcity . unittestpy import TeamcityTestRunner [EOL] [EOL] [EOL] class TeamcityDjangoRunner ( DiscoverRunner ) : [EOL] def run_suite ( self , suite , ** kwargs ) : [EOL] return TeamcityTestRunner ( ) . run ( suite ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
try : [EOL] from flake8 . formatting import base [comment] [EOL] except ImportError : [EOL] from teamcity . flake8_v2_plugin import * [comment] [EOL] else : [EOL] from teamcity . flake8_v3_plugin import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] def getsizeof ( object , default = None ) : [EOL] [docstring] [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] import threading [EOL] import queue [EOL] import multiprocessing [EOL] import multiprocessing . managers [EOL] [EOL] [EOL] class BaseManager ( object ) : [EOL] def __init__ ( self , address = None , authkey = None ) : [EOL] self . address = address [EOL] [EOL] def start ( self , initializer = None , initargs = None ) : [EOL] pass [EOL] [EOL] def get_server ( self ) : [EOL] pass [EOL] [EOL] def connect ( self ) : [EOL] pass [EOL] [EOL] def shutdown ( self ) : [EOL] pass [EOL] [EOL] @ classmethod def register ( cls , typeid , callable = None , proxytype = None , exposed = None , method_to_typeid = None , create_method = None ) : [EOL] pass [EOL] [EOL] def __enter__ ( self ) : [EOL] pass [EOL] [EOL] def __exit__ ( self , exc_type , exc_val , exc_tb ) : [EOL] pass [EOL] [EOL] [EOL] class SyncManager ( multiprocessing . managers . BaseManager ) : [EOL] def Barrier ( self , parties , action = None , timeout = None ) : [EOL] return threading . Barrier ( parties , action , timeout ) [EOL] [EOL] def BoundedSemaphore ( self , value = None ) : [EOL] return threading . BoundedSemaphore ( value ) [EOL] [EOL] def Condition ( self , lock = None ) : [EOL] return threading . Condition ( lock ) [EOL] [EOL] def Event ( self ) : [EOL] return threading . Event ( ) [EOL] [EOL] def Lock ( self ) : [EOL] return threading . Lock ( ) [EOL] [EOL] def Namespace ( self ) : [EOL] pass [EOL] [EOL] def Queue ( self , maxsize = None ) : [EOL] return queue . Queue ( ) [EOL] [EOL] def RLock ( self ) : [EOL] return threading . RLock ( ) [EOL] [EOL] def Semaphore ( self , value = None ) : [EOL] return threading . Semaphore ( value ) [EOL] [EOL] def Array ( self , typecode , sequence ) : [EOL] pass [EOL] [EOL] def Value ( self , typecode , value ) : [EOL] pass [EOL] [EOL] def dict ( self , mapping_or_sequence ) : [EOL] pass [EOL] [EOL] def list ( self , sequence ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] import inspect [EOL] import functools [EOL] [EOL] from pockets . collections import listify [EOL] from six import string_types [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] def resolve ( name , modules = None ) : [EOL] [docstring] [EOL] if not isinstance ( name , string_types ) : [EOL] return name [EOL] [EOL] obj_path = name . split ( [string] ) [EOL] search_paths = [ ] [EOL] if modules : [EOL] while not obj_path [ [number] ] : [EOL] obj_path . pop ( [number] ) [EOL] for module_path in listify ( modules ) : [EOL] search_paths . append ( module_path . split ( [string] ) + obj_path ) [EOL] else : [EOL] caller = inspect . getouterframes ( inspect . currentframe ( ) ) [ [number] ] [ [number] ] . f_globals [EOL] module_path = caller [ [string] ] . split ( [string] ) [EOL] if not obj_path [ [number] ] : [EOL] obj_path . pop ( [number] ) [EOL] while not obj_path [ [number] ] : [EOL] obj_path . pop ( [number] ) [EOL] if module_path : [EOL] module_path . pop ( ) [EOL] [EOL] search_paths . append ( module_path + obj_path ) [EOL] search_paths . append ( obj_path ) [EOL] else : [EOL] search_paths . append ( obj_path ) [EOL] search_paths . append ( module_path + obj_path ) [EOL] [EOL] for path in search_paths : [EOL] try : [EOL] obj = functools . reduce ( getattr , path [ [number] : ] , __import__ ( path [ [number] ] ) ) [EOL] except ( AttributeError , ImportError ) : [EOL] pass [EOL] else : [EOL] return obj [EOL] [EOL] raise ValueError ( [string] [string] . format ( name , modules ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] from pockets . _version import __version__ [EOL] from pockets . collections import is_listy , listify , mappify [EOL] from pockets . inspect import resolve [EOL] from pockets . iterators import peek_iter , modify_iter [EOL] from pockets . string import camel , uncamel , splitcaps , UnicodeMixin [EOL] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] bibliographic_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] author_separators = [ [string] , [string] ] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] bibliographic_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] author_separators = [ [string] , [string] ] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] uni2tex_table = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str
from typing import Any [EOL] import typing [EOL] import os [EOL] import shutil [EOL] import tempfile [EOL] import vmprof [EOL] [EOL] import six [EOL] from _prof_imports import TreeStats , CallTreeStat [EOL] [EOL] [EOL] class VmProfProfile ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . stats = None [EOL] self . basepath = None [EOL] self . file = None [EOL] self . is_enabled = False [EOL] [EOL] def runcall ( self , func , * args , ** kw ) : [EOL] self . enable ( ) [EOL] try : [EOL] return func ( * args , ** kw ) [EOL] finally : [EOL] self . disable ( ) [EOL] [EOL] def enable ( self ) : [EOL] if not self . is_enabled : [EOL] if not os . path . exists ( self . basepath ) : [EOL] os . makedirs ( self . basepath ) [EOL] self . file = tempfile . NamedTemporaryFile ( delete = False , dir = self . basepath ) [EOL] try : [EOL] vmprof . enable ( self . file . fileno ( ) , lines = True ) [EOL] except : [EOL] vmprof . enable ( self . file . fileno ( ) ) [EOL] self . is_enabled = True [EOL] [EOL] def disable ( self ) : [EOL] if self . is_enabled : [EOL] vmprof . disable ( ) [EOL] self . file . close ( ) [EOL] self . is_enabled = False [EOL] [EOL] def create_stats ( self ) : [EOL] return None [EOL] [EOL] def getstats ( self ) : [EOL] self . create_stats ( ) [EOL] [EOL] return self . stats [EOL] [EOL] def dump_stats ( self , file ) : [EOL] shutil . copyfile ( self . file . name , file ) [EOL] [EOL] def _walk_tree ( self , parent , node , callback ) : [EOL] tree = callback ( parent , node ) [EOL] for c in six . itervalues ( node . children ) : [EOL] self . _walk_tree ( node , c , callback ) [EOL] return tree [EOL] [EOL] def tree_stats_to_response ( self , filename , response ) : [EOL] tree_stats_to_response ( filename , response ) [EOL] [EOL] def snapshot_extension ( self ) : [EOL] return [string] [EOL] [EOL] [EOL] def _walk_tree ( parent , node , callback ) : [EOL] if node is None : [EOL] return None [EOL] tree = callback ( parent , node ) [EOL] for c in six . itervalues ( node . children ) : [EOL] _walk_tree ( tree , c , callback ) [EOL] return tree [EOL] [EOL] [EOL] def tree_stats_to_response ( filename , response ) : [EOL] stats = vmprof . read_profile ( filename ) [EOL] [EOL] response . tree_stats = TreeStats ( ) [EOL] response . tree_stats . sampling_interval = vmprof . DEFAULT_PERIOD [EOL] [EOL] try : [EOL] tree = stats . get_tree ( ) [EOL] except vmprof . stats . EmptyProfileFile : [EOL] tree = None [EOL] [EOL] def convert ( parent , node ) : [EOL] tstats = CallTreeStat ( ) [EOL] tstats . name = node . name [EOL] tstats . count = node . count [EOL] tstats . children = [ ] [EOL] tstats . line_count = getattr ( node , [string] , { } ) [EOL] [EOL] if parent is not None : [EOL] if parent . children is None : [EOL] parent . children = [ ] [EOL] parent . children . append ( tstats ) [EOL] [EOL] return tstats [EOL] [EOL] response . tree_stats . call_tree = _walk_tree ( None , tree , convert ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] [EOL] import binascii [EOL] [EOL] from . transport import TMemoryBuffer [EOL] from . protocol . binary import TBinaryProtocolFactory [EOL] [EOL] [EOL] def serialize ( thrift_object , proto_factory = TBinaryProtocolFactory ( ) ) : [EOL] transport = TMemoryBuffer ( ) [EOL] protocol = proto_factory . get_protocol ( transport ) [EOL] thrift_object . write ( protocol ) [EOL] protocol . write_message_end ( ) [EOL] return transport . getvalue ( ) [EOL] [EOL] [EOL] def deserialize ( thrift_object , buf , proto_factory = TBinaryProtocolFactory ( ) ) : [EOL] transport = TMemoryBuffer ( buf ) [EOL] protocol = proto_factory . get_protocol ( transport ) [EOL] thrift_object . read ( protocol ) [EOL] return thrift_object [EOL] [EOL] [EOL] def hexlify ( byte_array , delimeter = [string] ) : [EOL] s = binascii . hexlify ( byte_array ) . decode ( [string] ) [EOL] return delimeter . join ( a + b for a , b in zip ( s [ : : [number] ] , s [ [number] : : [number] ] ) ) [EOL] [EOL] [EOL] def hexprint ( byte_array , delimeter = [string] , count = [number] ) : [EOL] print ( [string] ) [EOL] print ( byte_array ) [EOL] [EOL] print ( [string] ) [EOL] g = hexlify ( byte_array , delimeter ) . split ( delimeter ) [EOL] print ( [string] . join ( [string] . join ( g [ i : i + [number] ] ) for i in range ( [number] , len ( g ) , [number] ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import sys [EOL] import typing [EOL] import sys [EOL] [EOL] from . hook import install_import_hook , remove_import_hook [EOL] from . parser import load , load_module , load_fp [EOL] [EOL] __version__ = [string] [EOL] __python__ = sys . version_info [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $sys._version_info$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] [EOL] class ThriftParserError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftLexerError ( ThriftParserError ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftGrammerError ( ThriftParserError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] from . parser import parse , parse_fp [EOL] [EOL] [EOL] def load ( path , module_name = None , include_dirs = None , include_dir = None ) : [EOL] [docstring] [EOL] real_module = bool ( module_name ) [EOL] thrift = parse ( path , module_name , include_dirs = include_dirs , include_dir = include_dir ) [EOL] [EOL] if real_module : [EOL] sys . modules [ module_name ] = thrift [EOL] return thrift [EOL] [EOL] [EOL] def load_fp ( source , module_name ) : [EOL] [docstring] [EOL] thrift = parse_fp ( source , module_name ) [EOL] sys . modules [ module_name ] = thrift [EOL] return thrift [EOL] [EOL] [EOL] def _import_module ( import_name ) : [EOL] if [string] in import_name : [EOL] module , obj = import_name . rsplit ( [string] , [number] ) [EOL] return getattr ( __import__ ( module , None , None , [ obj ] ) , obj ) [EOL] else : [EOL] return __import__ ( import_name ) [EOL] [EOL] [EOL] def load_module ( fullname ) : [EOL] [docstring] [EOL] if not fullname . endswith ( [string] ) : [EOL] raise ImportError ( [string] ) [EOL] [EOL] if fullname in sys . modules : [EOL] return sys . modules [ fullname ] [EOL] [EOL] if [string] in fullname : [EOL] module_name , thrift_module_name = fullname . rsplit ( [string] , [number] ) [EOL] module = _import_module ( module_name ) [EOL] path_prefix = os . path . dirname ( os . path . abspath ( module . __file__ ) ) [EOL] path = os . path . join ( path_prefix , thrift_module_name ) [EOL] else : [EOL] path = fullname [EOL] thrift_file = [string] . format ( path [ : - [number] ] ) [EOL] [EOL] module = load ( thrift_file , module_name = fullname ) [EOL] sys . modules [ fullname ] = module [EOL] return sys . modules [ fullname ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] __version__ = [string] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] __version__ = [string] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] [docstring] [EOL] [EOL] __url__ = [string] [EOL] [docstring] [EOL] [EOL] __license__ = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] HTML_HELP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple , List , Pattern , Dict [EOL] import typing [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] import re [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] TEMPLATE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] _COLOR_RE = re . compile ( [string] ) [EOL] [EOL] def _set_colors ( template , * dicts ) : [EOL] colors = dicts [ [number] ] . copy ( ) [EOL] for d in dicts [ [number] : ] : colors . update ( d ) [EOL] return re . sub ( [string] , lambda m : colors [ m . group ( [number] ) ] , template ) [EOL] [EOL] def _rv ( match ) : [EOL] [docstring] [EOL] rgb = [ int ( grp , [number] ) for grp in match . groups ( ) ] [EOL] return [string] + [string] . join ( [ [string] % ( [number] - c ) for c in rgb ] ) [EOL] [EOL] def _darken_darks ( match ) : [EOL] rgb = [ int ( grp , [number] ) for grp in match . groups ( ) ] [EOL] return [string] + [string] . join ( [ [string] % ( ( ( c / [number] ) ** [number] ) * [number] ) for c in rgb ] ) [EOL] [EOL] _WHITE_COLORS = dict ( body_bg = [string] , body_fg = [string] , body_link = [string] , body_visited_link = [string] , navbar_bg = [string] , navbar_fg = [string] , navbar_border = [string] , navbar_select_bg = [string] , navbar_select_fg = [string] , navbar_link = [string] , navbar_visited_link = [string] , table_bg = [string] , table_fg = [string] , table_link = [string] , table_visited_link = [string] , table_border = [string] , table_hdr_bg = [string] , table_hdr_fg = [string] , table_hdr_link = [string] , table_hdr_visited_link = [string] , group_hdr_bg = [string] , group_hdr_fg = [string] , sig_name = [string] , sig_arg = [string] , sig_default = [string] , summary_sig_name = [string] , summary_sig_arg = [string] , summary_sig_default = [string] , variable_bg = [string] , variable_fg = [string] , variable_border = [string] , variable_linewrap = [string] , variable_ellipsis = [string] , variable_quote = [string] , variable_group = [string] , variable_string = [string] , variable_op = [string] , variable_unknown = [string] , re = [string] , re_char = [string] , re_op = [string] , re_group = [string] , re_ref = [string] , doctest_bg = [string] , doctest_fg = [string] , doctest_border = [string] , doctest_in_table_bg = [string] , doctest_in_table_fg = [string] , pysrc_border = [string] , pysrc_sep_border = [string] , pysrc_bg = [string] , pysrc_fg = [string] , pysrc_highlight_hdr_bg = [string] , pysrc_highlight_bg = [string] , py_prompt = [string] , py_more = [string] , py_string = [string] , py_comment = [string] , py_keyword = [string] , py_output = [string] , py_name = [string] , py_number = [string] , py_def_name = [string] , py_base_class = [string] , py_param = [string] , py_docstring = [string] , py_decorator = [string] , graph_border = [string] , log_bg = [string] , log_fg = [string] , log_border = [string] , log_hdr_bg = [string] , log_hdr_fg = [string] , log_error_bg = [string] , log_error_fg = [string] , log_error_border = [string] , log_warn_bg = [string] , log_warn_fg = [string] , log_warn_border = [string] , log_info_bg = [string] , log_info_fg = [string] , log_info_border = [string] , opt_changed_fg = [string] , opt_default_fg = [string] , ) [EOL] [EOL] _BLUE_COLORS = _WHITE_COLORS . copy ( ) [EOL] _BLUE_COLORS . update ( dict ( body_bg = [string] , body_fg = [string] , body_link = [string] , body_visited_link = [string] , table_bg = [string] , table_fg = [string] , table_hdr_bg = [string] , table_hdr_fg = [string] , table_hdr_link = [string] , table_hdr_visited_link = [string] , table_border = [string] , navbar_bg = [string] , navbar_fg = [string] , navbar_link = [string] , navbar_visited_link = [string] , navbar_select_bg = [string] , navbar_select_fg = [string] , navbar_border = [string] , variable_bg = [string] , variable_fg = [string] , doctest_bg = [string] , doctest_fg = [string] , doctest_in_table_bg = [string] , doctest_in_table_fg = [string] , ) ) [EOL] [EOL] _WHITE = _set_colors ( TEMPLATE , _WHITE_COLORS ) [EOL] _BLUE = _set_colors ( TEMPLATE , _BLUE_COLORS ) [EOL] [EOL] [comment] [EOL] _GREEN = _COLOR_RE . sub ( _darken_darks , _COLOR_RE . sub ( [string] , _BLUE ) ) [EOL] [EOL] [comment] [EOL] _BLACK = _COLOR_RE . sub ( [string] , _COLOR_RE . sub ( _rv , _WHITE ) ) [EOL] [EOL] [comment] [EOL] _GRAYSCALE = _COLOR_RE . sub ( [string] , _WHITE ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STYLESHEETS = { [string] : ( _WHITE , [string] ) , [string] : ( _BLUE , [string] ) , [string] : ( _GREEN , [string] ) , [string] : ( _BLACK , [string] ) , [string] : ( _GRAYSCALE , [string] ) , [string] : ( _WHITE , [string] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
__author__ = [string] [EOL] [EOL] if __name__ == [string] : [EOL] try : [EOL] from sphinx import cmdline [EOL] except : [EOL] raise NameError ( [string] ) [EOL] [EOL] import sys [EOL] cmdline . main ( sys . argv )	$builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0