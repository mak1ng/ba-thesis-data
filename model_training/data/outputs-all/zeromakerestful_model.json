from typing import Any [EOL] import tornado [EOL] import typing [EOL] import asyncio [EOL] import sys [EOL] [EOL] def run_tornado ( ) : [EOL] import tornado . ioloop [EOL] import tornado . web [EOL] from example . tornado . app import make_app [EOL] loop = tornado . ioloop . IOLoop . current ( ) [EOL] app = loop . run_sync ( make_app ) [EOL] server = tornado . httpserver . HTTPServer ( app ) [EOL] server . bind ( [number] ) [EOL] server . start ( [number] ) [EOL] loop . start ( ) [EOL] [EOL] def run_sanic ( ) : [EOL] from example . sanic . app import app [EOL] app . run ( port = [number] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] arg = sys . argv [ [number] ] [EOL] if arg == [string] : [EOL] run_sanic ( ) [EOL] elif arg == [string] : [EOL] run_tornado ( ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Tuple , Any , Dict , Set , Type [EOL] import tornado [EOL] import restful_model [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] import example [EOL] import tornado . ioloop [EOL] import tornado . web [EOL] import tornado . routing [EOL] from restful_model . extend . tornado import ApiView [EOL] from restful_model import DataBase [EOL] import sqlalchemy as sa [EOL] import asyncio [EOL] [EOL] import logging [EOL] from datetime import datetime , timezone , timedelta [EOL] [EOL] metadata = sa . MetaData ( ) [EOL] User = sa . Table ( [string] , metadata , sa . Column ( [string] , sa . Integer , autoincrement = True , primary_key = True , nullable = False , doc = [string] ) , sa . Column ( [string] , sa . String ( [number] ) , nullable = False , doc = [string] ) , sa . Column ( [string] , sa . String ( [number] ) , nullable = False , doc = [string] ) , sa . Column ( [string] , sa . String ( [number] ) , nullable = False , doc = [string] ) , sa . Column ( [string] , sa . String ( [number] ) , nullable = False , doc = [string] ) , sa . Column ( [string] , sa . BigInteger , nullable = False , doc = [string] ) , sqlite_autoincrement = True , ) [EOL] [EOL] [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] [EOL] UTC8 = timezone ( timedelta ( hours = [number] ) ) [EOL] [EOL] def to_timestamp ( obj ) : [EOL] [docstring] [EOL] return int ( obj . timestamp ( ) ) [EOL] [EOL] def get_offset_timestamp ( zone = None , ** kwargs ) : [EOL] [docstring] [EOL] if zone is None : [EOL] return to_timestamp ( datetime . now ( timezone . utc ) + timedelta ( ** kwargs ) ) [EOL] return to_timestamp ( datetime . now ( zone ) . replace ( tzinfo = timezone . utc ) + timedelta ( ** kwargs ) ) [EOL] [EOL] [EOL] class MainHandler ( ApiView ) : [EOL] __model__ = User [EOL] [EOL] __methods__ = { [string] , [string] , [string] } [EOL] __filter_keys__ = { [string] : ( { [string] , } , ) , [string] : ( { [string] , } , ) , [string] : ( { [string] , } , ) , } [EOL] async def post_filter ( self , context , next_handle ) : [EOL] now = get_offset_timestamp ( ) [EOL] if isinstance ( context . form_data , dict ) : [EOL] context . form_data [ [string] ] = now [EOL] else : [EOL] for d in context . form_data : [EOL] d [ [string] ] = now [EOL] return await next_handle ( ) [EOL] [EOL] async def make_app ( ) : [EOL] db = DataBase ( [string] , asyncio . get_event_loop ( ) ) [EOL] db . engine = await db . create_engine ( ) [EOL] userView = MainHandler . as_view ( db ) [EOL] router = tornado . web . Application ( [ ( [string] , userView ) , ( [string] , userView ) ] ) [EOL] return router [EOL] [EOL] if __name__ == [string] : [EOL] loop = tornado . ioloop . IOLoop . current ( ) [EOL] app = loop . run_sync ( make_app ) [EOL] server = tornado . httpserver . HTTPServer ( app ) [EOL] server . bind ( [number] ) [EOL] server . start ( [number] ) [EOL] loop . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[example.tornado.app.MainHandler]$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[typing.Set[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import restful_model [EOL] import asyncio [EOL] import pytest [EOL] import gc [EOL] import asyncio [EOL] from restful_model import DataBase [EOL] from urllib . parse import unquote_plus [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def event_loop ( ) : [EOL] loop_obj = asyncio . new_event_loop ( ) [EOL] yield loop_obj [EOL] gc . collect ( ) [EOL] loop_obj . close ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def loop ( event_loop ) : [EOL] [docstring] [EOL] return event_loop [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def db_name ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def data_bese ( db_name ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] db_name = unquote_plus ( db_name ) [EOL] return [string] % db_name [EOL] [EOL] [EOL] @ pytest . fixture def db ( loop , data_bese ) : [EOL] db = DataBase ( data_bese , loop ) [EOL] db . engine = loop . run_until_complete ( db . create_engine ( echo = True ) ) [EOL] yield db [EOL] db . engine . close ( ) [EOL] db . engine = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict , Union [EOL] import datetime [EOL] import restful_model [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import asyncio [EOL] import pytest [EOL] [comment] [EOL] from sqlalchemy . sql . expression import bindparam [EOL] from datetime import datetime , timezone , timedelta [EOL] from restful_model import DataBase [EOL] from restful_model . utils import model_to_dict [EOL] from . model import User [EOL] [EOL] [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] [EOL] [EOL] def to_timestamp ( obj ) : [EOL] [docstring] [EOL] return int ( obj . timestamp ( ) ) [EOL] [EOL] [EOL] def get_offset_timestamp ( ** kwargs ) : [EOL] [docstring] [EOL] return to_timestamp ( datetime . now ( timezone . utc ) + timedelta ( ** kwargs ) ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_create_engine ( data_bese , db_name ) : [EOL] [comment] [EOL] data = DataBase ( data_bese , asyncio . get_event_loop ( ) ) [EOL] assert data . _url . database == db_name [EOL] if data . drivername ( ) == [string] : [EOL] assert not data . _url . username [EOL] assert not data . _url . host [EOL] assert not data . _url . port [EOL] assert not data . _url . password [EOL] else : [EOL] assert data . _url . username is not None [EOL] assert data . _url . host is not None [EOL] assert data . _url . port is not None [EOL] assert data . _url . password is not None [EOL] data . engine = await data . create_engine ( echo = True ) [EOL] assert data . engine is not None [EOL] if await data . exists_table ( [string] ) : [EOL] await data . drop_table ( User ) [EOL] await data . create_table ( User ) [EOL] assert await data . exists_table ( [string] ) [EOL] await data . drop_table ( User ) [EOL] assert not await data . exists_table ( [string] ) [EOL] await data . create_tables ( [ User ] ) [EOL] assert await data . exists_table ( [string] ) [EOL] await data . drop_tables ( [ User ] ) [EOL] assert not await data . exists_table ( [string] ) [EOL] [EOL] async with data . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] await data . create_table ( User , conn ) [EOL] assert await data . exists_table ( [string] , conn ) [EOL] await data . drop_table ( User , conn ) [EOL] assert not await data . exists_table ( [string] , conn ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_execute_sql ( data_bese ) : [EOL] data = DataBase ( data_bese , asyncio . get_event_loop ( ) ) [EOL] data . engine = await data . create_engine ( echo = True ) [EOL] if await data . exists_table ( [string] ) : [EOL] await data . drop_table ( User ) [EOL] await data . create_table ( User ) [EOL] user1 = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : get_offset_timestamp ( ) , } [EOL] sql = User . insert ( ) . values ( user1 ) [EOL] assert [number] == await data . execute_dml ( sql ) [EOL] user2 = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : get_offset_timestamp ( ) , } [EOL] sql2 = User . insert ( ) . values ( user2 ) [EOL] assert [number] == await data . execute_dml ( [ sql , sql2 ] ) [EOL] sql = User . select ( ) . where ( User . c . id == [number] ) [EOL] async with data . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] async with conn . execute ( sql ) as cursor : [EOL] user1 [ [string] ] = [number] [EOL] assert user1 == model_to_dict ( await cursor . first ( ) ) [EOL] sql = User . select ( ) . where ( User . c . id == [number] ) [EOL] async with conn . execute ( sql ) as cursor : [EOL] user1 [ [string] ] = [number] [EOL] assert user1 == model_to_dict ( await cursor . first ( ) ) [EOL] sql = User . select ( ) . where ( User . c . id == [number] ) [EOL] async with conn . execute ( sql ) as cursor : [EOL] user2 [ [string] ] = [number] [EOL] assert user2 == model_to_dict ( await cursor . first ( ) ) [EOL] sql1 = User . update ( ) . where ( User . c . id == bindparam ( [string] ) ) . values ( { [string] : bindparam ( [string] ) , } ) [EOL] async with conn . execute ( sql1 , { [string] : [number] , [string] : [string] } ) as cursor : [EOL] assert [number] == cursor . rowcount [EOL] sql = User . select ( ) . where ( User . c . id == [number] ) [EOL] async with conn . execute ( sql ) as cursor : [EOL] user1 [ [string] ] = [number] [EOL] user1 [ [string] ] = [string] [EOL] assert user1 == model_to_dict ( await cursor . first ( ) ) [EOL] if data . drivername == [string] : [EOL] async with conn . execute ( sql1 , [ { [string] : [number] , [string] : [string] } , { [string] : [number] , [string] : [string] } , ] ) as cursor : [EOL] assert [number] == cursor . rowcount [EOL] sql = User . select ( ) . where ( User . c . id < [number] ) [EOL] async with conn . execute ( sql ) as cursor : [EOL] user1 [ [string] ] = [number] [EOL] user1 [ [string] ] = [string] [EOL] assert user1 == model_to_dict ( await cursor . fetchone ( ) ) [EOL] user1 [ [string] ] = [number] [EOL] user1 [ [string] ] = [string] [EOL] assert user1 == model_to_dict ( await cursor . fetchone ( ) ) [EOL] await data . drop_table ( User ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Set , Dict , List [EOL] import typing [EOL] import builtins [EOL] import sqlalchemy [EOL] import logging [EOL] import ast [EOL] import logging [EOL] import sqlalchemy as sa [EOL] from sqlalchemy . sql import dml [EOL] from sqlalchemy . sql . expression import bindparam [EOL] from typing import Union , List , Set [EOL] [EOL] [EOL] filter_list_type = Union [ List [ str ] , Set [ str ] , None ] [EOL] [EOL] LOGGER = logging . getLogger ( __package__ ) [EOL] POSTGRE_TO_MYSQL = { } [EOL] UPDATE_NOT_VALUES = TypeError ( [string] ) [EOL] [EOL] [EOL] def return_true ( * args ) : [EOL] return True [EOL] [EOL] [EOL] def get_filter_list ( block_list = None , white_list = None ) : [EOL] [docstring] [EOL] if not block_list and not white_list : [EOL] return return_true [EOL] if block_list and isinstance ( block_list , list ) : [EOL] block_list = set ( block_list ) [EOL] if white_list and isinstance ( white_list , list ) : [EOL] white_list = set ( white_list ) [EOL] [EOL] def filter_list ( key ) : [EOL] [docstring] [EOL] status = True [EOL] if block_list : [EOL] status &= key not in block_list [EOL] if white_list : [EOL] status &= key in white_list [EOL] return status [EOL] return filter_list [EOL] [EOL] [EOL] def handle_param ( column , data ) : [EOL] [docstring] [EOL] opt = data . get ( [string] , [string] ) [EOL] if [string] in data : [EOL] value = data [ [string] ] [EOL] if opt == [string] : [comment] [EOL] return column != value [EOL] if opt == [string] : [comment] [EOL] return column == value [EOL] elif opt == [string] : [comment] [EOL] return column < value [EOL] elif opt == [string] : [comment] [EOL] return column <= value [EOL] elif opt == [string] : [comment] [EOL] return column > value [EOL] elif opt == [string] : [comment] [EOL] return column >= value [EOL] elif opt == [string] : [comment] [EOL] return column . like ( value ) [EOL] elif opt == [string] : [EOL] return column . in_ ( value ) [EOL] elif opt == [string] : [EOL] return ~ column . in_ ( value ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] elif opt == [string] : [EOL] [comment] [EOL] if isinstance ( value , str ) : [EOL] return column == bindparam ( value ) [EOL] else : [EOL] opt = value [ [string] ] [EOL] if opt == [string] : [EOL] return None [EOL] if opt == [string] or opt == [string] : [EOL] value [ [string] ] = bindparam ( value [ [string] ] , expanding = True ) [EOL] else : [EOL] value [ [string] ] = bindparam ( value [ [string] ] ) [EOL] return handle_param ( column , value ) [EOL] elif opt == [string] : [EOL] return value [EOL] [EOL] [EOL] def handle_param_desc ( column , data ) : [EOL] [docstring] [EOL] params = [ ] [EOL] if isinstance ( data , list ) : [EOL] if len ( data ) > [number] : [EOL] for row in data : [EOL] param = handle_param ( column , row ) [EOL] if param is not None : [EOL] params . append ( param ) [EOL] elif isinstance ( data , dict ) : [EOL] param = handle_param ( column , data ) [EOL] if param is not None : [EOL] params . append ( param ) [EOL] else : [EOL] params . append ( column == data ) [EOL] [comment] [EOL] params_len = len ( params ) [EOL] if params_len == [number] : [EOL] return params [ [number] ] [EOL] elif params_len > [number] : [EOL] return sa . and_ ( * params ) [EOL] [EOL] [EOL] def handle_where_param ( column_name , form_data , filter_list = return_true , is_or = False ) : [EOL] [docstring] [EOL] if form_data is None : [EOL] return [EOL] data = [ ] [EOL] for key , val in form_data . items ( ) : [EOL] if key == [string] or key == [string] : [EOL] [comment] [EOL] params = handle_where_param ( column_name , val , filter_list , key == [string] ) [EOL] if params is not None : [EOL] data . append ( params ) [EOL] elif key in column_name and filter_list ( key ) : [EOL] [comment] [EOL] column = column_name [ key ] [EOL] [comment] [EOL] params = handle_param_desc ( column , val ) [EOL] if params is not None : [EOL] data . append ( params ) [EOL] data_len = len ( data ) [EOL] [comment] [EOL] if data_len == [number] : [EOL] return data [ [number] ] [EOL] elif data_len > [number] : [EOL] return sa . or_ ( * data ) if is_or else sa . and_ ( * data ) [EOL] [EOL] [EOL] def inject_value ( value , cache ) : [EOL] arr = value [ [number] : ] . split ( [string] ) [EOL] table = arr [ [number] ] [EOL] if len ( arr ) == [number] : [EOL] index = int ( arr [ [number] ] ) [EOL] field = arr [ [number] ] [EOL] else : [EOL] index = [number] [EOL] field = arr [ [number] ] [EOL] if table in cache : [EOL] table_cache = cache [ table ] [EOL] if isinstance ( table_cache , list ) : [EOL] if field in table_cache [ index ] : [EOL] return table_cache [ index ] [ field ] [EOL] elif field in table_cache : [EOL] return table_cache [ field ] [EOL] return value [EOL] [EOL] [EOL] def insert_sql ( model , data , filter_list = return_true ) : [EOL] [docstring] [EOL] if isinstance ( data , list ) : [EOL] data = [ { k : v for k , v in m . items ( ) if filter_list ( k ) } for m in data ] [EOL] else : [EOL] data = { k : v for k , v in data . items ( ) if filter_list ( k ) } [EOL] return model . insert ( ) . values ( data ) [EOL] [EOL] [EOL] def delete_sql ( model , data , filter_list = return_true ) : [EOL] [docstring] [EOL] where_data = handle_where_param ( model . columns , data , filter_list ) [EOL] if where_data is not None : [EOL] return model . delete ( ) . where ( where_data ) [EOL] return model . delete ( ) [EOL] [EOL] [EOL] def update_sql ( model , data , filter_list = return_true , where_filter = return_true ) : [EOL] [docstring] [EOL] if isinstance ( data , list ) : [EOL] res = [ ] [EOL] for d in data : [EOL] res . append ( update_sql ( model , d , filter_list ) ) [EOL] return res [EOL] where = data . get ( [string] ) [EOL] where_data = handle_where_param ( model . columns , where , where_filter ) [EOL] values = data . get ( [string] ) [EOL] if values is None : [EOL] raise UPDATE_NOT_VALUES [EOL] values_data = { } [EOL] for key , val in values . items ( ) : [EOL] if key in model . columns and filter_list ( key ) : [EOL] if isinstance ( val , str ) : [EOL] if val . startswith ( [string] ) : [EOL] values_data [ key ] = bindparam ( val [ [number] : ] ) [EOL] elif val . startswith ( [string] ) : [EOL] incr = int ( val [ [number] : ] ) [EOL] column = getattr ( model . columns , key ) [EOL] if incr > [number] : [EOL] values_data [ key ] = column + incr [EOL] elif incr < [number] : [EOL] values_data [ key ] = column - ( - incr ) [EOL] else : [EOL] values_data [ key ] = val [EOL] else : [EOL] values_data [ key ] = val [EOL] if where_data is not None : [EOL] sql = model . update ( ) . where ( where_data ) [EOL] else : [EOL] sql = model . update ( ) [EOL] if len ( values_data ) == [number] : [EOL] raise UPDATE_NOT_VALUES [EOL] return sql . values ( values_data ) [EOL] [EOL] [EOL] def handle_orders ( columns , orders , filter_list ) : [EOL] [docstring] [EOL] order_by = [ ] [EOL] for order in orders : [EOL] is_desc = False [EOL] if order [ [number] ] == [string] : [EOL] order = order [ [number] : ] [EOL] is_desc = True [EOL] if order in columns and filter_list ( order ) : [EOL] column = columns [ order ] [EOL] if is_desc : [EOL] order_by . append ( sa . desc ( column ) ) [EOL] else : [EOL] order_by . append ( column ) [EOL] elif order not in columns : [EOL] order_by . append ( sa . desc ( order ) if is_desc else order ) [EOL] if len ( order_by ) > [number] : [EOL] return order_by [EOL] [EOL] [EOL] def handle_func_args ( columns , args , filter_list ) : [EOL] argv = [ ] [EOL] flag = False [EOL] for arg in args : [EOL] if isinstance ( arg , str ) and arg [ [number] ] == [string] : [EOL] if arg [ [number] ] == [string] : [EOL] argv . append ( arg [ [number] : ] ) [EOL] continue [EOL] column_name = arg [ [number] : ] [EOL] if column_name in columns and filter_list ( column_name ) : [EOL] column = columns [ column_name ] [EOL] argv . append ( column ) [EOL] flag = True [EOL] else : [EOL] argv . append ( arg ) [EOL] if flag : [EOL] return argv [EOL] [EOL] [EOL] def handle_keys ( columns , keys , filter_list , drivername ) : [EOL] res = [ ] [EOL] for key in keys : [EOL] if isinstance ( key , dict ) : [EOL] func_name = key . get ( [string] ) [EOL] label = key . get ( [string] ) [EOL] args = key . get ( [string] ) [EOL] column_name = key . get ( [string] ) [EOL] if column_name in columns and filter_list ( column_name ) : [EOL] column = columns [ column_name ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if func_name and hasattr ( sa . func , func_name ) : [EOL] func = getattr ( sa . func , func_name ) [EOL] if args : [EOL] if [string] in args : [EOL] arg = [ ] [EOL] for s in args : [EOL] if s == [string] : [EOL] arg . append ( column ) [EOL] else : [EOL] arg . append ( s ) [EOL] temp = func ( * arg ) [EOL] else : [EOL] temp = func ( column , * args ) [EOL] else : [EOL] temp = func ( column ) [EOL] column = temp [EOL] if label : [EOL] column = column . label ( label ) [EOL] res . append ( column ) [EOL] elif isinstance ( key , str ) : [EOL] column = None [EOL] label = None [EOL] label_start = key . rfind ( [string] ) [EOL] if label_start > - [number] : [EOL] label = key [ label_start + [number] : ] . strip ( ) [EOL] key = key [ : label_start + [number] ] [EOL] start = key . find ( [string] ) [EOL] if start > [number] : [EOL] func_name = key [ : start ] . strip ( ) [EOL] end = key . rfind ( [string] ) [EOL] args_str = ast . literal_eval ( key [ start : end + [number] ] ) [EOL] args = handle_func_args ( columns , args_str , filter_list , ) [EOL] if args is not None and hasattr ( sa . func , func_name ) : [EOL] func = getattr ( sa . func , func_name ) [EOL] column = func ( * args ) [EOL] else : [EOL] LOGGER . warn ( [string] % key ) [EOL] continue [EOL] if column is None and key in columns and filter_list ( key ) : [EOL] column = columns [ key ] [EOL] if column is not None : [EOL] if label is not None : [EOL] column = column . label ( label ) [EOL] res . append ( column ) [EOL] else : [EOL] LOGGER . warn ( [string] , key ) [EOL] return res [EOL] [EOL] [EOL] def select_sql ( model , data , filter_list = return_true , keys = None , orders = None , limit = None , group = None , drivername = None ) : [EOL] [docstring] [EOL] where_data = handle_where_param ( model . columns , data , filter_list ) [EOL] if keys : [EOL] columns = handle_keys ( model . columns , keys , filter_list , drivername ) [EOL] else : [EOL] columns = [ column for column in model . columns if filter_list ( column . name ) ] [EOL] sql = sa . sql . select ( columns ) [EOL] if where_data is not None : [EOL] sql = sql . where ( where_data ) [EOL] if group : [EOL] group_by = [ ] [EOL] for g in group : [EOL] if g in model . columns and filter_list ( g ) : [EOL] group_by . append ( model . columns [ g ] ) [EOL] elif g not in model . columns : [EOL] group_by . append ( g ) [EOL] if len ( group_by ) > [number] : [EOL] sql = sql . group_by ( * group_by ) [EOL] if orders : [EOL] order_by = handle_orders ( model . columns , orders , filter_list ) [EOL] if order_by : [EOL] sql = sql . order_by ( * order_by ) [EOL] if limit : [EOL] for c in model . columns : [EOL] column = c [EOL] break [EOL] offset_num , limit_num = limit [EOL] sql = sql . offset ( offset_num ) . limit ( limit_num ) [EOL] sql_count = sa . sql . select ( [ sa . func . count ( column ) . label ( [string] ) ] ) [EOL] if where_data is not None : [EOL] sql_count = sql_count . where ( where_data ) [EOL] return sql , sql_count [EOL] return sql [EOL] [EOL] [EOL] def model_to_dict ( row ) : [EOL] [docstring] [EOL] return { key : val for key , val in row . items ( ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.boolsqlalchemy.sql.dml.Insert$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.sql.dml.Delete$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.sql.dml.Update
from typing import Optional , Tuple , Any , List [EOL] import typing [EOL] import builtins [EOL] import sqlalchemy [EOL] import asyncio [EOL] import sqlalchemy as sa [EOL] from sqlalchemy . sql . ddl import CreateTable , DropTable [EOL] from typing import List , Optional , cast [EOL] from urllib . parse import unquote_plus [EOL] [EOL] DRIVER_NAME = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class DataBase ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , database , loop = None ) : [EOL] self . _url = sa . engine . url . make_url ( database ) [EOL] if [string] in self . _url . database : [EOL] self . _url . database = unquote_plus ( self . _url . database ) [EOL] self . _driver = None [EOL] self . _load_driver ( ) [EOL] self . loop = cast ( asyncio . AbstractEventLoop , loop ) [EOL] [comment] [EOL] self . engine = None [EOL] [EOL] def drivername ( self ) : [EOL] return self . _driver [EOL] [EOL] def _load_driver ( self ) : [EOL] [docstring] [EOL] for name in DRIVER_NAME : [EOL] if self . _url . drivername . startswith ( name ) : [EOL] self . _driver = name [EOL] break [EOL] [EOL] async def create_engine ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] loop = self . loop [EOL] if self . _driver == [string] : [EOL] from aiosqlite3 . sa import create_engine as sqlite_create_engine [EOL] [comment] [EOL] engine = await sqlite_create_engine ( self . _url . database , loop = loop , * args , ** kwargs , ) [EOL] elif self . _driver == [string] : [EOL] from aiomysql . sa import create_engine as mysql_create_engine [EOL] engine = await mysql_create_engine ( user = self . _url . username , db = self . _url . database , host = self . _url . host , password = self . _url . password , port = self . _url . port , loop = loop , * args , ** kwargs , ) [EOL] elif self . _driver == [string] : [EOL] from aiopg . sa import create_engine as pg_create_engine [EOL] engine = await pg_create_engine ( user = self . _url . username , database = self . _url . database , host = self . _url . host , port = self . _url . port , password = self . _url . password , loop = loop , * args , ** kwargs , ) [EOL] return engine [EOL] [EOL] def create_table_sql ( self , table ) : [EOL] [docstring] [EOL] return CreateTable ( table ) [EOL] [EOL] async def create_table ( self , table , conn = None ) : [EOL] [docstring] [EOL] if conn is None : [EOL] async with self . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] await conn . execute ( self . create_table_sql ( table ) ) [EOL] else : [EOL] await conn . execute ( self . create_table_sql ( table ) ) [EOL] [EOL] async def create_tables ( self , tables ) : [EOL] [docstring] [EOL] async with self . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] for table in tables : [EOL] await conn . execute ( self . create_table_sql ( table ) ) [EOL] [EOL] def drop_table_sql ( self , table ) : [EOL] [docstring] [EOL] return DropTable ( table ) [EOL] [EOL] async def drop_table ( self , table , conn = None ) : [EOL] [docstring] [EOL] if conn is None : [EOL] async with self . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] return await conn . execute ( self . drop_table_sql ( table ) ) [EOL] else : [EOL] await conn . execute ( self . drop_table_sql ( table ) ) [EOL] [EOL] async def drop_tables ( self , tables ) : [EOL] [docstring] [EOL] async with self . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] for table in tables : [EOL] await conn . execute ( self . drop_table_sql ( table ) ) [EOL] [EOL] async def exists_table ( self , table_name , conn = None ) : [EOL] [docstring] [EOL] sql = None [EOL] if self . _driver == [string] : [EOL] sql = [string] [string] % table_name [EOL] elif self . _driver == [string] : [EOL] sql = [string] [string] % ( table_name , self . _url . database ) [EOL] elif self . _driver == [string] : [EOL] sql = [string] [string] % table_name [EOL] if conn is None : [EOL] async with self . engine . acquire ( ) as conn : [EOL] result = await conn . execute ( sql ) [EOL] first = await result . first ( ) [EOL] else : [EOL] result = await conn . execute ( sql ) [EOL] first = await result . first ( ) [EOL] return first is not None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] async def execute_dml ( self , sql , data = None , conn = None ) : [EOL] [docstring] [EOL] engine = self . engine [EOL] if conn is None : [EOL] async with engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] if isinstance ( sql , list ) : [EOL] count = [number] [EOL] for s in sql : [EOL] async with conn . execute ( s ) as cursor : [EOL] count += cursor . rowcount [EOL] else : [EOL] async with conn . execute ( sql , data ) as cursor : [EOL] count = cursor . rowcount [EOL] return count [EOL] if isinstance ( sql , list ) : [EOL] count = [number] [EOL] for s in sql : [EOL] async with conn . execute ( s ) as cursor : [EOL] count += cursor . rowcount [EOL] else : [EOL] async with conn . execute ( sql , data ) as cursor : [EOL] count = cursor . rowcount [EOL] return count [EOL] [EOL] async def execute_insert ( self , sql , conn = None ) : [EOL] [docstring] [EOL] if conn is None : [EOL] engine = self . engine [EOL] async with engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) : [EOL] async with conn . execute ( sql ) as cursor : [EOL] if cursor . rowcount > [number] : [EOL] return cursor . rowcount , [number] [EOL] if self . _driver == [string] : [EOL] return cursor . rowcount , ( await cursor . first ( ) ) [ [number] ] [EOL] return cursor . rowcount , cursor . lastrowid [EOL] else : [EOL] async with conn . execute ( sql ) as cursor : [EOL] if cursor . rowcount > [number] : [EOL] return cursor . rowcount , [number] [EOL] if self . _driver == [string] : [EOL] return cursor . rowcount , ( await cursor . first ( ) ) [ [number] ] [EOL] return cursor . rowcount , cursor . lastrowid [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $sqlalchemy.sql.ddl.CreateTable$ 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 $None$ 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.List['sa.Table']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['sa.Table']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlalchemy.sql.ddl.DropTable$ 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 $None$ 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'sa.Table'$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.List['sa.Table']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['sa.Table']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Tuple , Union , Dict , List [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , List , Union , Any , Optional [EOL] [EOL] [EOL] NAMES = ( [string] , [string] ) [EOL] [EOL] [EOL] class Context ( object ) : [EOL] def __init__ ( self , method , url_path = [string] , headers = { } , url_param = None , form_data = None , args = None , raw_args = None , sessions = None ) : [EOL] self . method = method [EOL] self . url_path = url_path [EOL] self . form_data = ( form_data or { } ) [EOL] self . has_param = False [EOL] if url_param and len ( url_param ) > [number] : [EOL] if method != [string] : [EOL] where = self . form_data . get ( [string] , { } ) [EOL] where . update ( url_param ) [EOL] self . form_data [ [string] ] = where [EOL] else : [EOL] self . form_data . update ( url_param ) [EOL] self . has_param = True [EOL] self . header = headers [EOL] self . args = args [EOL] self . raw_args = raw_args [EOL] self . sessions = sessions [EOL] self . filter_keys = None [EOL] [comment] [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % hash ( [string] % ( repr ( self . form_data ) , repr ( self . args ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.List[builtins.str]]]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.List[builtins.str]]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Optional , Any , Tuple , Union , Dict , Type , List [EOL] import restful_model [EOL] import typing [EOL] import context [EOL] import database [EOL] import json [EOL] import asyncio [EOL] import sqlalchemy as sa [EOL] [EOL] from . database import DataBase [EOL] from . utils import ( select_sql , model_to_dict , insert_sql , delete_sql , update_sql , get_filter_list , return_true , LOGGER , ) [EOL] from . context import Context [EOL] [comment] [EOL] [EOL] QUERY_ARGS = ( [string] , [string] , [string] , [string] , [string] ) [EOL] UNAUTH = { [string] : [number] , [string] : [string] , } [EOL] [EOL] [EOL] class BaseView ( object ) : [EOL] [docstring] [EOL] __model__ = None [EOL] __methods__ = None [EOL] __filter_keys__ = None [EOL] [EOL] [docstring] [EOL] def __init__ ( self , db = None ) : [EOL] self . db = db [EOL] self . cache = { } [EOL] [EOL] def get_primary ( self ) : [EOL] [docstring] [EOL] for column in self . model . columns : [EOL] if column . primary_key and isinstance ( column . type , sa . Integer ) : [EOL] return column [EOL] [EOL] @ property def name ( self ) : [EOL] return self . model . name [EOL] [EOL] @ property def model ( self ) : [EOL] return self . __model__ [EOL] [EOL] def get_sql ( self , context ) : [EOL] [docstring] [EOL] filter_keys = context . filter_keys [EOL] form_data = context . form_data [EOL] keys = form_data . get ( [string] ) [EOL] where = form_data . get ( [string] ) [EOL] limit = form_data . get ( [string] ) [EOL] orders = form_data . get ( [string] ) [EOL] group = form_data . get ( [string] ) [EOL] return select_sql ( self . model , where , filter_keys , keys , orders , None if context . has_param else limit , group , self . db . drivername ( ) ) [EOL] [EOL] async def get ( self , context ) : [EOL] [docstring] [EOL] [comment] [EOL] form_data = context . form_data [EOL] limit = form_data . get ( [string] ) [EOL] sql_arr = self . get_sql ( context ) [EOL] if isinstance ( sql_arr , tuple ) : [EOL] sql , sql_count = sql_arr [EOL] async with self . db . engine . acquire ( ) as conn : [EOL] async with conn . execute ( sql_count ) as cursor : [EOL] total = ( await cursor . first ( ) ) . _count [EOL] async with conn . execute ( sql ) as cursor : [EOL] data = await cursor . fetchall ( ) [EOL] data = [ model_to_dict ( row ) for row in data ] [EOL] return { [string] : [number] , [string] : [string] , [string] : data , [string] : { [string] : { [string] : total , [string] : len ( data ) , [string] : limit [ [number] ] , [string] : limit [ [number] ] } } } [EOL] else : [EOL] sql = sql_arr [EOL] async with self . db . engine . acquire ( ) as conn : [EOL] async with conn . execute ( sql ) as cursor : [EOL] if context . has_param : [EOL] data = model_to_dict ( await cursor . first ( ) ) [EOL] else : [EOL] data = await cursor . fetchall ( ) [EOL] data = [ model_to_dict ( row ) for row in data ] [EOL] return { [string] : [number] , [string] : [string] , [string] : data } [EOL] [EOL] def post_sql ( self , context ) : [EOL] [docstring] [EOL] filter_keys = context . filter_keys [EOL] form_data = context . form_data [EOL] return insert_sql ( self . model , form_data , filter_keys ) [EOL] [EOL] async def post ( self , context ) : [EOL] [docstring] [EOL] [comment] [EOL] sql = self . post_sql ( context ) [EOL] count , rowid = await self . db . execute_insert ( sql ) [EOL] res = { [string] : [number] , [string] : [string] , [string] : { [string] : count , } , } [EOL] if count == [number] : [EOL] res [ [string] ] [ [string] ] = rowid [EOL] return res [EOL] [EOL] def delete_sql ( self , context ) : [EOL] [docstring] [EOL] [comment] [EOL] form_data = context . form_data [EOL] return delete_sql ( self . model , form_data ) [EOL] [EOL] async def delete ( self , context ) : [EOL] [docstring] [EOL] [comment] [EOL] sql = self . delete_sql ( context ) [EOL] count = await self . db . execute_dml ( sql ) [EOL] return { [string] : [number] , [string] : [string] , [string] : { [string] : count , } , } [EOL] [EOL] async def put ( self , context ) : [EOL] [docstring] [EOL] [comment] [EOL] form_data = context . form_data [EOL] data = form_data . get ( [string] ) [EOL] sql = update_sql ( self . model , form_data ) [EOL] count = await self . db . execute_dml ( sql , data ) [EOL] return { [string] : [number] , [string] : [string] , [string] : { [string] : count , } , } [EOL] [EOL] async def dispatch_request ( self , context , method_filter = True , decorator_filter = True , key_filter = True , generate_sql = False , ) : [EOL] [docstring] [EOL] method = context . method [EOL] if context . args and len ( context . args ) > [number] : [EOL] if method == [string] : [EOL] try : [EOL] for k in QUERY_ARGS : [EOL] if k in context . args : [EOL] context . form_data [ k ] = json . loads ( context . args [ k ] [ [number] ] ) [EOL] except Exception : [EOL] pass [EOL] if [string] in context . args : [EOL] method = context . args [ [string] ] [ [number] ] [EOL] flag = method_filter and self . __methods__ is not None [EOL] if flag and method not in self . __methods__ : [EOL] return { [string] : [number] , [string] : [string] % method , } [EOL] try : [EOL] decorator_filters = self . generate_filter ( method , decorator_filter , generate_sql , ) [EOL] filter_keys = return_true [EOL] if key_filter : [EOL] if method in self . cache : [EOL] filter_keys = self . cache [ method ] [EOL] else : [EOL] if self . __filter_keys__ is not None : [EOL] if isinstance ( self . __filter_keys__ , list ) : [EOL] filter_keys = get_filter_list ( * self . __filter_keys__ ) [EOL] elif method in self . __filter_keys__ : [EOL] filter_keys = get_filter_list ( * self . __filter_keys__ [ method ] ) [EOL] self . cache [ method ] = filter_keys [EOL] [EOL] async def next_handle ( ) : [EOL] [docstring] [EOL] handle , ok = next ( decorator_filters ) [EOL] if handle is None : [EOL] return { [string] : [number] , [string] : [string] % method , } [EOL] if ok : [EOL] res = handle ( context ) [EOL] else : [EOL] res = handle ( context , next_handle ) [EOL] if asyncio . iscoroutine ( res ) : [EOL] return await res [EOL] return res [EOL] context . filter_keys = filter_keys [EOL] return await next_handle ( ) [EOL] except Exception as e : [EOL] LOGGER . error ( [string] , exc_info = e ) [EOL] error = str ( e ) [EOL] return { [string] : [number] , [string] : [string] + error , } [EOL] [EOL] def generate_filter ( self , method , decorator_filter , generate_sql = False ) : [EOL] [docstring] [EOL] if decorator_filter : [EOL] if hasattr ( self , [string] ) : [EOL] yield getattr ( self , [string] ) , False [EOL] filter_method_name = method + [string] [EOL] if hasattr ( self , filter_method_name ) : [EOL] yield getattr ( self , filter_method_name ) , False [EOL] if generate_sql : [EOL] method += [string] [EOL] yield getattr ( self , method , None ) , True [EOL] [EOL] async def raw_dispatch_request ( self , context ) : [EOL] [docstring] [EOL] return await self . dispatch_request ( context , False , False , False ) [EOL] [EOL] async def options ( self , context ) : [EOL] return { } , [number] [EOL] [EOL] patch = put [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $context.Context$ 0 0 0 0 0 0 0 0 0 0 0 $context.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $context.Context$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import restful_model [EOL] import view [EOL] import typing [EOL] import builtins [EOL] from typing import Dict [EOL] from . context import Context [EOL] from . view import BaseView [EOL] from . utils import LOGGER , inject_value [EOL] [EOL] [EOL] async def execute_request ( self , method , form_data ) : [EOL] [docstring] [EOL] all_count = [number] [EOL] async with self . db . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) as t : [EOL] for item in form_data : [EOL] view_name = item [ [string] ] [EOL] if view_name not in self . views : [EOL] continue [EOL] view = self . views [ view_name ] [EOL] data = item [ [string] ] [EOL] ctx = Context ( method , form_data = data ) [EOL] sql = await view . dispatch_request ( ctx , generate_sql = True , ) [EOL] if isinstance ( sql , ( dict , tuple ) ) : [EOL] await t . rollback ( ) [EOL] return sql [EOL] count = await self . db . execute_dml ( sql , conn = conn , ) [EOL] all_count += count [EOL] return { [string] : [number] , [string] : [string] % method , [string] : { [string] : all_count , } } [EOL] [EOL] [EOL] class BasePolymerization ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , db ) : [EOL] self . db = db [EOL] self . views = { } [EOL] [EOL] def add_view ( self , view ) : [EOL] [docstring] [EOL] self . views [ view . name ] = view [EOL] [EOL] async def dispatch_request ( self , context ) : [EOL] [docstring] [EOL] request_method_name = context . method + [string] [EOL] if hasattr ( self , request_method_name ) : [EOL] try : [EOL] return await getattr ( self , request_method_name ) ( context ) [EOL] except Exception as e : [EOL] LOGGER . error ( [string] , exc_info = e ) [EOL] error = str ( e ) [EOL] return { [string] : [number] , [string] : [string] + error , } [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] async def post_request ( self , context ) : [EOL] [docstring] [EOL] form_data = context . form_data [EOL] cache = { } [EOL] all_count = [number] [EOL] async with self . db . engine . acquire ( ) as conn : [EOL] async with conn . begin ( ) as t : [EOL] [comment] [EOL] [comment] [EOL] for item in form_data : [EOL] view_name = item [ [string] ] [EOL] if view_name not in self . views : [EOL] continue [EOL] view = self . views [ view_name ] [EOL] data = item [ [string] ] [EOL] if isinstance ( data , list ) : [EOL] for i in data : [EOL] for k , v in i . items ( ) : [EOL] if isinstance ( v , str ) and v [ [number] ] == [string] : [EOL] i [ k ] = inject_value ( v , cache ) [EOL] else : [EOL] for k , v in data . items ( ) : [EOL] if isinstance ( v , str ) and v [ [number] ] == [string] : [EOL] data [ k ] = inject_value ( v , cache ) [EOL] ctx = Context ( [string] , form_data = data ) [EOL] sql = await view . dispatch_request ( ctx , generate_sql = True , ) [EOL] if isinstance ( sql , ( dict , tuple ) ) : [EOL] await t . rollback ( ) [EOL] return sql [EOL] count , rowid = await self . db . execute_insert ( sql , conn , ) [EOL] has_rowid = count == [number] and rowid > [number] [EOL] all_count += count [EOL] primary_key = view . get_primary ( ) [EOL] if has_rowid and primary_key is not None : [EOL] if isinstance ( data , list ) : [EOL] data [ [number] ] [ primary_key . name ] = rowid [EOL] else : [EOL] data [ primary_key . name ] = rowid [EOL] cache [ view . name ] = data [EOL] return { [string] : [number] , [string] : [string] , [string] : { [string] : all_count } } [EOL] [EOL] async def delete_request ( self , context ) : [EOL] [docstring] [EOL] form_data = context . form_data [EOL] return await execute_request ( self , [string] , form_data ) [EOL] [EOL] async def put_request ( self , context ) : [EOL] [docstring] [EOL] form_data = context . form_data [EOL] return await execute_request ( self , [string] , form_data ) [EOL] [EOL] async def patch_request ( self , context ) : [EOL] form_data = context . form_data [EOL] return await execute_request ( self , [string] , form_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,view.BaseView]$ 0 0 0 0 0 0 0 0 0 0 $view.BaseView$ 0 0 0 0 0 0 0 0 0 $view.BaseView$ 0 0 0 0 $view.BaseView$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $view.BaseView$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $restful_model.context.Context$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $view.BaseView$ 0 0 0 $restful_model.context.Context$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $view.BaseView$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $view.BaseView$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] __version__ = [string] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] from . context import Context [EOL] from . database import DataBase [EOL] from . view import BaseView [EOL] from . polymerization import BasePolymerization [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] from typing import List [EOL] import typing [EOL] __all__ = [ [string] , [string] ] [EOL] from . view import ApiView [EOL] [EOL] from . polymerization import PolymerizationView [EOL]	0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List [EOL] import typing [EOL] __all__ = [ [string] ] [EOL] from . view import ApiView [EOL]	0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict , Type [EOL] import restful_model [EOL] import typing [EOL] import json [EOL] import tornado . web [EOL] from restful_model . view import BaseView [EOL] from restful_model . context import Context [EOL] [EOL] [EOL] async def tornado_dispatch_request ( self , * path_args , ** kwargs ) : [EOL] [docstring] [EOL] request = self . request [EOL] args = { } [EOL] raw_args = { } [EOL] for k , v in request . query_arguments . items ( ) : [EOL] val = [ vv . decode ( ) for vv in v ] [EOL] args [ k ] = val [EOL] raw_args [ k ] = val [ [number] ] [EOL] method = request . method . lower ( ) [EOL] if method != [string] and request . body and request . body != [string] : [EOL] form_data = json . loads ( request . body ) [EOL] else : [EOL] form_data = { } [EOL] context = Context ( method , request . path , request . headers , kwargs , form_data , args , raw_args , self . session if hasattr ( self , [string] ) else None , ) [EOL] resp = await self . view . dispatch_request ( context ) [EOL] self . set_header ( [string] , [string] ) [EOL] if isinstance ( resp , tuple ) : [EOL] h = None [EOL] status = [number] [EOL] res = None [EOL] for i in resp : [EOL] if res is None : [EOL] res = i [EOL] elif isinstance ( i , int ) : [EOL] status = i [EOL] elif isinstance ( i , dict ) : [EOL] h = i [EOL] if h : [EOL] for k , v in h : [EOL] self . set_header ( k , v ) [EOL] self . set_status ( status ) [EOL] self . write ( json . dumps ( res , ensure_ascii = False ) . encode ( [string] ) ) [EOL] return [EOL] self . set_status ( resp [ [string] ] ) [EOL] self . write ( json . dumps ( resp , ensure_ascii = False ) . encode ( [string] ) ) [EOL] [EOL] [EOL] class ApiView ( BaseView ) : [EOL] [EOL] @ classmethod def as_view ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] obj = cls ( * args , ** kwargs ) [EOL] [EOL] class ApiHandler ( tornado . web . RequestHandler ) : [EOL] get = tornado_dispatch_request [EOL] post = tornado_dispatch_request [EOL] delete = tornado_dispatch_request [EOL] put = tornado_dispatch_request [EOL] patch = tornado_dispatch_request [EOL] options = tornado_dispatch_request [EOL] view = obj [EOL] return ApiHandler [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $restful_model.extend.tornado.view.ApiView$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 $typing.Type[restful_model.extend.tornado.view.ApiView.as_view.ApiHandler]$ 0 0 0 0 0 0