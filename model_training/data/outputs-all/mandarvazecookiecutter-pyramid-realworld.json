[docstring] [EOL] [EOL] from setuptools import find_packages [EOL] from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , author = [string] , author_email = [string] , url = [string] , keywords = [string] , license = [string] , packages = find_packages ( [string] , exclude = [ [string] ] ) , package_dir = { [string] : [string] } , include_package_data = True , zip_safe = False , entry_points = [string] , test_suite = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Dict , Any , Optional [EOL] import pyramid [EOL] import typing [EOL] import builtins [EOL] import sqlalchemy [EOL] [docstring] [EOL] [EOL] from __future__ import annotations [EOL] from passlib . hash import argon2 [EOL] from pyramid . request import Request [EOL] from pyramid_deferred_sqla import Base [EOL] from pyramid_deferred_sqla import Model [EOL] from pyramid_deferred_sqla import model_config [EOL] from sqlalchemy import Column [EOL] from sqlalchemy import String [EOL] from sqlalchemy import TypeDecorator [EOL] from sqlalchemy import Unicode [EOL] from sqlalchemy . dialects . postgresql . psycopg2 import PGDialect_psycopg2 [EOL] from sqlalchemy . orm . session import Session [EOL] [EOL] import typing as t [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] class LowerCaseString ( TypeDecorator ) : [EOL] [docstring] [EOL] [EOL] impl = String [EOL] [EOL] def process_bind_param ( self , value , dialect ) : [EOL] return value . lower ( ) [EOL] [EOL] [EOL] @ model_config ( Base ) class User ( Model ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] [EOL] def __json__ ( self , request ) : [EOL] [docstring] [EOL] return { [string] : self . username , [string] : self . email , [string] : self . bio , [string] : request . create_jwt_token ( str ( self . id ) ) , [string] : self . image , } [EOL] [EOL] email = Column ( LowerCaseString , nullable = False , unique = True ) [EOL] username = Column ( String , nullable = False , unique = True ) [EOL] password_hash = Column ( String , nullable = False ) [EOL] bio = Column ( Unicode ) [EOL] image = Column ( String ) [EOL] [EOL] @ classmethod def by_id ( cls , uuid , db ) : [EOL] [docstring] [EOL] q = db . query ( cls ) [EOL] q = q . filter ( cls . id == uuid ) [EOL] return q . one_or_none ( ) [EOL] [EOL] @ classmethod def by_username ( cls , username , db ) : [EOL] [docstring] [EOL] q = db . query ( cls ) [EOL] q = q . filter ( cls . username == username ) [EOL] return q . one_or_none ( ) [EOL] [EOL] @ classmethod def by_email ( cls , email , db ) : [EOL] [docstring] [EOL] q = db . query ( cls ) [EOL] q = q . filter ( cls . email == email ) [EOL] return q . one_or_none ( ) [EOL] [EOL] def verify_password ( self , password ) : [EOL] [docstring] [EOL] return argon2 . verify ( password , self . password_hash ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pyramid.request.Request$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[User]$ 0 $typing.Type[User]$ 0 $builtins.str$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 0 0 $typing.Any$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 $typing.Type[User]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Type[User]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[User]$ 0 $typing.Type[User]$ 0 $builtins.str$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 0 0 $typing.Any$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 $typing.Type[User]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Type[User]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[User]$ 0 $typing.Type[User]$ 0 $builtins.str$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 0 0 $typing.Any$ 0 $sqlalchemy.orm.session.Session$ 0 0 0 $typing.Type[User]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Type[User]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
[comment] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from alembic import context [EOL] from pyramid . paster import bootstrap [EOL] from pyramid_deferred_sqla import Base [EOL] from sqlalchemy import engine_from_config [EOL] from sqlalchemy import pool [EOL] [EOL] [comment] [EOL] [comment] [EOL] config = context . config [EOL] [EOL] [comment] [EOL] if len ( Base . metadata . tables ) == [number] : [EOL] [comment] [EOL] arguments = context . get_x_argument ( as_dictionary = True ) [EOL] ini = arguments . get ( [string] , config . config_file_name ) [EOL] bootstrap ( ini ) [EOL] [EOL] target_metadata = Base . metadata [EOL] [EOL] [EOL] def run_migrations_offline ( ) : [EOL] [docstring] [EOL] url = config . get_main_option ( [string] ) [EOL] context . configure ( url = url , target_metadata = target_metadata , literal_binds = True ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] connectable = engine_from_config ( { [string] : Base . metadata . bind . url } , prefix = [string] , poolclass = pool . NullPool , ) [EOL] [EOL] with connectable . connect ( ) as connection : [EOL] context . configure ( connection = connection , target_metadata = target_metadata ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] if context . is_offline_mode ( ) : [EOL] run_migrations_offline ( ) [EOL] else : [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0