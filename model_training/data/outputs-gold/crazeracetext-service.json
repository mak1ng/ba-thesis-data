from app import app [EOL]	0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] [comment] [EOL] from app . config import SERVICE_VERSION , SERVICE_NAME [EOL] [EOL] [EOL] def test_version ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] package = json . load ( f ) [EOL] assert SERVICE_VERSION == package [ [string] ] [EOL] assert SERVICE_NAME == package [ [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List , Union [EOL] import typing [EOL] import app [EOL] import json [EOL] from datetime import datetime [EOL] [EOL] [comment] [EOL] from crazerace . http import status [EOL] [EOL] [comment] [EOL] from tests import TestEnvironment , JSON , unauth_headers , new_id [EOL] from app . models import TranslatedText , Language , Group , TextGroup [EOL] [EOL] [EOL] def test_get_text ( ) : [EOL] items = [ Language ( id = [string] ) , Language ( id = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , ] [EOL] [EOL] with TestEnvironment ( items ) as client : [EOL] sv_headers_ok = unauth_headers ( language = [string] ) [EOL] res_sv = client . get ( [string] , headers = sv_headers_ok ) [EOL] assert res_sv . status_code == status . HTTP_200_OK [EOL] assert res_sv . get_json ( ) [ [string] ] == [string] [EOL] [EOL] en_headers_ok = unauth_headers ( language = [string] ) [EOL] res_en = client . get ( [string] , headers = en_headers_ok ) [EOL] assert res_en . status_code == status . HTTP_200_OK [EOL] assert res_en . get_json ( ) [ [string] ] == [string] [EOL] [EOL] no_lang_headers = unauth_headers ( language = None ) [EOL] res_no_lang = client . get ( [string] , headers = no_lang_headers ) [EOL] assert res_no_lang . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] en_headers = unauth_headers ( language = [string] ) [EOL] res_missing = client . get ( [string] , headers = en_headers ) [EOL] assert res_missing . status_code == status . HTTP_404_NOT_FOUND [EOL] [EOL] wrong_lang_headers = unauth_headers ( language = [string] ) [EOL] res_wrong_lang = client . get ( [string] , headers = wrong_lang_headers ) [EOL] assert res_wrong_lang . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] [EOL] def test_get_text_by_group ( ) : [EOL] items = [ Language ( id = [string] ) , Language ( id = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , TranslatedText ( key = [string] , language = [string] , value = [string] ) , Group ( id = [string] ) , TextGroup ( text_key = [string] , group_id = [string] ) , TextGroup ( text_key = [string] , group_id = [string] ) , TextGroup ( text_key = [string] , group_id = [string] ) , ] [EOL] [EOL] with TestEnvironment ( items ) as client : [EOL] sv_headers_ok = unauth_headers ( language = [string] ) [EOL] res_sv = client . get ( [string] , headers = sv_headers_ok ) [EOL] assert res_sv . status_code == status . HTTP_200_OK [EOL] body = res_sv . get_json ( ) [EOL] assert len ( body ) == [number] [EOL] assert body [ [string] ] == [string] [EOL] assert body [ [string] ] == [string] [EOL] assert body [ [string] ] == [string] [EOL] [EOL] no_lang_headers = unauth_headers ( language = None ) [EOL] res_no_lang = client . get ( [string] , headers = no_lang_headers ) [EOL] assert res_no_lang . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] en_headers = unauth_headers ( language = [string] ) [EOL] res_missing = client . get ( [string] , headers = en_headers ) [EOL] assert res_missing . status_code == status . HTTP_404_NOT_FOUND [EOL] [EOL] wrong_lang_headers = unauth_headers ( language = [string] ) [EOL] res_wrong_lang = client . get ( [string] , headers = wrong_lang_headers ) [EOL] assert res_wrong_lang . status_code == status . HTTP_400_BAD_REQUEST [EOL] [EOL] en_headers_ok = unauth_headers ( language = [string] ) [EOL] res_en = client . get ( [string] , headers = en_headers_ok ) [EOL] assert res_en . status_code == status . HTTP_200_OK [EOL] body = res_en . get_json ( ) [EOL] assert len ( body ) == [number] [EOL] assert body [ [string] ] == [string] [EOL] assert body [ [string] ] == [string] [EOL] assert body [ [string] ] == None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Optional [EOL] import flask [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] [EOL] [comment] [EOL] import flask [EOL] from flask import jsonify , make_response , request [EOL] from crazerace import http [EOL] from crazerace . http import status [EOL] from crazerace . http . error import BadRequestError [EOL] from crazerace . http . instrumentation import trace [EOL] [EOL] [comment] [EOL] from app . config import LANGUAGE_HEADER [EOL] from app . service import health [EOL] from app . service import text_service [EOL] [EOL] [EOL] _log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_by_key ( key ) : [EOL] text = text_service . get_text_by_key ( key , _get_language ( ) ) [EOL] return http . create_response ( text ) [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_group ( group_id ) : [EOL] texts = text_service . get_text_by_group ( group_id , _get_language ( ) ) [EOL] return http . create_response ( texts ) [EOL] [EOL] [EOL] @ trace ( [string] ) def check_health ( ) : [EOL] health_status = health . check ( ) [EOL] return http . create_response ( health_status ) [EOL] [EOL] [EOL] def _get_language ( ) : [EOL] lang = request . headers . get ( LANGUAGE_HEADER ) [EOL] if not lang : [EOL] raise BadRequestError ( [string] ) [EOL] return lang [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] import os [EOL] from logging . config import dictConfig [EOL] [EOL] [comment] [EOL] from . logging import LOGGING_CONIFG [EOL] from . util import get_dsn [EOL] [EOL] dictConfig ( LOGGING_CONIFG ) [EOL] [EOL] [EOL] SERVICE_NAME = [string] [EOL] SERVICE_VERSION = [string] [EOL] SERVER_NAME = f"{ SERVICE_NAME } [string] { SERVICE_VERSION }" [EOL] REQUEST_ID_HEADER = [string] [EOL] LANGUAGE_HEADER = [string] [EOL] TEST_MODE = os . getenv ( [string] , [string] ) == [string] [EOL] [EOL] [EOL] class AppConfig : [EOL] SQLALCHEMY_DATABASE_URI = get_dsn ( TEST_MODE ) [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 0
[comment] [EOL] from typing import List , Dict , Union [EOL] import typing [EOL] import logging [EOL] [EOL] [EOL] LOGGING_CONIFG = { [string] : [number] , [string] : { [string] : { [string] : [string] , [string] : [string] , } } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : logging . INFO , } } , [string] : { [string] : [ [string] ] , [string] : logging . DEBUG } , } [EOL] [EOL] logging . getLogger ( [string] ) . setLevel ( logging . ERROR ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] import os [EOL] [EOL] [EOL] def get_dsn ( test_mode ) : [EOL] if test_mode : [EOL] return [string] [EOL] DB_USERNAME = os . environ [ [string] ] [EOL] DB_PASSWORD = os . environ [ [string] ] [EOL] DB_HOST = os . environ [ [string] ] [EOL] DB_PORT = os . environ [ [string] ] [EOL] DB_NAME = os . environ [ [string] ] [EOL] return f" [string] { DB_USERNAME } [string] { DB_PASSWORD } [string] { DB_HOST } [string] { DB_PORT } [string] { DB_NAME }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Optional [EOL] import typing [EOL] import app [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] [comment] [EOL] from crazerace . http . instrumentation import trace [EOL] [EOL] [comment] [EOL] from app . models import TranslatedText , TextGroup , Group [EOL] [EOL] [EOL] @ trace ( [string] ) def find_by_key ( key , language ) : [EOL] return TranslatedText . query . filter ( TranslatedText . key == key , TranslatedText . language == language ) . first ( ) [EOL] [EOL] [EOL] @ trace ( [string] ) def find_by_keys ( keys , language ) : [EOL] return TranslatedText . query . filter ( TranslatedText . key . in_ ( keys ) , TranslatedText . language == language , ) . all ( ) [EOL] [EOL] [EOL] @ trace ( [string] ) def find_group ( group_id ) : [EOL] return Group . query . filter ( Group . id == group_id ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[app.models.TranslatedText]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.models.TranslatedText]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[app.models.Group]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0