from setuptools import setup [EOL] [EOL] setup ( use_scm_version = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Optional [EOL] import django [EOL] import typing [EOL] import khetha [EOL] import builtins [EOL] import helpers [EOL] from __future__ import annotations [EOL] [EOL] from http import HTTPStatus [EOL] from typing import List , Optional [EOL] [EOL] from django . contrib import messages [EOL] from django . contrib . messages . storage . base import Message [EOL] from django . contrib . sessions . backends . base import SessionBase [EOL] from django . http . response import HttpResponse [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] from helpers import TestResponse [EOL] from khetha import models , views [EOL] [EOL] [EOL] def assert_messages ( response , expected_messages ) : [EOL] [docstring] [EOL] actual_messages = list ( messages . get_messages ( response . wsgi_request ) ) [EOL] actual_message_texts = [ m . message for m in actual_messages ] [EOL] assert expected_messages == actual_message_texts , ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _publish_tasks ( ) : [EOL] assert [number] < models . Task . objects . update ( is_published = True ) [EOL] [EOL] [EOL] def _unpublish_tasks ( ) : [EOL] assert [number] < models . Task . objects . update ( is_published = False ) [EOL] [EOL] [EOL] def _set_user_key ( session , user_key ) : [EOL] [docstring] [EOL] session [ views . SESSION_USER_KEY_NAME ] = user_key [EOL] session . save ( ) [EOL] [EOL] [EOL] class TestHome ( TestCase ) : [EOL] def test_get ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertRedirects ( response , reverse ( [string] ) ) [EOL] [EOL] [EOL] class TestTaskListView ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] view_name = [string] [EOL] expected_template_name = [string] [EOL] [EOL] def _get ( self ) : [EOL] response = TestResponse . check ( self . client . get ( reverse ( self . view_name ) ) ) [EOL] self . assertTemplateUsed ( self . expected_template_name ) [EOL] assert HTTPStatus . OK == response . status_code [EOL] expected_user_key = views . get_user_key ( response . wsgi_request ) [EOL] user_tasks = models . UserTasks . for_user ( expected_user_key , list ( views . TaskListView . queryset . all ( ) ) ) [EOL] assert user_tasks . new_tasks == response . context [ [string] ] [EOL] assert user_tasks . active_submissions == response . context [ [string] ] [EOL] assert ( user_tasks . completed_submissions == response . context [ [string] ] ) [EOL] return response [EOL] [EOL] def test_get__not_published ( self ) : [EOL] models . Task . objects . update ( is_published = False ) [EOL] response = self . _get ( ) [EOL] self . assertQuerysetEqual ( [ ] , response . context [ [string] ] ) [EOL] [EOL] def test_get__published ( self ) : [EOL] _publish_tasks ( ) [EOL] response = self . _get ( ) [EOL] expected_tasks = models . Task . objects . all ( ) [EOL] self . assertQuerysetEqual ( expected_tasks , response . context [ [string] ] , transform = lambda o : o , ordered = False , ) [EOL] [EOL] [EOL] class TestCompletedTaskListView ( TestTaskListView ) : [EOL] view_name = [string] [EOL] expected_template_name = [string] [EOL] [EOL] [EOL] class TestTaskDetailView ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] def _get ( self , * , slug ) : [EOL] return TestResponse . check ( self . client . get ( reverse ( [string] , kwargs = { [string] : slug } ) ) ) [EOL] [EOL] def test_not_found ( self ) : [EOL] _unpublish_tasks ( ) [EOL] task = ... [EOL] for task in models . Task . objects . all ( ) : [EOL] response = self . _get ( slug = task . slug ) [EOL] assert HTTPStatus . NOT_FOUND == response . status_code [EOL] self . assertTemplateNotUsed ( [string] ) [EOL] assert [string] not in response . context [EOL] [EOL] def _get_ok ( self , task ) : [EOL] response = self . _get ( slug = task . slug ) [EOL] assert HTTPStatus . OK == response . status_code [EOL] self . assertTemplateUsed ( [string] ) [EOL] assert task == response . context [ [string] ] [EOL] self . assertContains ( response , task . title , count = [number] ) [EOL] for question in task . question_set . all ( ) : [EOL] self . assertContains ( response , question . text , count = [number] ) [EOL] return response [EOL] [EOL] def test_get__published ( self ) : [EOL] _publish_tasks ( ) [EOL] for task in models . Task . objects . all ( ) : [EOL] with self . subTest ( task = task ) : [EOL] self . _get_ok ( task ) [EOL] [EOL] [EOL] class TestAnswerUpdateView ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] super ( ) . setUpTestData ( ) [EOL] cls . _create_answers ( [string] ) [EOL] cls . _create_answers ( [string] ) [EOL] [EOL] @ classmethod def _create_answers ( cls , user_key ) : [EOL] task = ... [EOL] for task in models . Task . objects . all ( ) : [EOL] tasksubmission = task . get_submission ( user_key ) [EOL] assert [number] < len ( tasksubmission . answers ( ) ) == task . questions ( ) . count ( ) [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . answer = models . Answer . objects . filter ( tasksubmission__user_key = [string] ) . earliest ( [string] ) [EOL] _set_user_key ( self . client . session , [string] ) [EOL] [EOL] def _get ( self , * , pk ) : [EOL] path = reverse ( [string] , kwargs = { [string] : pk } ) [EOL] return self . client . get ( path ) [EOL] [EOL] def _post ( self , * , pk , data = None ) : [EOL] path = reverse ( [string] , kwargs = { [string] : pk } ) [EOL] return self . client . post ( path , data = data ) [EOL] [EOL] def test_get__not_found ( self ) : [EOL] assert HTTPStatus . NOT_FOUND == self . _get ( pk = [number] ) . status_code [EOL] [EOL] def test_get_post__no_access ( self ) : [EOL] _set_user_key ( self . client . session , [string] ) [EOL] assert HTTPStatus . NOT_FOUND == self . _get ( pk = self . answer . pk ) . status_code [EOL] assert HTTPStatus . NOT_FOUND == self . _post ( pk = self . answer . pk ) . status_code [EOL] [EOL] def test_get ( self ) : [EOL] tasksubmission = self . answer . tasksubmission [EOL] response = self . _get ( pk = self . answer . pk ) [EOL] self . assertRedirects ( response , tasksubmission . get_task_url ( ) ) [EOL] [EOL] def test_post__empty ( self ) : [EOL] tasksubmission = self . answer . tasksubmission [EOL] response = self . _post ( pk = self . answer . pk , data = { } ) [EOL] self . assertRedirects ( response , tasksubmission . get_task_url ( ) ) [EOL] self . answer . refresh_from_db ( ) [EOL] assert [string] == self . answer . value [EOL] [EOL] def test_post__values ( self ) : [EOL] tasksubmission = self . answer . tasksubmission [EOL] for value in [ [string] , [string] , [string] ] : [EOL] with self . subTest ( value = value ) : [EOL] response = self . _post ( pk = self . answer . pk , data = { [string] : value } ) [EOL] self . assertRedirects ( response , tasksubmission . get_task_url ( ) ) [EOL] self . answer . refresh_from_db ( ) [EOL] assert value == self . answer . value [EOL] [EOL] def test_post__completed ( self ) : [EOL] tasksubmission = self . answer . tasksubmission [EOL] tasksubmission . answer_set . update ( value = [string] ) [EOL] response = self . _post ( pk = self . answer . pk , data = { [string] : [string] } ) [EOL] self . assertRedirects ( response , tasksubmission . get_task_url ( ) ) [EOL] self . answer . refresh_from_db ( ) [EOL] assert [string] == self . answer . value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $helpers.TestResponse$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $helpers.TestResponse$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $helpers.TestResponse$ 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $khetha.models.Task$ 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.TaskSubmission$ 0 $khetha.models.Task$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $khetha.models.TaskSubmission$ 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.response.HttpResponse$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $django.http.response.HttpResponse$ 0 0 0 0 0 $builtins.int$ 0 $typing.Optional[builtins.dict]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[builtins.dict]$ 0 $typing.Optional[builtins.dict]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . conf import settings [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . test import override_settings [EOL] from django . test . testcases import SimpleTestCase [EOL] [EOL] from khetha . templatetags import khetha_tags [EOL] [EOL] [EOL] class Test_google_maps_api_key ( SimpleTestCase ) : [EOL] def test_missing ( self ) : [EOL] with override_settings ( GOOGLE_MAPS_API_KEY = None ) : [EOL] del settings . GOOGLE_MAPS_API_KEY [EOL] with self . assertRaises ( ImproperlyConfigured ) : [EOL] khetha_tags . google_maps_api_key ( ) [EOL] [EOL] def test_empty ( self ) : [EOL] for value in [ None , [string] ] : [EOL] with self . subTest ( value = value ) : [EOL] with override_settings ( GOOGLE_MAPS_API_KEY = value ) : [EOL] with self . assertRaises ( ImproperlyConfigured ) : [EOL] khetha_tags . google_maps_api_key ( ) [EOL] [EOL] def test__configured ( self ) : [EOL] with override_settings ( GOOGLE_MAPS_API_KEY = [string] ) : [EOL] assert [string] == khetha_tags . google_maps_api_key ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import tests [EOL] import django [EOL] from __future__ import annotations [EOL] [EOL] from typing import cast [EOL] [EOL] from django . http . response import HttpResponse [EOL] from django . template . context import Context [EOL] [EOL] [EOL] class TestResponse ( HttpResponse ) : [EOL] [docstring] [EOL] [EOL] context = ... [EOL] [EOL] @ staticmethod def check ( response ) : [EOL] response = cast ( TestResponse , response ) [EOL] if response . context is None : [EOL] response . context = { } [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.template.context.Context$ 0 0 0 0 0 0 0 $TestResponse$ 0 $tests.helpers.TestResponse$ 0 0 0 $tests.helpers.TestResponse$ 0 0 0 0 0 $tests.helpers.TestResponse$ 0 0 0 $tests.helpers.TestResponse$ 0 0 0 0 0 0 $tests.helpers.TestResponse$ 0 0 0 0 0 0 0 $tests.helpers.TestResponse$ 0
from typing import List , Any [EOL] import typing [EOL] import khetha [EOL] from django . db . models . options import Options [EOL] from django . test import TestCase [EOL] [EOL] from khetha import models [EOL] [EOL] [EOL] class TestUser ( TestCase ) : [EOL] def test_create ( self ) : [EOL] user = models . User . objects . create ( ) [EOL] assert { [string] : user . date_joined , [string] : [string] , [string] : [string] , [string] : user . pk , [string] : True , [string] : False , [string] : False , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , } == models . User . objects . values ( ) . get ( pk = user . pk ) [EOL] [EOL] def test_str ( self ) : [EOL] assert [string] == str ( models . User . objects . create ( ) ) [EOL] [EOL] [EOL] class TestTask ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] def test_create ( self ) : [EOL] task = models . Task . objects . create ( ) [EOL] assert { [string] : [string] , [string] : task . pk , [string] : False , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , } == models . Task . objects . values ( ) . get ( pk = task . pk ) [EOL] [EOL] def test_str ( self ) : [EOL] assert [string] == str ( models . Task . objects . create ( ) ) [EOL] [EOL] def test_get_absolute_url ( self ) : [EOL] task = models . Task . objects . create ( slug = [string] ) [EOL] assert [string] == task . get_absolute_url ( ) [EOL] [EOL] def test_questions ( self ) : [EOL] task = models . Task . objects . get ( slug = [string] ) [EOL] self . assertQuerysetEqual ( task . question_set . order_by ( [string] ) , task . questions ( ) , transform = lambda o : o ) [EOL] [EOL] [EOL] class TestQuestion ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] @ staticmethod def _create ( ) : [EOL] task = models . Task . objects . create ( ) [EOL] question = task . question_set . create ( ) [EOL] return question [EOL] [EOL] def test_create ( self ) : [EOL] question = self . _create ( ) [EOL] assert { [string] : [string] , [string] : question . pk , [string] : [number] , [string] : question . task . pk , [string] : [string] , [string] : models . QuestionDisplayType . short_text . value , } == models . Question . objects . values ( ) . get ( pk = question . pk ) [EOL] [EOL] def test_str ( self ) : [EOL] assert [string] == str ( self . _create ( ) ) [EOL] [EOL] def test_answer_options ( self ) : [EOL] task = models . Task . objects . get ( slug = [string] ) [EOL] for question in task . questions ( ) . filter ( answeroption__isnull = False ) : [EOL] assert [number] < question . answeroption_set . count ( ) [comment] [EOL] self . assertQuerysetEqual ( question . answeroption_set . order_by ( [string] ) , question . answer_options ( ) , transform = lambda o : o , ) [EOL] [EOL] def test_display_type ( self ) : [EOL] assert isinstance ( models . Question . _meta , Options ) [EOL] field = models . Question . _meta . get_field ( [string] ) [EOL] assert [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ] == field . flatchoices [comment] [EOL] [EOL] def test_display_type_enum ( self ) : [EOL] question = self . _create ( ) [EOL] assert models . QuestionDisplayType . short_text is question . display_type_enum [EOL] question . display_type_enum = models . QuestionDisplayType . long_text [EOL] assert models . QuestionDisplayType . long_text . value == question . display_type [EOL] [EOL] [EOL] class TestAnswerOption ( TestCase ) : [EOL] @ staticmethod def _create ( ) : [EOL] question = TestQuestion . _create ( ) [EOL] answer_option = question . answeroption_set . create ( ) [EOL] return answer_option [EOL] [EOL] def test_create ( self ) : [EOL] answer_option = self . _create ( ) [EOL] assert { [string] : answer_option . pk , [string] : [number] , [string] : answer_option . question . pk , [string] : [string] , } == models . AnswerOption . objects . values ( ) . get ( pk = answer_option . pk ) [EOL] [EOL] def test_str ( self ) : [EOL] assert [string] == str ( self . _create ( ) ) [EOL] [EOL] [EOL] class TestTaskSubmission ( TestCase ) : [EOL] [EOL] fixtures = [ [string] ] [EOL] [EOL] def test_answers ( self ) : [EOL] self . assertQuerysetEqual ( [ ] , models . Answer . objects . all ( ) ) [EOL] for task in models . Task . objects . all ( ) : [EOL] with self . subTest ( task = task ) : [EOL] tasksubmission = models . TaskSubmission . objects . create ( task = task , user_key = [string] ) [EOL] assert list ( task . questions ( ) ) == [ answer . question for answer in tasksubmission . answers ( ) ] [EOL] assert models . Question . objects . count ( ) == models . Answer . objects . count ( ) [EOL] [EOL] def test_progress_factor_is_completed ( self ) : [EOL] [docstring] [EOL] for task in models . Task . objects . all ( ) : [EOL] with self . subTest ( task = task ) : [EOL] tasksubmission = models . TaskSubmission . objects . create ( task = task , user_key = [string] ) [EOL] assert [number] == tasksubmission . progress_factor ( ) [EOL] assert not tasksubmission . is_completed ( ) [EOL] [EOL] [comment] [EOL] answers = tasksubmission . answers ( ) [EOL] assert [number] == tasksubmission . progress_factor ( ) [EOL] assert not tasksubmission . is_completed ( ) [EOL] [EOL] [comment] [EOL] answers [ [number] ] . value = [string] [EOL] answers [ [number] ] . save ( ) [EOL] assert ( [number] / len ( answers ) ) == tasksubmission . progress_factor ( ) [EOL] assert not tasksubmission . is_completed ( ) [EOL] [EOL] [comment] [EOL] tasksubmission . answer_set . all ( ) . update ( value = [string] ) [EOL] assert [number] == tasksubmission . progress_factor ( ) [EOL] assert tasksubmission . is_completed ( ) [EOL] [EOL] def test_get_task_url ( self ) : [EOL] task = models . Task . objects . get ( slug = [string] ) [EOL] tasksubmission = task . get_submission ( [string] ) [EOL] assert task . get_absolute_url ( ) == tasksubmission . get_task_url ( ) [EOL] tasksubmission . answers ( ) [EOL] tasksubmission . answer_set . update ( value = [string] ) [EOL] assert f"{ task . get_absolute_url ( ) } [string] " == tasksubmission . get_task_url ( ) [EOL] [EOL] [EOL] class TestUserTasks ( TestCase ) : [EOL] fixtures = [ [string] ] [EOL] [EOL] def test_basic ( self ) : [EOL] expected = models . UserTasks ( new_tasks = list ( models . Task . objects . all ( ) ) ) [EOL] assert expected == models . UserTasks . for_user ( [string] , models . Task . objects . all ( ) ) [EOL] [EOL] def test_mixed ( self ) : [EOL] tasks = list ( models . Task . objects . all ( ) ) [EOL] [EOL] active_task = tasks . pop ( ) [EOL] active_submission = active_task . get_submission ( [string] ) [EOL] assert not active_submission . is_completed ( ) [EOL] [EOL] completed_task = tasks . pop ( ) [EOL] completed_submission = completed_task . get_submission ( [string] ) [EOL] completed_submission . answers ( ) [EOL] completed_submission . answer_set . update ( value = [string] ) [EOL] assert completed_submission . is_completed ( ) [EOL] [EOL] expected = models . UserTasks ( new_tasks = tasks , active_submissions = [ active_submission ] , completed_submissions = [ completed_submission ] , ) [EOL] assert expected == models . UserTasks . for_user ( [string] , models . Task . objects . all ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $khetha.models.Question$ 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Question$ 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 $khetha.models.Question$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.AnswerOption$ 0 0 0 0 $khetha.models.Question$ 0 0 0 0 0 0 0 $khetha.models.AnswerOption$ 0 $khetha.models.Question$ 0 0 0 0 0 0 0 0 $khetha.models.AnswerOption$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Any , Tuple [EOL] import typing [EOL] import enum [EOL] import builtins [EOL] from __future__ import annotations [EOL] [EOL] from enum import Enum [EOL] from typing import Any , List , Tuple , Type [EOL] [EOL] from django . forms . utils import pretty_name [EOL] [EOL] [EOL] def enum_choices ( enum_type ) : [EOL] [docstring] [EOL] return [ ( member . value , pretty_name ( member . name ) ) for member in enum_type ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] from psycogreen . gevent import patch_psycopg [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] patch_psycopg ( ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import builtins [EOL] from django . contrib import admin [EOL] from django . urls import path [EOL] from django . views import generic [EOL] [EOL] from khetha import views [EOL] [EOL] urlpatterns = [ path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) ) , path ( [string] , generic . RedirectView . as_view ( pattern_name = [string] ) , name = [string] ) , path ( [string] , views . TaskListView . as_view ( ) , name = [string] ) , path ( [string] , views . TaskCompletedListView . as_view ( ) , name = [string] , ) , path ( [string] , views . TaskDetailView . as_view ( ) , name = [string] ) , path ( [string] , views . AnswerUpdateView . as_view ( ) , name = [string] , ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Iterable , Type , Any , Tuple [EOL] import typing [EOL] import src [EOL] import builtins [EOL] import django [EOL] from __future__ import annotations [EOL] [EOL] import enum [EOL] from dataclasses import dataclass , field [EOL] from typing import Iterable , List , Tuple [EOL] [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from django_missing_bits import missing_utils [EOL] [EOL] [EOL] class TimestampedModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True , db_index = True ) [EOL] modified_at = models . DateTimeField ( auto_now = True , db_index = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] pass [EOL] [EOL] [EOL] class Task ( models . Model ) : [EOL] slug = models . SlugField ( ) [EOL] [EOL] title = models . CharField ( max_length = [number] ) [EOL] description = models . TextField ( blank = True ) [EOL] points = models . PositiveSmallIntegerField ( default = [number] ) [EOL] [EOL] is_published = models . BooleanField ( default = False ) [EOL] [EOL] order = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] class Meta ( object ) : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . slug } ) [EOL] [EOL] def questions ( self ) : [EOL] [docstring] [EOL] return self . question_set . all ( ) [EOL] [EOL] def get_submission ( self , user_key ) : [EOL] [docstring] [EOL] tasksubmission = ... [EOL] ( tasksubmission , created ) = self . tasksubmission_set . get_or_create ( user_key = user_key ) [EOL] return tasksubmission [EOL] [EOL] [EOL] @ enum . unique class QuestionDisplayType ( enum . Enum ) : [EOL] [docstring] [EOL] [EOL] short_text = [number] [EOL] long_text = [number] [EOL] place_field = [number] [EOL] buttons = [number] [EOL] select_list = [number] [EOL] radio_buttons = [number] [EOL] [EOL] [EOL] class Question ( models . Model ) : [EOL] task = models . ForeignKey ( Task , on_delete = models . CASCADE ) [EOL] [EOL] [comment] [EOL] display_type = models . PositiveSmallIntegerField ( db_index = True , default = QuestionDisplayType . short_text . value , choices = missing_utils . enum_choices ( QuestionDisplayType ) , ) [EOL] [EOL] text = models . CharField ( max_length = [number] ) [EOL] [EOL] description = models . TextField ( blank = True ) [EOL] [EOL] order = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] class Meta ( object ) : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL] [EOL] @ property def display_type_enum ( self ) : [EOL] [docstring] [EOL] return QuestionDisplayType ( self . display_type ) [EOL] [EOL] @ display_type_enum . setter def display_type_enum ( self , member ) : [EOL] self . display_type = member . value [EOL] [EOL] def answer_options ( self ) : [EOL] [docstring] [EOL] return self . answeroption_set . all ( ) [EOL] [EOL] [EOL] class AnswerOption ( models . Model ) : [EOL] question = models . ForeignKey ( Question , on_delete = models . CASCADE ) [EOL] [EOL] text = models . CharField ( max_length = [number] ) [EOL] [EOL] order = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] class Meta ( object ) : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL] [EOL] [EOL] class TaskSubmission ( TimestampedModel ) : [EOL] [comment] [EOL] task = models . ForeignKey ( Task , on_delete = models . CASCADE ) [EOL] user_key = models . CharField ( max_length = [number] , db_index = True ) [EOL] [EOL] def answers ( self ) : [EOL] [docstring] [EOL] answers_creations = [ self . answer_set . get_or_create ( question = question ) for question in self . task . questions ( ) ] [EOL] return [ answer for ( answer , created ) in answers_creations ] [EOL] [EOL] def progress_factor ( self ) : [EOL] answered_count = self . answer_set . exclude ( value = [string] ) . count ( ) [EOL] question_count = self . task . questions ( ) . count ( ) [EOL] return answered_count / question_count [EOL] [EOL] def is_completed ( self ) : [EOL] return self . progress_factor ( ) == [number] [EOL] [EOL] def get_task_url ( self ) : [EOL] [docstring] [EOL] task_url = self . task . get_absolute_url ( ) [EOL] return f"{ task_url } [string] " if self . is_completed ( ) else task_url [EOL] [EOL] [EOL] class Answer ( TimestampedModel ) : [EOL] tasksubmission = models . ForeignKey ( TaskSubmission , on_delete = models . CASCADE ) [EOL] question = models . ForeignKey ( Question , on_delete = models . CASCADE ) [EOL] [EOL] value = models . TextField ( blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . value [EOL] [EOL] [EOL] @ dataclass class UserTasks : [EOL] [docstring] [EOL] [EOL] new_tasks = field ( default_factory = list ) [EOL] active_submissions = field ( default_factory = list ) [EOL] completed_submissions = field ( default_factory = list ) [EOL] [EOL] @ classmethod def for_user ( cls , user_key , tasks ) : [EOL] user_tasks = UserTasks ( ) [EOL] for task in tasks : [EOL] try : [EOL] tasksubmission = task . tasksubmission_set . get ( user_key = user_key ) [EOL] except TaskSubmission . DoesNotExist : [EOL] user_tasks . new_tasks . append ( task ) [EOL] else : [EOL] if tasksubmission . is_completed ( ) : [EOL] user_tasks . completed_submissions . append ( tasksubmission ) [EOL] else : [EOL] user_tasks . active_submissions . append ( tasksubmission ) [EOL] return user_tasks [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Task]$ 0 0 0 0 0 0 0 0 $typing.List[TaskSubmission]$ 0 0 0 0 0 0 0 0 $typing.List[TaskSubmission]$ 0 0 0 0 0 0 0 0 0 0 0 0 $UserTasks$ 0 0 0 $builtins.str$ 0 $typing.Iterable[Task]$ 0 0 0 $src.khetha.models.UserTasks$ 0 0 0 0 0 0 0 0 $typing.Iterable[Task]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $src.khetha.models.UserTasks$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $src.khetha.models.UserTasks$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $src.khetha.models.UserTasks$ 0 0 0 0 0 $typing.Any$ 0 0 0 $src.khetha.models.UserTasks$ 0
from typing import List , Type , Any , Dict [EOL] import src [EOL] import django [EOL] import typing [EOL] import khetha [EOL] import builtins [EOL] from __future__ import annotations [EOL] [EOL] import uuid [EOL] from typing import Any , Dict [EOL] [EOL] from django import forms [EOL] from django . contrib import messages [EOL] from django . contrib . sessions . backends . base import SessionBase [EOL] from django . core . handlers . wsgi import WSGIRequest [EOL] from django . db . models import QuerySet [EOL] from django . http import HttpRequest , HttpResponse , HttpResponseRedirect [EOL] from django . utils . html import format_html [EOL] from django . views import generic [EOL] from django . views . generic . edit import BaseUpdateView , FormMixin [EOL] [EOL] from khetha import models [EOL] [EOL] SESSION_USER_KEY_NAME = [string] [EOL] [EOL] [EOL] def get_user_key ( request ) : [EOL] [docstring] [EOL] session = request . session [EOL] if SESSION_USER_KEY_NAME not in session : [EOL] new_user_key = uuid . uuid4 ( ) . hex [EOL] session [ SESSION_USER_KEY_NAME ] = new_user_key [EOL] user_key = session [ SESSION_USER_KEY_NAME ] [EOL] return user_key [EOL] [EOL] [EOL] class TaskListView ( generic . ListView ) : [EOL] queryset = models . Task . objects . filter ( is_published = True ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] [docstring] [EOL] user_key = get_user_key ( self . request ) [EOL] user_tasks = models . UserTasks . for_user ( user_key , self . object_list ) [EOL] return super ( ) . get_context_data ( new_tasks = user_tasks . new_tasks , active_submissions = user_tasks . active_submissions , completed_submissions = user_tasks . completed_submissions , player_points_earned = sum ( submission . task . points for submission in user_tasks . completed_submissions ) , ** kwargs ) [EOL] [EOL] [EOL] class TaskCompletedListView ( TaskListView ) : [EOL] [docstring] [EOL] [EOL] template_name_suffix = [string] [EOL] [EOL] [EOL] class TaskDetailView ( generic . DetailView ) : [EOL] [EOL] queryset = models . Task . objects . filter ( is_published = True ) [EOL] [EOL] object = ... [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] [docstring] [EOL] user_key = get_user_key ( self . request ) [EOL] return super ( ) . get_context_data ( tasksubmission = self . object . get_submission ( user_key ) , ** kwargs ) [EOL] [EOL] [EOL] class DjangoMessageErrorsFormMixin ( FormMixin ) : [EOL] [docstring] [EOL] [EOL] def form_invalid ( self , form ) : [EOL] [comment] [EOL] [comment] [EOL] message = format_html ( [string] , form . errors . as_text ( ) , form . non_field_errors ( ) . as_text ( ) ) [EOL] assert isinstance ( self . request , WSGIRequest ) , self . request [EOL] messages . add_message ( self . request , messages . ERROR , message ) [EOL] return super ( ) . form_invalid ( form ) [EOL] [EOL] [EOL] [comment] [EOL] class AnswerUpdateView ( DjangoMessageErrorsFormMixin , BaseUpdateView ) : [EOL] [EOL] model = models . Answer [EOL] fields = [ [string] ] [EOL] [EOL] object = ... [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] user_key = get_user_key ( self . request ) [EOL] queryset = super ( ) . get_queryset ( ) [EOL] return queryset . filter ( tasksubmission__user_key = user_key ) [EOL] [EOL] [comment] [EOL] [EOL] def get_success_url ( self ) : [EOL] tasksubmission = self . object . tasksubmission [EOL] return tasksubmission . get_task_url ( ) [EOL] [EOL] def render_to_response ( self , context , ** response_kwargs ) : [EOL] return HttpResponseRedirect ( self . get_success_url ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.khetha.views.TaskListView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.khetha.views.TaskDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $khetha.models.Task$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 $django.forms.BaseForm$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $django.forms.BaseForm$ 0 0 0 0 0 0 0 $django.forms.BaseForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $django.forms.BaseForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.khetha.views.AnswerUpdateView]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $khetha.models.Answer$ 0 0 0 0 0 $django.db.models.QuerySet[khetha.models.Answer]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $django.db.models.QuerySet[khetha.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 $django.db.models.QuerySet[khetha.models.Answer]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Any , Dict [EOL] import typing [EOL] import khetha [EOL] import src [EOL] import builtins [EOL] from adminsortable2 . admin import SortableAdminMixin , SortableInlineAdminMixin [EOL] from django import forms [EOL] from django . contrib import admin [EOL] from django . contrib . admin . options import InlineModelAdmin [EOL] from django . contrib . auth . admin import UserAdmin as django_UserAdmin [EOL] from django . db . models import CharField [EOL] [EOL] from khetha import models [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class _InlineModelAdmin ( InlineModelAdmin ) : [EOL] extra = [number] [EOL] show_change_link = True [EOL] [EOL] [EOL] class _TabularInline ( admin . TabularInline , _InlineModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] class _StackedInline ( admin . StackedInline , _InlineModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] @ admin . register ( models . User ) class UserAdmin ( django_UserAdmin ) : [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _formfield_override_wider_char_fields = { CharField : { [string] : forms . TextInput ( attrs = { [string] : [string] } ) } } [EOL] [EOL] [EOL] class QuestionInline ( SortableInlineAdminMixin , _TabularInline ) : [EOL] model = models . Question [EOL] raw_id_fields = [ [string] ] [EOL] readonly_fields = [ [string] , [string] ] [EOL] formfield_overrides = { ** _formfield_override_wider_char_fields } [EOL] [EOL] def answer_options ( self , question ) : [EOL] return [string] . join ( question . answer_options ( ) . values_list ( [string] , flat = True ) ) [EOL] [EOL] [EOL] class AnswerOptionInline ( SortableInlineAdminMixin , _TabularInline ) : [EOL] model = models . AnswerOption [EOL] raw_id_fields = [ [string] ] [EOL] formfield_overrides = { ** _formfield_override_wider_char_fields } [EOL] [EOL] [EOL] class AnswerInline ( _StackedInline ) : [EOL] model = models . Answer [EOL] ordering = [ [string] ] [EOL] raw_id_fields = [ [string] , [string] ] [EOL] readonly_fields = [ [string] ] [EOL] [EOL] [EOL] @ admin . register ( models . Task ) class TaskAdmin ( SortableAdminMixin , admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] ] [EOL] search_fields = [ [string] , [string] , [string] ] [EOL] list_editable = [ [string] ] [EOL] list_filter = [ [string] ] [EOL] [EOL] inlines = [ QuestionInline ] [EOL] [EOL] [EOL] @ admin . register ( models . Question ) class QuestionAdmin ( admin . ModelAdmin ) : [EOL] search_fields = [ [string] , [string] ] [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] ] [EOL] [EOL] raw_id_fields = [ [string] ] [EOL] radio_fields = { [string] : admin . HORIZONTAL } [EOL] [EOL] inlines = [ AnswerOptionInline ] [EOL] [EOL] [EOL] @ admin . register ( models . AnswerOption ) class AnswerOptionAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] ] [EOL] raw_id_fields = [ [string] ] [EOL] [EOL] [EOL] @ admin . register ( models . TaskSubmission ) class TaskSubmissionAdmin ( admin . ModelAdmin ) : [EOL] date_hierarchy = [string] [EOL] ordering = [ [string] ] [EOL] list_display_links = [ [string] , [string] , [string] ] [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] search_fields = [ [string] , [string] ] [EOL] list_filter = [ ( [string] , admin . RelatedOnlyFieldListFilter ) ] [EOL] [EOL] raw_id_fields = [ [string] ] [EOL] readonly_fields = [ [string] , [string] ] [EOL] [EOL] inlines = [ AnswerInline ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Type[src.khetha.admin.AnswerInline]]$ 0 0 0 0 0
	0
from typing import Any , Optional [EOL] import typing [EOL] import khetha [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from django import template [EOL] from django . conf import settings [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] [EOL] from khetha import models [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter_function def get_submission ( task , user_key ) : [EOL] [docstring] [EOL] return task . get_submission ( user_key ) [EOL] [EOL] [EOL] @ register . simple_tag def google_maps_api_key ( ) : [EOL] api_key = getattr ( settings , [string] , None ) [EOL] if api_key : [EOL] return api_key [EOL] else : [EOL] raise ImproperlyConfigured ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $khetha.models.TaskSubmission$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } ) , migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } ) , migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveIntegerField ( default = [number] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveIntegerField ( default = [number] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveIntegerField ( default = [number] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0