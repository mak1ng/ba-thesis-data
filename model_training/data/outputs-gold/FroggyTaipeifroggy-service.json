	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls . static import static [EOL] from django . conf import settings [EOL] from django . urls import path [EOL] from django . contrib import admin [EOL] from django . conf . urls import include [EOL] from rest_framework import permissions [EOL] from drf_yasg . views import get_schema_view [EOL] from drf_yasg import openapi [EOL] [EOL] from config . api import api [EOL] [EOL] from . site import DashboardSite [EOL] [EOL] admin . site = DashboardSite ( ) [EOL] admin . sites . site = admin . site [EOL] admin . autodiscover ( ) [EOL] [EOL] schema_view = get_schema_view ( openapi . Info ( title = [string] , default_version = [string] , contact = openapi . Contact ( email = settings . SERVER_EMAIL ) , license = openapi . License ( name = [string] ) , ) , url = settings . DOMAIN , public = False , permission_classes = ( permissions . AllowAny , ) , ) [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls , name = [string] ) , path ( [string] , include ( api . urls ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] urlpatterns [ [number] ] = path ( [string] , admin . site . urls , name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] [docstring] [EOL] from django . conf import settings [EOL] from google . oauth2 import service_account [EOL] from storages . backends . gcloud import GoogleCloudStorage [EOL] from urllib . parse import urljoin [EOL] [EOL] [EOL] class MediaStorage ( GoogleCloudStorage ) : [EOL] [docstring] [EOL] project_id = settings . GS_PROJECT_ID [EOL] credentials = service_account . Credentials . from_service_account_file ( settings . DEFAULT_SA_PATH ) [EOL] bucket_name = settings . GS_MEDIA_BUCKET [EOL] auto_create_bucket = True [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] if not settings . MEDIA_URL : [EOL] raise Exception ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def url ( self , name ) : [EOL] [docstring] [EOL] return urljoin ( settings . MEDIA_URL , name ) [EOL] [EOL] [EOL] class StaticFileStorage ( GoogleCloudStorage ) : [EOL] [docstring] [EOL] credentials = service_account . Credentials . from_service_account_file ( settings . DEFAULT_SA_PATH ) [EOL] bucket_name = settings . GS_STATIC_BUCKET [EOL] default_acl = [string] [EOL] auto_create_bucket = True [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] if not settings . STATIC_URL : [EOL] raise Exception ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def url ( self , name ) : [EOL] [docstring] [EOL] return urljoin ( settings . STATIC_URL , name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.config.storages.MediaStorage]$ 0 0 0 0 0 $typing.Type[backend.config.storages.MediaStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.config.storages.MediaStorage]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.config.storages.StaticFileStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.config.storages.StaticFileStorage]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from suit_dashboard import Box [EOL] [EOL] from apps . cases import widgets [EOL] [EOL] [EOL] class CaseStatePieBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseStatePie ( ) ] [EOL] [EOL] [EOL] class CaseStatePackedBubbleBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseStatePackedBubble ( ) ] [EOL] [EOL] [EOL] class CaseRegionPieBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseRegionPie ( ) ] [EOL] [EOL] [EOL] class CaseRegionPackedBubbleBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseRegionPackedBubble ( ) ] [EOL] [EOL] [EOL] class CaseRegionLineBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseRegionLine ( ) ] [EOL] [EOL] [EOL] class CaseTypePieBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseTypePie ( ) ] [EOL] [EOL] [EOL] class CaseTypePackedBubbleBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseTypePackedBubble ( ) ] [EOL] [EOL] [EOL] class CaseTypeLineBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseTypeLine ( ) ] [EOL] [EOL] [EOL] class CaseContentWordCloudBox ( Box ) : [EOL] title = [string] [EOL] description = [string] [EOL] widgets = [ widgets . CaseContentWordCloud ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] from django . http import HttpResponse , HttpResponseBadRequest [EOL] from django . conf import settings [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class HealthCheckMiddleware ( object ) : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [comment] [EOL] [EOL] def __call__ ( self , request ) : [EOL] if request . method == [string] : [EOL] if request . path == [string] : [EOL] return self . readiness ( request ) [EOL] elif request . path == [string] : [EOL] return self . healthz ( request ) [EOL] return self . get_response ( request ) [EOL] [EOL] def healthz ( self , request ) : [EOL] [docstring] [EOL] return HttpResponse ( [string] ) [EOL] [EOL] def readiness ( self , request ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] from django . db import connections [EOL] for name in connections : [EOL] cursor = connections [ name ] . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] row = cursor . fetchone ( ) [EOL] if row is None : [EOL] return HttpResponseBadRequest ( [string] ) [EOL] except Exception as e : [EOL] logger . exception ( e ) [EOL] return HttpResponseBadRequest ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] from django_redis import get_redis_connection [EOL] for key in settings . CACHES . keys ( ) : [EOL] get_redis_connection ( key ) [EOL] except Exception as e : [EOL] logger . exception ( e ) [EOL] return HttpResponseBadRequest ( [string] ) [EOL] [EOL] return HttpResponse ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from suit_dashboard import DashboardView , Grid , Column , Row [EOL] [EOL] from . import boxes [EOL] [EOL] [EOL] class DashboardMainView ( DashboardView ) : [EOL] template_name = [string] [EOL] crumbs = ( { [string] : [string] , [string] : _ ( [string] ) } , ) [EOL] grid = Grid ( Row ( Column ( boxes . CaseStatePieBox ( ) , width = [number] ) , Column ( boxes . CaseTypePieBox ( ) , width = [number] ) , Column ( boxes . CaseRegionPieBox ( ) , width = [number] ) , ) , Row ( Column ( boxes . CaseStatePackedBubbleBox ( ) , width = [number] ) , Column ( boxes . CaseTypePackedBubbleBox ( ) , width = [number] ) , Column ( boxes . CaseRegionPackedBubbleBox ( ) , width = [number] ) , ) , Row ( Column ( boxes . CaseContentWordCloudBox ( ) , width = [number] ) , Column ( boxes . CaseTypeLineBox ( ) , width = [number] ) , Column ( boxes . CaseRegionLineBox ( ) , width = [number] ) , ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.config.views.DashboardMainView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . contrib . admin . sites import AdminSite [EOL] from django . urls import path [EOL] [EOL] from . views import DashboardMainView [EOL] [EOL] [EOL] class DashboardSite ( AdminSite ) : [EOL] [docstring] [EOL] [EOL] def get_urls ( self ) : [EOL] urls = super ( DashboardSite , self ) . get_urls ( ) [EOL] custom_urls = [ path ( [string] , self . admin_view ( DashboardMainView . as_view ( ) ) , name = [string] ) , ] [EOL] del urls [ [number] ] [EOL] return custom_urls + urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import firebase_admin [EOL] from firebase_admin import credentials , delete_app [EOL] from contextlib import contextmanager [EOL] from django . conf import settings [EOL] [EOL] [EOL] @ contextmanager def firebase_app ( credential_path = settings . FIREBASE_SA_PATH ) : [EOL] cred = credentials . Certificate ( credential_path ) [EOL] app = firebase_admin . initialize_app ( cred ) [EOL] try : [EOL] yield app [EOL] except Exception as e : [EOL] raise e [EOL] finally : [EOL] delete_app ( app ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def get_highchart_pie ( data , title = [string] ) : [EOL] return { [string] : { [string] : [string] , [string] : None , [string] : None , [string] : False , } , [string] : { [string] : title , } , [string] : [ { [string] : True , [string] : data , } ] , [string] : { [string] : [string] , } , [string] : { [string] : { [string] : True , [string] : True , [string] : [string] , [string] : { [string] : True , [string] : [string] , [string] : { [string] : [string] , } , } , } , } , } [EOL] [EOL] [EOL] def get_highchart_line ( data , y_title , title = [string] ) : [EOL] return { [string] : { [string] : [string] , } , [string] : { [string] : title , } , [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , } , [string] : { [string] : { [string] : y_title , } , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : { [string] : { [string] : False , } , } , } , [string] : data , [string] : { [string] : [ { [string] : { [string] : [number] , } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } , } , } ] , } , } [EOL] [EOL] [EOL] def get_highchart_word_cloud ( data , title = [string] ) : [EOL] return { [string] : [ { [string] : [string] , [string] : data , [string] : [string] , } ] , [string] : { [string] : title , } , } [EOL] [EOL] [EOL] def get_highchart_packed_bubble ( data , title = [string] ) : [EOL] print ( data ) [EOL] return { [string] : { [string] : [string] , } , [string] : { [string] : title } , [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : False , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } } } , [string] : data } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from python_http_client . exceptions import HTTPError [EOL] from django . test import TestCase , tag [EOL] from django . core . management import call_command [EOL] from apps . mails . models import SendGridMail , SendGridMailTemplate [EOL] from apps . cases . models import Case [EOL] [EOL] [EOL] @ tag ( [string] ) class SendGridTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] [EOL] self . case = Case . objects . first ( ) [EOL] [EOL] def test_template_save ( self ) : [EOL] with self . assertRaises ( HTTPError ) : [EOL] SendGridMailTemplate . objects . create ( tid = [string] , name = [string] ) [EOL] [EOL] def test_template ( self ) : [EOL] for template in SendGridMailTemplate . objects . all ( ) : [EOL] response = template . retrieve_template ( ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_send ( self ) : [EOL] instance = self . case [EOL] data = { [string] : instance . number , [string] : instance . username , [string] : instance . title , [string] : instance . create_time , [string] : instance . content , [string] : instance . location , } [EOL] template = SendGridMailTemplate . objects . filter ( name = [string] ) . first ( ) [EOL] [EOL] self . assertIsNotNone ( template ) [EOL] [EOL] mail = SendGridMail ( case = instance , template = template , to_email = [string] , data = data ) [EOL] mail . save ( ) [EOL] [EOL] self . assertTrue ( mail . success , True ) [EOL] [EOL] mail2 = SendGridMail . objects . create ( case = instance , template = template , to_email = [string] , data = data ) [EOL] [EOL] self . assertTrue ( mail2 . success , True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import SendGridMail , SendGridMailTemplate [EOL] [EOL] [EOL] admin . site . register ( SendGridMailTemplate ) [EOL] admin . site . register ( SendGridMail ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from rest_framework import serializers [EOL] from apps . mails . models import SendGridMail [EOL] [EOL] [EOL] class SendGridMailSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = SendGridMail [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.serializers.SendGridMailSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . core . mail import send_mail [EOL] [EOL] [EOL] def sendgrid_system_mail ( message ) : [EOL] from_email = settings . SERVER_EMAIL [EOL] [EOL] subject = [string] [EOL] [EOL] admins = [ email for name , email in settings . ADMINS ] [EOL] [EOL] return send_mail ( subject , message , from_email , admins , fail_silently = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Tuple [EOL] import backend [EOL] import logging [EOL] import typing [EOL] import json [EOL] import logging [EOL] import sendgrid [EOL] from python_http_client . exceptions import HTTPError [EOL] from django . conf import settings [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from sendgrid . helpers . mail import Email , Mail [EOL] from django . contrib . postgres . fields import HStoreField [EOL] from django . db . models import ( Model , CASCADE , DateTimeField , ForeignKey , EmailField , BooleanField , CharField , ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class SendGridMailTemplate ( Model ) : [EOL] [docstring] [EOL] tid = CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] name = CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] update_time = DateTimeField ( auto_now = True , null = True , blank = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name = _ ( [string] ) [EOL] verbose_name_plural = _ ( [string] ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . retrieve_template ( ) [comment] [EOL] super ( SendGridMailTemplate , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def retrieve_template ( self ) : [EOL] sg = sendgrid . SendGridAPIClient ( apikey = settings . SENDGRID_API_KEY ) [EOL] return sg . client . templates . _ ( self . tid ) . get ( ) [EOL] [EOL] [EOL] class SendGridMail ( Model ) : [EOL] [docstring] [EOL] case = ForeignKey ( [string] , on_delete = CASCADE , related_name = [string] , verbose_name = _ ( [string] ) ) [EOL] template = ForeignKey ( [string] , on_delete = CASCADE , related_name = [string] , verbose_name = _ ( [string] ) ) [EOL] from_email = EmailField ( verbose_name = _ ( [string] ) ) [EOL] to_email = EmailField ( verbose_name = _ ( [string] ) ) [EOL] data = HStoreField ( verbose_name = _ ( [string] ) ) [EOL] success = BooleanField ( default = False , verbose_name = _ ( [string] ) ) [EOL] send_time = DateTimeField ( auto_now = True , null = True , blank = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name = _ ( [string] ) [EOL] verbose_name_plural = _ ( [string] ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . to_email [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . pk : [EOL] self . from_email = self . from_email or settings . SERVER_EMAIL [EOL] self . to_email = self . to_email or self . case . email [EOL] if self . to_email : [EOL] try : [EOL] response = SendGridMail . send_template ( self . from_email , self . to_email , self . data , self . template . tid ) [EOL] self . success = bool ( response and response . status_code == [number] ) [EOL] except SendGridMailTemplate . DoesNotExist as e : [EOL] logger . error ( e ) [EOL] super ( SendGridMail , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def send ( self ) : [EOL] self . save ( ) [EOL] [EOL] @ staticmethod def send_template ( from_email , to_email , data , template_id ) : [EOL] [docstring] [EOL] sg = sendgrid . SendGridAPIClient ( apikey = settings . SENDGRID_API_KEY ) [EOL] if from_email == settings . SERVER_EMAIL : [EOL] from_email = Email ( from_email , name = settings . SERVER_EMAIL_NAME ) [EOL] else : [EOL] from_email = Email ( from_email ) [EOL] [EOL] mail = Mail ( from_email = from_email , to_email = Email ( to_email ) ) [EOL] mail . personalizations [ [number] ] . dynamic_template_data = json . loads ( json . dumps ( data , cls = DjangoJSONEncoder ) ) [EOL] mail . template_id = template_id [EOL] try : [EOL] return sg . client . mail . send . post ( request_body = mail . get ( ) ) [EOL] except HTTPError as e : [EOL] logger . error ( e ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMailTemplate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMailTemplate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMailTemplate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail.Meta]$ 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail.Meta]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail.Meta]$ 0 0 0 0 0 0 $typing.Type[backend.apps.mails.models.SendGridMail.Meta]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Any , List [EOL] import backend [EOL] import typing [EOL] from django . shortcuts import redirect [EOL] from django . urls import reverse [EOL] from rest_framework . viewsets import ModelViewSet [EOL] from rest_framework . decorators import action [EOL] from rest_framework . permissions import IsAdminUser [EOL] from . models import SendGridMail [EOL] from . serializers import SendGridMailSerializer [EOL] [EOL] [EOL] class MailViewSet ( ModelViewSet ) : [EOL] queryset = SendGridMail . objects . all ( ) [EOL] serializer_class = SendGridMailSerializer [EOL] permission_classes = [ IsAdminUser ] [EOL] http_method_names = [ [string] , [string] , [string] ] [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True ) def resend ( self , request , pk = None ) : [EOL] mail = SendGridMail . objects . get ( id = pk ) [EOL] mail . send ( ) [EOL] return redirect ( reverse ( [string] , args = ( mail . case . id , ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class MailsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.mails.apps.MailsConfig]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations [EOL] from django . contrib . postgres . operations import HStoreExtension [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ HStoreExtension ( ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Type , Any , List [EOL] import backend [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . contrib . auth . admin import UserAdmin as BaseUserAdmin [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from apps . users . models import User [EOL] from apps . users . forms import UserChangeForm , UserCreationForm [EOL] [EOL] [EOL] class UserAdmin ( BaseUserAdmin ) : [EOL] form = UserChangeForm [EOL] add_form = UserCreationForm [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] ] [EOL] fieldsets = [ [ _ ( [string] ) , { [string] : [ [string] , [string] , [string] , [string] ] } ] , [ _ ( [string] ) , { [string] : [ [string] , [string] ] } ] , [ _ ( [string] ) , { [string] : [ [string] , [string] , [string] , [string] ] } ] , [ _ ( [string] ) , { [string] : [ [string] , [string] ] } ] , ] [EOL] [comment] [EOL] [comment] [EOL] add_fieldsets = [ [ None , { [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , [string] ] } ] , ] [EOL] search_fields = [ [string] ] [EOL] ordering = [ [string] ] [EOL] readonly_fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def get_search_results ( self , request , queryset , search_term ) : [EOL] [docstring] [EOL] queryset , use_distinct = super ( UserAdmin , self ) . get_search_results ( request , queryset , search_term ) [EOL] if not request . user . is_superuser : [EOL] queryset = queryset . filter ( is_staff = True ) [EOL] return queryset , use_distinct [EOL] [EOL] [EOL] admin . site . register ( User , UserAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import jwt [EOL] import datetime [EOL] [EOL] from rest_framework_jwt . settings import api_settings [EOL] from rest_framework_jwt . utils import jwt_get_secret_key [EOL] [EOL] [EOL] def jwt_payload_handler ( user ) : [EOL] [EOL] payload = { [string] : user . pk , [string] : datetime . datetime . utcnow ( ) + api_settings . JWT_EXPIRATION_DELTA , } [EOL] [EOL] return payload [EOL] [EOL] [EOL] def jwt_encode_handler ( payload ) : [EOL] key = api_settings . JWT_PRIVATE_KEY or jwt_get_secret_key ( payload ) [EOL] return jwt . encode ( payload , key , api_settings . JWT_ALGORITHM , ) . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import jwt [EOL] [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from rest_framework import exceptions [EOL] from rest_framework_jwt . authentication import JSONWebTokenAuthentication [EOL] from rest_framework_jwt . settings import api_settings [EOL] [EOL] from apps . users . models import User [EOL] [EOL] jwt_decode_handler = api_settings . JWT_DECODE_HANDLER [EOL] [EOL] [EOL] class AccountKitUserAuthentication ( JSONWebTokenAuthentication ) : [EOL] www_authenticate_realm = [string] [EOL] [EOL] def authenticate ( self , request ) : [EOL] jwt_value = self . get_jwt_value ( request ) [EOL] if jwt_value is None : [EOL] return None [EOL] [EOL] try : [EOL] payload = jwt_decode_handler ( jwt_value ) [EOL] except jwt . ExpiredSignature : [EOL] msg = _ ( [string] ) [EOL] raise exceptions . AuthenticationFailed ( msg ) [EOL] except jwt . DecodeError : [EOL] msg = _ ( [string] ) [EOL] raise exceptions . AuthenticationFailed ( msg ) [EOL] except jwt . InvalidTokenError : [EOL] raise exceptions . AuthenticationFailed ( ) [EOL] [EOL] user = self . authenticate_credentials ( payload ) [EOL] [EOL] return user , jwt_value [EOL] [EOL] def authenticate_credentials ( self , payload ) : [EOL] user_id = payload . get ( [string] ) [EOL] [EOL] if not user_id : [EOL] msg = _ ( [string] ) [EOL] raise exceptions . AuthenticationFailed ( msg ) [EOL] [EOL] try : [EOL] user = User . objects . get ( id = user_id ) [EOL] except User . DoesNotExist : [EOL] msg = _ ( [string] ) [EOL] raise exceptions . AuthenticationFailed ( msg ) [EOL] [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Type , Any , List [EOL] import backend [EOL] import typing [EOL] import datetime [EOL] from django . http import JsonResponse [EOL] from django . conf import settings [EOL] from rest_framework import viewsets [EOL] from rest_framework . decorators import action [EOL] from rest_framework . permissions import IsAdminUser [EOL] from rest_framework . exceptions import AuthenticationFailed , ValidationError [EOL] [EOL] from firebase_admin import auth [EOL] from config . auth import firebase_app [EOL] [EOL] from apps . users . models import User [EOL] from apps . users . utils import jwt_payload_handler , jwt_encode_handler [EOL] from apps . cases . models import TempFile [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ViewSet ) : [EOL] permission_classes = [ IsAdminUser ] [EOL] http_method_names = [ [string] ] [EOL] [EOL] @ action ( methods = [ [string] ] , detail = False , permission_classes = [ ] ) def token_auth ( self , request ) : [EOL] id_token = request . data . get ( [string] ) [EOL] [EOL] mobile = None [EOL] [EOL] with firebase_app ( ) as app : [EOL] try : [EOL] decoded_token = auth . verify_id_token ( id_token , app = app ) [EOL] uid = decoded_token [ [string] ] [EOL] user = auth . get_user ( uid = uid , app = app ) [EOL] mobile = user . phone_number [EOL] except ( ValueError , auth . InvalidIdTokenError , auth . ExpiredIdTokenError , auth . UserNotFoundError ) as e : [EOL] raise AuthenticationFailed ( str ( e ) ) [EOL] [EOL] if not mobile . startswith ( [string] ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] mobile = mobile . replace ( [string] , [string] ) [EOL] user = User . objects . filter ( mobile = mobile ) . first ( ) [EOL] [EOL] if not user : [EOL] [comment] [EOL] user = User . objects . create_auth0_user ( email = None , mobile = mobile , full_name = [string] ) [EOL] [EOL] temp_files = TempFile . objects . filter ( user = user , upload_time__date = datetime . date . today ( ) ) [EOL] if temp_files . distinct ( [string] ) . count ( ) >= settings . FILE_LIMIT_CASE : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] payload = jwt_payload_handler ( user ) [EOL] jwt = jwt_encode_handler ( payload ) [EOL] [EOL] return JsonResponse ( { [string] : jwt , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.users.apps.UsersConfig]$ 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TransactionTestCase [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import IntegrityError [EOL] from apps . users . models import User [EOL] [EOL] [EOL] class UserModelTestCase ( TransactionTestCase ) : [EOL] def test_create_normal_user ( self ) : [EOL] user = User . objects . create_user ( email = [string] , password = [string] , is_staff = True , is_superuser = True ) [EOL] self . assertTrue ( user . is_staff ) [EOL] self . assertTrue ( user . is_superuser ) [EOL] self . assertTrue ( user . is_active ) [EOL] [EOL] def test_create_auth0_user ( self ) : [EOL] user = User . objects . create_auth0_user ( mobile = [string] , email = None ) [EOL] self . assertTrue ( user . is_active ) [EOL] [EOL] with self . assertRaises ( IntegrityError ) : [EOL] User . objects . create_auth0_user ( mobile = [string] , email = None ) [EOL] [EOL] user = User . objects . create_auth0_user ( mobile = None , email = [string] ) [EOL] self . assertTrue ( user . is_active ) [EOL] [EOL] with self . assertRaises ( IntegrityError ) : [EOL] User . objects . create_auth0_user ( mobile = None , email = [string] ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] User . objects . create_auth0_user ( mobile = None , email = None ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] User . objects . create_auth0_user ( mobile = [string] , is_staff = True , is_superuser = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from datetime import datetime [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from apps . users . utils import jwt_encode_handler [EOL] from apps . users . models import User [EOL] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** kwargs ) : [EOL] email = kwargs [ [string] ] [EOL] password = kwargs [ [string] ] [EOL] [EOL] if not User . objects . filter ( email = email ) . first ( ) : [EOL] superuser = User . objects . create_superuser ( email = email , password = password , full_name = [string] ) [EOL] payload = { [string] : superuser . pk , [string] : datetime ( year = [number] , month = [number] , day = [number] ) , } [EOL] token = jwt_encode_handler ( payload ) [EOL] logger . info ( f""" [string] { email } [string] { password } [string] { token } [string] """ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $logging.Logger$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class ArrangesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.arranges.apps.ArrangesConfig]$ 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import coreapi [EOL] import coreschema [EOL] [EOL] from rest_framework . schemas import ManualSchema [EOL] [EOL] vuetable_schema = ManualSchema ( fields = [ coreapi . Field ( name = [string] , location = [string] , schema = coreschema . String ( title = [string] , description = [string] , default = [string] , ) , ) , coreapi . Field ( name = [string] , location = [string] , schema = coreschema . String ( title = [string] , description = [string] , default = [string] , ) , ) , coreapi . Field ( name = [string] , location = [string] , schema = coreschema . String ( title = [string] , description = [string] , default = [string] , ) , ) , coreapi . Field ( name = [string] , location = [string] , schema = coreschema . Number ( title = [string] , description = [string] , default = [number] , ) , ) , coreapi . Field ( name = [string] , location = [string] , schema = coreschema . Number ( title = [string] , description = [string] , default = [number] , ) , ) , ] , description = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] import json [EOL] from django . conf import settings [EOL] from slackclient import SlackClient [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def list_channels ( ) : [EOL] [docstring] [EOL] token = settings . SLACK_BOT_USER_TOKEN [EOL] if not token : [EOL] return { } [EOL] sc = SlackClient ( token ) [EOL] channels = sc . api_call ( [string] ) [EOL] [comment] [EOL] if isinstance ( channels , str ) : [EOL] channels = json . loads ( channels ) [EOL] return channels [EOL] [EOL] [EOL] def new_case_notify ( case , channels = [ ] , topic = [string] ) : [EOL] [docstring] [EOL] [EOL] context = f""" [string] { case . title } [string] { case . content } [string] { case . admin_absolute_url } [string] """ [EOL] token = settings . SLACK_BOT_USER_TOKEN [EOL] if token : [EOL] sc = SlackClient ( token ) [EOL] channels = channels or list_channels ( ) [EOL] for channel in channels [ [string] ] : [EOL] if channel [ [string] ] [ [string] ] == topic : [EOL] sc . api_call ( [string] , channel = channel [ [string] ] , text = context , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class CasesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.cases.apps.CasesConfig]$ 0 0 0 0 0 0
from typing import Type , Any [EOL] import backend [EOL] import typing [EOL] from django . utils . encoding import force_text [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . db . models import Q [EOL] from rest_framework . filters import BaseFilterBackend [EOL] from rest_framework . compat import ( coreapi , coreschema ) [EOL] [EOL] [EOL] class ExcludeIDFilter ( BaseFilterBackend ) : [EOL] param = [string] [EOL] title = _ ( [string] ) [EOL] description = _ ( [string] ) [EOL] [EOL] def filter_queryset ( self , request , queryset , view ) : [EOL] terms = self . get_terms ( request ) [EOL] if not terms : [EOL] return queryset [EOL] return queryset . exclude ( id__in = terms ) [EOL] [EOL] def get_terms ( self , request ) : [EOL] [docstring] [EOL] params = request . query_params . get ( self . param , [string] ) [EOL] return params . replace ( [string] , [string] ) . split ( ) [EOL] [EOL] def get_schema_fields ( self , view ) : [EOL] assert coreapi is not None , [string] [EOL] assert coreschema is not None , [string] [EOL] return [ coreapi . Field ( name = self . param , required = False , location = [string] , schema = coreschema . String ( title = force_text ( self . title ) , description = force_text ( self . description ) ) ) ] [EOL] [EOL] [EOL] class CaseTypeFilter ( BaseFilterBackend ) : [EOL] param = [string] [EOL] title = _ ( [string] ) [EOL] description = _ ( [string] ) [EOL] [EOL] def filter_queryset ( self , request , queryset , view ) : [EOL] terms = self . get_terms ( request ) [EOL] if not terms : [EOL] return queryset [EOL] if terms . isnumeric ( ) : [EOL] return queryset . filter ( type__id = terms ) [EOL] return queryset . filter ( type__name = terms ) [EOL] [EOL] def get_terms ( self , request ) : [EOL] [docstring] [EOL] param = request . query_params . get ( self . param , [string] ) [EOL] return param . strip ( ) [EOL] [EOL] def get_schema_fields ( self , view ) : [EOL] assert coreapi is not None , [string] [EOL] assert coreschema is not None , [string] [EOL] return [ coreapi . Field ( name = self . param , required = False , location = [string] , schema = coreschema . String ( title = force_text ( self . title ) , description = force_text ( self . description ) ) ) ] [EOL] [EOL] [EOL] class CaseRegionFilter ( BaseFilterBackend ) : [EOL] param = [string] [EOL] title = _ ( [string] ) [EOL] description = _ ( [string] ) [EOL] [EOL] def filter_queryset ( self , request , queryset , view ) : [EOL] terms = self . get_terms ( request ) [EOL] if not terms : [EOL] return queryset [EOL] if terms . isnumeric ( ) : [EOL] return queryset . filter ( region__id = terms ) [EOL] return queryset . filter ( region__name = terms ) [EOL] [EOL] def get_terms ( self , request ) : [EOL] [docstring] [EOL] param = request . query_params . get ( self . param , [string] ) [EOL] return param . strip ( ) [EOL] [EOL] def get_schema_fields ( self , view ) : [EOL] assert coreapi is not None , [string] [EOL] assert coreschema is not None , [string] [EOL] return [ coreapi . Field ( name = self . param , required = False , location = [string] , schema = coreschema . String ( title = force_text ( self . title ) , description = force_text ( self . description ) ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.cases.filters.ExcludeIDFilter]$ 0 0 0 0 0 0 $typing.Type[backend.apps.cases.filters.ExcludeIDFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.cases.filters.CaseTypeFilter]$ 0 0 0 0 0 0 $typing.Type[backend.apps.cases.filters.CaseTypeFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.cases.filters.CaseRegionFilter]$ 0 0 0 0 0 0 $typing.Type[backend.apps.cases.filters.CaseRegionFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Counter , Pattern , List [EOL] import collections [EOL] import typing [EOL] import time [EOL] import re [EOL] import jieba [EOL] from itertools import accumulate [EOL] from collections import Counter [EOL] [EOL] from django . db . models import Count [EOL] from django . db . models . functions import TruncDate , TruncYear [EOL] from django . conf import settings [EOL] [EOL] from apps . cases . models import Case , State , Region [EOL] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def to_unix ( dt ) : [EOL] return int ( time . mktime ( dt . timetuple ( ) ) * [number] ) [EOL] [EOL] [EOL] def get_case_state_pie_data ( ) : [EOL] total = Case . objects . count ( ) [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] data = [ { [string] : title , [string] : qs . get ( state = state ) [ [string] ] / total } for state , title in State . CHOICES ] [EOL] if data : [EOL] data = sorted ( data , key = lambda x : x [ [string] ] , reverse = True ) [EOL] data [ [number] ] [ [string] ] = True [EOL] data [ [number] ] [ [string] ] = True [EOL] return data [EOL] [EOL] [EOL] def get_case_region_pie_data ( ) : [EOL] total = Case . objects . count ( ) [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] data = [ { [string] : item [ [string] ] , [string] : item [ [string] ] / total } for item in qs ] [EOL] if data : [EOL] data = sorted ( data , key = lambda x : x [ [string] ] , reverse = True ) [EOL] data [ [number] ] [ [string] ] = True [EOL] data [ [number] ] [ [string] ] = True [EOL] return data [EOL] [EOL] [EOL] def get_case_type_pie_data ( ) : [EOL] total = Case . objects . count ( ) [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] data = [ { [string] : item [ [string] ] , [string] : item [ [string] ] / total } for item in qs ] [EOL] if data : [EOL] data = sorted ( data , key = lambda x : x [ [string] ] , reverse = True ) [EOL] data [ [number] ] [ [string] ] = True [EOL] data [ [number] ] [ [string] ] = True [EOL] return data [EOL] [EOL] [EOL] def get_case_state_packed_bubble_data ( ) : [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] return [ { [string] : title , [string] : [ { [string] : title , [string] : qs . get ( state = state ) [ [string] ] } ] } for state , title in State . CHOICES ] [EOL] [EOL] [EOL] def get_case_region_packed_bubble_data ( ) : [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] return [ { [string] : item [ [string] ] , [string] : [ { [string] : item [ [string] ] , [string] : item [ [string] ] } ] } for item in qs ] [EOL] [EOL] [EOL] def get_case_type_packed_bubble_data ( ) : [EOL] qs = Case . objects . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) [EOL] return [ { [string] : item [ [string] ] , [string] : [ { [string] : item [ [string] ] , [string] : item [ [string] ] } ] } for item in qs ] [EOL] [EOL] [EOL] def get_case_line_data ( accumulative = True ) : [EOL] qs = Case . objects . annotate ( year = TruncYear ( [string] ) , date = TruncDate ( [string] ) , ) . values ( [string] ) . annotate ( count = Count ( [string] ) , ) . order_by ( [string] ) [EOL] dates = [ ] [EOL] counts = [ ] [EOL] for item in qs : [EOL] dates . append ( to_unix ( item [ [string] ] ) ) [EOL] counts . append ( item [ [string] ] ) [EOL] if accumulative : [EOL] counts = list ( accumulate ( counts ) ) [EOL] data = [ list ( t ) for t in zip ( dates , counts ) ] [EOL] return [ { [string] : [string] , [string] : data } ] [EOL] [EOL] [EOL] def get_case_type_line_data ( accumulative = True ) : [EOL] qs = Case . objects . annotate ( year = TruncYear ( [string] ) , date = TruncDate ( [string] ) , ) . values ( [string] , [string] ) . annotate ( count = Count ( [string] ) , ) . order_by ( [string] ) [EOL] [EOL] results = [ ] [EOL] for name in set ( qs . values_list ( [string] , flat = True ) ) : [EOL] dates = [ ] [EOL] counts = [ ] [EOL] for item in qs . filter ( type__name = name ) : [EOL] dates . append ( to_unix ( item [ [string] ] ) ) [EOL] counts . append ( item [ [string] ] ) [EOL] if accumulative : [EOL] counts = list ( accumulate ( counts ) ) [EOL] results . append ( { [string] : name , [string] : [ list ( t ) for t in zip ( dates , counts ) ] } ) [EOL] [EOL] return results [EOL] [EOL] [EOL] def get_case_region_line_data ( accumulative = True ) : [EOL] qs = Case . objects . annotate ( year = TruncYear ( [string] ) , date = TruncDate ( [string] ) , ) . values ( [string] , [string] ) . annotate ( count = Count ( [string] ) , ) . order_by ( [string] ) [EOL] [EOL] results = [ ] [EOL] for name in set ( qs . values_list ( [string] , flat = True ) ) : [EOL] dates = [ ] [EOL] counts = [ ] [EOL] for item in qs . filter ( region__name = name ) : [EOL] dates . append ( to_unix ( item [ [string] ] ) ) [EOL] counts . append ( item [ [string] ] ) [EOL] if accumulative : [EOL] counts = list ( accumulate ( counts ) ) [EOL] results . append ( { [string] : name , [string] : [ list ( t ) for t in zip ( dates , counts ) ] } ) [EOL] [EOL] return results [EOL] [EOL] [EOL] def get_case_content_wordcloud_data ( ) : [EOL] content = [string] [EOL] for case in Case . objects . all ( ) : [EOL] content += case . first_history . content [EOL] content += case . first_history . title [EOL] [EOL] jieba . set_dictionary ( str ( settings . ROOT_DIR ( [string] ) ) ) [EOL] stop = [ ] [EOL] with open ( str ( settings . ROOT_DIR ( [string] ) ) , [string] , encoding = [string] ) as file : [EOL] for data in file . readlines ( ) : [EOL] data = data . strip ( ) [EOL] stop . append ( data ) [EOL] [EOL] pattern = re . compile ( [string] ) [EOL] content = pattern . sub ( [string] , content ) [EOL] [EOL] words_2 = [ word for word in jieba . cut_for_search ( content ) if len ( word ) == [number] and word not in stop ] [EOL] counter_2 = Counter ( words_2 ) [EOL] [EOL] words_3 = [ word for word in jieba . cut_for_search ( content ) if len ( word ) > [number] and word not in stop ] [EOL] counter_3 = Counter ( words_3 ) [EOL] [EOL] data = [ { [string] : word , [string] : weight * [number] } for word , weight in counter_2 . most_common ( [number] ) ] + [ { [string] : word , [string] : weight * [number] } for word , weight in counter_3 . most_common ( [number] ) ] [EOL] [EOL] return data [EOL] [EOL] [EOL] def get_region_case_count_and_top_type_data ( ) : [EOL] results = [ ] [EOL] for region in Region . objects . all ( ) : [EOL] qs = ( Case . objects . filter ( region = region ) . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) . order_by ( [string] ) ) [EOL] if qs : [EOL] results . append ( { [string] : region . name , [string] : qs . first ( ) [ [string] ] , [string] : sum ( qs . values_list ( [string] , flat = True ) ) } ) [EOL] qs_all = ( Case . objects . all ( ) . values ( [string] ) . order_by ( ) . annotate ( count = Count ( [string] ) ) . order_by ( [string] ) ) [EOL] if qs_all : [EOL] results . append ( { [string] : [string] , [string] : qs_all . first ( ) [ [string] ] , [string] : sum ( qs_all . values_list ( [string] , flat = True ) ) } ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str
from typing import Any [EOL] import typing [EOL] from django . test import TestCase , tag [EOL] from django . utils import timezone [EOL] from django . core . management import call_command [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from django_fsm import TransitionNotAllowed [EOL] [EOL] from apps . cases . models import Case , CaseHistory [EOL] from apps . arranges . models import Arrange [EOL] [EOL] [EOL] class CaseModelTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] [EOL] self . case = Case . objects . first ( ) [EOL] self . case_history = CaseHistory . objects . first ( ) [EOL] [EOL] def test_manager_update ( self ) : [EOL] Case . objects . create ( ** self . case . to_dict ( ) ) [EOL] Case . objects . create ( ** self . case . to_dict ( ) ) [EOL] [EOL] self . assertEqual ( Case . objects . count ( ) , [number] ) [EOL] new_title = [string] [EOL] new_username = [string] [EOL] Case . objects . all ( ) . update ( title = new_title , username = new_username ) [EOL] [EOL] self . assertEqual ( Case . objects . filter ( title = new_title ) . count ( ) , [number] ) [EOL] self . assertEqual ( Case . objects . filter ( username = new_username ) . count ( ) , [number] ) [EOL] [EOL] [EOL] class CaseCrudTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] [EOL] self . case = Case . objects . filter ( state = [string] ) . first ( ) [EOL] self . case_history = CaseHistory . objects . first ( ) [EOL] [EOL] def test_set_up ( self ) : [EOL] self . assertTrue ( Case . objects . count ( ) > [number] ) [EOL] self . assertTrue ( CaseHistory . objects . count ( ) > [number] ) [EOL] [EOL] def test_transition ( self ) : [EOL] qs = CaseHistory . objects . filter ( case = self . case ) [EOL] [EOL] self . case . save ( ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] [EOL] with self . assertRaises ( TransitionNotAllowed ) : [EOL] self . case . arrange ( ) [EOL] [EOL] self . case . username = [string] [EOL] self . case . save ( ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] self . case . arrange ( ) [EOL] self . case . save ( ) [EOL] self . assertIsNotNone ( self . case . open_time ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] [EOL] with self . assertRaises ( TransitionNotAllowed ) : [EOL] self . case . close ( ) [EOL] [EOL] arrange = Arrange . objects . create ( case = self . case , title = [string] , content = [string] , order = [number] ) [EOL] [EOL] with self . assertRaises ( TransitionNotAllowed ) : [EOL] self . case . close ( ) [EOL] [EOL] with self . assertRaises ( TransitionNotAllowed ) : [EOL] arrange . publish ( ) [EOL] [EOL] arrange . arrange_time = timezone . now ( ) [EOL] arrange . publish ( ) [EOL] arrange . save ( ) [EOL] [EOL] self . case . close ( ) [EOL] self . case . save ( ) [EOL] self . assertIsNotNone ( self . case . close_time ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] self . case . save ( ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] [EOL] def test_case_update ( self ) : [EOL] [comment] [EOL] title = self . case . title [EOL] self . case . title = [string] [EOL] self . case . save ( ) [EOL] qs = CaseHistory . objects . filter ( case = self . case ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] [EOL] [comment] [EOL] Case . objects . filter ( id = self . case . id ) . update ( title = [string] ) [EOL] qs = CaseHistory . objects . filter ( case = self . case ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL] [EOL] self . assertEqual ( self . case . first_history . title , title ) [EOL] [EOL] def test_case_delete ( self ) : [EOL] self . case . delete ( ) [EOL] qs = CaseHistory . objects . filter ( case = self . case ) [EOL] self . assertEqual ( qs . count ( ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , Tuple , Type , Dict , Any , Pattern , List [EOL] import backend [EOL] import typing [EOL] import datetime [EOL] import re [EOL] import calendar [EOL] from django . utils import timezone [EOL] from django . contrib import admin [EOL] from django . forms import ValidationError [EOL] from django . contrib . admin import ModelAdmin [EOL] from django . forms import TextInput , ModelForm [EOL] from django . db . models import Q [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] import tagulous [EOL] from suit_ckeditor . widgets import CKEditorWidget [EOL] from fsm_admin . mixins import FSMTransitionMixin [EOL] from date_range_filter import DateRangeFilter [EOL] from suit . widgets import ( EnclosedInput , AutosizedTextarea , SuitSplitDateTimeWidget , ) [EOL] from tagulous . forms import TagWidget [EOL] [EOL] from apps . cases . models import Case , CaseHistory [EOL] from apps . arranges . models import Arrange [EOL] from apps . files . models import CaseFile [EOL] [EOL] [EOL] class ArrangeInlineForm ( ModelForm ) : [EOL] class Meta : [EOL] widgets = { [string] : CKEditorWidget ( attrs = { [string] : [string] } ) , [string] : SuitSplitDateTimeWidget ( ) , } [EOL] [EOL] def clean ( self ) : [EOL] case_state = self . instance . case . state [EOL] new_state = self . cleaned_data [ [string] ] [EOL] arrange_time = self . cleaned_data . get ( [string] , None ) [EOL] [EOL] if new_state == [string] : [EOL] if case_state == [string] : [EOL] raise ValidationError ( f' [string] ' ) [EOL] if case_state == [string] and self . instance . state == [string] : [EOL] if any ( field in self . changed_data for field in [ [string] , [string] ] ) : [EOL] raise ValidationError ( [string] ) [EOL] if arrange_time is None : [EOL] raise ValidationError ( f' [string] ' ) [EOL] else : [EOL] self . instance . arrange_time = arrange_time [EOL] [EOL] if self . instance . pk is None and case_state == [string] : [EOL] raise ValidationError ( f' [string] ' ) [EOL] [EOL] transition = None [EOL] for ts in self . instance . get_available_state_transitions ( ) : [EOL] if new_state == ts . target : [EOL] transition = ts [EOL] [EOL] if not transition and self . instance . state != new_state : [EOL] raise ValidationError ( f' [string] { new_state }' ) [EOL] [EOL] if transition : [EOL] try : [EOL] transition . method ( self . instance ) [EOL] except Exception as e : [EOL] raise ValidationError ( e ) [EOL] [EOL] [EOL] class ArrangeInline ( FSMTransitionMixin , admin . StackedInline ) : [EOL] form = ArrangeInlineForm [EOL] model = Arrange [EOL] extra = [number] [EOL] verbose_name_plural = _ ( [string] ) [EOL] suit_classes = [string] [EOL] [EOL] def get_fields ( self , request , obj = None ) : [EOL] fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL] if not request . user . has_perm ( [string] ) : [EOL] fields [ [number] ] = [string] [EOL] return fields [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] readonly_fields = [ [string] ] [EOL] if not request . user . has_perm ( [string] ) : [EOL] readonly_fields . append ( [string] ) [EOL] return readonly_fields [EOL] [EOL] [EOL] class CaseFileInline ( admin . TabularInline ) : [EOL] model = CaseFile [EOL] verbose_name_plural = _ ( [string] ) [EOL] suit_classes = [string] [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] readonly_fields = ( [string] , [string] ) [EOL] extra = [number] [EOL] [EOL] [EOL] class CaseForm ( ModelForm ) : [EOL] class Meta : [EOL] widgets = { [string] : TextInput ( attrs = { [string] : [string] } ) , [string] : TextInput ( attrs = { [string] : [string] } ) , [string] : AutosizedTextarea ( attrs = { [string] : [string] } ) , [string] : TextInput ( attrs = { [string] : [string] } ) , [string] : EnclosedInput ( append = [string] , attrs = { [string] : [string] } ) , [string] : TextInput ( attrs = { [string] : [string] } ) , [string] : EnclosedInput ( append = [string] , attrs = { [string] : [string] } ) , [string] : AutosizedTextarea ( attrs = { [string] : [string] } ) , [string] : AutosizedTextarea ( attrs = { [string] : [string] } ) , [string] : TagWidget ( attrs = { [string] : [string] } ) , } [EOL] help_texts = { [string] : [string] , } [EOL] [EOL] def clean_mobile ( self ) : [EOL] mobile = self . cleaned_data [ [string] ] [EOL] if mobile : [EOL] pattern = re . compile ( [string] ) [EOL] if not re . match ( pattern , mobile ) : [EOL] raise ValidationError ( [string] ) [EOL] return mobile [EOL] [EOL] [EOL] class CaseAdmin ( FSMTransitionMixin , ModelAdmin ) : [EOL] form = CaseForm [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] , [string] , ( [string] , DateRangeFilter ) , ( [string] , DateRangeFilter ) , ) [EOL] list_select_related = True [EOL] date_hierarchy = [string] [EOL] date_hierarchy_drilldown = False [EOL] readonly_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] fieldsets = [ ( [string] , { [string] : ( [string] , ) , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] ] , } ) , ( [string] , { [string] : ( [string] , ) , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] , [string] ] , } ) , ( [string] , { [string] : ( [string] , ) , [string] : [string] , [string] : [ [string] , [string] , [string] , [string] ] , } ) , ( [string] , { [string] : ( [string] , ) , [string] : [string] , [string] : [ [string] , [string] , [string] ] , } ) , ] [EOL] [EOL] inlines = ( ArrangeInline , CaseFileInline ) [EOL] [EOL] suit_form_includes = ( ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ) [EOL] [EOL] class Media : [EOL] [docstring] [EOL] js = [ [string] ] [EOL] [EOL] def get_form ( self , request , obj = None , ** kwargs ) : [EOL] self . _obj = obj [EOL] return super ( CaseAdmin , self ) . get_form ( request , obj , ** kwargs ) [EOL] [EOL] @ property def suit_form_tabs ( self ) : [EOL] obj = self . _obj [EOL] tabs = [ ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ] [EOL] [EOL] if obj and obj . state in [ [string] , [string] ] : [EOL] tabs . append ( ( [string] , _ ( [string] ) ) ) [EOL] [EOL] if obj and obj . sendgrid_mails . count ( ) > [number] : [EOL] tabs . append ( ( [string] , _ ( [string] ) ) ) [EOL] [EOL] return tabs [EOL] [EOL] def save_model ( self , request , obj , form , change ) : [EOL] [docstring] [EOL] obj . user = request . user [EOL] super ( ) . save_model ( request , obj , form , change ) [EOL] [EOL] def get_search_results ( self , request , queryset , search_term ) : [EOL] [docstring] [EOL] queryset , use_distinct = super ( CaseAdmin , self ) . get_search_results ( request , queryset , search_term ) [EOL] [EOL] if search_term : [EOL] arranges = Arrange . objects . filter ( Q ( title__icontains = search_term ) | Q ( content__icontains = search_term ) , ) [EOL] arranges_ids = arranges . values_list ( [string] , flat = True ) [EOL] histories = CaseHistory . objects . filter ( Q ( location__icontains = search_term ) | Q ( content__icontains = search_term ) | Q ( title__icontains = search_term ) | Q ( username__icontains = search_term ) | Q ( mobile__icontains = search_term ) | Q ( email__icontains = search_term ) , ) [EOL] histories_ids = histories . values_list ( [string] , flat = True ) [EOL] queryset = queryset . filter ( Q ( arranges__id__in = arranges_ids ) | Q ( case_histories__id__in = histories_ids ) | Q ( number__icontains = search_term ) | Q ( disapprove_info__icontains = search_term ) | Q ( note__icontains = search_term ) | Q ( tags__name__icontains = search_term ) , ) . distinct ( ) [EOL] [EOL] return queryset , use_distinct [EOL] [EOL] def get_date_hierarchy_drilldown ( self , year_lookup , month_lookup ) : [EOL] [docstring] [EOL] [EOL] today = timezone . now ( ) . date ( ) [EOL] [EOL] if year_lookup is None and month_lookup is None : [EOL] [comment] [EOL] return ( datetime . date ( y , [number] , [number] ) for y in range ( today . year - [number] , today . year + [number] ) ) [EOL] [EOL] elif year_lookup is not None and month_lookup is None : [EOL] [comment] [EOL] this_month = today . replace ( day = [number] ) [EOL] return ( month for month in ( datetime . date ( int ( year_lookup ) , month , [number] ) for month in range ( [number] , [number] ) ) if month <= this_month ) [EOL] [EOL] elif year_lookup is not None and month_lookup is not None : [EOL] [comment] [EOL] days_in_month = calendar . monthrange ( year_lookup , month_lookup ) [ [number] ] [EOL] return ( day for day in ( datetime . date ( year_lookup , month_lookup , i + [number] ) for i in range ( days_in_month ) ) if day <= today ) [EOL] [EOL] [EOL] admin . site . register ( Case , CaseAdmin ) [EOL] tagulous . admin . register ( Case . tags . tag_model ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str,typing.Tuple[builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[backend.apps.cases.admin.ArrangeInline],typing.Type[backend.apps.cases.admin.CaseFileInline]]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] import tagulous . models . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = tagulous . models . fields . TagField ( _set_tag_meta = True , blank = True , help_text = [string] , to = [string] , verbose_name = [string] , verbose_name_plural = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import pickle [EOL] from django . core . management . base import BaseCommand [EOL] from django_redis import get_redis_connection [EOL] [EOL] from apps . cases import insights [EOL] [EOL] [EOL] cache = get_redis_connection ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , ** options ) : [EOL] for data_func_name in insights . __all__ : [EOL] func = getattr ( insights , data_func_name ) [EOL] data = pickle . dumps ( func ( ) ) [EOL] cache . set ( func . __name__ , data ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List [EOL] import backend [EOL] import typing [EOL] from rest_framework import viewsets [EOL] from rest_framework . permissions import IsAuthenticated [EOL] [EOL] from apps . files import models , serializers [EOL] from apps . users . authentication import AccountKitUserAuthentication [EOL] [EOL] [EOL] class TempFileViewSet ( viewsets . ModelViewSet ) : [EOL] serializer_class = serializers . TempFileSerializer [EOL] queryset = models . TempFile . objects . all ( ) [EOL] permission_classes = [ IsAuthenticated ] [EOL] authentication_classes = [ AccountKitUserAuthentication ] [EOL] http_method_names = [ [string] , [string] ] [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] user = self . request . user [EOL] serializer . validated_data [ [string] ] = user [EOL] serializer . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import uuid [EOL] import typing [EOL] import uuid [EOL] from django . test import TestCase , tag [EOL] from django . core . files . uploadedfile import SimpleUploadedFile [EOL] from django . core . management import call_command [EOL] from django . conf import settings [EOL] from rest_framework . exceptions import ValidationError [EOL] from apps . cases . models import Case [EOL] from apps . users . models import User [EOL] from apps . files import models [EOL] from . storages import TempStorage [EOL] [EOL] ROOT_DIR = settings . ROOT_DIR [EOL] [EOL] [EOL] class BaseTestCase ( TestCase ) : [EOL] @ classmethod def setUpClass ( cls ) : [EOL] super ( ) . setUpClass ( ) [EOL] cls . user = User . objects . create_user ( email = [string] , password = [string] , is_staff = True , is_superuser = True ) [EOL] [EOL] [EOL] @ tag ( [string] ) class TempFileTestCase ( BaseTestCase ) : [EOL] [EOL] def upload ( self , file_name , case_uuid ) : [EOL] file = SimpleUploadedFile ( file_name , open ( ROOT_DIR ( [string] ) , [string] ) . read ( ) ) [EOL] return models . TempFile . objects . create ( user = self . user , case_uuid = case_uuid , file = file , ) [EOL] [EOL] def test_delete ( self ) : [EOL] file = self . upload ( [string] , uuid . uuid4 ( ) ) [EOL] file_name = file . file . name [EOL] self . assertTrue ( TempStorage ( ) . exists ( name = file_name ) ) [EOL] file . delete ( ) [EOL] self . assertFalse ( TempStorage ( ) . exists ( name = file_name ) ) [EOL] [EOL] def test_duplicate_raise ( self ) : [EOL] file1 = self . upload ( [string] , uuid . uuid4 ( ) ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] self . upload ( [string] , file1 . case_uuid ) [EOL] [EOL] [EOL] @ tag ( [string] ) class CaseFileTestCase ( TempFileTestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] super ( ) . setUpClass ( ) [EOL] [EOL] [comment] [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] call_command ( [string] , [string] , verbosity = [number] ) [EOL] [EOL] cls . case = Case . objects . first ( ) [EOL] [EOL] def test ( self ) : [EOL] case_uuid = uuid . uuid4 ( ) [EOL] temp_file1 = self . upload ( [string] , case_uuid ) [EOL] temp_file2 = self . upload ( [string] , case_uuid ) [EOL] case_copy = { ** self . case . to_dict ( ) , [string] : case_uuid } [EOL] case = Case . objects . create ( ** case_copy ) [EOL] self . assertEqual ( case . casefiles . count ( ) , [number] ) [EOL] self . assertTrue ( case . casefiles . filter ( file_name = temp_file1 . file_name ) . exists ( ) ) [EOL] self . assertTrue ( case . casefiles . filter ( file_name = temp_file2 . file_name ) . exists ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import backend [EOL] import typing [EOL] from rest_framework import serializers [EOL] from apps . files import models [EOL] [EOL] [EOL] class TempFileSerializer ( serializers . ModelSerializer ) : [EOL] url = serializers . SerializerMethodField ( read_only = True ) [EOL] [EOL] def get_url ( self , obj ) : [EOL] return obj . url [EOL] [EOL] class Meta : [EOL] model = models . TempFile [EOL] exclude = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.serializers.TempFileSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.serializers.TempFileSerializer.Meta]$ 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class FilesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.files.apps.FilesConfig]$ 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import django . core . files . storage [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . FileField ( storage = django . core . files . storage . FileSystemStorage ( base_url = [string] , location = [string] ) , upload_to = [string] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . FileField ( storage = django . core . files . storage . FileSystemStorage ( base_url = [string] , location = [string] ) , upload_to = [string] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . conf import settings [EOL] from google . oauth2 import service_account [EOL] from storages . backends . gcloud import GoogleCloudStorage [EOL] [EOL] [EOL] class CaseStorage ( GoogleCloudStorage ) : [EOL] project_id = settings . GS_PROJECT_ID [EOL] credentials = service_account . Credentials . from_service_account_file ( settings . DEFAULT_SA_PATH ) [EOL] bucket_name = settings . GS_CASE_BUCKET [EOL] auto_create_bucket = True [EOL] [EOL] [EOL] class TempStorage ( GoogleCloudStorage ) : [EOL] project_id = settings . GS_PROJECT_ID [EOL] credentials = service_account . Credentials . from_service_account_file ( settings . DEFAULT_SA_PATH ) [EOL] bucket_name = settings . GS_TEMP_BUCKET [EOL] auto_create_bucket = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.CaseStorage]$ 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.CaseStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.CaseStorage]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.TempStorage]$ 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.TempStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.files.storages.gcloud.TempStorage]$ 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Type , Tuple [EOL] import backend [EOL] import typing [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . db . models import ( Model , CharField , DateTimeField , BooleanField , PositiveIntegerField , ) [EOL] [EOL] [EOL] class MarqueeMessage ( Model ) : [EOL] [docstring] [EOL] message = CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] display = BooleanField ( default = True , verbose_name = _ ( [string] ) ) [EOL] update_time = DateTimeField ( auto_now = True , null = True , blank = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] order = PositiveIntegerField ( null = True , blank = True , verbose_name = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name = _ ( [string] ) [EOL] verbose_name_plural = _ ( [string] ) [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage.Meta]$ 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage.Meta]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import backend [EOL] import typing [EOL] from rest_framework import serializers [EOL] from . models import MarqueeMessage [EOL] [EOL] [EOL] class MarqueeMessageSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = MarqueeMessage [EOL] fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.models.MarqueeMessage]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . apps import AppConfig [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class MarqueesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.marquees.apps.MarqueesConfig]$ 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List [EOL] import backend [EOL] import typing [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . decorators . cache import cache_page [EOL] [EOL] from rest_framework . viewsets import ReadOnlyModelViewSet [EOL] from rest_framework . permissions import AllowAny [EOL] from . serializers import MarqueeMessageSerializer [EOL] from . models import MarqueeMessage [EOL] [EOL] [EOL] class MarqueeMessageViewSet ( ReadOnlyModelViewSet ) : [EOL] queryset = MarqueeMessage . objects . all ( ) [EOL] serializer_class = MarqueeMessageSerializer [EOL] permission_classes = [ AllowAny ] [EOL] http_method_names = [ [string] ] [EOL] [EOL] @ method_decorator ( cache_page ( [number] * [number] ) ) def dispatch ( self , request , * args , ** kwargs ) : [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import backend [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . forms import TextInput , ModelForm [EOL] from suit . admin import SortableModelAdmin [EOL] from . models import MarqueeMessage [EOL] [EOL] [EOL] class MarqueeMessageForm ( ModelForm ) : [EOL] class Meta : [EOL] widgets = { [string] : TextInput ( attrs = { [string] : [string] } ) , } [EOL] [EOL] [EOL] class MarqueeMessageAdmin ( SortableModelAdmin ) : [EOL] form = MarqueeMessageForm [EOL] sortable = [string] [EOL] list_editable = ( [string] , [string] ) [EOL] list_display = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] admin . site . register ( MarqueeMessage , MarqueeMessageAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.marquees.admin.MarqueeMessageForm]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0