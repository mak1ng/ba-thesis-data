from typing import Dict , Type , List , Any [EOL] import typing [EOL] import main [EOL] import urllib [EOL] import flask [EOL] [docstring] [EOL] [EOL] from flask import Flask , request , jsonify , redirect , render_template , url_for , session [EOL] from APIs import Google_Places_Api , config , Yelp_API [EOL] from flask_mongoengine import MongoEngine , Document [EOL] from flask_wtf import FlaskForm [EOL] from flask_wtf . csrf import CSRFProtect [EOL] from wtforms import StringField , PasswordField [EOL] from wtforms . validators import Email , Length , InputRequired [EOL] from werkzeug . security import generate_password_hash , check_password_hash [EOL] from flask_login import LoginManager , UserMixin , login_user , login_required , logout_user , current_user [EOL] from flask_oauth import OAuth [EOL] from urllib . request import urlopen [EOL] from urllib import request as URLLib_request [EOL] from urllib import error [EOL] [EOL] import json [EOL] import pymongo [EOL] import pymongo [EOL] app = Flask ( __name__ ) [EOL] [EOL] csrf = CSRFProtect ( ) [EOL] [EOL] csrf . init_app ( app ) [EOL] [EOL] app . config [ [string] ] = { [string] : [string] , [string] : config . DB_URL } [EOL] [EOL] db = MongoEngine ( app ) [EOL] app . config [ [string] ] = [string] [EOL] login_manager = LoginManager ( ) [EOL] login_manager . init_app ( app ) [EOL] login_manager . login_view = [string] [EOL] [EOL] class User ( UserMixin , db . Document ) : [EOL] meta = { [string] : [string] } [EOL] username = db . StringField ( ) [EOL] name = db . StringField ( ) [EOL] email = db . StringField ( max_length = [number] ) [EOL] password = db . StringField ( ) [EOL] [EOL] class Cache ( db . Document ) : [EOL] meta = { [string] : [string] } [EOL] all_reviews = db . StringField ( ) [EOL] name = db . StringField ( ) [EOL] [EOL] [EOL] @ login_manager . user_loader def load_user ( user_id ) : [EOL] return User . objects ( pk = user_id ) . first ( ) [EOL] [EOL] class RegForm ( FlaskForm ) : [EOL] username = StringField ( [string] , validators = [ InputRequired ( ) , Length ( max = [number] ) ] ) [EOL] name = StringField ( [string] , validators = [ InputRequired ( ) , Length ( max = [number] ) ] ) [EOL] email = StringField ( [string] , validators = [ InputRequired ( ) , Email ( message = [string] ) , Length ( max = [number] ) ] ) [EOL] password = PasswordField ( [string] , validators = [ InputRequired ( ) , Length ( min = [number] , max = [number] ) ] ) [EOL] [EOL] class LogInForm ( FlaskForm ) : [EOL] username = StringField ( [string] , validators = [ InputRequired ( ) , Length ( max = [number] ) ] ) [EOL] password = PasswordField ( [string] , validators = [ InputRequired ( ) , Length ( min = [number] , max = [number] ) ] ) [EOL] [EOL] class RequestForm ( FlaskForm ) : [EOL] area = StringField ( [string] , validators = [ InputRequired ( ) , Length ( max = [number] ) ] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] oauth = OAuth ( ) [EOL] GOOGLE_CLIENT_ID = config . Google_Client_ID [EOL] GOOGLE_CLIENT_SECRET = config . Google_Client_Secret [EOL] REDIRECT_URI = [string] [EOL] SECRET_KEY = [string] [EOL] google = oauth . remote_app ( [string] , base_url = [string] , authorize_url = [string] , request_token_url = None , request_token_params = { [string] : [string] , [string] : [string] } , access_token_url = [string] , access_token_method = [string] , access_token_params = { [string] : [string] } , consumer_key = GOOGLE_CLIENT_ID , consumer_secret = GOOGLE_CLIENT_SECRET ) [EOL] [EOL] access_token = [ [string] ] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def landing_page ( ) : [EOL] form_Login = LogInForm ( ) [EOL] form_Request = RequestForm ( ) [EOL] access_token = session . get ( [string] ) [EOL] if access_token is None : [EOL] return redirect ( url_for ( [string] ) ) [EOL] access_token = access_token [ [number] ] [EOL] headers = { [string] : [string] + access_token } [EOL] req = URLLib_request . Request ( [string] , headers = headers ) [EOL] try : [EOL] opener = URLLib_request . build_opener ( ) [EOL] res = opener . open ( req ) [EOL] except error . URLError as e : [EOL] if e . code == [number] : [EOL] [comment] [EOL] session . pop ( [string] , None ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return res . read ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ app . route ( [string] ) def login ( ) : [EOL] callback = url_for ( [string] , _external = True ) [EOL] return google . authorize ( callback = callback ) [EOL] [EOL] @ app . route ( REDIRECT_URI ) @ google . authorized_handler def authorized ( resp ) : [EOL] access_token = resp [ [string] ] [EOL] session [ [string] ] = access_token , [string] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] @ google . tokengetter def get_access_token ( ) : [EOL] return session . get ( [string] ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def Login ( ) : [EOL] form = LogInForm ( ) [EOL] form_Request = RequestForm ( ) [EOL] if request . method == [string] : [EOL] if current_user . is_authenticated == True : [EOL] return redirect ( url_for ( [string] ) ) [EOL] return render_template ( [string] , form = form ) [EOL] else : [EOL] check_user = User . objects ( username = form . username . data ) . first ( ) [EOL] if check_user : [EOL] if check_password_hash ( check_user [ [string] ] , form . password . data ) : [EOL] login_user ( check_user ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return render_template ( [string] , form = form , error = [string] , Client_id_url = config . Google_Client_ID ) [EOL] return render_template ( [string] , form = form , error = [string] , Client_id_url = config . Google_Client_ID ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def signup ( ) : [EOL] form = RegForm ( ) [EOL] form_Request = RequestForm ( ) [EOL] if request . method == [string] : [EOL] return render_template ( [string] , form = form ) [EOL] else : [EOL] if form . validate_on_submit ( ) : [EOL] existing_email = User . objects ( email = form . email . data ) . first ( ) [EOL] existing_user = User . objects ( username = form . username . data ) . first ( ) [EOL] if existing_email is not None : [EOL] return render_template ( [string] , form = form , error = [string] ) [comment] [EOL] elif existing_user is not None : [EOL] return render_template ( [string] , form = form , error = [string] ) [EOL] else : [EOL] hashpass = generate_password_hash ( form . password . data , method = [string] ) [EOL] newUser = User ( username = form . username . data , name = form . name . data , email = form . email . data , password = hashpass ) . save ( ) [EOL] login_user ( newUser ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return render_template ( [string] , form = form ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ app . route ( [string] ) @ app . route ( [string] ) def example ( name = None ) : [EOL] if name : [EOL] length = len ( name ) [EOL] else : [EOL] length = [number] [EOL] return render_template ( [string] , name = name , length = length ) [EOL] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def requestare ( ) : [EOL] form = RequestForm ( ) [EOL] if current_user . is_authenticated == True or session . get ( [string] ) is not None : [EOL] [comment] [EOL] status = True [EOL] toInsert = { [string] : [string] } [EOL] [comment] [EOL] [comment] [EOL] name = None [EOL] try : [EOL] if ( current_user . name . count ( [string] ) >= [number] ) : [EOL] name = current_user . name . split ( [string] ) [ [number] ] [EOL] else : [EOL] name = current_user . name [EOL] except Exception as e : [EOL] name = None [EOL] [EOL] return render_template ( [string] , form = form , name = name , loggedin = status ) [EOL] else : [EOL] return redirect ( [string] ) [EOL] [EOL] def save_to_cache ( n , reviews , c ) : [EOL] query = n + [string] + c [EOL] for x in Cache . objects : [EOL] if ( x . name == query ) : [EOL] return [EOL] Cache ( name = query , all_reviews = json . dumps ( reviews ) ) . save ( ) [EOL] return [EOL] [EOL] def load_from_cache ( n , c ) : [EOL] query = n + [string] + c [EOL] temp = Cache . objects ( name = query ) . first ( ) [EOL] if temp : [EOL] return json . loads ( temp . all_reviews ) [EOL] return [ ] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def place ( ) : [EOL] data = [string] [EOL] if request . method == [string] : [EOL] status = True [EOL] place = request . form [ [string] ] [EOL] categories = [ [string] , [string] , [string] , [string] , [string] ] [EOL] titles = [ [string] , [string] , [string] , [string] , [string] ] [EOL] names = [ [ ] , [ ] , [ ] , [ ] , [ ] ] [EOL] address = [ [ ] , [ ] , [ ] , [ ] , [ ] ] [EOL] pics = [ [ ] , [ ] , [ ] , [ ] , [ ] ] [EOL] ratings = [ ] [EOL] all_reviews = [ [ ] , [ ] , [ ] , [ ] , [ ] ] [EOL] count = [number] [EOL] for i in range ( len ( categories ) ) : [EOL] data = Google_Places_Api . get_activities ( place , categories [ i ] ) [EOL] data = data [ [string] ] [EOL] temp_load = load_from_cache ( place , categories [ i ] ) [EOL] for d in data : [EOL] [comment] [EOL] names [ i ] . append ( d [ [string] ] ) [EOL] address [ i ] . append ( d [ [string] ] ) [EOL] if [string] in d : [EOL] temp = d [ [string] ] [ [number] ] [ [string] ] [EOL] temp = [string] + temp + [string] + config . api_key_google_places [EOL] pics [ i ] . append ( [ temp , count ] ) [EOL] else : [EOL] pics [ i ] . append ( [ [string] , count ] ) [EOL] count += [number] [EOL] for_yelp = [ x . strip ( ) for x in d [ [string] ] . split ( [string] ) ] [EOL] current_reviews = [ ] [EOL] if temp_load == [ ] : [EOL] try : [EOL] test_yelp = Yelp_API . get_reviews_of_business ( d [ [string] ] , for_yelp [ [number] ] , for_yelp [ [number] ] , for_yelp [ [number] ] . split ( [string] ) [ [number] ] , [string] ) [EOL] for x in test_yelp [ [string] ] : [EOL] current_reviews . append ( [ x [ [string] ] , x [ [string] ] , x [ [string] ] ] ) [EOL] except : [EOL] print ( [string] ) [EOL] all_reviews [ i ] . append ( current_reviews ) [EOL] else : [EOL] all_reviews [ i ] = temp_load [EOL] save_to_cache ( place , all_reviews [ i ] , categories [ i ] ) [EOL] response = json . dumps ( data , sort_keys = True , indent = [number] , separators = ( [string] , [string] ) ) [EOL] return render_template ( [string] , Categories = titles , place = place , names = names , address = address , pics = pics , loggedin = status , all_reviews = all_reviews , ratings = ratings ) [EOL] else : [EOL] return redirect ( [string] ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ login_required def logout ( ) : [EOL] logout_user ( ) [EOL] try : [EOL] del session [ [string] ] [EOL] except Exception : [EOL] pass [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def resetpassword ( ) : [EOL] return redirect ( [string] ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def aboutus ( ) : [EOL] status = False [EOL] if current_user . is_authenticated == True or session . get ( [string] ) is not None : [EOL] status = True [EOL] return render_template ( [string] , loggedin = status ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[main.Cache]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.Cache]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.RegForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.RegForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.RegForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.RegForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.LogInForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.LogInForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.RequestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0