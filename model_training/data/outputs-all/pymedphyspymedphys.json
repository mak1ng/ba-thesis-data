[comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import streamlit as st [EOL] [EOL] import pandas as pd [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from helpers import get_all_dicom_treatment_info [EOL] [EOL] df = pd . DataFrame ( [ [number] , [number] , [number] ] ) [EOL] [comment] [EOL] st . title ( [string] ) [EOL] [EOL] [comment] [EOL] st . header ( [string] ) [EOL] st . subheader ( [string] ) [EOL] [EOL] [comment] [EOL] st . text ( [string] ) [EOL] [EOL] [comment] [EOL] st . markdown ( [string] ) [EOL] [EOL] [comment] [EOL] st . success ( [string] ) [EOL] st . info ( [string] ) [EOL] st . warning ( [string] ) [EOL] st . exception ( [string] ) [EOL] [EOL] [comment] [EOL] st . help ( range ) [EOL] [EOL] [comment] [EOL] st . write ( [string] ) [EOL] st . write ( ( range ( [number] ) ) ) [EOL] [EOL] [comment] [EOL] st . write ( df ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if st . checkbox ( [string] ) : [EOL] st . text ( [string] ) [EOL] [EOL] [comment] [EOL] file = st . file_uploader ( [string] , encoding = None ) [EOL] dicom_table = get_all_dicom_treatment_info ( file ) [EOL] st . write ( dicom_table ) [EOL] name = dicom_table . iloc [ [number] ] [ [string] ] + [string] + dicom_table . iloc [ [number] ] [ [string] ] [EOL] st . subheader ( [string] ) [EOL] st . write ( [string] , name ) [EOL] [EOL] mrn = dicom_table . iloc [ [number] ] [ [string] ] [EOL] st . write ( [string] , mrn ) [EOL] [EOL] [comment] [EOL] occupation = st . selectbox ( [string] , [ [string] , [string] , [string] ] ) [EOL] st . write ( [string] , occupation ) [EOL] [EOL] [comment] [EOL] occupation = st . multiselect ( [string] , [ [string] , [string] , [string] ] ) [EOL] st . write ( [string] , occupation ) [EOL] [EOL] [comment] [EOL] age = st . slider ( [string] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] st . button ( [string] ) [EOL] if st . button ( [string] ) : [EOL] st . text ( [string] ) [EOL] [EOL] [comment] [EOL] name = st . text_input ( [string] , [string] ) [EOL] [EOL] my_bar = st . progress ( [number] ) [EOL] for p in range ( [number] ) : [EOL] my_bar . progress ( p + [number] ) [EOL] p += [number] [EOL] [EOL] [comment] [EOL] st . sidebar . header ( [string] ) [EOL] st . sidebar . text ( [string] ) [EOL] [EOL] [comment] [EOL] @ st . cache def run_fxn ( ) : [EOL] return range ( [number] ) [EOL] [EOL] [EOL] st . write ( run_fxn ( ) ) [EOL] [EOL] [comment] [EOL] st . pyplot ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import streamlit as st [EOL] [EOL] from pymedphys . _mosaiq import connect [EOL] from pymedphys . _mosaiq . helpers import get_all_treatment_data [EOL] [EOL] currdir = os . getcwd ( ) [EOL] [EOL] st . title ( [string] ) [EOL] [EOL] mrn = st . text_input ( [string] ) [EOL] [EOL] if len ( mrn ) is not [number] : [EOL] with connect . connect ( [string] ) as cursor : [EOL] mosaiq_table = get_all_treatment_data ( cursor , mrn ) [EOL] [EOL] st . write ( mosaiq_table ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] import pandas as pd [EOL] [EOL] import pydicom [EOL] [EOL] [EOL] def get_all_dicom_treatment_info ( dicomFile ) : [EOL] dicom = pydicom . dcmread ( dicomFile ) [EOL] table = pd . DataFrame ( ) [EOL] [EOL] try : [EOL] prescriptionDescription = dicom . PrescriptionDescription . split ( [string] ) [EOL] except AttributeError : [EOL] prescriptionDescription = [string] [EOL] [EOL] for fraction in dicom . FractionGroupSequence : [EOL] for beam in fraction . ReferencedBeamSequence : [EOL] bn = ( beam . ReferencedBeamNumber ) [comment] [EOL] doseRef = fraction . ReferencedDoseReferenceSequence [ [number] ] . ReferencedDoseReferenceNumber [comment] [EOL] fn = fraction . FractionGroupNumber [EOL] [EOL] coll_x1 = ( dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . BeamLimitingDevicePositionSequence [ [number] ] . LeafJawPositions [ [number] ] / [number] ) [EOL] coll_x2 = ( dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . BeamLimitingDevicePositionSequence [ [number] ] . LeafJawPositions [ [number] ] / [number] ) [EOL] [EOL] coll_y1 = ( dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . BeamLimitingDevicePositionSequence [ [number] ] . LeafJawPositions [ [number] ] / [number] ) [EOL] coll_y2 = ( dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . BeamLimitingDevicePositionSequence [ [number] ] . LeafJawPositions [ [number] ] / [number] ) [EOL] [EOL] dicomBeam = { [string] : dicom . RTPlanName , [string] : dicom . PatientID , [string] : dicom . PatientName . given_name , [string] : dicom . PatientName . family_name , [string] : dicom . PatientBirthDate , [string] : doseRef , [string] : dicom . BeamSequence [ bn - [number] ] . BeamName , [string] : dicom . BeamSequence [ bn - [number] ] . BeamDescription , [string] : [string] , [string] : dicom . BeamSequence [ bn - [number] ] . TreatmentMachineName , [string] : prescriptionDescription [ fn - [number] ] , [string] : dicom . BeamSequence [ bn - [number] ] . RadiationType , [string] : dicom . PatientSetupSequence [ [number] ] . PatientPosition , [string] : dicom . DoseReferenceSequence [ doseRef - [number] ] . TargetPrescriptionDose * [number] / fraction . NumberOfFractionsPlanned , [string] : dicom . DoseReferenceSequence [ doseRef - [number] ] . TargetPrescriptionDose * [number] , [string] : fraction . NumberOfFractionsPlanned , [string] : bn , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . NominalBeamEnergy , [string] : dicom . BeamSequence [ bn - [number] ] . ReferencedToleranceTableNumber , [string] : beam . BeamMeterset , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . DoseRateSet , [string] : [string] , [string] : dicom . BeamSequence [ bn - [number] ] . NumberOfWedges , [string] : dicom . BeamSequence [ bn - [number] ] . NumberOfBlocks , [string] : [string] , [string] : dicom . BeamSequence [ bn - [number] ] . NumberOfBoli , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . GantryAngle , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . BeamLimitingDeviceAngle , [string] : [string] , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . PatientSupportAngle , [string] : round ( dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . SourceToSurfaceDistance / [number] , [number] , ) , [string] : round ( dicom . BeamSequence [ bn - [number] ] . SourceAxisDistance / [number] , [number] ) , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . IsocenterPosition [ [number] ] / [number] , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . IsocenterPosition [ [number] ] / [number] , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . IsocenterPosition [ [number] ] / [number] , [string] : coll_x2 - coll_x1 , [string] : coll_x1 , [string] : coll_x2 , [string] : coll_y2 - coll_y1 , [string] : coll_y1 , [string] : coll_y2 , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . TableTopVerticalPosition , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . TableTopLateralPosition , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . TableTopLongitudinalPosition , [string] : dicom . BeamSequence [ bn - [number] ] . ControlPointSequence [ [number] ] . TableTopEccentricAngle , } [EOL] [EOL] table = table . append ( dicomBeam , ignore_index = True , sort = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return table [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os [EOL] [EOL] import streamlit as st [EOL] [EOL] from compare import color_results , compare_to_mosaiq [EOL] from helpers import get_all_dicom_treatment_info [EOL] from pymedphys . _mosaiq import connect [EOL] from pymedphys . _mosaiq . helpers import get_all_treatment_data , get_staff_initials [EOL] from tolerance_constants import SITE_CONSTANTS , TOLERANCE_TYPES [EOL] [EOL] currdir = os . getcwd ( ) [EOL] server = [string] [EOL] [EOL] st . title ( [string] ) [EOL] [EOL] dicomFile = st . file_uploader ( [string] ) [EOL] [EOL] if dicomFile is not None : [EOL] [comment] [EOL] dicom_table = get_all_dicom_treatment_info ( dicomFile ) [EOL] dicom_table [ [string] ] = [ TOLERANCE_TYPES [ item ] for item in dicom_table [ [string] ] ] [EOL] dicom_table = dicom_table . sort_values ( [ [string] ] ) [EOL] [EOL] mrn = dicom_table . iloc [ [number] ] [ [string] ] [EOL] [EOL] with connect . connect ( server ) as cursor : [EOL] mosaiq_table = get_all_treatment_data ( cursor , mrn ) [EOL] site_initials = get_staff_initials ( cursor , str ( mosaiq_table . iloc [ [number] ] [ [string] ] ) ) [EOL] [EOL] mosaiq_table = mosaiq_table [ mosaiq_table [ [string] ] == [number] ] [EOL] mosaiq_table = mosaiq_table . reset_index ( drop = True ) [EOL] mosaiq_table [ [string] ] = [ TOLERANCE_TYPES [ item ] for item in mosaiq_table [ [string] ] ] [EOL] [comment] [EOL] [comment] [EOL] name = dicom_table . iloc [ [number] ] [ [string] ] + [string] + dicom_table . iloc [ [number] ] [ [string] ] [EOL] st . subheader ( [string] ) [EOL] [EOL] if ( name == mosaiq_table . iloc [ [number] ] [ [string] ] + [string] + mosaiq_table . iloc [ [number] ] [ [string] ] ) : [EOL] st . success ( [string] + name ) [EOL] else : [EOL] st . error ( [string] + name ) [EOL] [EOL] if mrn == mosaiq_table . iloc [ [number] ] [ [string] ] : [EOL] st . success ( [string] + mrn ) [EOL] else : [EOL] st . error ( [string] + mrn ) [EOL] [EOL] DOB = str ( mosaiq_table . iloc [ [number] ] [ [string] ] ) [ [number] : [number] ] [EOL] dicom_DOB = dicom_table . iloc [ [number] ] [ [string] ] [EOL] if DOB == dicom_DOB [ [number] : [number] ] + [string] + dicom_DOB [ [number] : [number] ] + [string] + dicom_DOB [ [number] : [number] ] : [EOL] st . success ( [string] + DOB ) [EOL] else : [EOL] st . error ( [string] + DOB ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] st . subheader ( [string] ) [EOL] [EOL] [comment] [EOL] if all ( i == [number] for i in mosaiq_table . iloc [ : ] [ [string] ] ) : [EOL] st . success ( [string] ) [EOL] else : [EOL] for i in mosaiq_table . iloc [ : ] [ [string] ] : [EOL] if i != [number] : [EOL] st . error ( [string] + SITE_CONSTANTS [ i ] ) [EOL] break [EOL] [EOL] [comment] [EOL] if all ( i == [number] for i in mosaiq_table . iloc [ : ] [ [string] ] ) : [EOL] st . success ( [string] + str ( site_initials [ [number] ] [ [number] ] ) ) [EOL] else : [EOL] st . error ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] index = [ ] [EOL] for j in dicom_table . iloc [ : ] [ [string] ] : [EOL] for i in range ( len ( mosaiq_table ) ) : [EOL] if mosaiq_table . iloc [ i ] [ [string] ] == j : [EOL] index . append ( i ) [EOL] [comment] [EOL] remove = [ ] [EOL] for i in mosaiq_table . iloc [ : ] . index : [EOL] if i not in index : [EOL] remove . append ( i ) [EOL] [EOL] mosaiq_table = mosaiq_table . drop ( remove ) [EOL] mosaiq_table = mosaiq_table . sort_index ( axis = [number] ) [EOL] mosaiq_table = mosaiq_table . sort_values ( by = [ [string] ] ) [EOL] [EOL] [comment] [EOL] results = compare_to_mosaiq ( dicom_table , mosaiq_table ) [EOL] results = results . transpose ( ) [EOL] [EOL] [comment] [EOL] rx_selection = st . radio ( [string] , mosaiq_table . site . unique ( ) ) [EOL] rx_fields = mosaiq_table [ mosaiq_table [ [string] ] == rx_selection ] [ [string] ] . values [EOL] [EOL] [comment] [EOL] field_selection = st . radio ( [string] , rx_fields ) [EOL] st . subheader ( [string] ) [EOL] [EOL] if len ( field_selection ) is not [number] : [EOL] dicom_field = str ( field_selection ) + [string] [EOL] mosaiq_field = str ( field_selection ) + [string] [EOL] st . write ( [string] , results [ field_selection + [string] ] [ [string] ] ) [EOL] field_approval_id = mosaiq_table [ mosaiq_table [ [string] ] == field_selection ] [ [string] ] [EOL] with connect . connect ( server ) as cursor : [EOL] field_approval_initials = get_staff_initials ( cursor , str ( int ( field_approval_id . iloc [ [number] ] ) ) ) [EOL] st . write ( [string] , field_approval_initials [ [number] ] [ [number] ] ) [EOL] display_results = results [ [ dicom_field , mosaiq_field ] ] [EOL] display_results = display_results . drop ( [ [string] , [string] , [string] , [string] ] , axis = [number] ) [EOL] display_results = display_results . style . apply ( color_results , axis = [number] ) [EOL] st . dataframe ( display_results , height = [number] ) [EOL] [EOL] show_dicom = st . checkbox ( [string] ) [EOL] if show_dicom : [EOL] st . subheader ( [string] ) [EOL] st . dataframe ( dicom_table , height = [number] ) [EOL] [EOL] show_mosaiq = st . checkbox ( [string] ) [EOL] if show_mosaiq : [EOL] st . subheader ( [string] ) [EOL] st . dataframe ( mosaiq_table , height = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] TOLERANCE_TYPES = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] SITE_CONSTANTS = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL]	0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import datetime [EOL] [EOL] import pandas as pd [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def color_results ( val ) : [EOL] not_in = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] if val . name in not_in : [EOL] return [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] elif type ( val [ [number] ] ) == str and type ( val [ [number] ] ) == str : [EOL] if val [ [number] ] == val [ [number] ] : [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] [EOL] elif val [ [number] ] == [string] : [EOL] val [ [number] ] = [number] [EOL] if val [ [number] ] == val [ [number] ] : [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] elif val [ [number] ] == [string] : [EOL] val [ [number] ] = [number] [EOL] if val [ [number] ] == val [ [number] ] : [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] [EOL] elif isinstance ( val [ [number] ] , datetime . date ) or isinstance ( val [ [number] ] , datetime . date ) : [EOL] if val [ [number] ] == val [ [number] ] : [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] [EOL] elif type ( val [ [number] ] ) == float and type ( val [ [number] ] ) == str : [EOL] if val [ [number] ] == val [ [number] ] : [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] [EOL] else : [EOL] if round ( float ( val [ [number] ] ) , [number] ) == round ( float ( val [ [number] ] ) , [number] ) : [EOL] val [ [number] ] = round ( float ( val [ [number] ] ) , [number] ) [EOL] val [ [number] ] = round ( float ( val [ [number] ] ) , [number] ) [EOL] return [ [string] , [string] ] [EOL] else : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def get_general_info ( dicom_table , mos_table ) : [EOL] mosaiq_table = [ ] [EOL] dic_table = [ ] [EOL] general_info_data = [ ] [EOL] used_prescriptions = [ ] [EOL] general_info_index = [ ] [EOL] [EOL] general_info_columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for field in dicom_table [ [string] ] : [EOL] if dicom_table . iloc [ int ( field ) - [number] ] [ [string] ] not in used_prescriptions : [EOL] for label in general_info_columns : [EOL] mosaiq_table . append ( mos_table . iloc [ int ( field ) - [number] ] [ label ] ) [EOL] dic_table . append ( dicom_table . iloc [ int ( field ) - [number] ] [ label ] ) [EOL] general_info_index . append ( [string] + str ( dicom_table . iloc [ int ( field ) - [number] ] [ [string] ] ) + [string] ) [EOL] general_info_index . append ( [string] + str ( dicom_table . iloc [ int ( field ) - [number] ] [ [string] ] ) + [string] ) [EOL] used_prescriptions . append ( dicom_table . iloc [ int ( field ) - [number] ] [ [string] ] ) [EOL] general_info_data . append ( dic_table ) [EOL] general_info_data . append ( mosaiq_table ) [EOL] dic_table = [ ] [EOL] mosaiq_table = [ ] [EOL] else : [EOL] pass [EOL] [EOL] general_info_df = pd . DataFrame ( data = general_info_data , columns = general_info_columns ) [EOL] [EOL] general_info_df [ [string] ] = pd . Series ( general_info_index ) . values [EOL] general_info_df = general_info_df . set_index ( [string] , drop = True ) [EOL] general_info_df = general_info_df . transpose ( ) [EOL] [EOL] return general_info_df [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def compare_to_mosaiq ( dicom_table , mos_table ) : [EOL] values_table = pd . DataFrame ( ) [EOL] to_be_compared = dicom_table . columns [EOL] mos_index = mos_table . columns [EOL] dicom_list = pd . DataFrame ( ) [EOL] mosaiq_list = pd . DataFrame ( ) [EOL] [EOL] for field in range ( len ( dicom_table ) ) : [EOL] for label in to_be_compared : [EOL] [EOL] [comment] [EOL] if label in mos_index : [EOL] add_dicom = pd . DataFrame ( [ dicom_table . iloc [ field ] [ label ] ] , columns = [ label ] ) [EOL] add_mosaiq = pd . DataFrame ( [ mos_table . iloc [ field ] [ label ] ] , columns = [ label ] ) [EOL] [EOL] dicom_list [ label ] = add_dicom [EOL] mosaiq_list [ label ] = add_mosaiq [EOL] [comment] [EOL] else : [EOL] continue [EOL] [EOL] values_table = values_table . append ( dicom_list , ignore_index = True ) [EOL] values_table = values_table . append ( mosaiq_list , ignore_index = True ) [EOL] [EOL] values_index = [ ] [EOL] for value in dicom_table [ : ] [ [string] ] : [EOL] values_index . append ( value + [string] ) [EOL] values_index . append ( value + [string] ) [EOL] [EOL] values_table [ [string] ] = pd . Series ( values_index ) . values [EOL] values_table = values_table . set_index ( [string] , drop = True ) [EOL] [EOL] return values_table [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] VAULT_IDS = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } [EOL]	0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import tkinter [EOL] import os [EOL] from tkinter import Tk , filedialog [EOL] [EOL] import pandas as pd [EOL] [EOL] from compare import compare_to_mosaiq [EOL] from helpers import get_all_dicom_treatment_info [EOL] from pymedphys . _mosaiq import connect [EOL] from pymedphys . _mosaiq . helpers import get_all_treatment_data [EOL] [EOL] root = Tk ( ) [EOL] root . withdraw ( ) [comment] [EOL] [EOL] currdir = os . getcwd ( ) [EOL] [EOL] dicomFile = filedialog . askopenfilename ( parent = root , initialdir = currdir , title = [string] ) [EOL] if len ( dicomFile ) > [number] : [EOL] print ( [string] % dicomFile ) [EOL] [EOL] dicom_table = get_all_dicom_treatment_info ( dicomFile ) [EOL] [EOL] mrn = dicom_table . iloc [ [number] ] [ [string] ] [EOL] [EOL] [comment] [EOL] with connect . connect ( [string] ) as cursor : [EOL] mosaiq_table = get_all_treatment_data ( cursor , mrn ) [EOL] [EOL] field_version = max ( mosaiq_table [ [string] ] ) [EOL] mosaiq_table = mosaiq_table [ mosaiq_table [ [string] ] == field_version ] [EOL] mosaiq_table = mosaiq_table . reset_index ( drop = True ) [EOL] [EOL] index = [ ] [EOL] for j in dicom_table . iloc [ : ] [ [string] ] : [EOL] for i in range ( len ( mosaiq_table ) ) : [EOL] if mosaiq_table . iloc [ i ] [ [string] ] == j : [EOL] index . append ( i ) [EOL] [EOL] remove = [ ] [EOL] for i in mosaiq_table . iloc [ : ] . index : [EOL] if i not in index : [EOL] remove . append ( i ) [EOL] [EOL] mosaiq_table = mosaiq_table . drop ( remove ) [EOL] mosaiq_table = mosaiq_table . sort_values ( by = [ [string] ] ) [EOL] [EOL] results = compare_to_mosaiq ( dicom_table , mosaiq_table ) [EOL] results = results . transpose ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tkinter.Tk$ 0 0 0 0 0 $tkinter.Tk$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tkinter.Tk$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] import shutil [EOL] [EOL] HERE = pathlib . Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] input_dir = HERE . joinpath ( [string] ) [EOL] output_dir = HERE . joinpath ( [string] ) [EOL] [EOL] input_files = input_dir . glob ( [string] ) [EOL] [EOL] for path in input_files : [EOL] if not path . is_dir ( ) : [EOL] new_path = output_dir . joinpath ( path . relative_to ( input_dir ) ) [EOL] print ( [string] ) [EOL] if new_path . exists ( ) : [EOL] print ( [string] . format ( new_path ) ) [EOL] else : [EOL] new_path . parent . mkdir ( parents = True , exist_ok = True ) [EOL] print ( [string] . format ( path , new_path ) ) [EOL] try : [EOL] command = [string] . format ( path , new_path ) [EOL] print ( command ) [EOL] os . system ( command ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] [EOL] if not new_path . exists ( ) : [EOL] print ( [string] ) [EOL] shutil . copy2 ( str ( path ) , str ( new_path ) ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Any , List , Tuple [EOL] import typing [EOL] import functools [EOL] import os [EOL] import pathlib [EOL] import re [EOL] import sys [EOL] import traceback [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import imageio [EOL] [EOL] import pydicom [EOL] [EOL] import IPython . display [EOL] import pymedphys [EOL] from pymedphys . _mosaiq . helpers import FIELD_TYPES [EOL] [EOL] GRID = pymedphys . mudensity . grid ( ) [EOL] COORDS = ( GRID [ [string] ] , GRID [ [string] ] ) [EOL] [EOL] [EOL] PERCENT_DEVIATION = [number] [EOL] MM_DIST_THRESHOLD = [number] [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_delivery_tel_file ( filepath ) : [EOL] delivery_tel = pymedphys . Delivery . from_monaco ( filepath ) [EOL] [EOL] return delivery_tel [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_delivery_trf_file ( filepath ) : [EOL] delivery_trf = pymedphys . Delivery . from_logfile ( filepath ) [EOL] [EOL] return delivery_trf [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_mu_density_from_file ( filepath ) : [EOL] if filepath . suffix == [string] : [EOL] delivery = get_delivery_trf_file ( filepath ) [EOL] elif filepath . name == [string] : [EOL] delivery = pymedphys . Delivery . from_monaco ( filepath ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] mudensity = delivery . mudensity ( ) [EOL] [EOL] return mudensity [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def calc_gamma ( mudensity_tel , mudensity_trf ) : [EOL] gamma = pymedphys . gamma ( COORDS , mudensity_tel , COORDS , mudensity_trf , PERCENT_DEVIATION , MM_DIST_THRESHOLD , local_gamma = True , quiet = True , max_gamma = [number] , ) [EOL] [EOL] return gamma [EOL] [EOL] [EOL] def plot_gamma_hist ( gamma , percent , dist ) : [EOL] valid_gamma = gamma [ ~ np . isnan ( gamma ) ] [EOL] [EOL] plt . hist ( valid_gamma , [number] , density = True ) [EOL] pass_ratio = np . sum ( valid_gamma <= [number] ) / len ( valid_gamma ) [EOL] [EOL] plt . title ( [string] . format ( percent , dist , pass_ratio * [number] , np . max ( valid_gamma ) ) ) [EOL] [EOL] [EOL] def to_tuple ( array ) : [EOL] return tuple ( map ( tuple , array ) ) [EOL] [EOL] [EOL] def markdown_print ( string ) : [EOL] IPython . display . display ( IPython . display . Markdown ( string ) ) [EOL] [EOL] [EOL] def plot_and_save_results ( mudensity_tel , mudensity_trf , gamma , png_filepath , pdf_filepath , header_text = [string] , footer_text = [string] , ) : [EOL] diff = mudensity_trf - mudensity_tel [EOL] largest_item = np . max ( np . abs ( diff ) ) [EOL] [EOL] widths = [ [number] , [number] ] [EOL] heights = [ [number] , [number] , [number] , [number] , [number] ] [EOL] gs_kw = dict ( width_ratios = widths , height_ratios = heights ) [EOL] [EOL] fig , axs = plt . subplots ( [number] , [number] , figsize = ( [number] , [number] ) , gridspec_kw = gs_kw ) [EOL] gs = axs [ [number] , [number] ] . get_gridspec ( ) [EOL] [EOL] for ax in axs [ [number] , [number] : ] : [EOL] ax . remove ( ) [EOL] [EOL] for ax in axs [ [number] , [number] : ] : [EOL] ax . remove ( ) [EOL] [EOL] for ax in axs [ [number] , [number] : ] : [EOL] ax . remove ( ) [EOL] [EOL] axheader = fig . add_subplot ( gs [ [number] , : ] ) [EOL] axhist = fig . add_subplot ( gs [ [number] , : ] ) [EOL] axfooter = fig . add_subplot ( gs [ [number] , : ] ) [EOL] [EOL] axheader . axis ( [string] ) [EOL] axfooter . axis ( [string] ) [EOL] [EOL] axheader . text ( [number] , [number] , header_text , ha = [string] , wrap = True , fontsize = [number] ) [EOL] axfooter . text ( [number] , [number] , footer_text , ha = [string] , va = [string] , wrap = True , fontsize = [number] ) [EOL] [EOL] plt . sca ( axs [ [number] , [number] ] ) [EOL] pymedphys . mudensity . display ( GRID , mudensity_tel ) [EOL] axs [ [number] , [number] ] . set_title ( [string] ) [EOL] [EOL] plt . sca ( axs [ [number] , [number] ] ) [EOL] pymedphys . mudensity . display ( GRID , mudensity_trf ) [EOL] axs [ [number] , [number] ] . set_title ( [string] ) [EOL] [EOL] plt . sca ( axs [ [number] , [number] ] ) [EOL] pymedphys . mudensity . display ( GRID , diff , cmap = [string] , vmin = - largest_item , vmax = largest_item ) [EOL] plt . title ( [string] ) [EOL] [EOL] plt . sca ( axs [ [number] , [number] ] ) [EOL] pymedphys . mudensity . display ( GRID , gamma , cmap = [string] , vmin = [number] , vmax = [number] ) [EOL] plt . title ( f" [string] { PERCENT_DEVIATION } [string] { MM_DIST_THRESHOLD } [string] " ) [EOL] [EOL] plt . sca ( axhist ) [EOL] plot_gamma_hist ( gamma , PERCENT_DEVIATION , MM_DIST_THRESHOLD ) [EOL] [EOL] return fig [EOL] [EOL] [EOL] def get_incomplete_qcls ( cursor , location ) : [EOL] data = pymedphys . mosaiq . execute ( cursor , [string] , { [string] : location } , ) [EOL] [EOL] results = pd . DataFrame ( data = data , columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL] [EOL] results = results . sort_values ( by = [ [string] ] , ascending = False ) [EOL] [EOL] return results [EOL] [EOL] [EOL] def get_patient_fields ( cursor , patient_id ) : [EOL] [docstring] [EOL] patient_id = str ( patient_id ) [EOL] [EOL] patient_field_results = pymedphys . mosaiq . execute ( cursor , [string] , { [string] : patient_id } , ) [EOL] [EOL] table = pd . DataFrame ( data = patient_field_results , columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL] [EOL] table . drop_duplicates ( inplace = True ) [EOL] [EOL] table [ [string] ] = [ FIELD_TYPES [ item ] for item in table [ [string] ] ] [EOL] [EOL] return table [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import sys [EOL] from time import sleep [EOL] [EOL] import search_and_move [EOL] from PyQt4 import QtCore , QtGui [EOL] [EOL] [EOL] class ProgressBarWorker ( QtCore . QThread ) : [EOL] [docstring] [EOL] [EOL] percent = QtCore . pyqtSignal ( object ) [EOL] [EOL] def __init__ ( self , parent_thread , patient_id , origin_folder_size ) : [EOL] super ( ProgressBarWorker , self ) . __init__ ( parent_thread ) [EOL] self . patient_id = patient_id [EOL] self . origin_folder_size = origin_folder_size [EOL] [EOL] def run ( self ) : [EOL] proportion = [number] [EOL] while proportion < [number] : [EOL] proportion = search_and_move . get_proportion_moved ( self . patient_id , self . origin_folder_size ) [EOL] self . percent . emit ( proportion * [number] ) [EOL] sleep ( [number] ) [EOL] [EOL] [EOL] class DeArchiveWorker ( QtCore . QThread ) : [EOL] [docstring] [EOL] [EOL] error = QtCore . pyqtSignal ( object ) [EOL] success = QtCore . pyqtSignal ( ) [EOL] [EOL] def __init__ ( self , parent_thread , patient_id , patient_name ) : [EOL] super ( DeArchiveWorker , self ) . __init__ ( parent_thread ) [EOL] self . patient_id = patient_id [EOL] self . patient_name = patient_name [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] search_and_move . dearchive_patient ( self . patient_id , self . patient_name ) [EOL] [EOL] except AssertionError as details : [EOL] self . error . emit ( details ) [EOL] [EOL] else : [EOL] self . success . emit ( ) [EOL] [EOL] [EOL] class Example ( QtGui . QWidget ) : [EOL] def __init__ ( self ) : [EOL] super ( Example , self ) . __init__ ( ) [EOL] [EOL] self . initUI ( ) [EOL] [EOL] def initUI ( self ) : [EOL] patient_id_label = QtGui . QLabel ( [string] ) [EOL] self . patient_id_edit = QtGui . QLineEdit ( ) [EOL] [EOL] self . find_button = QtGui . QPushButton ( [string] , self ) [EOL] self . find_button . clicked . connect ( self . find_patient ) [EOL] [EOL] patient_name_label = QtGui . QLabel ( [string] ) [EOL] self . patient_name_output = QtGui . QLabel ( [string] ) [EOL] [EOL] self . dearchive_button = QtGui . QPushButton ( [string] , self ) [EOL] self . dearchive_button . setEnabled ( False ) [EOL] self . dearchive_button . clicked . connect ( self . dearchive ) [EOL] [EOL] self . progress_bar = QtGui . QProgressBar ( self ) [EOL] [EOL] grid = QtGui . QGridLayout ( ) [EOL] grid . setSpacing ( [number] ) [EOL] [EOL] grid . addWidget ( patient_id_label , [number] , [number] ) [EOL] grid . addWidget ( self . patient_id_edit , [number] , [number] ) [EOL] [EOL] grid . addWidget ( self . find_button , [number] , [number] ) [EOL] [EOL] grid . addWidget ( patient_name_label , [number] , [number] ) [EOL] grid . addWidget ( self . patient_name_output , [number] , [number] ) [EOL] [EOL] grid . addWidget ( self . dearchive_button , [number] , [number] ) [EOL] [EOL] grid . addWidget ( self . progress_bar , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . setLayout ( grid ) [EOL] [EOL] self . setGeometry ( [number] , [number] , [number] , [number] ) [EOL] self . setWindowTitle ( [string] ) [EOL] [EOL] self . show ( ) [EOL] [EOL] def find_patient ( self ) : [EOL] patient_id = self . patient_id_edit . text ( ) [EOL] try : [EOL] patient_name = search_and_move . display_patient_name ( patient_id ) [EOL] [EOL] except AssertionError as details : [EOL] self . error ( details ) [EOL] [EOL] else : [EOL] self . patient_name_output . setText ( patient_name ) [EOL] self . dearchive_button . setEnabled ( True ) [EOL] [EOL] def update_progress_bar ( self , percent ) : [EOL] self . progress_bar . setValue ( percent ) [EOL] [EOL] def run_progress_bar ( self , patient_id ) : [EOL] origin_folder_size = search_and_move . get_origin_folder_size ( patient_id ) [EOL] progressbar_worker = ProgressBarWorker ( self , patient_id , origin_folder_size ) [EOL] [EOL] progressbar_worker . percent . connect ( self . update_progress_bar ) [EOL] progressbar_worker . start ( ) [EOL] [EOL] def dearchive ( self ) : [EOL] patient_id = self . patient_id_edit . text ( ) [EOL] patient_name = self . patient_name_output . text ( ) [EOL] [EOL] try : [EOL] search_and_move . check_patient_name ( patient_id , patient_name ) [EOL] search_and_move . check_folders ( patient_id ) [EOL] [EOL] self . patient_id_edit . setEnabled ( False ) [EOL] self . dearchive_button . setEnabled ( False ) [EOL] self . find_button . setEnabled ( False ) [EOL] [EOL] self . run_progress_bar ( patient_id ) [EOL] [EOL] dearchive_worker = DeArchiveWorker ( self , patient_id , patient_name ) [EOL] dearchive_worker . error . connect ( self . error ) [EOL] dearchive_worker . success . connect ( self . close ) [EOL] dearchive_worker . start ( ) [EOL] [EOL] except AssertionError as details : [EOL] self . error ( details ) [EOL] [EOL] def close ( self ) : [EOL] confirmation_message = QtGui . QMessageBox ( ) [EOL] confirmation_message . setText ( [string] ) [EOL] confirmation_message . setWindowTitle ( [string] ) [EOL] confirmation_message . addButton ( QtGui . QMessageBox . Ok ) [EOL] confirmation_message . setDefaultButton ( QtGui . QMessageBox . Ok ) [EOL] confirmation_message . exec_ ( ) [EOL] [EOL] QtGui . QApplication . quit ( ) [EOL] [EOL] def error ( self , details ) : [EOL] print ( details ) [EOL] error_message = QtGui . QMessageBox ( ) [EOL] error_message . setWindowTitle ( [string] ) [EOL] error_message . setText ( str ( details ) ) [EOL] error_message . addButton ( QtGui . QMessageBox . Ok ) [EOL] error_message . exec_ ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [EOL] app = QtGui . QApplication ( sys . argv ) [EOL] ex = Example ( ) [EOL] sys . exit ( app . exec_ ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] from glob import glob [EOL] [EOL] filelist = glob ( [string] ) [EOL] new_filenames = [ f" [string] { os . path . basename ( filepath ) }" for filepath in filelist ] [EOL] [EOL] for old , new in zip ( filelist , new_filenames ) : [EOL] os . system ( f" [string] { old } [string] " ) [EOL] os . system ( f" [string] { new }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] from scipy import interpolate [EOL] [EOL] import xlwings as xw [EOL] [EOL] [EOL] @ xw . func @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] ) @ xw . ret ( expand = [string] ) def linear_interpolation ( x , y , xnew , fill_value = None ) : [EOL] f = interpolate . interp1d ( x , y , fill_value = fill_value ) [EOL] ynew = f ( xnew ) [EOL] [EOL] return np . expand_dims ( ynew , axis = [number] ) [EOL] [EOL] [EOL] @ xw . func @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . ret ( expand = [string] ) def nd_linear_interpolation ( points , values , points_new ) : [EOL] func = interpolate . LinearNDInterpolator ( points , values ) [EOL] [EOL] values_new = func ( points_new ) [EOL] [EOL] return np . expand_dims ( values_new , axis = [number] ) [EOL] [EOL] [EOL] @ xw . func @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . ret ( expand = [string] ) def npravel ( values ) : [EOL] return np . expand_dims ( np . ravel ( values . T ) , axis = [number] ) [EOL] [EOL] [EOL] @ xw . func @ xw . arg ( [string] , np . array , ndim = [number] ) @ xw . arg ( [string] ) @ xw . ret ( expand = [string] ) def nprepeat ( values , repeats ) : [EOL] return np . expand_dims ( np . repeat ( values , repeats ) , axis = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = [string] , packages = [ [string] ] , entry_points = { [string] : [ [string] ] } , license = [string] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , include_package_data = True , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from . mosaiq_transfer_check import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import os [EOL] [EOL] from notebook . notebookapp import NotebookApp [EOL] [EOL] NOTEBOOK_DIRECTORY = os . path . join ( os . path . dirname ( __file__ ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] NotebookApp . launch_instance ( notebook_dir = NOTEBOOK_DIRECTORY ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import jinja2 [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] from csv_compare import compare as _compare [EOL] from IPython . display import HTML , Markdown , display [EOL] from jinja2 import Template [EOL] [EOL] [EOL] def _create_comparison_table ( data ) : [EOL] [docstring] [EOL] keys = np . sort ( list ( data . keys ( ) ) ) [EOL] return pd . DataFrame ( columns = [ [string] ] , index = keys , data = [ data [ key ] for key in keys ] ) [EOL] [EOL] [EOL] def create_reports ( input_directory , output_directory ) : [EOL] [docstring] [EOL] all_comparison_data = _compare ( input_directory ) [EOL] [EOL] for timestamp , comparison_data in all_comparison_data . items ( ) : [EOL] [EOL] key = comparison_data . keys ( ) [EOL] assert len ( key ) == [number] , [string] [EOL] centre_names = list ( key ) [ [number] ] [EOL] [EOL] field_overviews = { centre_name : pd . read_csv ( os . path . join ( input_directory , timestamp , centre_name , [string] ) , index_col = [number] , ) for centre_name in centre_names } [EOL] [EOL] output_filepath = [string] . format ( output_directory , os . path . basename ( input_directory ) , timestamp ) [EOL] _create_report ( output_filepath , comparison_data [ centre_names ] , field_overviews ) [EOL] [EOL] [EOL] def _create_report ( output_filepath , comparison_data , field_overviews ) : [EOL] [docstring] [EOL] nbccc_fields = field_overviews [ [string] ] [EOL] rccc_fields = field_overviews [ [string] ] [EOL] tests = _create_comparison_table ( comparison_data ) [EOL] [EOL] with open ( [string] ) as file : [EOL] template_string = file . read ( ) [EOL] [EOL] template = Template ( template_string ) [EOL] html = template . render ( nbccc_fields = nbccc_fields . to_html ( ) , rccc_fields = rccc_fields . to_html ( ) , results = tests . to_html ( ) , ) [EOL] [EOL] display ( Markdown ( [string] . format ( output_filepath ) ) ) [EOL] display ( HTML ( html ) ) [EOL] [EOL] with open ( output_filepath , [string] ) as html_file : [EOL] html_file . write ( html ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List , Any , Dict , Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] import datetime [EOL] import json [EOL] import os [EOL] [EOL] import numpy as np [EOL] [EOL] import mosaiq_connection as msq_c [EOL] import mosaiq_field_export as msq_x [EOL] from IPython . display import Markdown , display [EOL] [EOL] msq_x . use_mlc_missing_byte_workaround ( ) [EOL] [EOL] [EOL] def display_fields ( patient_ids , sql_users , sql_servers ) : [EOL] [docstring] [EOL] with msq_c . multi_mosaiq_connect ( sql_users , sql_servers ) as cursors : [EOL] for key in sql_servers : [EOL] display ( Markdown ( [string] . format ( key . upper ( ) , patient_ids [ key ] ) ) ) [EOL] display ( msq_x . patient_fields ( cursors [ key ] , patient_ids [ key ] ) ) [EOL] [EOL] [EOL] def display_fields_overview ( fields , sql_users , sql_servers ) : [EOL] [docstring] [EOL] with msq_c . multi_mosaiq_connect ( sql_users , sql_servers ) as cursors : [EOL] for key in sql_servers : [EOL] display ( Markdown ( [string] . format ( key . upper ( ) ) ) ) [EOL] fields_overview = msq_x . create_fields_overview ( cursors [ key ] , fields [ key ] ) [EOL] display ( fields_overview ) [EOL] print ( [string] . format ( np . sum ( fields_overview [ [string] ] . values . astype ( float ) ) ) ) [EOL] [EOL] [EOL] def _pull_fields_sql_data ( fields , sql_users , sql_servers ) : [EOL] [docstring] [EOL] with msq_c . multi_mosaiq_connect ( sql_users , sql_servers ) as cursors : [EOL] data = dict ( ) [EOL] for key , cursor in cursors . items ( ) : [EOL] data [ key ] = msq_x . pull_sql_data ( cursor , fields [ key ] ) [EOL] [EOL] return data [EOL] [EOL] [EOL] def _create_directory ( directory ) : [EOL] [docstring] [EOL] if not os . path . exists ( directory ) : [EOL] os . makedirs ( directory ) [EOL] [EOL] [EOL] def save_data_to_csv ( directory , fields , sql_users , sql_servers ) : [EOL] [docstring] [EOL] _create_directory ( directory ) [EOL] centre_data = _pull_fields_sql_data ( fields , sql_users , sql_servers ) [EOL] [EOL] timestamp = [string] . format ( datetime . datetime . now ( ) ) [EOL] timestamped_directory = os . path . join ( directory , timestamp ) [EOL] _create_directory ( timestamped_directory ) [EOL] [EOL] for centre_key , data_container in centre_data . items ( ) : [EOL] centre_directory = os . path . join ( timestamped_directory , centre_key ) [EOL] _create_directory ( centre_directory ) [EOL] [EOL] testing_file_contents = [ ( item [ [string] ] , item . pop ( [string] ) ) for item in data_container [ [string] ] ] [EOL] [EOL] filepath = os . path . join ( centre_directory , [string] ) [EOL] with open ( filepath , [string] ) as file : [EOL] file . write ( json . dumps ( data_container [ [string] ] , indent = [number] , sort_keys = True ) ) [EOL] [EOL] for file_name , file_contents in data_container [ [string] ] . items ( ) : [EOL] filepath = os . path . join ( centre_directory , file_name ) [EOL] file_contents . to_csv ( filepath ) [EOL] [EOL] for file_name , file_contents in testing_file_contents : [EOL] filepath = os . path . join ( centre_directory , file_name ) [EOL] file_contents . to_csv ( filepath ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import json [EOL] import os [EOL] import sys [EOL] import traceback [EOL] from glob import glob [EOL] [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] import requests [EOL] import win32com . client [EOL] import yaml [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] broken_link_record = [string] [EOL] key_filepath = [string] [EOL] [EOL] [EOL] def send_email ( subject , message ) : [EOL] with open ( key_filepath , [string] ) as keyfile : [EOL] key = keyfile . read ( ) [EOL] [EOL] return requests . post ( [string] , auth = ( [string] , key ) , data = { [string] : [string] , [string] : [ [string] ] , [string] : subject , [string] : message , } , ) [EOL] [EOL] [EOL] def check_links ( ) : [EOL] top_level = glob ( [string] ) [EOL] one_deep = glob ( [string] ) [EOL] two_deep = glob ( [string] ) [EOL] three_deep = glob ( [string] ) [EOL] all_paths = np . array ( top_level + one_deep + two_deep + three_deep ) [EOL] [EOL] shell = win32com . client . Dispatch ( [string] ) [EOL] [EOL] all_shorcuts = [ shell . CreateShortCut ( path ) for path in all_paths ] [EOL] [EOL] target_exists = np . array ( [ os . path . exists ( shortcut . Targetpath ) for shortcut in all_shorcuts ] ) [EOL] [EOL] current_broken = all_paths [ np . invert ( target_exists ) ] . tolist ( ) [EOL] [EOL] with open ( broken_link_record , [string] ) as file : [EOL] previous_broken = yaml . load ( file ) [EOL] [EOL] new_broken = np . setdiff1d ( current_broken , previous_broken ) [EOL] [EOL] if len ( new_broken ) > [number] : [EOL] message = ( [string] + json . dumps ( new_broken . tolist ( ) ) + [string] + json . dumps ( current_broken ) ) [EOL] send_email ( [string] , message ) [EOL] [EOL] with open ( broken_link_record , [string] ) as outfile : [EOL] yaml . dump ( current_broken , outfile ) [EOL] [EOL] [EOL] try : [EOL] check_links ( ) [EOL] except Exception : [EOL] send_email ( [string] , [string] . join ( traceback . format_exc ( ) ) ) [EOL] raise [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import pathlib [EOL] import json [EOL] import pathlib [EOL] [EOL] import tomlkit [EOL] [EOL] PYPROJECT_TOML_PATH = ( pathlib . Path ( __file__ ) . resolve ( ) . parent . parent . joinpath ( [string] ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] with open ( PYPROJECT_TOML_PATH ) as f : [EOL] pyproject_contents = tomlkit . loads ( f . read ( ) ) [EOL] [EOL] deps = pyproject_contents [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] extras = { } [EOL] [EOL] for key in deps : [EOL] value = deps [ key ] [EOL] comment = value . trivia . comment [EOL] [EOL] if comment . startswith ( [string] ) : [EOL] split = comment . split ( [string] ) [EOL] assert len ( split ) == [number] [EOL] groups = json . loads ( split [ - [number] ] ) [EOL] [EOL] for group in groups : [EOL] try : [EOL] extras [ group ] . append ( key ) [EOL] except KeyError : [EOL] extras [ group ] = [ key ] [EOL] [EOL] pyproject_contents [ [string] ] [ [string] ] [ [string] ] = extras [EOL] [EOL] with open ( PYPROJECT_TOML_PATH , [string] ) as f : [EOL] f . write ( tomlkit . dumps ( pyproject_contents ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] if __name__ == [string] : [EOL] [EOL] import os [EOL] [EOL] os . system ( [string] ) [EOL] [EOL] import pydicom [EOL] import pymedphys [EOL] [EOL] reference_filepath = pymedphys . data_path ( [string] ) [EOL] evaluation_filepath = pymedphys . data_path ( [string] ) [EOL] [EOL] reference = pydicom . read_file ( str ( reference_filepath ) , force = True ) [EOL] evaluation = pydicom . read_file ( str ( evaluation_filepath ) , force = True ) [EOL] [EOL] axes_reference , dose_reference = pymedphys . dicom . zyx_and_dose_from_dataset ( reference ) [EOL] axes_evaluation , dose_evaluation = pymedphys . dicom . zyx_and_dose_from_dataset ( evaluation ) [EOL] [EOL] gamma_options = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : None , [string] : True , [string] : [number] ** [number] , } [EOL] [EOL] gamma = pymedphys . gamma ( axes_reference , dose_reference , axes_evaluation , dose_evaluation , ** gamma_options ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import streamlit as st [EOL] [EOL] from pymedphys import _losslessjpeg as lljpeg [EOL] from pymedphys . _streamlit import rerun as st_rerun [EOL] from pymedphys . _wlutz import findbb , findfield , imginterp , iview , reporting [EOL] [EOL] st_rerun . autoreload ( [ st_rerun ] ) [EOL] [EOL] [EOL] st . title ( [string] ) [EOL] [EOL] DATAEXCHANGE_DIRECTORY = pathlib . Path ( [string] ) [EOL] IVIEW_DB = DATAEXCHANGE_DIRECTORY . joinpath ( [string] ) [EOL] IMAGES_DIR = IVIEW_DB . joinpath ( [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] number_of_images = st . number_input ( [string] , [number] ) [EOL] [EOL] width = st . number_input ( [string] , [number] ) [EOL] length = st . number_input ( [string] , [number] ) [EOL] edge_lengths = [ width , length ] [EOL] [EOL] initial_rotation = [number] [EOL] bb_diameter = st . number_input ( [string] , [number] ) [EOL] penumbra = st . number_input ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ st . cache ( ) def get_file_list ( ) : [EOL] return tuple ( [ str ( path ) for path in IMAGES_DIR . glob ( [string] ) ] ) [EOL] [EOL] [EOL] files = get_file_list ( ) [EOL] most_recent = sorted ( files , key = lambda t : - os . stat ( t ) . st_mtime ) [ [number] : number_of_images ] [EOL] [EOL] image_path = st . radio ( [string] , options = most_recent ) [EOL] [EOL] [EOL] @ st . cache ( ) def read_image ( path ) : [EOL] return lljpeg . imread ( path ) [EOL] [EOL] [EOL] plt . imshow ( read_image ( image_path ) ) [EOL] st . pyplot ( ) [EOL] [EOL] if st . button ( [string] ) : [EOL] img = read_image ( image_path ) [EOL] x , y , img = iview . iview_image_transform ( img ) [EOL] field = imginterp . create_interpolated_field ( x , y , img ) [EOL] initial_centre = findfield . get_centre_of_mass ( x , y , img ) [EOL] ( field_centre , field_rotation ) = findfield . field_centre_and_rotation_refining ( field , edge_lengths , penumbra , initial_centre , fixed_rotation = [number] ) [EOL] [EOL] bb_centre = findbb . optimise_bb_centre ( field , bb_diameter , edge_lengths , penumbra , field_centre , field_rotation ) [EOL] fig = reporting . image_analysis_figure ( x , y , img , bb_centre , field_centre , field_rotation , bb_diameter , edge_lengths , penumbra , ) [EOL] [EOL] st . write ( fig ) [EOL] st . pyplot ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] import re [EOL] from glob import glob [EOL] [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] import streamlit as st [EOL] [EOL] import pymedphys . electronfactors as electronfactors [EOL] [EOL] [docstring] [EOL] [EOL] patient_id = st . text_input ( [string] ) [EOL] [EOL] if patient_id == [string] : [EOL] st . stop ( ) [EOL] [EOL] [EOL] rccc_string_search_pattern = [string] . format ( patient_id ) [EOL] rccc_filepath_list = glob ( rccc_string_search_pattern ) [EOL] [EOL] nbccc_string_search_pattern = [string] . format ( patient_id ) [EOL] nbccc_filepath_list = glob ( nbccc_string_search_pattern ) [EOL] [EOL] sash_string_search_pattern = [string] . format ( patient_id ) [EOL] sash_filepath_list = glob ( sash_string_search_pattern ) [EOL] [EOL] [EOL] filepath_list = np . concatenate ( [ rccc_filepath_list , nbccc_filepath_list , sash_filepath_list ] ) [EOL] [EOL] [EOL] electronmodel_regex = [string] [EOL] applicator_regex = [string] [EOL] [EOL] insert_data = dict ( ) [comment] [EOL] [EOL] for telfilepath in filepath_list : [EOL] insert_data [ telfilepath ] = dict ( ) [EOL] [EOL] with open ( telfilepath , [string] ) as file : [EOL] telfilecontents = np . array ( file . read ( ) . splitlines ( ) ) [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] for i , item in enumerate ( telfilecontents ) : [EOL] if re . search ( electronmodel_regex , item ) : [EOL] insert_data [ telfilepath ] [ [string] ] += [ i ] [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] = [ re . search ( applicator_regex , telfilecontents [ i + [number] ] ) . group ( [number] ) for i in insert_data [ telfilepath ] [ [string] ] ] [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] = [ re . search ( electronmodel_regex , telfilecontents [ i ] ) . group ( [number] ) for i in insert_data [ telfilepath ] [ [string] ] ] [EOL] [EOL] [EOL] for telfilepath in filepath_list : [EOL] with open ( telfilepath , [string] ) as file : [EOL] telfilecontents = np . array ( file . read ( ) . splitlines ( ) ) [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] [EOL] for i , index in enumerate ( insert_data [ telfilepath ] [ [string] ] ) : [EOL] insert_initial_range = telfilecontents [ index + [number] : : ] [comment] [EOL] insert_stop = np . where ( insert_initial_range == [string] ) [ [number] ] [ [number] ] [comment] [EOL] [EOL] insert_coords_string = insert_initial_range [ : insert_stop ] [EOL] insert_coords = np . fromstring ( [string] . join ( insert_coords_string ) , sep = [string] ) [EOL] insert_data [ telfilepath ] [ [string] ] . append ( insert_coords [ [number] : : [number] ] / [number] ) [EOL] insert_data [ telfilepath ] [ [string] ] . append ( insert_coords [ [number] : : [number] ] / [number] ) [EOL] [EOL] [EOL] for telfilepath in filepath_list : [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] [EOL] for i in range ( len ( insert_data [ telfilepath ] [ [string] ] ) ) : [EOL] [EOL] width , length , circle_centre = electronfactors . parameterise_insert ( insert_data [ telfilepath ] [ [string] ] [ i ] , insert_data [ telfilepath ] [ [string] ] [ i ] ) [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] . append ( width ) [EOL] insert_data [ telfilepath ] [ [string] ] . append ( length ) [EOL] insert_data [ telfilepath ] [ [string] ] . append ( circle_centre ) [EOL] [EOL] insert_data [ telfilepath ] [ [string] ] . append ( electronfactors . convert2_ratio_perim_area ( width , length ) ) [EOL] [EOL] [EOL] data_filename = [string] [EOL] data = pd . read_csv ( data_filename ) [EOL] [EOL] width_data = data [ [string] ] [EOL] length_data = data [ [string] ] [EOL] factor_data = data [ [string] ] [EOL] [EOL] p_on_a_data = electronfactors . convert2_ratio_perim_area ( width_data , length_data ) [EOL] [EOL] [EOL] for telfilepath in filepath_list : [EOL] insert_data [ telfilepath ] [ [string] ] = [ ] [EOL] [EOL] for i in range ( len ( insert_data [ telfilepath ] [ [string] ] ) ) : [EOL] applicator = float ( insert_data [ telfilepath ] [ [string] ] [ i ] ) [EOL] energy = float ( insert_data [ telfilepath ] [ [string] ] [ i ] ) [EOL] ssd = [number] [EOL] [EOL] reference = ( ( data [ [string] ] == energy ) & ( data [ [string] ] == applicator ) & ( data [ [string] ] == ssd ) ) [EOL] [EOL] number_of_measurements = np . sum ( reference ) [EOL] [EOL] if number_of_measurements < [number] : [EOL] insert_data [ telfilepath ] [ [string] ] . append ( np . nan ) [EOL] else : [EOL] insert_data [ telfilepath ] [ [string] ] . append ( electronfactors . spline_model_with_deformability ( insert_data [ telfilepath ] [ [string] ] , insert_data [ telfilepath ] [ [string] ] , width_data [ reference ] , p_on_a_data [ reference ] , factor_data [ reference ] , ) [ [number] ] ) [EOL] [EOL] [EOL] def visual_circle_and_ellipse ( insert_x , insert_y , width , length , circle_centre ) : [EOL] [EOL] t = np . linspace ( [number] , [number] * np . pi ) [EOL] circle = { [string] : width / [number] * np . sin ( t ) + circle_centre [ [number] ] , [string] : width / [number] * np . cos ( t ) + circle_centre [ [number] ] , } [EOL] [EOL] ( x_shift , y_shift , rotation_angle , ) = electronfactors . visual_alignment_of_equivalent_ellipse ( insert_x , insert_y , width , length , None ) [EOL] [EOL] rotation_matrix = np . array ( [ [ np . cos ( rotation_angle ) , - np . sin ( rotation_angle ) ] , [ np . sin ( rotation_angle ) , np . cos ( rotation_angle ) ] , ] ) [EOL] [EOL] ellipse = np . array ( [ length / [number] * np . sin ( t ) , width / [number] * np . cos ( t ) ] ) . T [EOL] [EOL] rotated_ellipse = ellipse @ rotation_matrix [EOL] [EOL] translated_ellipse = rotated_ellipse + np . array ( [ y_shift , x_shift ] ) [EOL] ellipse = { [string] : translated_ellipse [ : , [number] ] , [string] : translated_ellipse [ : , [number] ] } [EOL] [EOL] return circle , ellipse [EOL] [EOL] [EOL] def plot_insert ( insert_x , insert_y , width , length , circle_centre ) : [EOL] circle , ellipse = visual_circle_and_ellipse ( insert_x , insert_y , width , length , circle_centre ) [EOL] [EOL] plt . figure ( ) [EOL] plt . plot ( insert_x , insert_y ) [EOL] plt . axis ( [string] ) [EOL] [EOL] plt . plot ( circle [ [string] ] , circle [ [string] ] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( True ) [EOL] [EOL] plt . plot ( ellipse [ [string] ] , ellipse [ [string] ] ) [EOL] [EOL] [EOL] def plot_model ( width_data , length_data , factor_data ) : [EOL] [EOL] i , j , k = electronfactors . create_transformed_mesh ( width_data , length_data , factor_data ) [EOL] model_width , model_length , model_factor = i , j , k [EOL] [EOL] vmin = np . nanmin ( np . concatenate ( [ model_factor . ravel ( ) , factor_data . ravel ( ) ] ) ) [EOL] vmax = np . nanmax ( np . concatenate ( [ model_factor . ravel ( ) , factor_data . ravel ( ) ] ) ) [EOL] [EOL] plt . scatter ( width_data , length_data , s = [number] , c = factor_data , cmap = [string] , vmin = vmin , vmax = vmax , zorder = [number] , ) [EOL] [EOL] plt . colorbar ( ) [EOL] [EOL] cs = plt . contour ( model_width , model_length , model_factor , [number] , vmin = vmin , vmax = vmax ) [EOL] [EOL] plt . clabel ( cs , cs . levels [ : : [number] ] , inline = True ) [EOL] [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [EOL] [EOL] for telfilepath in filepath_list : [EOL] [docstring] [EOL] st . write ( [string] . format ( telfilepath ) ) [EOL] [EOL] for i in range ( len ( insert_data [ telfilepath ] [ [string] ] ) ) : [EOL] applicator = float ( insert_data [ telfilepath ] [ [string] ] [ i ] ) [EOL] energy = float ( insert_data [ telfilepath ] [ [string] ] [ i ] ) [EOL] ssd = [number] [EOL] [EOL] st . write ( [string] . format ( applicator , energy ) ) [EOL] [EOL] width = insert_data [ telfilepath ] [ [string] ] [ i ] [EOL] length = insert_data [ telfilepath ] [ [string] ] [ i ] [EOL] [EOL] plt . figure ( ) [EOL] plot_insert ( insert_data [ telfilepath ] [ [string] ] [ i ] , insert_data [ telfilepath ] [ [string] ] [ i ] , insert_data [ telfilepath ] [ [string] ] [ i ] , insert_data [ telfilepath ] [ [string] ] [ i ] , insert_data [ telfilepath ] [ [string] ] [ i ] , ) [EOL] [EOL] reference = ( ( data [ [string] ] == energy ) & ( data [ [string] ] == applicator ) & ( data [ [string] ] == ssd ) ) [EOL] [EOL] number_of_measurements = np . sum ( reference ) [EOL] [EOL] plt . figure ( ) [EOL] if number_of_measurements < [number] : [EOL] plt . scatter ( width_data [ reference ] , length_data [ reference ] , s = [number] , c = factor_data [ reference ] , cmap = [string] , zorder = [number] , ) [EOL] plt . colorbar ( ) [EOL] else : [EOL] plot_model ( width_data [ reference ] , length_data [ reference ] , factor_data [ reference ] ) [EOL] [EOL] reference_data_table = pd . concat ( [ width_data [ reference ] , length_data [ reference ] , factor_data [ reference ] ] , axis = [number] , ) [EOL] reference_data_table . sort_values ( [ [string] ] , ascending = False , inplace = True , ) [EOL] [EOL] reference_data_table [EOL] [EOL] st . pyplot ( ) [EOL] [EOL] factor = insert_data [ telfilepath ] [ [string] ] [ i ] [EOL] [EOL] st . write ( [string] . format ( width , length , factor ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import pathlib [EOL] import pathlib [EOL] [EOL] import streamlit as st [EOL] [EOL] from pymedphys . _streamlit import rerun as st_rerun [EOL] [EOL] st_rerun . autoreload ( st_rerun ) [EOL] [EOL] HERE = pathlib . Path ( __file__ ) . parent [EOL] [EOL] base = st . config . get_option ( [string] ) [EOL] [EOL] all_links = [ ] [EOL] [EOL] if len ( base ) != [number] : [EOL] base += [string] [EOL] [EOL] for path in HERE . rglob ( [string] ) : [EOL] relative_path = path . relative_to ( HERE ) [EOL] suffix_removed = relative_path . with_suffix ( [string] ) [EOL] [EOL] url = str ( suffix_removed ) . replace ( [string] , [string] ) [EOL] url = f" [string] { base }{ url }" [EOL] [EOL] if suffix_removed . name == [string] : [EOL] url = [string] . join ( url . split ( [string] ) [ : - [number] ] ) [EOL] [EOL] all_links . append ( url ) [EOL] [EOL] markdown_urls = [string] . join ( [ f" [string] { link } [string] { link } [string] " for link in all_links ] ) [EOL] markdown_urls [EOL] [EOL] [EOL] with open ( HERE . joinpath ( [string] ) ) as f : [EOL] file_contents = f . read ( ) [EOL] [EOL] st . write ( f""" [string] { file_contents } [string] """ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] import pathlib [EOL] import shutil [EOL] import tempfile [EOL] [EOL] import streamlit as st [EOL] [EOL] from pymedphys . _streamlit import misc as st_misc [EOL] from pymedphys . _streamlit import monaco as st_monaco [EOL] from pymedphys . _streamlit import rerun as st_rerun [EOL] [EOL] HERE = pathlib . Path ( __file__ ) . parent . resolve ( ) [EOL] ANON_DEMOGRAPHIC_FILE = HERE . joinpath ( [string] ) [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [docstring] [EOL] [EOL] ( monaco_site , monaco_directory , patient_id , plan_directory , patient_directory , ) = st_monaco . monaco_patient_directory_picker ( advanced_mode_local = True ) [EOL] [EOL] f" [string] { patient_directory } [string] " [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] _ , export_directory = st_misc . get_site_and_directory ( [string] , [string] , default = monaco_site , key = [string] , ) [EOL] [EOL] f" [string] { export_directory } [string] " [EOL] [EOL] zip_path = pathlib . Path ( export_directory ) . joinpath ( f"{ patient_id } [string] " ) [EOL] [EOL] f" [string] { zip_path } [string] " [EOL] [EOL] if zip_path . exists ( ) : [EOL] st . write ( FileExistsError ( [string] ) ) [EOL] if st . button ( [string] ) : [EOL] zip_path . unlink ( ) [EOL] st_rerun . rerun ( ) [EOL] [EOL] st . stop ( ) [EOL] [EOL] [EOL] if st . button ( [string] ) : [EOL] with tempfile . TemporaryDirectory ( ) as temp_dir : [EOL] pl_temp_dir = pathlib . Path ( temp_dir ) [EOL] new_temp_location = pl_temp_dir . joinpath ( patient_directory . name ) [EOL] [EOL] [docstring] [EOL] [EOL] shutil . copytree ( patient_directory , new_temp_location , ignore = shutil . ignore_patterns ( [string] , [string] ) , ) [EOL] [EOL] [docstring] [EOL] [EOL] new_demographic_file = new_temp_location . joinpath ( f" [string] { patient_id }" ) [EOL] [EOL] shutil . copy2 ( ANON_DEMOGRAPHIC_FILE , new_demographic_file ) [EOL] with open ( new_demographic_file , [string] ) as f : [EOL] demographic_data = f . readlines ( ) [EOL] [EOL] demographic_data [ [number] ] = demographic_data [ [number] ] . replace ( [string] , patient_id ) [EOL] [EOL] with open ( new_demographic_file , [string] ) as f : [EOL] f . writelines ( demographic_data ) [EOL] [EOL] [docstring] [EOL] [EOL] shutil . make_archive ( str ( zip_path . with_suffix ( [string] ) ) , [string] , root_dir = str ( pl_temp_dir . resolve ( ) ) , base_dir = f"{ patient_directory . name }" , ) [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from pymedphys . _streamlit . constants import BASE_URL_PATHS , HOSTNAME , NAMES [EOL] [EOL] list_of_links = [ f" [string] { name } [string] { HOSTNAME }{ base_url_path } [string] " for name , base_url_path in zip ( NAMES , BASE_URL_PATHS ) ] [EOL] markdown = [string] . join ( list_of_links ) [EOL] [EOL] markdown [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] import pymssql [EOL] [EOL] import streamlit as st [EOL] [EOL] from pymedphys . _mosaiq import helpers as msq_helpers [EOL] from pymedphys . _streamlit import mosaiq as st_mosaiq [EOL] from pymedphys . _streamlit import rerun as st_rerun [EOL] [EOL] st_rerun . autoreload ( [ st_mosaiq , st_rerun , msq_helpers ] ) [EOL] [EOL] centres = [ [string] , [string] , [string] ] [EOL] servers = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] physics_locations = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] cursors = { centre : st_mosaiq . get_mosaiq_cursor_in_bucket ( servers [ centre ] ) for centre in centres } [EOL] [EOL] [docstring] [EOL] [EOL] if st . button ( [string] ) : [EOL] st_rerun . rerun ( ) [EOL] [EOL] for centre in centres : [EOL] f" [string] { centre . upper ( ) }" [EOL] [EOL] cursor_bucket = cursors [ centre ] [EOL] physics_location = physics_locations [ centre ] [EOL] [EOL] try : [EOL] table = msq_helpers . get_incomplete_qcls ( cursor_bucket [ [string] ] , physics_location ) [EOL] except ( pymssql . InterfaceError , pymssql . OperationalError ) as e : [EOL] st . write ( e ) [EOL] cursor_bucket [ [string] ] = st_mosaiq . uncached_get_mosaiq_cursor ( servers [ centre ] ) [EOL] table = msq_helpers . get_incomplete_qcls ( cursor_bucket [ [string] ] , physics_location ) [EOL] [EOL] for index , row in table . iterrows ( ) : [EOL] patient_header = ( f" [string] { row . patient_id } [string] { str ( row . last_name ) . upper ( ) } [string] " f"{ str ( row . first_name ) . lower ( ) . capitalize ( ) }" ) [EOL] st . write ( patient_header ) [EOL] [EOL] f" [string] { row . due } [string] " [EOL] if row . instructions : [EOL] f" [string] { row . instructions } [string] " [EOL] [EOL] if row . comment : [EOL] f" [string] { row . comment } [string] " [EOL] [EOL] f" [string] { row . task } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Union , Dict , Any [EOL] import typing [EOL] import functools [EOL] import functools [EOL] import logging [EOL] [EOL] from pymedphys . _imports import pydicom [EOL] [EOL] from pymedphys . _dicom . constants import PYMEDPHYS_ROOT_UID [EOL] [EOL] REPLACEMENT_TO_VR_MAP = { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [number] . to_bytes ( [number] , [string] ) : [ [string] , [string] , [string] ] , [string] : [ [string] ] , PYMEDPHYS_ROOT_UID : [ [string] ] , [number] : [ [string] ] , } [EOL] [EOL] VR_TO_REPLACEMENT_MAP = { } [EOL] for value , keys in REPLACEMENT_TO_VR_MAP . items ( ) : [EOL] for key in keys : [EOL] VR_TO_REPLACEMENT_MAP [ key ] = value [EOL] [EOL] [EOL] def _get_vr_anonymous_hardcode_replacement_value ( current_value , value_representation ) : [EOL] [docstring] [EOL] if current_value is None : [EOL] [comment] [EOL] [comment] [EOL] logging . debug ( [string] ) [EOL] [EOL] if value_representation == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return [ pydicom . Dataset ( ) ] [EOL] [EOL] return VR_TO_REPLACEMENT_MAP [ value_representation ] [EOL] [EOL] [EOL] _keys = list ( VR_TO_REPLACEMENT_MAP . keys ( ) ) [EOL] _keys . append ( [string] ) [EOL] [EOL] ANONYMISATION_HARDCODE_DISPATCH = { key : functools . partial ( _get_vr_anonymous_hardcode_replacement_value , value_representation = key ) for key in _keys } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Union[builtins.bytes,builtins.int,builtins.str],typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Union[builtins.bytes,builtins.int,builtins.str],typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,functools.partial[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import os [EOL] [EOL] import numpy as np [EOL] [EOL] from pymedphys . _experimental . paulking . narrow_png import read_narrow_png as from_image [EOL] [EOL] DATA_DIRECTORY = os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] [EOL] def test_read_narrow_png ( ) : [EOL] vert_strip = os . path . join ( DATA_DIRECTORY , [string] ) [EOL] horz_strip = os . path . join ( DATA_DIRECTORY , [string] ) [EOL] assert np . allclose ( from_image ( vert_strip ) [ [number] ] [ [number] ] , from_image ( horz_strip ) [ [number] ] [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] import numpy as np [EOL] [EOL] from pymedphys . _experimental . paulking . collequivalent import ( mlc_equivalent_square_fs as equivalent_square , ) [EOL] from pymedphys . _utilities . constants import A_LEAF_TYPE , AGILITY [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test_equivalent_mlc ( ) : [EOL] [docstring] [EOL] mlc_segments = [ ( [number] , [number] ) ] * [number] [EOL] mlc_segments += [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] [EOL] mlc_segments += [ ( [number] , [number] ) ] * [number] [EOL] [EOL] mlc_segments = np . array ( mlc_segments ) * [number] [comment] [EOL] [EOL] assert abs ( equivalent_square ( mlc_segments , A_LEAF_TYPE ) - [number] ) < [number] [EOL] [EOL] [EOL] def an_equivalent_square ( square_size ) : [EOL] open_leaves = square_size // [number] [EOL] [EOL] [comment] [EOL] assert open_leaves == square_size / [number] [EOL] [EOL] num_remaining_leaves = [number] - open_leaves [EOL] leaves_on_top = num_remaining_leaves // [number] [EOL] leaves_on_bottom = num_remaining_leaves - leaves_on_top [EOL] [EOL] mlc_segments = ( [ ( [number] , [number] ) ] * leaves_on_top + [ ( square_size / [number] , square_size / [number] ) ] * open_leaves + [ ( [number] , [number] ) ] * leaves_on_bottom ) [EOL] [EOL] assert equivalent_square ( mlc_segments , AGILITY ) == square_size [EOL] [EOL] [EOL] [comment] [EOL] def test_equivalent_squares ( ) : [EOL] sizes_to_test = ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] for square_size in sizes_to_test : [EOL] an_equivalent_square ( square_size ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import os [EOL] import shutil [EOL] from glob import glob [EOL] [EOL] ARCHIVE_DIRECTORY = [string] [EOL] HOLDING_DIRECTORY = [string] [EOL] CLINICAL_DIRECTORY = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def find_archived_folder ( patient_id ) : [EOL] string_id = str ( patient_id ) . zfill ( [number] ) [EOL] search_string = [string] . format ( ARCHIVE_DIRECTORY , string_id ) [EOL] patient_folders_found = glob ( search_string ) [EOL] [EOL] assert not ( len ( patient_folders_found ) == [number] ) , [string] [EOL] assert not ( len ( patient_folders_found ) > [number] ) , [string] [EOL] [EOL] patient_folder_to_move = patient_folders_found [ [number] ] [EOL] [EOL] return patient_folder_to_move [EOL] [EOL] [EOL] def display_patient_name ( patient_id ) : [EOL] patient_folder_to_move = find_archived_folder ( patient_id ) [EOL] [EOL] demographic_search_string = os . path . join ( patient_folder_to_move , [string] ) [EOL] demographic_file_list = glob ( demographic_search_string ) [EOL] [EOL] assert not ( len ( demographic_file_list ) == [number] ) , [string] [EOL] assert not ( len ( demographic_file_list ) > [number] ) , [string] [EOL] [EOL] with open ( demographic_file_list [ [number] ] , [string] ) as file : [EOL] lines = file . readlines ( ) [EOL] [EOL] return lines [ [number] ] . strip ( [string] ) [EOL] [EOL] [EOL] def get_folder_names ( patient_id ) : [EOL] patient_folder_to_move = find_archived_folder ( patient_id ) [EOL] patient_folder_name = os . path . basename ( patient_folder_to_move ) [EOL] [EOL] holding_location = os . path . join ( HOLDING_DIRECTORY , patient_folder_name ) [EOL] location_to_move_to = os . path . join ( CLINICAL_DIRECTORY , patient_folder_name ) [EOL] [EOL] return patient_folder_to_move , holding_location , location_to_move_to [EOL] [EOL] [EOL] def folder_size ( path ) : [EOL] total = [number] [EOL] for entry in os . scandir ( path ) : [EOL] if entry . is_file ( ) : [EOL] total += entry . stat ( ) . st_size [EOL] elif entry . is_dir ( ) : [EOL] total += folder_size ( entry . path ) [EOL] return total [EOL] [EOL] [EOL] def get_origin_folder_size ( patient_id ) : [EOL] patient_folder_to_move , _ , _ = get_folder_names ( patient_id ) [EOL] return folder_size ( patient_folder_to_move ) [EOL] [EOL] [EOL] def get_proportion_moved ( patient_id , origin_size ) : [EOL] _ , holding_location , location_to_move_to = get_folder_names ( patient_id ) [EOL] if os . path . exists ( location_to_move_to ) : [EOL] return [number] [EOL] elif not os . path . exists ( holding_location ) : [EOL] return [number] [EOL] else : [EOL] return folder_size ( holding_location ) / origin_size [EOL] [EOL] [EOL] def check_patient_name ( patient_id , input_patient_name ) : [EOL] demographic_patient_name = display_patient_name ( patient_id ) [EOL] assert ( input_patient_name == demographic_patient_name ) , [string] [EOL] [EOL] [EOL] def check_folders ( patient_id ) : [EOL] patient_folder_to_move , holding_location , location_to_move_to = get_folder_names ( patient_id ) [EOL] [EOL] assert os . path . exists ( patient_folder_to_move ) , [string] [EOL] assert not ( os . path . exists ( location_to_move_to ) ) , [string] [EOL] assert not ( os . path . exists ( holding_location ) ) , [string] [EOL] [EOL] [EOL] def dearchive_patient ( patient_id , input_patient_name ) : [EOL] check_patient_name ( patient_id , input_patient_name ) [EOL] check_folders ( patient_id ) [EOL] patient_folder_to_move , holding_location , location_to_move_to = get_folder_names ( patient_id ) [EOL] [EOL] shutil . move ( patient_folder_to_move , holding_location ) [EOL] os . rename ( holding_location , location_to_move_to ) [EOL] [EOL] assert not ( os . path . exists ( patient_folder_to_move ) ) , [string] [EOL] assert os . path . exists ( location_to_move_to ) , [string] [EOL] assert not ( os . path . exists ( holding_location ) ) , [string] [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import glob [EOL] [EOL] [EOL] def get_patient_paths ( data_path ) : [EOL] patient_paths = glob . glob ( data_path + [string] ) [EOL] return patient_paths [EOL] [EOL] [EOL] def get_input_paths ( patient_path ) : [EOL] input_paths = glob . glob ( patient_path + [string] , recursive = True ) [EOL] return input_paths [EOL] [EOL] [EOL] def get_label_paths ( patient_path ) : [EOL] label_paths = glob . glob ( patient_path + [string] , recursive = True ) [EOL] return label_paths [EOL] [EOL] [EOL] def flatten_list ( top_list ) : [EOL] return [ item for sublist in top_list for item in sublist ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Tuple [EOL] import typing [EOL] import tensorflow as tf [EOL] [EOL] [EOL] def model ( grid_size = [number] , output_channels = [number] ) : [EOL] def encode ( x , convs , filters , kernel , drop = False , pool = True , norm = True ) : [EOL] [comment] [EOL] for _ in range ( convs ) : [EOL] x = tf . keras . layers . Conv2D ( filters , kernel , padding = [string] , kernel_initializer = [string] ) ( x ) [EOL] if norm is True : [EOL] x = tf . keras . layers . BatchNormalization ( ) ( x ) [EOL] x = tf . keras . layers . Activation ( [string] ) ( x ) [EOL] [EOL] [comment] [EOL] skip = x [EOL] [EOL] [comment] [EOL] if drop is True : [EOL] x = tf . keras . layers . Dropout ( [number] ) ( x ) [EOL] if pool is True : [EOL] x = tf . keras . layers . Conv2D ( filters , kernel , strides = [number] , padding = [string] , kernel_initializer = [string] , ) ( x ) [EOL] if norm is True : [EOL] x = tf . keras . layers . BatchNormalization ( ) ( x ) [EOL] x = tf . keras . layers . Activation ( [string] ) ( x ) [EOL] [EOL] return x , skip [EOL] [EOL] def decode ( x , skip , convs , filters , kernel , drop = False , norm = False ) : [EOL] [comment] [EOL] x = tf . keras . layers . Conv2DTranspose ( filters , kernel , strides = [number] , padding = [string] , kernel_initializer = [string] ) ( x ) [EOL] [EOL] if norm is True : [EOL] x = tf . keras . layers . BatchNormalization ( ) ( x ) [EOL] [EOL] x = tf . keras . layers . Activation ( [string] ) ( x ) [EOL] [EOL] [comment] [EOL] x = tf . keras . layers . concatenate ( [ skip , x ] , axis = [number] ) [EOL] [EOL] [comment] [EOL] for _ in range ( convs ) : [EOL] x = tf . keras . layers . Conv2D ( filters , kernel , padding = [string] , kernel_initializer = [string] ) ( x ) [EOL] if norm is True : [EOL] x = tf . keras . layers . BatchNormalization ( ) ( x ) [EOL] [EOL] x = tf . keras . layers . Activation ( [string] ) ( x ) [EOL] [EOL] if drop is True : [EOL] x = tf . keras . layers . Dropout ( [number] ) ( x ) [EOL] [EOL] return x [EOL] [EOL] inputs = tf . keras . layers . Input ( ( grid_size , grid_size , [number] ) ) [EOL] [EOL] encoder_args = [ ( [number] , [number] , [number] , False , True , True ) , ( [number] , [number] , [number] , False , True , True ) , ( [number] , [number] , [number] , False , True , True ) , ( [number] , [number] , [number] , False , True , True ) , ( [number] , [number] , [number] , False , True , True ) , ( [number] , [number] , [number] , False , True , True ) , ] [EOL] [EOL] decoder_args = [ ( [number] , [number] , [number] , True , True ) , ( [number] , [number] , [number] , True , True ) , ( [number] , [number] , [number] , False , True ) , ( [number] , [number] , [number] , False , True ) , ( [number] , [number] , [number] , False , True ) , ( [number] , [number] , [number] , False , True ) , ] [EOL] [EOL] outputs = tf . keras . layers . Conv2D ( output_channels , [number] , activation = [string] , padding = [string] , kernel_initializer = [string] , ) [EOL] x = inputs [EOL] skips = [ ] [EOL] [EOL] for args in encoder_args : [EOL] x , skip = encode ( x , * args ) [EOL] skips . append ( skip ) [EOL] [EOL] skips . reverse ( ) [EOL] [EOL] for skip , args in zip ( skips , decoder_args ) : [EOL] x = decode ( x , skip , * args ) [EOL] [EOL] x = outputs ( x ) [EOL] [EOL] return tf . keras . Model ( inputs = inputs , outputs = x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Tuple [EOL] import typing [EOL] import random [EOL] from pathlib import Path [EOL] [EOL] import numpy as np [EOL] from scipy . ndimage . filters import gaussian_filter [EOL] from scipy . ndimage . interpolation import map_coordinates [EOL] [EOL] import skimage . draw [EOL] import skimage . transform [EOL] [EOL] import pydicom [EOL] [EOL] import cv2 [EOL] import tensorflow as tf [EOL] [EOL] [EOL] class make_gen ( tf . keras . utils . Sequence ) : [EOL] def __init__ ( self , input_paths , label_paths , batch_size , grid_size , structure_names , train_mean , train_std , shuffle_on_end = True , augment = True , ) : [EOL] self . input_paths = input_paths [EOL] self . label_paths = label_paths [EOL] self . batch_size = batch_size [EOL] self . batch_size_recall = batch_size [EOL] self . structure_names = structure_names [EOL] self . train_mean = train_mean [EOL] self . train_std = train_std [EOL] self . grid_size = grid_size [EOL] self . shuffle_on_end = shuffle_on_end [EOL] self . augment = augment [EOL] random . shuffle ( self . input_paths ) [EOL] [EOL] def __len__ ( self ) : [EOL] [comment] [EOL] return int ( np . ceil ( len ( self . input_paths ) / float ( self . batch_size ) ) ) [EOL] [EOL] def on_epoch_end ( self ) : [EOL] [docstring] [EOL] if self . shuffle_on_end == True : [EOL] random . shuffle ( self . input_paths ) [EOL] [EOL] self . batch_size = self . batch_size_recall [EOL] [EOL] def standardise ( self , data ) : [EOL] return ( data - self . train_mean ) / self . train_std [EOL] [EOL] def gaussian_noise ( self , img , mean = [number] , sigma = [number] ) : [EOL] img = img . copy ( ) [EOL] noise = np . random . normal ( mean , sigma , img . shape ) [EOL] mask_overflow_upper = img + noise >= [number] [EOL] mask_overflow_lower = img + noise < [number] [EOL] noise [ mask_overflow_upper ] = [number] [EOL] noise [ mask_overflow_lower ] = [number] [EOL] img = np . add ( img , noise , out = img , casting = [string] ) [EOL] return img [EOL] [EOL] def random_crop_resize ( self , img , label , crop_size = [number] ) : [EOL] size_img = img . shape [EOL] size_label = label . shape [EOL] crop_size = random . randint ( crop_size , img . shape [ [number] ] - [number] ) [EOL] crop_size = ( crop_size , crop_size ) [EOL] [EOL] [comment] [EOL] assert crop_size [ [number] ] <= img . shape [ [number] ] and crop_size [ [number] ] <= img . shape [ [number] ] [EOL] [EOL] w , h = img . shape [ : [number] ] [EOL] x , y = np . random . randint ( h - crop_size [ [number] ] ) , np . random . randint ( w - crop_size [ [number] ] ) [EOL] [EOL] img = img [ y : y + crop_size [ [number] ] , x : x + crop_size [ [number] ] , : ] [EOL] img = skimage . transform . resize ( img , size_img ) [EOL] [EOL] label = label [ y : y + crop_size [ [number] ] , x : x + crop_size [ [number] ] , : ] [EOL] label = skimage . transform . resize ( label , size_label ) [EOL] return img , label [EOL] [EOL] def affine_transform ( self , image , label , alpha_affine = [number] , random_state = None ) : [EOL] [EOL] if random_state is None : [EOL] random_state = np . random . RandomState ( None ) [EOL] [EOL] shape = image . shape [EOL] shape_size = shape [ : [number] ] [EOL] center_square = np . float32 ( shape_size ) // [number] [EOL] square_size = min ( shape_size ) // [number] [EOL] pts1 = np . float32 ( [ center_square + square_size , [ center_square [ [number] ] + square_size , center_square [ [number] ] - square_size ] , center_square - square_size , ] ) [EOL] pts2 = pts1 + random_state . uniform ( - alpha_affine , alpha_affine , size = pts1 . shape ) . astype ( np . float32 ) [EOL] M = cv2 . getAffineTransform ( pts1 , pts2 ) [EOL] [EOL] image = cv2 . warpAffine ( image , M , shape_size [ : : - [number] ] , borderMode = cv2 . BORDER_REFLECT_101 ) [EOL] image = image [ ... , np . newaxis ] [EOL] label = cv2 . warpAffine ( label , M , shape_size [ : : - [number] ] , borderMode = cv2 . BORDER_REFLECT_101 ) [EOL] return image , label [EOL] [EOL] def elastic_transform ( self , image , label , alpha , sigma , random_state = None ) : [EOL] [EOL] if random_state is None : [EOL] random_state = np . random . RandomState ( None ) [EOL] [EOL] shape = image . shape [EOL] shape_label = label . shape [EOL] [EOL] dx = ( gaussian_filter ( ( random_state . rand ( * shape ) * [number] - [number] ) , sigma , mode = [string] , cval = [number] ) * alpha ) [EOL] dy = ( gaussian_filter ( ( random_state . rand ( * shape ) * [number] - [number] ) , sigma , mode = [string] , cval = [number] ) * alpha ) [EOL] dz = np . zeros_like ( dx ) [EOL] [EOL] [comment] [EOL] x , y , z = np . meshgrid ( np . arange ( shape [ [number] ] ) , np . arange ( shape [ [number] ] ) , np . arange ( shape [ [number] ] ) ) [EOL] indices = ( np . reshape ( y + dy , ( - [number] , [number] ) ) , np . reshape ( x + dx , ( - [number] , [number] ) ) , np . reshape ( z , ( - [number] , [number] ) ) , ) [EOL] image = map_coordinates ( image , indices , order = [number] , mode = [string] ) . reshape ( shape ) [EOL] [EOL] [comment] [EOL] x , y , z = np . meshgrid ( np . arange ( shape_label [ [number] ] ) , np . arange ( shape_label [ [number] ] ) , np . arange ( shape_label [ [number] ] ) , ) [EOL] indices = ( np . reshape ( y + dy , ( - [number] , [number] ) ) , np . reshape ( x + dx , ( - [number] , [number] ) ) , np . reshape ( z , ( - [number] , [number] ) ) , ) [EOL] label = map_coordinates ( label , indices , order = [number] , mode = [string] ) . reshape ( shape_label ) [EOL] [EOL] return image , label [EOL] [EOL] def data_augment ( self , img , label ) : [EOL] [EOL] chance = [number] [EOL] [comment] [EOL] if random . uniform ( [number] , [number] ) < chance : [EOL] img = cv2 . flip ( img , [number] ) [EOL] label = cv2 . flip ( label , [number] ) [EOL] img = img [ ... , np . newaxis ] [EOL] if len ( label . shape ) == [number] : [EOL] label = label [ ... , np . newaxis ] [EOL] [EOL] [comment] [EOL] if random . uniform ( [number] , [number] ) < chance : [EOL] img , label = self . random_crop_resize ( img , label ) [EOL] if len ( label . shape ) == [number] : [EOL] label = label [ ... , np . newaxis ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if random . uniform ( [number] , [number] ) < chance : [EOL] img , label = self . affine_transform ( img , label , alpha_affine = [number] ) [EOL] if len ( label . shape ) == [number] : [EOL] label = label [ ... , np . newaxis ] [EOL] [EOL] [comment] [EOL] if random . uniform ( [number] , [number] ) < chance : [EOL] img = self . gaussian_noise ( img ) [EOL] [EOL] return img , label [EOL] [EOL] def get_parent_dir ( self , path ) : [EOL] return str ( Path ( path ) . parent . name ) [EOL] [EOL] def get_image_instance ( self , dcm ) : [EOL] try : [EOL] dcm . file_meta . TransferSyntaxUID [EOL] except AttributeError : [EOL] dcm . file_meta . TransferSyntaxUID = pydicom . uid . ImplicitVRLittleEndian [EOL] return dcm . pixel_array [EOL] [EOL] def get_label_instance ( self , dicom_structures , structure_indexes , img_position , img_spacing , img_orientation , ) : [EOL] mask = np . zeros ( shape = ( self . grid_size , self . grid_size , len ( structure_indexes ) ) , dtype = np . float32 , ) [EOL] dx , dy , * rest = img_spacing [EOL] Cx , Cy , * rest = img_position [EOL] Ox , Oy = img_orientation [ [number] ] , img_orientation [ [number] ] [EOL] [EOL] [comment] [EOL] for mask_index , structure_index in enumerate ( structure_indexes ) : [EOL] [comment] [EOL] contours = [ contour . ContourData [ [number] : : [number] ] [ [number] ] for contour in dicom_structures . ROIContourSequence [ structure_index ] . ContourSequence ] [EOL] try : [EOL] [comment] [EOL] indices = [ i for i , z in enumerate ( contours ) if z == img_position [ [number] ] ] [EOL] except : [EOL] continue [EOL] try : [EOL] [comment] [EOL] len ( indices ) [EOL] except : [EOL] [comment] [EOL] indices = [ indices ] [EOL] [EOL] for index in indices : [EOL] xyz = ( dicom_structures . ROIContourSequence [ structure_index ] . ContourSequence [ index ] . ContourData ) [EOL] x = np . array ( xyz [ [number] : : [number] ] ) [EOL] y = np . array ( xyz [ [number] : : [number] ] ) [EOL] r = ( y - Cy ) / dy * Oy [EOL] c = ( x - Cx ) / dx * Ox [EOL] rr , cc = skimage . draw . polygon ( r , c ) [EOL] mask [ rr , cc , mask_index ] = [number] [EOL] [EOL] return mask [EOL] [EOL] def __getitem__ ( self , batch_index ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if ( batch_index + [number] ) * self . batch_size > len ( self . input_paths ) : [EOL] self . batch_size = len ( self . input_paths ) - batch_index * self . batch_size [EOL] [EOL] [comment] [EOL] batch_paths = self . input_paths [ batch_index * self . batch_size : ( batch_index + [number] ) * self . batch_size ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] batch_inputs = [ ] [EOL] batch_labels = [ ] [EOL] [EOL] for img_path in batch_paths : [EOL] [EOL] [comment] [EOL] dcm = pydicom . dcmread ( img_path , force = True ) [EOL] [comment] [EOL] img_position = dcm . ImagePositionPatient [EOL] [comment] [EOL] img_spacing = [ float ( x ) for x in dcm . PixelSpacing ] + [ float ( dcm . SliceThickness ) ] [EOL] [comment] [EOL] img_orientation = dcm . ImageOrientationPatient [EOL] [EOL] [comment] [EOL] img = self . get_image_instance ( dcm ) [EOL] [comment] [EOL] img = self . standardise ( img ) [EOL] [comment] [EOL] img = img [ ... , np . newaxis ] [EOL] [comment] [EOL] assert len ( img . shape ) == [number] [EOL] [EOL] [comment] [EOL] parent_dir = self . get_parent_dir ( img_path ) [EOL] label_path = [ s for s in self . label_paths if parent_dir in s ] [ [number] ] [EOL] dcm_strs = pydicom . dcmread ( label_path , force = True ) [EOL] [EOL] [comment] [EOL] dcm_rs_struct_names = [ structure . ROIName for structure in dcm_strs . StructureSetROISequence ] [EOL] names_to_pull = [ name for name in dcm_rs_struct_names if name in self . structure_names ] [EOL] [EOL] try : [EOL] [comment] [EOL] assert len ( names_to_pull ) == len ( self . structure_names ) [EOL] [EOL] structure_indexes = [ dcm_rs_struct_names . index ( name ) for name in names_to_pull ] [EOL] label = self . get_label_instance ( dcm_strs , structure_indexes , img_position , img_spacing , img_orientation , ) [EOL] [EOL] if self . augment : [EOL] img , label = self . data_augment ( img , label ) [EOL] batch_inputs . append ( img ) [EOL] batch_labels . append ( label ) [EOL] [EOL] except : [EOL] [comment] [EOL] continue [EOL] [EOL] [comment] [EOL] batch_inputs = np . array ( batch_inputs , dtype = np . float32 ) [comment] [EOL] [EOL] [comment] [EOL] batch_inputs = skimage . transform . resize ( batch_inputs , ( self . batch_size , self . grid_size , self . grid_size , [number] ) ) [EOL] [EOL] batch_labels = np . array ( batch_labels , dtype = np . float32 ) [comment] [EOL] batch_labels = skimage . transform . resize ( batch_labels , ( self . batch_size , self . grid_size , self . grid_size , len ( self . structure_names ) , ) , ) [EOL] batch_labels = np . round ( batch_labels ) [comment] [EOL] [EOL] return batch_inputs , batch_labels [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Tuple[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0
from typing import Dict , Any , List , Counter , Tuple [EOL] import typing [EOL] import collections [EOL] from collections import Counter [EOL] [EOL] import numpy as np [EOL] [EOL] from matplotlib import pyplot as plt [EOL] [EOL] import pydicom [EOL] [EOL] [EOL] def list_structures ( label_paths ) : [EOL] structs = [ ] [EOL] for path in label_paths : [EOL] dicom_structures = pydicom . dcmread ( path , force = True ) [EOL] dcm_rs_struct_names = [ structure . ROIName for structure in dicom_structures . StructureSetROISequence ] [EOL] structs . append ( dcm_rs_struct_names ) [EOL] [EOL] structs = [ item for sublist in structs for item in sublist ] [EOL] structs = Counter ( structs ) [EOL] mydict = structs [EOL] common_structs = structs . most_common ( ) [EOL] [EOL] structs = sorted ( structs . items ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] structs_in_all = [ struct for struct , number in mydict . items ( ) if number == len ( label_paths ) ] [EOL] print ( [string] , len ( structs_in_all ) , [string] ) [EOL] for struct in structs_in_all : [EOL] print ( struct ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] , len ( structs ) , [string] ) [EOL] for struct , number in structs : [EOL] print ( struct , [string] , number ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def count_structure_occurs ( input_paths , label_paths , structure_names ) : [EOL] num_occurs = { name : [number] for name in structure_names } [EOL] num_slices = len ( input_paths ) [EOL] [EOL] for path in label_paths : [EOL] dicom_structures = pydicom . dcmread ( path , force = True ) [EOL] dcm_rs_struct_names = [ structure . ROIName for structure in dicom_structures . StructureSetROISequence ] [EOL] names_to_pull = [ name for name in dcm_rs_struct_names if name in structure_names ] [EOL] structure_indexes = [ dcm_rs_struct_names . index ( name ) for name in names_to_pull ] [EOL] for mask_index , structure_index in enumerate ( structure_indexes ) : [EOL] struct_name = structure_names [ mask_index ] [EOL] z = [ z_slice . ContourData [ [number] : : [number] ] [ [number] ] for z_slice in dicom_structures . ROIContourSequence [ structure_index ] . ContourSequence ] [EOL] [comment] [EOL] z = list ( set ( z ) ) [EOL] number_contour_slices = len ( z ) [EOL] num_occurs [ struct_name ] += number_contour_slices [EOL] [EOL] for struct_name in num_occurs : [EOL] num_occurs [ struct_name ] /= num_slices [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] for struct_name in num_occurs : [EOL] print ( struct_name , [string] , num_occurs [ struct_name ] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def get_images ( paths ) : [EOL] images = [ ] [EOL] for img_path in paths : [EOL] dcm = pydicom . dcmread ( img_path , force = True ) [EOL] try : [EOL] dcm . file_meta . TransferSyntaxUID [EOL] except AttributeError : [EOL] dcm . file_meta . TransferSyntaxUID = pydicom . uid . ImplicitVRLittleEndian [EOL] img = dcm . pixel_array [EOL] images . append ( img ) [EOL] [EOL] return images [EOL] [EOL] [EOL] def plot_batch_predict ( model , test_inputs , test_truths , x = [number] , batch_size = [number] ) : [EOL] [EOL] y_input = test_inputs [ x : x + batch_size ] [EOL] y_true = test_truths [ x : x + batch_size ] [EOL] [EOL] print ( [string] , y_input . shape ) [EOL] print ( [string] , y_true . shape ) [EOL] [EOL] y_pred = model . predict ( y_input ) [EOL] print ( [string] , y_pred . shape ) [EOL] [EOL] y_pred_round = np . round ( y_pred ) [EOL] [EOL] diff = y_pred_round - y_true [EOL] [EOL] [comment] [EOL] cols = [number] * y_true . shape [ - [number] ] + [number] [EOL] rows = batch_size [EOL] figsize = np . array ( [ cols , rows ] ) * [number] [EOL] [EOL] fig , axs = plt . subplots ( rows , cols , figsize = figsize , sharey = True ) [EOL] [EOL] for ax in axs . flat : [EOL] ax . set_xticks ( [ ] ) [EOL] ax . set_yticks ( [ ] ) [EOL] [EOL] for batch , row in enumerate ( axs ) : [EOL] x = [number] [EOL] for i in range ( y_true . shape [ - [number] ] ) : [EOL] row [ i + x ] . imshow ( y_input [ batch , ... , i ] ) [EOL] row [ i + x ] . set_title ( [string] ) [EOL] x += [number] [EOL] row [ i + x ] . imshow ( y_true [ batch , ... , i ] ) [EOL] row [ i + x ] . set_title ( [string] ) [EOL] x += [number] [EOL] row [ i + x ] . imshow ( y_pred [ batch , ... , i ] ) [EOL] row [ i + x ] . set_title ( [string] ) [EOL] x += [number] [EOL] row [ i + x ] . imshow ( y_pred_round [ batch , ... , i ] ) [EOL] row [ i + x ] . set_title ( [string] ) [EOL] x += [number] [EOL] row [ i + x ] . imshow ( diff [ batch , ... , i ] ) [EOL] row [ i + x ] . set_title ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import math [EOL] [EOL] import numpy as np [EOL] [EOL] import keras . backend as K [EOL] import tensorflow as tf [EOL] from sklearn . utils . extmath import cartesian [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class HausdorffLoss : [EOL] def __init__ ( self , W , H , alpha = [number] ) : [EOL] self . W = W [EOL] self . H = H [EOL] self . alpha = alpha [EOL] self . all_img_locations = tf . convert_to_tensor ( cartesian ( [ np . arange ( W ) , np . arange ( H ) ] ) , dtype = tf . float32 ) [EOL] self . max_dist = math . sqrt ( W ** [number] + H ** [number] ) [EOL] [EOL] def cdist ( self , A , B ) : [EOL] [EOL] [comment] [EOL] na = tf . reduce_sum ( tf . square ( A ) , [number] ) [EOL] nb = tf . reduce_sum ( tf . square ( B ) , [number] ) [EOL] [EOL] [comment] [EOL] na = tf . reshape ( na , [ - [number] , [number] ] ) [EOL] nb = tf . reshape ( nb , [ [number] , - [number] ] ) [EOL] [EOL] [comment] [EOL] D = tf . sqrt ( tf . maximum ( na - [number] * tf . matmul ( A , B , False , True ) + nb , [number] ) ) [EOL] return D [EOL] [EOL] def weighted_hausdorff_distance ( self , y_true , y_pred ) : [EOL] all_img_locations = self . all_img_locations [EOL] W = self . W [EOL] H = self . H [EOL] alpha = self . alpha [EOL] max_dist = self . max_dist [EOL] eps = [number] [EOL] [EOL] y_true = K . reshape ( y_true , [ W , H ] ) [EOL] gt_points = K . cast ( tf . where ( y_true > [number] ) , dtype = tf . float32 ) [EOL] num_gt_points = tf . shape ( gt_points ) [ [number] ] [EOL] [EOL] y_pred = K . flatten ( y_pred ) [EOL] p = y_pred [EOL] p_replicated = tf . squeeze ( K . repeat ( tf . expand_dims ( p , axis = - [number] ) , num_gt_points ) ) [EOL] [EOL] d_matrix = self . cdist ( all_img_locations , gt_points ) [EOL] num_est_pts = tf . reduce_sum ( p ) [EOL] term_1 = ( [number] / ( num_est_pts + eps ) ) * K . sum ( p * K . min ( d_matrix , [number] ) ) [EOL] [EOL] d_div_p = K . min ( ( d_matrix + eps ) / ( p_replicated ** alpha + ( eps / max_dist ) ) , [number] ) [EOL] d_div_p = K . clip ( d_div_p , [number] , max_dist ) [EOL] term_2 = K . mean ( d_div_p , axis = [number] ) [EOL] [EOL] return term_1 + term_2 [EOL] [EOL] def hausdorff_loss ( self , y_true , y_pred ) : [EOL] batched_losses = tf . map_fn ( lambda x : self . weighted_hausdorff_distance ( x [ [number] ] , x [ [number] ] ) , ( y_true , y_pred ) , dtype = tf . float32 , ) [EOL] return K . mean ( tf . stack ( batched_losses ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] neighbour_code_to_normals = [ [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , ] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[typing.List[builtins.float]],typing.List[typing.List[builtins.int
DATA_MEAN = [number] [EOL] DATA_STD = [number] [EOL] OUTPUT_CHANNELS = [number] [EOL] DATA_PATH = [string] [EOL] WEIGHTS = [string] [EOL]	$builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] import glob [EOL] [EOL] import numpy as np [EOL] [EOL] import pydicom [EOL] [EOL] import config [EOL] import tensorflow as tf [EOL] import unet [EOL] from pymedphys . _experimental . autosegmentation import mask [EOL] [EOL] physical_devices = tf . config . experimental . list_physical_devices ( [string] ) [EOL] assert len ( physical_devices ) > [number] , [string] [EOL] config = tf . config . experimental . set_memory_growth ( physical_devices [ [number] ] , True ) [EOL] [EOL] [EOL] def get_pixel_array ( dcm ) : [EOL] try : [EOL] dcm . file_meta . TransferSyntaxUID [EOL] except AttributeError : [EOL] dcm . file_meta . TransferSyntaxUID = pydicom . uid . ImplicitVRLittleEndian [EOL] return dcm . pixel_array [EOL] [EOL] [EOL] dcm_paths = glob . glob ( config . DATA_PATH + [string] ) [EOL] [EOL] dcms = [ pydicom . dcmread ( path , force = True ) for path in dcm_paths ] [EOL] [EOL] dcms = sorted ( dcms , key = lambda dcm : dcm . SliceLocation ) [EOL] [EOL] imgs = np . array ( [ get_pixel_array ( dcm ) for dcm in dcms ] ) [EOL] [EOL] imgs = imgs [ ... , np . newaxis ] [EOL] [EOL] imgs = ( imgs - config . DATA_MEAN ) / config . DATA_STD [EOL] [EOL] model = unet . model ( output_channels = config . OUTPUT_CHANNELS ) [EOL] [EOL] model . compile ( ) [EOL] [EOL] model . load_weights ( config . WEIGHTS ) [EOL] [EOL] predicts = model . predict ( x = imgs , batch_size = [number] , verbose = [number] ) [EOL] [EOL] predicts = np . round ( predicts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import List , Any [EOL] import typing [EOL] import functools [EOL] [EOL] import numpy as np [EOL] [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import tensorflow as tf [EOL] [EOL] [EOL] def reduce_expanded_mask ( expanded_mask , img_size , expansion ) : [EOL] expanded_mask = tf . dtypes . cast ( expanded_mask , tf . float32 ) [EOL] return tf . reduce_mean ( tf . reduce_mean ( tf . reshape ( expanded_mask , ( img_size , expansion , img_size , expansion ) ) , axis = [number] , ) , axis = [number] , ) [EOL] [EOL] [EOL] def get_circle_mask ( bb_centre , bb_radius_sqrd , img_size , expansion ) : [EOL] _ , _ , xx_expand , yy_expand = get_grids ( img_size , expansion ) [EOL] expanded_mask = ( xx_expand - bb_centre [ [number] ] ) ** [number] + ( yy_expand - bb_centre [ [number] ] ) ** [number] <= bb_radius_sqrd [EOL] [EOL] circle_mask = reduce_expanded_mask ( expanded_mask , img_size , expansion ) [EOL] return circle_mask * [number] - [number] [EOL] [EOL] [EOL] def get_simple_circle_mask ( bb_centre , bb_radius_sqrd , x , y ) : [EOL] xx , yy = tf . meshgrid ( x , y ) [EOL] [EOL] circle_mask = ( xx - bb_centre [ [number] ] ) ** [number] + ( yy - bb_centre [ [number] ] ) ** [number] <= bb_radius_sqrd [EOL] circle_mask = tf . dtypes . cast ( circle_mask , tf . float32 ) [EOL] [EOL] return circle_mask * [number] - [number] [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_grids ( img_size , expansion ) : [EOL] x = tf . range ( [number] , img_size , dtype = tf . float32 ) [EOL] y = tf . range ( [number] , img_size , dtype = tf . float32 ) [EOL] [EOL] dx = [number] / expansion [EOL] x_expand = tf . range ( - [number] + dx / [number] , img_size - [number] , dx ) [EOL] y_expand = tf . range ( - [number] + dx / [number] , img_size - [number] , dx ) [EOL] xx_expand , yy_expand = tf . meshgrid ( x_expand , y_expand ) [EOL] [EOL] return x , y , xx_expand , yy_expand [EOL] [EOL] [EOL] def main ( ) : [EOL] img_size = [number] [EOL] expansion = [number] [EOL] [EOL] x , y , _ , _ = get_grids ( img_size , expansion ) [EOL] [EOL] bb_diameter = [number] [EOL] bb_radius = bb_diameter / [number] [EOL] bb_radius_sqrd = bb_radius ** [number] [EOL] [EOL] bb_centre_1 = [ [number] , [number] ] [EOL] bb_centre_2 = [ [number] , [number] ] [EOL] [EOL] circle_mask = get_circle_mask ( bb_centre_1 , bb_radius_sqrd , img_size , expansion ) [EOL] simple_circle_mask = get_simple_circle_mask ( bb_centre_2 , bb_radius_sqrd , x , y ) [EOL] [EOL] total_mask = tf . stack ( [ circle_mask , simple_circle_mask ] , axis = - [number] ) [EOL] total_mask = tf . reduce_sum ( total_mask , axis = - [number] ) + [number] [EOL] [EOL] theta = tf . range ( [number] , [number] * np . pi , [number] ) [EOL] circle_x_base = tf . sin ( theta ) * bb_radius [EOL] circle_y_base = tf . cos ( theta ) * bb_radius [EOL] [EOL] bb_1_x = circle_x_base + bb_centre_1 [ [number] ] [EOL] bb_1_y = circle_y_base + bb_centre_1 [ [number] ] [EOL] bb_2_x = circle_x_base + bb_centre_2 [ [number] ] [EOL] bb_2_y = circle_y_base + bb_centre_2 [ [number] ] [EOL] [EOL] plt . pcolormesh ( x - [number] , y - [number] , total_mask ) [EOL] plt . colorbar ( ) [EOL] [EOL] plt . contour ( x , y , total_mask , [ [number] ] , cmap = [string] ) [EOL] plt . plot ( bb_1_x , bb_1_y , [string] , alpha = [number] ) [EOL] plt . plot ( bb_2_x , bb_2_y , [string] , alpha = [number] ) [EOL] [EOL] plt . axis ( [string] ) [EOL] plt . show ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Dict [EOL] import typing [EOL] names_map = { [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] ignore_list = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for key in ignore_list : [EOL] names_map [ key ] = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from pydicom import dcmread [EOL] from pynetdicom import AE , debug_logger [EOL] from pynetdicom . sop_class import CTImageStorage [EOL] import glob [EOL] [EOL] debug_logger ( ) [EOL] [EOL] PORT = [number] [EOL] DATASET = ( [string] ) [EOL] [comment] [EOL] [EOL] [EOL] dicom_paths = glob . glob ( DATASET + [string] ) [EOL] print ( [string] , len ( dicom_paths ) ) [EOL] [EOL] dicom_files = [ dcmread ( file ) for file in dicom_paths ] [EOL] print ( [string] , len ( dicom_files ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] ae = AE ( ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] ae . add_requested_context ( CTImageStorage ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] assoc = ae . associate ( [string] , PORT ) [EOL] if assoc . is_established : [EOL] [comment] [EOL] [comment] [EOL] for ds in dicom_files : [EOL] status = assoc . send_c_store ( ds ) [EOL] [EOL] [comment] [EOL] if status : [EOL] [comment] [EOL] print ( [string] . format ( status . Status ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] assoc . release ( ) [EOL] else : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import loss as loss [EOL] import tensorflow as tf [EOL] [EOL] [comment] [EOL] DATA_PATH = [string] [EOL] MODEL_SAVE = [string] [EOL] BATCH_SIZE = [number] [EOL] OUTPUT_CHANNELS = [number] [EOL] [EOL] [comment] [EOL] LOSS = loss . weighted_dsc_loss [EOL] INITIAL_LR = [number] [EOL] OPTIMIZER = tf . keras . optimizers . Adam ( lr = INITIAL_LR ) [EOL] METRICS = [ loss . dice_metric , tf . keras . metrics . Precision ( ) , tf . keras . metrics . Recall ( ) ] [EOL] INITIAL_WEIGHTS = None [EOL] [EOL] [comment] [EOL] EPOCHS = [number] [EOL] LR_SCALE = [number] [EOL] LR_PATIENCE = [number] [EOL] STOP_PATIENCE = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import absolute_import , division , print_function [EOL] [EOL] import numpy as np [EOL] from scipy import ndimage [EOL] [EOL] import lookup_tables [comment] [EOL] [EOL] [EOL] def compute_surface_distances ( mask_gt , mask_pred , spacing_mm ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] neighbour_code_to_surface_area = np . zeros ( [ [number] ] ) [EOL] for code in range ( [number] ) : [EOL] normals = np . array ( lookup_tables . neighbour_code_to_normals [ code ] ) [EOL] sum_area = [number] [EOL] for normal_idx in range ( normals . shape [ [number] ] ) : [EOL] [comment] [EOL] n = np . zeros ( [ [number] ] ) [EOL] n [ [number] ] = normals [ normal_idx , [number] ] * spacing_mm [ [number] ] * spacing_mm [ [number] ] [EOL] n [ [number] ] = normals [ normal_idx , [number] ] * spacing_mm [ [number] ] * spacing_mm [ [number] ] [EOL] n [ [number] ] = normals [ normal_idx , [number] ] * spacing_mm [ [number] ] * spacing_mm [ [number] ] [EOL] area = np . linalg . norm ( n ) [EOL] sum_area += area [EOL] neighbour_code_to_surface_area [ code ] = sum_area [EOL] [EOL] [comment] [EOL] [comment] [EOL] mask_all = mask_gt | mask_pred [EOL] bbox_min = np . zeros ( [number] , np . int64 ) [EOL] bbox_max = np . zeros ( [number] , np . int64 ) [EOL] [EOL] [comment] [EOL] proj_0 = np . max ( np . max ( mask_all , axis = [number] ) , axis = [number] ) [EOL] idx_nonzero_0 = np . nonzero ( proj_0 ) [ [number] ] [EOL] if len ( idx_nonzero_0 ) == [number] : [comment] [EOL] return { [string] : np . array ( [ ] ) , [string] : np . array ( [ ] ) , [string] : np . array ( [ ] ) , [string] : np . array ( [ ] ) , } [EOL] [EOL] bbox_min [ [number] ] = np . min ( idx_nonzero_0 ) [EOL] bbox_max [ [number] ] = np . max ( idx_nonzero_0 ) [EOL] [EOL] [comment] [EOL] proj_1 = np . max ( np . max ( mask_all , axis = [number] ) , axis = [number] ) [EOL] idx_nonzero_1 = np . nonzero ( proj_1 ) [ [number] ] [EOL] bbox_min [ [number] ] = np . min ( idx_nonzero_1 ) [EOL] bbox_max [ [number] ] = np . max ( idx_nonzero_1 ) [EOL] [EOL] [comment] [EOL] proj_2 = np . max ( np . max ( mask_all , axis = [number] ) , axis = [number] ) [EOL] idx_nonzero_2 = np . nonzero ( proj_2 ) [ [number] ] [EOL] bbox_min [ [number] ] = np . min ( idx_nonzero_2 ) [EOL] bbox_max [ [number] ] = np . max ( idx_nonzero_2 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cropmask_gt = np . zeros ( ( bbox_max - bbox_min ) + [number] , np . uint8 ) [EOL] cropmask_pred = np . zeros ( ( bbox_max - bbox_min ) + [number] , np . uint8 ) [EOL] [EOL] cropmask_gt [ [number] : - [number] , [number] : - [number] , [number] : - [number] ] = mask_gt [ bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , ] [EOL] [EOL] cropmask_pred [ [number] : - [number] , [number] : - [number] , [number] : - [number] ] = mask_pred [ bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , bbox_min [ [number] ] : bbox_max [ [number] ] + [number] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] kernel = np . array ( [ [ [ [number] , [number] ] , [ [number] , [number] ] ] , [ [ [number] , [number] ] , [ [number] , [number] ] ] ] ) [EOL] neighbour_code_map_gt = ndimage . filters . correlate ( cropmask_gt . astype ( np . uint8 ) , kernel , mode = [string] , cval = [number] ) [EOL] neighbour_code_map_pred = ndimage . filters . correlate ( cropmask_pred . astype ( np . uint8 ) , kernel , mode = [string] , cval = [number] ) [EOL] [EOL] [comment] [EOL] borders_gt = ( neighbour_code_map_gt != [number] ) & ( neighbour_code_map_gt != [number] ) [EOL] borders_pred = ( neighbour_code_map_pred != [number] ) & ( neighbour_code_map_pred != [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if borders_gt . any ( ) : [EOL] distmap_gt = ndimage . morphology . distance_transform_edt ( ~ borders_gt , sampling = spacing_mm ) [EOL] else : [EOL] distmap_gt = np . Inf * np . ones ( borders_gt . shape ) [EOL] [EOL] if borders_pred . any ( ) : [EOL] distmap_pred = ndimage . morphology . distance_transform_edt ( ~ borders_pred , sampling = spacing_mm ) [EOL] else : [EOL] distmap_pred = np . Inf * np . ones ( borders_pred . shape ) [EOL] [EOL] [comment] [EOL] surface_area_map_gt = neighbour_code_to_surface_area [ neighbour_code_map_gt ] [EOL] surface_area_map_pred = neighbour_code_to_surface_area [ neighbour_code_map_pred ] [EOL] [EOL] [comment] [EOL] distances_gt_to_pred = distmap_pred [ borders_gt ] [EOL] distances_pred_to_gt = distmap_gt [ borders_pred ] [EOL] surfel_areas_gt = surface_area_map_gt [ borders_gt ] [EOL] surfel_areas_pred = surface_area_map_pred [ borders_pred ] [EOL] [EOL] [comment] [EOL] if distances_gt_to_pred . shape != ( [number] , ) : [EOL] sorted_surfels_gt = np . array ( sorted ( zip ( distances_gt_to_pred , surfel_areas_gt ) ) ) [EOL] distances_gt_to_pred = sorted_surfels_gt [ : , [number] ] [EOL] surfel_areas_gt = sorted_surfels_gt [ : , [number] ] [EOL] [EOL] if distances_pred_to_gt . shape != ( [number] , ) : [EOL] sorted_surfels_pred = np . array ( sorted ( zip ( distances_pred_to_gt , surfel_areas_pred ) ) ) [EOL] distances_pred_to_gt = sorted_surfels_pred [ : , [number] ] [EOL] surfel_areas_pred = sorted_surfels_pred [ : , [number] ] [EOL] [EOL] return { [string] : distances_gt_to_pred , [string] : distances_pred_to_gt , [string] : surfel_areas_gt , [string] : surfel_areas_pred , } [EOL] [EOL] [EOL] def compute_average_surface_distance ( surface_distances ) : [EOL] [docstring] [EOL] distances_gt_to_pred = surface_distances [ [string] ] [EOL] distances_pred_to_gt = surface_distances [ [string] ] [EOL] surfel_areas_gt = surface_distances [ [string] ] [EOL] surfel_areas_pred = surface_distances [ [string] ] [EOL] average_distance_gt_to_pred = np . sum ( distances_gt_to_pred * surfel_areas_gt ) / np . sum ( surfel_areas_gt ) [EOL] average_distance_pred_to_gt = np . sum ( distances_pred_to_gt * surfel_areas_pred ) / np . sum ( surfel_areas_pred ) [EOL] return ( average_distance_gt_to_pred , average_distance_pred_to_gt ) [EOL] [EOL] [EOL] def compute_robust_hausdorff ( surface_distances , percent ) : [EOL] [docstring] [EOL] distances_gt_to_pred = surface_distances [ [string] ] [EOL] distances_pred_to_gt = surface_distances [ [string] ] [EOL] surfel_areas_gt = surface_distances [ [string] ] [EOL] surfel_areas_pred = surface_distances [ [string] ] [EOL] if len ( distances_gt_to_pred ) > [number] : [comment] [EOL] surfel_areas_cum_gt = np . cumsum ( surfel_areas_gt ) / np . sum ( surfel_areas_gt ) [EOL] idx = np . searchsorted ( surfel_areas_cum_gt , percent / [number] ) [EOL] perc_distance_gt_to_pred = distances_gt_to_pred [ min ( idx , len ( distances_gt_to_pred ) - [number] ) ] [EOL] else : [EOL] perc_distance_gt_to_pred = np . Inf [EOL] [EOL] if len ( distances_pred_to_gt ) > [number] : [comment] [EOL] surfel_areas_cum_pred = np . cumsum ( surfel_areas_pred ) / np . sum ( surfel_areas_pred ) [EOL] idx = np . searchsorted ( surfel_areas_cum_pred , percent / [number] ) [EOL] perc_distance_pred_to_gt = distances_pred_to_gt [ min ( idx , len ( distances_pred_to_gt ) - [number] ) ] [EOL] else : [EOL] perc_distance_pred_to_gt = np . Inf [EOL] [EOL] return max ( perc_distance_gt_to_pred , perc_distance_pred_to_gt ) [EOL] [EOL] [EOL] def compute_surface_overlap_at_tolerance ( surface_distances , tolerance_mm ) : [EOL] [docstring] [EOL] distances_gt_to_pred = surface_distances [ [string] ] [EOL] distances_pred_to_gt = surface_distances [ [string] ] [EOL] surfel_areas_gt = surface_distances [ [string] ] [EOL] surfel_areas_pred = surface_distances [ [string] ] [EOL] rel_overlap_gt = np . sum ( surfel_areas_gt [ distances_gt_to_pred <= tolerance_mm ] ) / np . sum ( surfel_areas_gt ) [EOL] rel_overlap_pred = np . sum ( surfel_areas_pred [ distances_pred_to_gt <= tolerance_mm ] ) / np . sum ( surfel_areas_pred ) [EOL] return ( rel_overlap_gt , rel_overlap_pred ) [EOL] [EOL] [EOL] def compute_surface_dice_at_tolerance ( surface_distances , tolerance_mm ) : [EOL] [docstring] [EOL] distances_gt_to_pred = surface_distances [ [string] ] [EOL] distances_pred_to_gt = surface_distances [ [string] ] [EOL] surfel_areas_gt = surface_distances [ [string] ] [EOL] surfel_areas_pred = surface_distances [ [string] ] [EOL] overlap_gt = np . sum ( surfel_areas_gt [ distances_gt_to_pred <= tolerance_mm ] ) [EOL] overlap_pred = np . sum ( surfel_areas_pred [ distances_pred_to_gt <= tolerance_mm ] ) [EOL] surface_dice = ( overlap_gt + overlap_pred ) / ( np . sum ( surfel_areas_gt ) + np . sum ( surfel_areas_pred ) ) [EOL] return surface_dice [EOL] [EOL] [EOL] def compute_dice_coefficient ( mask_gt , mask_pred ) : [EOL] [docstring] [EOL] volume_sum = mask_gt . sum ( ) + mask_pred . sum ( ) [EOL] if volume_sum == [number] : [EOL] return np . NaN [EOL] volume_intersect = ( mask_gt & mask_pred ) . sum ( ) [EOL] return [number] * volume_intersect / volume_sum [EOL]	
from typing import Any [EOL] import typing [EOL] import glob [EOL] import os [EOL] import sys [EOL] [EOL] import numpy as np [EOL] [EOL] from matplotlib import pyplot as plt [EOL] [EOL] import paths as paths [EOL] [EOL] path = [string] [EOL] [EOL] patient_paths = paths . get_patient_paths ( path ) [EOL] patient_paths . sort ( ) [EOL] [EOL] img_paths = [ glob . glob ( path + [string] ) for path in patient_paths ] [EOL] [EOL] img_paths = paths . flatten_list ( img_paths ) [EOL] [EOL] img_paths . sort ( ) [EOL] [EOL] for img_path in img_paths : [EOL] print ( img_path ) [EOL] img = np . load ( img_path ) [EOL] [EOL] if img . shape is not ( [number] , [number] , [number] ) : [EOL] img = img [ ... , np . newaxis ] [EOL] np . save ( img_path , img ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] import tensorflow as tf [EOL] import tensorflow . keras . backend as K [EOL] [EOL] epsilon = [number] [EOL] smooth = [number] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def w_bce_loss ( y_true , y_pred ) : [EOL] bce = tf . keras . losses . BinaryCrossentropy ( ) [EOL] smooth = [number] [EOL] total_pixels = [number] * [number] * [number] [EOL] w = total_pixels / ( K . sum ( y_true , axis = ( [number] , [number] , [number] ) ) + smooth ) [EOL] [EOL] l0 = bce ( y_true [ ... , [number] ] , y_pred [ ... , [number] ] ) [EOL] l1 = bce ( y_true [ ... , [number] ] , y_pred [ ... , [number] ] ) [EOL] l2 = bce ( y_true [ ... , [number] ] , y_pred [ ... , [number] ] ) [EOL] [EOL] return K . mean ( l0 , l1 , l2 ) [EOL] [EOL] [EOL] def bce_dsc_loss ( y_true , y_pred ) : [EOL] bce = tf . keras . losses . BinaryCrossentropy ( ) [EOL] loss = bce ( y_true , y_pred ) + [number] * dice_loss ( y_true , y_pred ) [EOL] return loss [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def dsc ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] y_true_f = K . flatten ( y_true ) [EOL] y_pred_f = K . flatten ( y_pred ) [EOL] intersection = K . sum ( y_true_f * y_pred_f ) [EOL] score = ( [number] * intersection + smooth ) / ( K . sum ( y_true_f ) + K . sum ( y_pred_f ) + smooth ) [EOL] return score [EOL] [EOL] [EOL] def dsc_loss ( y_true , y_pred ) : [EOL] loss = [number] - dsc ( y_true , y_pred ) [EOL] return loss [EOL] [EOL] [EOL] def weighted_dsc ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] total_pixels = [number] * [number] * [number] [EOL] weights = total_pixels / ( K . sum ( y_true , axis = ( [number] , [number] , [number] ) ) + smooth ) [EOL] intersection = K . sum ( y_true * y_pred , axis = ( [number] , [number] , [number] ) ) [EOL] union = K . sum ( y_true + y_pred , axis = ( [number] , [number] , [number] ) ) [EOL] w_intersection = K . sum ( intersection * weights ) [EOL] w_union = K . sum ( union * weights ) [EOL] return ( [number] * w_intersection + smooth ) / ( w_union + smooth ) [EOL] [EOL] [EOL] def weighted_dsc_loss ( y_true , y_pred ) : [EOL] return [number] - weighted_dsc ( y_true , y_pred ) [EOL] [EOL] [EOL] def dice_metric ( y_true , y_pred , smooth = [number] ) : [EOL] [docstring] [EOL] y_pred = tf . keras . backend . round ( y_pred ) [EOL] intersection = K . sum ( y_true * y_pred , axis = [ [number] , [number] , [number] ] ) [EOL] union = K . sum ( y_true , axis = [ [number] , [number] , [number] ] ) + K . sum ( y_pred , axis = [ [number] , [number] , [number] ] ) [EOL] dice = K . mean ( ( [number] * intersection + smooth ) / ( union + smooth ) , axis = [number] ) [EOL] return dice [EOL] [EOL] [EOL] def iou_coef ( y_true , y_pred , smooth = [number] ) : [EOL] [docstring] [EOL] intersection = K . sum ( K . abs ( y_true * y_pred ) , axis = [ [number] , [number] , [number] ] ) [EOL] union = K . sum ( y_true , [ [number] , [number] , [number] ] ) + K . sum ( y_pred , [ [number] , [number] , [number] ] ) - intersection [EOL] iou = K . mean ( ( intersection + smooth ) / ( union + smooth ) , axis = [number] ) [EOL] return iou [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def tversky ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] y_true_pos = K . flatten ( y_true ) [EOL] y_pred_pos = K . flatten ( y_pred ) [EOL] true_pos = K . sum ( y_true_pos * y_pred_pos ) [EOL] false_neg = K . sum ( y_true_pos * ( [number] - y_pred_pos ) ) [EOL] false_pos = K . sum ( ( [number] - y_true_pos ) * y_pred_pos ) [EOL] alpha = [number] [EOL] return ( true_pos + smooth ) / ( true_pos + alpha * false_neg + ( [number] - alpha ) * false_pos + smooth ) [EOL] [EOL] [EOL] def tvsky_loss ( y_true , y_pred ) : [EOL] return [number] - tversky ( y_true , y_pred ) [EOL] [EOL] [EOL] def focal_tversky_loss ( y_true , y_pred ) : [EOL] pt_1 = tversky ( y_true , y_pred ) [EOL] gamma = [number] [EOL] return K . pow ( ( [number] - pt_1 ) , gamma ) [EOL] [EOL] [EOL] def class_tversky ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] [EOL] y_true = K . permute_dimensions ( y_true , ( [number] , [number] , [number] , [number] ) ) [EOL] y_pred = K . permute_dimensions ( y_pred , ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] y_true_pos = K . batch_flatten ( y_true ) [EOL] y_pred_pos = K . batch_flatten ( y_pred ) [EOL] true_pos = K . sum ( y_true_pos * y_pred_pos , [number] ) [EOL] false_neg = K . sum ( y_true_pos * ( [number] - y_pred_pos ) , [number] ) [EOL] false_pos = K . sum ( ( [number] - y_true_pos ) * y_pred_pos , [number] ) [EOL] alpha = [number] [EOL] return ( true_pos + smooth ) / ( true_pos + alpha * false_neg + ( [number] - alpha ) * false_pos + smooth ) [EOL] [EOL] [EOL] [comment] [EOL] def focal_tversky_loss_c ( y_true , y_pred ) : [EOL] pt_1 = class_tversky ( y_true , y_pred ) [EOL] gamma = [number] [EOL] return K . sum ( K . pow ( ( [number] - pt_1 ) , gamma ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def confusion ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] y_pred_pos = K . clip ( y_pred , [number] , [number] ) [EOL] y_pred_neg = [number] - y_pred_pos [EOL] y_pos = K . clip ( y_true , [number] , [number] ) [EOL] y_neg = [number] - y_pos [EOL] tp = K . sum ( y_pos * y_pred_pos ) [EOL] fp = K . sum ( y_neg * y_pred_pos ) [EOL] fn = K . sum ( y_pos * y_pred_neg ) [EOL] prec = ( tp + smooth ) / ( tp + fp + smooth ) [EOL] recall = ( tp + smooth ) / ( tp + fn + smooth ) [EOL] return prec , recall [EOL] [EOL] [EOL] def tp ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] y_pred_pos = K . round ( K . clip ( y_pred , [number] , [number] ) ) [EOL] y_pos = K . round ( K . clip ( y_true , [number] , [number] ) ) [EOL] tp = ( K . sum ( y_pos * y_pred_pos ) + smooth ) / ( K . sum ( y_pos ) + smooth ) [EOL] return tp [EOL] [EOL] [EOL] def tn ( y_true , y_pred ) : [EOL] smooth = [number] [EOL] y_pred_pos = K . round ( K . clip ( y_pred , [number] , [number] ) ) [EOL] y_pred_neg = [number] - y_pred_pos [EOL] y_pos = K . round ( K . clip ( y_true , [number] , [number] ) ) [EOL] y_neg = [number] - y_pos [EOL] tn = ( K . sum ( y_neg * y_pred_neg ) + smooth ) / ( K . sum ( y_neg ) + smooth ) [EOL] return tn [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] neighbour_code_to_normals = [ [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] , ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , - [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ [number] , - [number] , - [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , [number] ] , ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , - [number] , - [number] ] ] , [ [ [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , - [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ [number] , - [number] , [number] ] , [ - [number] , [number] , - [number] ] ] , [ [ [number] , - [number] , [number] ] , [ [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] ] , [ [ - [number] , [number] , [number] ] ] , [ [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] , [ - [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] ] ] , [ [ [number] , - [number] , [number] ] ] , [ [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] ] , [ [ - [number] , - [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , [ [ [number] , [number] , [number] ] ] , ] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[typing.List[builtins.float]],typing.List[typing.List[builtins.int
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import glob [EOL] import random [EOL] [EOL] import config [EOL] [EOL] [EOL] def get_paths ( data_path , context ) : [EOL] patient_paths = glob . glob ( data_path + [string] ) [EOL] [EOL] context_paths = glob . glob ( data_path + [string] , recursive = True ) [EOL] context_paths . sort ( ) [EOL] input_paths = [ glob . glob ( path + [string] ) [ context : - context ] for path in patient_paths ] [EOL] input_paths = [ item for sublist in input_paths for item in sublist ] [EOL] random . shuffle ( input_paths ) [EOL] [EOL] label_paths = glob . glob ( data_path + [string] , recursive = True ) [EOL] [EOL] assert len ( context_paths ) - ( len ( label_paths ) * [number] * context ) == len ( input_paths ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] , len ( label_paths ) ) [EOL] print ( [string] , len ( input_paths ) ) [EOL] print ( [string] ) [EOL] return input_paths , context_paths , label_paths [EOL] [EOL] [EOL] def split_paths ( input_paths , ratio ) : [EOL] num = len ( input_paths ) [EOL] num_train = int ( num * ratio [ [number] ] // [number] ) [EOL] num_valid = int ( num * ratio [ [number] ] // [number] ) [EOL] num_test = int ( num * ratio [ [number] ] // [number] ) [EOL] [EOL] print ( [string] , num_train ) [EOL] print ( [string] , num_valid ) [EOL] print ( [string] , num_test ) [EOL] [EOL] train_paths = input_paths [ [number] : num_train ] [EOL] valid_paths = input_paths [ num_train : num_train + num_valid ] [EOL] test_paths = input_paths [ num_train + num_valid : ] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] , len ( train_paths ) // config . BATCH_SIZE ) [EOL] print ( [string] ) [EOL] [EOL] return train_paths , valid_paths , test_paths [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] import tensorflow as tf [EOL] [EOL] [comment] [EOL] [comment] [EOL] DATA_PATH = [string] [EOL] [EOL] [comment] [EOL] STRUCTURE_NAMES = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RATIO = ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] GRID_SIZE = [number] [EOL] CONTEXT = [number] [EOL] BATCH_SIZE = [number] [EOL] [EOL] [comment] [EOL] EPOCHS = [number] [EOL] OPTIMIZER = [string] [EOL] LOSS = tf . nn . sigmoid_cross_entropy_with_logits [EOL] METRICS = [ [string] ] [EOL] [EOL] [comment] [EOL] TENSOR_TYPE_STR = [string] [EOL] tf . keras . backend . set_floatx ( TENSOR_TYPE_STR ) [EOL] TENSOR_TYPE = eval ( f" [string] { TENSOR_TYPE_STR }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import functools [EOL] from pathlib import Path [EOL] from random import randint [EOL] [EOL] import numpy as np [EOL] [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import skimage . draw [EOL] import skimage . transform [EOL] [EOL] [comment] [EOL] import pydicom [EOL] [EOL] import tensorflow as tf [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class data_gen ( tf . keras . utils . Sequence ) : [EOL] def __init__ ( self , input_paths , context_paths , label_paths , context , batch_size , structure_names , resize , ) : [EOL] print ( [string] ) [EOL] self . input_paths = input_paths [EOL] self . context_paths = context_paths [EOL] self . label_paths = label_paths [EOL] self . context = context [EOL] self . batch_size = batch_size [EOL] self . structure_names = structure_names [EOL] self . resize = resize [EOL] [EOL] for path in self . label_paths : [EOL] _ = self . pre_cached_structures ( path ) [EOL] [EOL] self . on_epoch_end ( ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] @ functools . lru_cache ( ) def pre_cached_structures ( self , path ) : [EOL] return pydicom . dcmread ( path , force = True ) [EOL] [EOL] def get_parent_dir ( self , path ) : [EOL] return Path ( path ) . parent . name [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __getitem__ ( self , batch_index ) : [EOL] [EOL] if ( batch_index + [number] ) * self . batch_size > len ( self . input_paths ) : [EOL] self . batch_size = len ( self . input_paths ) - batch_index * self . batch_size [EOL] [EOL] batch_paths = self . input_paths [ batch_index * self . batch_size : ( batch_index + [number] ) * self . batch_size ] [EOL] [EOL] batch_inputs = [ ] [EOL] batch_labels = [ ] [EOL] [EOL] for image_path in batch_paths : [EOL] [comment] [EOL] parent_dir = self . get_parent_dir ( image_path ) [EOL] [comment] [EOL] mask_path = [ s for s in self . label_paths if parent_dir in s ] [ [number] ] [EOL] [comment] [EOL] image_index = self . context_paths . index ( image_path ) [EOL] [comment] [EOL] input_paths = self . context_paths [ image_index - self . context : image_index + self . context + [number] ] [EOL] [EOL] try : [EOL] assert len ( input_paths ) == [number] * self . context + [number] [EOL] except : [EOL] continue [EOL] [EOL] [comment] [EOL] [EOL] images = [ ] [EOL] for dcm_path in input_paths : [EOL] dicom_ct = pydicom . dcmread ( dcm_path , force = True ) [EOL] try : [EOL] dicom_ct . file_meta . TransferSyntaxUID [EOL] except AttributeError : [EOL] dicom_ct . file_meta . TransferSyntaxUID = ( pydicom . uid . ImplicitVRLittleEndian ) [EOL] image = dicom_ct . pixel_array [EOL] image = skimage . transform . resize ( image , ( self . resize , self . resize ) ) [EOL] images = images + [ image ] [EOL] [EOL] batch_inputs . append ( images ) [EOL] [EOL] [comment] [EOL] [EOL] img = pydicom . dcmread ( image_path , force = True ) [EOL] img_position = img . ImagePositionPatient [EOL] img_spacing = [ x for x in img . PixelSpacing ] + [ img . SliceThickness ] [EOL] img_orientation = img . ImageOrientationPatient [EOL] [EOL] dicom_structures = self . pre_cached_structures ( mask_path ) [EOL] [EOL] assert ( img . FrameOfReferenceUID == dicom_structures . StructureSetROISequence [ [number] ] . ReferencedFrameOfReferenceUID ) [EOL] [EOL] dcm_rs_struct_names = [ structure . ROIName for structure in dicom_structures . StructureSetROISequence ] [EOL] [EOL] structure_names = self . structure_names [EOL] [EOL] names_to_pull = [ name for name in dcm_rs_struct_names if name in structure_names ] [EOL] try : [EOL] assert len ( names_to_pull ) == len ( structure_names ) [EOL] except : [EOL] batch_inputs . pop ( ) [EOL] continue [EOL] [EOL] structure_indexes = [ dcm_rs_struct_names . index ( name ) for name in names_to_pull ] [EOL] [EOL] mask = np . zeros ( shape = ( [number] , [number] , [number] , len ( structure_indexes ) ) ) [EOL] [EOL] dx , dy , * rest = img_spacing [EOL] Cx , Cy , * rest = img_position [EOL] Ox , Oy = img_orientation [ [number] ] , img_orientation [ [number] ] [EOL] [EOL] for mask_index , structure_index in enumerate ( structure_indexes ) : [EOL] z = [ z_slice . ContourData [ [number] : : [number] ] [ [number] ] for z_slice in dicom_structures . ROIContourSequence [ structure_index ] . ContourSequence ] [EOL] [EOL] try : [EOL] indexes = z . index ( img_position [ [number] ] ) [EOL] except : [EOL] continue [EOL] [EOL] try : [EOL] len ( indexes ) [EOL] except : [EOL] indexes = [ indexes ] [EOL] [EOL] for index in indexes : [EOL] xyz = ( dicom_structures . ROIContourSequence [ structure_index ] . ContourSequence [ index ] . ContourData ) [EOL] [EOL] x = np . array ( xyz [ [number] : : [number] ] ) [EOL] y = np . array ( xyz [ [number] : : [number] ] ) [EOL] [EOL] r = ( y - Cy ) / dy * Oy [EOL] c = ( x - Cx ) / dx * Ox [EOL] [EOL] rr , cc = skimage . draw . polygon ( r , c ) [EOL] [EOL] mask [ : , rr , cc , mask_index ] = True [EOL] [EOL] mask = skimage . transform . resize ( mask , ( [number] , self . resize , self . resize , len ( structure_indexes ) ) ) [EOL] [EOL] batch_labels . append ( mask ) [EOL] [EOL] [comment] [EOL] batch_inputs = np . array ( batch_inputs ) [EOL] batch_inputs = batch_inputs [ ... , np . newaxis ] [EOL] [EOL] [comment] [EOL] batch_labels = np . array ( batch_labels ) [EOL] [EOL] return batch_inputs , batch_labels [EOL] [EOL] def __len__ ( self ) : [EOL] [comment] [EOL] return int ( np . ceil ( len ( self . input_paths ) / float ( self . batch_size ) ) ) [EOL] [EOL] def on_epoch_end ( self ) : [EOL] [docstring] [EOL] None [EOL] [EOL] def random_batch ( self , batch_index = False ) : [EOL] if batch_index is False : [EOL] batch_index = randint ( [number] , round ( len ( self . input_paths ) / self . batch_size ) - [number] ) [EOL] [EOL] print ( [string] , batch_index , [string] , round ( len ( self . input_paths ) / self . batch_size ) - [number] , ) [EOL] [EOL] batch_inputs , batch_labels = self . __getitem__ ( batch_index = batch_index ) [EOL] [EOL] print ( [string] , batch_inputs . shape ) [EOL] print ( [string] , batch_labels . shape ) [EOL] [EOL] return batch_inputs , batch_labels [EOL] [EOL] def plot_instance ( self , batch_index = False , input_index = False ) : [EOL] batch_inputs , batch_labels = self . random_batch ( batch_index ) [EOL] [EOL] if input_index is False : [EOL] input_index = randint ( [number] , batch_inputs . shape [ [number] ] - [number] ) [EOL] [EOL] print ( [string] , input_index , [string] , batch_inputs . shape [ [number] ] - [number] ) [EOL] [EOL] num_labels = batch_labels . shape [ - [number] ] [EOL] [EOL] fig , axes = plt . subplots ( nrows = [number] , ncols = num_labels , figsize = ( [number] , [number] * num_labels ) , sharex = True , sharey = True , ) [EOL] axes [ [number] ] . imshow ( batch_inputs [ input_index , [number] , : , : , [number] ] , cmap = [string] ) [EOL] axes [ [number] ] . set_title ( [string] ) [EOL] axes [ [number] ] . axis ( [string] ) [EOL] [EOL] for label , ax in enumerate ( axes [ [number] : - [number] ] ) : [EOL] ax . imshow ( batch_labels [ input_index , [number] , : , : , label ] ) [EOL] ax . set_title ( [string] , label ) [EOL] ax . axis ( [string] ) [EOL] fig . tight_layout ( ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import config [EOL] import data_generator [EOL] import paths [EOL] [EOL] input_paths , context_paths , label_paths = paths . get_paths ( config . DATA_PATH , config . CONTEXT ) [EOL] [EOL] train_paths , valid_paths , test_paths = paths . split_paths ( input_paths , config . RATIO ) [EOL] [EOL] train_gen = data_generator . data_gen ( train_paths , context_paths , label_paths , context = config . CONTEXT , batch_size = config . BATCH_SIZE , structure_names = config . STRUCTURE_NAMES , resize = config . GRID_SIZE , ) [EOL] [EOL] valid_gen = data_generator . data_gen ( valid_paths , context_paths , label_paths , context = config . CONTEXT , batch_size = config . BATCH_SIZE , structure_names = config . STRUCTURE_NAMES , resize = config . GRID_SIZE , ) [EOL] [EOL] test_gen = data_generator . data_gen ( test_paths , context_paths , label_paths , context = config . CONTEXT , batch_size = config . BATCH_SIZE , structure_names = config . STRUCTURE_NAMES , resize = config . GRID_SIZE , ) [EOL] [EOL] test_gen . plot_instance ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import tensorflow as tf [EOL] [EOL] [EOL] def down_block ( x , m , n , c ) : [EOL] crop = tf . keras . layers . Cropping3D ( cropping = ( n , [number] , [number] ) ) ( x ) [EOL] crop = tf . keras . layers . Conv3D ( c , [number] , activation = None ) ( crop ) [EOL] [EOL] result = tf . keras . layers . ReLU ( ) ( x ) [EOL] for repeat in range ( m ) : [EOL] result = tf . keras . layers . Conv3D ( c , ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( result ) [EOL] result = tf . keras . layers . ReLU ( ) ( result ) [EOL] [EOL] for repeat in range ( n ) : [EOL] result = tf . keras . layers . Conv3D ( c , ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( result ) [EOL] result = tf . keras . layers . Conv3D ( c , ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( result ) [EOL] if repeat != range ( n ) [ - [number] ] : [EOL] result = tf . keras . layers . ReLU ( ) ( result ) [EOL] [EOL] result = tf . keras . layers . Add ( ) ( [ crop , result ] ) [EOL] return result [EOL] [EOL] [EOL] def pool ( x ) : [EOL] result = tf . keras . layers . AveragePooling3D ( pool_size = ( [number] , [number] , [number] ) , strides = None , padding = [string] ) ( x ) [EOL] return result [EOL] [EOL] [EOL] def fc_block ( x , r ) : [EOL] initializer = tf . random_normal_initializer ( [number] , [number] ) [EOL] result = tf . keras . layers . Conv3D ( [number] , ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( x ) [EOL] for repeat in range ( r ) : [EOL] crop = result [EOL] result = tf . keras . layers . ReLU ( ) ( result ) [EOL] result = tf . keras . layers . Add ( ) ( [ crop , result ] ) [EOL] [EOL] result = tf . keras . layers . ReLU ( ) ( result ) [EOL] result = tf . keras . layers . Reshape ( ( [number] , [number] , [number] , [number] ) ) ( x ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def up_block ( x , m , c ) : [EOL] initializer = tf . random_normal_initializer ( [number] , [number] ) [EOL] [EOL] crop = tf . keras . layers . Conv3D ( c , [number] , activation = None ) ( x ) [EOL] [EOL] result = tf . keras . layers . ReLU ( ) ( x ) [EOL] for repeat in range ( m ) : [EOL] result = tf . keras . layers . Conv3D ( c , ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( result ) [EOL] result = tf . keras . layers . ReLU ( ) ( result ) [EOL] result = tf . keras . layers . Add ( ) ( [ crop , result ] ) [EOL] return result [EOL] [EOL] [EOL] def upscale ( x ) : [EOL] result = tf . keras . layers . UpSampling3D ( size = ( [number] , [number] , [number] ) ) ( x ) [EOL] return result [EOL] [EOL] [EOL] def stack ( x , skip ) : [EOL] [comment] [EOL] result = tf . keras . layers . Concatenate ( axis = [number] ) ( [ x , skip ] ) [EOL] return result [EOL] [EOL] [EOL] def Model ( input_shape , output_channels ) : [EOL] input_shape = [ [number] , [number] , [number] , [number] ] [EOL] inputs = tf . keras . layers . Input ( shape = input_shape ) [EOL] skips = [ ] [EOL] [EOL] x = down_block ( inputs , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] x = pool ( x ) [EOL] [EOL] x = down_block ( x , [number] , [number] , [number] ) [EOL] skips . append ( x ) [EOL] [EOL] x = fc_block ( x , [number] ) [EOL] [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = upscale ( x ) [EOL] x = stack ( skips [ - [number] ] , x ) [EOL] x = up_block ( x , [number] , [number] ) [EOL] [EOL] x = tf . keras . layers . Conv3D ( filters = output_channels , kernel_size = ( [number] , [number] , [number] ) , strides = [number] , activation = [string] , padding = [string] , ) ( x ) [EOL] [EOL] return tf . keras . Model ( inputs = inputs , outputs = x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tensorflow as tf [EOL] [EOL] [EOL] def Model ( input_shape , output_channels ) : [EOL] inputs = tf . keras . layers . Input ( shape = input_shape ) [EOL] x = tf . keras . layers . Conv3D ( [number] , ( [number] , [number] , [number] ) , padding = [string] ) ( inputs ) [EOL] x = tf . keras . layers . AveragePooling3D ( pool_size = ( [number] , [number] , [number] ) , strides = [number] , padding = [string] ) ( x ) [EOL] x = tf . keras . layers . Conv3D ( output_channels , [number] , activation = [string] ) ( x ) [EOL] x = tf . keras . activations . sigmoid ( x ) [EOL] return tf . keras . Model ( inputs = inputs , outputs = x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] import builtins [EOL] from typing import List , Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] DATA_PATH = [string] [EOL] STRUCTURE_NAMES = [ [string] ] [EOL] [EOL] CONTEXT = [number] [EOL] BATCH_SIZE = [number] [EOL] [EOL] [comment] [EOL] SPLIT_RATIO = ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] INPUT_SHAPE = ( [number] * CONTEXT + [number] , [number] , [number] , [number] ) [EOL] OUTPUT_SHAPE = ( [number] , [number] , [number] , len ( STRUCTURE_NAMES ) ) [EOL] OUTPUT_CHANNELS = OUTPUT_SHAPE [ - [number] ] [EOL] [EOL] [comment] [EOL] EPOCHS = [number] [EOL] OPTIMIZER = [string] [EOL] [EOL] import tensorflow as tf [EOL] [EOL] LOSS = tf . nn . sigmoid_cross_entropy_with_logits [EOL] [EOL] METRICS = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] from typing import List , Pattern , Any [EOL] import typing [EOL] import argparse [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import os . path [EOL] import re [EOL] import sys [EOL] [EOL] import pydicom [EOL] from pydicom . compat import int_type [EOL] from pydicom . datadict import dictionary_keyword [EOL] [EOL] line_term = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] first_cap_re = re . compile ( [string] ) [EOL] all_cap_re = re . compile ( [string] ) [EOL] [EOL] byte_VRs = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def camel_to_underscore ( name ) : [EOL] [docstring] [EOL] [comment] [EOL] s1 = first_cap_re . sub ( [string] , name ) [EOL] return all_cap_re . sub ( [string] , s1 ) . lower ( ) [EOL] [EOL] [EOL] def tag_repr ( tag ) : [EOL] [docstring] [EOL] return [string] . format ( group = tag . group , elem = tag . element ) [EOL] [EOL] [EOL] def default_name_filter ( name ) : [EOL] [docstring] [EOL] name = camel_to_underscore ( name ) [EOL] name = name . replace ( [string] , [string] ) [EOL] name = name . replace ( [string] , [string] ) [EOL] name = name . replace ( [string] , [string] ) [EOL] return name [EOL] [EOL] [EOL] [comment] [EOL] def code_imports ( ) : [EOL] [docstring] [EOL] line0 = [string] [EOL] line0 += [string] [EOL] line1 = [string] [EOL] line2 = [string] [EOL] line3 = [string] [EOL] return line_term . join ( ( line0 , line1 , line2 , line3 ) ) [EOL] [EOL] [EOL] def code_dataelem ( dataelem , dataset_name = [string] , exclude_size = None , include_private = False ) : [EOL] [docstring] [EOL] [EOL] if dataelem . VR == [string] : [EOL] return code_sequence ( dataelem , dataset_name , exclude_size , include_private ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] have_keyword = True [EOL] try : [EOL] keyword = dictionary_keyword ( dataelem . tag ) [EOL] except KeyError : [EOL] have_keyword = False [EOL] [EOL] valuerep = repr ( dataelem . value ) [EOL] [EOL] if exclude_size : [EOL] if dataelem . VR in byte_VRs and len ( dataelem . value ) > exclude_size : [EOL] valuerep = [string] % len ( dataelem . value ) [EOL] [EOL] if have_keyword : [EOL] format_str = [string] [EOL] line = format_str . format ( ds_name = dataset_name , keyword = keyword , valuerep = valuerep ) [EOL] else : [EOL] format_str = [string] [EOL] line = format_str . format ( ds_name = dataset_name , tag = tag_repr ( dataelem . tag ) , VR = dataelem . VR , valuerep = valuerep , ) [EOL] return line [EOL] [EOL] [EOL] def code_sequence ( dataelem , dataset_name = [string] , exclude_size = None , include_private = False , name_filter = default_name_filter , ) : [EOL] [docstring] [EOL] lines = [ ] [EOL] seq = dataelem . value [EOL] seq_name = dataelem . name [EOL] seq_item_name = seq_name . replace ( [string] , [string] ) [EOL] seq_keyword = dictionary_keyword ( dataelem . tag ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] ) [EOL] lines . append ( [string] + seq_name ) [EOL] [EOL] [comment] [EOL] if name_filter : [EOL] seq_var = name_filter ( seq_keyword ) [EOL] lines . append ( seq_var + [string] ) [EOL] [EOL] [comment] [EOL] lines . append ( dataset_name + [string] + seq_keyword + [string] + seq_var ) [EOL] [EOL] [comment] [EOL] for i , ds in enumerate ( seq ) : [EOL] [comment] [EOL] [comment] [EOL] index_keyword = seq_keyword . replace ( [string] , [string] ) + [string] [EOL] number_keyword = seq_keyword . replace ( [string] , [string] ) + [string] [EOL] if index_keyword in ds : [EOL] index_str = str ( getattr ( ds , index_keyword ) ) [EOL] elif number_keyword in ds : [EOL] index_str = str ( getattr ( ds , number_keyword ) ) [EOL] else : [EOL] index_str = str ( i + [number] ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] ) [EOL] lines . append ( [string] + seq_name + [string] + seq_item_name + [string] + index_str ) [EOL] [EOL] [comment] [EOL] ds_name = seq_var . replace ( [string] , [string] ) + index_str [EOL] [EOL] [comment] [EOL] code_item = code_dataset ( ds , ds_name , exclude_size , include_private ) [EOL] lines . append ( code_item ) [EOL] [EOL] [comment] [EOL] lines . append ( seq_var + [string] + ds_name + [string] ) [EOL] [EOL] [comment] [EOL] return line_term . join ( lines ) [EOL] [EOL] [EOL] def code_dataset ( ds , dataset_name = [string] , exclude_size = None , include_private = False ) : [EOL] [docstring] [EOL] lines = [ ] [EOL] lines . append ( dataset_name + [string] ) [EOL] for dataelem in ds : [EOL] [comment] [EOL] if not include_private and dataelem . tag . is_private : [EOL] continue [EOL] [comment] [EOL] code_line = code_dataelem ( dataelem , dataset_name , exclude_size , include_private ) [EOL] lines . append ( code_line ) [EOL] [comment] [EOL] if dataelem . VR == [string] : [EOL] lines . append ( [string] ) [EOL] [comment] [EOL] if len ( lines ) and lines [ - [number] ] == [string] : [EOL] lines . pop ( ) [EOL] [comment] [EOL] return line_term . join ( lines ) [EOL] [EOL] [EOL] def code_file ( filename , exclude_size = None , include_private = False ) : [EOL] [docstring] [EOL] lines = [ ] [EOL] [EOL] ds = pydicom . dcmread ( filename , force = True ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] . format ( filename ) ) [EOL] lines . append ( [string] ) [EOL] [EOL] [comment] [EOL] lines . append ( code_imports ( ) ) [EOL] lines . append ( [string] ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] ) [EOL] code_meta = code_dataset ( ds . file_meta , [string] , exclude_size , include_private ) [EOL] lines . append ( code_meta ) [EOL] lines . append ( [string] ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] ) [EOL] code_ds = code_dataset ( ds , exclude_size = exclude_size , include_private = include_private ) [EOL] lines . append ( code_ds ) [EOL] lines . append ( [string] ) [EOL] [EOL] [comment] [EOL] lines . append ( [string] ) [EOL] lines . append ( [string] + str ( ds . is_implicit_VR ) ) [EOL] lines . append ( [string] + str ( ds . is_little_endian ) ) [EOL] [EOL] [comment] [EOL] return line_term . join ( lines ) [EOL] [EOL] [EOL] def main ( default_exclude_size , args = None ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] import argparse [EOL] except ImportError : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] sys . exit ( - [number] ) [EOL] [EOL] parser = argparse . ArgumentParser ( description = [string] , epilog = [string] [string] [string] [string] [string] % default_exclude_size , ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , nargs = [string] , type = argparse . FileType ( [string] ) , help = ( [string] [string] ) , default = sys . stdout , ) [EOL] help_exclude_size = [string] [EOL] help_exclude_size += [string] % default_exclude_size [EOL] parser . add_argument ( [string] , [string] , type = int_type , default = default_exclude_size , help = help_exclude_size , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] [string] , ) [EOL] parser . add_argument ( [string] , [string] , help = ( [string] [string] ) , ) [EOL] [EOL] args = parser . parse_args ( args ) [EOL] [EOL] [comment] [EOL] filename = args . infile [comment] [EOL] code_lines = code_file ( filename , args . exclude_size , args . include_private ) [EOL] [EOL] [comment] [EOL] if args . save_as : [EOL] save_as_filename = args . save_as [EOL] else : [EOL] base , ext = os . path . splitext ( filename ) [EOL] save_as_filename = base + [string] + [string] [EOL] line = [string] [EOL] save_line = line . format ( filename = save_as_filename ) [EOL] code_lines += save_line [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] if args . outfile . name != [string] : [EOL] print ( [string] % args . outfile . name ) [EOL] except AttributeError : [EOL] pass [EOL] args . outfile . write ( code_lines ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( default_exclude_size = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
from typing import List , Any [EOL] import typing [EOL] import protyping [EOL] import os . path [EOL] from collections import namedtuple [EOL] from datetime import datetime [EOL] [EOL] import pydicom [EOL] from pydicom . dataset import Dataset [EOL] from pydicom . sequence import Sequence [EOL] from pydicom . uid import generate_uid [EOL] [EOL] HERE = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] DATA_DIRECTORY = os . path . join ( os . path . dirname ( os . path . dirname ( HERE ) ) , [string] , [string] ) [EOL] [EOL] [comment] [EOL] Field = namedtuple ( [string] , [string] ) [EOL] [EOL] HAS_MLC = False [comment] [EOL] HAS_WEDGE = False [comment] [EOL] HAS_APPLICATOR = False [comment] [EOL] [EOL] [EOL] def generate_rtplan ( field_list , save_path ) : [EOL] [EOL] [comment] [EOL] ds = generate_rtplan_skeleton ( ) [EOL] [EOL] [comment] [EOL] frxn_gp_sequence = Sequence ( ) [EOL] [EOL] frxn_gp = Dataset ( ) [EOL] frxn_gp . FractionGroupNumber = [string] [EOL] frxn_gp . NumberOfFractionsPlanned = [string] [EOL] frxn_gp . NumberOfBeams = len ( field_list ) [EOL] frxn_gp . NumberOfBrachyApplicationSetups = [string] [EOL] [EOL] [comment] [EOL] beam_sequence = Sequence ( ) [EOL] refd_beam_sequence = Sequence ( ) [EOL] [EOL] [comment] [EOL] for field in field_list : [EOL] [EOL] beam_data , refd_beam_data = generate_rtplan_beam ( field ) [EOL] [EOL] beam_sequence . append ( beam_data ) [EOL] refd_beam_sequence . append ( refd_beam_data ) [EOL] [EOL] [comment] [EOL] frxn_gp . ReferencedBeamSequence = refd_beam_sequence [EOL] frxn_gp_sequence . append ( frxn_gp ) [EOL] ds . FractionGroupSequence = frxn_gp_sequence [EOL] ds . BeamSequence = beam_sequence [EOL] [EOL] [comment] [EOL] ds . is_implicit_VR = True [EOL] ds . is_little_endian = True [EOL] ds . save_as ( save_path , write_like_original = False ) [EOL] [EOL] [EOL] def generate_rtplan_file_meta ( ) : [EOL] [comment] [EOL] file_meta = Dataset ( ) [EOL] [EOL] [comment] [EOL] file_meta . MediaStorageSOPClassUID = [string] [EOL] [EOL] [comment] [EOL] file_meta . MediaStorageSOPInstanceUID = generate_uid ( prefix = [string] ) [EOL] [EOL] [comment] [EOL] file_meta . TransferSyntaxUID = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] file_meta . ImplementationClassUID = [string] [EOL] [EOL] return file_meta [EOL] [EOL] [EOL] def generate_rtplan_skeleton ( ) : [EOL] [EOL] ds = Dataset ( ) [EOL] [EOL] [comment] [EOL] file_meta = generate_rtplan_file_meta ( ) [EOL] ds . file_meta = file_meta [EOL] [EOL] [comment] [EOL] ds . PatientName = [string] [comment] [EOL] ds . PatientID = [string] [comment] [EOL] ds . PatientSex = [string] [comment] [EOL] ds . PatientBirthDate = [string] [comment] [EOL] [EOL] ds . StudyInstanceUID = pydicom . uid . generate_uid ( ) [EOL] ds . StudyDate = [string] [comment] [EOL] ds . StudyTime = [string] [comment] [EOL] ds . ReferringPhysicianName = [string] [comment] [EOL] ds . StudyID = [string] [comment] [EOL] ds . AccessionNumber = [string] [comment] [EOL] [EOL] [comment] [EOL] ds . Modality = [string] [EOL] ds . SeriesInstanceUID = pydicom . uid . generate_uid ( ) [EOL] ds . SeriesNumber = [string] [comment] [EOL] ds . OperatorsName = [string] [comment] [EOL] [EOL] [comment] [EOL] ds . FrameOfReferenceUID = pydicom . uid . generate_uid ( ) [EOL] ds . PositionReferenceIndicator = [string] [comment] [EOL] [EOL] [comment] [EOL] ds . Manufacturer = [string] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] ds . RTPlanLabel = [string] [comment] [EOL] ds . RTPlanName = [string] [comment] [EOL] ds . RTPlanDescription = [string] [comment] [EOL] [comment] [EOL] ds . RTPlanDate = datetime . now ( ) . strftime ( [string] ) [EOL] [comment] [EOL] ds . RTPlanTime = datetime . now ( ) . strftime ( [string] ) [EOL] ds . PlanIntent = [string] [EOL] ds . RTPlanGeometry = [string] [comment] [EOL] [EOL] [comment] [EOL] patient_setup_sequence = Sequence ( ) [EOL] ds . PatientSetupSequence = patient_setup_sequence [EOL] [EOL] patient_setup = Dataset ( ) [EOL] patient_setup . PatientSetupNumber = [string] [comment] [EOL] patient_setup . PatientPosition = [string] [EOL] patient_setup_sequence . append ( patient_setup ) [EOL] [EOL] [comment] [EOL] ds . SpecificCharacterSet = [string] [EOL] ds . InstanceCreationDate = [string] [comment] [EOL] ds . InstanceCreationTime = [string] [comment] [EOL] ds . SOPClassUID = file_meta . MediaStorageSOPClassUID [EOL] ds . SOPInstanceUID = file_meta . MediaStorageSOPInstanceUID [EOL] ds . ApprovalStatus = [string] [EOL] [EOL] return ds [EOL] [EOL] [EOL] def generate_rtplan_beam ( field ) : [EOL] [EOL] beam = Dataset ( ) [EOL] beam . BeamNumber = [number] [comment] [EOL] beam . BeamName = [string] [comment] [EOL] beam . BeamDescription = ( [string] ) [comment] [EOL] beam . BeamType = [string] [EOL] beam . RadiationType = [string] [comment] [EOL] [EOL] [comment] [EOL] primary_fluence_mode_sequence = Sequence ( ) [EOL] beam . PrimaryFluenceModeSequence = primary_fluence_mode_sequence [EOL] primary_fluence_mode = Dataset ( ) [EOL] primary_fluence_mode . FluenceMode = [string] [EOL] primary_fluence_mode_sequence . append ( primary_fluence_mode ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] beam . TreatmentMachineName = [string] [EOL] beam . PrimaryDosimeterUnit = [string] [EOL] [EOL] [comment] [EOL] beam . SourceAxisDistance = [string] [EOL] [EOL] [comment] [EOL] beam_limiting_device_sequence = Sequence ( ) [EOL] beam . BeamLimitingDeviceSequence = beam_limiting_device_sequence [EOL] [EOL] [comment] [EOL] beam_limiting_device1 = Dataset ( ) [EOL] beam_limiting_device1 . RTBeamLimitingDeviceType = [string] [comment] [EOL] beam_limiting_device1 . NumberOfLeafJawPairs = [string] [EOL] beam_limiting_device_sequence . append ( beam_limiting_device1 ) [EOL] [EOL] [comment] [EOL] beam_limiting_device2 = Dataset ( ) [EOL] beam_limiting_device2 . RTBeamLimitingDeviceType = [string] [comment] [EOL] beam_limiting_device2 . NumberOfLeafJawPairs = [string] [EOL] beam_limiting_device_sequence . append ( beam_limiting_device2 ) [EOL] [EOL] if HAS_MLC : [EOL] [comment] [EOL] beam_limiting_device3 = Dataset ( ) [EOL] beam_limiting_device3 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device3 . NumberOfLeafJawPairs = [string] [EOL] beam_limiting_device_sequence . append ( beam_limiting_device3 ) [EOL] [EOL] [comment] [EOL] beam_limiting_device4 = Dataset ( ) [EOL] beam_limiting_device4 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device4 . NumberOfLeafJawPairs = [string] [EOL] beam_limiting_device_sequence . append ( beam_limiting_device4 ) [EOL] [EOL] [comment] [EOL] beam . TreatmentDeliveryType = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] beam . NumberOfWedges = [number] [EOL] if HAS_WEDGE : [EOL] wedge_sequence = Sequence ( ) [EOL] beam . WedgeSequence = wedge_sequence [EOL] [EOL] [comment] [EOL] wedge = Dataset ( ) [EOL] wedge . WedgeNumber = [number] [comment] [EOL] wedge . WedgeType = [string] [comment] [EOL] wedge . WedgeID = [string] [comment] [EOL] wedge . AccessoryCode = [string] [comment] [EOL] wedge . WedgeAngle = [number] [EOL] wedge . WedgeFactor = [string] [comment] [EOL] [comment] [EOL] wedge . WedgeOrientation = [number] [EOL] wedge_sequence . append ( wedge ) [EOL] [EOL] beam . NumberOfCompensators = [string] [comment] [EOL] beam . NumberOfBoli = [string] [comment] [EOL] [EOL] [comment] [EOL] beam . NumberOfBlocks = [string] [EOL] [EOL] [comment] [EOL] if HAS_APPLICATOR : [EOL] applicator_sequence = Sequence ( ) [EOL] beam . ApplicatorSequence = applicator_sequence [EOL] [EOL] [comment] [EOL] applicator = Dataset ( ) [EOL] applicator . ApplicatorID = [string] [comment] [EOL] applicator . AccessoryCode = [string] [comment] [EOL] applicator . ApplicatorType = [string] [comment] [EOL] applicator . ApplicatorGeometrySequence = [ Dataset ( ) ] [EOL] [comment] [EOL] applicator . ApplicatorGeometrySequence [ [number] ] . ApplicatorApertureShape = [string] [EOL] [comment] [EOL] applicator . ApplicatorGeometrySequence [ [number] ] . ApplicatorOpening = [number] [EOL] [comment] [EOL] applicator . ApplicatorGeometrySequence [ [number] ] . ApplicatorOpeningX [EOL] [comment] [EOL] applicator . ApplicatorGeometrySequence [ [number] ] . ApplicatorOpeningY [EOL] [comment] [EOL] applicator . ApplicatorDescription = [string] [EOL] applicator_sequence . append ( applicator ) [EOL] [EOL] [comment] [EOL] [EOL] beam . FinalCumulativeMetersetWeight = [string] [EOL] beam . NumberOfControlPoints = [string] [EOL] [EOL] [comment] [EOL] cp_sequence = Sequence ( ) [EOL] beam . ControlPointSequence = cp_sequence [EOL] [EOL] [comment] [EOL] cp0 = Dataset ( ) [EOL] cp0 . ControlPointIndex = [string] [EOL] cp0 . CumulativeMetersetWeight = [string] [EOL] cp0 . NominalBeamEnergy = [string] [comment] [EOL] cp0 . DoseRateSet = [string] [comment] [EOL] [EOL] [comment] [EOL] if HAS_WEDGE : [EOL] wedge_position_sequence = Sequence ( ) [EOL] cp0 . WedgePositionSequence = wedge_position_sequence [EOL] [EOL] [comment] [EOL] wedge_position = Dataset ( ) [EOL] wedge_position . ReferencedWedgeNumber = [number] [comment] [EOL] wedge_position . WedgePosition = [string] [comment] [EOL] wedge_position_sequence . append ( wedge_position ) [EOL] [EOL] [comment] [EOL] beam_limiting_device_position_sequence = Sequence ( ) [EOL] cp0 . BeamLimitingDevicePositionSequence = beam_limiting_device_position_sequence [EOL] [EOL] [comment] [EOL] beam_limiting_device_position1 = Dataset ( ) [EOL] [comment] [EOL] beam_limiting_device_position1 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device_position1 . LeafJawPositions = [ [string] , [string] , ] [comment] [EOL] beam_limiting_device_position_sequence . append ( beam_limiting_device_position1 ) [EOL] [EOL] [comment] [EOL] beam_limiting_device_position2 = Dataset ( ) [EOL] [comment] [EOL] beam_limiting_device_position2 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device_position2 . LeafJawPositions = [ [string] , [string] , ] [comment] [EOL] beam_limiting_device_position_sequence . append ( beam_limiting_device_position2 ) [EOL] [EOL] if HAS_MLC : [comment] [EOL] [comment] [EOL] beam_limiting_device_position3 = Dataset ( ) [EOL] beam_limiting_device_position3 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device_position3 . LeafJawPositions = [ ] [comment] [EOL] beam_limiting_device_position_sequence . append ( beam_limiting_device_position3 ) [EOL] [EOL] [comment] [EOL] beam_limiting_device_position4 = Dataset ( ) [EOL] beam_limiting_device_position4 . RTBeamLimitingDeviceType = [string] [EOL] beam_limiting_device_position4 . LeafJawPositions = [ ] [comment] [EOL] beam_limiting_device_position_sequence . append ( beam_limiting_device_position4 ) [EOL] [EOL] cp0 . GantryAngle = [string] [comment] [EOL] cp0 . GantryRotationDirection = [string] [EOL] cp0 . BeamLimitingDeviceAngle = [string] [comment] [EOL] cp0 . BeamLimitingDeviceRotationDirection = [string] [EOL] cp0 . PatientSupportAngle = [string] [EOL] cp0 . PatientSupportRotationDirection = [string] [EOL] cp0 . TableTopEccentricAngle = [string] [EOL] cp0 . TableTopEccentricRotationDirection = [string] [EOL] cp0 . TableTopPitchAngle = [number] [EOL] cp0 . TableTopPitchRotationDirection = [string] [EOL] cp0 . TableTopRollAngle = [number] [EOL] cp0 . TableTopRollRotationDirection = [string] [EOL] cp0 . TableTopVerticalPosition = [string] [comment] [EOL] cp0 . TableTopLongitudinalPosition = [string] [comment] [EOL] cp0 . TableTopLateralPosition = [string] [comment] [EOL] [comment] [EOL] cp0 . IsocenterPosition = [ [string] , [string] , [string] ] [EOL] cp0 . SourceToSurfaceDistance = [number] [comment] [EOL] [EOL] cp_sequence . append ( cp0 ) [EOL] [EOL] [comment] [EOL] cp1 = Dataset ( ) [EOL] cp1 . ControlPointIndex = [string] [EOL] cp1 . CumulativeMetersetWeight = [string] [EOL] [EOL] cp_sequence . append ( cp1 ) [EOL] [EOL] [comment] [EOL] refd_beam = Dataset ( ) [EOL] refd_beam . ReferencedBeamNumber = [string] [EOL] refd_beam . BeamMeterset = [string] [comment] [EOL] [EOL] return beam , refd_beam [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] fields = [ Field ( [string] , [string] , [string] , [string] , [string] ) ] [comment] [EOL] save_path = os . path . join ( DATA_DIRECTORY , [string] ) [EOL] generate_rtplan ( fields , save_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[protyping.archive.dcmplan.generate_rp.Field]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.booltyping.List[protyping.archive.dcmplan.generate_rp.Field]$ 0 0 $typing.List[protyping.archive.dcmplan.generate_rp.Field]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[protyping.archive.dcmplan.generate_rp.Field]$ 0 $builtins.str$ 0 0
from typing import Union , Pattern , Dict , Any , List , Type , Tuple [EOL] import typing [EOL] import datetime [EOL] import functools [EOL] import os [EOL] import re [EOL] [EOL] import numpy as np [EOL] [EOL] [comment] [EOL] import pymedphys . _utilities . filesystem [EOL] [EOL] offset = [number] [EOL] DATE_PATTERN = re . compile ( [string] ) [EOL] ITEM_PATTERN = re . compile ( [string] ) [EOL] [EOL] [EOL] def get_most_recent_data_point ( live_path ) : [EOL] with pymedphys . _utilities . filesystem . open_no_lock ( live_path , [string] ) as f : [EOL] f . seek ( [number] , os . SEEK_END ) [EOL] file_size = f . tell ( ) [EOL] f . seek ( file_size - offset ) [EOL] data = f . read ( ) [EOL] [EOL] data_points = get_data_points ( data ) [EOL] return data_points [ - [number] ] [EOL] [EOL] [EOL] def get_data_points ( data ) : [EOL] date_index = [ m . span ( ) for m in DATE_PATTERN . finditer ( data ) ] [EOL] start_points = [ span [ [number] ] - [number] for span in date_index ] [EOL] [EOL] end_points = start_points [ [number] : : ] + [ None ] [EOL] [EOL] data_points = [ data [ start : end ] for start , end in zip ( start_points , end_points ) ] [EOL] return data_points [EOL] [EOL] [EOL] def extract_positions_by_header ( key , num_items , results_by_line ) : [EOL] header_index = results_by_line . index ( [ key ] ) [EOL] return [ float ( item [ [number] ] ) for item in results_by_line [ header_index + [number] : header_index + [number] + num_items ] ] [EOL] [EOL] [EOL] def get_jaw_and_mlc ( results_by_line ) : [EOL] options = [ ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ] [EOL] collimation = { } [EOL] for key , num_items in options : [EOL] collimation [ key ] = extract_positions_by_header ( key , num_items , results_by_line ) [EOL] [EOL] return collimation [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_coll_regex ( label , number ) : [EOL] header = [string] + label + [string] [EOL] item = [string] [EOL] [EOL] regex = re . compile ( header + [string] . join ( [ item ] * number ) ) [EOL] return regex [EOL] [EOL] [EOL] def extract_coll ( data , label , number ) : [EOL] regex = get_coll_regex ( label , number ) [EOL] [EOL] match = regex . search ( data ) [EOL] span = match . span ( ) [EOL] [EOL] data = data [ [number] : span [ [number] ] ] + data [ span [ [number] ] + [number] : : ] [EOL] items = np . array ( [ float ( item ) for item in match . groups ( ) ] ) [EOL] [EOL] return data , items [EOL] [EOL] [EOL] @ functools . lru_cache ( ) def get_lookup_regex ( key ) : [EOL] regex = re . compile ( [string] + key + [string] ) [EOL] return regex [EOL] [EOL] [EOL] def extract_by_lookup ( data , key , this_type ) : [EOL] regex = get_lookup_regex ( key ) [EOL] match = regex . search ( data ) [EOL] [EOL] try : [EOL] span = match . span ( ) [EOL] except AttributeError : [EOL] return data , None [EOL] [EOL] removed_data = data [ [number] : span [ [number] ] ] + data [ span [ [number] ] + [number] : : ] [EOL] [EOL] result = match . group ( [number] ) [EOL] if result == [string] : [EOL] removed_data , result = extract_by_lookup ( removed_data , key , this_type ) [EOL] elif this_type is str : [EOL] result = result . decode ( ) [EOL] else : [EOL] result = this_type ( result ) [EOL] [EOL] return removed_data , result [EOL] [EOL] [EOL] def extract_all_lookup ( data , result ) : [EOL] for key , label in lookup . items ( ) : [EOL] data , result [ label ] = extract_by_lookup ( data , key , types [ label ] ) [EOL] [EOL] return data [EOL] [EOL] [EOL] def extract_all_multiples ( data , result ) : [EOL] for key , label in multiples . items ( ) : [EOL] result [ label ] = [ ] [EOL] [EOL] while True : [EOL] data , a_result = extract_by_lookup ( data , key , types [ label ] ) [EOL] if a_result is not None : [EOL] result [ label ] . append ( a_result ) [EOL] else : [EOL] break [EOL] [EOL] return data [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def strict_extract ( data ) : [EOL] result = dict ( ) [EOL] [EOL] timestamp_and_counter = DATE_PATTERN . search ( data ) . group ( [number] ) [EOL] timestamp = timestamp_and_counter [ : - [number] ] [EOL] counter = int ( timestamp_and_counter [ - [number] ] ) [EOL] [EOL] result [ [string] ] = datetime . datetime . strptime ( timestamp . decode ( ) , [string] ) . isoformat ( ) [EOL] result [ [string] ] = counter [EOL] [EOL] data = extract_all_lookup ( data , result ) [EOL] data = extract_all_multiples ( data , result ) [EOL] [EOL] data , result [ [string] ] = extract_coll ( data , [string] , [number] ) [EOL] data , result [ [string] ] = extract_coll ( data , [string] , [number] ) [EOL] data , result [ [string] ] = extract_coll ( data , [string] , [number] ) [EOL] [EOL] [comment] [EOL] return data , result [EOL] [EOL] [EOL] def get_patient_id ( data_point ) : [EOL] _ , patient_id = extract_by_lookup ( data_point , inverse_lookup [ [string] ] , str ) [EOL] return patient_id [EOL] [EOL] [EOL] types = { [string] : str , [string] : str , [string] : str , [string] : str , [string] : int , [string] : str , [string] : str , [string] : str , [string] : int , [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : int , [string] : int , [string] : float , [string] : float , [string] : float , [string] : str , [string] : str , [string] : str , } [EOL] [EOL] [EOL] lookup = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] multiples = { [string] : [string] , [string] : [string] , } [EOL] [EOL] inverse_lookup = { key : item for item , key in lookup . items ( ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def initial_results_parse ( data_point ) : [EOL] pattern = re . compile ( [string] ) [EOL] [EOL] results = pattern . findall ( data_point ) [EOL] results = np . array ( results ) [EOL] [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Pattern[builtins.bytes]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[builtins.float,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Generator , Any , Type , Mapping , Tuple [EOL] import typing [EOL] import builtins [EOL] import jax [EOL] import haiku [EOL] [docstring] [EOL] [EOL] from typing import Any , Generator , Mapping , Tuple [EOL] [EOL] import numpy as np [EOL] [EOL] import haiku as hk [EOL] import jax [EOL] import jax . numpy as jnp [EOL] import tensorflow_datasets as tfds [EOL] from absl import app [EOL] from jax . experimental import optix [EOL] [EOL] OptState = Any [EOL] Batch = Mapping [ str , np . ndarray ] [EOL] [EOL] [EOL] def net_fn ( batch ) : [EOL] [docstring] [EOL] x = batch [ [string] ] . astype ( jnp . float32 ) / [number] [EOL] mlp = hk . Sequential ( [ hk . Flatten ( ) , hk . Linear ( [number] ) , jax . nn . relu , hk . Linear ( [number] ) , jax . nn . relu , hk . Linear ( [number] ) , ] ) [EOL] return mlp ( x ) [EOL] [EOL] [EOL] def load_dataset ( split , * , is_training , batch_size ) : [EOL] [docstring] [EOL] ds = tfds . load ( [string] , split = split ) . cache ( ) . repeat ( ) [EOL] if is_training : [EOL] ds = ds . shuffle ( [number] * batch_size , seed = [number] ) [EOL] ds = ds . batch ( batch_size ) [EOL] return tfds . as_numpy ( ds ) [EOL] [EOL] [EOL] def main ( _ ) : [EOL] [comment] [EOL] net = hk . transform ( net_fn ) [EOL] opt = optix . adam ( [number] ) [EOL] [EOL] [comment] [EOL] def loss ( params , batch ) : [EOL] [docstring] [EOL] logits = net . apply ( params , batch ) [EOL] labels = jax . nn . one_hot ( batch [ [string] ] , [number] ) [EOL] [EOL] l2_loss = [number] * sum ( jnp . sum ( jnp . square ( p ) ) for p in jax . tree_leaves ( params ) ) [EOL] softmax_xent = - jnp . sum ( labels * jax . nn . log_softmax ( logits ) ) [EOL] softmax_xent /= labels . shape [ [number] ] [EOL] [EOL] return softmax_xent + [number] * l2_loss [EOL] [EOL] [comment] [EOL] @ jax . jit def accuracy ( params , batch ) : [EOL] predictions = net . apply ( params , batch ) [EOL] return jnp . mean ( jnp . argmax ( predictions , axis = - [number] ) == batch [ [string] ] ) [EOL] [EOL] @ jax . jit def update ( params , opt_state , batch ) : [EOL] [docstring] [EOL] grads = jax . grad ( loss ) ( params , batch ) [EOL] updates , opt_state = opt . update ( grads , opt_state ) [EOL] new_params = optix . apply_updates ( params , updates ) [EOL] return new_params , opt_state [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ jax . jit def ema_update ( avg_params , new_params , epsilon = [number] ) : [EOL] return jax . tree_multimap ( lambda p1 , p2 : ( [number] - epsilon ) * p1 + epsilon * p2 , avg_params , new_params ) [EOL] [EOL] [comment] [EOL] train = load_dataset ( [string] , is_training = True , batch_size = [number] ) [EOL] train_eval = load_dataset ( [string] , is_training = False , batch_size = [number] ) [EOL] test_eval = load_dataset ( [string] , is_training = False , batch_size = [number] ) [EOL] [EOL] [comment] [EOL] params = avg_params = net . init ( jax . random . PRNGKey ( [number] ) , next ( train ) ) [EOL] opt_state = opt . init ( params ) [EOL] [EOL] [comment] [EOL] for step in range ( [number] ) : [EOL] if step % [number] == [number] : [EOL] [comment] [EOL] train_accuracy = accuracy ( avg_params , next ( train_eval ) ) [EOL] test_accuracy = accuracy ( avg_params , next ( test_eval ) ) [EOL] train_accuracy , test_accuracy = jax . device_get ( ( train_accuracy , test_accuracy ) ) [EOL] print ( f" [string] { step } [string] " f"{ train_accuracy : [string] } [string] { test_accuracy : [string] } [string] " ) [EOL] [EOL] [comment] [EOL] params , opt_state = update ( params , opt_state , next ( train ) ) [EOL] avg_params = ema_update ( avg_params , params ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( main ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jax.numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[Batch,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jax.numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jax.numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[haiku.Params,OptState]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $haiku.Params$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from typing import Union , Dict , Any , List , Tuple [EOL] import typing [EOL] import os [EOL] [EOL] import pymedphys [EOL] [EOL] os . system ( [string] ) [EOL] [EOL] [EOL] def setup ( app ) : [EOL] app . add_stylesheet ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] project = [string] [EOL] copyright = ( [string] ) [EOL] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = pymedphys . __version__ [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] napoleon_google_docstring = False [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [ [string] ] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] pygments_style = None [EOL] [EOL] [EOL] [comment] [EOL] nbsphinx_prolog = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme_options = { [string] : [string] } [EOL] [EOL] html_logo = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] html_context = { [string] : True , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , author , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] , ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0