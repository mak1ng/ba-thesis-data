from typing import Dict , Optional [EOL] import nrdash [EOL] import typing [EOL] [docstring] [EOL] import click [EOL] [EOL] from nrdash import new_relic_api , parsing [EOL] [EOL] [EOL] @ click . group ( ) def main ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ main . command ( ) @ click . argument ( [string] , type = str , required = True ) @ click . option ( [string] , type = str , required = True , help = [string] ) @ click . option ( [string] , type = int , required = True , help = [string] ) def build ( config_file , api_key , account_id ) : [EOL] [docstring] [EOL] dashboards = parsing . parse_file ( config_file ) [EOL] client = new_relic_api . NewRelicApiClient ( api_key , account_id ) [EOL] [EOL] for dashboard in dashboards . values ( ) : [EOL] dashboard_id = client . get_dashboard_id_by_title ( dashboard . title ) [EOL] if dashboard_id : [EOL] print ( f" [string] { dashboard . name }" ) [EOL] client . update_dashboard ( dashboard_id , dashboard ) [EOL] else : [EOL] print ( f" [string] { dashboard . name }" ) [EOL] client . create_dashboard ( dashboard ) [EOL] [EOL] [EOL] @ main . command ( ) @ click . argument ( [string] , type = str , required = True ) def lint ( config_file ) : [EOL] [docstring] [EOL] parsing . parse_file ( config_file ) [EOL] print ( f"{ config_file } [string] " ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Any , List , Dict , Optional [EOL] import requests [EOL] import typing [EOL] import builtins [EOL] import models [EOL] [docstring] [EOL] from typing import Dict , Optional [EOL] [EOL] import requests [EOL] [EOL] from . models import Dashboard , Widget , NewRelicApiException [EOL] [EOL] [EOL] BASE_URL = [string] [EOL] DASHBOARDS_URL = BASE_URL + [string] [EOL] [EOL] [EOL] class NewRelicApiClient : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , api_key , account_id ) : [EOL] [docstring] [EOL] self . _api_key = api_key [EOL] self . _account_id = account_id [EOL] [EOL] def create_dashboard ( self , dashboard ) : [EOL] [docstring] [EOL] self . _send_dashboard_data ( requests . post , DASHBOARDS_URL , dashboard ) [EOL] [EOL] def get_dashboard_id_by_title ( self , dashboard_title ) : [EOL] [docstring] [EOL] params = { [string] : dashboard_title } [EOL] response = requests . get ( DASHBOARDS_URL , headers = self . _auth_headers ( ) , params = params ) [EOL] if response . status_code != [number] : [EOL] raise NewRelicApiException ( f" [string] { dashboard_title } [string] { response . status_code } [string] { response . content }" ) [EOL] [EOL] dashboards = response . json ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] matching_dashboards = [ dashboard for dashboard in dashboards [ [string] ] if dashboard [ [string] ] == dashboard_title ] [EOL] [EOL] if not matching_dashboards : [EOL] return None [EOL] [EOL] if len ( matching_dashboards ) > [number] : [EOL] raise NewRelicApiException ( f" [string] { dashboard_title } [string] " ) [EOL] [EOL] return matching_dashboards [ [number] ] [ [string] ] [EOL] [EOL] def update_dashboard ( self , dashboard_id , dashboard ) : [EOL] [docstring] [EOL] url = f"{ BASE_URL } [string] { dashboard_id } [string] " [EOL] self . _send_dashboard_data ( requests . put , url , dashboard ) [EOL] [EOL] def _auth_headers ( self ) : [EOL] [docstring] [EOL] return { [string] : self . _api_key } [EOL] [EOL] def _dashboard_to_dict ( self , dashboard ) : [EOL] [docstring] [EOL] widgets = [ self . _widget_to_dict ( widget ) for widget in dashboard . widgets ] [EOL] return { [string] : { [string] : { [string] : [number] } , [string] : dashboard . title , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { } , [string] : widgets , } } [EOL] [EOL] def _send_dashboard_data ( self , http_call , url , dashboard ) : [EOL] [docstring] [EOL] dashboard_dict = self . _dashboard_to_dict ( dashboard ) [EOL] response = http_call ( url , headers = self . _auth_headers ( ) , json = dashboard_dict ) [EOL] [EOL] if response . status_code not in ( [number] , [number] ) : [EOL] raise NewRelicApiException ( f" [string] { dashboard . name } [string] { response . status_code } [string] { response . content }" ) [EOL] [EOL] def _widget_to_dict ( self , widget ) : [EOL] [docstring] [EOL] return { [string] : self . _account_id , [string] : widget . visualization . value , [string] : [ { [string] : widget . query } ] , [string] : { [string] : widget . title , [string] : widget . notes } , [string] : { [string] : widget . width , [string] : widget . height , [string] : widget . row , [string] : widget . column , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $None$ 0 0 0 $models.Dashboard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $models.Dashboard$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $models.Dashboard$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $models.Dashboard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $models.Dashboard$ 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $models.Dashboard$ 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.Dashboard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $models.Widget$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 0 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 $models.Widget$ 0 0 0 0 0 0 0
from typing import List , Optional [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] from enum import Enum , unique [EOL] from typing import Optional , List [EOL] [EOL] import attr [EOL] [EOL] [EOL] class NrDashException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidExtendingConditionException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidOutputConfigurationException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidQueryConfigurationException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidWidgetVisualizationException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class InvalidWidgetConfigurationException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] class NewRelicApiException ( NrDashException ) : [EOL] [docstring] [EOL] [EOL] [EOL] @ unique class WidgetVisualization ( Enum ) : [EOL] [docstring] [EOL] [EOL] BILLBOARD = [string] [EOL] GAUGE = [string] [EOL] BILLBOARD_COMPARISON = [string] [EOL] FACET_BAR_CHART = [string] [EOL] FACETED_LINE_CHART = [string] [EOL] FACET_PIE_CHART = [string] [EOL] FACET_TABLE = [string] [EOL] FACETED_AREA_CHART = [string] [EOL] HEATMAP = [string] [EOL] ATTRIBUTE_SHEET = [string] [EOL] SINGLE_EVENT = [string] [EOL] HISTOGRAM = [string] [EOL] FUNNEL = [string] [EOL] RAW_JSON = [string] [EOL] EVENT_FEED = [string] [EOL] EVENT_TABLE = [string] [EOL] UNIQUES_LIST = [string] [EOL] LINE_CHART = [string] [EOL] COMPARISON_LINE_CHART = [string] [EOL] MARKDOWN = [string] [EOL] METRIC_LINE_CHART = [string] [EOL] LIST = [string] [EOL] [EOL] @ staticmethod def from_str ( str_value ) : [EOL] [docstring] [EOL] try : [EOL] return WidgetVisualization [ str_value . upper ( ) ] [EOL] except KeyError : [EOL] raise InvalidWidgetVisualizationException ( str_value ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class QueryCondition : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] nrql = attr . ib ( ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class QueryOutputSelection : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] nrql = attr . ib ( ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class QueryDisplay : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] visualization = attr . ib ( ) [EOL] nrql = attr . ib ( default = None ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class ComponentizedQuery : [EOL] [docstring] [EOL] [EOL] event = attr . ib ( ) [EOL] output = attr . ib ( ) [EOL] display = attr . ib ( ) [EOL] condition = attr . ib ( default = None ) [EOL] [EOL] def to_nrql ( self ) : [EOL] [docstring] [EOL] if self . display . nrql : [EOL] display_nrql = f" [string] { self . display . nrql }" [EOL] else : [EOL] display_nrql = [string] [EOL] [EOL] if self . condition : [EOL] condition_nrql = f" [string] { self . condition . nrql }" [EOL] else : [EOL] condition_nrql = [string] [EOL] [EOL] return f"{ self . output . nrql } [string] { self . event }{ condition_nrql }{ display_nrql }" [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class Query : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] title = attr . ib ( ) [EOL] nrql = attr . ib ( ) [EOL] visualization = attr . ib ( ) [EOL] notes = attr . ib ( default = None ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class Widget : [EOL] [docstring] [EOL] [EOL] title = attr . ib ( ) [EOL] query = attr . ib ( ) [EOL] visualization = attr . ib ( ) [EOL] row = attr . ib ( ) [EOL] column = attr . ib ( ) [EOL] width = attr . ib ( ) [EOL] height = attr . ib ( ) [EOL] notes = attr . ib ( default = None ) [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class Dashboard : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] title = attr . ib ( ) [EOL] widgets = attr . ib ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $WidgetVisualization$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $QueryOutputSelection$ 0 0 0 0 0 0 0 $QueryDisplay$ 0 0 0 0 0 0 0 $typing.Optional[QueryCondition]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $WidgetVisualization$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $WidgetVisualization$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[Widget]$ 0 0 0 0 0 0 0
from typing import Any , Dict , Iterable , List [EOL] import models [EOL] import typing [EOL] import builtins [EOL] import nrdash [EOL] [docstring] [EOL] from enum import Enum [EOL] from typing import Dict , Iterable [EOL] [EOL] import attr [EOL] import yaml [EOL] [EOL] from . models import ( ComponentizedQuery , Dashboard , Widget , InvalidExtendingConditionException , InvalidOutputConfigurationException , InvalidQueryConfigurationException , InvalidWidgetConfigurationException , Query , QueryDisplay , QueryCondition , QueryOutputSelection , WidgetVisualization , ) [EOL] [EOL] [EOL] class _ExtendingConditionOperator ( Enum ) : [EOL] [docstring] [EOL] [EOL] AND = [string] [EOL] OR = [string] [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class _ExtendingQueryCondition : [EOL] [docstring] [EOL] [EOL] name = attr . ib ( ) [EOL] operator = attr . ib ( ) [EOL] extended_conditions = attr . ib ( ) [EOL] nrql_conditions = attr . ib ( ) [EOL] [EOL] [EOL] def parse_conditions ( config ) : [EOL] [docstring] [EOL] condition_configs = config . get ( [string] ) [EOL] if not condition_configs : [EOL] return { } [EOL] [EOL] base_conditions = { } [EOL] extending_conditions = { } [EOL] for name , condition_config in condition_configs . items ( ) : [EOL] if isinstance ( condition_config , str ) : [EOL] base_conditions [ name ] = QueryCondition ( name = name , nrql = condition_config ) [EOL] else : [EOL] extending_conditions [ name ] = _parse_extending_condition ( name , condition_config ) [EOL] [EOL] return _resolve_all_extending_conditions ( base_conditions , extending_conditions ) [EOL] [EOL] [EOL] def parse_dashboards ( config ) : [EOL] [docstring] [EOL] dashboard_configs = config . get ( [string] ) [EOL] if not dashboard_configs : [EOL] return { } [EOL] [EOL] queries = parse_queries ( config ) [EOL] dashboards = { } [EOL] for name , dashboard_config in dashboard_configs . items ( ) : [EOL] widgets = [ ] [EOL] for widget_config in dashboard_config [ [string] ] : [EOL] widgets . append ( _parse_widget ( widget_config , name , queries ) ) [EOL] [EOL] dashboards [ name ] = Dashboard ( name = name , title = dashboard_config [ [string] ] , widgets = widgets ) [EOL] [EOL] return dashboards [EOL] [EOL] [EOL] def parse_displays ( config ) : [EOL] [docstring] [EOL] display_configs = config . get ( [string] ) [EOL] if not display_configs : [EOL] return { } [EOL] [EOL] displays = { } [EOL] for name , display_config in display_configs . items ( ) : [EOL] displays [ name ] = QueryDisplay ( name = name , nrql = display_config . get ( [string] ) , visualization = WidgetVisualization . from_str ( display_config [ [string] ] ) , ) [EOL] [EOL] return displays [EOL] [EOL] [EOL] def parse_file ( file_path ) : [EOL] [docstring] [EOL] with open ( file_path , [string] ) as config_file : [EOL] config = yaml . safe_load ( config_file ) [EOL] [EOL] return parse_dashboards ( config ) [EOL] [EOL] [EOL] def parse_output_selections ( config , conditions ) : [EOL] [docstring] [EOL] output_configs = config . get ( [string] ) [EOL] if not output_configs : [EOL] return { } [EOL] [EOL] output_selections = { } [EOL] for name , output_config in output_configs . items ( ) : [EOL] if isinstance ( output_config , str ) : [EOL] [comment] [EOL] output_selections [ name ] = QueryOutputSelection ( name = name , nrql = f" [string] { output_config }" ) [EOL] elif isinstance ( output_config , list ) : [EOL] nrql_components = [ _parse_output_selection_nrql_component ( component_config , conditions ) for component_config in output_config ] [EOL] [EOL] output_selections [ name ] = QueryOutputSelection ( name = name , nrql = f" [string] { [string] . join ( nrql_components ) }" ) [EOL] elif isinstance ( output_config , dict ) : [EOL] output_selections [ name ] = QueryOutputSelection ( name = name , nrql = f" [string] { _parse_output_selection_nrql_component ( output_config , conditions ) }" , ) [EOL] else : [EOL] raise InvalidOutputConfigurationException ( output_config ) [EOL] [EOL] return output_selections [EOL] [EOL] [EOL] def parse_queries ( config ) : [EOL] [docstring] [EOL] query_configs = config . get ( [string] ) [EOL] if not query_configs : [EOL] return { } [EOL] [EOL] conditions = parse_conditions ( config ) [EOL] output_selections = parse_output_selections ( config , conditions ) [EOL] displays = parse_displays ( config ) [EOL] [EOL] queries = { } [EOL] for name , query_config in query_configs . items ( ) : [EOL] queries [ name ] = _parse_query_config ( name , query_config , conditions , output_selections , displays ) [EOL] [EOL] return queries [EOL] [EOL] [EOL] def _can_condition_be_resolved ( base_conditions , extending_condition ) : [EOL] [docstring] [EOL] return all ( condition_name in base_conditions for condition_name in extending_condition . extended_conditions ) [EOL] [EOL] [EOL] def _create_grouped_output_selection_nrql ( output_function , output_config , conditions ) : [EOL] [docstring] [EOL] function = output_config [ [string] ] [EOL] label = output_config . get ( [string] ) [EOL] if label : [EOL] label_nrql = f" [string] { label } [string] " [EOL] else : [EOL] label_nrql = [string] [EOL] [EOL] condition = output_config [ [string] ] [EOL] if condition in conditions : [EOL] condition_nrql = conditions [ condition ] . nrql [EOL] else : [EOL] condition_nrql = condition [EOL] [EOL] return f"{ output_function } [string] { function } [string] { condition_nrql } [string] { label_nrql }" [EOL] [EOL] [EOL] def _find_query_component ( query_config , component_type , component_dict , query_name ) : [EOL] [docstring] [EOL] component_name = query_config [ component_type ] [EOL] component = component_dict . get ( component_name ) [EOL] if not component : [EOL] raise InvalidQueryConfigurationException ( f" [string] { component_type } [string] { component_name } [string] { query_name }" ) [EOL] [EOL] return component [EOL] [EOL] [EOL] def _parse_componentized_query_config ( query_name , query_config , conditions , output_selections , displays ) : [EOL] [docstring] [EOL] required_fields = [ [string] , [string] , [string] , [string] ] [EOL] _validate_required_query_fields ( required_fields , query_config , query_name ) [EOL] [EOL] if [string] in query_config : [EOL] condition = _find_query_component ( query_config , [string] , conditions , query_name ) [EOL] else : [EOL] condition = None [EOL] [EOL] output = _find_query_component ( query_config , [string] , output_selections , query_name ) [EOL] display = _find_query_component ( query_config , [string] , displays , query_name ) [EOL] [EOL] componentized_query = ComponentizedQuery ( event = query_config [ [string] ] , condition = condition , output = output , display = display ) [EOL] [EOL] return Query ( name = query_name , title = query_config [ [string] ] , nrql = componentized_query . to_nrql ( ) , visualization = display . visualization , notes = query_config . get ( [string] ) , ) [EOL] [EOL] [EOL] def _parse_extending_condition ( condition_name , condition_config ) : [EOL] [docstring] [EOL] if [string] in condition_config : [EOL] operator = _ExtendingConditionOperator . AND [EOL] operand_configs = condition_config [ [string] ] [EOL] elif [string] in condition_config : [EOL] operator = _ExtendingConditionOperator . OR [EOL] operand_configs = condition_config [ [string] ] [EOL] else : [EOL] raise InvalidExtendingConditionException ( f" [string] { condition_name } [string] { condition_config }" ) [EOL] [EOL] extended_conditions = [ ] [EOL] nrql_conditions = [ ] [EOL] for operand_config in operand_configs : [EOL] if isinstance ( operand_config , str ) : [EOL] nrql_conditions . append ( operand_config ) [EOL] elif isinstance ( operand_config , dict ) and [string] in operand_config : [EOL] extended_conditions . append ( operand_config [ [string] ] ) [EOL] else : [EOL] raise InvalidExtendingConditionException ( f" [string] { condition_name } [string] { condition_config }" ) [EOL] [EOL] if not extended_conditions : [EOL] raise InvalidExtendingConditionException ( f" [string] { condition_name } [string] " ) [EOL] [EOL] return _ExtendingQueryCondition ( name = condition_name , operator = operator , extended_conditions = extended_conditions , nrql_conditions = nrql_conditions , ) [EOL] [EOL] [EOL] def _parse_inline_query_config ( query_name , query_config ) : [EOL] [docstring] [EOL] required_fields = [ [string] , [string] , [string] ] [EOL] _validate_required_query_fields ( required_fields , query_config , query_name ) [EOL] [EOL] return Query ( name = query_name , title = query_config [ [string] ] , nrql = query_config [ [string] ] , visualization = WidgetVisualization . from_str ( query_config [ [string] ] ) , notes = query_config . get ( [string] ) , ) [EOL] [EOL] [EOL] def _parse_output_selection_nrql_component ( output_config , conditions ) : [EOL] [docstring] [EOL] if isinstance ( output_config , str ) : [EOL] [comment] [EOL] return output_config [EOL] [EOL] if not isinstance ( output_config , dict ) : [EOL] raise InvalidOutputConfigurationException ( output_config ) [EOL] [EOL] if [string] in output_config : [EOL] return _create_grouped_output_selection_nrql ( [string] , output_config [ [string] ] , conditions ) [EOL] [EOL] if [string] in output_config : [EOL] return _create_grouped_output_selection_nrql ( [string] , output_config [ [string] ] , conditions ) [EOL] [EOL] raise InvalidOutputConfigurationException ( output_config ) [EOL] [EOL] [EOL] def _parse_query_config ( query_name , query_config , conditions , output_selections , displays ) : [EOL] [docstring] [EOL] if [string] in query_config : [EOL] return _parse_inline_query_config ( query_name , query_config ) [EOL] [EOL] return _parse_componentized_query_config ( query_name , query_config , conditions , output_selections , displays ) [EOL] [EOL] [EOL] def _parse_widget ( widget_config , dashboard_name , queries ) : [EOL] [docstring] [EOL] required_fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL] for field in required_fields : [EOL] _validate_required_widget_field ( field , widget_config , dashboard_name ) [EOL] [EOL] query_config = widget_config [ [string] ] [EOL] [EOL] if isinstance ( query_config , str ) : [EOL] [comment] [EOL] query = queries . get ( query_config ) [EOL] if not query : [EOL] raise InvalidWidgetConfigurationException ( f" [string] { query_config } [string] { dashboard_name }" ) [EOL] else : [EOL] query = _parse_inline_query_config ( f"{ dashboard_name } [string] " , query_config ) [EOL] [EOL] widget = Widget ( title = query . title , query = query . nrql , notes = query . notes , visualization = query . visualization , row = widget_config [ [string] ] , column = widget_config [ [string] ] , width = widget_config [ [string] ] , height = widget_config [ [string] ] , ) [EOL] [EOL] return widget [EOL] [EOL] [EOL] def _resolve_all_extending_conditions ( base_conditions , extending_conditions ) : [EOL] [docstring] [EOL] conditions_to_resolve = len ( extending_conditions ) [EOL] while conditions_to_resolve > [number] : [EOL] unresolved_conditions = [ extending_condition for condition_name , extending_condition in extending_conditions . items ( ) if condition_name not in base_conditions ] [EOL] [EOL] resolvable_conditions = [ extending_condition for extending_condition in unresolved_conditions if _can_condition_be_resolved ( base_conditions , extending_condition ) ] [EOL] [EOL] if not resolvable_conditions : [EOL] unresolved_names = [string] . join ( ( extending_condition . name for extending_condition in unresolved_conditions ) ) [EOL] raise InvalidExtendingConditionException ( f" [string] { unresolved_names }" ) [EOL] [EOL] for extending_condition in resolvable_conditions : [EOL] base_conditions [ extending_condition . name ] = _resolve_extended_condition ( base_conditions , extending_condition ) [EOL] [EOL] conditions_to_resolve -= len ( resolvable_conditions ) [EOL] [EOL] return base_conditions [EOL] [EOL] [EOL] def _resolve_extended_condition ( base_conditions , extending_condition ) : [EOL] [docstring] [EOL] nrql_conditions = [ ] [EOL] for condition_name in extending_condition . extended_conditions : [EOL] nrql_conditions . append ( f" [string] { base_conditions [ condition_name ] . nrql } [string] " ) [EOL] [EOL] for condition in extending_condition . nrql_conditions : [EOL] nrql_conditions . append ( f" [string] { condition } [string] " ) [EOL] [EOL] operator = extending_condition . operator . value [EOL] condition_nrql = f" [string] { operator } [string] " . join ( nrql_conditions ) [EOL] [EOL] return QueryCondition ( name = extending_condition . name , nrql = condition_nrql ) [EOL] [EOL] [EOL] def _validate_required_field ( exception , config_type , field_name , config , config_name ) : [EOL] [docstring] [EOL] if field_name not in config : [EOL] raise exception ( f" [string] { field_name } [string] { config_type } [string] { config_name }" ) [EOL] [EOL] [EOL] def _validate_required_query_fields ( field_names , config , query_name ) : [EOL] [docstring] [EOL] for field_name in field_names : [EOL] _validate_required_field ( InvalidQueryConfigurationException , [string] , field_name , config , query_name ) [EOL] [EOL] [EOL] def _validate_required_widget_field ( field_name , config , dashboard_name ) : [EOL] [docstring] [EOL] _validate_required_field ( InvalidWidgetConfigurationException , [string] , field_name , config , dashboard_name , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $_ExtendingConditionOperator$ 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.QueryCondition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Dashboard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Query.Display]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Dashboard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.QueryOutputSelection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,models.Query
[docstring] [EOL] import sys [EOL] [EOL] import pytest [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( pytest . main ( sys . argv [ [number] : ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from nrdash import models [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( value . value , value ) for value in models . WidgetVisualization . __members__ . values ( ) ] , ) def test_widget_visualization_from_string ( str_value , expected ) : [EOL] actual = models . WidgetVisualization . from_str ( str_value ) [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_invalid_widget_visualization_string ( ) : [EOL] with pytest . raises ( models . InvalidWidgetVisualizationException ) : [EOL] models . WidgetVisualization . from_str ( [string] ) [EOL] [EOL] [EOL] def test_componentized_query_to_nrql_display_and_condition ( ) : [EOL] query = _create_componentized_query ( event = [string] , condition = _create_condition ( [string] ) , output = _create_output_selection ( [string] ) , display = _create_display ( [string] ) , ) [EOL] [EOL] expected = [string] [EOL] [EOL] actual = query . to_nrql ( ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_componentized_query_to_nrql_display_no_condition ( ) : [EOL] query = _create_componentized_query ( event = [string] , condition = None , output = _create_output_selection ( [string] ) , display = _create_display ( [string] ) , ) [EOL] [EOL] expected = [string] [EOL] [EOL] actual = query . to_nrql ( ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_componentized_query_to_nrql_no_display_with_condition ( ) : [EOL] query = _create_componentized_query ( event = [string] , condition = _create_condition ( [string] ) , output = _create_output_selection ( [string] ) , display = None , ) [EOL] [EOL] expected = [string] [EOL] [EOL] actual = query . to_nrql ( ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_componentized_query_to_nrql_no_display_no_condition ( ) : [EOL] query = _create_componentized_query ( event = [string] , condition = None , output = _create_output_selection ( [string] ) , display = None , ) [EOL] [EOL] expected = [string] [EOL] [EOL] actual = query . to_nrql ( ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def _create_condition ( nrql ) : [EOL] [docstring] [EOL] return models . QueryCondition ( name = [string] , nrql = nrql ) [EOL] [EOL] [EOL] def _create_display ( nrql = None ) : [EOL] [docstring] [EOL] return models . QueryDisplay ( name = [string] , nrql = nrql , visualization = models . WidgetVisualization . EVENT_FEED , ) [EOL] [EOL] [EOL] def _create_output_selection ( nrql ) : [EOL] [docstring] [EOL] return models . QueryOutputSelection ( name = [string] , nrql = nrql ) [EOL] [EOL] [EOL] def _create_componentized_query ( event , condition , output , display = None ) : [EOL] [docstring] [EOL] if not display : [EOL] display = _create_display ( ) [EOL] [EOL] return models . ComponentizedQuery ( event = event , output = output , display = display , condition = condition ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import nrdash [EOL] [docstring] [EOL] import os [EOL] [EOL] import pytest [EOL] import yaml [EOL] [EOL] from nrdash import models , parsing [EOL] [EOL] [EOL] def test_parse_empty_file ( ) : [EOL] config = _load_test_file ( [string] ) [EOL] [EOL] assert { } == parsing . parse_conditions ( config ) [EOL] assert { } == parsing . parse_output_selections ( config , { } ) [EOL] assert { } == parsing . parse_displays ( config ) [EOL] assert { } == parsing . parse_dashboards ( config ) [EOL] assert { } == parsing . parse_queries ( config ) [EOL] [EOL] [EOL] def test_parse_conditions ( ) : [EOL] expected = { [string] : models . QueryCondition ( name = [string] , nrql = [string] ) , [string] : models . QueryCondition ( name = [string] , nrql = [string] , ) , [string] : models . QueryCondition ( name = [string] , nrql = [string] , ) , [string] : models . QueryCondition ( name = [string] , nrql = [string] , ) , [string] : models . QueryCondition ( name = [string] , nrql = [string] , ) , } [EOL] [EOL] actual = _parse_conditions ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_only_base_conditions ( ) : [EOL] expected = { [string] : models . QueryCondition ( name = [string] , nrql = [string] ) , [string] : models . QueryCondition ( name = [string] , nrql = [string] ) , } [EOL] [EOL] actual = _parse_conditions ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_extend_only_other_conditions ( ) : [EOL] condition_name = [string] [EOL] expected = models . QueryCondition ( name = condition_name , nrql = [string] ) [EOL] [EOL] actual = _parse_conditions ( [string] ) [EOL] [EOL] assert expected == actual [ condition_name ] [EOL] [EOL] [EOL] def test_parse_invalid_condition_operator ( ) : [EOL] _assert_invalid_condition_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_extending_condition_does_not_reference_other_condition ( ) : [EOL] _assert_invalid_condition_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_condition_operands ( ) : [EOL] _assert_invalid_condition_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_unresolvable_extending_condition ( ) : [EOL] _assert_invalid_condition_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_output_selections ( ) : [EOL] expected = { [string] : models . QueryOutputSelection ( name = [string] , nrql = [string] ) , [string] : models . QueryOutputSelection ( name = [string] , nrql = [string] , ) , [string] : models . QueryOutputSelection ( name = [string] , nrql = [string] , ) , [string] : models . QueryOutputSelection ( name = [string] , nrql = [string] , ) , [string] : models . QueryOutputSelection ( name = [string] , nrql = [string] , ) , } [EOL] [EOL] actual = _parse_output_selections ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_invalid_output_selection_type ( ) : [EOL] _assert_invalid_output_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_output_selection_component_type ( ) : [EOL] _assert_invalid_output_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_output_selection_component_name ( ) : [EOL] _assert_invalid_output_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_displays ( ) : [EOL] expected = { [string] : models . QueryDisplay ( name = [string] , nrql = [string] , visualization = models . WidgetVisualization . FACET_TABLE , ) , [string] : models . QueryDisplay ( name = [string] , nrql = [string] , visualization = models . WidgetVisualization . LINE_CHART , ) , [string] : models . QueryDisplay ( name = [string] , nrql = [string] , visualization = models . WidgetVisualization . BILLBOARD_COMPARISON , ) , [string] : models . QueryDisplay ( name = [string] , visualization = models . WidgetVisualization . BILLBOARD ) , } [EOL] [EOL] actual = _parse_displays ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_queries ( ) : [EOL] expected = { [string] : models . Query ( name = [string] , title = [string] , nrql = [string] , visualization = models . WidgetVisualization . LINE_CHART , notes = [string] , ) , [string] : models . Query ( name = [string] , title = [string] , nrql = [string] , visualization = models . WidgetVisualization . LINE_CHART , ) , } [EOL] [EOL] actual = _parse_queries ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_inline_queries ( ) : [EOL] expected = { [string] : models . Query ( name = [string] , title = [string] , nrql = [string] , visualization = models . WidgetVisualization . FACET_BAR_CHART , ) , [string] : models . Query ( name = [string] , title = [string] , nrql = [string] , visualization = models . WidgetVisualization . BILLBOARD , notes = [string] , ) , } [EOL] [EOL] actual = _parse_queries ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_missing_query_display ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_query_event ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_query_output ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_query_title ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_query_condition_reference ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_query_display_reference ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_query_output_reference ( ) : [EOL] _assert_invalid_query_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_dashboards ( ) : [EOL] expected = { [string] : models . Dashboard ( name = [string] , title = [string] , widgets = [ models . Widget ( title = [string] , query = [string] , visualization = models . WidgetVisualization . BILLBOARD , row = [number] , column = [number] , width = [number] , height = [number] , ) ] , ) } [EOL] [EOL] actual = _parse_dashboards ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_dashboard_with_inline_queries ( ) : [EOL] expected = { [string] : models . Dashboard ( name = [string] , title = [string] , widgets = [ models . Widget ( title = [string] , query = [string] , visualization = models . WidgetVisualization . FACET_BAR_CHART , row = [number] , column = [number] , width = [number] , height = [number] , ) ] , ) } [EOL] [EOL] actual = _parse_dashboards ( [string] ) [EOL] [EOL] assert expected == actual [EOL] [EOL] [EOL] def test_parse_missing_widget_column ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_widget_height ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_widget_query ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_widget_row ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_missing_widget_width ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_invalid_widget_query_reference ( ) : [EOL] _assert_invalid_widget_configuration ( [string] ) [EOL] [EOL] [EOL] def test_parse_file ( ) : [EOL] actual = parsing . parse_file ( _get_test_file_path ( [string] ) ) [EOL] assert actual [EOL] [EOL] [EOL] def _assert_invalid_condition_configuration ( file_name ) : [EOL] with pytest . raises ( models . InvalidExtendingConditionException ) : [EOL] _parse_conditions ( file_name ) [EOL] [EOL] [EOL] def _assert_invalid_output_configuration ( file_name ) : [EOL] with pytest . raises ( models . InvalidOutputConfigurationException ) : [EOL] _parse_output_selections ( file_name ) [EOL] [EOL] [EOL] def _assert_invalid_query_configuration ( file_name ) : [EOL] with pytest . raises ( models . InvalidQueryConfigurationException ) : [EOL] _parse_queries ( file_name ) [EOL] [EOL] [EOL] def _assert_invalid_widget_configuration ( file_name ) : [EOL] with pytest . raises ( models . InvalidWidgetConfigurationException ) : [EOL] _parse_dashboards ( file_name ) [EOL] [EOL] [EOL] def _get_test_file_path ( file_name ) : [EOL] test_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] return os . path . join ( test_dir , [string] , file_name ) [EOL] [EOL] [EOL] def _load_test_file ( file_name ) : [EOL] test_file_path = _get_test_file_path ( file_name ) [EOL] with open ( test_file_path , [string] ) as test_file : [EOL] return yaml . safe_load ( test_file ) [EOL] [EOL] [EOL] def _parse_conditions ( file_name ) : [EOL] config = _load_test_file ( file_name ) [EOL] return parsing . parse_conditions ( config ) [EOL] [EOL] [EOL] def _parse_dashboards ( file_name ) : [EOL] config = _load_test_file ( file_name ) [EOL] return parsing . parse_dashboards ( config ) [EOL] [EOL] [EOL] def _parse_displays ( file_name ) : [EOL] config = _load_test_file ( file_name ) [EOL] return parsing . parse_displays ( config ) [EOL] [EOL] [EOL] def _parse_output_selections ( file_name ) : [EOL] config = _load_test_file ( file_name ) [EOL] conditions = parsing . parse_conditions ( config ) [EOL] return parsing . parse_output_selections ( config , conditions ) [EOL] [EOL] [EOL] def _parse_queries ( file_name ) : [EOL] config = _load_test_file ( file_name ) [EOL] return parsing . parse_queries ( config ) [EOL]	
from typing import Any , Dict , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import re [EOL] [EOL] import attr [EOL] import responses [EOL] import pytest [EOL] [EOL] from nrdash import models , new_relic_api [EOL] [EOL] [EOL] @ attr . s ( frozen = True ) class _DashboardResponse : [EOL] [EOL] title = attr . ib ( ) [EOL] dashboard_id = attr . ib ( ) [EOL] [EOL] [EOL] @ responses . activate def test_create_dashboard ( ) : [EOL] _set_create_dashboard_response ( [number] ) [EOL] [EOL] _create_dashboard ( ) [EOL] [EOL] assert len ( responses . calls ) == [number] [EOL] [EOL] [EOL] @ responses . activate def test_create_dashboard_error ( ) : [EOL] _set_create_dashboard_response ( [number] ) [EOL] [EOL] with pytest . raises ( models . NewRelicApiException ) : [EOL] _create_dashboard ( ) [EOL] [EOL] [EOL] @ responses . activate def test_get_dashboard_id_by_title_error ( ) : [EOL] _set_get_dashboards_response ( status = [number] ) [EOL] [EOL] with pytest . raises ( models . NewRelicApiException ) : [EOL] _get_dashboard_id_by_title ( [string] ) [EOL] [EOL] [EOL] @ responses . activate def test_get_dashboard_id_by_title_multiple_exact_matches ( ) : [EOL] target_title = [string] [EOL] response = _set_get_dashboards_response ( dashboard_responses = [ _DashboardResponse ( title = target_title , dashboard_id = [number] ) , _DashboardResponse ( title = target_title , dashboard_id = [number] ) , ] ) [EOL] [EOL] with pytest . raises ( models . NewRelicApiException ) : [EOL] _get_dashboard_id_by_title ( target_title ) [EOL] [EOL] [EOL] @ responses . activate def test_get_dashboard_id_by_title_multiple_matches_with_single_exact_match ( ) : [EOL] target_title = [string] [EOL] dashboard_id = [number] [EOL] response = _set_get_dashboards_response ( dashboard_responses = [ _DashboardResponse ( title = [string] , dashboard_id = [number] ) , _DashboardResponse ( title = target_title , dashboard_id = dashboard_id ) , ] ) [EOL] [EOL] actual_dashboard_id = _get_dashboard_id_by_title ( target_title ) [EOL] [EOL] assert dashboard_id == actual_dashboard_id [EOL] [EOL] [EOL] @ responses . activate def test_get_dashboard_id_by_title_no_matches ( ) : [EOL] response = _set_get_dashboards_response ( dashboard_responses = [ _DashboardResponse ( title = [string] , dashboard_id = [number] ) ] ) [EOL] [EOL] actual_dashboard_id = _get_dashboard_id_by_title ( [string] ) [EOL] [EOL] assert actual_dashboard_id is None [EOL] [EOL] [EOL] @ responses . activate def test_get_dashboard_id_by_title_single_exact_match ( ) : [EOL] target_title = [string] [EOL] dashboard_id = [number] [EOL] response = _set_get_dashboards_response ( dashboard_responses = [ _DashboardResponse ( title = target_title , dashboard_id = dashboard_id ) ] ) [EOL] [EOL] actual_dashboard_id = _get_dashboard_id_by_title ( target_title ) [EOL] [EOL] assert dashboard_id == actual_dashboard_id [EOL] [EOL] [EOL] @ responses . activate def test_update_dashboard ( ) : [EOL] _set_update_dashboard_response ( [number] ) [EOL] [EOL] _update_dashboard ( ) [EOL] [EOL] assert len ( responses . calls ) == [number] [EOL] [EOL] [EOL] @ responses . activate def test_update_dashboard_error ( ) : [EOL] _set_update_dashboard_response ( [number] ) [EOL] [EOL] with pytest . raises ( models . NewRelicApiException ) : [EOL] _update_dashboard ( ) [EOL] [EOL] [EOL] def _create_client ( api_key = [string] , account_id = [number] ) : [EOL] return new_relic_api . NewRelicApiClient ( api_key , account_id ) [EOL] [EOL] [EOL] def _create_dashboard ( ) : [EOL] client = _create_client ( ) [EOL] client . create_dashboard ( _create_dashboard_data ( ) ) [EOL] [EOL] [EOL] def _create_dashboard_data ( ) : [EOL] return models . Dashboard ( name = [string] , title = [string] , widgets = [ models . Widget ( title = [string] , query = [string] , visualization = models . WidgetVisualization . BILLBOARD , row = [number] , column = [number] , width = [number] , height = [number] , notes = [string] , ) ] , ) [EOL] [EOL] [EOL] def _get_dashboard_id_by_title ( title ) : [EOL] client = _create_client ( ) [EOL] return client . get_dashboard_id_by_title ( title ) [EOL] [EOL] [EOL] def _set_create_dashboard_response ( status ) : [EOL] responses . add ( responses . POST , new_relic_api . DASHBOARDS_URL , status = status ) [EOL] [EOL] [EOL] def _set_get_dashboards_response ( status = [number] , dashboard_responses = None ) : [EOL] if dashboard_responses is None : [EOL] dashboards = [ ] [EOL] else : [EOL] dashboards = [ { [string] : response . title , [string] : response . dashboard_id } for response in dashboard_responses ] [EOL] [EOL] json_response = { [string] : dashboards } [EOL] [EOL] responses . add ( responses . GET , new_relic_api . DASHBOARDS_URL , status = status , json = json_response ) [EOL] [EOL] [EOL] def _set_update_dashboard_response ( status ) : [EOL] responses . add ( responses . PUT , re . compile ( f"{ new_relic_api . BASE_URL } [string] " ) , status = status ) [EOL] [EOL] [EOL] def _update_dashboard ( ) : [EOL] client = _create_client ( ) [EOL] client . update_dashboard ( [number] , _create_dashboard_data ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0