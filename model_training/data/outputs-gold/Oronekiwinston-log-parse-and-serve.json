from typing import Type , Any [EOL] import typing [EOL] import builtins [EOL] import models [EOL] from peewee import SqliteDatabase , Model , TextField , IntegerField , DateTimeField [EOL] import datetime [EOL] import os [EOL] from argparser import args [EOL] [EOL] print ( args . db ) [EOL] [EOL] db = SqliteDatabase ( args . db , pragmas = { [string] : [string] , [string] : - [number] * [number] , [string] : [number] } ) [comment] [EOL] [EOL] [EOL] class BaseModel ( Model ) : [EOL] class Meta : [EOL] database = db [EOL] [EOL] [EOL] class LogEntry ( BaseModel ) : [EOL] w = IntegerField ( ) [EOL] l = TextField ( ) [EOL] t = TextField ( ) [EOL] ctx = TextField ( null = True ) [EOL] p = TextField ( null = True ) [EOL] message = TextField ( ) [EOL] mhu = IntegerField ( ) [EOL] mht = IntegerField ( ) [EOL] mrss = IntegerField ( ) [EOL] ct = IntegerField ( ) [EOL] cl = IntegerField ( ) [EOL] [EOL] def to_json ( self ) : [EOL] dic = self . __dict__ [ [string] ] [EOL] return dic [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] db . connect ( ) [EOL] db . create_tables ( [ LogEntry ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[models.BaseModel.Meta]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
import builtins [EOL] from argparser import args [EOL] from halo import Halo [EOL] import sys [EOL] import json [EOL] import pathlib [EOL] from models import LogEntry , db [EOL] [EOL] [EOL] def yield_json_logs_from_folder ( folder ) : [EOL] count = [number] [EOL] path = pathlib . Path ( folder ) [EOL] for arq in path . iterdir ( ) : [EOL] if not arq . suffix == [string] : [EOL] continue [EOL] with open ( arq , encoding = [string] , errors = [string] ) as f : [EOL] print ( arq ) [EOL] for line in f . readlines ( ) : [EOL] try : [EOL] js = json . loads ( line ) [EOL] count = count + [number] [EOL] yield js [EOL] except : [EOL] pass [EOL] break [EOL] print ( ) [EOL] print ( count , [string] ) [EOL] [EOL] [EOL] def parse_and_save_to_db ( folder ) : [EOL] entries = [ ] [EOL] for i , js in enumerate ( yield_json_logs_from_folder ( folder ) ) : [EOL] entryDict = { [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , [string] : js . get ( [string] ) , } [EOL] entries . append ( entryDict ) [EOL] if i % [number] == [number] : [EOL] LogEntry . insert_many ( entries ) . execute ( ) [EOL] entries = [ ] [EOL] [EOL] [EOL] def patiently_parse_log_folder ( folder ) : [EOL] with Halo ( text = [string] , spinner = [string] ) : [EOL] parse_and_save_to_db ( folder ) [EOL] LogEntry . raw ( [string] ) . execute ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] patiently_parse_log_folder ( args . f ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from models import LogEntry [EOL] [EOL] [EOL] def sample_get ( ) : [EOL] it = LogEntry . raw ( [string] ) . execute ( ) [EOL] print ( it ) [EOL] print ( [ el for el in it ] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sample_get ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import argparse [EOL] import argparse [EOL] import os [EOL] [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , [string] , type = str , help = [string] , default = os . environ . get ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , [string] , type = str , help = [string] , default = os . environ . get ( [string] ) ) [EOL] [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] print ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0