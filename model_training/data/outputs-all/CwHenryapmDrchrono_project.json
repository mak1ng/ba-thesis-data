[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import os [EOL] from social . backends . oauth import BaseOAuth2 [EOL] [EOL] [EOL] class drchronoOAuth2 ( BaseOAuth2 ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] [comment] [EOL] AUTHORIZATION_URL = [string] [EOL] ACCESS_TOKEN_URL = [string] [EOL] ACCESS_TOKEN_METHOD = [string] [EOL] REDIRECT_STATE = False [EOL] USER_DATA_URL = [string] [EOL] EXTRA_DATA = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [comment] [EOL] [EOL] def get_user_details ( self , response ) : [EOL] [docstring] [EOL] return { [string] : response . get ( [string] ) , } [EOL] [EOL] def user_data ( self , access_token , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . get_json ( self . USER_DATA_URL , headers = self . get_auth_header ( access_token ) ) [EOL] [EOL] def get_auth_header ( self , access_token ) : [EOL] return { [string] : [string] . format ( access_token ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import hashlib [EOL] import hmac [EOL] import json [EOL] [EOL] from django . http import JsonResponse [EOL] from django . shortcuts import redirect [EOL] from django . utils . datastructures import MultiValueDictKeyError [EOL] from django . views import View [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class WebHookApi ( View ) : [EOL] [EOL] def get ( self , request ) : [EOL] print ( request . GET ) [EOL] response = self . webhook_verify ( request ) [EOL] print ( response ) [EOL] return JsonResponse ( response ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] signature = request . META . get ( [string] ) [EOL] if signature == [string] : [EOL] event = request . META . get ( [string] ) [EOL] print ( request . body . decode ( [string] ) ) [EOL] body_request = request . body . decode ( [string] ) [EOL] try : [EOL] receiver = body_request . get ( [string] ) [EOL] _object = body_request . get ( [string] ) [EOL] except AttributeError as e : [EOL] [comment] [EOL] [comment] [EOL] print ( e ) [EOL] print ( receiver ) [EOL] print ( _object ) [EOL] if event == [string] : [EOL] response = { } [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] elif event == [string] : [EOL] pass [EOL] [EOL] return JsonResponse ( response ) [EOL] else : [EOL] response = { } [EOL] return JsonResponse ( status = [number] , data = response ) [EOL] [EOL] def webhook_verify ( self , request ) : [EOL] try : [EOL] token = [string] . encode ( encoding = [string] ) [EOL] message = request . GET [ [string] ] . encode ( encoding = [string] ) [EOL] secret_token = hmac . new ( token , message , hashlib . sha256 ) . hexdigest ( ) [EOL] except MultiValueDictKeyError as e : [EOL] print ( e ) [EOL] secret_token = None [EOL] return { [string] : secret_token } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.bytes$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $None$ 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] [EOL] from social_auth_drchrono . views import WebHookApi [EOL] [EOL] urlpatterns = [ url ( [string] , WebHookApi . as_view ( ) , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Type , Dict , Any [EOL] import typing [EOL] import requests [EOL] import drchrono [EOL] import requests [EOL] import logging [EOL] [EOL] [EOL] class APIException ( Exception ) : pass [EOL] [EOL] [EOL] class Forbidden ( APIException ) : pass [EOL] [EOL] [EOL] class NotFound ( APIException ) : pass [EOL] [EOL] [EOL] class Conflict ( APIException ) : pass [EOL] [EOL] [EOL] ERROR_CODES = { [number] : Forbidden , [number] : NotFound , [number] : Conflict , } [EOL] [EOL] [EOL] [comment] [EOL] class BaseEndpoint ( object ) : [EOL] [docstring] [EOL] BASE_URL = [string] [EOL] endpoint = [string] [EOL] [EOL] def __init__ ( self , access_token = None ) : [EOL] [docstring] [EOL] self . access_token = access_token [EOL] [EOL] @ property def logger ( self ) : [EOL] name = [string] . format ( __name__ , self . endpoint ) [EOL] return logging . getLogger ( name ) [EOL] [EOL] def _url ( self , id = [string] ) : [EOL] if id : [EOL] id = [string] . format ( id ) [EOL] return [string] . format ( self . BASE_URL , self . endpoint , id ) [EOL] [EOL] def _auth_headers ( self , kwargs ) : [EOL] [docstring] [EOL] kwargs [ [string] ] = kwargs . get ( [string] , { } ) [EOL] kwargs [ [string] ] . update ( { [string] : [string] . format ( self . access_token ) , } ) [EOL] [EOL] def _json_or_exception ( self , response ) : [EOL] [docstring] [EOL] if response . ok : [EOL] if response . status_code != [number] : [comment] [EOL] return response . json ( ) [EOL] else : [EOL] exe = ERROR_CODES . get ( response . status_code , APIException ) [EOL] raise exe ( response . content ) [EOL] [EOL] def _request ( self , method , * args , ** kwargs ) : [EOL] [comment] [EOL] url = self . _url ( kwargs . pop ( id , [string] ) ) [EOL] self . _auth_headers ( kwargs ) [EOL] return getattr ( requests , method ) ( url , * args , ** kwargs ) [EOL] [EOL] def list ( self , params = None , ** kwargs ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] url = self . _url ( ) [EOL] self . _auth_headers ( kwargs ) [EOL] [comment] [EOL] response = requests . get ( url , params = params , ** kwargs ) [EOL] [comment] [EOL] print ( response . ok ) [EOL] if response . ok : [EOL] data = response . json ( ) [EOL] self . logger . debug ( [string] . format ( [string] ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] print ( [string] ) [EOL] exe = ERROR_CODES . get ( response . status_code , APIException ) [EOL] self . logger . debug ( [string] . format ( exe ) ) [EOL] raise exe ( response . content ) [EOL] self . logger . debug ( [string] ) [EOL] return data [ [string] ] [EOL] [EOL] def fetch ( self , id , params = None , ** kwargs ) : [EOL] [docstring] [EOL] url = self . _url ( id ) [EOL] self . _auth_headers ( kwargs ) [EOL] response = requests . get ( url , params = params , ** kwargs ) [EOL] self . logger . info ( [string] . format ( response . status_code ) ) [EOL] return self . _json_or_exception ( response ) [EOL] [EOL] def create ( self , data = None , json = None , ** kwargs ) : [EOL] [docstring] [EOL] url = self . _url ( ) [EOL] self . _auth_headers ( kwargs ) [EOL] response = requests . post ( url , data = data , json = json , ** kwargs ) [EOL] return self . _json_or_exception ( response ) [EOL] [EOL] def update ( self , id , data , partial = True , ** kwargs ) : [EOL] [docstring] [EOL] url = self . _url ( id ) [EOL] self . _auth_headers ( kwargs ) [EOL] if partial : [EOL] response = requests . patch ( url , data , ** kwargs ) [EOL] else : [EOL] response = requests . put ( url , data , ** kwargs ) [EOL] return self . _json_or_exception ( response ) [EOL] [EOL] def delete ( self , id , ** kwargs ) : [EOL] [docstring] [EOL] url = self . _url ( id ) [EOL] self . _auth_headers ( kwargs ) [EOL] response = requests . delete ( url ) [EOL] return self . _json_or_exception ( response ) [EOL] [EOL] [EOL] class PatientEndpoint ( BaseEndpoint ) : [EOL] endpoint = [string] [EOL] [EOL] [EOL] class AppointmentEndpoint ( BaseEndpoint ) : [EOL] endpoint = [string] [EOL] [EOL] [comment] [EOL] def list ( self , params = None , date = None , start = None , end = None , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] params = params or { } [EOL] if start and end : [EOL] date_range = [string] . format ( start , end ) [EOL] params [ [string] ] = date_range [EOL] elif date : [EOL] params [ [string] ] = date [EOL] if [string] not in params and [string] not in params : [EOL] raise Exception ( [string] ) [EOL] return super ( AppointmentEndpoint , self ) . list ( params , ** kwargs ) [EOL] [EOL] [EOL] class DoctorEndpoint ( BaseEndpoint ) : [EOL] endpoint = [string] [EOL] [EOL] def update ( self , id , data , partial = True , ** kwargs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def create ( self , data = None , json = None , ** kwargs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def delete ( self , id , ** kwargs ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class AppointmentProfileEndpoint ( BaseEndpoint ) : [EOL] endpoint = [string] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[drchrono.endpoints.APIException],typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 $typing.Dict[builtins.int,typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[drchrono.endpoints.APIException],typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[drchrono.endpoints.APIException],typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 $typing.Dict[builtins.int,typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type[drchrono.endpoints.APIException],typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 0 0 0 $typing.Union[typing.Type[drchrono.endpoints.APIException],typing.Type[typing.Union[drchrono.endpoints.Conflict,drchrono.endpoints.Forbidden,drchrono.endpoints.NotFound]]]$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import drchrono [EOL] from django . shortcuts import redirect [EOL] from django . views . generic import TemplateView [EOL] from social_django . models import UserSocialAuth [EOL] [EOL] from drchrono . endpoints import DoctorEndpoint , PatientEndpoint , AppointmentProfileEndpoint [EOL] [EOL] [EOL] class SetupView ( TemplateView ) : [EOL] [docstring] [EOL] template_name = [string] [EOL] [EOL] [EOL] class DoctorWelcome ( TemplateView ) : [EOL] [docstring] [EOL] template_name = [string] [EOL] [EOL] def get_token ( self ) : [EOL] [docstring] [EOL] oauth_provider = UserSocialAuth . objects . get ( provider = [string] ) [EOL] access_token = oauth_provider . extra_data [ [string] ] [EOL] return access_token [EOL] [EOL] def make_api_request ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] access_token = self . get_token ( ) [EOL] api = DoctorEndpoint ( access_token ) [EOL] [comment] [EOL] [comment] [EOL] return api . list ( ) [EOL] [EOL] def make_api_request_to_patients ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] access_token = self . get_token ( ) [EOL] api = PatientEndpoint ( access_token ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return api . list ( ) [EOL] [EOL] def make_api_request_to_appointment_profiles ( self ) : [EOL] access_token = self . get_token ( ) [EOL] api = AppointmentProfileEndpoint ( access_token ) [EOL] return api . list ( ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] kwargs = super ( DoctorWelcome , self ) . get_context_data ( ** kwargs ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return kwargs [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $drchrono.endpoints.DoctorEndpoint$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $drchrono.endpoints.DoctorEndpoint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $drchrono.endpoints.PatientEndpoint$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $drchrono.endpoints.PatientEndpoint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $drchrono.endpoints.AppointmentProfileEndpoint$ 0 0 0 $typing.Any$ 0 0 0 $drchrono.endpoints.AppointmentProfileEndpoint$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from django . db import models [EOL] [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . views . generic import TemplateView [EOL] from django . contrib import admin [EOL] admin . autodiscover ( ) [EOL] from drchrono . views import * [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , SetupView . as_view ( ) , name = [string] ) , url ( [string] , DoctorWelcome . as_view ( ) , name = [string] ) , url ( [string] , include ( admin . site . urls ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , DoctorWelcome . as_view ( ) , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django import forms [EOL] from django . forms import widgets [EOL] [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0