from typing import List [EOL] import typing [EOL] import sys [EOL] from distutils . core import setup [EOL] [EOL] from setuptools import find_packages [EOL] [EOL] [EOL] dependencies = [ [string] ] [EOL] if sys . version_info [ : [number] ] < ( [number] , [number] ) : [EOL] [comment] [EOL] dependencies += [ [string] ] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , url = [string] , author = [string] , author_email = [string] , license = [string] , install_requires = dependencies , packages = [ [string] ] , package_data = { [string] : [ [string] , [string] ] } , zip_safe = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import typing [EOL] import key_typeddict [EOL] import builtins [EOL] import dataclasses [EOL] import sys [EOL] import typing [EOL] [EOL] from mypy_extensions import _check_fails , _dict_new [comment] [EOL] [EOL] [EOL] @ dataclasses . dataclass ( eq = True , frozen = True ) class Key ( object ) : [EOL] name = ... [EOL] required = True [EOL] [EOL] [EOL] def _key_typeddict_new ( cls , _typename , _fields = None , ** kwargs ) : [EOL] total = kwargs . pop ( [string] , True ) [EOL] if _fields is None : [EOL] _fields = kwargs [EOL] elif kwargs : [EOL] raise TypeError ( [string] [string] ) [EOL] return _KeyTypedDictMeta ( _typename , ( ) , { [string] : dict ( _fields ) , [string] : total } ) [EOL] [EOL] [EOL] class _KeyTypedDictMeta ( type ) : [EOL] def __new__ ( cls , name , bases , ns , total = True , allow_extra = False ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ns [ [string] ] = _key_typeddict_new if name == [string] else _dict_new [EOL] tp_dict = super ( _KeyTypedDictMeta , cls ) . __new__ ( cls , name , ( dict , ) , ns ) [EOL] try : [EOL] [comment] [EOL] tp_dict . __module__ = sys . _getframe ( [number] ) . f_globals . get ( [string] , [string] ) [EOL] except ( AttributeError , ValueError ) : [EOL] pass [EOL] anns = ns . get ( [string] , { } ) [EOL] msg = [string] [EOL] anns = { n : typing . _type_check ( tp , msg ) for n , tp in anns . items ( ) } [EOL] for base in bases : [EOL] anns . update ( base . __dict__ . get ( [string] , { } ) ) [EOL] tp_dict . __annotations__ = anns [EOL] if not hasattr ( tp_dict , [string] ) : [EOL] tp_dict . __total__ = total [EOL] if not hasattr ( tp_dict , [string] ) : [EOL] tp_dict . __allow_extra__ = allow_extra [EOL] return tp_dict [EOL] [EOL] __instancecheck__ = __subclasscheck__ = _check_fails [EOL] [EOL] [EOL] KeyTypedDict = _KeyTypedDictMeta ( [string] , ( dict , ) , { } ) [EOL] KeyTypedDict . __module__ = __name__ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0