[comment] [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = open ( [string] ) . read ( ) , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , packages = [ [string] , [string] ] , package_data = { [string] : [ [string] , [string] ] } , python_requires = [string] , tests_require = [ [string] ] , license = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Generator , List [EOL] import test_htmlgen [EOL] import htmlgen [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal , assert_raises , assert_is_instance , assert_is [EOL] [EOL] from htmlgen . generator import ( Generator , NullGenerator , IteratorGenerator , ChildGenerator , HTMLChildGenerator , JoinGenerator , HTMLJoinGenerator , generate_html_string , ) [EOL] [EOL] [EOL] class _TestingGenerator ( Generator ) : [EOL] def __init__ ( self , items ) : [EOL] self . _items = items [EOL] [EOL] def generate ( self ) : [EOL] return iter ( self . _items ) [EOL] [EOL] [EOL] class GeneratorTest ( TestCase ) : [EOL] def test_empty_generate ( self ) : [EOL] generator = _TestingGenerator ( [ ] ) [EOL] assert_equal ( [ ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_generate_strings_only ( self ) : [EOL] generator = _TestingGenerator ( [ [string] , [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] [comment] [EOL] def test_generate_python2_strings ( self ) : [EOL] inner = _TestingGenerator ( [ [string] ] ) [EOL] generator = _TestingGenerator ( [ [string] , inner ] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_generate_non_ascii ( self ) : [EOL] inner = _TestingGenerator ( [ [string] ] ) [EOL] generator = _TestingGenerator ( [ [string] , inner ] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_generate_bytes ( self ) : [EOL] inner = _TestingGenerator ( [ [string] ] ) [EOL] generator = _TestingGenerator ( [ [string] , inner ] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_generate_sub_generators ( self ) : [EOL] inner1 = _TestingGenerator ( [ [string] ] ) [EOL] inner2 = _TestingGenerator ( [ [string] , inner1 ] ) [EOL] generator = _TestingGenerator ( [ inner2 , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_str ( self ) : [EOL] inner = _TestingGenerator ( [ [string] ] ) [EOL] generator = _TestingGenerator ( [ [string] , inner , [string] ] ) [EOL] assert_equal ( [string] , str ( generator ) ) [EOL] [EOL] def test_invalid_class ( self ) : [EOL] generator = _TestingGenerator ( [ [number] ] ) [EOL] with assert_raises ( TypeError ) : [EOL] str ( generator ) [EOL] [EOL] [EOL] class NullGeneratorTest ( TestCase ) : [EOL] def test_generate ( self ) : [EOL] assert_equal ( [ ] , list ( iter ( NullGenerator ( ) ) ) ) [EOL] [EOL] [EOL] class IteratorGeneratorTest ( TestCase ) : [EOL] def test_generate ( self ) : [EOL] generator = IteratorGenerator ( [ [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] [EOL] class ChildGeneratorTest ( TestCase ) : [EOL] def test_append ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . append ( _TestingGenerator ( [ [string] , [string] ] ) ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_extend ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ _TestingGenerator ( [ [string] , [string] ] ) , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_string ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . append ( [string] ) [EOL] generator . remove ( [string] ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_generator ( self ) : [EOL] sub_generator = Generator ( ) [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . append ( sub_generator ) [EOL] generator . remove ( sub_generator ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove__not_found ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] with assert_raises ( ValueError ) : [EOL] generator . remove ( [string] ) [EOL] [EOL] def test_len ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ [string] , [string] , NullGenerator ( ) ] ) [EOL] assert_equal ( [number] , len ( generator ) ) [EOL] [EOL] def test_empty ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ [string] , [string] , NullGenerator ( ) ] ) [EOL] generator . empty ( ) [EOL] assert_equal ( [ ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_children ( self ) : [EOL] generator = ChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] assert_equal ( [ [string] ] , generator . children ) [EOL] generator . children . append ( [string] ) [EOL] assert_equal ( [ [string] ] , generator . children ) [EOL] [EOL] [EOL] class HTMLChildGeneratorTest ( TestCase ) : [EOL] def test_append ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . append ( _TestingGenerator ( [ [string] , [string] ] ) ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_append_raw ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append_raw ( [string] ) [EOL] generator . append_raw ( _TestingGenerator ( [ [string] , [string] ] ) ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_extend ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ _TestingGenerator ( [ [string] , [string] ] ) , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_extend_raw ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend_raw ( [ _TestingGenerator ( [ [string] , [string] ] ) , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_not_found ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . extend ( [ [string] , [string] ] ) [EOL] with assert_raises ( ValueError ) : [EOL] generator . remove ( [string] ) [EOL] [EOL] def test_remove ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . extend_raw ( [ [string] , [string] , [string] ] ) [EOL] generator . remove ( [string] ) [EOL] generator . remove ( [string] ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_generator ( self ) : [EOL] sub_generator = Generator ( ) [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( sub_generator ) [EOL] generator . append ( [string] ) [EOL] generator . remove ( sub_generator ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_raw_not_found ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . extend ( [ [string] , [string] ] ) [EOL] with assert_raises ( ValueError ) : [EOL] generator . remove_raw ( [string] ) [EOL] [EOL] def test_remove_raw ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . extend_raw ( [ [string] , [string] , [string] ] ) [EOL] generator . remove_raw ( [string] ) [EOL] generator . remove_raw ( [string] ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_remove_raw_generator ( self ) : [EOL] sub_generator = Generator ( ) [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( sub_generator ) [EOL] generator . append ( [string] ) [EOL] generator . remove_raw ( sub_generator ) [EOL] assert_equal ( [ [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_len ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ [string] , [string] , NullGenerator ( ) ] ) [EOL] assert_equal ( [number] , len ( generator ) ) [EOL] [EOL] def test_empty ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . extend ( [ [string] , [string] , NullGenerator ( ) ] ) [EOL] generator . empty ( ) [EOL] assert_equal ( [ ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_children ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , generator . children ) [EOL] [EOL] def test_children_readonly ( self ) : [EOL] generator = HTMLChildGenerator ( ) [EOL] generator . append ( [string] ) [EOL] generator . children . append ( [string] ) [EOL] assert_equal ( [ [string] ] , generator . children ) [EOL] [EOL] [EOL] class GenerateHTMLStringTest ( TestCase ) : [EOL] def test_wrap_string ( self ) : [EOL] generator = generate_html_string ( [string] ) [EOL] assert_is_instance ( generator , HTMLChildGenerator ) [EOL] result = list ( iter ( generator ) ) [EOL] assert_equal ( [ [string] ] , result ) [EOL] [EOL] def test_escape_string ( self ) : [EOL] generator = generate_html_string ( [string] ) [EOL] assert_is_instance ( generator , HTMLChildGenerator ) [EOL] result = list ( iter ( generator ) ) [EOL] assert_equal ( [ [string] ] , result ) [EOL] [EOL] def test_do_not_wrap_generator ( self ) : [EOL] other_gen = Generator ( ) [EOL] generator = generate_html_string ( other_gen ) [EOL] assert_is ( other_gen , generator ) [EOL] [EOL] [EOL] class JoinGeneratorTest ( TestCase ) : [EOL] def test_no_pieces ( self ) : [EOL] generator = JoinGenerator ( [string] ) [EOL] assert_equal ( [ ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_supplied_pieces ( self ) : [EOL] generator = JoinGenerator ( [string] , [ [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_append_extend ( self ) : [EOL] generator = JoinGenerator ( [string] , [ [string] ] ) [EOL] generator . append ( [string] ) [EOL] sub_generator = ChildGenerator ( ) [EOL] sub_generator . append ( [string] ) [EOL] generator . extend ( [ sub_generator ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_glue_is_generator ( self ) : [EOL] glue = ChildGenerator ( ) [EOL] glue . append ( [string] ) [EOL] generator = JoinGenerator ( glue , [ [string] , [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] [EOL] class HTMLJoinGeneratorTest ( TestCase ) : [EOL] def test_no_pieces ( self ) : [EOL] generator = HTMLJoinGenerator ( [string] ) [EOL] assert_equal ( [ ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_supplied_pieces ( self ) : [EOL] generator = HTMLJoinGenerator ( [string] , [ [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL] [EOL] def test_append_extend ( self ) : [EOL] generator = HTMLJoinGenerator ( [string] , [ [string] ] ) [EOL] generator . append ( [string] ) [EOL] sub_generator = ChildGenerator ( ) [EOL] sub_generator . append ( [string] ) [EOL] generator . extend ( [ sub_generator ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) , ) [EOL] [EOL] def test_glue_is_generator ( self ) : [EOL] glue = ChildGenerator ( ) [EOL] glue . append ( [string] ) [EOL] generator = JoinGenerator ( glue , [ [string] , [string] , [string] ] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( generator ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.generator._TestingGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.IteratorGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.IteratorGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 0 $typing.Any$ 0 0 0 $htmlgen.generator.Generator$ 0 0 0 0 $htmlgen.generator.Generator$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLJoinGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.JoinGenerator$ 0 0 0 0
import htmlgen [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen import ( Span , Highlight , Strong , Alternate , Emphasis , Small , LineBreak , ) [EOL] [EOL] [EOL] class SpanTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] span = Span ( ) [EOL] span . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( span ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] span = Span ( [string] , [string] ) [EOL] span . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( span ) ) , ) [EOL] [EOL] [EOL] class HighlightTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] highlight = Highlight ( ) [EOL] highlight . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( highlight ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] highlight = Highlight ( [string] , [string] ) [EOL] highlight . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( highlight ) ) , ) [EOL] [EOL] [EOL] class StrongTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] strong = Strong ( ) [EOL] strong . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( strong ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] strong = Strong ( [string] , [string] ) [EOL] strong . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( strong ) ) , ) [EOL] [EOL] [EOL] class AlternateTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] alt = Alternate ( ) [EOL] alt . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( alt ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] alt = Alternate ( [string] , [string] ) [EOL] alt . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( alt ) ) ) [EOL] [EOL] [EOL] class EmphasisTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] em = Emphasis ( ) [EOL] em . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( em ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] em = Emphasis ( [string] , [string] ) [EOL] em . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( em ) ) , ) [EOL] [EOL] [EOL] class SmallTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] small = Small ( ) [EOL] small . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( small ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] small = Small ( [string] , [string] ) [EOL] small . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( small ) ) , ) [EOL] [EOL] [EOL] class LineBreakTest ( TestCase ) : [EOL] def test_line_break ( self ) : [EOL] br = LineBreak ( ) [EOL] assert_equal ( [string] , str ( br ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Span$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Highlight$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Strong$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Alternate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Emphasis$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.Small$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.LineBreak$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.inline.LineBreak$ 0 0 0
from typing import Any [EOL] import test_htmlgen [EOL] import htmlgen [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal , assert_true [EOL] [EOL] from htmlgen import Table , TableHead , TableRow , TableCell , ColumnGroup , Span [EOL] [EOL] [EOL] class TableTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] table = Table ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( table ) ) ) [EOL] [EOL] def test_create_head_and_body ( self ) : [EOL] table = Table ( ) [EOL] table . create_body ( ) [EOL] table . create_head ( ) [EOL] table . create_row ( ) [EOL] table . create_header_row ( ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_append_header_row__implicit_head ( self ) : [EOL] table = Table ( ) [EOL] row = TableRow ( ) [EOL] table . append_header_row ( row ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_create_header_row__implicit_head ( self ) : [EOL] table = Table ( ) [EOL] table . create_header_row ( ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_create_header_row__row_object ( self ) : [EOL] table = Table ( ) [EOL] row = table . create_header_row ( ) [EOL] row . id = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( row ) ) ) [EOL] [EOL] def test_append_row__implicit_body ( self ) : [EOL] table = Table ( ) [EOL] row = TableRow ( ) [EOL] table . append_row ( row ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_create_row__implicit_body ( self ) : [EOL] table = Table ( ) [EOL] table . create_row ( ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_create_row__row_object ( self ) : [EOL] table = Table ( ) [EOL] row = table . create_row ( ) [EOL] row . id = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( row ) ) ) [EOL] [EOL] def test_children_order ( self ) : [EOL] table = Table ( ) [EOL] table . append_raw ( [string] ) [EOL] table . create_row ( ) [EOL] table . create_header_row ( ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( table ) ) , ) [EOL] [EOL] def test_create_simple_header_row ( self ) : [EOL] table = Table ( ) [EOL] table . create_simple_header_row ( [string] , [string] ) [EOL] assert_equal ( [string] [string] , str ( table ) , ) [EOL] [EOL] def test_create_simple_header_row__returned_row ( self ) : [EOL] table = Table ( ) [EOL] row = table . create_simple_header_row ( ) [EOL] row . id = [string] [EOL] assert_equal ( [string] , str ( table ) ) [EOL] [EOL] def test_create_simple_row ( self ) : [EOL] table = Table ( ) [EOL] table . create_simple_row ( [string] , [string] ) [EOL] assert_equal ( [string] [string] , str ( table ) , ) [EOL] [EOL] def test_create_simple_row__returned_row ( self ) : [EOL] table = Table ( ) [EOL] row = table . create_simple_row ( ) [EOL] row . id = [string] [EOL] assert_equal ( [string] , str ( table ) ) [EOL] [EOL] def test_generate_header_rows ( self ) : [EOL] class MyTable ( Table ) : [EOL] def generate_header_rows ( self ) : [EOL] yield TableRow ( ) [EOL] [EOL] table = MyTable ( ) [EOL] assert_equal ( [string] , str ( table ) ) [EOL] [EOL] def test_generate_rows ( self ) : [EOL] class MyTable ( Table ) : [EOL] def generate_rows ( self ) : [EOL] yield TableRow ( ) [EOL] [EOL] table = MyTable ( ) [EOL] assert_equal ( [string] , str ( table ) ) [EOL] [EOL] [EOL] class TableHeadTest ( TestCase ) : [EOL] def test_create_row ( self ) : [EOL] head = TableHead ( ) [EOL] row = head . create_row ( ) [EOL] row . id = [string] [EOL] assert_equal ( [string] , str ( head ) ) [EOL] [EOL] [EOL] class TableRowTest ( TestCase ) : [EOL] def test_create_cell ( self ) : [EOL] row = TableRow ( ) [EOL] cell1 = row . create_cell ( ) [EOL] cell1 . append ( [string] ) [EOL] row . create_cell ( [string] ) [EOL] assert_equal ( [string] , str ( row ) ) [EOL] [EOL] def test_create_cells ( self ) : [EOL] row = TableRow ( ) [EOL] row . create_cells ( [string] , [string] ) [EOL] assert_equal ( [string] , str ( row ) ) [EOL] [EOL] def test_create_cells_return_value ( self ) : [EOL] row = TableRow ( ) [EOL] cells = row . create_cells ( [string] , [string] ) [EOL] assert_equal ( [number] , len ( cells ) ) [EOL] [EOL] def test_create_header_cell ( self ) : [EOL] row = TableRow ( ) [EOL] cell1 = row . create_header_cell ( ) [EOL] cell1 . append ( [string] ) [EOL] row . create_header_cell ( [string] ) [EOL] assert_equal ( [string] , str ( row ) ) [EOL] [EOL] def test_create_header_cells ( self ) : [EOL] row = TableRow ( ) [EOL] row . create_header_cells ( [string] , [string] ) [EOL] assert_equal ( [string] , str ( row ) ) [EOL] [EOL] def test_create_header_cells_return_value ( self ) : [EOL] row = TableRow ( ) [EOL] cells = row . create_header_cells ( [string] , [string] ) [EOL] assert_equal ( [number] , len ( cells ) ) [EOL] [EOL] [EOL] class TableCellTest ( TestCase ) : [EOL] def test_default_columns_and_rows ( self ) : [EOL] cell = TableCell ( [string] ) [EOL] assert_equal ( [number] , cell . columns ) [EOL] assert_equal ( [number] , cell . rows ) [EOL] assert_equal ( [string] , str ( cell ) ) [EOL] [EOL] def test_columns_and_rows ( self ) : [EOL] cell = TableCell ( [string] ) [EOL] cell . columns = [number] [EOL] cell . rows = [number] [EOL] assert_equal ( [string] , str ( cell ) ) [EOL] [EOL] def test_element_child ( self ) : [EOL] cell = TableCell ( Span ( [string] ) ) [EOL] assert_equal ( [string] , str ( cell ) ) [EOL] [EOL] [EOL] class ColumnGroupTest ( TestCase ) : [EOL] def test_create_column ( self ) : [EOL] group = ColumnGroup ( ) [EOL] col = group . create_column ( ) [EOL] col . add_css_classes ( [string] ) [EOL] group . create_column ( ) [EOL] assert_equal ( [string] [string] , str ( group ) , ) [EOL] [EOL] def test_create_columns_with_classes ( self ) : [EOL] group = ColumnGroup ( ) [EOL] cols = group . create_columns_with_classes ( [string] , [string] ) [EOL] assert_equal ( [number] , len ( cols ) ) [EOL] assert_true ( cols [ [number] ] . has_css_class ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.Table$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.Table$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.table.TableTest.test_generate_header_rows.MyTable$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.table.TableTest.test_generate_header_rows.MyTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.table.TableTest.test_generate_rows.MyTable$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.table.TableTest.test_generate_rows.MyTable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.TableHead$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 $typing.Any$ 0 0 0 $htmlgen.table.TableCell$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.table.ColumnGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
import htmlgen [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen import ( Section , Article , Navigation , Aside , Header , Footer , Heading , ) [EOL] [EOL] [EOL] class SectionTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Section ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class ArticleTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Article ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class NavigationTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Navigation ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class AsideTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Aside ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class HeaderTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Header ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class FooterTest ( TestCase ) : [EOL] def test_element ( self ) : [EOL] section = Footer ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( section ) ) ) [EOL] [EOL] [EOL] class HeadingTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] highlight = Heading ( [number] ) [EOL] highlight . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( highlight ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] highlight = Heading ( [number] , [string] , [string] ) [EOL] highlight . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( highlight ) ) , ) [EOL] [EOL] def test_default_depth ( self ) : [EOL] highlight = Heading ( ) [EOL] highlight . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( highlight ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Section$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Section$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Article$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Article$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Navigation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Navigation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Aside$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Aside$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Header$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Header$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Footer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Footer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.structure.Heading$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen import Division , Paragraph , Preformatted [EOL] [EOL] [EOL] class DivisionTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] div = Division ( ) [EOL] div . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( div ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] div = Division ( [string] , [string] ) [EOL] div . append ( [string] ) [EOL] assert_equal ( [string] , str ( div ) ) [EOL] [EOL] [EOL] class ParagraphTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] p = Paragraph ( ) [EOL] p . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( p ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] p = Paragraph ( [string] , [string] ) [EOL] p . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( p ) ) ) [EOL] [EOL] [EOL] class PreformattedTest ( TestCase ) : [EOL] def test_render ( self ) : [EOL] div = Preformatted ( ) [EOL] div . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( div ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen . list import OrderedList , UnorderedList , ListItem , DescriptionList [EOL] [EOL] [EOL] class OrderedListTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] list_ = OrderedList ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( list_ ) ) ) [EOL] [EOL] def test_create_item_no_content ( self ) : [EOL] list_ = OrderedList ( ) [EOL] item = list_ . create_item ( ) [EOL] item . add_css_classes ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( list_ ) ) , ) [EOL] [EOL] def test_create_item_with_content ( self ) : [EOL] list_ = OrderedList ( ) [EOL] list_ . create_item ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( list_ ) ) , ) [EOL] [EOL] def test_create_items ( self ) : [EOL] list_ = OrderedList ( ) [EOL] items = list_ . create_items ( [string] , [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( list_ ) ) , ) [EOL] assert_equal ( [number] , len ( items ) ) [EOL] [EOL] def test_start_attribute ( self ) : [EOL] list_ = OrderedList ( ) [EOL] list_ . start = [number] [EOL] assert_equal ( [number] , list_ . start ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( list_ ) ) ) [EOL] [EOL] def test_start_attribute_default ( self ) : [EOL] list_ = OrderedList ( ) [EOL] assert_equal ( [number] , list_ . start ) [EOL] list_ . start = [number] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( list_ ) ) ) [EOL] [EOL] [EOL] class UnorderedListTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] list_ = UnorderedList ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( list_ ) ) ) [EOL] [EOL] def test_create_item_no_content ( self ) : [EOL] list_ = UnorderedList ( ) [EOL] item = list_ . create_item ( ) [EOL] item . add_css_classes ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( list_ ) ) , ) [EOL] [EOL] def test_create_item_with_content ( self ) : [EOL] list_ = UnorderedList ( ) [EOL] list_ . create_item ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( list_ ) ) , ) [EOL] [EOL] def test_create_items ( self ) : [EOL] list_ = UnorderedList ( ) [EOL] items = list_ . create_items ( [string] , [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( list_ ) ) , ) [EOL] assert_equal ( [number] , len ( items ) ) [EOL] [EOL] [EOL] class ListItemTest ( TestCase ) : [EOL] def test_without_initial_content ( self ) : [EOL] li = ListItem ( ) [EOL] li . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( li ) ) ) [EOL] [EOL] def test_with_initial_content ( self ) : [EOL] li = ListItem ( [string] , [string] ) [EOL] li . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( li ) ) , ) [EOL] [EOL] [EOL] class DescriptionListTest ( TestCase ) : [EOL] def test_create_term ( self ) : [EOL] dl = DescriptionList ( ) [EOL] dl . create_item ( [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( dl ) ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 $typing.Any$ 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 $typing.Any$ 0 0 $htmlgen.list.OrderedList$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.OrderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.UnorderedList$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.DescriptionList$ 0 0 0 0 0 $htmlgen.list.DescriptionList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.DescriptionList$ 0 0 0 0 0
from typing import Any , List , Optional , Match [EOL] import test_htmlgen [EOL] import htmlgen [EOL] import typing [EOL] import re [EOL] from unittest import TestCase [EOL] [EOL] from asserts import ( assert_false , assert_true , assert_equal , assert_is_none , assert_raises , ) [EOL] [EOL] from htmlgen . element import Element , VoidElement , NonVoidElement [EOL] [EOL] [EOL] class NonVoidElementTest ( TestCase ) : [EOL] def test_generate_children ( self ) : [EOL] class TestingElement ( NonVoidElement ) : [EOL] def generate_children ( self ) : [EOL] yield [string] [EOL] yield VoidElement ( [string] ) [EOL] [EOL] element = TestingElement ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] ] , list ( iter ( element ) ) , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class ElementTest ( TestCase ) : [EOL] def test_true ( self ) : [EOL] assert_true ( Element ( [string] ) ) [EOL] [EOL] def test_append_extend ( self ) : [EOL] element = Element ( [string] ) [EOL] element . append ( [string] ) [EOL] element . extend ( [ [string] , [string] , [string] ] ) [EOL] assert_equal ( [number] , len ( element ) ) [EOL] element . append_raw ( [string] ) [EOL] element . extend_raw ( [ [string] , [string] , [string] ] ) [EOL] assert_equal ( [number] , len ( element ) ) [EOL] [EOL] def test_empty ( self ) : [EOL] element = Element ( [string] ) [EOL] element . append ( [string] ) [EOL] element . empty ( ) [EOL] assert_equal ( [number] , len ( element ) ) [EOL] [EOL] def test_generate_empty ( self ) : [EOL] element = Element ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_generate_with_children ( self ) : [EOL] element = Element ( [string] ) [EOL] element . extend ( [ [string] , [string] ] ) [EOL] element . append_raw ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] ] , list ( iter ( element ) ) , ) [EOL] [EOL] def test_attributes ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [string] , element . get_attribute ( [string] ) ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_attribute_order ( self ) : [EOL] [docstring] [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_get_attribute ( self ) : [EOL] element = Element ( [string] ) [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] assert_equal ( [string] , element . get_attribute ( [string] , default = [string] ) ) [EOL] [EOL] def test_remove_attribute ( self ) : [EOL] element = Element ( [string] ) [EOL] element . remove_attribute ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . remove_attribute ( [string] ) [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_attribute_names ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . remove_attribute ( [string] ) [EOL] assert_equal ( { [string] } , element . attribute_names ) [EOL] [EOL] def test_add_one_css_classes ( self ) : [EOL] element = Element ( [string] ) [EOL] element . add_css_classes ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_add_multiple_css_classes ( self ) : [EOL] element = Element ( [string] ) [EOL] element . add_css_classes ( [string] , [string] , [string] ) [EOL] element . add_css_classes ( [string] ) [EOL] matches = re . search ( [string] , str ( element ) ) [EOL] assert matches is not None [EOL] css_classes = matches . group ( [number] ) . split ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , css_classes ) [EOL] [EOL] def test_remove_css_classes ( self ) : [EOL] element = Element ( [string] ) [EOL] element . add_css_classes ( [string] , [string] , [string] ) [EOL] element . remove_css_classes ( [string] , [string] ) [EOL] matches = re . search ( [string] , str ( element ) ) [EOL] assert matches is not None [EOL] css_classes = matches . group ( [number] ) . split ( [string] ) [EOL] css_classes . sort ( ) [EOL] assert_equal ( [ [string] , [string] ] , css_classes ) [EOL] [EOL] def test_has_css_class ( self ) : [EOL] element = Element ( [string] ) [EOL] element . add_css_classes ( [string] ) [EOL] assert_false ( element . has_css_class ( [string] ) ) [EOL] element . add_css_classes ( [string] ) [EOL] assert_true ( element . has_css_class ( [string] ) ) [EOL] element . remove_css_classes ( [string] ) [EOL] assert_false ( element . has_css_class ( [string] ) ) [EOL] [EOL] def test_set_one_style ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_style ( [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) , ) [EOL] [EOL] def test_set_multiple_styles ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_style ( [string] , [string] ) [EOL] element . set_style ( [string] , [string] ) [EOL] element . set_style ( [string] , [string] ) [EOL] matches = re . search ( [string] , str ( element ) ) [EOL] assert matches is not None [EOL] css_classes = matches . group ( [number] ) . split ( [string] ) [EOL] css_classes . sort ( ) [EOL] assert_equal ( [ [string] , [string] , [string] , ] , css_classes , ) [EOL] [EOL] def test_id ( self ) : [EOL] element = Element ( [string] ) [EOL] element . id = [string] [EOL] assert_equal ( [string] , element . id ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . id = [string] [EOL] assert_is_none ( element . id ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . id = None [EOL] assert_is_none ( element . id ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_id_space ( self ) : [EOL] element = Element ( [string] ) [EOL] with assert_raises ( ValueError ) : [EOL] element . id = [string] [EOL] [EOL] def test_data_set ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data [ [string] ] = [string] [EOL] element . data [ [string] ] = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) , ) [EOL] [EOL] def test_data_get ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data [ [string] ] = [string] [EOL] assert_equal ( [string] , element . data [ [string] ] ) [EOL] [EOL] def test_data_get_not_set ( self ) : [EOL] element = Element ( [string] ) [EOL] with assert_raises ( KeyError ) : [EOL] element . data [ [string] ] [EOL] [EOL] def test_data_overwrite ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data [ [string] ] = [string] [EOL] element . data [ [string] ] = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_data_delete ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data [ [string] ] = [string] [EOL] del element . data [ [string] ] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_data_delete_unknown ( self ) : [EOL] element = Element ( [string] ) [EOL] with assert_raises ( KeyError ) : [EOL] del element . data [ [string] ] [EOL] [EOL] def test_data_clear ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data = { [string] : [string] , [string] : [string] } [comment] [EOL] element . data . clear ( ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_data_replace ( self ) : [EOL] element = Element ( [string] ) [EOL] element . data = { [string] : [string] , [string] : [string] } [comment] [EOL] element . data = { [string] : [string] , [string] : [string] } [comment] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( element ) ) , ) [EOL] [EOL] def test_data_iteration ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] items = list ( iter ( element . data ) ) [EOL] assert_equal ( [ [string] ] , items ) [EOL] [EOL] def test_data_length ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [number] , len ( element . data ) ) [EOL] [EOL] def test_data_external ( self ) : [EOL] element = Element ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [string] , element . data [ [string] ] ) [EOL] element . data [ [string] ] = [string] [EOL] assert_equal ( [string] , element . get_attribute ( [string] ) ) [EOL] element . data . clear ( ) [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] element . data = { } [comment] [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] [EOL] [EOL] class ShortElementTest ( TestCase ) : [EOL] def test_empty ( self ) : [EOL] element = VoidElement ( [string] ) [EOL] assert_equal ( [ [string] ] , list ( iter ( element ) ) ) [EOL] [EOL] def test_attribute ( self ) : [EOL] element = VoidElement ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ [string] ] , list ( iter ( element ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.element.NonVoidElementTest.test_generate_children.TestingElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.element.NonVoidElementTest.test_generate_children.TestingElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 $htmlgen.element.Element$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.VoidElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.VoidElement$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.VoidElement$ 0 0 0 0 0 0 $htmlgen.element.VoidElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element.VoidElement$ 0 0 0 0
import htmlgen [EOL] from datetime import datetime , date [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen import Time [EOL] [EOL] [EOL] class TimeTest ( TestCase ) : [EOL] def test_date ( self ) : [EOL] time = Time ( date ( [number] , [number] , [number] ) ) [EOL] time . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( time ) ) , ) [EOL] [EOL] def test_datetime ( self ) : [EOL] time = Time ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] time . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] ] , list ( iter ( time ) ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.time.Time$ 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] import datetime [EOL] from unittest import TestCase [EOL] [EOL] from asserts import ( assert_false , assert_true , assert_is_none , assert_equal , assert_is , assert_raises , ) [EOL] [EOL] from htmlgen import ( Span , Form , Input , TextInput , SubmitButton , Button , NumberInput , SearchInput , PasswordInput , DateInput , TimeInput , FileInput , Checkbox , RadioButton , TextArea , Select , OptionGroup , Option , Label , ) [EOL] from htmlgen . form import Autocomplete [EOL] [EOL] [EOL] class FormTest ( TestCase ) : [EOL] def test_implicit_arguments ( self ) : [EOL] form = Form ( [string] , [string] ) [EOL] assert_equal ( [string] , form . method ) [EOL] assert_equal ( [string] , form . url ) [EOL] assert_equal ( [string] , form . target ) [EOL] assert_is_none ( form . autocomplete ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( form ) ) , ) [EOL] [EOL] def test_arguments ( self ) : [EOL] form = Form ( [string] , [string] ) [EOL] form . autocomplete = Autocomplete . OFF [EOL] assert_equal ( [ [string] , [string] , ] , list ( iter ( form ) ) , ) [EOL] [EOL] def test_default_arguments ( self ) : [EOL] form = Form ( ) [EOL] assert_equal ( [string] , form . method ) [EOL] assert_equal ( [string] , form . url ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( form ) ) ) [EOL] [EOL] def test_target ( self ) : [EOL] form = Form ( ) [EOL] form . target = [string] [EOL] assert_equal ( [string] , str ( form ) ) [EOL] form . set_blank_target ( ) [EOL] assert_equal ( [string] , form . target ) [EOL] assert_equal ( [string] , str ( form ) ) [EOL] [EOL] def test_multipart ( self ) : [EOL] form = Form ( ) [EOL] assert_false ( form . multipart ) [EOL] assert_equal ( [string] , form . encryption_type ) [EOL] form . multipart = True [EOL] assert_equal ( [string] , form . encryption_type ) [EOL] form . multipart = False [EOL] assert_equal ( [string] , form . encryption_type ) [EOL] form . encryption_type = [string] [EOL] assert_true ( form . multipart ) [EOL] form . encryption_type = [string] [EOL] assert_false ( form . multipart ) [EOL] [EOL] [EOL] class InputTest ( TestCase ) : [EOL] def test_with_name ( self ) : [EOL] input_ = Input ( [string] , [string] ) [EOL] assert_equal ( [string] , input_ . type ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [ [string] ] , list ( iter ( input_ ) ) ) [EOL] [EOL] def test_defaults ( self ) : [EOL] input_ = Input ( ) [EOL] assert_equal ( [string] , input_ . type ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [ [string] ] , list ( iter ( input_ ) ) ) [EOL] [EOL] def test_attributes ( self ) : [EOL] input_ = Input ( ) [EOL] input_ . size = [number] [EOL] input_ . value = [string] [EOL] input_ . autocomplete = [string] [EOL] input_ . placeholder = [string] [EOL] assert_equal ( [ [string] [string] ] , list ( iter ( input_ ) ) , ) [EOL] [EOL] def test_boolean_attributes ( self ) : [EOL] input_ = Input ( ) [EOL] input_ . disabled = True [EOL] input_ . focus = True [EOL] input_ . readonly = True [EOL] assert_equal ( [ [string] [string] ] , list ( iter ( input_ ) ) , ) [EOL] [EOL] [EOL] class TextInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] input_ = TextInput ( ) [EOL] assert_equal ( [string] , input_ . type ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [ [string] ] , list ( iter ( input_ ) ) ) [EOL] [EOL] def test_with_arguments ( self ) : [EOL] input_ = TextInput ( [string] , [string] ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [ [string] [string] ] , list ( iter ( input_ ) ) , ) [EOL] [EOL] [EOL] class SearchInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] search = SearchInput ( ) [EOL] assert_equal ( [string] , search . type ) [EOL] assert_equal ( [string] , search . name ) [EOL] assert_equal ( [string] , search . value ) [EOL] assert_equal ( [string] , str ( search ) ) [EOL] [EOL] def test_with_arguments ( self ) : [EOL] search = SearchInput ( [string] ) [EOL] assert_equal ( [string] , search . name ) [EOL] assert_equal ( [string] , str ( search ) ) [EOL] [EOL] [EOL] class PasswordInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] input_ = PasswordInput ( ) [EOL] assert_equal ( [string] , input_ . type ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [ [string] ] , list ( iter ( input_ ) ) ) [EOL] [EOL] def test_with_arguments ( self ) : [EOL] input_ = PasswordInput ( [string] ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( [ [string] ] , list ( iter ( input_ ) ) ) [EOL] [EOL] [EOL] class NumberInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] number = NumberInput ( ) [EOL] assert_equal ( [string] , number . type ) [EOL] assert_equal ( [string] , number . name ) [EOL] assert_equal ( [string] , number . value ) [EOL] assert_is_none ( number . number ) [EOL] assert_equal ( [string] , str ( number ) ) [EOL] [EOL] def test_with_arguments ( self ) : [EOL] number = NumberInput ( [string] , [number] ) [EOL] assert_equal ( [string] , number . name ) [EOL] assert_equal ( [string] , number . value ) [EOL] assert_equal ( [number] , number . number ) [EOL] assert_equal ( [string] , str ( number ) ) [EOL] [EOL] def test_value_zero ( self ) : [EOL] number = NumberInput ( number = [number] ) [EOL] assert_equal ( [string] , number . value ) [EOL] assert_equal ( [number] , number . number ) [EOL] assert_equal ( [string] , str ( number ) ) [EOL] [EOL] def test_attributes ( self ) : [EOL] number = NumberInput ( ) [EOL] number . minimum = [number] [EOL] number . maximum = [number] [EOL] number . step = [number] [EOL] assert_equal ( [string] , str ( number ) , ) [EOL] [EOL] [EOL] class DateInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] input_ = DateInput ( ) [EOL] assert_equal ( [string] , input_ . type ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_is_none ( input_ . date ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [string] , str ( input_ ) ) [EOL] [EOL] def test_with_arguments ( self ) : [EOL] input_ = DateInput ( [string] , datetime . date ( [number] , [number] , [number] ) ) [EOL] assert_equal ( [string] , input_ . name ) [EOL] assert_equal ( datetime . date ( [number] , [number] , [number] ) , input_ . date ) [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [string] , str ( input_ ) , ) [EOL] [EOL] def test_value ( self ) : [EOL] input_ = DateInput ( ) [EOL] input_ . value = [string] [EOL] assert_equal ( datetime . date ( [number] , [number] , [number] ) , input_ . date ) [EOL] input_ . value = [string] [EOL] assert_is_none ( input_ . date ) [EOL] assert_equal ( [string] , str ( input_ ) ) [EOL] input_ . date = None [EOL] assert_equal ( [string] , input_ . value ) [EOL] assert_equal ( [string] , str ( input_ ) ) [EOL] [EOL] [EOL] class TimeInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] time = TimeInput ( ) [EOL] assert_equal ( [string] , time . name ) [EOL] assert_is_none ( time . time ) [EOL] assert_is_none ( time . minimum ) [EOL] assert_is_none ( time . maximum ) [EOL] assert_is_none ( time . step ) [EOL] assert_equal ( [string] , str ( time ) ) [EOL] [EOL] def test_construct_with_arguments ( self ) : [EOL] time = TimeInput ( [string] , datetime . time ( [number] , [number] , [number] ) ) [EOL] assert_equal ( [string] , time . name ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] ) , time . time ) [EOL] assert_equal ( [string] [string] , str ( time ) , ) [EOL] [EOL] def test_minimum_maximum ( self ) : [EOL] time = TimeInput ( ) [EOL] time . minimum = datetime . time ( [number] , [number] ) [EOL] time . maximum = datetime . time ( [number] , [number] ) [EOL] assert_equal ( [string] , str ( time ) ) [EOL] time . minimum = None [EOL] time . maximum = None [EOL] assert_equal ( [string] , str ( time ) ) [EOL] [EOL] def test_minimum_above_maximum ( self ) : [EOL] time = TimeInput ( ) [EOL] time . maximum = datetime . time ( [number] , [number] ) [EOL] with assert_raises ( ValueError ) : [EOL] time . minimum = datetime . time ( [number] , [number] ) [EOL] [EOL] def test_maximum_below_minimum ( self ) : [EOL] time = TimeInput ( ) [EOL] time . minimum = datetime . time ( [number] , [number] ) [EOL] with assert_raises ( ValueError ) : [EOL] time . maximum = datetime . time ( [number] , [number] ) [EOL] [EOL] def test_step ( self ) : [EOL] time = TimeInput ( ) [EOL] time . step = [number] [EOL] assert_equal ( [number] , time . step ) [EOL] assert_equal ( [string] , str ( time ) ) [EOL] time . step = None [EOL] assert_is_none ( time . step ) [EOL] assert_equal ( [string] , str ( time ) ) [EOL] time . set_attribute ( [string] , [string] ) [EOL] assert_is_none ( time . step ) [EOL] [EOL] def test_step_get_invalid ( self ) : [EOL] time = TimeInput ( ) [EOL] time . set_attribute ( [string] , [string] ) [EOL] assert_is_none ( time . step ) [EOL] time . set_attribute ( [string] , [string] ) [EOL] assert_is_none ( time . step ) [EOL] time . set_attribute ( [string] , [string] ) [EOL] assert_is_none ( time . step ) [EOL] [EOL] def test_step_set_invalid ( self ) : [EOL] time = TimeInput ( ) [EOL] with assert_raises ( ValueError ) : [EOL] time . step = [number] [EOL] [EOL] [EOL] class CheckboxTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] checkbox = Checkbox ( ) [EOL] assert_equal ( [string] , checkbox . type ) [EOL] assert_equal ( [string] , checkbox . name ) [EOL] assert_equal ( [string] , checkbox . value ) [EOL] assert_false ( checkbox . checked ) [EOL] assert_equal ( [string] , str ( checkbox ) ) [EOL] [EOL] def test_name_and_value ( self ) : [EOL] checkbox = Checkbox ( [string] , [string] ) [EOL] assert_equal ( [string] , checkbox . name ) [EOL] assert_equal ( [string] , checkbox . value ) [EOL] assert_equal ( [string] , str ( checkbox ) , ) [EOL] [EOL] def test_checked ( self ) : [EOL] checkbox = Checkbox ( ) [EOL] checkbox . checked = True [EOL] assert_true ( checkbox . checked ) [EOL] assert_equal ( [string] , str ( checkbox ) ) [EOL] [EOL] [EOL] class RadioButtonTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] radio = RadioButton ( ) [EOL] assert_equal ( [string] , radio . type ) [EOL] assert_equal ( [string] , radio . name ) [EOL] assert_equal ( [string] , radio . value ) [EOL] assert_false ( radio . checked ) [EOL] assert_equal ( [string] , str ( radio ) ) [EOL] [EOL] def test_name_and_value ( self ) : [EOL] radio = RadioButton ( [string] , [string] ) [EOL] assert_equal ( [string] , radio . name ) [EOL] assert_equal ( [string] , radio . value ) [EOL] assert_equal ( [string] , str ( radio ) ) [EOL] [EOL] def test_checked ( self ) : [EOL] radio = RadioButton ( ) [EOL] radio . checked = True [EOL] assert_true ( radio . checked ) [EOL] assert_equal ( [string] , str ( radio ) ) [EOL] [EOL] [EOL] class FileInputTest ( TestCase ) : [EOL] def test_defaults ( self ) : [EOL] file_input = FileInput ( ) [EOL] assert_equal ( [string] , file_input . name ) [EOL] assert_is_none ( file_input . max_length ) [EOL] assert_equal ( [string] , str ( file_input ) ) [EOL] [EOL] def test_construct_with_name ( self ) : [EOL] file_input = FileInput ( [string] ) [EOL] assert_equal ( [string] , file_input . name ) [EOL] assert_equal ( [string] , str ( file_input ) ) [EOL] [EOL] def test_max_length ( self ) : [EOL] file_input = FileInput ( ) [EOL] file_input . max_length = [number] [EOL] assert_equal ( [string] , str ( file_input ) ) [EOL] [EOL] def test_accepts ( self ) : [EOL] file_input = FileInput ( ) [EOL] assert_equal ( [ ] , file_input . accept ) [EOL] file_input . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ ] , file_input . accept ) [EOL] file_input . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] ] , file_input . accept ) [EOL] file_input . accept = [ [string] , [string] ] [EOL] file_input . accept . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , file_input . accept ) [EOL] assert_equal ( [string] , file_input . get_attribute ( [string] ) ) [EOL] assert_equal ( [string] , str ( file_input ) , ) [EOL] [EOL] [EOL] class HiddenInputTest ( TestCase ) : [EOL] def test_construct ( self ) : [EOL] button = SubmitButton ( [string] ) [EOL] assert_equal ( [string] , button . label ) [EOL] assert_equal ( [string] , button . value ) [EOL] assert_equal ( [ [string] ] , list ( iter ( button ) ) ) [EOL] [EOL] [EOL] class SubmitButtonTest ( TestCase ) : [EOL] def test_construct ( self ) : [EOL] button = SubmitButton ( [string] ) [EOL] assert_equal ( [string] , button . label ) [EOL] assert_equal ( [string] , button . value ) [EOL] assert_equal ( [ [string] ] , list ( iter ( button ) ) ) [EOL] [EOL] def test_label ( self ) : [EOL] button = SubmitButton ( [string] ) [EOL] button . label = [string] [EOL] assert_equal ( [string] , button . label ) [EOL] assert_equal ( [string] , button . value ) [EOL] button . value = [string] [EOL] assert_equal ( [string] , button . label ) [EOL] assert_equal ( [string] , button . value ) [EOL] [EOL] [EOL] class ButtonTest ( TestCase ) : [EOL] def test_with_children ( self ) : [EOL] button = Button ( [string] , [string] ) [EOL] assert_equal ( [string] , str ( button ) ) [EOL] [EOL] def test_disabled ( self ) : [EOL] button = Button ( ) [EOL] button . disabled = True [EOL] assert_equal ( [string] , str ( button ) ) [EOL] [EOL] [EOL] class TextAreaTest ( TestCase ) : [EOL] def test_with_name ( self ) : [EOL] text_area = TextArea ( [string] ) [EOL] assert_equal ( [string] , str ( text_area ) ) [EOL] [EOL] def test_without_name ( self ) : [EOL] text_area = TextArea ( ) [EOL] assert_equal ( [string] , str ( text_area ) ) [EOL] [EOL] def test_attributes ( self ) : [EOL] text_area = TextArea ( ) [EOL] text_area . autocomplete = [string] [EOL] assert_equal ( [string] , str ( text_area ) , ) [EOL] [EOL] [EOL] class SelectTest ( TestCase ) : [EOL] def test_attributes ( self ) : [EOL] select = Select ( ) [EOL] select . autocomplete = [string] [EOL] assert_false ( select . disabled ) [EOL] assert_equal ( [string] , str ( select ) ) [EOL] [EOL] def test_with_name ( self ) : [EOL] select = Select ( [string] ) [EOL] assert_equal ( [string] , select . name ) [EOL] assert_equal ( [string] , str ( select ) ) [EOL] [EOL] def test_without_name ( self ) : [EOL] select = Select ( ) [EOL] assert_equal ( [string] , select . name ) [EOL] assert_equal ( [string] , str ( select ) ) [EOL] [EOL] def test_create_group ( self ) : [EOL] select = Select ( ) [EOL] group = select . create_group ( [string] ) [EOL] assert_equal ( [string] , group . label ) [EOL] assert_equal ( [string] [string] , str ( select ) , ) [EOL] [EOL] def test_create_option ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] ) [EOL] assert_equal ( [string] , str ( select ) ) [EOL] [EOL] def test_create_option__selected ( self ) : [EOL] select = Select ( ) [EOL] option = select . create_option ( [string] , [string] , selected = True ) [EOL] assert_is ( option , select . selected_option ) [EOL] assert_equal ( [string] [string] , str ( select ) , ) [EOL] [EOL] def test_create_option__option_object ( self ) : [EOL] select = Select ( ) [EOL] option = select . create_option ( [string] , [string] , selected = True ) [EOL] assert_equal ( [string] , option . element_name ) [EOL] assert_equal ( [string] , option . value ) [EOL] assert_true ( option . selected ) [EOL] [EOL] def test_create_option__option_object__default_value ( self ) : [EOL] select = Select ( ) [EOL] option = select . create_option ( [string] ) [EOL] assert_equal ( [string] , option . value ) [EOL] [EOL] def test_create_option__selected_deselect_others ( self ) : [EOL] select = Select ( ) [EOL] option = select . create_option ( [string] , selected = True ) [EOL] select . create_option ( [string] , selected = True ) [EOL] assert_false ( option . selected ) [EOL] [EOL] def test_get_selected_option ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] option = select . create_option ( [string] , [string] , selected = True ) [EOL] select . create_option ( [string] , [string] ) [EOL] assert_is ( option , select . selected_option ) [EOL] [EOL] def test_get_selected_option__return_first ( self ) : [EOL] select = Select ( ) [EOL] option1 = Option ( [string] ) [EOL] option1 . selected = True [EOL] option2 = Option ( [string] ) [EOL] option2 . selected = True [EOL] select . append ( option1 ) [EOL] select . append ( option2 ) [EOL] assert_is ( option1 , select . selected_option ) [EOL] [EOL] def test_get_selected_option__no_selected_elements ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] select . create_option ( [string] , [string] ) [EOL] select . create_option ( [string] , [string] ) [EOL] assert_is_none ( select . selected_option ) [EOL] [EOL] def test_get_selected_option__non_option_elements ( self ) : [EOL] select = Select ( ) [EOL] select . append ( [string] ) [EOL] assert_is_none ( select . selected_option ) [EOL] [EOL] def test_get_selected_option__in_option_group ( self ) : [EOL] select = Select ( ) [EOL] group = select . create_group ( [string] ) [EOL] option = group . create_option ( [string] ) [EOL] option . selected = True [EOL] assert_is ( option , select . selected_option ) [EOL] [EOL] def test_get_selected_option__option_group_has_string_child ( self ) : [EOL] select = Select ( ) [EOL] group = select . create_group ( [string] ) [EOL] group . append ( [string] ) [EOL] assert_is_none ( select . selected_option ) [EOL] [EOL] def test_set_selected_option ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] ) [EOL] option = select . create_option ( [string] ) [EOL] select . create_option ( [string] ) [EOL] select . selected_option = option [EOL] assert_true ( option . selected ) [EOL] assert_is ( option , select . selected_option ) [EOL] [EOL] def test_set_selected_option__deselect_others ( self ) : [EOL] select = Select ( ) [EOL] option1 = select . create_option ( [string] , selected = True ) [EOL] option2 = select . create_option ( [string] ) [EOL] select . selected_option = option2 [EOL] assert_false ( option1 . selected ) [EOL] assert_is ( option2 , select . selected_option ) [EOL] [EOL] def test_set_selected_option__string_children ( self ) : [EOL] select = Select ( ) [EOL] select . append ( [string] ) [EOL] option = select . create_option ( [string] ) [EOL] select . selected_option = option [EOL] [EOL] def test_get_selected_value ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] select . create_option ( [string] , [string] , selected = True ) [EOL] assert_equal ( [string] , select . selected_value ) [EOL] [EOL] def test_get_selected_value__implicit_value ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] ) [EOL] select . create_option ( [string] , selected = True ) [EOL] assert_equal ( [string] , select . selected_value ) [EOL] [EOL] def test_get_selected_value__no_selected ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] assert_is_none ( select . selected_value ) [EOL] [EOL] def test_set_selected_value ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] option = select . create_option ( [string] , [string] ) [EOL] select . create_option ( [string] , [string] ) [EOL] select . selected_value = [string] [EOL] assert_equal ( [string] , select . selected_value ) [EOL] assert_is ( option , select . selected_option ) [EOL] assert_true ( option . selected ) [EOL] [EOL] def test_set_selected_value__value_not_found ( self ) : [EOL] select = Select ( ) [EOL] select . create_option ( [string] , [string] ) [EOL] select . create_option ( [string] , [string] ) [EOL] with assert_raises ( ValueError ) : [EOL] select . selected_value = [string] [EOL] [EOL] [EOL] class OptionGroupTest ( TestCase ) : [EOL] def test_default ( self ) : [EOL] group = OptionGroup ( [string] ) [EOL] assert_equal ( [string] , group . label ) [EOL] assert_false ( group . disabled ) [EOL] assert_equal ( [string] , str ( group ) ) [EOL] [EOL] def test_disabled ( self ) : [EOL] group = OptionGroup ( [string] ) [EOL] group . disabled = True [EOL] assert_equal ( [string] [string] , str ( group ) , ) [EOL] [EOL] def create_option ( self ) : [EOL] group = OptionGroup ( [string] ) [EOL] group . create_option ( [string] ) [EOL] assert_equal ( [string] [string] , str ( group ) , ) [EOL] [EOL] [EOL] class OptionTest ( TestCase ) : [EOL] def test_default_value ( self ) : [EOL] option = Option ( [string] ) [EOL] assert_equal ( [string] , option . value ) [EOL] assert_equal ( [string] , str ( option ) ) [EOL] assert_false ( option . selected ) [EOL] assert_false ( option . disabled ) [EOL] [EOL] def test_with_value ( self ) : [EOL] option = Option ( [string] , [string] ) [EOL] assert_equal ( [string] , option . value ) [EOL] assert_equal ( [string] , str ( option ) ) [EOL] [EOL] def test_set_value ( self ) : [EOL] option = Option ( [string] ) [EOL] option . value = [string] [EOL] assert_equal ( [string] , option . value ) [EOL] assert_equal ( [string] , str ( option ) ) [EOL] [EOL] def test_set_value_to_none ( self ) : [EOL] option = Option ( [string] , [string] ) [EOL] option . value = None [EOL] assert_equal ( [string] , option . value ) [EOL] assert_equal ( [string] , str ( option ) ) [EOL] [EOL] [EOL] class LabelTest ( TestCase ) : [EOL] def test_default ( self ) : [EOL] label = Label ( ) [EOL] assert_equal ( [string] , str ( label ) ) [EOL] [EOL] def test_children ( self ) : [EOL] label = Label ( [string] , Span ( ) ) [EOL] assert_equal ( [string] , str ( label ) ) [EOL] [EOL] def test_for ( self ) : [EOL] label = Label ( ) [EOL] assert_is_none ( label . for_ ) [EOL] label . for_ = [string] [EOL] assert_equal ( [string] , label . for_ ) [EOL] assert_equal ( [string] , str ( label ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 $htmlgen.form.Form$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.Form$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Input$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SearchInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.PasswordInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 $typing.Any$ 0 0 0 $htmlgen.form.NumberInput$ 0 $typing.Any$ 0 0 0 $htmlgen.form.NumberInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.NumberInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 $htmlgen.form.DateInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 $htmlgen.form.DateInput$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.DateInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 $htmlgen.form.TimeInput$ 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TimeInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.Checkbox$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.RadioButton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 $typing.Any$ 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.FileInput$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 $htmlgen.form.SubmitButton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Button$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Button$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Button$ 0 0 0 0 0 $htmlgen.form.Button$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Button$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 $htmlgen.form.TextArea$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.TextArea$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 $htmlgen.form.Option$ 0 $typing.Any$ 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 $htmlgen.form.Option$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $htmlgen.form.Option$ 0 0 $typing.Any$ 0 0 0 $htmlgen.form.Option$ 0 0 0 0 $htmlgen.form.Option$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $typing.Any$ 0 $htmlgen.form.Select$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Select$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 $typing.Any$ 0 0 $htmlgen.form.Label$ 0 $typing.Any$ 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.form.Label$ 0 0 0
	0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal , assert_true , assert_is_none , assert_false [EOL] [EOL] from htmlgen import Video , Preload [EOL] [EOL] [EOL] class VideoTest ( TestCase ) : [EOL] def test_src_only ( self ) : [EOL] video = Video ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( video ) ) , ) [EOL] [EOL] def test_controls ( self ) : [EOL] video = Video ( [string] ) [EOL] assert_false ( video . controls ) [EOL] video . controls = True [EOL] assert_true ( video . controls ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( video ) ) , ) [EOL] [EOL] def test_poster ( self ) : [EOL] video = Video ( [string] ) [EOL] assert_is_none ( video . poster ) [EOL] video . poster = [string] [EOL] assert_equal ( [string] , video . poster ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( video ) ) , ) [EOL] [EOL] def test_preload ( self ) : [EOL] video = Video ( [string] ) [EOL] assert_is_none ( video . preload ) [EOL] video . preload = Preload . NONE [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( video ) ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 0 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 $htmlgen.video.Video$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.video.Video$ 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_equal [EOL] [EOL] from htmlgen . link import Link [EOL] [EOL] [EOL] class LinkTest ( TestCase ) : [EOL] def test_simple ( self ) : [EOL] link = Link ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( link ) ) ) [EOL] [EOL] def test_caption_argument ( self ) : [EOL] link = Link ( [string] , [string] , [string] ) [EOL] link . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] , [string] , [string] , [string] , ] , list ( iter ( link ) ) , ) [EOL] [EOL] def test_url ( self ) : [EOL] link = Link ( [string] ) [EOL] assert_equal ( [string] , link . url ) [EOL] link . url = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( link ) ) ) [EOL] [EOL] def test_target ( self ) : [EOL] link = Link ( [string] ) [EOL] assert_equal ( [string] , link . target ) [EOL] link . target = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( link ) ) ) [EOL] link . set_blank_target ( ) [EOL] assert_equal ( [string] , link . target ) [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( link ) ) ) [EOL] [EOL] def test_title ( self ) : [EOL] link = Link ( [string] ) [EOL] link . title = [string] [EOL] assert_equal ( [ [string] , [string] ] , list ( iter ( link ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0 0 0 $htmlgen.link.Link$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.link.Link$ 0 0 0 0
from typing import Any [EOL] import test_htmlgen [EOL] import htmlgen [EOL] import typing [EOL] import datetime [EOL] from enum import Enum [EOL] from unittest import TestCase [EOL] [EOL] from asserts import assert_true , assert_false , assert_is_none , assert_equal , assert_raises [EOL] [EOL] from htmlgen . attribute import ( html_attribute , boolean_html_attribute , int_html_attribute , float_html_attribute , time_html_attribute , list_html_attribute , data_attribute , css_class_attribute , enum_attribute , ) [EOL] from htmlgen . element import Element [EOL] [EOL] [EOL] class HTMLAttributeTest ( TestCase ) : [EOL] def test_regular ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [string] [EOL] assert_equal ( [string] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_regular_with_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = html_attribute ( [string] , default = [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( [string] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [string] [EOL] assert_equal ( [string] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [string] [EOL] assert_equal ( [string] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_equal ( [string] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_boolean ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = boolean_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_false ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = True [EOL] assert_true ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = False [EOL] assert_false ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_integer ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = int_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_integer_with_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = int_html_attribute ( [string] , default = [number] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_float ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = float_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_float_with_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = float_html_attribute ( [string] , default = [number] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [number] [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_equal ( [number] , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_time ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = time_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = datetime . time ( [number] , [number] , [number] ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] ) , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] ) , element . attr ) [EOL] [EOL] def test_time_with_fraction ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = time_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] element . attr = datetime . time ( [number] , [number] , [number] , [number] ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] , [number] ) , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_time__invalid_value ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = time_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_is_none ( element . attr ) [EOL] [EOL] def test_time_with_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = time_html_attribute ( [string] , default = datetime . time ( [number] , [number] , [number] ) ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] ) , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = datetime . time ( [number] , [number] , [number] ) [EOL] assert_equal ( datetime . time ( [number] , [number] , [number] ) , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_list ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = list_html_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( [ ] , element . attr ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ ] , element . attr ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [ [string] , [string] ] , element . attr ) [EOL] element . attr = [ ] [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = [ [string] , [string] ] [EOL] assert_equal ( [ [string] , [string] ] , element . attr ) [EOL] element . attr . append ( [string] ) [EOL] assert_equal ( [ [string] , [string] ] , element . attr ) [EOL] assert_equal ( [string] , element . get_attribute ( [string] ) ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_data ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = data_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] element . attr = [string] [EOL] assert_equal ( [string] , element . get_attribute ( [string] ) ) [EOL] element . set_attribute ( [string] , [string] ) [EOL] assert_equal ( [string] , element . attr ) [EOL] [EOL] def test_data_with_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = data_attribute ( [string] , [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] element . attr = [string] [EOL] assert_is_none ( element . get_attribute ( [string] ) ) [EOL] [EOL] def test_css_class ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = css_class_attribute ( [string] ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_false ( element . attr ) [EOL] element . add_css_classes ( [string] ) [EOL] assert_false ( element . attr ) [EOL] element . add_css_classes ( [string] ) [EOL] assert_true ( element . attr ) [EOL] element . attr = False [EOL] assert_false ( element . has_css_class ( [string] ) ) [EOL] element . attr = False [EOL] assert_false ( element . has_css_class ( [string] ) ) [EOL] element . attr = True [EOL] assert_true ( element . has_css_class ( [string] ) ) [EOL] element . attr = True [EOL] assert_true ( element . has_css_class ( [string] ) ) [EOL] [EOL] [EOL] class TestEnum ( Enum ) : [EOL] FOO = [string] [EOL] BAR = [string] [EOL] [EOL] [EOL] class EnumAttributeTest ( TestCase ) : [EOL] def test_enum ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = enum_attribute ( [string] , TestEnum ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = TestEnum . BAR [EOL] assert_equal ( TestEnum . BAR , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_is_none ( element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_default ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = enum_attribute ( [string] , TestEnum , default = TestEnum . FOO ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] assert_equal ( TestEnum . FOO , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = TestEnum . BAR [EOL] assert_equal ( TestEnum . BAR , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] element . attr = None [EOL] assert_equal ( TestEnum . FOO , element . attr ) [EOL] assert_equal ( [string] , str ( element ) ) [EOL] [EOL] def test_not_an_enum ( self ) : [EOL] with assert_raises ( TypeError ) : [EOL] class MyElement ( Element ) : [EOL] attr = enum_attribute ( [string] , [string] ) [comment] [EOL] [EOL] def test_invalid_value ( self ) : [EOL] class MyElement ( Element ) : [EOL] attr = enum_attribute ( [string] , TestEnum ) [EOL] [EOL] element = MyElement ( [string] ) [EOL] with assert_raises ( TypeError ) : [EOL] element . attr = [string] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_regular_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_boolean.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_integer_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_float_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_fraction.MyElement$ 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_fraction.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_fraction.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_fraction.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.time_html_attribute$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time__invalid_value.MyElement$ 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time__invalid_value.MyElement$ 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time__invalid_value.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_time_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_list.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data_with_default.MyElement$ 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data_with_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_data_with_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.HTMLAttributeTest.test_css_class.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 $typing.Any$ 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_enum.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_default.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.enum_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_invalid_value.MyElement$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_htmlgen.attribute.EnumAttributeTest.test_invalid_value.MyElement$ 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from htmlgen . element import Element [EOL] [EOL] [EOL] class Time ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , date ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] if hasattr ( date , [string] ) : [EOL] formatted = date . strftime ( [string] ) [EOL] else : [EOL] formatted = date . strftime ( [string] ) [EOL] self . set_attribute ( [string] , formatted ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] from enum import Enum [EOL] [EOL] from htmlgen . timeutil import parse_rfc3339_partial_time [EOL] [EOL] [EOL] class html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name , default = None ) : [EOL] self . _attribute_name = attribute_name [EOL] self . _default = default [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] return obj . get_attribute ( self . _attribute_name , default = self . _default ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value is None or value == self . _default : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] else : [EOL] obj . set_attribute ( self . _attribute_name , value ) [EOL] [EOL] [EOL] class boolean_html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name ) : [EOL] self . _attribute_name = attribute_name [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] return obj . get_attribute ( self . _attribute_name ) == self . _attribute_name [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value : [EOL] obj . set_attribute ( self . _attribute_name , self . _attribute_name ) [EOL] else : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] [EOL] [EOL] class int_html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name , default = None ) : [EOL] self . _attribute_name = attribute_name [EOL] self . _default = default [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] value = obj . get_attribute ( self . _attribute_name , default = self . _default ) [EOL] if value is None : [EOL] return None [EOL] return int ( value ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value is None or value == self . _default : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] else : [EOL] obj . set_attribute ( self . _attribute_name , str ( value ) ) [EOL] [EOL] [EOL] class float_html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name , default = None ) : [EOL] self . _attribute_name = attribute_name [EOL] self . _default = default [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] value = obj . get_attribute ( self . _attribute_name , default = self . _default ) [EOL] if value is None : [EOL] return None [EOL] return float ( value ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value is None or value == self . _default : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] else : [EOL] obj . set_attribute ( self . _attribute_name , str ( value ) ) [EOL] [EOL] [EOL] class time_html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name , default = None ) : [EOL] self . _attribute_name = attribute_name [EOL] self . _default = default [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] value = obj . get_attribute ( self . _attribute_name ) [EOL] if value is None : [EOL] return self . _default [EOL] return parse_rfc3339_partial_time ( value ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value is None or value == self . _default : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] else : [EOL] obj . set_attribute ( self . _attribute_name , str ( value ) ) [EOL] [EOL] [EOL] class list_html_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name ) : [EOL] self . _attribute_name = attribute_name [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] value = obj . get_attribute ( self . _attribute_name ) [EOL] return value . split ( [string] ) if value else [ ] [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value : [EOL] obj . set_attribute ( self . _attribute_name , [string] . join ( value ) ) [EOL] else : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] [EOL] [EOL] class data_attribute ( html_attribute ) : [EOL] def __init__ ( self , data_name , default = None ) : [EOL] attribute_name = [string] + data_name [EOL] super ( data_attribute , self ) . __init__ ( attribute_name , default ) [EOL] [EOL] [EOL] class css_class_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , css_class ) : [EOL] self . _css_class = css_class [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] return obj . has_css_class ( self . _css_class ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value : [EOL] obj . add_css_classes ( self . _css_class ) [EOL] else : [EOL] obj . remove_css_classes ( self . _css_class ) [EOL] [EOL] [EOL] class enum_attribute : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , attribute_name , enum , default = None ) : [EOL] if not issubclass ( enum , Enum ) : [EOL] raise TypeError ( [string] ) [EOL] self . _attribute_name = attribute_name [EOL] self . _enum = enum [EOL] self . _default = default [EOL] [EOL] def __get__ ( self , obj , _ = None ) : [EOL] value = obj . get_attribute ( self . _attribute_name , None ) [EOL] if value is None : [EOL] return self . _default [EOL] return self . _enum ( value ) [EOL] [EOL] def __set__ ( self , obj , value ) : [EOL] if value is None : [EOL] obj . remove_attribute ( self . _attribute_name ) [EOL] elif not isinstance ( value , self . _enum ) : [EOL] raise TypeError ( [string] . format ( self . _enum ) ) [EOL] else : [EOL] obj . set_attribute ( self . _attribute_name , value . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Match [EOL] import htmlgen [EOL] import typing [EOL] import datetime [EOL] import re [EOL] from enum import Enum [EOL] [EOL] from htmlgen . attribute import ( html_attribute , boolean_html_attribute , int_html_attribute , float_html_attribute , time_html_attribute , list_html_attribute , enum_attribute , ) [EOL] from htmlgen . block import Division [EOL] from htmlgen . element import Element , VoidElement , is_element [EOL] from htmlgen . timeutil import parse_rfc3339_partial_time [EOL] [EOL] [EOL] _ENC_TYPE_URL_ENCODED = [string] [EOL] _ENC_TYPE_MULTI_PART = [string] [EOL] [EOL] [EOL] class Autocomplete ( Enum ) : [EOL] OFF = [string] [EOL] ON = [string] [EOL] [EOL] [EOL] class Form ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , method = [string] , url = [string] ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . method = method [EOL] self . url = url [EOL] [EOL] method = html_attribute ( [string] , default = [string] ) [EOL] url = html_attribute ( [string] , default = [string] ) [EOL] target = html_attribute ( [string] , [string] ) [EOL] encryption_type = html_attribute ( [string] , _ENC_TYPE_URL_ENCODED ) [EOL] autocomplete = enum_attribute ( [string] , Autocomplete ) [EOL] [EOL] def set_blank_target ( self ) : [EOL] self . target = [string] [EOL] [EOL] @ property def multipart ( self ) : [EOL] return self . encryption_type == _ENC_TYPE_MULTI_PART [EOL] [EOL] @ multipart . setter def multipart ( self , multipart ) : [EOL] if multipart : [EOL] self . encryption_type = _ENC_TYPE_MULTI_PART [EOL] else : [EOL] self . encryption_type = _ENC_TYPE_URL_ENCODED [EOL] [EOL] [EOL] class Input ( VoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , type_ = [string] , name = [string] ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] ) [EOL] self . type = type_ [EOL] self . name = name [EOL] [EOL] name = html_attribute ( [string] , default = [string] ) [EOL] value = html_attribute ( [string] , default = [string] ) [EOL] readonly = boolean_html_attribute ( [string] ) [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] type = html_attribute ( [string] ) [EOL] autocomplete = html_attribute ( [string] ) [EOL] placeholder = html_attribute ( [string] ) [EOL] size = int_html_attribute ( [string] ) [EOL] focus = boolean_html_attribute ( [string] ) [EOL] [EOL] [EOL] class TextInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , value = [string] ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] self . value = value [EOL] [EOL] [EOL] class SearchInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] [EOL] [EOL] class PasswordInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] [EOL] [EOL] class NumberInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , number = None ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] if number is not None : [EOL] self . number = number [EOL] [EOL] number = float_html_attribute ( [string] ) [EOL] minimum = float_html_attribute ( [string] ) [EOL] maximum = float_html_attribute ( [string] ) [EOL] step = float_html_attribute ( [string] ) [EOL] [EOL] [EOL] class DateInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , date = None ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] self . date = date [EOL] [EOL] @ property def date ( self ) : [EOL] [docstring] [EOL] return self . _parse_date ( self . value ) [EOL] [EOL] @ date . setter def date ( self , date ) : [EOL] [docstring] [EOL] self . value = date . strftime ( [string] ) if date else [string] [EOL] [EOL] @ staticmethod def _parse_date ( v ) : [EOL] match = re . match ( [string] , v ) [EOL] if not match : [EOL] return None [EOL] return datetime . date ( int ( match . group ( [number] ) ) , int ( match . group ( [number] ) ) , int ( match . group ( [number] ) ) ) [EOL] [EOL] [EOL] class TimeInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , time = None ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( [string] , name ) [EOL] self . time = time [EOL] [EOL] time = time_html_attribute ( [string] ) [EOL] [EOL] @ property def minimum ( self ) : [EOL] value = self . get_attribute ( [string] ) [EOL] if value is None : [EOL] return None [EOL] return parse_rfc3339_partial_time ( value ) [EOL] [EOL] @ minimum . setter def minimum ( self , minimum ) : [EOL] if minimum is None : [EOL] self . remove_attribute ( [string] ) [EOL] else : [EOL] if self . maximum is not None and minimum > self . maximum : [EOL] raise ValueError ( [string] ) [EOL] self . set_attribute ( [string] , str ( minimum ) ) [EOL] [EOL] @ property def maximum ( self ) : [EOL] value = self . get_attribute ( [string] ) [EOL] if value is None : [EOL] return None [EOL] return parse_rfc3339_partial_time ( value ) [EOL] [EOL] @ maximum . setter def maximum ( self , maximum ) : [EOL] if maximum is None : [EOL] self . remove_attribute ( [string] ) [EOL] else : [EOL] if self . minimum is not None and maximum < self . minimum : [EOL] raise ValueError ( [string] ) [EOL] self . set_attribute ( [string] , str ( maximum ) ) [EOL] [EOL] @ property def step ( self ) : [EOL] try : [EOL] value = float ( self . get_attribute ( [string] ) ) [EOL] except ( TypeError , ValueError ) : [EOL] return None [EOL] if value <= [number] : [EOL] return None [EOL] else : [EOL] return value [EOL] [EOL] @ step . setter def step ( self , step ) : [EOL] if step is None : [EOL] self . remove_attribute ( [string] ) [EOL] elif step <= [number] : [EOL] raise ValueError ( [string] ) [EOL] else : [EOL] self . set_attribute ( [string] , str ( step ) ) [EOL] [EOL] [EOL] class _CheckableInput ( Input ) : [EOL] def __init__ ( self , type_ , name , value ) : [EOL] super ( ) . __init__ ( type_ , name ) [EOL] if value : [EOL] self . value = value [EOL] [EOL] checked = boolean_html_attribute ( [string] ) [EOL] [EOL] [EOL] class Checkbox ( _CheckableInput ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , value = [string] ) : [EOL] super ( ) . __init__ ( [string] , name , value ) [EOL] [EOL] [EOL] class RadioButton ( _CheckableInput ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] , value = [string] ) : [EOL] super ( ) . __init__ ( [string] , name , value ) [EOL] [EOL] [EOL] class FileInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] ) : [EOL] super ( ) . __init__ ( [string] , name ) [EOL] [EOL] max_length = int_html_attribute ( [string] ) [EOL] accept = list_html_attribute ( [string] ) [EOL] [EOL] [EOL] class HiddenInput ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , value ) : [EOL] super ( ) . __init__ ( [string] , name ) [EOL] self . value = value [EOL] [EOL] [EOL] class SubmitButton ( Input ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , label ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . value = label [EOL] [EOL] @ property def label ( self ) : [EOL] return self . value [EOL] [EOL] @ label . setter def label ( self , label ) : [EOL] self . value = label [EOL] [EOL] [EOL] class Button ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] [EOL] [EOL] class TextArea ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . name = name [EOL] [EOL] name = html_attribute ( [string] , default = [string] ) [EOL] readonly = boolean_html_attribute ( [string] ) [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] columns = int_html_attribute ( [string] ) [EOL] rows = int_html_attribute ( [string] ) [EOL] autocomplete = html_attribute ( [string] ) [EOL] placeholder = html_attribute ( [string] ) [EOL] [EOL] [EOL] class Select ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name = [string] ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . name = name [EOL] [EOL] name = html_attribute ( [string] , default = [string] ) [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] autocomplete = html_attribute ( [string] ) [EOL] [EOL] def create_group ( self , label ) : [EOL] [docstring] [EOL] group = OptionGroup ( label ) [EOL] self . append ( group ) [EOL] return group [EOL] [EOL] def create_option ( self , label , value = None , selected = False ) : [EOL] [docstring] [EOL] option = Option ( label , value ) [EOL] self . append ( option ) [EOL] if selected : [EOL] self . selected_option = option [EOL] return option [EOL] [EOL] @ property def _options_iter ( self ) : [EOL] for child in self . children . children : [EOL] if is_element ( child , [string] ) : [EOL] yield child [EOL] elif is_element ( child , [string] ) : [EOL] for sub_child in child . children . children : [EOL] if is_element ( sub_child , [string] ) : [EOL] yield sub_child [EOL] [EOL] @ property def selected_option ( self ) : [EOL] [docstring] [EOL] [EOL] for child in self . _options_iter : [EOL] if child . selected : [EOL] return child [EOL] return None [EOL] [EOL] @ selected_option . setter def selected_option ( self , option ) : [EOL] [docstring] [EOL] for child in self . _options_iter : [EOL] child . selected = False [EOL] option . selected = True [EOL] [EOL] @ property def selected_value ( self ) : [EOL] [docstring] [EOL] option = self . selected_option [EOL] return option . value if option else None [EOL] [EOL] @ selected_value . setter def selected_value ( self , selected_value ) : [EOL] [docstring] [EOL] for option in self . _options_iter : [EOL] if option . value == selected_value : [EOL] self . selected_option = option [EOL] break [EOL] else : [EOL] raise ValueError ( [string] . format ( selected_value ) ) [EOL] [EOL] [EOL] class OptionGroup ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , label ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . label = label [EOL] [EOL] label = html_attribute ( [string] ) [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] [EOL] def create_option ( self , label , value = None ) : [EOL] [docstring] [EOL] option = Option ( label , value ) [EOL] self . append ( option ) [EOL] return option [EOL] [EOL] [EOL] class Option ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , label , value = None ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . value = value [EOL] self . append ( label ) [EOL] [EOL] disabled = boolean_html_attribute ( [string] ) [EOL] selected = boolean_html_attribute ( [string] ) [EOL] [EOL] @ property def value ( self ) : [EOL] [docstring] [EOL] return self . get_attribute ( [string] , str ( self . children ) ) [EOL] [EOL] @ value . setter def value ( self , value ) : [EOL] if value is None : [EOL] self . remove_attribute ( [string] ) [EOL] else : [EOL] self . set_attribute ( [string] , value ) [EOL] [EOL] [EOL] class Label ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * children ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( children ) [EOL] [EOL] for_ = html_attribute ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 $builtins.str$ 0 0 $htmlgen.attribute.enum_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.float_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.float_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.float_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.float_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.time_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.list_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 $htmlgen.form.OptionGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.form.Option$ 0 0 0 $htmlgen.form.Option$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0
from typing import Any , List [EOL] import htmlgen [EOL] import typing [EOL] from html import escape [EOL] [EOL] from htmlgen . generator import Generator , HTMLChildGenerator [EOL] [EOL] [EOL] def is_element ( o , element_name ) : [EOL] [docstring] [EOL] return ( hasattr ( o , [string] ) [EOL] and hasattr ( o , [string] ) [EOL] and o . element_name == element_name ) [EOL] [EOL] [EOL] class ElementBase ( Generator ) : [EOL] def __init__ ( self , element_name ) : [EOL] super ( ) . __init__ ( ) [EOL] self . element_name = element_name [EOL] self . _attributes = { } [EOL] self . _css_classes = set ( ) [EOL] self . _styles = { } [EOL] self . _data = _ElementDataProxy ( self ) [EOL] [EOL] def generate ( self ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] @ property def data ( self ) : [EOL] [docstring] [EOL] return self . _data [EOL] [EOL] @ data . setter def data ( self , data ) : [EOL] self . _data . clear ( ) [EOL] self . _data = _ElementDataProxy . from_data ( self , data ) [EOL] [EOL] def set_attribute ( self , name , value ) : [EOL] [docstring] [EOL] if not isinstance ( name , str ) or not isinstance ( value , str ) : [EOL] raise TypeError ( [string] ) [EOL] self . _attributes [ name ] = value [EOL] [EOL] def get_attribute ( self , name , default = None ) : [EOL] [docstring] [EOL] return self . _attributes . get ( name , default ) [EOL] [EOL] def remove_attribute ( self , name ) : [EOL] [docstring] [EOL] try : [EOL] del self . _attributes [ name ] [EOL] except KeyError : [EOL] pass [EOL] [EOL] @ property def attribute_names ( self ) : [EOL] [docstring] [EOL] return set ( self . _attributes . keys ( ) ) [EOL] [EOL] def add_css_classes ( self , * css_classes ) : [EOL] [docstring] [EOL] for cls in css_classes : [EOL] self . _css_classes . add ( cls ) [EOL] [EOL] def remove_css_classes ( self , * css_classes ) : [EOL] [docstring] [EOL] for cls in css_classes : [EOL] try : [EOL] self . _css_classes . remove ( cls ) [EOL] except KeyError : [EOL] pass [EOL] [EOL] def has_css_class ( self , css_class ) : [EOL] [docstring] [EOL] return css_class in self . _css_classes [EOL] [EOL] def set_style ( self , name , value ) : [EOL] [docstring] [EOL] self . _styles [ name ] = value [EOL] [EOL] @ property def id ( self ) : [EOL] return self . get_attribute ( [string] , None ) [EOL] [EOL] @ id . setter def id ( self , id ) : [EOL] if id : [EOL] if [string] in id : [EOL] raise ValueError ( [string] ) [EOL] self . set_attribute ( [string] , id ) [EOL] else : [EOL] self . remove_attribute ( [string] ) [EOL] [EOL] def render_start_tag ( self ) : [EOL] html = [string] + self . element_name [EOL] for attribute , value in sorted ( self . _attributes . items ( ) ) : [EOL] html += self . _get_attribute_string ( attribute , value ) [EOL] if self . _css_classes : [EOL] html += self . _get_attribute_string ( [string] , self . _class_value ) [EOL] if self . _styles : [EOL] html += self . _get_attribute_string ( [string] , self . _style_value ) [EOL] return html [EOL] [EOL] @ staticmethod def _get_attribute_string ( attribute , value ) : [EOL] escaped_value = escape ( value , True ) [EOL] return [string] + attribute + [string] + escaped_value + [string] [EOL] [EOL] @ property def _class_value ( self ) : [EOL] return [string] . join ( sorted ( self . _css_classes ) ) [EOL] [EOL] @ property def _style_value ( self ) : [EOL] rendered_styles = [ name + [string] + value for name , value in self . _styles . items ( ) ] [EOL] return [string] . join ( rendered_styles ) [EOL] [EOL] [EOL] class _ElementDataProxy : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , element ) : [EOL] self . _element = element [EOL] [EOL] def __iter__ ( self ) : [EOL] for key in self . _element . attribute_names : [EOL] if key . startswith ( [string] ) : [EOL] yield key [ [number] : ] [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( list ( iter ( self ) ) ) [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] self . _element . set_attribute ( self . _attribute_name ( key ) , value ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] if self . _element . get_attribute ( self . _attribute_name ( key ) ) is None : [EOL] raise KeyError ( key ) [EOL] return self . _element . get_attribute ( self . _attribute_name ( key ) ) [EOL] [EOL] def __delitem__ ( self , key ) : [EOL] if self . _element . get_attribute ( self . _attribute_name ( key ) ) is None : [EOL] raise KeyError ( key ) [EOL] self . _element . remove_attribute ( self . _attribute_name ( key ) ) [EOL] [EOL] def clear ( self ) : [EOL] [docstring] [EOL] for key in self . _element . attribute_names : [EOL] if key . startswith ( [string] ) : [EOL] self . _element . remove_attribute ( key ) [EOL] [EOL] def _attribute_name ( self , key ) : [EOL] return [string] + key [EOL] [EOL] @ classmethod def from_data ( cls , element , data ) : [EOL] d = cls ( element ) [EOL] for key , value in data . items ( ) : [EOL] d [ key ] = value [EOL] return d [EOL] [EOL] [EOL] class NonVoidElement ( ElementBase ) : [EOL] [EOL] [docstring] [EOL] [EOL] def generate ( self ) : [EOL] yield self . render_start_tag ( ) + [string] [EOL] for element in self . generate_children ( ) : [EOL] yield element [EOL] yield [string] + self . element_name + [string] [EOL] [EOL] def generate_children ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] [EOL] class Element ( NonVoidElement ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , element_name ) : [EOL] super ( ) . __init__ ( element_name ) [EOL] self . children = HTMLChildGenerator ( ) [EOL] [EOL] def __bool__ ( self ) : [EOL] return True [EOL] [EOL] def __getattr__ ( self , item ) : [EOL] return getattr ( self . children , item ) [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return len ( self . children ) [EOL] [EOL] def __nonzero__ ( self ) : [EOL] return True [EOL] [EOL] def generate_children ( self ) : [EOL] [docstring] [EOL] return self . children [EOL] [EOL] [EOL] class VoidElement ( ElementBase ) : [EOL] [EOL] [docstring] [EOL] [EOL] def generate ( self ) : [EOL] yield self . render_start_tag ( ) + [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element._ElementDataProxy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element._ElementDataProxy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.element._ElementDataProxy$ 0 0 0 0 0 0 0 $htmlgen.element._ElementDataProxy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.HTMLChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from htmlgen . element import Element , VoidElement [EOL] [EOL] [EOL] class Span ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class Highlight ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class Strong ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class Alternate ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class Emphasis ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class Small ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class LineBreak ( VoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from . attribute import html_attribute [EOL] from . element import VoidElement [EOL] [EOL] [EOL] class Image ( VoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , url , alternate_text = [string] ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . url = url [EOL] self . alternate_text = alternate_text [EOL] [EOL] url = html_attribute ( [string] ) [EOL] alternate_text = html_attribute ( [string] ) [EOL] title = html_attribute ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from htmlgen . attribute import html_attribute [EOL] from htmlgen . element import Element [EOL] [EOL] [EOL] class Link ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , url , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . url = url [EOL] self . extend ( content ) [EOL] [EOL] url = html_attribute ( [string] ) [EOL] target = html_attribute ( [string] , [string] ) [EOL] title = html_attribute ( [string] ) [EOL] [EOL] def set_blank_target ( self ) : [EOL] self . target = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
import builtins [EOL] import htmlgen [EOL] from enum import Enum [EOL] [EOL] from . attribute import boolean_html_attribute , html_attribute , enum_attribute [EOL] from . element import Element [EOL] [EOL] [EOL] class Preload ( Enum ) : [EOL] NONE = [string] [EOL] METADATA = [string] [EOL] AUTO = [string] [EOL] [EOL] [EOL] class Video ( Element ) : [EOL] controls = boolean_html_attribute ( [string] ) [EOL] poster = html_attribute ( [string] ) [EOL] preload = enum_attribute ( [string] , Preload ) [EOL] [EOL] def __init__ ( self , src ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . set_attribute ( [string] , src ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.boolean_html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.enum_attribute$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Optional , Match [EOL] import typing [EOL] import datetime [EOL] import re [EOL] [EOL] [EOL] def parse_rfc3339_partial_time ( value ) : [EOL] matches = re . match ( [string] , value ) [EOL] if not matches : [EOL] return None [EOL] fractions = int ( matches . group ( [number] ) ) if matches . group ( [number] ) else [number] [EOL] return datetime . time ( int ( matches . group ( [number] ) ) , int ( matches . group ( [number] ) ) , int ( matches . group ( [number] ) ) , fractions , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from htmlgen . attribute import html_attribute [EOL] from htmlgen . generator import Generator [EOL] from htmlgen . element import Element , NonVoidElement , VoidElement [EOL] [EOL] [EOL] MIME_JAVASCRIPT = [string] [EOL] MIME_JSON = [string] [EOL] [EOL] [EOL] class Document ( Generator ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , title = None , language = [string] ) : [EOL] super ( ) . __init__ ( ) [EOL] self . root = HTMLRoot ( title = title , language = language ) [EOL] [EOL] def generate ( self ) : [EOL] yield [string] [EOL] yield self . root [EOL] [EOL] @ property def title ( self ) : [EOL] return self . root . head . title . title [EOL] [EOL] @ title . setter def title ( self , title ) : [EOL] self . root . head . title . title = title [EOL] [EOL] def add_stylesheets ( self , * stylesheets ) : [EOL] self . root . head . add_stylesheets ( * stylesheets ) [EOL] [EOL] def add_stylesheet ( self , stylesheet ) : [EOL] self . root . head . add_stylesheet ( stylesheet ) [EOL] [EOL] def add_scripts ( self , * scripts ) : [EOL] self . root . head . add_scripts ( * scripts ) [EOL] [EOL] def add_script ( self , script ) : [EOL] self . root . head . add_script ( script ) [EOL] [EOL] def append_head ( self , child ) : [EOL] self . root . head . append ( child ) [EOL] [EOL] def append_body ( self , child ) : [EOL] self . root . body . append ( child ) [EOL] [EOL] [EOL] class HTMLRoot ( NonVoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , title = [string] , language = [string] ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . head = Head ( title = title ) [EOL] self . body = Body ( ) [EOL] self . set_attribute ( [string] , [string] ) [EOL] self . set_attribute ( [string] , language ) [EOL] self . set_attribute ( [string] , language ) [EOL] [EOL] def generate_children ( self ) : [EOL] yield self . head [EOL] yield self . body [EOL] [EOL] [EOL] class Head ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , title = None ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . _title = Title ( title ) [EOL] self . append ( self . _title ) [EOL] self . append ( Meta . create_charset ( [string] ) ) [EOL] [EOL] @ property def title ( self ) : [EOL] return self . _title [EOL] [EOL] @ title . setter def title ( self , title ) : [EOL] self . remove ( self . _title ) [EOL] self . append ( title ) [EOL] self . _title = title [EOL] [EOL] def add_stylesheets ( self , * stylesheets ) : [EOL] for stylesheet in stylesheets : [EOL] self . add_stylesheet ( stylesheet ) [EOL] [EOL] def add_stylesheet ( self , stylesheet ) : [EOL] self . append ( HeadLink . create_stylesheet ( stylesheet ) ) [EOL] [EOL] def add_scripts ( self , * scripts ) : [EOL] for script in scripts : [EOL] self . add_script ( script ) [EOL] [EOL] def add_script ( self , script ) : [EOL] self . append ( Script ( script ) ) [EOL] [EOL] [EOL] class Body ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Title ( NonVoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , title = None ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . title = title or [string] [EOL] [EOL] def generate_children ( self ) : [EOL] if self . title : [EOL] yield self . title [EOL] [EOL] [EOL] class Meta ( VoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] @ classmethod def create_charset ( cls , charset ) : [EOL] meta = cls ( ) [EOL] meta . set_attribute ( [string] , charset ) [EOL] return meta [EOL] [EOL] [EOL] class Script ( NonVoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , url = None , script = None ) : [EOL] assert url is None or script is None [EOL] super ( ) . __init__ ( [string] ) [EOL] if url : [EOL] self . url = url [EOL] self . script = script [EOL] [EOL] type = html_attribute ( [string] , default = MIME_JAVASCRIPT ) [EOL] url = html_attribute ( [string] ) [EOL] [EOL] def generate_children ( self ) : [EOL] if self . script : [EOL] yield self . script [EOL] [EOL] [EOL] def json_script ( json ) : [EOL] [docstring] [EOL] [EOL] from json import dumps [EOL] [EOL] serialized = dumps ( json ) [EOL] escaped = serialized . replace ( [string] , [string] ) [comment] [EOL] script = Script ( script = escaped ) [EOL] script . type = MIME_JSON [EOL] return script [EOL] [EOL] [EOL] class HeadLink ( VoidElement ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , relation , url ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . relation = relation [EOL] self . url = url [EOL] [EOL] relation = html_attribute ( [string] ) [EOL] url = html_attribute ( [string] ) [EOL] [EOL] @ classmethod def create_stylesheet ( cls , stylesheet ) : [EOL] return cls ( [string] , stylesheet ) [EOL] [EOL] [EOL] class Main ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.HTMLRoot$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.Head$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.Body$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.Title$ 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.Title$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.document.Meta$ 0 0 0 0 0 $htmlgen.document.Meta$ 0 0 0 0 0 0 0 0 0 $htmlgen.document.Meta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 $htmlgen.attribute.html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from htmlgen . element import Element [EOL] [EOL] [EOL] class Section ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Article ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Navigation ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Aside ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Header ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Footer ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class Heading ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , level = [number] , * content ) : [EOL] if level < [number] or level > [number] : [EOL] raise TypeError ( [string] ) [EOL] super ( ) . __init__ ( [string] + str ( level ) ) [EOL] self . level = level [EOL] self . extend ( content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import htmlgen [EOL] import typing [EOL] from htmlgen . attribute import int_html_attribute [EOL] from htmlgen . element import Element [EOL] [EOL] [EOL] class _ListBase ( Element ) : [EOL] [docstring] [EOL] [EOL] def create_item ( self , child = None ) : [EOL] [docstring] [EOL] item = ListItem ( ) [EOL] if child : [EOL] item . append ( child ) [EOL] self . append ( item ) [EOL] return item [EOL] [EOL] def create_items ( self , * items ) : [EOL] [docstring] [EOL] list_items = [ ] [EOL] for item in items : [EOL] list_items . append ( self . create_item ( item ) ) [EOL] return list_items [EOL] [EOL] [EOL] class OrderedList ( _ListBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] start = int_html_attribute ( [string] , [number] ) [EOL] [EOL] [EOL] class UnorderedList ( _ListBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class ListItem ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class DescriptionList ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] def create_item ( self , term , description ) : [EOL] [docstring] [EOL] dt = DescriptionTerm ( term ) [EOL] dd = DescriptionDefinition ( description ) [EOL] self . append ( dt ) [EOL] self . append ( dd ) [EOL] return dt , dd [EOL] [EOL] [EOL] class DescriptionTerm ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL] [EOL] [EOL] class DescriptionDefinition ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . extend ( content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.ListItem$ 0 0 0 $htmlgen.list.ListItem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.DescriptionTerm$ 0 0 0 0 0 0 $htmlgen.list.DescriptionDefinition$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.list.DescriptionTerm$ 0 0 0 0 0 0 $htmlgen.list.DescriptionDefinition$ 0 0 0 $htmlgen.list.DescriptionTerm$ 0 $htmlgen.list.DescriptionDefinition$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from __future__ import absolute_import [EOL] [EOL] from . attribute import ( html_attribute , boolean_html_attribute , int_html_attribute , float_html_attribute , list_html_attribute , time_html_attribute , data_attribute , css_class_attribute , ) [EOL] from . block import Division , Paragraph , Preformatted [EOL] from . document import ( Document , HTMLRoot , Head , Body , Title , Meta , Script , HeadLink , Main , json_script , ) [EOL] from . element import ElementBase , Element , VoidElement , is_element [EOL] from . form import ( Autocomplete , Form , Input , TextInput , PasswordInput , NumberInput , DateInput , TimeInput , SearchInput , FileInput , HiddenInput , SubmitButton , Button , TextArea , Select , OptionGroup , Option , Checkbox , RadioButton , Label , ) [EOL] from . generator import ( Generator , NullGenerator , IteratorGenerator , ChildGenerator , HTMLChildGenerator , JoinGenerator , HTMLJoinGenerator , GenValue , GenValueGenerator , generate_html_string , ) [EOL] from . image import Image [EOL] from . inline import ( Span , Highlight , Strong , Alternate , Emphasis , Small , LineBreak , ) [EOL] from . link import Link [EOL] from . list import ( OrderedList , UnorderedList , ListItem , DescriptionList , DescriptionDefinition , DescriptionTerm , ) [EOL] from . structure import ( Section , Article , Navigation , Aside , Header , Footer , Heading , ) [EOL] from . table import ( Table , TableHead , TableBody , TableRow , TableHeaderCell , TableCell , ColumnGroup , Column , ) [EOL] from . time import Time [EOL] from . video import Preload , Video [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Generator , Type , Union [EOL] import htmlgen [EOL] import typing [EOL] from html import escape [EOL] from typing import Union , Generator as GeneratorType [EOL] [EOL] [EOL] class Generator : [EOL] [docstring] [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] self . _iterator_stack = [ self . generate ( ) ] [EOL] while self . _iterator_stack : [EOL] iterator = self . _iterator_stack [ - [number] ] [EOL] try : [EOL] item = next ( iterator ) [EOL] except StopIteration : [EOL] self . _iterator_stack . pop ( ) [EOL] else : [EOL] if hasattr ( item , [string] ) : [EOL] self . _iterator_stack . append ( item . generate ( ) ) [EOL] elif isinstance ( item , bytes ) : [EOL] yield item [EOL] elif isinstance ( item , str ) : [EOL] yield item . encode ( [string] ) [EOL] else : [EOL] raise TypeError ( [string] . format ( repr ( item ) ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] . join ( s . decode ( [string] ) for s in self ) [EOL] [EOL] def generate ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] [EOL] class NullGenerator ( Generator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def generate ( self ) : [EOL] return iter ( [ ] ) [EOL] [EOL] [EOL] class IteratorGenerator ( Generator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , iterator ) : [EOL] super ( IteratorGenerator , self ) . __init__ ( ) [EOL] self . _iterator = iterator [EOL] [EOL] def generate ( self ) : [EOL] for item in self . _iterator : [EOL] yield item [EOL] [EOL] [EOL] class ChildGenerator ( Generator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ChildGenerator , self ) . __init__ ( ) [EOL] self . _children = [ ] [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return len ( self . _children ) [EOL] [EOL] def append ( self , child ) : [EOL] [docstring] [EOL] if child is None : [EOL] raise TypeError ( [string] ) [EOL] self . _children . append ( child ) [EOL] [EOL] def extend ( self , children ) : [EOL] [docstring] [EOL] if any ( child is None for child in children ) : [EOL] raise TypeError ( [string] ) [EOL] self . _children . extend ( children ) [EOL] [EOL] def remove ( self , child ) : [EOL] [docstring] [EOL] self . _children . remove ( child ) [EOL] [EOL] def empty ( self ) : [EOL] [docstring] [EOL] self . _children = [ ] [EOL] [EOL] @ property def children ( self ) : [EOL] [docstring] [EOL] return self . _children [ : ] [EOL] [EOL] def generate ( self ) : [EOL] [docstring] [EOL] return iter ( self . _children ) [EOL] [EOL] [EOL] class HTMLChildGenerator ( Generator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( HTMLChildGenerator , self ) . __init__ ( ) [EOL] self . _children = ChildGenerator ( ) [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return len ( self . _children ) [EOL] [EOL] def append ( self , child ) : [EOL] [docstring] [EOL] if not hasattr ( child , [string] ) : [EOL] child = escape ( child ) [EOL] self . append_raw ( child ) [EOL] [EOL] def append_raw ( self , child ) : [EOL] [docstring] [EOL] self . _children . append ( child ) [EOL] [EOL] def extend ( self , children ) : [EOL] [docstring] [EOL] for child in children : [EOL] self . append ( child ) [EOL] [EOL] def extend_raw ( self , children ) : [EOL] [docstring] [EOL] for child in children : [EOL] self . append_raw ( child ) [EOL] [EOL] def remove ( self , child ) : [EOL] [docstring] [EOL] [comment] [EOL] if not hasattr ( child , [string] ) : [EOL] child = escape ( child ) [EOL] self . _children . remove ( child ) [EOL] [EOL] def remove_raw ( self , child ) : [EOL] [docstring] [EOL] self . _children . remove ( child ) [EOL] [EOL] def empty ( self ) : [EOL] [docstring] [EOL] self . _children . empty ( ) [EOL] [EOL] @ property def children ( self ) : [EOL] [docstring] [EOL] return self . _children . children [EOL] [EOL] def generate ( self ) : [EOL] [docstring] [EOL] return self . _children . generate ( ) [EOL] [EOL] [EOL] def generate_html_string ( s ) : [EOL] [docstring] [EOL] if hasattr ( s , [string] ) : [EOL] return s [EOL] gen = HTMLChildGenerator ( ) [EOL] gen . append ( s ) [EOL] return gen [EOL] [EOL] [EOL] class JoinGenerator ( ChildGenerator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , glue , pieces = None ) : [EOL] super ( JoinGenerator , self ) . __init__ ( ) [EOL] self . _glue = glue [EOL] if pieces : [EOL] self . extend ( pieces ) [EOL] [EOL] def generate ( self ) : [EOL] pieces = super ( JoinGenerator , self ) . generate ( ) [EOL] first = True [EOL] for piece in pieces : [EOL] if not first : [EOL] yield self . _glue [EOL] yield piece [EOL] first = False [EOL] [EOL] [EOL] class HTMLJoinGenerator ( HTMLChildGenerator ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , glue , pieces = None ) : [EOL] super ( HTMLJoinGenerator , self ) . __init__ ( ) [EOL] self . _glue = escape ( glue ) [EOL] if pieces : [EOL] self . extend ( pieces ) [EOL] [EOL] def generate ( self ) : [EOL] pieces = super ( HTMLJoinGenerator , self ) . generate ( ) [EOL] first = True [EOL] for piece in pieces : [EOL] if not first : [EOL] yield self . _glue [EOL] yield piece [EOL] first = False [EOL] [EOL] [EOL] GenValue = Union [ str , bytes , Generator ] [EOL] GenValueGenerator = GeneratorType [ GenValue , None , None ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.generator.ChildGenerator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import htmlgen [EOL] import typing [EOL] from htmlgen . attribute import int_html_attribute [EOL] from htmlgen . element import Element [EOL] [EOL] [EOL] class Table ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . _head = TableHead ( ) [EOL] self . _body = TableBody ( ) [EOL] [EOL] def create_head ( self ) : [EOL] [docstring] [EOL] header = TableHead ( ) [EOL] self . append ( header ) [EOL] return header [EOL] [EOL] def create_header_row ( self ) : [EOL] [docstring] [EOL] return self . _head . create_row ( ) [EOL] [EOL] def create_body ( self ) : [EOL] [docstring] [EOL] body = TableBody ( ) [EOL] self . append ( body ) [EOL] return body [EOL] [EOL] def create_row ( self ) : [EOL] [docstring] [EOL] return self . _body . create_row ( ) [EOL] [EOL] def append_header_row ( self , row ) : [EOL] [docstring] [EOL] self . _head . append ( row ) [EOL] [EOL] def append_row ( self , row ) : [EOL] [docstring] [EOL] self . _body . append ( row ) [EOL] [EOL] def create_simple_header_row ( self , * headers ) : [EOL] [docstring] [EOL] row = self . create_header_row ( ) [EOL] row . create_header_cells ( * headers ) [EOL] return row [EOL] [EOL] def create_simple_row ( self , * cells ) : [EOL] [docstring] [EOL] row = self . create_row ( ) [EOL] row . create_cells ( * cells ) [EOL] return row [EOL] [EOL] def generate_children ( self ) : [EOL] if self . _head . children : [EOL] yield self . _head [EOL] head = TableHead ( ) [EOL] head . extend ( self . generate_header_rows ( ) ) [EOL] if len ( head ) : [EOL] yield head [EOL] if len ( self . _body ) : [EOL] yield self . _body [EOL] body = TableBody ( ) [EOL] body . extend ( self . generate_rows ( ) ) [EOL] if len ( body ) : [EOL] yield body [EOL] for child in self . children : [EOL] yield child [EOL] [EOL] def generate_header_rows ( self ) : [EOL] [docstring] [EOL] if False : [EOL] yield [EOL] [EOL] def generate_rows ( self ) : [EOL] [docstring] [EOL] if False : [EOL] yield [EOL] [EOL] [EOL] class _TableSection ( Element ) : [EOL] def create_row ( self ) : [EOL] [docstring] [EOL] row = TableRow ( ) [EOL] self . append ( row ) [EOL] return row [EOL] [EOL] [EOL] class TableHead ( _TableSection ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class TableBody ( _TableSection ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class TableRow ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] def create_cell ( self , content = [string] ) : [EOL] [docstring] [EOL] cell = TableCell ( content ) [EOL] self . append ( cell ) [EOL] return cell [EOL] [EOL] def create_cells ( self , * content ) : [EOL] [docstring] [EOL] return [ self . create_cell ( cell ) for cell in content ] [EOL] [EOL] def create_header_cell ( self , content = [string] ) : [EOL] [docstring] [EOL] [EOL] cell = TableHeaderCell ( content ) [EOL] self . append ( cell ) [EOL] return cell [EOL] [EOL] def create_header_cells ( self , * content ) : [EOL] [docstring] [EOL] return [ self . create_header_cell ( cell ) for cell in content ] [EOL] [EOL] [EOL] class _TableCellBase ( Element ) : [EOL] def __init__ ( self , element_name , * content ) : [EOL] super ( ) . __init__ ( element_name ) [EOL] self . extend ( content ) [EOL] [EOL] rows = int_html_attribute ( [string] , [number] ) [EOL] columns = int_html_attribute ( [string] , [number] ) [EOL] [EOL] [EOL] class TableHeaderCell ( _TableCellBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] , * content ) [EOL] [EOL] [EOL] class TableCell ( _TableCellBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * content ) : [EOL] super ( ) . __init__ ( [string] , * content ) [EOL] [EOL] [EOL] class ColumnGroup ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] def create_column ( self ) : [EOL] [docstring] [EOL] column = Column ( ) [EOL] self . append ( column ) [EOL] return column [EOL] [EOL] def create_columns_with_classes ( self , * css_classes ) : [EOL] [docstring] [EOL] [EOL] def create_column ( css ) : [EOL] column = self . create_column ( ) [EOL] column . add_css_classes ( css ) [EOL] return column [EOL] [EOL] return [ create_column ( css ) for css in css_classes ] [EOL] [EOL] [EOL] class Column ( Element ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 $htmlgen.table.TableHead$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 $htmlgen.table.TableBody$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableRow$ 0 0 0 $htmlgen.table.TableRow$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableCell$ 0 0 0 $htmlgen.table.TableCell$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHeaderCell$ 0 0 0 0 0 0 0 0 0 0 $htmlgen.table.TableHeaderCell$ 0 0 0 $htmlgen.table.TableHeaderCell$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 0 0 $htmlgen.attribute.int_html_attribute$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0