from setuptools import setup [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , long_description = [string] , description = [string] , scripts = [ [string] ] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , extras_require = { [string] : [ [string] ] } , entry_points = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] import json [EOL] [EOL] import feedparser [EOL] import hitman [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def is_file_latest ( f , url ) : [EOL] d = feedparser . parse ( url ) [EOL] [comment] [EOL] if d . entries [ [number] ] . enclosures : [EOL] if f == d . entries [ [number] ] . enclosures [ [number] ] [ [string] ] . split ( [string] ) [ - [number] ] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def clean_downloads ( ) : [EOL] settings = hitman . get_settings ( ) [EOL] if [string] in settings : [EOL] dl_dir = settings [ [string] ] [EOL] else : [EOL] dl_dir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] listing = os . listdir ( dl_dir ) [EOL] for localfile , data in hitman . get_downloads ( ) . iteritems ( ) : [EOL] [comment] [EOL] [comment] [EOL] if localfile in listing : [EOL] values = json . loads ( data ) [EOL] [comment] [EOL] if is_file_latest ( localfile , values [ [string] ] ) : [EOL] pass [EOL] else : [EOL] os . remove ( os . path . join ( dl_dir , localfile ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] clean_downloads ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import requests [EOL] import logging [EOL] import typing [EOL] import json [EOL] import logging [EOL] import os [EOL] import platform [EOL] import time [EOL] from subprocess import Popen , PIPE [EOL] [EOL] [EOL] import click [EOL] import feedparser [EOL] import requests [EOL] import semidbm [EOL] [EOL] from clint . textui import progress [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] folder = click . get_app_dir ( [string] ) [EOL] [EOL] CONTEXT_SETTINGS = dict ( help_option_names = [ [string] , [string] ] ) [EOL] [EOL] [EOL] @ click . group ( invoke_without_command = True , context_settings = CONTEXT_SETTINGS ) @ click . pass_context @ click . option ( [string] , default = False , is_flag = True ) @ click . option ( [string] , default = True ) def cli_base ( ctx , verbose , debug ) : [EOL] [comment] [EOL] if debug : [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] if verbose : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] if ctx . invoked_subcommand is None : [EOL] hitsquad ( ctx ) [EOL] [EOL] @ cli_base . command ( [string] ) @ click . pass_context def help2 ( ctx ) : [EOL] print ( ctx . show_help ( ) ) [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] ) def put_a_hit_out ( name ) : [EOL] [docstring] [EOL] [EOL] feed = resolve_name ( name ) . decode ( ) [EOL] d = feedparser . parse ( feed ) [EOL] [comment] [EOL] [comment] [EOL] print ( d [ [string] ] [ [string] ] ) [EOL] if d . entries [ [number] ] . enclosures : [EOL] with Database ( [string] ) as s : [EOL] if [string] in s : [EOL] print ( d . entries [ [number] ] . enclosures [ [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] url = str ( d . entries [ [number] ] . enclosures [ [number] ] [ [string] ] ) [EOL] with Database ( [string] ) as db : [EOL] if url . split ( [string] ) [ - [number] ] not in db : [EOL] with Database ( [string] ) as settings : [EOL] if [string] in settings : [EOL] dl_dir = settings [ [string] ] [EOL] else : [EOL] dl_dir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] requests_get ( url , dl_dir ) [EOL] db [ url . split ( [string] ) [ - [number] ] ] = json . dumps ( { [string] : url , [string] : time . ctime ( ) , [string] : feed } ) [EOL] growl ( [string] % d . feed . title ) [EOL] print ( [string] % d . feed . title ) [EOL] else : [EOL] growl ( [string] % d . feed . title ) [EOL] print ( [string] % d . feed . title ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] , default = [number] ) @ click . argument ( [string] ) @ click . argument ( [string] ) def selective_download ( name , oldest , newest ) : [EOL] [docstring] [EOL] name = name . encode ( [string] ) [EOL] feed = resolve_name ( name ) . decode ( ) [EOL] d = feedparser . parse ( feed ) [EOL] logger . debug ( d ) [EOL] try : [EOL] d . entries [ int ( oldest ) ] [EOL] except IndexError : [EOL] print ( [string] ) [EOL] print ( [string] % len ( d . entries ) ) [EOL] return [EOL] for url in [ q . enclosures [ [number] ] [ [string] ] for q in d . entries [ int ( newest ) : int ( oldest ) ] ] : [EOL] [comment] [EOL] url = str ( url ) [EOL] with Database ( [string] ) as db : [EOL] if url . split ( [string] ) [ - [number] ] not in db : [EOL] [comment] [EOL] with Database ( [string] ) as settings : [EOL] if [string] in settings : [EOL] dl_dir = settings [ [string] ] [EOL] else : [EOL] dl_dir = os . path . join ( os . path . expanduser ( [string] ) , [string] ) [EOL] requests_get ( url , dl_dir ) [EOL] [EOL] [EOL] def resolve_name ( name ) : [EOL] [docstring] [EOL] logger . debug ( [string] , name ) [EOL] with Database ( [string] ) as feeds , Database ( [string] ) as aliases : [EOL] if name in aliases . keys ( ) : [EOL] return feeds [ aliases [ name ] ] [EOL] elif name in feeds . keys ( ) : [EOL] return feeds [ name ] [EOL] else : [EOL] print ( [string] % name ) [EOL] return [EOL] [EOL] [EOL] def hitsquad ( ctx ) : [EOL] [docstring] [EOL] with Database ( [string] ) as feeds : [EOL] for name , feed in zip ( list ( feeds . keys ( ) ) , list ( feeds . values ( ) ) ) : [EOL] logger . debug ( [string] , name ) [EOL] ctx . invoke ( put_a_hit_out , name = name ) [EOL] if len ( list ( feeds . keys ( ) ) ) == [number] : [EOL] ctx . get_help ( ) [EOL] [EOL] [EOL] def growl ( text ) : [EOL] [docstring] [EOL] if platform . system ( ) == [string] : [EOL] import pync [EOL] pync . Notifier . notify ( text , title = [string] ) [EOL] [EOL] elif platform . system ( ) == [string] : [EOL] notified = False [EOL] try : [EOL] logger . debug ( [string] ) [EOL] import pynotify [EOL] pynotify . init ( [string] ) [EOL] n = pynotify . Notification ( [string] , text ) [EOL] n . set_timeout ( pynotify . EXPIRES_DEFAULT ) [EOL] n . show ( ) [EOL] notified = True [EOL] except ImportError : [EOL] logger . debug ( [string] ) [EOL] [comment] [EOL] if Popen ( [ [string] , [string] ] , stdout = PIPE ) . communicate ( ) [ [number] ] : [EOL] [comment] [EOL] [comment] [EOL] os . system ( [string] % str ( text ) ) [EOL] notified = True [EOL] if not notified : [EOL] try : [EOL] logger . info ( [string] ) [EOL] import gi [EOL] gi . require_version ( [string] , [string] ) [EOL] from gi . repository import Notify [EOL] Notify . init ( [string] ) [EOL] [comment] [EOL] notification = Notify . Notification . new ( [string] , text ) [EOL] notification . show ( ) [EOL] Notify . uninit ( ) [EOL] notified = True [EOL] except ImportError : [EOL] logger . exception ( ) [EOL] elif platform . system ( ) == [string] : [EOL] os . system ( [string] % str ( text ) ) [EOL] elif platform . system ( ) == [string] : [EOL] try : [EOL] from win10toast import ToastNotifier [EOL] toaster = ToastNotifier ( ) [EOL] toaster . show_toast ( text , [string] ) [EOL] [comment] [EOL] except Exception : [EOL] logger . exception ( ) [EOL] [comment] [EOL] [EOL] [EOL] def requests_get ( url , dl_dir ) : [EOL] logger . debug ( [string] , url ) [EOL] h = requests . head ( url , allow_redirects = True ) [EOL] h . raise_for_status ( ) [EOL] save = os . path . join ( dl_dir , url . split ( [string] ) [ - [number] ] ) [EOL] logger . debug ( [string] , h . headers ) [EOL] size = int ( h . headers [ [string] ] ) [EOL] if os . path . exists ( save ) and [string] in h . headers : [EOL] [comment] [EOL] pass [EOL] print ( [string] % save ) [EOL] else : [EOL] print ( [string] % url . split ( [string] ) [ - [number] ] ) [EOL] with progress . Bar ( label = [string] , expected_size = size ) as bar , open ( save , [string] ) as f : [EOL] r = requests . get ( url , stream = True ) [EOL] r . raise_for_status ( ) [EOL] counter = [number] [EOL] for chunk in r . iter_content ( [number] ) : [EOL] f . write ( chunk ) [EOL] counter += len ( chunk ) [EOL] bar . show ( counter ) [EOL] [EOL] [EOL] def add_feed ( url ) : [EOL] [docstring] [EOL] with Database ( [string] ) as db : [EOL] title = feedparser . parse ( url ) . feed . title [EOL] name = str ( title ) [EOL] db [ name ] = url [EOL] return name [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] ) def del_feed ( name ) : [EOL] [docstring] [EOL] with Database ( [string] ) as aliases , Database ( [string] ) as feeds : [EOL] if aliases [ name ] : [EOL] proper_name = aliases [ name ] [EOL] elif feeds [ name ] : [EOL] proper_name = feeds [ name ] [EOL] for k , v in aliases : [EOL] if v == proper_name : [EOL] del aliases [ k ] [EOL] [comment] [EOL] del feeds [ proper_name ] [EOL] [comment] [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] ) def del_alias ( alias ) : [EOL] [docstring] [EOL] with Database ( [string] ) as mydb : [EOL] try : [EOL] print ( [string] % ( alias , mydb . pop ( alias ) ) ) [EOL] except KeyError : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( zip ( list ( mydb . keys ( ) ) , list ( mydb . values ( ) ) ) ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] ) @ click . argument ( [string] ) def alias_feed ( name , alias ) : [EOL] [docstring] [EOL] with Database ( [string] ) as db : [EOL] if alias in db : [EOL] print ( [string] % name ) [EOL] return [EOL] else : [EOL] db [ alias ] = name [EOL] [EOL] [EOL] class Database ( object ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name ) : [EOL] super ( Database , self ) . __init__ ( ) [EOL] try : [EOL] self . db = semidbm . open ( os . path . join ( directory ( ) , name ) , [string] ) [EOL] except NotADirectoryError : [EOL] logger . error ( [string] ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self . db [EOL] [EOL] def __exit__ ( self , * args ) : [EOL] self . db . close ( ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) def list_feeds ( ) : [EOL] [docstring] [EOL] with Database ( [string] ) as feeds , Database ( [string] ) as aliases_db : [EOL] for feed in feeds : [EOL] name = feed [EOL] url = feeds [ feed ] [EOL] aliases = [ ] [EOL] for k , v in zip ( list ( aliases_db . keys ( ) ) , list ( aliases_db . values ( ) ) ) : [EOL] if v == name : [EOL] aliases . append ( k ) [EOL] if aliases : [EOL] print ( name , [string] % ( url , aliases ) ) [EOL] else : [EOL] print ( name , [string] % url ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) def export_opml ( ) : [EOL] [docstring] [EOL] with Database ( [string] ) as feeds : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] for name in list ( feeds . keys ( ) ) : [EOL] kind = feedparser . parse ( feeds [ name ] ) . version [EOL] if kind [ : [number] ] == [string] : [EOL] t = [string] [EOL] elif kind [ : [number] ] == [string] : [EOL] t = [string] [EOL] print ( [string] % ( name , feeds [ name ] , t ) ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] ) def import_opml ( url ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] from bs4 import BeautifulSoup [EOL] try : [EOL] f = open ( url ) . read ( ) [EOL] except IOError : [EOL] f = requests . get ( url ) . text [EOL] soup = BeautifulSoup ( f , [string] ) [EOL] links = soup . find_all ( [string] , type = [string] or [string] ) [EOL] [comment] [EOL] for link in links : [EOL] [comment] [EOL] add_feed ( link [ [string] ] ) [EOL] print ( [string] + link [ [string] ] ) [EOL] [EOL] [EOL] def is_feed ( url ) : [EOL] d = feedparser . parse ( url ) [EOL] if d . bozo and d . bozo_exception : [EOL] print ( [string] ) [EOL] print ( d . bozo_exception ) [EOL] return False [EOL] else : [EOL] return True [EOL] [EOL] [EOL] def directory ( ) : [EOL] [docstring] [EOL] home = os . path . expanduser ( [string] ) [EOL] if platform . system ( ) == [string] : [EOL] hitman_dir = os . path . join ( home , [string] ) [EOL] elif platform . system ( ) == [string] : [EOL] hitman_dir = os . path . join ( home , [string] , [string] , [string] ) [EOL] elif platform . system ( ) == [string] : [EOL] hitman_dir = os . path . join ( os . environ [ [string] ] , [string] ) [EOL] else : [EOL] hitman_dir = os . path . join ( home , [string] ) [EOL] if not os . path . isdir ( hitman_dir ) : [EOL] os . mkdir ( hitman_dir ) [EOL] return hitman_dir [EOL] [EOL] [EOL] @ cli_base . command ( ) @ click . option ( [string] , is_flag = True , default = False ) @ click . argument ( [string] ) def add ( url , force = False ) : [EOL] [docstring] [EOL] if url [ - [number] : ] == [string] or url [ [number] ] [ - [number] : ] == [string] : [EOL] print ( [string] % str ( add_feed ( url ) ) ) [EOL] elif is_feed ( url ) : [EOL] print ( [string] % str ( add_feed ( url ) ) ) [EOL] elif force : [EOL] print ( [string] % str ( add_feed ( url ) ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] , default = False ) @ click . argument ( [string] ) def set_settings ( key , value ) : [EOL] [docstring] [EOL] with Database ( [string] ) as settings : [EOL] if value in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] del settings [ key ] [EOL] print ( [string] ) [EOL] else : [EOL] print ( value ) [EOL] settings [ key ] = value [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ cli_base . command ( [string] ) @ click . argument ( [string] , required = False ) @ click . option ( [string] , is_flag = True ) def get_settings ( all , key ) : [EOL] [docstring] [EOL] with Database ( [string] ) as s : [EOL] if all : [EOL] for k , v in zip ( list ( s . keys ( ) ) , list ( s . values ( ) ) ) : [EOL] print ( [string] . format ( k , v ) ) [EOL] elif key : [EOL] print ( [string] . format ( key , s [ key ] ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli_base ( ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import test_hitman [EOL] import click [EOL] import os [EOL] import shutil [EOL] import tempfile [EOL] import unittest [EOL] from unittest import mock [EOL] [EOL] import pxml [EOL] from click . testing import CliRunner [EOL] from hitman import Database , export_opml , requests_get [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class ClosableDict ( dict ) : [EOL] [docstring] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ClosableDict , self ) . __init__ ( * args , ** kwargs ) [EOL] def close ( self ) : [EOL] pass [EOL] [EOL] class TestOPML ( unittest . TestCase , pxml . XmlTestMixin ) : [EOL] outOPML = [string] [EOL] inOPML = [string] [EOL] [EOL] @ mock . patch ( [string] ) def test_export ( self , patched_dbm ) : [EOL] our_d = ClosableDict ( ) [EOL] our_d [ [string] ] = [string] [EOL] patched_dbm . return_value = our_d [EOL] runner = CliRunner ( ) [EOL] result = runner . invoke ( export_opml ) [EOL] [EOL] self . assertXmlEqual ( result . output . encode ( [string] ) , self . outOPML ) [EOL] [EOL] def test_import ( self ) : [EOL] pass [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class TestDownloaders ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . dest = tempfile . mkdtemp ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_requests_get ( self , patched_bar ) : [EOL] url = [string] [EOL] requests_get ( url , self . dest ) [EOL] f = os . path . join ( self . dest , [string] ) [EOL] self . assertTrue ( os . path . exists ( f ) ) [EOL] def test_requests_resume ( self ) : [EOL] pass [EOL] def tearDown ( self ) : [EOL] shutil . rmtree ( self . dest ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $test_hitman.ClosableDict$ 0 0 0 0 0 $test_hitman.ClosableDict$ 0 0 0 0 0 0 0 0 0 0 $test_hitman.ClosableDict$ 0 $click.testing.CliRunner$ 0 0 0 0 0 $click.testing.Result$ 0 $click.testing.CliRunner$ 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0