	0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import dorent [EOL] from django . db import models [EOL] from dorent . users import models as user_models [EOL] from dorent . products import models as prod_models [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.rentlists.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.rentlists.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RentlistsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
	0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NotificationsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BoardsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import dorent [EOL] from django . db import models [EOL] from dorent . users import models as user_models [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class NoticeBoard ( TimeStampedModel ) : [EOL] [EOL] title = models . CharField ( ) [EOL] content = models . TextField ( ) [EOL] [EOL] class QuestionBoard ( TimeStampedModel ) : [EOL] [EOL] title = models . CharField ( ) [EOL] content = models . TextField ( ) [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . CASCADE ) [EOL] [EOL] class QuestionAnswer ( TimeStampedModel ) : [EOL] [EOL] question = models . ForeignKey ( QuestionBoard , on_delete = models . CASCADE ) [EOL] content = models . TextField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.NoticeBoard]$ 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.NoticeBoard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.QuestionBoard]$ 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.QuestionBoard]$ 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.QuestionBoard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.QuestionAnswer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.boards.models.QuestionAnswer]$ 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import dorent [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db . models import CharField [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] GENDER_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] profile_image = models . ImageField ( null = True ) [EOL] name = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] email = models . EmailField ( ) [EOL] exp = models . IntegerField ( default = [number] ) [EOL] bio = models . TextField ( null = True ) [EOL] phone = models . CharField ( max_length = [number] , null = True ) [EOL] gender = models . CharField ( max_length = [number] , choices = GENDER_CHOICES , null = True ) [EOL] account_bank = models . CharField ( max_length = [number] , null = True ) [EOL] account_num = models . CharField ( max_length = [number] , null = True ) [EOL] balance = models . IntegerField ( default = [number] ) [EOL] withdraw_request = models . IntegerField ( default = [number] ) [EOL] [EOL] @ property def user_level ( self ) : [EOL] if self . exp > [number] : [EOL] return [string] [EOL] if self . exp > [number] : [EOL] return [string] [EOL] if self . exp > [number] : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] @ property def rento_item_count ( self ) : [EOL] return self . rento_items . count ( ) [EOL] [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from dorent . users import views [EOL] [EOL] [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , view = views . UserSimpleProfile . as_view ( ) , name = [string] ) , path ( [string] , view = views . UserDetailProfile . as_view ( ) , name = [string] ) , ] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import dorent [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from rest_framework import status [EOL] from . import models , serializers [EOL] [EOL] [EOL] [EOL] class UploadProducts ( APIView ) : [EOL] [comment] [EOL] def post ( self , request , format = None ) : [EOL] user = request . user [EOL] serializer = serializers . UploadItemSerializer ( data = request . data ) [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( creator = user , status = [string] ) [EOL] return Response ( data = serializer . data , status = status . HTTP_201_CREATED ) [EOL] else : [EOL] return Response ( data = serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class FeedRecommendedItem ( APIView ) : [EOL] [EOL] def get ( self , request , format = None ) : [EOL] [EOL] item_list = models . Item . objects . all ( ) . order_by ( [string] ) [ : [number] ] [EOL] serializer = serializers . ItemDetailSerializer ( item_list , many = True ) [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class ItemDetail ( APIView ) : [EOL] [EOL] def get ( self , request , item_id , format = None ) : [EOL] [EOL] found_item = models . Item . objects . get ( id = item_id ) [EOL] [EOL] serializer = serializers . ItemDetailSerializer ( found_item ) [EOL] [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.UploadItemSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.UploadItemSerializer$ 0 0 0 0 0 0 $dorent.products.serializers.UploadItemSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.UploadItemSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.UploadItemSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.ItemDetailSerializer$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.ItemDetailSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.ItemDetailSerializer$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $dorent.products.serializers.ItemDetailSerializer$ 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Type [EOL] import typing [EOL] import dorent [EOL] from django . db import models [EOL] from dorent . users import models as user_models [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class CategoryId ( models . Model ) : [EOL] [EOL] cat_depth1 = models . CharField ( max_length = [number] , null = True ) [EOL] cat_depth2 = models . CharField ( max_length = [number] , null = True ) [EOL] cat_depth3 = models . CharField ( max_length = [number] , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . cat_depth1 , self . cat_depth2 , self . cat_depth3 ) [EOL] [EOL] class LocalBasicId ( models . Model ) : [EOL] [EOL] local_basic = models . CharField ( max_length = [number] , null = True ) [EOL] local_wide = models . CharField ( max_length = [number] , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . local_basic , self . local_wide ) [EOL] [EOL] class Item ( TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , related_name = [string] ) [EOL] subject = models . CharField ( max_length = [number] ) [EOL] content = models . TextField ( ) [EOL] category_id = models . ForeignKey ( CategoryId , on_delete = models . PROTECT , related_name = [string] ) [EOL] local_basic_id = models . ForeignKey ( LocalBasicId , on_delete = models . PROTECT ) [EOL] local_address = models . CharField ( max_length = [number] ) [EOL] rent_day_start = models . DateField ( ) [EOL] rent_day_end = models . DateField ( ) [EOL] cost_per_day = models . IntegerField ( ) [EOL] TYPE_STATUSES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] status = models . CharField ( max_length = [number] , choices = TYPE_STATUSES , default = [string] ) [EOL] [EOL] @ property def like_count ( self ) : [EOL] return self . likes . all ( ) . count ( ) [EOL] [EOL] @ property def comment_count ( self ) : [EOL] return self . comments . all ( ) . count ( ) [EOL] [EOL] @ property def image_count ( self ) : [EOL] return self . images . all ( ) . count ( ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] [EOL] class AddedImage ( models . Model ) : [EOL] [EOL] item = models . ForeignKey ( Item , on_delete = models . CASCADE , related_name = [string] ) [EOL] file = models . ImageField ( ) [EOL] [EOL] class Comment ( TimeStampedModel ) : [EOL] [EOL] item = models . ForeignKey ( Item , on_delete = models . CASCADE , related_name = [string] ) [EOL] message = models . TextField ( ) [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . CASCADE , null = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . creator . username , self . item . subject ) [EOL] [EOL] class Like ( TimeStampedModel ) : [EOL] [EOL] item = models . ForeignKey ( Item , on_delete = models . CASCADE , related_name = [string] ) [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . CASCADE , null = True ) [EOL] want_day_start = models . DateField ( auto_now = True ) [EOL] want_day_end = models . DateField ( auto_now = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . creator . username , self . item . subject ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.TimeStampedModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.CategoryId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.CategoryId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.CategoryId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.LocalBasicId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.LocalBasicId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.AddedImage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.AddedImage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Comment]$ 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Like]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import dorent [EOL] from rest_framework import serializers [EOL] from . import models [EOL] from dorent . users import models as user_models [EOL] [EOL] [EOL] class ItemDetailUserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = user_models . User [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] class ImageListSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . AddedImage [EOL] fields = ( [string] ) [EOL] [EOL] class CategorySerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . CategoryId [EOL] fields = ( [string] ) [EOL] [EOL] class LocalSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . LocalBasicId [EOL] fields = ( [string] ) [EOL] [EOL] [EOL] [EOL] class UserItemSimpleSerializer ( serializers . ModelSerializer ) : [EOL] images = ImageListSerializer ( many = True ) [EOL] category_id = CategorySerializer ( ) [EOL] local_basic_id = LocalSerializer ( ) [EOL] class Meta : [EOL] model = models . Item [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [comment] [EOL] class UploadItemSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Item [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] [EOL] class ItemDetailSerializer ( serializers . ModelSerializer ) : [EOL] images = ImageListSerializer ( many = True ) [EOL] creator = ItemDetailUserSerializer ( ) [EOL] category_id = CategorySerializer ( ) [EOL] local_basic_id = LocalSerializer ( ) [EOL] class Meta : [EOL] model = models . Item [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.ImageListSerializer$ 0 0 0 0 0 0 0 0 $dorent.products.serializers.CategorySerializer$ 0 0 0 0 0 $dorent.products.serializers.LocalSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dorent.products.serializers.ImageListSerializer$ 0 0 0 0 0 0 0 0 $dorent.products.serializers.ItemDetailUserSerializer$ 0 0 0 0 0 $dorent.products.serializers.CategorySerializer$ 0 0 0 0 0 $dorent.products.serializers.LocalSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Type[dorent.products.models.Item]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProductsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0