from typing import List [EOL] import typing [EOL] import codecs [EOL] import os [EOL] import sys [EOL] [EOL] from setuptools import find_packages , setup [EOL] [EOL] [EOL] def read ( fname ) : [EOL] file_path = os . path . join ( os . path . dirname ( __file__ ) , fname ) [EOL] return codecs . open ( file_path , encoding = [string] ) . read ( ) [EOL] [EOL] [EOL] with open ( [string] ) as f : [EOL] install_requires = [ line for line in f if line and line [ [number] ] not in [string] ] [EOL] [EOL] [EOL] if sys . version_info [ [number] ] == [number] : [EOL] install_requires . append ( [string] ) [EOL] [EOL] with open ( [string] ) as f : [EOL] tests_require = [ line for line in f if line and line [ [number] ] not in [string] ] [EOL] [EOL] setup ( name = [string] , version = [string] , url = [string] , license = [string] , author = [string] , author_email = [string] , description = [string] [string] , long_description = read ( [string] ) , long_description_content_type = [string] , packages = find_packages ( where = [string] ) , package_dir = { [string] : [string] } , python_requires = [string] , install_requires = install_requires , extras_require = { [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] } , tests_require = tests_require , include_package_data = True , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from konfetti import env [EOL] from konfetti . exceptions import MissingError [EOL] from konfetti . mixins import _cast_boolean [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] , [string] ) ] [EOL] [EOL] [EOL] def test_env_var_access ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . DEBUG is False [EOL] [EOL] [EOL] def test_env_var_invalid_boolean ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] config . DEBUG [EOL] [EOL] [EOL] def test_env_var_default ( config ) : [EOL] [docstring] [EOL] assert config . DEBUG is True [EOL] [EOL] [EOL] def test_env_missing_without_default ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . delenv ( [string] ) [EOL] with pytest . raises ( MissingError , match = [string] ) : [EOL] config . REQUIRED [EOL] [EOL] [EOL] def test_env_var_int_cast ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . INTEGER == [number] [EOL] [EOL] [EOL] def test_env_var_as_string ( monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert str ( env ( [string] ) ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , True ) , ( [string] , True ) , ( [string] , False ) ) ) def test_cast_boolean_valid ( value , expected ) : [EOL] assert _cast_boolean ( value ) is expected [EOL] [EOL] [EOL] def test_cast_boolean_invalid ( ) : [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] _cast_boolean ( [string] ) [EOL] [EOL] [EOL] def test_cast_not_callable ( ) : [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] env ( [string] , cast = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( { [string] : list } , [ [string] , [string] , [string] , [string] ] ) , ( { [string] : list , [string] : int } , [ [number] , [number] , [number] , [number] ] ) ) ) def test_cast_list ( config , monkeypatch , kwargs , expected ) : [EOL] config . extend_with_object ( { [string] : env ( [string] , ** kwargs ) } ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . LIST == expected [EOL] [EOL] [EOL] def test_subcast_error ( ) : [EOL] with pytest . raises ( ValueError , match = [string] [string] , ) : [EOL] env ( [string] , cast = int , subcast = int ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [number] , TypeError , [string] ) , ( [string] , ValueError , [string] ) , ( [string] , ValueError , [string] ) , ) , ) def test_name_not_string ( name , exc_type , message ) : [EOL] with pytest . raises ( exc_type , match = message ) : [EOL] env ( name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from konfetti import lazy [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] ) ] [EOL] [EOL] [EOL] def test_decorator ( config ) : [EOL] assert config . LAZY_PROPERTY == [string] [EOL] [EOL] [EOL] def test_lambda ( config ) : [EOL] assert config . LAZY_LAMBDA == [string] [EOL] [EOL] [EOL] def test_lambda_forbid_to_call ( ) : [EOL] with pytest . raises ( RuntimeError , match = [string] ) : [EOL] [EOL] @ lazy ( lambda config : [number] ) def anything ( config ) : [EOL] pass [EOL] [EOL] [EOL] def test_cast ( config ) : [EOL] assert lazy ( lambda c : [number] , cast = str ) . evaluate ( config ) == [string] [EOL] [EOL] [EOL] def test_default ( config ) : [EOL] assert lazy ( lambda c : c . UNKNOWN , default = [string] ) . evaluate ( config ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] from dotenv import load_dotenv [EOL] import pytest [EOL] [EOL] from konfetti import env , vault [EOL] from konfetti . core import get_config_option_names , Konfig [EOL] from konfetti . exceptions import MissingError , SettingsNotLoadable , SettingsNotSpecified [EOL] from konfetti . utils import import_config_module [EOL] from konfetti . vault import VaultBackend [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] ) ] [EOL] [EOL] HERE = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] def test_simple_var_access ( config ) : [EOL] [docstring] [EOL] assert [string] not in sys . modules [EOL] assert config . KEY == [string] [EOL] [EOL] [EOL] def test_forbid_setattr ( config ) : [EOL] [docstring] [EOL] with pytest . raises ( AttributeError ) : [EOL] config . KEY = [string] [EOL] [EOL] [EOL] def test_missing_variable ( config ) : [EOL] [docstring] [EOL] with pytest . raises ( MissingError , match = [string] ) : [EOL] config . MISSING [EOL] [EOL] [EOL] def test_no_reinitialization ( mocked_import_config_module ) : [EOL] [docstring] [EOL] config = Konfig ( ) [EOL] for _ in ( [number] , [number] ) : [EOL] assert config . EXAMPLE == [string] [EOL] [comment] [EOL] assert mocked_import_config_module . called is True [EOL] assert mocked_import_config_module . call_count == [number] [EOL] [EOL] [EOL] def test_config_module_not_exists ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( config . config_variable_name , [string] ) [EOL] with pytest . raises ( SettingsNotLoadable , match = [string] ) : [EOL] config . MISSING [EOL] [EOL] [EOL] def test_config_var_not_specified ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . delenv ( config . config_variable_name ) [EOL] with pytest . raises ( SettingsNotSpecified , match = [string] ) : [EOL] config . MISSING [EOL] [EOL] [EOL] def test_exception_in_config_module ( config , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setenv ( config . config_variable_name , [string] ) [EOL] with pytest . raises ( ZeroDivisionError ) : [EOL] config . MISSING [EOL] [EOL] [EOL] def test_import_single_string_module ( config , monkeypatch ) : [EOL] [comment] [EOL] monkeypatch . setenv ( config . config_variable_name , [string] ) [EOL] assert import_config_module ( config . config_variable_name ) is sys [EOL] [EOL] [EOL] def test_custom_config_variable_name ( monkeypatch ) : [EOL] [comment] [EOL] config = Konfig ( config_variable_name = [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . KEY == [string] [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) def test_require ( ) : [EOL] [docstring] [EOL] config = Konfig ( ) [EOL] with pytest . raises ( MissingError , match = [string] ) : [EOL] config . require ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) def test_require_ok ( ) : [EOL] config = Konfig ( ) [EOL] assert config . require ( [string] ) is None [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] ) def test_require_nothing ( ) : [EOL] [docstring] [EOL] config = Konfig ( ) [EOL] with pytest . raises ( RuntimeError , match = [string] ) : [EOL] config . require ( ) [EOL] [EOL] [EOL] def test_dotenv ( testdir ) : [EOL] settings = testdir . tmpdir . ensure_dir ( [string] ) [EOL] settings . ensure ( [string] ) . write ( [string] ) [EOL] config = Konfig ( dotenv = os . path . join ( str ( settings ) , [string] ) ) [EOL] assert config . FROM_DOTENV == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( True , [string] ) , ( False , [string] ) ) ) def test_dotenv_override ( testdir , monkeypatch , override , expected_value ) : [EOL] [comment] [EOL] settings = testdir . tmpdir . ensure_dir ( [string] ) [EOL] settings . ensure ( [string] ) . write ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( dotenv = os . path . join ( str ( settings ) , [string] ) , dotenv_override = override ) [EOL] assert config . FROM_DOTENV == expected_value [EOL] [EOL] [EOL] def test_dotenv_reloading ( testdir , mocker ) : [EOL] [docstring] [EOL] settings = testdir . tmpdir . ensure_dir ( [string] ) [EOL] settings . ensure ( [string] ) . write ( [string] ) [EOL] config = Konfig ( dotenv = os . path . join ( str ( settings ) , [string] ) , dotenv_override = True ) [EOL] load_env = mocker . patch ( [string] , wraps = load_dotenv ) [EOL] assert config . FROM_DOTENV == [string] [EOL] assert load_env . called [EOL] [EOL] load_env . reset_mock ( ) [EOL] assert config . FROM_DOTENV == [string] [EOL] assert not load_env . called [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , True ) , ( [string] , False ) ) ) def test_contains ( config , key , result ) : [EOL] assert ( key in config ) is result [EOL] [EOL] [EOL] def test_contains_invalid ( config ) : [EOL] [comment] [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] [number] in config [EOL] [EOL] [EOL] def test_contains_override ( ) : [EOL] config = Konfig ( strict_override = False ) [EOL] with config . override ( MISSING = [string] ) : [EOL] with config . override ( ) : [EOL] assert [string] in config [EOL] [EOL] [EOL] def test_asdict ( monkeypatch , vault_prefix , vault_addr , vault_token ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . asdict ( ) == { [string] : True , [string] : [string] , [string] : [string] , [string] : vault_addr , [string] : vault_token , [string] : [string] , [string] : { [string] : [string] , [string] : True , [string] : [string] } , [string] : { [string] : [number] , [string] : True , [string] : [string] } , } [EOL] [EOL] [EOL] def test_dictionary_access ( monkeypatch , vault_prefix ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . DICTIONARY == { [string] : [number] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] def test_from_object ( vault_prefix , vault_addr , vault_token ) : [EOL] class Test : [EOL] VALUE = [number] [EOL] VAULT_ADDR = env ( [string] ) [EOL] VAULT_TOKEN = env ( [string] ) [EOL] SECRET = vault ( [string] ) [ [string] ] [EOL] [EOL] config = Konfig . from_object ( Test , vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . asdict ( ) == { [string] : [number] , [string] : [string] , [string] : vault_addr , [string] : vault_token } [EOL] [EOL] [EOL] def test_from_mapping ( ) : [EOL] config = Konfig . from_object ( { [string] : [number] } ) [EOL] assert config . asdict ( ) == { [string] : [number] } [EOL] [EOL] [EOL] def test_from_string ( vault_prefix , vault_addr , vault_token ) : [EOL] config = Konfig . from_object ( [string] , vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . asdict ( ) == { [string] : True , [string] : [string] , [string] : [string] , [string] : vault_addr , [string] : vault_token , [string] : [string] , [string] : { [string] : [string] , [string] : True , [string] : [string] } , [string] : { [string] : [number] , [string] : True , [string] : [string] } , } [EOL] [EOL] [EOL] def test_from_json ( vault_prefix ) : [EOL] path = os . path . join ( HERE , [string] ) [EOL] config = Konfig . from_json ( path , vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . asdict ( ) == { [string] : [string] , [string] : [number] } [EOL] [EOL] [EOL] def test_extend ( ) : [EOL] from test_app . settings . single import config [EOL] [EOL] path = os . path . join ( HERE , [string] ) [EOL] config . extend_with_json ( path ) [EOL] assert config . asdict ( ) == { [string] : True , [string] : [string] , [string] : [string] , [string] : [number] } [EOL] [EOL] [EOL] def test_extend_with_object ( ) : [EOL] from test_app . settings . single import config [EOL] [EOL] config . extend_with_object ( { [string] : [string] } ) [EOL] assert config . asdict ( ) == { [string] : True , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_config_options_uniqueness ( config ) : [EOL] [docstring] [EOL] config . extend_with_object ( { [string] : [number] } ) [EOL] config . extend_with_object ( { [string] : [number] } ) [EOL] config_options = get_config_option_names ( config . _conf ) [EOL] assert len ( set ( config_options ) ) == len ( config_options ) [EOL] [EOL] [EOL] def test_single_file ( ) : [EOL] [docstring] [EOL] from test_app . settings . single import config [EOL] [EOL] assert config . asdict ( ) == { [string] : True , [string] : [string] } [EOL] [EOL] [EOL] def test_vault_override_variables ( monkeypatch , vault_prefix ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . vault . get_override_examples ( ) == { [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , } [EOL] [EOL] [EOL] def test_vault_override_variables_cache ( monkeypatch , vault_prefix ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . vault is config . vault [EOL] assert config . vault . get_override_examples ( ) is config . vault . get_override_examples ( ) [EOL] [EOL] [EOL] def test_callable_default ( config ) : [EOL] assert config . CALLABLE_DEFAULT == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] , [string] ) ] [EOL] [EOL] [EOL] def test_fixtures ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_invalid_name ( testdir ) : [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( error = [number] ) [EOL] result . stdout . fnmatch_lines ( [ [string] [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import timedelta [EOL] [EOL] import pytest [EOL] [EOL] from konfetti . cache import EMPTY , InMemoryCache [EOL] [EOL] [EOL] @ pytest . fixture def cache ( ) : [EOL] return InMemoryCache ( ) [EOL] [EOL] [EOL] @ pytest . fixture def ttl_cache ( ) : [EOL] return InMemoryCache ( ttl = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [number] , timedelta ( seconds = [number] ) ) , ( [number] , timedelta ( seconds = [number] ) ) , ( timedelta ( seconds = [number] ) , timedelta ( seconds = [number] ) ) ) , ) def test_ttl_value ( value , expected ) : [EOL] assert InMemoryCache ( ttl = value ) . ttl == expected [EOL] [EOL] [EOL] def test_getitem ( cache ) : [EOL] with pytest . raises ( KeyError ) : [EOL] cache [ [string] ] [EOL] [EOL] [EOL] def test_get ( cache ) : [EOL] assert cache . get ( [string] ) is EMPTY [EOL] [EOL] [EOL] def test_setitem ( cache ) : [EOL] cache [ [string] ] = [string] [EOL] assert cache [ [string] ] == [string] [EOL] [EOL] [EOL] def test_set ( cache ) : [EOL] cache . set ( [string] , [string] ) [EOL] assert cache [ [string] ] == [string] [EOL] [EOL] [EOL] def test_contains ( cache ) : [EOL] cache [ [string] ] = [string] [EOL] assert [string] in cache [EOL] [EOL] [EOL] def test_not_contains ( cache ) : [EOL] assert [string] not in cache [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( lambda c : c . get ( [string] ) is EMPTY , lambda c : [string] not in c ) , ids = [ [string] , [string] ] ) @ pytest . mark . freeze_time def test_ttl_cache ( ttl_cache , freezer , action ) : [EOL] ttl_cache [ [string] ] = [string] [EOL] assert [string] in ttl_cache [EOL] assert ttl_cache . get ( [string] ) == [string] [EOL] freezer . tick ( [number] ) [EOL] assert action ( ttl_cache ) [EOL] assert not ttl_cache . _data [EOL] [EOL] [EOL] @ pytest . mark . freeze_time def test_ttl_cache_getitem ( ttl_cache , freezer ) : [EOL] ttl_cache [ [string] ] = [string] [EOL] assert [string] in ttl_cache [EOL] assert ttl_cache [ [string] ] == [string] [EOL] freezer . tick ( [number] ) [EOL] with pytest . raises ( KeyError ) : [EOL] ttl_cache [ [string] ] [EOL] assert not ttl_cache . _data [EOL] [EOL] [EOL] def test_clear_cache ( cache ) : [EOL] cache [ [string] ] = [string] [EOL] assert cache [ [string] ] == [string] [EOL] cache . clear ( ) [EOL] assert [string] not in cache [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Any , Dict [EOL] import typing [EOL] from datetime import date , datetime [EOL] from decimal import Decimal [EOL] from io import BytesIO [EOL] import sys [EOL] [EOL] import hvac [EOL] import pytest [EOL] from requests import RequestException [EOL] from tenacity import retry_if_exception_type , Retrying , stop_after_attempt [EOL] [EOL] from konfetti import Konfig , vault [EOL] from konfetti . exceptions import ( InvalidSecretOverrideError , KonfettiError , MissingError , SecretKeyMissing , VaultBackendMissing , ) [EOL] from konfetti . utils import NOT_SET [EOL] from konfetti . vault import VaultBackend [EOL] from konfetti . vault . core import VaultVariable [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] , [string] ) ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] ) , ( [string] , { [string] : [string] , [string] : True , [string] : [string] } ) , ( [string] , [string] ) , ( [string] , Decimal ( [string] ) ) , ) , ) def test_vault_access ( config , option , expected ) : [EOL] assert getattr ( config , option ) == expected [EOL] [EOL] [EOL] def test_missing_key ( config ) : [EOL] [docstring] [EOL] with pytest . raises ( SecretKeyMissing , match = [string] ) : [EOL] assert config . ANOTHER_SECRET == [string] [EOL] [EOL] [EOL] def test_missing_variable ( config , vault_prefix ) : [EOL] with pytest . raises ( MissingError , match = [string] . format ( vault_prefix ) ) : [EOL] config . NOT_IN_VAULT [EOL] [EOL] [EOL] def test_missing_vault_backend ( ) : [EOL] config = Konfig ( ) [EOL] with pytest . raises ( VaultBackendMissing , match = [string] [string] , ) : [EOL] config . SECRET [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , [string] , [string] ) ) def test_get_secret ( path , config ) : [EOL] assert config . get_secret ( path ) == { [string] : [string] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( lambda x : x . center ( len ( x ) + [number] , [string] ) , lambda x : x . rjust ( len ( x ) + [number] , [string] ) , lambda x : x . ljust ( len ( x ) + [number] , [string] ) , ) , ) def test_get_secret_with_prefix ( vault_prefix , transform ) : [EOL] [docstring] [EOL] config = Konfig ( vault_backend = VaultBackend ( transform ( vault_prefix ) , try_env_first = False ) ) [EOL] assert config . get_secret ( [string] ) == { [string] : [string] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( lambda c : c . get_secret ( [string] ) , lambda c : c . SECRET ) ) def test_disable_secrets ( config , monkeypatch , action ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( RuntimeError , match = [string] , ) : [EOL] action ( config ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , ) , ( [string] , [string] ) , ( [string] , [string] ) ) ) def test_get_secret_without_vault_credentials ( config , monkeypatch , variables ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] for env_var in variables : [EOL] monkeypatch . delenv ( env_var ) [EOL] with pytest . raises ( MissingError , match = [string] ) : [EOL] config . get_secret ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [ [string] ] , { [string] : [string] , [string] : [string] } ) , ( [string] , [ ] , { [string] : [string] , [string] : [string] } ) , ) , ) def test_override_variable_name ( path , keys , expected ) : [EOL] variable = VaultVariable ( path ) [EOL] for key in keys : [EOL] variable = variable [ key ] [EOL] assert variable . override_variable_name ( ) == expected [ [string] ] [EOL] assert variable . override_variable_name ( add_keys = True ) == expected [ [string] ] [EOL] [EOL] [EOL] def test_path_not_string ( ) : [EOL] if sys . version_info [ [number] ] == [number] : [EOL] message = [string] [EOL] else : [EOL] message = [string] [EOL] with pytest . raises ( TypeError , match = message ) : [EOL] vault ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( NOT_SET , [string] , [string] ) , ( [string] , [string] , [string] ) ) ) def test_prefixes ( prefix , path , expected ) : [EOL] backend = VaultBackend ( prefix ) [EOL] assert backend . _get_full_path ( path ) == expected [EOL] [EOL] [EOL] def test_get_secret_file ( config ) : [EOL] file = config . SECRET_FILE [EOL] assert isinstance ( file , BytesIO ) [EOL] assert file . read ( ) == [string] [EOL] [EOL] [EOL] def test_override_secret ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . get_secret ( [string] ) == { [string] : [string] } [EOL] assert config . get_secret ( [string] ) [ [string] ] == [string] [EOL] [EOL] [EOL] def test_override_config_secret ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . WHOLE_SECRET == { [string] : [string] } [EOL] assert config . SECRET == [string] [EOL] assert config . NESTED_SECRET == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) @ pytest . mark . parametrize ( [string] , ( lambda config : config . get_secret ( [string] ) , lambda config : config . SECRET ) ) def test_override_invalid ( config , monkeypatch , data , action ) : [EOL] monkeypatch . setenv ( [string] , data ) [EOL] with pytest . raises ( InvalidSecretOverrideError , match = [string] ) : [EOL] action ( config ) [EOL] [EOL] [EOL] def test_default_config ( config ) : [EOL] assert config . DEFAULT == [string] [EOL] [EOL] [EOL] def test_override_with_default ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . DEFAULT == [string] [EOL] [EOL] [EOL] def test_disable_defaults ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( SecretKeyMissing ) : [EOL] config . DEFAULT [EOL] [EOL] [EOL] @ pytest . fixture def config_with_cached_vault ( vault_prefix ) : [EOL] return Konfig ( vault_backend = VaultBackend ( vault_prefix , cache_ttl = [number] ) ) [EOL] [EOL] [EOL] SECRET_DATA = { [string] : [string] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] def test_cold_cache ( config_with_cached_vault , vault_prefix ) : [EOL] [comment] [EOL] assert not config_with_cached_vault . vault_backend . cache . _data [EOL] assert config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] [comment] [EOL] data = config_with_cached_vault . vault_backend . cache . _data [EOL] [comment] [EOL] assert list ( data ) == [ vault_prefix + [string] ] [EOL] assert data [ vault_prefix + [string] ] [ [string] ] == SECRET_DATA [EOL] [EOL] [EOL] def test_warm_cache ( config_with_cached_vault , vault_prefix , mocker ) : [EOL] test_cold_cache ( config_with_cached_vault , vault_prefix ) [EOL] vault = mocker . patch ( [string] ) [EOL] [comment] [EOL] assert config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert config_with_cached_vault . vault_backend . cache [ vault_prefix + [string] ] == SECRET_DATA [EOL] [EOL] assert not vault . called [EOL] [EOL] [EOL] @ pytest . mark . freeze_time def test_no_recaching ( config_with_cached_vault , mocker , freezer ) : [EOL] assert config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] freezer . tick ( [number] ) [EOL] vault = mocker . patch ( [string] ) [EOL] assert config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert not vault . called [EOL] freezer . tick ( [number] ) [EOL] assert config_with_cached_vault . get_secret ( [string] ) [EOL] assert vault . called [EOL] [EOL] [EOL] def skip_if_python ( version ) : [EOL] return pytest . mark . skipif ( sys . version_info [ [number] ] == version , reason = [string] . format ( version ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( pytest . param ( [number] ** [number] , ValueError , [string] , marks = skip_if_python ( [number] ) ) , pytest . param ( [number] ** [number] , TypeError , [string] , marks = skip_if_python ( [number] ) ) , ( [string] , TypeError , [string] ) , ) , ) def test_ttl ( ttl , exc_type , message ) : [EOL] with pytest . raises ( exc_type , match = message ) : [EOL] VaultBackend ( [string] , cache_ttl = ttl ) [EOL] [EOL] [EOL] def test_cast_decimal_warning ( config ) : [EOL] with pytest . warns ( RuntimeWarning , match = [string] ) : [EOL] config . FLOAT_DECIMAL [EOL] [EOL] [EOL] def test_cast_date ( config ) : [EOL] assert config . DATE == date ( year = [number] , month = [number] , day = [number] ) [EOL] [EOL] [EOL] def test_cast_datetime ( config ) : [EOL] assert config . DATETIME == datetime ( year = [number] , month = [number] , day = [number] , hour = [number] , minute = [number] , second = [number] ) [EOL] [EOL] [EOL] def test_retry ( config , mocker ) : [EOL] mocker . patch ( [string] , side_effect = RequestException ) [EOL] m = mocker . patch . object ( config . vault_backend , [string] , wraps = config . vault_backend . _call ) [EOL] with pytest . raises ( RequestException ) : [EOL] config . SECRET [EOL] assert m . called is True [EOL] assert m . call_count == [number] [EOL] [EOL] [EOL] def test_retry_object ( vault_prefix , mocker ) : [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix , retry = Retrying ( retry = retry_if_exception_type ( KonfettiError ) , reraise = True , stop = stop_after_attempt ( [number] ) ) , ) ) [EOL] mocker . patch ( [string] , side_effect = KonfettiError ) [EOL] m = mocker . patch . object ( config . vault_backend , [string] , wraps = config . vault_backend . _call ) [EOL] with pytest . raises ( KonfettiError ) : [EOL] config . SECRET [EOL] assert m . called is True [EOL] assert m . call_count == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) def test_userpass ( config , monkeypatch , token ) : [EOL] if token == [string] : [EOL] monkeypatch . delenv ( [string] ) [EOL] else : [EOL] monkeypatch . setenv ( [string] , token ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert config . SECRET == [string] [EOL] [EOL] [EOL] def test_invalid_token ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( hvac . exceptions . Forbidden ) : [EOL] config . SECRET [EOL] [EOL] [EOL] def test_userpass_cache ( config_with_cached_vault , vault_prefix , mocker , monkeypatch ) : [EOL] monkeypatch . delenv ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] test_cold_cache ( config_with_cached_vault , vault_prefix ) [EOL] vault = mocker . patch ( [string] ) [EOL] [comment] [EOL] assert config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert config_with_cached_vault . vault_backend . cache [ vault_prefix + [string] ] == SECRET_DATA [EOL] [EOL] assert not vault . called [EOL] [EOL] [EOL] def test_userpass_token_cache ( config , monkeypatch , mocker ) : [EOL] monkeypatch . delenv ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] [comment] [EOL] assert config . vault_backend . _token is NOT_SET [EOL] assert config . SECRET == [string] [EOL] assert config . vault_backend . _token is not NOT_SET [EOL] [comment] [EOL] auth = mocker . patch ( [string] ) [EOL] first_token = config . vault_backend . _token [EOL] assert config . IS_SECRET is True [EOL] assert auth . called is False [EOL] assert config . vault_backend . _token == first_token [EOL] [EOL] [EOL] def test_vault_var_reusage ( vault_prefix , vault_addr , vault_token ) : [EOL] variable = vault ( [string] ) [EOL] [EOL] class Test : [EOL] VAULT_ADDR = vault_addr [EOL] VAULT_TOKEN = vault_token [EOL] SECRET = variable [ [string] ] [EOL] IS_SECRET = variable [ [string] ] [EOL] [EOL] config = Konfig . from_object ( Test , vault_backend = VaultBackend ( vault_prefix ) ) [EOL] assert config . asdict ( ) == { [string] : [string] , [string] : True , [string] : vault_addr , [string] : vault_token , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Anytyping.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from konfetti . utils import flatten_dict , rebuild_dict [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( { } , [ ] ) , ( { [string] : [number] } , [ ( [ [string] ] , [number] ) ] ) , ( { [string] : { [string] : [number] } } , [ ( [ [string] , [string] ] , [number] ) ] ) ) ) def test_flatten_dict ( value , expected ) : [EOL] assert list ( flatten_dict ( value ) ) == expected [EOL] [EOL] [EOL] def callback ( value ) : [EOL] return value + [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( { } , { } ) , ( { [string] : [number] } , { [string] : [number] } ) , ( { [string] : { [string] : [number] } } , { [string] : { [string] : [number] } } ) ) ) def test_rebuild_dict ( value , expected ) : [EOL] assert rebuild_dict ( value , callback ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import sys [EOL] [EOL] import pytest [EOL] [EOL] from konfetti import Konfig [EOL] from konfetti . exceptions import ForbiddenOverrideError [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] ) ] [EOL] [EOL] [EOL] skip_if_py2 = pytest . mark . skipif ( sys . version_info [ [number] ] == [number] , reason = [string] ) [EOL] [EOL] [EOL] def test_override_function ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_vault_secret ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_method ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_class ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_class_with_setup ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_override_unittest_class ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_unittest_class_custom_setup ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] result . stdout . fnmatch_lines ( [ [string] ] ) [EOL] [EOL] [EOL] def test_override_custom_setup_error ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( [string] ) [EOL] result . assert_outcomes ( passed = [number] , error = [number] ) [EOL] assert [string] not in result . stdout . _log_text [EOL] [EOL] [EOL] @ skip_if_py2 def test_async_test ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_override_unknown_type ( config ) : [EOL] [docstring] [EOL] with pytest . raises ( TypeError , match = [string] ) : [EOL] config . override ( INTEGER = [number] ) ( [number] ) [EOL] [EOL] [EOL] def test_override_unknown_option ( ) : [EOL] [docstring] [EOL] config = Konfig ( strict_override = True ) [EOL] with pytest . raises ( ForbiddenOverrideError , match = [string] , ) : [EOL] with config . override ( NOT_EXIST = [number] ) : [EOL] pass [EOL] [EOL] [EOL] def test_strict_override_valid ( ) : [EOL] config = Konfig ( strict_override = True ) [EOL] with config . override ( INTEGER = [number] ) : [EOL] assert config . INTEGER == [number] [EOL] [EOL] [EOL] def test_override_context_manager ( config ) : [EOL] [docstring] [EOL] with config . override ( INTEGER = [number] ) : [EOL] assert config . INTEGER == [number] [EOL] assert config . INTEGER == [number] [EOL] [EOL] [EOL] def test_override_context_manager_nested ( testdir ) : [EOL] [docstring] [EOL] testdir . makepyfile ( [string] ) [EOL] result = testdir . runpytest ( ) [EOL] result . assert_outcomes ( passed = [number] ) [EOL] [EOL] [EOL] def test_no_setup_on_override ( mocked_import_config_module ) : [EOL] [docstring] [EOL] config = Konfig ( strict_override = False ) [EOL] with config . override ( EXAMPLE = [string] ) : [EOL] assert config . EXAMPLE == [string] [EOL] mocked_import_config_module . assert_not_called ( ) [EOL] [EOL] [EOL] def test_setup_on_override ( mocked_import_config_module ) : [EOL] [docstring] [EOL] config = Konfig ( ) [EOL] with config . override ( SOMETHING = [string] ) : [EOL] assert config . EXAMPLE == [string] [EOL] [comment] [EOL] assert mocked_import_config_module . called is True [EOL] assert mocked_import_config_module . call_count >= [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import List , Union , Any , Dict [EOL] import typing [EOL] from flask import Flask [EOL] import pytest [EOL] [EOL] from konfetti import Konfig , VaultBackend [EOL] from konfetti . contrib . flask import FlaskKonfig [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] , [string] , [string] ) ] [EOL] [EOL] [EOL] @ pytest . fixture def app ( ) : [EOL] return Flask ( [string] ) [EOL] [EOL] [EOL] CUSTOM_KWARGS = { [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] def test_init_app ( app ) : [EOL] [comment] [EOL] assert not app . config [ [string] ] [EOL] config = FlaskKonfig ( ) [EOL] config . init_app ( app , ** CUSTOM_KWARGS ) [EOL] assert_config ( app . config ) [EOL] [comment] [EOL] app . config . from_envvar [EOL] assert not app . config [ [string] ] [EOL] [EOL] [EOL] def test_init ( app ) : [EOL] FlaskKonfig ( app , ** CUSTOM_KWARGS ) [EOL] assert_config ( app . config ) [EOL] [EOL] [EOL] def test_config_instance ( app , vault_prefix ) : [EOL] config = Konfig ( vault_backend = VaultBackend ( vault_prefix ) , strict_override = False ) [EOL] FlaskKonfig ( app , konfig = config , ** CUSTOM_KWARGS ) [EOL] assert_config ( app . config ) [EOL] assert app . config . SECRET == [string] [EOL] [EOL] [EOL] def assert_config ( config ) : [EOL] [comment] [EOL] [comment] [EOL] assert config . KEY == [string] [EOL] assert config [ [string] ] == [string] [EOL] [comment] [EOL] assert config . SESSION_COOKIE_NAME == [string] [EOL] assert config [ [string] ] == [string] [EOL] [comment] [EOL] assert config . SOMETHING == [number] [EOL] assert config [ [string] ] == [number] [EOL] [comment] [EOL] assert config . SERVER_NAME == [string] [EOL] assert config [ [string] ] == [string] [EOL] [comment] [EOL] config [ [string] ] = [string] [EOL] assert config [ [string] ] == [string] [EOL] [comment] [EOL] assert [string] in config [EOL] assert [string] not in config [EOL] [comment] [EOL] assert config . get ( [string] ) == [string] [EOL] assert config . get ( [string] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , Literal , Any , List , Dict [EOL] import typing [EOL] import _importlib_modulespec [EOL] import typing_extensions [EOL] import os [EOL] import sys [EOL] from types import ModuleType [EOL] import uuid [EOL] [EOL] import hvac [EOL] import pytest [EOL] [EOL] from konfetti . core import Konfig [EOL] from konfetti . vault import VaultBackend [EOL] [EOL] pytest_plugins = [ [string] ] [EOL] [EOL] VAULT_ADDR = os . getenv ( [string] , [string] ) [EOL] VAULT_TOKEN = os . getenv ( [string] , [string] ) [EOL] [EOL] CURRENT_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def vault_prefix ( ) : [EOL] [docstring] [EOL] return [string] + str ( uuid . uuid4 ( ) . hex ) [EOL] [EOL] [EOL] @ pytest . fixture def config ( request , vault_prefix ) : [EOL] marker = request . node . get_closest_marker ( [string] ) [EOL] if marker : [EOL] from konfetti . vault import AsyncVaultBackend as vault_backend [EOL] else : [EOL] vault_backend = VaultBackend [EOL] yield Konfig ( vault_backend = vault_backend ( vault_prefix ) ) [EOL] sys . modules . pop ( [string] , None ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def vault_addr ( ) : [EOL] return VAULT_ADDR [EOL] [EOL] [EOL] @ pytest . fixture ( ) def vault_token ( ) : [EOL] return VAULT_TOKEN [EOL] [EOL] [EOL] @ pytest . fixture def env ( monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , VAULT_ADDR ) [EOL] monkeypatch . setenv ( [string] , VAULT_TOKEN ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def settings ( testdir , env , vault_prefix ) : [EOL] [docstring] [EOL] settings = testdir . mkdir ( [string] ) [EOL] settings . ensure ( [string] ) . write ( [string] . format ( vault_prefix ) ) [EOL] with open ( os . path . join ( CURRENT_DIR , [string] ) ) as fd : [EOL] settings . ensure ( [string] ) . write ( fd . read ( ) ) [EOL] return settings [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True , scope = [string] ) def vault_data ( vault_prefix ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] vault = hvac . Client ( url = VAULT_ADDR , token = VAULT_TOKEN ) [EOL] [EOL] [comment] [EOL] try : [EOL] vault . sys . enable_auth_method ( [string] ) [EOL] vault . sys . create_or_update_policy ( name = [string] , policy = [string] ) [EOL] vault . create_userpass ( username = [string] , password = [string] , policies = [string] ) [EOL] except hvac . exceptions . InvalidRequest as exc : [EOL] pass [EOL] [EOL] data = { vault_prefix + [string] : { [string] : [string] , [string] : True , [string] : [string] } , vault_prefix + [string] : { [string] : [number] , [string] : [string] , [string] : [string] } , vault_prefix + [string] : { [string] : { [string] : [string] } } , vault_prefix + [string] : { [string] : [string] } , } [EOL] for key , values in data . items ( ) : [EOL] vault . write ( key , ** values ) [EOL] yield [EOL] for key in data : [EOL] vault . delete ( key ) [EOL] [EOL] [EOL] @ pytest . fixture def mocked_import_config_module ( mocker ) : [EOL] module = ModuleType ( [string] ) [EOL] module . EXAMPLE = [string] [EOL] module . SOMETHING = [string] [EOL] return mocker . patch ( [string] , return_value = module ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Union , Any , Dict [EOL] import typing [EOL] [docstring] [EOL] from decimal import Decimal [EOL] from typing import Coroutine [EOL] [EOL] import aiohttp [EOL] import pytest [EOL] from tenacity import AsyncRetrying , retry_if_exception_type , stop_after_attempt [EOL] [EOL] from konfetti import env , Konfig [EOL] from konfetti . _async import make_async_callback , make_simple_coro [EOL] from konfetti . exceptions import KonfettiError , MissingError , SecretKeyMissing [EOL] from konfetti . utils import NOT_SET [EOL] from konfetti . vault import AsyncVaultBackend [EOL] [EOL] pytestmark = [ pytest . mark . asyncio , pytest . mark . async_vault , pytest . mark . usefixtures ( [string] , [string] ) ] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] ) , ( [string] , { [string] : [string] , [string] : True , [string] : [string] } ) , ( [string] , [string] ) , ( [string] , Decimal ( [string] ) ) , ) , ) async def test_async_vault_access ( config , option , expected ) : [EOL] [comment] [EOL] variable = getattr ( config , option ) [EOL] assert isinstance ( variable , Coroutine ) [EOL] assert await variable == expected [EOL] [EOL] [EOL] async def test_missing_key ( config ) : [EOL] [docstring] [EOL] with pytest . raises ( SecretKeyMissing , match = [string] ) : [EOL] await config . ANOTHER_SECRET [EOL] [EOL] [EOL] async def test_missing_variable ( config , vault_prefix ) : [EOL] with pytest . raises ( MissingError , match = [string] . format ( vault_prefix ) ) : [EOL] await config . NOT_IN_VAULT [EOL] [EOL] [EOL] async def test_get_secret ( config ) : [EOL] assert await config . get_secret ( [string] ) == { [string] : [string] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( lambda c : c . get_secret ( [string] ) , lambda c : c . SECRET ) ) async def test_disable_secrets ( config , monkeypatch , action ) : [EOL] [comment] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( RuntimeError , match = [string] , ) : [EOL] await action ( config ) [EOL] [EOL] [EOL] async def test_override_with_default ( config , monkeypatch ) : [EOL] [comment] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert await config . DEFAULT == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) async def test_get_full_url ( url ) : [EOL] [comment] [EOL] from konfetti . vault . asynchronous import _get_full_url [EOL] [EOL] assert _get_full_url ( url , [string] ) == [string] [EOL] [EOL] [EOL] async def test_make_async_callback ( ) : [EOL] async def coro ( ) : [EOL] return [number] [EOL] [EOL] def callback ( value ) : [EOL] return value + [number] [EOL] [EOL] assert await make_async_callback ( coro ( ) , callback ) == [number] [EOL] [EOL] [EOL] async def test_make_simple_coro ( ) : [EOL] coro = make_simple_coro ( [number] ) [EOL] assert isinstance ( coro , Coroutine ) [EOL] assert await coro == [number] [EOL] [EOL] [EOL] @ pytest . fixture def config_with_cached_vault ( vault_prefix ) : [EOL] return Konfig ( vault_backend = AsyncVaultBackend ( vault_prefix , cache_ttl = [number] ) ) [EOL] [EOL] [EOL] SECRET_DATA = { [string] : [string] , [string] : True , [string] : [string] } [EOL] [EOL] [EOL] async def test_cold_cache ( config_with_cached_vault , vault_prefix , mocker ) : [EOL] [comment] [EOL] assert await config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] [comment] [EOL] assert config_with_cached_vault . vault_backend . cache . _data == { vault_prefix + [string] : { [string] : SECRET_DATA , [string] : mocker . ANY } } [EOL] [EOL] [EOL] async def test_warm_cache ( config_with_cached_vault , vault_prefix , mocker ) : [EOL] await test_cold_cache ( config_with_cached_vault , vault_prefix , mocker ) [EOL] vault = mocker . patch ( [string] ) [EOL] [comment] [EOL] assert await config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert config_with_cached_vault . vault_backend . cache [ vault_prefix + [string] ] == SECRET_DATA [EOL] [EOL] assert not vault . called [EOL] [EOL] [EOL] @ pytest . mark . freeze_time async def test_no_recaching ( config_with_cached_vault , mocker , freezer , vault_token ) : [EOL] [comment] [EOL] assert await config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] freezer . tick ( [number] ) [EOL] async with aiohttp . ClientSession ( headers = { [string] : vault_token } ) as session : [EOL] vault = mocker . patch ( [string] , wraps = session . get ) [EOL] assert await config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert not vault . called [EOL] freezer . tick ( [number] ) [EOL] assert await config_with_cached_vault . get_secret ( [string] ) [EOL] assert vault . called [EOL] [EOL] [EOL] async def test_asdict ( monkeypatch , vault_prefix , vault_addr , vault_token ) : [EOL] [comment] [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] config = Konfig ( vault_backend = AsyncVaultBackend ( vault_prefix ) ) [EOL] assert await config . asdict ( ) == { [string] : True , [string] : [string] , [string] : [string] , [string] : vault_addr , [string] : vault_token , [string] : [string] , [string] : { [string] : [string] , [string] : True , [string] : [string] } , [string] : { [string] : True , [string] : [number] , [string] : [string] } , } [EOL] [EOL] [EOL] async def test_asdict_shortcut ( vault_prefix , vault_addr , vault_token ) : [EOL] [comment] [EOL] [EOL] class TestSettings : [EOL] SECRET = [number] [EOL] VAULT_ADDR = env ( [string] ) [EOL] VAULT_TOKEN = env ( [string] ) [EOL] [EOL] config = Konfig . from_object ( TestSettings , vault_backend = AsyncVaultBackend ( vault_prefix ) ) [EOL] assert await config . asdict ( ) == { [string] : [number] , [string] : vault_addr , [string] : vault_token } [EOL] [EOL] [EOL] async def test_retry ( config , mocker ) : [EOL] mocker . patch ( [string] , side_effect = aiohttp . ClientConnectionError ) [EOL] m = mocker . patch . object ( config . vault_backend , [string] , wraps = config . vault_backend . _call ) [EOL] with pytest . raises ( aiohttp . ClientConnectionError ) : [EOL] await config . SECRET [EOL] assert m . called is True [EOL] assert m . call_count == [number] [EOL] [EOL] [EOL] async def test_retry_object ( vault_prefix , mocker ) : [EOL] config = Konfig ( vault_backend = AsyncVaultBackend ( vault_prefix , retry = AsyncRetrying ( retry = retry_if_exception_type ( KonfettiError ) , reraise = True , stop = stop_after_attempt ( [number] ) ) , ) ) [EOL] mocker . patch ( [string] , side_effect = KonfettiError ) [EOL] m = mocker . patch . object ( config . vault_backend , [string] , wraps = config . vault_backend . _call ) [EOL] with pytest . raises ( KonfettiError ) : [EOL] await config . SECRET [EOL] assert m . called is True [EOL] assert m . call_count == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] ) ) async def test_userpass ( config , monkeypatch , token ) : [EOL] if token == [string] : [EOL] monkeypatch . delenv ( [string] ) [EOL] else : [EOL] monkeypatch . setenv ( [string] , token ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] assert await config . SECRET == [string] [EOL] [EOL] [EOL] async def test_invalid_token ( config , monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] with pytest . raises ( aiohttp . client_exceptions . ClientResponseError ) : [EOL] await config . SECRET [EOL] [EOL] [EOL] async def test_userpass_cache ( config_with_cached_vault , vault_prefix , mocker , monkeypatch ) : [EOL] monkeypatch . delenv ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] await test_cold_cache ( config_with_cached_vault , vault_prefix , mocker ) [EOL] vault = mocker . patch ( [string] ) [EOL] [comment] [EOL] assert await config_with_cached_vault . get_secret ( [string] ) == SECRET_DATA [EOL] assert config_with_cached_vault . vault_backend . cache [ vault_prefix + [string] ] == SECRET_DATA [EOL] [EOL] assert not vault . called [EOL] [EOL] [EOL] async def test_userpass_token_cache ( config , monkeypatch , mocker ) : [EOL] monkeypatch . delenv ( [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] [comment] [EOL] auth = mocker . patch ( [string] , wraps = config . vault_backend . _auth_userpass ) [EOL] assert config . vault_backend . _token is NOT_SET [EOL] assert await config . SECRET == [string] [EOL] assert auth . called is True [EOL] assert auth . call_count == [number] [EOL] assert config . vault_backend . _token is not NOT_SET [EOL] [comment] [EOL] auth = mocker . patch ( [string] , wraps = config . vault_backend . _auth_userpass ) [EOL] first_token = config . vault_backend . _token [EOL] assert await config . IS_SECRET is True [EOL] assert auth . called is False [EOL] assert config . vault_backend . _token == first_token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from konfetti import env , vault , VaultBackend [EOL] from konfetti . contrib . django import install [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] DEBUG = env ( [string] , default = True , cast = bool ) [EOL] REQUIRED = env ( [string] ) [EOL] [EOL] VAULT_ADDR = env ( [string] ) [EOL] VAULT_TOKEN = env ( [string] ) [EOL] [EOL] SECRET = vault ( [string] ) [ [string] ] [EOL] [EOL] config = install ( __name__ , vault_backend = VaultBackend ( os . getenv ( [string] ) ) ) [EOL] config . extend_with_object ( { [string] : [number] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . conf . urls import url [EOL] from django . http import HttpResponse , JsonResponse [EOL] [EOL] [EOL] def index ( request ) : [EOL] return JsonResponse ( settings . asdict ( ) ) [EOL] [EOL] [EOL] def ping ( request ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] [EOL] urlpatterns = ( url ( [string] , index ) , url ( [string] , ping ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
ETERNITY = [number] / [number] [EOL]	$builtins.float$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import date , datetime [EOL] from decimal import Decimal [EOL] [EOL] from konfetti import env , lazy , vault , vault_file [EOL] [EOL] KEY = [string] [EOL] DEBUG = env ( [string] , default = True , cast = bool ) [EOL] REQUIRED = env ( [string] ) [EOL] INTEGER = env ( [string] , default = [number] , cast = int ) [EOL] FROM_DOTENV = env ( [string] , default = [string] ) [EOL] [EOL] SECRET = vault ( [string] ) [ [string] ] [EOL] ANOTHER_SECRET = vault ( [string] ) [ [string] ] [EOL] WHOLE_SECRET = vault ( [string] ) [EOL] NESTED_SECRET = vault ( [string] ) [ [string] ] [ [string] ] [EOL] SECRET_FILE = vault_file ( [string] ) [ [string] ] [EOL] DEFAULT = vault ( [string] , default = [string] ) [ [string] ] [EOL] [EOL] [EOL] def get_default ( ) : [EOL] return [number] [EOL] [EOL] [EOL] CALLABLE_DEFAULT = env ( [string] , default = get_default ) [EOL] [EOL] IS_SECRET = vault ( [string] , cast = bool ) [ [string] ] [EOL] DECIMAL = vault ( [string] , cast = Decimal ) [ [string] ] [EOL] FLOAT_DECIMAL = vault ( [string] , cast = Decimal ) [ [string] ] [EOL] DATE = vault ( [string] , cast = date ) [ [string] ] [EOL] DATETIME = vault ( [string] , cast = datetime ) [ [string] ] [EOL] [EOL] NOT_IN_VAULT = vault ( [string] ) [EOL] [EOL] LAZY_LAMBDA = lazy ( lambda config : config . KEY + [string] + config . SECRET + [string] + config . REQUIRED ) [EOL] [EOL] [EOL] @ lazy ( [string] ) def lazy_property ( config ) : [EOL] return config . KEY + [string] + config . SECRET + [string] + config . REQUIRED [EOL] [EOL] [EOL] VAULT_ADDR = env ( [string] ) [EOL] VAULT_TOKEN = env ( [string] ) [EOL] VAULT_USERNAME = env ( [string] , default = None ) [EOL] VAULT_PASSWORD = env ( [string] , default = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from konfetti import env , Konfig [EOL] [EOL] KEY = [string] [EOL] DEBUG = env ( [string] , default = True , cast = bool ) [EOL] [EOL] config = Konfig . from_object ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from konfetti import env , vault [EOL] [EOL] KEY = [string] [EOL] DEBUG = env ( [string] , default = True , cast = bool ) [EOL] SECRET = vault ( [string] ) [ [string] ] [EOL] WHOLE_SECRET = vault ( [string] ) [EOL] NESTED_SECRET = vault ( [string] ) [ [string] ] [ [string] ] [EOL] VAULT_ADDR = env ( [string] ) [EOL] VAULT_TOKEN = env ( [string] ) [EOL] [EOL] not_a_config_option = [number] [EOL] [EOL] DICTIONARY = { [string] : [number] , [string] : vault ( [string] ) [ [string] ] , [string] : env ( [string] , default = True , cast = bool ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import requests [EOL] import typing [EOL] import subprocess [EOL] import socket [EOL] from contextlib import closing , contextmanager [EOL] import os [EOL] import signal [EOL] import socket [EOL] from subprocess import Popen [EOL] import time [EOL] [EOL] import django [EOL] from django . conf import settings [EOL] from django . test import override_settings [EOL] import pytest [EOL] import requests [EOL] [EOL] pytestmark = [ pytest . mark . usefixtures ( [string] , [string] , [string] ) ] [EOL] [EOL] PATH = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] def get_free_port ( ) : [EOL] sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) [EOL] sock . bind ( ( [string] , [number] ) ) [EOL] with closing ( sock ) : [EOL] return str ( sock . getsockname ( ) [ [number] ] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def django_setup ( vault_prefix ) : [EOL] os . environ [ [string] ] = vault_prefix [EOL] os . environ [ [string] ] = [string] [EOL] django . setup ( ) [EOL] yield [EOL] os . environ . pop ( [string] , None ) [EOL] [EOL] [EOL] def test_config ( ) : [EOL] [comment] [EOL] assert settings . DEBUG [EOL] [comment] [EOL] assert settings . SECRET_KEY == [string] [EOL] [comment] [EOL] assert settings . SECRET == [string] [EOL] [comment] [EOL] assert settings . KEY == [number] [EOL] [comment] [EOL] assert settings . ALLOWED_HOSTS == [ ] [EOL] [EOL] [EOL] def test_access_methods ( ) : [EOL] [docstring] [EOL] with pytest . raises ( RuntimeError , match = [string] ) : [EOL] settings . configure ( ) [EOL] [EOL] [EOL] def test_settings_access ( ) : [EOL] [docstring] [EOL] [comment] [EOL] from django . conf import settings [EOL] [EOL] assert settings . SECRET == [string] [EOL] [EOL] [EOL] @ override_settings ( ALLOWED_HOSTS = [ [string] ] ) def test_override_global ( ) : [EOL] [comment] [EOL] assert settings . ALLOWED_HOSTS == [ [string] ] [EOL] [EOL] [EOL] @ override_settings ( SECRET_KEY = [string] ) def test_override_local ( ) : [EOL] [comment] [EOL] assert settings . SECRET_KEY == [string] [EOL] [EOL] [EOL] def test_override_vault ( ) : [EOL] [docstring] [EOL] assert settings . SECRET == [string] [EOL] with override_settings ( SECRET = [string] , ALLOWED_HOSTS = [ [string] ] ) : [EOL] assert settings . SECRET == [string] [EOL] assert settings . ALLOWED_HOSTS == [ [string] ] [EOL] assert settings . SECRET == [string] [EOL] [EOL] [EOL] def test_konfetti_override ( ) : [EOL] [docstring] [EOL] assert settings . SECRET == [string] [EOL] with settings . override ( SECRET = [string] , ALLOWED_HOSTS = [ [string] ] ) : [EOL] assert settings . SECRET == [string] [EOL] assert settings . ALLOWED_HOSTS == [ [string] ] [EOL] assert settings . SECRET == [string] [EOL] [EOL] [EOL] @ pytest . fixture def django_server ( monkeypatch , vault_data , vault_prefix ) : [EOL] monkeypatch . setenv ( [string] , PATH ) [EOL] port = get_free_port ( ) [EOL] with run ( ( [string] , [string] , port , [string] ) , lambda : wait_until ( port ) ) : [EOL] yield port [EOL] [EOL] [EOL] @ contextmanager def run ( args , preparation ) : [EOL] popen = Popen ( args , env = os . environ , close_fds = True , preexec_fn = os . setsid ) [EOL] preparation ( ) [EOL] yield [EOL] try : [EOL] [comment] [EOL] os . killpg ( os . getpgid ( popen . pid ) , signal . SIGTERM ) [EOL] except OSError : [EOL] pass [EOL] [EOL] [EOL] def wait_until ( port , max_timeout = [number] ) : [EOL] start = time . time ( ) [EOL] while time . time ( ) - start <= max_timeout : [EOL] try : [EOL] requests . get ( [string] . format ( port ) ) [EOL] return True [EOL] except requests . exceptions . ConnectionError : [EOL] pass [EOL] raise RuntimeError [EOL] [EOL] [EOL] def test_django_runserver ( django_server , vault_addr , vault_token ) : [EOL] response = requests . get ( [string] . format ( django_server ) ) [EOL] assert response . json ( ) == { [string] : True , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : vault_addr , [string] : vault_token , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0