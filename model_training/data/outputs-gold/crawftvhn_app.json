from typing import Any [EOL] import datetime [EOL] import typing [EOL] import boto3 [EOL] from decouple import config [EOL] import papermill as pm [EOL] import datetime [EOL] from prefect import Flow , task [EOL] from prefect . schedules import CronSchedule [EOL] [EOL] client = boto3 . client ( [string] , aws_access_key_id = config ( [string] ) , aws_secret_access_key = config ( [string] ) , ) [EOL] [EOL] [EOL] @ task def backfill ( ) : [EOL] now = datetime . datetime . now ( ) [EOL] [EOL] pm . execute_notebook ( [string] , [string] + str ( now . year ) + [string] + str ( now . month ) + [string] + str ( now . day ) + [string] , ) [EOL] [EOL] [EOL] @ task def frontfill ( ) : [EOL] now = datetime . datetime . now ( ) [EOL] pm . execute_notebook ( [string] , [string] + str ( now . year ) + [string] + str ( now . month ) + [string] + str ( now . day ) + [string] , ) [EOL] [EOL] [EOL] @ task def test_changes ( ) : [EOL] [EOL] now = datetime . datetime . now ( ) [EOL] pm . execute_notebook ( [string] , [string] + str ( now . year ) + [string] + str ( now . month ) + [string] + str ( now . day ) + [string] , ) [EOL] [EOL] [EOL] with Flow ( [string] , schedule = CronSchedule ( [string] ) ) as flow : [EOL] [EOL] frontfill = frontfill ( ) [EOL] backfill = backfill ( ) [EOL] test_changes = test_changes ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] flow . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from app import app [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import hn_comments [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from sqlalchemy import func [EOL] [EOL] DB = SQLAlchemy ( ) [EOL] [EOL] [EOL] class Comments ( DB . Model ) : [EOL] [EOL] by = DB . Column ( DB . String ( [number] ) ) [EOL] id = DB . Column ( DB . BigInteger , primary_key = True ) [EOL] text = DB . Column ( DB . Text ) [EOL] time = DB . Column ( DB . DateTime ) [EOL] sentiment = DB . Column ( DB . String ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[hn_comments.models.Comments]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Type[hn_comments.models.Comments]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[hn_comments.models.Comments]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Type[hn_comments.models.Comments]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Type[hn_comments.models.Comments]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask , request , render_template , jsonify , json [EOL] from decouple import config [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from flask_cors import CORS [EOL] from sqlalchemy import func [EOL] from models import DB , Comments [EOL] import numpy as np [EOL] from collections import Counter [EOL] import functools [EOL] from datetime import datetime [EOL] import itertools [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] CORS ( app ) [EOL] app . config [ [string] ] = config ( [string] ) [EOL] app . config [ [string] ] = False [EOL] [EOL] DB . init_app ( app ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def root ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def topic ( ) : [EOL] [docstring] [EOL] [EOL] topic = request . values [ [string] ] [EOL] topic = topic . replace ( [string] , [string] ) [EOL] if request . method == [string] : [EOL] query = ( DB . session . query ( Comments ) . filter ( Comments . text . like ( [string] + topic + [string] ) ) . limit ( [number] ) . all ( ) ) [EOL] num_results = len ( query ) [EOL] if num_results > [number] : [EOL] sentiment = [ float ( q . sentiment ) for q in query if q . sentiment is not None ] [EOL] hist = np . histogram ( sentiment , bins = [number] , range = ( - [number] , [number] ) ) [EOL] data = json . dumps ( [ round ( int ( hist [ [number] ] [ i ] ) / num_results * [number] , [number] ) for i in range ( len ( hist [ [number] ] ) ) ] ) [EOL] sentiment = functools . reduce ( lambda x , y : x + y , sentiment ) / num_results [EOL] return render_template ( [string] , sentiment = sentiment , topic = topic , data = data ) [EOL] else : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def user_sentiment ( ) : [EOL] user_id = request . values [ [string] ] [EOL] if request . method == [string] : [EOL] query = DB . session . query ( Comments ) . filter_by ( by = user_id ) . limit ( [number] ) . all ( ) [EOL] query = [ float ( q . sentiment ) for q in query if q . sentiment is not None ] [EOL] num_results = len ( query ) [EOL] if num_results > [number] : [EOL] user_average_sentiment = avg_sentiment ( query , num_results ) [EOL] data = sentiment_histogram ( query , num_results ) [EOL] [EOL] return render_template ( [string] , user_average_sentiment = user_average_sentiment , user_id = user_id , data = data , ) [EOL] else : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def topic_timeline ( ) : [EOL] topic = request . values [ [string] ] [EOL] data , labels = line_chart ( topic ) [EOL] return render_template ( [string] , data = data , labels = labels , topic = topic ) [EOL] [EOL] [EOL] def avg_sentiment ( query , num_results ) : [EOL] avg_sentiment = round ( functools . reduce ( lambda x , y : x + y , query ) / num_results , [number] ) * [number] [EOL] avg_sentiment = json . dumps ( avg_sentiment ) [EOL] return avg_sentiment [EOL] [EOL] [EOL] def sentiment_histogram ( query , num_results ) : [EOL] hist = np . histogram ( query , bins = [number] , range = ( - [number] , [number] ) ) [EOL] [comment] [EOL] hist = json . dumps ( [ round ( int ( hist [ [number] ] [ i ] ) / num_results * [number] , [number] ) for i in range ( len ( hist [ [number] ] ) ) ] ) [EOL] return hist [EOL] [EOL] [EOL] def line_chart ( search ) : [EOL] [EOL] query = ( DB . session . query ( Comments ) . filter ( Comments . text . like ( [string] + search + [string] ) ) . order_by ( Comments . time . asc ( ) ) . all ( ) ) [EOL] if len ( query ) > [number] : [EOL] [EOL] query = [ ( q . time , float ( q . sentiment ) ) for q in query if q . sentiment is not None ] [EOL] y = [ ( key , list ( num for _ , num in value ) ) for key , value in itertools . groupby ( query , lambda x : x [ [number] ] ) ] [EOL] [EOL] def avg ( lst ) : [EOL] return sum ( lst ) / len ( lst ) [EOL] [EOL] labels = [ y [ i ] [ [number] ] for i in range ( len ( y ) ) ] [EOL] data = [ avg ( y [ i ] [ [number] ] ) for i in range ( len ( y ) ) ] [EOL] labels = json . dumps ( labels ) [EOL] data = json . dumps ( data ) [EOL] return data , labels [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def user_lookup ( user_id ) : [EOL] def avg_sentiment ( user_id ) : [EOL] query = DB . session . query ( Comments ) . filter_by ( by = user_id ) . limit ( [number] ) . all ( ) [EOL] num_results = len ( query ) [EOL] sentiment = ( functools . reduce ( lambda x , y : x + y , [ q . sentiment for q in query ] ) / num_results ) [EOL] [EOL] return sentiment [EOL] [EOL] def top_10_saltiest_comments ( user_id ) : [EOL] top_10 = ( DB . session . query ( Comments . text , Comments . sentiment ) . filter_by ( by = user_id ) . order_by ( Comments . compound . asc ( ) ) . limit ( [number] ) . all ( ) ) [EOL] return top_10 [EOL] [EOL] return jsonify ( user_average_sentiment = avg_sentiment ( user_id ) , top_10 = top_10_saltiest_comments ( user_id ) , ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def topic_sentiment ( topic ) : [EOL] topic = topic . replace ( [string] , [string] ) [EOL] if request . method == [string] : [EOL] query = ( DB . session . query ( Comments ) . filter ( Comments . text . like ( [string] + topic + [string] ) ) . limit ( [number] ) . all ( ) ) [EOL] num_results = len ( query ) [EOL] sentiment = ( functools . reduce ( lambda x , y : x + y , [ q . sentiment for q in query if q . sentiment is not None ] , ) / num_results ) [EOL] return jsonify ( sentiment = sentiment ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def saltiest_commenters ( ) : [EOL] if request . method == [string] : [EOL] query = ( DB . session . query ( Comments . sentiment , func . count ( Comments . by ) , func . avg ( Comments . sentiment ) , ) . group_by ( Comments . by ) . having ( func . count ( Comments . by ) > [number] ) . order_by ( func . avg ( Comments . sentiment ) . asc ( ) ) . limit ( [number] ) . all ( ) ) [EOL] [EOL] return jsonify ( query ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0