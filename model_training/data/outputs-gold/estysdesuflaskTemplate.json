import os [EOL] import sys [EOL] import server [EOL] [EOL] [EOL] def main ( ) : [EOL] server . app . logger . info ( [string] ) [EOL] server . app . run ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_frozen import Freezer [EOL] from server import app [EOL] [EOL] freezer = Freezer ( app ) [EOL] [EOL] if __name__ == [string] : [EOL] freezer . freeze ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import flask [EOL] import os [EOL] from logging import CRITICAL , ERROR , WARNING , INFO , DEBUG , NOTSET [EOL] [EOL] from flask import Flask [EOL] from flask . logging import default_handler [EOL] from flask_bootstrap import Bootstrap [EOL] [EOL] from server import flask_log_handlers [EOL] [EOL] app = Flask ( __name__ , instance_relative_config = True ) [EOL] Bootstrap ( app ) [EOL] [EOL] [comment] [EOL] app . config . from_object ( [string] ) [EOL] app . config . from_pyfile ( [string] ) [EOL] [EOL] [comment] [EOL] app . logger . removeHandler ( default_handler ) [EOL] log_file_dir = os . path . join ( os . getcwd ( ) , [string] ) [EOL] flask_log_handlers . logger_setup ( name = app . logger . name , log_file_dir = log_file_dir , log_file_level = INFO ) [EOL] [EOL] [comment] [EOL] from server import routes [EOL] [EOL] [comment] [EOL] from server import models [EOL] [EOL] [comment] [EOL] from server import controllers [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Optional , Callable [EOL] import time [EOL] import server [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import logging [EOL] import logging . handlers [EOL] import os [EOL] import time [EOL] from typing import * [EOL] [EOL] [EOL] class FileHandler ( logging . handlers . TimedRotatingFileHandler ) : [EOL] def __init__ ( self , f_path , f_level = logging . DEBUG ) : [EOL] super ( ) . __init__ ( f_path , when = [string] , interval = [number] , utc = True ) [EOL] self . setLevel ( f_level ) [EOL] fmt = logging . Formatter ( fmt = [string] , datefmt = [string] , ) [EOL] fmt . converter = time . gmtime [EOL] self . setFormatter ( fmt ) [EOL] [EOL] [EOL] class StreamHandler ( logging . StreamHandler ) : [EOL] def __init__ ( self , s_level = logging . INFO ) : [EOL] super ( ) . __init__ ( ) [EOL] self . setLevel ( s_level ) [EOL] fmt = logging . Formatter ( fmt = [string] ) [EOL] self . setFormatter ( fmt ) [EOL] [EOL] [EOL] def logger_setup ( name = [string] , ** kwargs ) : [EOL] [docstring] [EOL] log = logging . getLogger ( name ) [EOL] log . setLevel ( logging . DEBUG ) [comment] [EOL] [EOL] [comment] [EOL] if [string] in kwargs . keys ( ) : [EOL] stream_level = kwargs . get ( [string] ) [EOL] else : [EOL] stream_level = logging . INFO [EOL] sh = StreamHandler ( s_level = stream_level ) [EOL] log . addHandler ( sh ) [EOL] [EOL] [comment] [EOL] if [string] in kwargs . keys ( ) : [EOL] log_file_level = kwargs . get ( [string] ) [EOL] else : [EOL] log_file_level = logging . DEBUG [EOL] if [string] in kwargs . keys ( ) : [EOL] log_file_dir = kwargs . get ( [string] ) [EOL] os . makedirs ( log_file_dir , exist_ok = True ) [comment] [EOL] log_file_path = os . path . join ( log_file_dir , log . name + [string] ) [comment] [EOL] fh = FileHandler ( log_file_path , f_level = log_file_level ) [EOL] log . addHandler ( fh ) [EOL] [EOL] return log [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 $typing.Callable[[typing.Optional],time.struct_time]$ 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import Flask [EOL] from server import app [EOL]	0 0 0 0 0 0 0 0 0 0
import flask [EOL] from server import app [EOL] [EOL] [EOL] @ app . route ( [string] ) @ app . route ( [string] ) def index ( ) : [EOL] return flask . render_template ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import Flask [EOL] from server import app [EOL]	0 0 0 0 0 0 0 0 0 0
ENV = [string] [EOL] DEBUG = False [EOL] TESTING = False [EOL] SECRET_KEY = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0
ENV = [string] [EOL] DEBUG = True [EOL] TESTING = True [EOL]	$builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0