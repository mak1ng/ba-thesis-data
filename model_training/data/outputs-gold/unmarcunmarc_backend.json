[comment] [EOL] [docstring] [EOL] import os [EOL] import sys [EOL] import environ [EOL] [EOL] [EOL] def main ( ) : [EOL] ROOT_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] ENV_FILE = os . path . join ( ROOT_DIR , [string] ) [EOL] if os . path . exists ( ENV_FILE ) : [EOL] environ . Env ( ) . read_env ( ENV_FILE ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] sys . path . append ( os . path . join ( ROOT_DIR , [string] ) ) [EOL] try : [EOL] from django . core . management import execute_from_command_line [EOL] except ImportError as exc : [EOL] raise ImportError ( [string] [string] [string] ) from exc [EOL] execute_from_command_line ( sys . argv ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] [EOL] from users import schema as users_schema [EOL] from library import schema as library_schema [EOL] [EOL] [EOL] class Query ( users_schema . Query , library_schema . Query , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] schema = graphene . Schema ( query = Query ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf import settings [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from graphene_django . views import GraphQLView [EOL] [EOL] from . public_schema import schema as public_schema [EOL] from . private_schema import schema as private_schema [EOL] from common . views import PrivateGraphQLView , index , set_csrf_cookie [EOL] from users import views as users_views [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , index ) , path ( [string] , admin . site . urls ) , path ( [string] , set_csrf_cookie ) , path ( [string] , users_views . auth_status ) , path ( [string] , users_views . login ) , path ( [string] , users_views . logout ) , path ( [string] , GraphQLView . as_view ( schema = public_schema , graphiql = True ) ) , path ( [string] , PrivateGraphQLView . as_view ( schema = private_schema , graphiql = True ) ) , ] [EOL] [EOL] if settings . DEBUG and [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] [EOL] [EOL] schema = graphene . Schema ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import ( authenticate , login as auth_login , logout as auth_logout ) [EOL] from django . http import HttpResponse , HttpResponseBadRequest , JsonResponse [EOL] from django . views . decorators . http import require_POST [EOL] [EOL] [EOL] @ require_POST def login ( request ) : [EOL] username = request . POST . get ( [string] ) [EOL] password = request . POST . get ( [string] ) [EOL] if username is None or password is None : [EOL] return HttpResponseBadRequest ( [string] ) [EOL] user = authenticate ( request , username = username , password = password ) [EOL] if user is not None : [EOL] auth_login ( request , user ) [EOL] return HttpResponse ( ) [EOL] else : [EOL] resp = HttpResponse ( status = [number] ) [EOL] resp [ [string] ] = [string] [EOL] return resp [EOL] [EOL] [EOL] @ require_POST def logout ( request ) : [EOL] auth_logout ( request ) [EOL] return HttpResponse ( ) [EOL] [EOL] [EOL] def auth_status ( request ) : [EOL] return JsonResponse ( { [string] : request . user . is_authenticated } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] from . import signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . contrib . auth . models import Group , Permission [EOL] from django . db import InternalError , transaction [EOL] from django . test import TestCase [EOL] [EOL] from users . models import User , Staff [EOL] from . constants import ( apps_excluded_from_library_admin_group as excluded_app_labels , library_admin_group_name ) [EOL] [EOL] [EOL] class UserModelTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . regular_user = User . objects . create_user ( [string] ) [EOL] self . staff_user = User . objects . create_user ( [string] ) [EOL] Staff . objects . create ( user = self . staff_user ) [EOL] [EOL] def test_non_staff_user_has_library_staff_property_false ( self ) : [EOL] self . assertFalse ( self . regular_user . is_library_staff ) [EOL] [EOL] def test_staff_user_has_library_staff_property_true ( self ) : [EOL] self . assertTrue ( self . staff_user . is_library_staff ) [EOL] [EOL] [EOL] class GroupTest ( TestCase ) : [EOL] def test_1_library_admin_group_exists ( self ) : [EOL] self . assertTrue ( Group . objects . filter ( name__exact = library_admin_group_name ) . exists ( ) ) [EOL] [EOL] def test_2_library_admin_group_cannot_be_deleted ( self ) : [EOL] with self . assertRaises ( Exception ) as raised : [EOL] with transaction . atomic ( ) : [EOL] Group . objects . filter ( name__exact = library_admin_group_name ) . delete ( ) [EOL] self . assertEqual ( InternalError , type ( raised . exception ) ) [EOL] self . assertTrue ( Group . objects . filter ( name__exact = library_admin_group_name ) . exists ( ) ) [EOL] [EOL] [EOL] class SignalsTest ( TestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] cls . ct_model_prefix = [string] [EOL] cls . dummy_perm_name = [string] [EOL] cls . perm_codename = [string] [EOL] [EOL] cls . lib_admin_grp = Group . objects . get ( name = library_admin_group_name ) [EOL] [EOL] cls . ct = ContentType . objects . create ( app_label = [string] , model = f'{ cls . ct_model_prefix } [string] ' ) [EOL] [EOL] cls . excluded_perms = [ ] [EOL] [EOL] for num , app_label in enumerate ( excluded_app_labels ) : [EOL] ct = ContentType . objects . create ( app_label = app_label , model = f'{ cls . ct_model_prefix } [string] { num }' ) [EOL] perm = Permission . objects . create ( name = cls . dummy_perm_name , content_type = ct , codename = cls . perm_codename ) [EOL] cls . excluded_perms . append ( perm ) [EOL] [EOL] @ classmethod def tearDownClass ( cls ) : [EOL] cls . excluded_perms = None [EOL] ContentType . objects . filter ( model__startswith = f'{ cls . ct_model_prefix }' ) . delete ( ) [EOL] [EOL] def test_1_auto_grant_permission_to_library_admin_group_works ( self ) : [EOL] Permission . objects . create ( name = self . dummy_perm_name , content_type = self . ct , codename = self . perm_codename ) [EOL] self . assertTrue ( self . lib_admin_grp . permissions . filter ( name = self . dummy_perm_name , content_type = self . ct , codename__exact = self . perm_codename ) . exists ( ) ) [EOL] [EOL] def test_2_auto_grant_permission_to_library_admin_group_excludes_excluded_types ( self ) : [EOL] [comment] [EOL] self . assertEqual ( len ( self . excluded_perms ) , len ( excluded_app_labels ) ) [EOL] [EOL] [comment] [EOL] self . assertFalse ( self . lib_admin_grp . permissions . filter ( content_type__app_label__in = excluded_app_labels ) . exists ( ) ) [EOL] [EOL] def test_3_auto_revoke_permission_of_library_admin_group_works ( self ) : [EOL] perm = Permission . objects . create ( name = self . dummy_perm_name , content_type = self . ct , codename = [string] ) [EOL] perm . delete ( ) [EOL] self . assertFalse ( self . lib_admin_grp . permissions . filter ( name = self . dummy_perm_name , content_type = self . ct , codename__exact = [string] ) . exists ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib . auth . mixins import UserPassesTestMixin [EOL] from django . core . exceptions import PermissionDenied [EOL] [EOL] [EOL] class LoginRequiredMixin : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] if not request . user . is_authenticated : [EOL] raise PermissionDenied ( [string] ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class IsLibraryStaffMixin ( UserPassesTestMixin ) : [EOL] def handle_no_permission ( self ) : [EOL] raise PermissionDenied ( [string] ) [EOL] [EOL] def test_func ( self ) : [EOL] return self . request . user . is_library_staff or self . request . user . is_superuser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Tuple [EOL] import typing [EOL] apps_excluded_from_library_admin_group = ( [string] , [string] , [string] ) [EOL] [EOL] library_admin_group_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Any , Type [EOL] import typing [EOL] import unmarc [EOL] from django import forms [EOL] from django . contrib . auth import password_validation [EOL] from django . contrib . auth . forms import UsernameField , ReadOnlyPasswordHashField [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] class UserCreationForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] error_messages = { [string] : _ ( [string] ) , } [EOL] password1 = forms . CharField ( label = _ ( [string] ) , strip = False , widget = forms . PasswordInput , help_text = password_validation . password_validators_help_text_html ( ) , ) [EOL] password2 = forms . CharField ( label = _ ( [string] ) , widget = forms . PasswordInput , strip = False , help_text = _ ( [string] ) , ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , ) [EOL] field_classes = { [string] : UsernameField } [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] if self . _meta . model . USERNAME_FIELD in self . fields : [EOL] self . fields [ self . _meta . model . USERNAME_FIELD ] . widget . attrs . update ( { [string] : True } ) [EOL] [EOL] def clean_password2 ( self ) : [EOL] password1 = self . cleaned_data . get ( [string] ) [EOL] password2 = self . cleaned_data . get ( [string] ) [EOL] if password1 and password2 and password1 != password2 : [EOL] raise forms . ValidationError ( self . error_messages [ [string] ] , code = [string] , ) [EOL] return password2 [EOL] [EOL] def _post_clean ( self ) : [EOL] super ( ) . _post_clean ( ) [EOL] [comment] [EOL] [comment] [EOL] password = self . cleaned_data . get ( [string] ) [EOL] if password : [EOL] try : [EOL] password_validation . validate_password ( password , self . instance ) [EOL] except forms . ValidationError as error : [EOL] self . add_error ( [string] , error ) [EOL] [EOL] def save ( self , commit = True ) : [EOL] user = super ( ) . save ( commit = False ) [EOL] user . set_password ( self . cleaned_data [ [string] ] ) [EOL] if commit : [EOL] user . save ( ) [EOL] return user [EOL] [EOL] [EOL] class UserChangeForm ( forms . ModelForm ) : [EOL] password = ReadOnlyPasswordHashField ( label = _ ( [string] ) , help_text = _ ( [string] [string] [string] ) , ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [string] [EOL] field_classes = { [string] : UsernameField } [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] password = self . fields . get ( [string] ) [EOL] if password : [EOL] password . help_text = password . help_text . format ( [string] ) [EOL] user_permissions = self . fields . get ( [string] ) [EOL] if user_permissions : [EOL] user_permissions . queryset = user_permissions . queryset . select_related ( [string] ) [EOL] [EOL] def clean_password ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . initial . get ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.adminforms.UserChangeForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib . auth . models import Permission , Group [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db . models . signals import post_save , post_delete [EOL] from django . dispatch import receiver [EOL] [EOL] from . constants import ( apps_excluded_from_library_admin_group as excluded_app_labels , library_admin_group_name ) [EOL] [EOL] [EOL] def _get_types_and_group ( ) : [EOL] return ( ContentType . objects . filter ( app_label__in = excluded_app_labels ) , Group . objects . get ( name__exact = library_admin_group_name ) ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = Permission ) def auto_grant_permission_to_library_admin_group ( sender , instance , created , ** kwargs ) : [EOL] excluded_content_types , library_admin_group = _get_types_and_group ( ) [EOL] [EOL] if created and instance . content_type not in excluded_content_types : [EOL] library_admin_group . permissions . add ( instance ) [EOL] [EOL] [EOL] @ receiver ( post_delete , sender = Permission ) def auto_revoke_permission_of_library_admin_group ( sender , instance , ** kwargs ) : [EOL] excluded_content_types , library_admin_group = _get_types_and_group ( ) [EOL] [EOL] if instance . content_type not in excluded_content_types : [EOL] library_admin_group . permissions . remove ( instance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import unmarc [EOL] from django . contrib . auth import get_user_model [EOL] from graphene_django import DjangoObjectType [EOL] import graphene [EOL] [EOL] from users . models import Staff [EOL] [EOL] [EOL] class UserType ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = get_user_model ( ) [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] is_library_staff = graphene . Boolean ( ) [EOL] [EOL] [EOL] class StaffType ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = Staff [EOL] is_library_admin = graphene . Boolean ( ) [EOL] [EOL] [EOL] class Query : [EOL] me = graphene . Field ( UserType ) [EOL] all_users = graphene . List ( UserType ) [EOL] all_staff = graphene . List ( StaffType ) [EOL] [EOL] def resolve_me ( self , info ) : [EOL] return info . context . user [EOL] [EOL] def resolve_all_users ( self , info ) : [EOL] return get_user_model ( ) . objects . select_related ( [string] ) . all ( ) [EOL] [EOL] def resolve_all_staff ( self , info ) : [EOL] return Staff . objects . prefetch_related ( [string] , [string] ) . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.StaffType.Meta]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.UserType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.StaffType.Meta]$ 0 0 0 $typing.Type[unmarc.users.schema.StaffType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.Query]$ 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.Query]$ 0 0 0 0 0 0 0 0 $typing.Type[unmarc.users.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . contrib . auth . models import Permission , Group [EOL] from django . db import migrations [EOL] [EOL] from . . constants import ( apps_excluded_from_library_admin_group as excluded_app_labels , library_admin_group_name ) [EOL] [EOL] [EOL] def assign_valid_permissions_to_library_admin_group ( apps , schema_editor ) : [EOL] lib_admin_grp = Group . objects . get ( name = library_admin_group_name ) [EOL] perms_to_assign = Permission . objects . exclude ( content_type__app_label__in = excluded_app_labels ) [EOL] lib_admin_grp . permissions . set ( list ( perms_to_assign ) ) [EOL] [EOL] [EOL] def reverse_func ( apps , schema_editor ) : [EOL] lib_admin_grp = Group . objects . get ( name = library_admin_group_name ) [EOL] lib_admin_grp . permissions . clear ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( assign_valid_permissions_to_library_admin_group , reverse_func ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] from . . constants import library_admin_group_name [EOL] [EOL] FUNCTION_NAME = [string] [EOL] TRIGGER_NAME = [string] [EOL] [EOL] [EOL] CREATE_GROUP_LIBRARY_ADMIN = f""" [string] { library_admin_group_name } [string] { FUNCTION_NAME } [string] { library_admin_group_name } [string] { library_admin_group_name } [string] { TRIGGER_NAME } [string] { FUNCTION_NAME } [string] """ [EOL] [EOL] [EOL] REVERSE_CREATE_GROUP_LIBRARY_ADMIN = f""" [string] { TRIGGER_NAME } [string] { FUNCTION_NAME } [string] { library_admin_group_name } [string] """ [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( CREATE_GROUP_LIBRARY_ADMIN , REVERSE_CREATE_GROUP_LIBRARY_ADMIN ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0
from django . core . exceptions import PermissionDenied [EOL] from django . http import JsonResponse , HttpResponse [EOL] from django . views . decorators . csrf import ensure_csrf_cookie [EOL] from graphene_django . views import GraphQLView [EOL] [EOL] from users . mixins import LoginRequiredMixin , IsLibraryStaffMixin [EOL] [EOL] [EOL] def index ( _ ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] [EOL] @ ensure_csrf_cookie def set_csrf_cookie ( _ ) : [EOL] [docstring] [EOL] return HttpResponse ( ) [EOL] [EOL] [EOL] class PrivateGraphQLView ( LoginRequiredMixin , IsLibraryStaffMixin , GraphQLView ) : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] except PermissionDenied as e : [EOL] return JsonResponse ( data = { [string] : [ { [string] : str ( e ) } ] } , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LibraryConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Library , Branch [EOL] [EOL] admin . site . register ( Library ) [EOL] admin . site . register ( Branch ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] class ShortIdToLowerCaseMixin : [comment] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . short_id = self . short_id . lower ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import unmarc [EOL] from django . db import models [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] from . mixins import ShortIdToLowerCaseMixin [EOL] [EOL] [EOL] class Library ( ShortIdToLowerCaseMixin , models . Model ) : [EOL] name = models . CharField ( _ ( [string] ) , max_length = [number] , help_text = _ ( [string] ) ) [EOL] short_id = models . SlugField ( _ ( [string] ) , max_length = [number] , unique = True , allow_unicode = True , help_text = _ ( [string] [string] [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Branch ( ShortIdToLowerCaseMixin , models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] library = models . ForeignKey ( Library , on_delete = models . CASCADE , related_name = [string] , verbose_name = _ ( [string] ) ) [EOL] [EOL] address = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] short_id = models . SlugField ( _ ( [string] ) , max_length = [number] , unique = True , allow_unicode = True , help_text = _ ( [string] [string] [string] ) ) [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Library]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Library]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Branch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Branch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Branch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Branch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import unmarc [EOL] import graphene [EOL] from graphene_django import DjangoObjectType [EOL] [EOL] from . models import Branch [EOL] [EOL] [EOL] class BranchType ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = Branch [EOL] [EOL] [EOL] class Query : [EOL] all_branches = graphene . List ( BranchType ) [EOL] [EOL] def resolve_all_branches ( self , info ) : [EOL] return Branch . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.models.Branch]$ 0 0 0 0 0 0 0 0 0 $typing.Type[unmarc.library.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0