from typing import Any [EOL] import typing [EOL] import os [EOL] import random [EOL] from fabric . contrib . files import append , exists [EOL] from fabric . api import cd , env , local , run [EOL] [EOL] REPO_URL = [string] [EOL] [comment] [EOL] [EOL] [EOL] def deploy ( ) : [EOL] site_folder = f" [string] { env . user } [string] { env . host }" [EOL] run ( f" [string] { site_folder }" ) [EOL] with cd ( site_folder ) : [EOL] _get_latest_source ( ) [EOL] _update_virtualenv ( ) [EOL] _create_or_update_dotenv ( ) [EOL] _update_static_files ( ) [EOL] _update_database ( ) [EOL] [EOL] [EOL] def _get_latest_source ( ) : [EOL] if exists ( [string] ) : [EOL] run ( [string] ) [EOL] else : [EOL] run ( f" [string] { REPO_URL } [string] " ) [EOL] current_commit = local ( [string] , capture = True ) [EOL] run ( f" [string] { current_commit }" ) [EOL] [EOL] [EOL] def _update_virtualenv ( ) : [EOL] run ( [string] ) [comment] [EOL] run ( [string] ) [EOL] [EOL] [EOL] def _create_or_update_dotenv ( ) : [EOL] append ( [string] , [string] ) [EOL] append ( [string] , f" [string] { env . host }" ) [EOL] current_contents = run ( [string] ) [EOL] if [string] not in current_contents : [EOL] new_secret = [string] . join ( random . SystemRandom ( ) . choices ( [string] , k = [number] ) ) [EOL] append ( [string] , f" [string] { new_secret }" ) [EOL] email_password = os . environ [ [string] ] [EOL] append ( [string] , f' [string] { email_password }' ) [EOL] [EOL] [EOL] def _update_static_files ( ) : [EOL] run ( [string] ) [EOL] [EOL] [EOL] def _update_database ( ) : [EOL] run ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . contrib . auth . views import logout [EOL] from accounts import views [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , views . send_login_email , name = [string] ) , url ( [string] , views . login , name = [string] ) , url ( [string] , logout , { [string] : [string] } , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from accounts . models import User , Token [EOL] [EOL] class PasswordlessAuthenticationBackend ( object ) : [EOL] [EOL] def authenticate ( self , uid ) : [EOL] try : [EOL] token = Token . objects . get ( uid = uid ) [EOL] return User . objects . get ( email = token . email ) [EOL] except User . DoesNotExist : [EOL] return User . objects . create ( email = token . email ) [EOL] except Token . DoesNotExist : [EOL] return None [EOL] [EOL] def get_user ( self , email ) : [EOL] try : [EOL] return User . objects . get ( email = email ) [EOL] except User . DoesNotExist : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from accounts . models import Token [EOL] from django . contrib import auth , messages [EOL] from django . core . mail import send_mail [EOL] from django . core . urlresolvers import reverse [EOL] from django . shortcuts import redirect [EOL] [EOL] [EOL] def send_login_email ( request ) : [EOL] email = request . POST [ [string] ] [EOL] token = Token . objects . create ( email = email ) [EOL] url = request . build_absolute_uri ( reverse ( [string] ) + [string] + str ( token . uid ) ) [EOL] message_body = f' [string] { url }' [EOL] print ( url ) [EOL] send_mail ( [string] , message_body , [string] , [ email ] ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def login ( request ) : [EOL] user = auth . authenticate ( uid = request . GET . get ( [string] ) ) [EOL] if user : [EOL] auth . login ( request , user ) [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Type [EOL] import accounts [EOL] import typing [EOL] from django . contrib import auth [EOL] from django . db import models [EOL] import uuid [EOL] [EOL] auth . signals . user_logged_in . disconnect ( auth . models . update_last_login ) [EOL] [EOL] [EOL] class User ( models . Model ) : [EOL] email = models . EmailField ( primary_key = True ) [EOL] REQUIRED_FIELDS = [ ] [EOL] USERNAME_FIELD = [string] [EOL] is_anonymous = False [EOL] is_authenticated = True [EOL] [EOL] [EOL] class Token ( models . Model ) : [EOL] email = models . EmailField ( ) [EOL] uid = models . CharField ( default = uuid . uuid4 , max_length = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Token]$ 0 0 0 0 0 0 0 $typing.Type[accounts.models.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from accounts . models import Token [EOL] from django . test import TestCase [EOL] from django . contrib import auth [EOL] [EOL] User = auth . get_user_model ( ) [EOL] [EOL] [EOL] class UserModelTest ( TestCase ) : [EOL] [EOL] def test_user_is_valid_with_email_only ( self ) : [EOL] user = User ( email = [string] ) [EOL] user . full_clean ( ) [comment] [EOL] [EOL] def test_email_is_primary_key ( self ) : [EOL] user = User ( email = [string] ) [EOL] self . assertEqual ( user . pk , [string] ) [EOL] [EOL] def test_no_problem_with_auth_login ( self ) : [EOL] user = User . objects . create ( email = [string] ) [EOL] user . backend = [string] [EOL] request = self . client . request ( ) . wsgi_request [EOL] auth . login ( request , user ) [EOL] [EOL] [EOL] class TokenModelTest ( TestCase ) : [EOL] [EOL] def test_links_user_with_auto_generated_uid ( self ) : [EOL] token1 = Token . objects . create ( email = [string] ) [EOL] token2 = Token . objects . create ( email = [string] ) [EOL] self . assertNotEqual ( token1 . uid , token2 . uid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from accounts . models import Token [EOL] from django . test import TestCase [EOL] from unittest . mock import patch , call [EOL] [EOL] @ patch ( [string] ) class LoginViewTest ( TestCase ) : [EOL] [EOL] def test_redirects_to_home_page ( self , mock_auth ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertRedirects ( response , [string] ) [EOL] [EOL] def test_call_authenticate_with_uid_from_get_request ( self , mock_auth ) : [EOL] self . client . get ( [string] ) [EOL] self . assertEqual ( mock_auth . authenticate . call_args , call ( uid = [string] ) ) [EOL] [EOL] def test_calls_auth_login_with_user_if_there_is_one ( self , mock_auth ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( mock_auth . login . call_args , call ( response . wsgi_request , mock_auth . authenticate . return_value ) ) [EOL] [EOL] def test_does_not_login_if_user_is_not_authenticated ( self , mock_auth ) : [EOL] mock_auth . authenticate . return_value = None [EOL] self . client . get ( [string] ) [EOL] self . assertFalse ( mock_auth . login . called ) [EOL] [EOL] [EOL] class SendLoginEmailViewTest ( TestCase ) : [EOL] [EOL] def test_redirects_to_home_page ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertRedirects ( response , [string] ) [EOL] [EOL] def test_creates_token_associated_with_email ( self ) : [EOL] self . client . post ( [string] , data = { [string] : [string] } ) [EOL] token = Token . objects . first ( ) [EOL] self . assertEqual ( token . email , [string] ) [EOL] [EOL] @ patch ( [string] ) def test_sends_mail_to_address_from_post ( self , mock_send_mail ) : [EOL] self . client . post ( [string] , data = { [string] : [string] } ) [EOL] [EOL] token = Token . objects . first ( ) [EOL] expected_url = f' [string] { token . uid }' [EOL] self . assertEqual ( mock_send_mail . called , True ) [EOL] ( subject , body , from_email , to_list ) , kwargs = mock_send_mail . call_args [EOL] self . assertIn ( expected_url , body ) [EOL] self . assertEqual ( subject , [string] ) [EOL] self . assertEqual ( from_email , [string] ) [EOL] self . assertEqual ( to_list , [ [string] ] ) [EOL] [EOL] def test_adds_success_message ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } , follow = True ) [EOL] [EOL] message = list ( response . context [ [string] ] ) [ [number] ] [EOL] self . assertEqual ( message . message , [string] ) [EOL] self . assertEqual ( message . tags , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . contrib . auth import get_user_model [EOL] from accounts . authentication import PasswordlessAuthenticationBackend [EOL] from accounts . models import Token [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class AuthenticateTest ( TestCase ) : [EOL] [EOL] def test_returns_None_if_no_such_token ( self ) : [EOL] result = PasswordlessAuthenticationBackend ( ) . authenticate ( [string] ) [EOL] self . assertIsNone ( result ) [EOL] [EOL] def test_returns_new_user_with_correct_email_if_token_exists ( self ) : [EOL] email = [string] [EOL] token = Token . objects . create ( email = email ) [EOL] user = PasswordlessAuthenticationBackend ( ) . authenticate ( token . uid ) [EOL] new_user = User . objects . get ( email = email ) [EOL] self . assertEqual ( user , new_user ) [EOL] [EOL] def test_returns_existing_user_with_correct_email_if_token_exists ( self ) : [EOL] email = [string] [EOL] existing_user = User . objects . create ( email = email ) [EOL] token = Token . objects . create ( email = email ) [EOL] user = PasswordlessAuthenticationBackend ( ) . authenticate ( token . uid ) [EOL] self . assertEqual ( user , existing_user ) [EOL] [EOL] [EOL] class GetUserTest ( TestCase ) : [EOL] [EOL] def test_gets_user_by_email ( self ) : [EOL] User . objects . create ( email = [string] ) [EOL] desired_user = User . objects . create ( email = [string] ) [EOL] found_user = PasswordlessAuthenticationBackend ( ) . get_user ( [string] ) [EOL] self . assertEqual ( found_user , desired_user ) [EOL] [EOL] def test_returns_None_if_no_user_with_that_email ( self ) : [EOL] self . assertIsNone ( PasswordlessAuthenticationBackend ( ) . get_user ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( default = uuid . uuid4 , max_length = [number] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import lists [EOL] from django import forms [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from lists . models import Item , List [EOL] [EOL] EMPTY_ITEM_ERROR = [string] [EOL] DUPLICATE_ITEM_ERROR = [string] [EOL] [EOL] class ItemForm ( forms . models . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Item [EOL] fields = ( [string] , ) [EOL] widgets = { [string] : forms . fields . TextInput ( attrs = { [string] : [string] , [string] : [string] , } ) , } [EOL] error_messages = { [string] : { [string] : EMPTY_ITEM_ERROR } } [EOL] [EOL] [EOL] class NewListForm ( ItemForm ) : [EOL] def save ( self , owner ) : [EOL] if owner . is_authenticated : [EOL] return List . create_new ( first_item_text = self . cleaned_data [ [string] ] , owner = owner ) [EOL] else : [EOL] return List . create_new ( first_item_text = self . cleaned_data [ [string] ] ) [EOL] [EOL] [EOL] class ExistingListItemForm ( ItemForm ) : [EOL] def __init__ ( self , for_list , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . instance . list = for_list [EOL] [EOL] def validate_unique ( self ) : [EOL] try : [EOL] self . instance . validate_unique ( ) [EOL] except ValidationError as e : [EOL] e . error_dict = { [string] : [ DUPLICATE_ITEM_ERROR ] } [EOL] self . _update_errors ( e ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import url [EOL] from django . contrib import admin [EOL] from lists import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . new_list , name = [string] ) , url ( [string] , views . share_list , name = [string] ) , url ( [string] , views . view_list , name = [string] ) , url ( [string] , views . my_lists , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] from lists import api [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , api . list , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ListsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any , List , Tuple [EOL] import typing [EOL] import lists [EOL] from django . conf import settings [EOL] from django . core . urlresolvers import reverse [EOL] from django . db import models [EOL] [EOL] [EOL] class List ( models . Model ) : [EOL] [docstring] [EOL] owner = models . ForeignKey ( settings . AUTH_USER_MODEL , blank = True , null = True ) [EOL] [EOL] shared_with = models . ManyToManyField ( settings . AUTH_USER_MODEL , related_name = [string] ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] [docstring] [EOL] return reverse ( [string] , args = [ self . id ] ) [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . item_set . first ( ) . text [EOL] [EOL] @ staticmethod def create_new ( first_item_text , owner = None ) : [EOL] [docstring] [EOL] list_ = List . objects . create ( owner = owner ) [EOL] Item . objects . create ( text = first_item_text , list = list_ ) [EOL] return list_ [EOL] [EOL] [EOL] class Item ( models . Model ) : [EOL] [docstring] [EOL] text = models . TextField ( default = [string] ) [EOL] list = models . ForeignKey ( List , default = None ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[lists.models.List]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[lists.models.List]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[lists.models.Item]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[lists.models.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import lists [EOL] import bleach [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import ValidationError [EOL] from django . shortcuts import redirect , render [EOL] [EOL] from lists . forms import ExistingListItemForm , ItemForm , NewListForm [EOL] from lists . models import Item , List [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] def home_page ( request ) : [EOL] return render ( request , [string] , { [string] : ItemForm ( ) } ) [EOL] [EOL] [EOL] def view_list ( request , list_id ) : [EOL] list_ = List . objects . get ( id = list_id ) [EOL] form = ExistingListItemForm ( for_list = list_ ) [EOL] if request . method == [string] : [EOL] form = ExistingListItemForm ( for_list = list_ , data = request . POST ) [EOL] if form . is_valid ( ) : [EOL] if ( not ( list_ . owner ) or ( request . user == list_ . owner ) or ( request . user in list_ . shared_with . all ( ) ) ) : [EOL] Item . objects . create ( text = request . POST [ [string] ] , list = list_ ) [EOL] return redirect ( list_ ) [EOL] return render ( request , [string] , { [string] : list_ , [string] : form } ) [EOL] [EOL] [EOL] def old_new_list ( request ) : [EOL] form = ItemForm ( data = request . POST ) [EOL] if form . is_valid ( ) : [EOL] list_ = List ( ) [EOL] if request . user . is_authenticated : [EOL] list_ . owner = request . user [EOL] list_ . save ( ) [EOL] form . save ( for_list = list_ ) [EOL] return redirect ( list_ ) [EOL] else : [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] def new_list ( request ) : [EOL] form = NewListForm ( data = request . POST ) [EOL] if form . is_valid ( ) : [EOL] list_ = form . save ( owner = request . user ) [EOL] return redirect ( list_ ) [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] def my_lists ( request , email ) : [EOL] owner = User . objects . get ( email = email ) [EOL] return render ( request , [string] , { [string] : owner } ) [EOL] [EOL] [EOL] def share_list ( request , list_id ) : [EOL] list_ = List . objects . get ( id = list_id ) [EOL] if request . method == [string] : [EOL] input_sharee_email = bleach . clean ( request . POST [ [string] ] ) [EOL] try : [EOL] sharee = User . objects . get ( email = input_sharee_email ) [EOL] list_ . shared_with . add ( sharee . email ) [EOL] except : [EOL] return render ( request , [string] , { [string] : list_ , [string] : user_not_found_string ( input_sharee_email ) } ) [EOL] return redirect ( list_ ) [EOL] [EOL] [EOL] def user_not_found_string ( email ) : [EOL] return f" [string] { email } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import lists [EOL] import json [EOL] from django . http import HttpResponse [EOL] from lists . forms import ExistingListItemForm [EOL] from lists . models import List , Item [EOL] [EOL] def list ( request , list_id ) : [EOL] list_ = List . objects . get ( id = list_id ) [EOL] if request . method == [string] : [EOL] form = ExistingListItemForm ( for_list = list_ , data = request . POST ) [EOL] if ( form . is_valid ( ) ) and ( not ( list_ . owner ) or ( request . user == list_ . owner ) or ( request . user in list_ . shared_with . all ( ) ) ) : [EOL] Item . objects . create ( text = request . POST [ [string] ] , list = list_ ) [EOL] return HttpResponse ( status = [number] ) [EOL] else : [EOL] errors_dict = { [string] : form [ [string] ] . errors [ [number] ] } [EOL] return HttpResponse ( json . dumps ( errors_dict ) , status = [number] , content_type = [string] ) [EOL] item_dicts = [ { [string] : item . id , [string] : item . text } for item in list_ . item_set . all ( ) ] [EOL] return HttpResponse ( json . dumps ( item_dicts ) , content_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import json [EOL] from django . test import TestCase [EOL] [EOL] from lists . forms import DUPLICATE_ITEM_ERROR , EMPTY_ITEM_ERROR [EOL] from lists . models import List , Item [EOL] [EOL] [EOL] class ListAPITest ( TestCase ) : [EOL] base_url = [string] [EOL] [EOL] def test_get_returns_json_200 ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] response = self . client . get ( self . base_url . format ( list_ . id ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( response [ [string] ] , [string] ) [EOL] [EOL] def test_get_returns_items_for_correct_list ( self ) : [EOL] other_list = List . objects . create ( ) [EOL] Item . objects . create ( list = other_list , text = [string] ) [EOL] our_list = List . objects . create ( ) [EOL] item1 = Item . objects . create ( list = our_list , text = [string] ) [EOL] item2 = Item . objects . create ( list = our_list , text = [string] ) [EOL] response = self . client . get ( self . base_url . format ( our_list . id ) ) [EOL] self . assertEqual ( json . loads ( response . content . decode ( [string] ) ) , [ { [string] : item1 . id , [string] : item1 . text } , { [string] : item2 . id , [string] : item2 . text } ] ) [EOL] [EOL] def test_POSTing_a_new_item ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] response = self . client . post ( self . base_url . format ( list_ . id ) , { [string] : [string] } , ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] new_item = list_ . item_set . get ( ) [EOL] self . assertEqual ( new_item . text , [string] ) [EOL] [EOL] def post_empty_input ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] return self . client . post ( self . base_url . format ( list_ . id ) , data = { [string] : [string] } ) [EOL] [EOL] def test_for_invalid_input_nothing_saved_to_db ( self ) : [EOL] self . post_empty_input ( ) [EOL] self . assertEqual ( Item . objects . count ( ) , [number] ) [EOL] [EOL] def test_for_invalid_input_returns_error_code ( self ) : [EOL] response = self . post_empty_input ( ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( json . loads ( response . content . decode ( [string] ) ) , { [string] : EMPTY_ITEM_ERROR } ) [EOL] [EOL] def test_duplicate_items_error ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] self . client . post ( self . base_url . format ( list_ . id ) , data = { [string] : [string] } ) [EOL] response = self . client . post ( self . base_url . format ( list_ . id ) , data = { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( json . loads ( response . content . decode ( [string] ) ) , { [string] : DUPLICATE_ITEM_ERROR } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import unittest [EOL] import typing [EOL] import lists [EOL] import unittest [EOL] from unittest . mock import patch , Mock [EOL] from django . test import TestCase [EOL] from lists . forms import ( DUPLICATE_ITEM_ERROR , EMPTY_ITEM_ERROR , ExistingListItemForm , ItemForm , NewListForm ) [EOL] from lists . models import Item , List [EOL] [EOL] [EOL] class ItemFormTest ( TestCase ) : [EOL] [EOL] def test_form_renders_item_text_input ( self ) : [EOL] form = ItemForm ( ) [EOL] self . assertIn ( [string] , form . as_p ( ) ) [EOL] self . assertIn ( [string] , form . as_p ( ) ) [EOL] [EOL] def test_form_validation_for_blank_items ( self ) : [EOL] form = ItemForm ( data = { [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ EMPTY_ITEM_ERROR ] ) [EOL] [EOL] [EOL] class ExistingListItemFormTest ( TestCase ) : [EOL] [EOL] def test_form_renders_item_text_input ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] form = ExistingListItemForm ( for_list = list_ ) [EOL] self . assertIn ( [string] , form . as_p ( ) ) [EOL] [EOL] def test_form_validation_for_blank_items ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] form = ExistingListItemForm ( for_list = list_ , data = { [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ EMPTY_ITEM_ERROR ] ) [EOL] [EOL] def test_form_validation_for_duplicate_items ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] Item . objects . create ( list = list_ , text = [string] ) [EOL] form = ExistingListItemForm ( for_list = list_ , data = { [string] : [string] } ) [EOL] self . assertFalse ( form . is_valid ( ) ) [EOL] self . assertEqual ( form . errors [ [string] ] , [ DUPLICATE_ITEM_ERROR ] ) [EOL] [EOL] def test_form_save ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] form = ExistingListItemForm ( for_list = list_ , data = { [string] : [string] } ) [EOL] new_item = form . save ( ) [EOL] self . assertEqual ( new_item , Item . objects . all ( ) [ [number] ] ) [EOL] [EOL] [EOL] class NewListFormTest ( unittest . TestCase ) : [EOL] @ patch ( [string] ) def test_save_creates_new_list_from_post_data_if_user_not_authenticated ( self , mock_List_create_new ) : [EOL] user = Mock ( is_authenticated = False ) [EOL] form = NewListForm ( data = { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] form . save ( owner = user ) [EOL] mock_List_create_new . assert_called_once_with ( first_item_text = [string] ) [EOL] [EOL] @ patch ( [string] ) def test_save_creates_new_list_with_owner_if_user_authenticated ( self , mock_List_create_new ) : [EOL] user = Mock ( is_authenticated = True ) [EOL] form = NewListForm ( data = { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] form . save ( owner = user ) [EOL] mock_List_create_new . assert_called_once_with ( first_item_text = [string] , owner = user ) [EOL] [EOL] @ patch ( [string] ) def test_save_returns_new_list_object ( self , mock_List_create_new ) : [EOL] user = Mock ( is_authenticated = True ) [EOL] form = NewListForm ( data = { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] response = form . save ( owner = user ) [EOL] self . assertEqual ( response , mock_List_create_new . return_value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 $lists.forms.ItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $lists.forms.ExistingListItemForm$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $lists.forms.NewListForm$ 0 0 0 0 0 $typing.Any$ 0 $lists.forms.NewListForm$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import lists [EOL] from lists . models import Item , List [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import ValidationError [EOL] from django . test import TestCase [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class ItemModelTest ( TestCase ) : [EOL] def test_default_text ( self ) : [EOL] item = Item ( ) [EOL] self . assertEqual ( item . text , [string] ) [EOL] [EOL] def test_item_is_related_to_list ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] item = Item ( ) [EOL] item . list = list_ [EOL] item . save ( ) [EOL] self . assertIn ( item , list_ . item_set . all ( ) ) [EOL] [EOL] def test_cannot_save_empty_list_items ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] item = Item ( list = list_ , text = [string] ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] item . save ( ) [EOL] item . full_clean ( ) [EOL] [EOL] def test_duplicate_items_are_invalid ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] Item . objects . create ( list = list_ , text = [string] ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] item = Item ( list = list_ , text = [string] ) [EOL] item . full_clean ( ) [EOL] [EOL] def test_CAN_save_same_item_to_different_lists ( self ) : [EOL] list1 = List . objects . create ( ) [EOL] list2 = List . objects . create ( ) [EOL] Item . objects . create ( list = list1 , text = [string] ) [EOL] item = Item ( list = list2 , text = [string] ) [EOL] item . full_clean ( ) [comment] [EOL] [EOL] def test_list_ordering ( self ) : [EOL] list1 = List . objects . create ( ) [EOL] item1 = Item . objects . create ( list = list1 , text = [string] ) [EOL] item2 = Item . objects . create ( list = list1 , text = [string] ) [EOL] item3 = Item . objects . create ( list = list1 , text = [string] ) [EOL] self . assertEqual ( list ( Item . objects . all ( ) ) , [ item1 , item2 , item3 ] ) [EOL] [EOL] def test_string_representation ( self ) : [EOL] item = Item ( text = [string] ) [EOL] self . assertEqual ( str ( item ) , [string] ) [EOL] [EOL] [EOL] class ListModelTest ( TestCase ) : [EOL] [EOL] def test_get_absolute_url ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] self . assertEqual ( list_ . get_absolute_url ( ) , f' [string] { list_ . id } [string] ' ) [EOL] [EOL] def test_create_new_creates_list_and_first_item ( self ) : [EOL] List . create_new ( first_item_text = [string] ) [EOL] new_item = Item . objects . first ( ) [EOL] self . assertEqual ( new_item . text , [string] ) [EOL] new_list = List . objects . first ( ) [EOL] self . assertEqual ( new_item . list , new_list ) [EOL] [EOL] def test_lists_can_have_owners ( self ) : [EOL] List ( owner = User ( ) ) [EOL] [EOL] def test_list_owner_is_optional ( self ) : [EOL] List ( ) . full_clean ( ) [EOL] [EOL] def test_create_new_optionally_saves_owner ( self ) : [EOL] user = User . objects . create ( ) [EOL] List . create_new ( first_item_text = [string] , owner = user ) [EOL] new_list = List . objects . first ( ) [EOL] self . assertEqual ( new_list . owner , user ) [EOL] [EOL] def test_create_returns_new_list_object ( self ) : [EOL] returned = List . create_new ( first_item_text = [string] ) [EOL] new_list = List . objects . first ( ) [EOL] self . assertEqual ( returned , new_list ) [EOL] [EOL] def test_list_name_is_first_item_text ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] Item . objects . create ( list = list_ , text = [string] ) [EOL] Item . objects . create ( list = list_ , text = [string] ) [EOL] self . assertEqual ( list_ . name , [string] ) [EOL] [EOL] def test_list_can_add_shared_with ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] user = User . objects . create ( email = [string] ) [EOL] list_ . shared_with . add ( [string] ) [EOL] self . assertIn ( user , list_ . shared_with . all ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lists.models.Item$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from lists . forms import ( ExistingListItemForm , ItemForm , DUPLICATE_ITEM_ERROR , EMPTY_ITEM_ERROR ) [EOL] from lists . models import Item , List [EOL] from lists . views import home_page , new_list , user_not_found_string , view_list [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . http import HttpRequest [EOL] from django . test import TestCase [EOL] from django . urls import resolve [EOL] from django . utils . html import escape [EOL] [EOL] from unittest . mock import patch , Mock [EOL] import unittest [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] class HomePageTest ( TestCase ) : [EOL] def test_root_url_resolves_to_home_page_view ( self ) : [EOL] found = resolve ( [string] ) [EOL] self . assertEqual ( found . func , home_page ) [EOL] [EOL] def test_home_page_returns_correct_html ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_home_page_uses_item_form ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertIsInstance ( response . context [ [string] ] , ItemForm ) [EOL] [EOL] [EOL] class ListViewTest ( TestCase ) : [EOL] [EOL] def test_uses_list_template ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] response = self . client . get ( f' [string] { list_ . id } [string] ' ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_displays_only_items_for_that_list ( self ) : [EOL] correct_list = List . objects . create ( ) [EOL] Item . objects . create ( text = [string] , list = correct_list ) [EOL] Item . objects . create ( text = [string] , list = correct_list ) [EOL] other_list = List . objects . create ( ) [EOL] Item . objects . create ( text = [string] , list = other_list ) [EOL] Item . objects . create ( text = [string] , list = other_list ) [EOL] [EOL] response = self . client . get ( f' [string] { correct_list . id } [string] ' ) [EOL] [EOL] self . assertContains ( response , [string] ) [EOL] self . assertContains ( response , [string] ) [EOL] self . assertNotContains ( response , [string] ) [EOL] self . assertNotContains ( response , [string] ) [EOL] [EOL] def test_passes_correct_list_to_template ( self ) : [EOL] other_list = List . objects . create ( ) [EOL] correct_list = List . objects . create ( ) [EOL] response = self . client . get ( f' [string] { correct_list . id } [string] ' ) [EOL] self . assertEqual ( response . context [ [string] ] , correct_list ) [EOL] [EOL] def test_can_save_a_POST_request_to_an_existing_list ( self ) : [EOL] other_list = List . objects . create ( ) [EOL] correct_list = List . objects . create ( ) [EOL] [EOL] self . client . post ( f' [string] { correct_list . id } [string] ' , data = { [string] : [string] } ) [EOL] [EOL] self . assertEqual ( Item . objects . count ( ) , [number] ) [EOL] new_item = Item . objects . first ( ) [EOL] self . assertEqual ( new_item . text , [string] ) [EOL] self . assertEqual ( new_item . list , correct_list ) [EOL] [EOL] def test_redirects_to_list_view ( self ) : [EOL] other_list = List . objects . create ( ) [EOL] correct_list = List . objects . create ( ) [EOL] [EOL] response = self . client . post ( f' [string] { correct_list . id } [string] ' , data = { [string] : [string] } ) [EOL] [EOL] self . assertRedirects ( response , f' [string] { correct_list . id } [string] ' ) [EOL] [EOL] def post_invalid_input ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] return self . client . post ( f' [string] { list_ . id } [string] ' , data = { [string] : [string] } ) [EOL] [EOL] def test_for_invalid_input_nothing_saved_to_db ( self ) : [EOL] self . post_invalid_input ( ) [EOL] self . assertEqual ( Item . objects . count ( ) , [number] ) [EOL] [EOL] def test_for_invalid_input_renders_list_template ( self ) : [EOL] response = self . post_invalid_input ( ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_for_invalid_input_passes_form_to_template ( self ) : [EOL] response = self . post_invalid_input ( ) [EOL] self . assertIsInstance ( response . context [ [string] ] , ExistingListItemForm ) [EOL] [EOL] def test_for_invalid_input_shows_error_on_page ( self ) : [EOL] response = self . post_invalid_input ( ) [EOL] self . assertContains ( response , escape ( EMPTY_ITEM_ERROR ) ) [EOL] [EOL] def test_displays_item_form ( self ) : [EOL] list_ = List . objects . create ( ) [EOL] response = self . client . get ( f' [string] { list_ . id } [string] ' ) [EOL] self . assertIsInstance ( response . context [ [string] ] , ExistingListItemForm ) [EOL] self . assertContains ( response , [string] ) [EOL] [EOL] def test_duplicate_item_validation_errors_end_up_on_lists_page ( self ) : [EOL] list1 = List . objects . create ( ) [EOL] item1 = Item . objects . create ( list = list1 , text = [string] ) [EOL] response = self . client . post ( f' [string] { list1 . id } [string] ' , data = { [string] : [string] } ) [EOL] [EOL] expected_error = escape ( DUPLICATE_ITEM_ERROR ) [EOL] self . assertContains ( response , expected_error ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] self . assertEqual ( Item . objects . all ( ) . count ( ) , [number] ) [EOL] [EOL] [EOL] class NewListViewIntegratedTest ( TestCase ) : [EOL] [EOL] def test_can_save_a_POST_request ( self ) : [EOL] self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertEqual ( Item . objects . count ( ) , [number] ) [EOL] new_item = Item . objects . first ( ) [EOL] self . assertEqual ( new_item . text , [string] ) [EOL] [EOL] def test_redirects_after_POST ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } ) [EOL] new_list = List . objects . first ( ) [EOL] self . assertRedirects ( response , f' [string] { new_list . id } [string] ' ) [EOL] [EOL] def test_for_invalid_input_renders_home_template ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_validation_errors_are_shown_on_home_page ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertContains ( response , escape ( EMPTY_ITEM_ERROR ) ) [EOL] [EOL] def test_for_invalid_input_passes_form_to_template ( self ) : [EOL] response = self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertIsInstance ( response . context [ [string] ] , ItemForm ) [EOL] [EOL] def test_invalid_list_items_arent_saved ( self ) : [EOL] self . client . post ( [string] , data = { [string] : [string] } ) [EOL] self . assertEqual ( List . objects . count ( ) , [number] ) [EOL] self . assertEqual ( Item . objects . count ( ) , [number] ) [EOL] [EOL] def test_list_owner_is_saved_if_user_is_authenticated ( self ) : [EOL] user = User . objects . create ( email = [string] ) [EOL] self . client . force_login ( user ) [EOL] self . client . post ( [string] , data = { [string] : [string] } ) [EOL] list_ = List . objects . first ( ) [EOL] self . assertEqual ( list_ . owner , user ) [EOL] [EOL] [EOL] class MyListsTest ( TestCase ) : [EOL] [EOL] def test_my_lists_url_renders_my_lists_template ( self ) : [EOL] User . objects . create ( email = [string] ) [EOL] response = self . client . get ( [string] ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL] [EOL] def test_passes_correct_owner_to_template ( self ) : [EOL] User . objects . create ( email = [string] ) [EOL] correct_user = User . objects . create ( email = [string] ) [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . context [ [string] ] , correct_user ) [EOL] [EOL] @ patch ( [string] ) class NewListViewUnitTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . request = HttpRequest ( ) [EOL] self . request . POST [ [string] ] = [string] [EOL] self . request . user = Mock ( ) [EOL] [EOL] def test_passes_POST_data_to_NewListForm ( self , mockNewListForm ) : [EOL] new_list ( self . request ) [EOL] mockNewListForm . assert_called_once_with ( data = self . request . POST ) [EOL] [EOL] def test_saves_form_with_owner_if_form_valid ( self , mockNewListForm ) : [EOL] mock_form = mockNewListForm . return_value [EOL] mock_form . is_valid . return_value [EOL] new_list ( self . request ) [EOL] mock_form . save . assert_called_once_with ( owner = self . request . user ) [EOL] [EOL] @ patch ( [string] ) def test_redirects_to_form_returned_object_if_form_valid ( self , mock_redirect , mockNewListForm ) : [EOL] mock_form = mockNewListForm . return_value [EOL] mock_form . is_valid . return_value = True [EOL] [EOL] response = new_list ( self . request ) [EOL] [EOL] self . assertEqual ( response , mock_redirect . return_value ) [EOL] mock_redirect . assert_called_once_with ( mock_form . save . return_value ) [EOL] [EOL] @ patch ( [string] ) def test_renders_home_template_with_form_if_form_invalid ( self , mock_render , mockNewListForm ) : [EOL] mock_form = mockNewListForm . return_value [EOL] mock_form . is_valid . return_value = False [EOL] [EOL] response = new_list ( self . request ) [EOL] [EOL] self . assertEqual ( response , mock_render . return_value ) [EOL] mock_render . assert_called_once_with ( self . request , [string] , { [string] : mock_form } ) [EOL] [EOL] def test_does_not_save_if_form_invalid ( self , mockNewListForm ) : [EOL] mock_form = mockNewListForm . return_value [EOL] mock_form . is_valid . return_value = False [EOL] new_list ( self . request ) [EOL] self . assertFalse ( mock_form . save . called ) [EOL] [EOL] [EOL] class ShareListTest ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . request = HttpRequest ( ) [EOL] self . request . POST [ [string] ] = [string] [EOL] self . request . user = User . objects . create ( email = [string] ) [EOL] new_list ( self . request ) [EOL] self . list = List . objects . first ( ) [EOL] [EOL] def test_post_redirects_to_lists_page ( self ) : [EOL] response = self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : self . request . user . email } ) [EOL] self . assertRedirects ( response , f' [string] { self . list . id } [string] ' ) [EOL] [EOL] def test_add_list_owner_to_shared_with ( self ) : [EOL] self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : self . request . user . email } ) [EOL] self . assertIn ( self . request . user , self . list . shared_with . all ( ) ) [EOL] [EOL] def test_add_another_user_to_shared_with ( self ) : [EOL] sharee = User . objects . create ( email = [string] ) [EOL] self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : sharee . email } ) [EOL] self . assertIn ( sharee , self . list . shared_with . all ( ) ) [EOL] [EOL] def test_add_invalid_user_to_shared_with_shows_error ( self ) : [EOL] invalid_user_email = [string] [EOL] response = self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : invalid_user_email } ) [EOL] self . assertContains ( response , escape ( user_not_found_string ( invalid_user_email ) ) ) [EOL] [EOL] def test_add_invalid_user_to_shared_with_has_no_effect ( self ) : [EOL] num_prev_shared_with = len ( self . list . shared_with . all ( ) ) [EOL] self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : [string] } ) [EOL] self . assertEqual ( num_prev_shared_with , len ( self . list . shared_with . all ( ) ) ) [EOL] [EOL] def test_list_view_shows_shared_with_users ( self ) : [EOL] sharee = User . objects . create ( email = [string] ) [EOL] self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : sharee . email } ) [EOL] response = self . client . get ( f' [string] { self . list . id }' , follow = True ) [EOL] self . assertContains ( response , escape ( sharee . email ) ) [EOL] [EOL] def test_shared_with_user_can_add_to_list ( self ) : [EOL] sharee = User . objects . create ( email = [string] ) [EOL] self . client . post ( f' [string] { self . list . id } [string] ' , data = { [string] : self . list . id , [string] : sharee . email } ) [EOL] sharee_request = HttpRequest ( ) [EOL] sharee_request . user = sharee [EOL] sharee_request . method = [string] [EOL] sharee_request . POST [ [string] ] = [string] [EOL] [comment] [EOL] view_list ( sharee_request , self . list . id ) [EOL] response = self . client . get ( f' [string] { self . list . id }' , follow = True ) [EOL] self . assertContains ( response , escape ( [string] ) ) [EOL] [EOL] def test_not_shared_with_user_cannot_add_to_list ( self ) : [EOL] not_sharee_request = HttpRequest ( ) [EOL] not_sharee_request . user = User . objects . create ( email = [string] ) [EOL] not_sharee_request . method = [string] [EOL] not_sharee_request . POST [ [string] ] = [string] [EOL] [comment] [EOL] view_list ( not_sharee_request , self . list . id ) [EOL] response = self . client . get ( f' [string] { self . list . id }' , follow = True ) [EOL] self . assertNotContains ( response , escape ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functional_tests [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] from selenium . webdriver . common . keys import Keys [EOL] [EOL] [EOL] class LayoutAndStylingTest ( FunctionalTest ) : [EOL] [docstring] [EOL] [EOL] def test_layout_and_styling ( self ) : [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] self . browser . set_window_size ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] list_page = ListPage ( self ) [EOL] inputbox = list_page . get_item_input_box ( ) [EOL] self . assertAlmostEqual ( inputbox . location [ [string] ] + inputbox . size [ [string] ] / [number] , [number] , delta = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] inputbox . send_keys ( [string] ) [EOL] inputbox . send_keys ( Keys . ENTER ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] inputbox = list_page . get_item_input_box ( ) [EOL] self . assertAlmostEqual ( inputbox . location [ [string] ] + inputbox . size [ [string] ] / [number] , [number] , delta = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $typing.Any$ 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] [EOL] [EOL] class MyListsTest ( FunctionalTest ) : [EOL] [docstring] [EOL] [EOL] def test_logged_in_users_lists_are_saved_as_my_lists ( self ) : [EOL] [comment] [EOL] self . create_pre_authenticated_session ( [string] ) [EOL] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) . add_list_item ( [string] ) [EOL] list_page . add_list_item ( [string] ) [EOL] first_list_url = self . browser . current_url [EOL] [EOL] [comment] [EOL] list_page . get_my_lists_element ( ) . click ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . wait_for ( lambda : list_page . get_list_link ( [string] ) ) [EOL] list_page . get_list_link ( [string] ) . click ( ) [EOL] self . wait_for ( lambda : self . assertEqual ( self . browser . current_url , first_list_url ) ) [EOL] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page . add_list_item ( [string] ) [EOL] second_list_url = self . browser . current_url [EOL] [EOL] [comment] [EOL] list_page . get_my_lists_element ( ) . click ( ) [EOL] self . wait_for ( lambda : list_page . get_list_link ( [string] ) ) [EOL] list_page . get_list_link ( [string] ) . click ( ) [EOL] self . wait_for ( lambda : self . assertEqual ( self . browser . current_url , second_list_url ) ) [EOL] [EOL] [comment] [EOL] self . browser . find_element_by_link_text ( [string] ) . click ( ) [EOL] self . wait_for ( lambda : self . assertEqual ( self . browser . find_elements_by_link_text ( [string] ) , [ ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] from django . conf import settings [EOL] from django . contrib . staticfiles . testing import StaticLiveServerTestCase [EOL] from selenium import webdriver [EOL] from selenium . common . exceptions import WebDriverException [EOL] from selenium . webdriver . common . keys import Keys [EOL] from . server_tools import reset_database [EOL] from . server_tools import create_session_on_server [EOL] from . management . commands . create_session import ( create_pre_authenticated_session ) [EOL] [EOL] [EOL] import time [EOL] import os [EOL] [EOL] MAX_WAIT = [number] [EOL] [EOL] SCREEN_DUMP_LOCATION = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] [EOL] [EOL] def wait ( fun ) : [EOL] [docstring] [EOL] def modified_fn ( * args , ** kwargs ) : [EOL] start_time = time . time ( ) [EOL] while True : [EOL] try : [EOL] return fun ( * args , ** kwargs ) [EOL] except ( AssertionError , WebDriverException ) as exception : [EOL] if time . time ( ) - start_time > MAX_WAIT : [EOL] raise exception [EOL] time . sleep ( [number] ) [EOL] return modified_fn [EOL] [EOL] [EOL] class FunctionalTest ( StaticLiveServerTestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . browser = webdriver . Chrome ( ) [EOL] self . staging_server = os . environ . get ( [string] ) [EOL] if self . staging_server : [EOL] self . live_server_url = [string] + self . staging_server [EOL] reset_database ( self . staging_server ) [EOL] [EOL] def tearDown ( self ) : [EOL] if self . _test_has_failed ( ) : [EOL] if not os . path . exists ( SCREEN_DUMP_LOCATION ) : [EOL] os . makedirs ( SCREEN_DUMP_LOCATION ) [EOL] for ix , handle in enumerate ( self . browser . window_handles ) : [EOL] self . _windowid = ix [EOL] self . browser . switch_to_window ( handle ) [EOL] self . take_screenshot ( ) [EOL] self . dump_html ( ) [EOL] self . browser . quit ( ) [EOL] super ( ) . tearDown ( ) [EOL] [EOL] def _test_has_failed ( self ) : [EOL] return any ( error for ( method , error ) in self . _outcome . errors ) [EOL] [EOL] def take_screenshot ( self ) : [EOL] filename = self . _get_filename ( ) + [string] [EOL] print ( [string] , filename ) [EOL] self . browser . get_screenshot_as_file ( filename ) [EOL] [EOL] def dump_html ( self ) : [EOL] filename = self . _get_filename ( ) + [string] [EOL] print ( [string] , filename ) [EOL] with open ( filename , [string] ) as f : [EOL] f . write ( self . browser . page_source ) [EOL] [EOL] def _get_filename ( self ) : [EOL] timestamp = datetime . now ( ) . isoformat ( ) . replace ( [string] , [string] ) [ : [number] ] [EOL] return [string] . format ( folder = SCREEN_DUMP_LOCATION , classname = self . __class__ . __name__ , method = self . _testMethodName , windowid = self . _windowid , timestamp = timestamp ) [EOL] [EOL] def get_item_input_box ( self ) : [EOL] return self . browser . find_element_by_id ( [string] ) [EOL] [EOL] @ wait def wait_for_row_in_list_table ( self , row_text ) : [EOL] table = self . browser . find_element_by_id ( [string] ) [EOL] rows = table . find_elements_by_tag_name ( [string] ) [EOL] self . assertIn ( row_text , [ row . text for row in rows ] ) [EOL] [EOL] @ wait def wait_for ( self , fn ) : [EOL] return fn ( ) [EOL] [EOL] @ wait def wait_to_be_logged_in ( self , email ) : [EOL] self . browser . find_element_by_link_text ( [string] ) [EOL] navbar = self . browser . find_element_by_css_selector ( [string] ) [EOL] self . assertIn ( email , navbar . text ) [EOL] [EOL] @ wait def wait_to_be_logged_out ( self , email ) : [EOL] self . browser . find_element_by_name ( [string] ) [EOL] navbar = self . browser . find_element_by_css_selector ( [string] ) [EOL] self . assertNotIn ( email , navbar . text ) [EOL] [EOL] def add_list_item ( self , item_text ) : [EOL] num_rows = len ( self . browser . find_elements_by_css_selector ( ( [string] ) ) ) [EOL] self . get_item_input_box ( ) . send_keys ( item_text ) [EOL] self . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] item_number = num_rows + [number] [EOL] self . wait_for_row_in_list_table ( f'{ item_number } [string] { item_text }' ) [EOL] [EOL] def create_pre_authenticated_session ( self , email ) : [EOL] if self . staging_server : [EOL] session_key = create_session_on_server ( self . staging_server , email ) [EOL] else : [EOL] session_key = create_pre_authenticated_session ( email ) [EOL] [comment] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url + [string] ) [EOL] self . browser . add_cookie ( dict ( name = settings . SESSION_COOKIE_NAME , value = session_key , path = [string] , ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functional_tests [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] [EOL] from selenium import webdriver [EOL] from selenium . webdriver . common . keys import Keys [EOL] [EOL] [EOL] class NewVisitorTest ( FunctionalTest ) : [EOL] [docstring] [EOL] def test_can_start_a_list_for_one_user ( self ) : [EOL] [comment] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] [EOL] [comment] [EOL] self . assertIn ( [string] , self . browser . title ) [EOL] header_text = self . browser . find_element_by_tag_name ( [string] ) . text [EOL] self . assertIn ( [string] , header_text ) [EOL] [EOL] [comment] [EOL] list_page = ListPage ( self ) [EOL] inputbox = list_page . get_item_input_box ( ) [EOL] self . assertEqual ( inputbox . get_attribute ( [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] list_page . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] inputbox = list_page . get_item_input_box ( ) [EOL] inputbox . send_keys ( [string] ) [EOL] inputbox . send_keys ( Keys . ENTER ) [EOL] [EOL] [comment] [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] [EOL] def test_multiple_users_can_start_lists_at_different_urls ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) [EOL] list_page . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] edith_list_url = self . browser . current_url [EOL] self . assertRegex ( edith_list_url , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . browser . quit ( ) [EOL] self . browser = webdriver . Chrome ( ) [EOL] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] page_text = self . browser . find_element_by_tag_name ( [string] ) . text [EOL] self . assertNotIn ( [string] , page_text ) [EOL] self . assertNotIn ( [string] , page_text ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] list_page = ListPage ( self ) [EOL] list_page . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] francis_list_url = self . browser . current_url [EOL] self . assertRegex ( francis_list_url , [string] ) [EOL] self . assertNotEqual ( francis_list_url , edith_list_url ) [EOL] [EOL] [comment] [EOL] page_text = self . browser . find_element_by_tag_name ( [string] ) . text [EOL] self . assertNotIn ( [string] , page_text ) [EOL] self . assertIn ( [string] , page_text ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $typing.Any$ 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from fabric . api import run [EOL] from fabric . context_managers import cd , settings , shell_env [EOL] [EOL] [EOL] def _get_manage_dot_py ( host ) : [EOL] return f' [string] { host } [string] { host } [string] ' [EOL] [EOL] [EOL] def _get_path ( host ) : [EOL] return f' [string] { host } [string] ' [EOL] [EOL] [EOL] def reset_database ( host ) : [EOL] with settings ( host_string = f' [string] { host }' ) : [EOL] with cd ( _get_path ( host ) ) : [EOL] run ( f' [string] ' ) [EOL] [EOL] [EOL] def _get_server_env_vars ( host ) : [EOL] env_lines = run ( f' [string] { host } [string] ' ) . splitlines ( ) [EOL] return dict ( l . split ( [string] ) for l in env_lines if l ) [EOL] [EOL] [EOL] def create_session_on_server ( host , email ) : [EOL] with settings ( host_string = f' [string] { host }' ) : [EOL] env_vars = _get_server_env_vars ( host ) [EOL] with shell_env ( ** env_vars ) : [EOL] with cd ( _get_path ( host ) ) : [EOL] session_key = run ( f' [string] { email }' ) [EOL] return session_key . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class MyListsPage ( object ) : [EOL] [EOL] def __init__ ( self , test ) : [EOL] self . test = test [EOL] [EOL] def go_to_my_lists_page ( self ) : [EOL] self . test . browser . get ( self . test . live_server_url ) [EOL] self . test . browser . find_element_by_link_text ( [string] ) . click ( ) [EOL] self . test . wait_for ( lambda : self . test . assertEqual ( self . test . browser . find_element_by_tag_name ( [string] ) . text , [string] ) ) [EOL] return self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from selenium . webdriver . common . keys import Keys [EOL] from . base import wait [EOL] [EOL] [EOL] class ListPage ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , test ) : [EOL] self . test = test [EOL] [EOL] def get_table_rows ( self ) : [EOL] return self . test . browser . find_elements_by_css_selector ( [string] ) [EOL] [EOL] @ wait def wait_for_row_in_list_table ( self , item_text , item_number ) : [EOL] expected_row_text = f'{ item_number } [string] { item_text }' [EOL] rows = self . get_table_rows ( ) [EOL] self . test . assertIn ( expected_row_text , [ row . text for row in rows ] ) [EOL] [EOL] def get_item_input_box ( self ) : [EOL] return self . test . browser . find_element_by_id ( [string] ) [EOL] [EOL] def add_list_item ( self , item_text ) : [EOL] new_item_no = len ( self . get_table_rows ( ) ) + [number] [EOL] self . get_item_input_box ( ) . send_keys ( item_text ) [EOL] self . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] self . wait_for_row_in_list_table ( item_text , new_item_no ) [EOL] return self [EOL] [EOL] def get_share_box ( self ) : [EOL] return self . test . browser . find_element_by_css_selector ( [string] ) [EOL] [EOL] def get_shared_with_list ( self ) : [EOL] return self . test . browser . find_elements_by_css_selector ( [string] ) [EOL] [EOL] def share_list_with ( self , email ) : [EOL] self . get_share_box ( ) . send_keys ( email ) [EOL] self . get_share_box ( ) . send_keys ( Keys . ENTER ) [EOL] self . test . wait_for ( lambda : self . test . assertIn ( email , [ item . text for item in self . get_shared_with_list ( ) ] ) ) [EOL] [EOL] def get_error_element ( self ) : [EOL] return self . test . browser . find_element_by_css_selector ( [string] ) [EOL] [EOL] def get_invalid_input_error_element ( self ) : [EOL] return self . test . browser . find_element_by_css_selector ( [string] ) [EOL] [EOL] def get_valid_input_message_element ( self ) : [EOL] return self . test . browser . find_element_by_css_selector ( [string] ) [EOL] [EOL] duplicate_item_text = [string] [EOL] [EOL] def get_email_input_box ( self ) : [EOL] return self . test . browser . find_element_by_name ( [string] ) [EOL] [EOL] def get_my_lists_element ( self ) : [EOL] return self . test . browser . find_element_by_link_text ( [string] ) [EOL] [EOL] def get_list_link ( self , list_name ) : [EOL] return self . test . browser . find_element_by_link_text ( list_name ) [EOL] [EOL] def get_list_owner ( self ) : [EOL] return self . test . browser . find_element_by_id ( [string] ) . text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functional_tests [EOL] from selenium . webdriver . common . keys import Keys [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] [EOL] [EOL] class ItemValidationTest ( FunctionalTest ) : [EOL] [EOL] [EOL] def test_cannot_add_empty_list_items ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . wait_for ( list_page . get_invalid_input_error_element ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . send_keys ( [string] ) [EOL] self . wait_for ( list_page . get_valid_input_message_element ) [EOL] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] [EOL] [comment] [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] self . wait_for ( list_page . get_invalid_input_error_element ) [EOL] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . send_keys ( [string] ) [EOL] self . wait_for ( list_page . get_valid_input_message_element ) [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL] [EOL] def test_cannot_add_duplicate_items ( self ) : [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . send_keys ( [string] ) [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] [EOL] [comment] [EOL] self . wait_for ( lambda : self . assertEqual ( list_page . get_error_element ( ) . text , list_page . duplicate_item_text ) ) [EOL] [EOL] def test_error_messages_are_cleared_on_input ( self ) : [EOL] [comment] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) . add_list_item ( [string] ) [EOL] list_page . get_item_input_box ( ) . send_keys ( [string] ) [EOL] list_page . get_item_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] [EOL] self . wait_for ( lambda : self . assertTrue ( list_page . get_error_element ( ) . is_displayed ( ) ) ) [EOL] [EOL] [comment] [EOL] list_page . get_item_input_box ( ) . clear ( ) [EOL] list_page . get_item_input_box ( ) . send_keys ( [string] ) [EOL] [EOL] [comment] [EOL] self . wait_for ( lambda : self . assertFalse ( list_page . get_error_element ( ) . is_displayed ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from selenium import webdriver [EOL] from selenium . common . exceptions import WebDriverException [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] from . my_lists_page import MyListsPage [EOL] [EOL] def quit_if_possible ( browser ) : [EOL] [docstring] [EOL] try : [EOL] browser . quit ( ) [EOL] except WebDriverException : [EOL] pass [EOL] [EOL] [EOL] class SharingTest ( FunctionalTest ) : [EOL] [EOL] def test_can_share_a_list_with_another_user ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] self . create_pre_authenticated_session ( [string] ) [EOL] edith_browser = self . browser [EOL] self . addCleanup ( lambda : quit_if_possible ( edith_browser ) ) [EOL] [EOL] [comment] [EOL] oni_browser = webdriver . Chrome ( ) [EOL] self . addCleanup ( lambda : quit_if_possible ( oni_browser ) ) [EOL] self . browser = oni_browser [EOL] self . create_pre_authenticated_session ( [string] ) [EOL] [EOL] [comment] [EOL] self . browser = edith_browser [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] share_box = list_page . get_share_box ( ) [EOL] self . assertEqual ( share_box . get_attribute ( [string] ) , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] list_page . share_list_with ( [string] ) [EOL] [EOL] [comment] [EOL] self . browser = oni_browser [EOL] MyListsPage ( self ) . go_to_my_lists_page ( ) [EOL] [EOL] [comment] [EOL] self . browser . find_element_by_link_text ( [string] ) . click ( ) [EOL] [EOL] [comment] [EOL] self . wait_for ( lambda : self . assertEqual ( list_page . get_list_owner ( ) , [string] ) ) [EOL] [EOL] [comment] [EOL] list_page . add_list_item ( [string] ) [EOL] [EOL] [comment] [EOL] self . browser = edith_browser [EOL] self . browser . refresh ( ) [EOL] list_page . wait_for_row_in_list_table ( [string] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Optional , Match , Any , List [EOL] import typing [EOL] import poplib [EOL] import functional_tests [EOL] from django . core import mail [EOL] from selenium . webdriver . common . keys import Keys [EOL] import os [EOL] import poplib [EOL] import re [EOL] import time [EOL] [EOL] [EOL] from . base import FunctionalTest [EOL] from . list_page import ListPage [EOL] [EOL] SUBJECT = [string] [EOL] [EOL] [EOL] class LoginTest ( FunctionalTest ) : [EOL] [EOL] def wait_for_email ( self , test_email , subject ) : [EOL] if not self . staging_server : [EOL] email = mail . outbox [ [number] ] [EOL] self . assertIn ( test_email , email . to ) [EOL] self . assertEqual ( subject , email . subject ) [EOL] return email . body [EOL] [EOL] email_id = None [EOL] start = time . time ( ) [EOL] inbox = poplib . POP3_SSL ( [string] ) [EOL] time . sleep ( [number] ) [EOL] try : [EOL] inbox . user ( test_email ) [EOL] inbox . pass_ ( os . environ [ [string] ] ) [EOL] while time . time ( ) - start < [number] : [EOL] [comment] [EOL] count , _ = inbox . stat ( ) [EOL] for i in reversed ( range ( max ( [number] , count - [number] ) , count + [number] ) ) : [EOL] _ , lines , _ = inbox . retr ( i ) [EOL] lines = [ l . decode ( [string] ) for l in lines ] [EOL] if f' [string] { subject }' in lines : [EOL] email_id = i [EOL] body = [string] . join ( lines ) [EOL] return body [EOL] time . sleep ( [number] ) [EOL] finally : [EOL] if email_id : [EOL] inbox . dele ( email_id ) [EOL] inbox . quit ( ) [EOL] [EOL] [EOL] def test_can_get_email_link_to_log_in ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if self . staging_server : [EOL] test_email = [string] [EOL] else : [EOL] test_email = [string] [EOL] [EOL] self . browser . get ( self . live_server_url ) [EOL] list_page = ListPage ( self ) [EOL] list_page . get_email_input_box ( ) . send_keys ( test_email ) [EOL] list_page . get_email_input_box ( ) . send_keys ( Keys . ENTER ) [EOL] [EOL] [comment] [EOL] self . wait_for ( lambda : self . assertIn ( [string] , self . browser . find_element_by_tag_name ( [string] ) . text ) ) [EOL] [EOL] [comment] [EOL] body = self . wait_for_email ( test_email , SUBJECT ) [EOL] [EOL] [comment] [EOL] self . assertIn ( [string] , body ) [EOL] url_search = re . search ( [string] , body ) [EOL] if not url_search : [EOL] self . fail ( f' [string] { body }' ) [EOL] url = url_search . group ( [number] ) [EOL] self . assertIn ( self . live_server_url , url ) [EOL] [EOL] [comment] [EOL] self . browser . get ( url ) [EOL] [EOL] [comment] [EOL] self . wait_to_be_logged_in ( email = test_email ) [EOL] [EOL] [comment] [EOL] self . browser . find_element_by_link_text ( [string] ) . click ( ) [EOL] [EOL] [comment] [EOL] self . wait_to_be_logged_out ( email = test_email ) [EOL] [EOL] navbar = self . browser . find_element_by_css_selector ( [string] ) [EOL] self . assertNotIn ( test_email , navbar . text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $poplib.POP3_SSL$ 0 0 0 $builtins.int$ 0 0 $poplib.POP3_SSL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $functional_tests.list_page.ListPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth import BACKEND_SESSION_KEY , SESSION_KEY , get_user_model [EOL] from django . contrib . sessions . backends . db import SessionStore [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] session_key = create_pre_authenticated_session ( options [ [string] ] ) [EOL] self . stdout . write ( session_key ) [EOL] [EOL] [EOL] def create_pre_authenticated_session ( email ) : [EOL] user = User . objects . create ( email = email ) [EOL] session = SessionStore ( ) [EOL] session [ SESSION_KEY ] = user . pk [EOL] session [ BACKEND_SESSION_KEY ] = settings . AUTHENTICATION_BACKENDS [ [number] ] [EOL] session . save ( ) [EOL] return session . session_key [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any , Union , Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] if [string] in os . environ : [EOL] DEBUG = False [EOL] SECRET_KEY = os . environ [ [string] ] [EOL] ALLOWED_HOSTS = [ os . environ [ [string] ] ] [EOL] else : [EOL] DEBUG = True [EOL] SECRET_KEY = [string] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] AUTHENTICATION_BACKENDS = [ [string] , ] [EOL] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_HOST_USER = [string] [EOL] EMAIL_HOST_PASSWORD = os . environ . get ( [string] ) [EOL] EMAIL_PORT = [number] [EOL] EMAIL_USE_TLS = True [EOL] [EOL] LOGGING = { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] , [string] : [string] , } , } , [string] : { [string] : { [string] : [ [string] ] , } , } , [string] : { [string] : [string] } } [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[builtins.str]]],typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]],typing.Dict[builtins.str,builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import include , url [EOL] from lists import views as list_views [EOL] from lists import urls as list_urls [EOL] from lists import api_urls [EOL] from accounts import urls as accounts_urls [EOL] [EOL] urlpatterns = [ url ( [string] , list_views . home_page , name = [string] ) , url ( [string] , include ( list_urls ) ) , url ( [string] , include ( accounts_urls ) ) , url ( [string] , include ( api_urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0