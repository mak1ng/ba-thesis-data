	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . upload_image ) , path ( [string] , views . get_qiniu_token_view ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UploadConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import uuid [EOL] [EOL] from django . conf import settings [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . views . decorators . http import require_GET [EOL] from django . views . decorators . http import require_POST [EOL] [EOL] from acl . auth_wrap import token_required [EOL] from utils . api_response import APIResponse [EOL] from utils . api_response import APIResponseError [EOL] [comment] [EOL] from utils . qiniu_tool import get_qiniu_token [EOL] [EOL] [EOL] def handle_upload_file ( file , path ) : [EOL] with open ( path , [string] ) as destination : [EOL] for chunk in file . chunks ( ) : [EOL] destination . write ( chunk ) [EOL] [EOL] [EOL] @ require_POST @ csrf_exempt def upload_image ( r ) : [EOL] files = r . FILES [EOL] image = files . get ( [string] ) [EOL] if not image : [EOL] return APIResponseError ( [number] ) [EOL] name = image . name [EOL] try : [EOL] ext = name . rsplit ( [string] ) [ [number] ] [EOL] except IndexError : [EOL] return APIResponseError ( [number] ) [EOL] file_name = uuid . uuid4 ( ) . hex + [string] + ext [EOL] path = os . path . join ( settings . ENV_UPLOAD_PATH , [string] , file_name ) [EOL] [EOL] url = os . path . join ( settings . STATIC_URL , os . path . join ( [string] , file_name ) ) [EOL] handle_upload_file ( image , path ) [EOL] [EOL] return APIResponse ( url ) [EOL] [EOL] [EOL] @ require_GET @ csrf_exempt @ token_required def get_qiniu_token_view ( r ) : [EOL] token = get_qiniu_token ( prefix = [string] ) [EOL] return APIResponse ( token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ArticleConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import json [EOL] import os [EOL] [EOL] from django . db . models import Q [EOL] from django . utils . decorators import method_decorator [EOL] from django . views import View [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . views . decorators . http import require_POST [EOL] [EOL] from acl . auth_wrap import token_optional [EOL] from acl . auth_wrap import token_required [EOL] from utils . api_response import APIResponse [EOL] from utils . tool import parse_query_string [EOL] from . action import actions [EOL] from . models import Category [EOL] from . models import Post [EOL] from . models import Tag [EOL] [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class CategoryView ( View ) : [EOL] [EOL] def get ( self , r , * args , ** kwargs ) : [EOL] if kwargs . get ( [string] ) : [EOL] cat = Category . objects . active ( ) . get_or_api_404 ( id = kwargs . get ( [string] ) ) [EOL] return APIResponse ( cat . to_dict ( ) ) [EOL] else : [EOL] cats = Category . objects . active ( ) . all ( ) . pagination ( ) [EOL] return APIResponse ( cats ) [EOL] [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class TagView ( View ) : [EOL] [EOL] def get ( self , r , * args , ** kwargs ) : [EOL] pagination , order_by , filters , defer , search = parse_query_string ( r . GET , [string] ) [EOL] if kwargs . get ( [string] ) : [EOL] tag = Post . objects . active ( ) . defer ( * defer ) . get_or_api_404 ( id = kwargs . get ( [string] ) ) [EOL] return APIResponse ( tag . to_dict ( ) ) [EOL] else : [EOL] tags = Tag . objects . active ( ) . defer ( * defer ) . order_by ( * order_by ) . pagination ( ** pagination ) [EOL] return APIResponse ( tags ) [EOL] [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class PostView ( View ) : [EOL] @ method_decorator ( token_optional , name = [string] ) def get ( self , r , * args , ** kwargs ) : [EOL] pagination , order_by , filters , defer , search = parse_query_string ( r . GET , [string] ) [EOL] if kwargs . get ( [string] ) : [EOL] post = Post . objects . active ( ) . defer ( * defer ) . get_or_api_404 ( id = kwargs . get ( [string] ) ) [EOL] post . add_view_count ( ) [EOL] return APIResponse ( post . to_dict ( ) ) [EOL] else : [EOL] if r . user and r . user . username : [EOL] share_filters = { k : v for k , v in filters . items ( ) if k not in [ [string] , [string] , [string] ] } [EOL] query = search & ( Q ( ** filters ) | Q ( author = r . user , ** share_filters ) ) [EOL] else : [EOL] query = search & Q ( ** filters ) [EOL] posts = Post . objects . active ( query ) . defer ( * defer ) . order_by ( * order_by ) . pagination ( ** pagination ) [EOL] return APIResponse ( posts ) [EOL] [EOL] @ method_decorator ( token_required , name = [string] ) def post ( self , r , * args , ** kwargs ) : [EOL] data = json . loads ( r . body ) [EOL] [comment] [EOL] if kwargs . get ( [string] ) : [EOL] post = Post . objects . get_or_api_404 ( id = kwargs . get ( [string] ) ) . update_fields ( ** data ) [EOL] else : [EOL] post = Post . create ( ** data , author = r . user ) [EOL] return APIResponse ( post . to_dict ( ) ) [EOL] [EOL] @ method_decorator ( token_required , name = [string] ) def delete ( self , r , * args , ** kwargs ) : [EOL] if kwargs . get ( [string] ) : [EOL] Post . objects . active ( id = kwargs . get ( [string] ) ) . delete ( ) [EOL] return APIResponse ( ) [EOL] else : [EOL] return APIResponse ( code = [number] ) [EOL] [EOL] [EOL] def index ( r ) : [EOL] return APIResponse ( dict ( name = [string] , hostname = os . environ . get ( [string] , [string] ) ) ) [EOL] [EOL] [EOL] @ require_POST @ csrf_exempt def action ( r , * args , ** kwargs ) : [EOL] return actions . run_action ( r , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . PostView . as_view ( ) ) , path ( [string] , views . PostView . as_view ( ) ) , path ( [string] , views . TagView . as_view ( ) ) , path ( [string] , views . CategoryView . as_view ( ) ) , path ( [string] , views . index ) , path ( [string] , views . action ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL] from . models import Post , Tag [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] import acl . default_acl [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import django_mysql . models [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . CharField ( max_length = [number] , null = True , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( default = [string] , max_length = [number] , verbose_name = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . SmallIntegerField ( verbose_name = [string] ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . UUIDField ( verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . CharField ( max_length = [number] , null = True , verbose_name = [string] ) ) , ( [string] , models . CharField ( db_index = True , max_length = [number] , unique = True ) ) , ( [string] , models . CharField ( db_index = True , default = [string] , max_length = [number] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . CharField ( db_index = True , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . ManyToManyField ( to = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL , verbose_name = [string] ) ) , ] , options = { [string] : False , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now = True , verbose_name = [string] ) ) , ( [string] , django_mysql . models . JSONField ( default = acl . default_acl . row_acl ) ) , ( [string] , models . BooleanField ( default = True , verbose_name = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . CASCADE , to = [string] , verbose_name = [string] ) ) , ] , options = { [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import builtins [EOL] from django . conf import settings [EOL] from qiniu import Auth [EOL] [EOL] q = Auth ( settings . ENV_QINIU_AK , settings . ENV_QINIU_SK ) [EOL] [EOL] [EOL] def get_qiniu_token ( prefix = [string] , bucket_name = settings . ENV_QINIU_DEFAULT_BUCKET ) : [EOL] [docstring] [EOL] prefix = prefix . strip ( [string] ) [EOL] if prefix : [EOL] save_key = f"{ prefix } [string] " [EOL] else : [EOL] save_key = [string] [EOL] base_url = settings . QINIU_BUCKET_URL_MAP . get ( bucket_name , [string] ) [EOL] [EOL] policy = { [string] : save_key , [string] : [string] . replace ( [string] , [string] ) . replace ( [string] , [string] ) . format ( base_url ) } [EOL] token = q . upload_token ( bucket_name , policy = policy ) [EOL] return token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from django . db . models import Q [EOL] [EOL] [EOL] def get_model_search ( search_text , model_name ) : [EOL] search_map = { [string] : Q ( desc__icontains = search_text ) | Q ( title__icontains = search_text ) } [EOL] return search_map . get ( model_name , Q ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Q$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] _code = { - [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) , [number] : dict ( en = [string] , zh = [string] ) } [EOL] [EOL] BLANK_MSG = dict ( en = [string] , zh = [string] ) [EOL] [EOL] [EOL] def get_msg ( code = [number] , lang = [string] ) : [EOL] [docstring] [EOL] msgs = _code . get ( code ) or BLANK_MSG [EOL] msg = msgs . get ( lang , [string] ) [EOL] return msg [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AclConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import re [EOL] [EOL] from django . conf import settings [EOL] from functools import wraps [EOL] from utils . api_response import APIResponseError [EOL] from acl . models import UserProfile [EOL] import jwt [EOL] [EOL] [EOL] def token_required ( view_func ) : [EOL] @ wraps ( view_func ) def _wrapped_view ( request , * args , ** kwargs ) : [EOL] authorization = request . headers . get ( [string] ) [EOL] if not authorization : [EOL] return APIResponseError ( [number] ) [EOL] try : [EOL] authorization = re . sub ( [string] , [string] , authorization ) [EOL] request_jwt = jwt . decode ( authorization , settings . SECRET_KEY , True ) [EOL] except jwt . ExpiredSignatureError : [EOL] return APIResponseError ( [number] ) [EOL] except jwt . DecodeError : [EOL] return APIResponseError ( [number] ) [EOL] else : [EOL] request . user = UserProfile . objects . get ( username = request_jwt . get ( [string] , { } ) . get ( [string] ) ) [EOL] return view_func ( request , * args , ** kwargs ) [EOL] return _wrapped_view [EOL] [EOL] [EOL] def token_optional ( view_func ) : [EOL] @ wraps ( view_func ) def _wrapped_view ( request , * args , ** kwargs ) : [EOL] authorization = request . headers . get ( [string] ) [EOL] if authorization : [EOL] try : [EOL] authorization = re . sub ( [string] , [string] , authorization ) [EOL] request_jwt = jwt . decode ( authorization , settings . SECRET_KEY , True ) [EOL] except Exception : [EOL] pass [EOL] else : [EOL] request . user = UserProfile . objects . get ( username = request_jwt . get ( [string] , { } ) . get ( [string] ) ) [EOL] return view_func ( request , * args , ** kwargs ) [EOL] return _wrapped_view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CQIConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import QueryView [EOL] [EOL] urlpatterns = [ path ( [string] , QueryView . as_view ( ) ) , path ( [string] , QueryView . as_view ( ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import utils [EOL] import typing [EOL] import builtins [EOL] import json [EOL] [EOL] from django . apps import apps [EOL] from django . db . models import Q [EOL] from django . shortcuts import render [EOL] from django . utils . decorators import method_decorator [EOL] from django . views import View [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] from acl . auth_wrap import token_required [EOL] from utils . api_response import APIError , APIResponse , APIResponseError [EOL] from utils . base_model import BaseModel [EOL] from utils . tool import parse_query_string [EOL] [EOL] [comment] [EOL] [EOL] [EOL] model_name_map = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] @ method_decorator ( csrf_exempt , name = [string] ) class QueryView ( View ) : [EOL] [docstring] [EOL] [EOL] def get_model ( self , model_name ) : [EOL] [docstring] [EOL] app_lable__model_name = model_name_map . get ( model_name ) [EOL] if not app_lable__model_name : [EOL] raise APIError ( [number] ) [EOL] model = apps . get_model ( app_lable__model_name ) [EOL] return model [EOL] [EOL] def get ( self , r , * args , ** kwargs ) : [EOL] [docstring] [EOL] model_name = kwargs . get ( [string] ) [EOL] model = self . get_model ( model_name ) [EOL] [EOL] _id = kwargs . get ( [string] ) [EOL] if _id : [EOL] data = model . objects . active ( ) . get_or_api_404 ( id = _id ) . to_dict ( ) [EOL] else : [EOL] query = parse_query_string ( r . GET , model_name ) [EOL] data = model . objects . active ( query . search , ** query . filters ) . defer ( * query . defer ) . order_by ( * query . order_by ) . pagination ( ** query . pagination ) [EOL] [EOL] return APIResponse ( data ) [EOL] [EOL] @ method_decorator ( token_required , name = [string] ) def post ( self , r , * args , ** kwargs ) : [EOL] [docstring] [EOL] model_name = kwargs . get ( [string] ) [EOL] model = self . get_model ( model_name ) [EOL] data = json . loads ( r . body ) [EOL] [EOL] _id = kwargs . get ( [string] ) [EOL] if _id : [EOL] obj = model . objects . get_or_api_404 ( id = _id ) . update_fields ( ** data ) [EOL] else : [EOL] obj = model . create ( ** data , auth = r . user ) [EOL] [EOL] return APIResponse ( obj . to_dict ( ) ) [EOL] [EOL] @ method_decorator ( token_required , name = [string] ) def delete ( self , r , * args , ** kwargs ) : [EOL] [docstring] [EOL] model_name = kwargs . get ( [string] ) [EOL] model = self . get_model ( model_name ) [EOL] [EOL] _id = kwargs . get ( [string] ) [EOL] if _id : [EOL] obj = model . objects . active ( ) . get_or_api_404 ( id = _id ) . delete ( ) [EOL] else : [EOL] raise APIError ( [number] ) [EOL] return APIResponse ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $utils.base_model.BaseModel$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0