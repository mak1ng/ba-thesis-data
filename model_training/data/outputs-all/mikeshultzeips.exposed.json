[docstring] [EOL] from sqlalchemy import Column , ForeignKey , Integer , String , Boolean [EOL] from alembic import op [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] tag_table_name = [string] [EOL] eip_tag_table_name = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_table ( tag_table_name , Column ( [string] , String ( ) , primary_key = True ) , Column ( [string] , Boolean ( ) , default = True ) , ) [EOL] op . create_table ( eip_tag_table_name , Column ( [string] , Integer , primary_key = True ) , Column ( [string] , String ( [number] ) , ForeignKey ( [string] ) , nullable = False ) , Column ( [string] , Integer , ForeignKey ( [string] ) , nullable = False ) , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_table ( eip_tag_table_name ) [EOL] op . drop_table ( tag_table_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
[docstring] [EOL] from sqlalchemy import Column , ForeignKey , Integer , String , Text , DateTime [EOL] from alembic import op [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] commit_table_name = [string] [EOL] eip_commit_table_name = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_table ( commit_table_name , Column ( [string] , String ( [number] ) , primary_key = True ) , Column ( [string] , String ( ) , nullable = False ) , Column ( [string] , DateTime ( ) , nullable = False ) , Column ( [string] , Text ( ) ) , ) [EOL] op . create_table ( eip_commit_table_name , Column ( [string] , Integer , primary_key = True ) , Column ( [string] , String ( [number] ) , ForeignKey ( [string] ) , nullable = False ) , Column ( [string] , Integer , ForeignKey ( [string] ) , nullable = False ) , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_table ( eip_commit_table_name ) [EOL] op . drop_table ( commit_table_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
[docstring] [EOL] from sqlalchemy import Column , String [EOL] from alembic import op [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . add_column ( [string] , Column ( [string] , String ( ) ) ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from sqlalchemy import func , Column , Integer , Enum , Text , DateTime [EOL] from alembic import op [EOL] from eips_exposed . processor . objects import ErrorType [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] table_name = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_table ( table_name , Column ( [string] , Integer ( ) , primary_key = True ) , Column ( [string] , Enum ( ErrorType ) , nullable = False ) , Column ( [string] , DateTime , server_default = func . current_timestamp ( ) ) , Column ( [string] , Text ) , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_table ( table_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[docstring] [EOL] from sqlalchemy import Column , Integer , Enum , String , Text , DateTime [EOL] from sqlalchemy . dialects . postgresql import ARRAY [EOL] from alembic import op [EOL] from eips_exposed . processor . objects import EIPType , EIPStatus , EIPCategory [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = None [EOL] branch_labels = None [EOL] depends_on = None [EOL] table_name = [string] [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . create_table ( table_name , Column ( [string] , Integer ( ) , primary_key = True ) , Column ( [string] , Enum ( EIPType ) , nullable = False ) , Column ( [string] , String ( ) , nullable = False ) , Column ( [string] , String ( ) , nullable = False ) , Column ( [string] , Enum ( EIPStatus ) , nullable = False ) , Column ( [string] , DateTime ( ) , nullable = False ) , Column ( [string] , String ( ) ) , Column ( [string] , String ( ) ) , Column ( [string] , String ( ) ) , Column ( [string] , Enum ( EIPCategory ) ) , Column ( [string] , ARRAY ( Integer ) ) , Column ( [string] , ARRAY ( Integer ) ) , Column ( [string] , ARRAY ( Integer ) ) , Column ( [string] , String ( ) ) , Column ( [string] , Text ( ) ) , ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_table ( table_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[docstring] [EOL] from sqlalchemy import text , Column [EOL] from sqlalchemy_utils . types . ts_vector import TSVectorType [EOL] from alembic import op [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] [comment] [EOL] op . add_column ( [string] , Column ( [string] , TSVectorType , ) ) [EOL] op . create_index ( [string] , [string] , [ [string] ] , unique = False , postgresql_using = [string] ) [EOL] op . execute ( [string] ) [EOL] [EOL] [comment] [EOL] op . add_column ( [string] , Column ( [string] , TSVectorType , ) ) [EOL] op . create_index ( [string] , [string] , [ [string] ] , unique = False , postgresql_using = [string] ) [EOL] op . execute ( [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . execute ( [string] ) [EOL] op . drop_index ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL] [EOL] op . execute ( [string] ) [EOL] op . drop_index ( [string] , [string] ) [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Set [EOL] import typing [EOL] import builtins [EOL] import os [EOL] from typing import Dict , Set [EOL] from pathlib import Path [EOL] from eips_exposed . common . exceptions import ConfigurationError [EOL] [EOL] CONFIG = { [string] : [string] , [string] : os . environ . get ( [string] ) , [string] : None , [string] : os . environ . get ( [string] , [number] ) , [string] : os . environ . get ( [string] ) , } [EOL] [EOL] [EOL] def assert_required_config ( names ) : [EOL] [docstring] [EOL] for name in names : [EOL] if not CONFIG . get ( name ) : [EOL] raise ConfigurationError ( [string] . format ( name ) ) [EOL] [EOL] [EOL] REQUIRED_CONFIG = { [string] , [string] , [string] } [EOL] assert_required_config ( REQUIRED_CONFIG ) [EOL] [EOL] [comment] [EOL] CONFIG [ [string] ] = Path ( CONFIG [ [string] ] ) [comment] [EOL] CONFIG [ [string] ] = CONFIG [ [string] ] . joinpath ( [string] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Any , Optional , Match [EOL] import typing [EOL] import datetime [EOL] import re [EOL] from typing import Any , Type [EOL] from datetime import datetime [EOL] [EOL] from eips_exposed . common . config import CONFIG [EOL] from eips_exposed . common . exceptions import ConfigurationError , EIPParseError [EOL] from eips_exposed . common . logging import getLogger [EOL] [EOL] EIP_FILENAME_PATTERN = [string] [EOL] [EOL] [EOL] def type_or_none ( t , v ) : [EOL] try : [EOL] v = t ( v ) [EOL] except TypeError : [EOL] return None [EOL] else : [EOL] return v [EOL] [EOL] [EOL] def int_or_none ( v ) : [EOL] return type_or_none ( int , v ) [EOL] [EOL] [EOL] def list_of_int_or_none ( v ) : [EOL] [docstring] [EOL] if not v : [EOL] return None [EOL] [EOL] list_of_ints = [ ] [EOL] [EOL] if [string] in v : [EOL] vs = v . split ( [string] ) [EOL] for each_v in vs : [EOL] list_of_ints . append ( int_or_none ( each_v ) ) [EOL] return list_of_ints [EOL] else : [EOL] return [ int_or_none ( v ) ] [EOL] [EOL] [EOL] def datetime_or_none ( v ) : [EOL] [docstring] [EOL] if isinstance ( v , datetime ) : [EOL] return v [EOL] try : [EOL] v = datetime . strptime ( v . strip ( ) , [string] ) [EOL] except ValueError : [EOL] return None [EOL] return v [EOL] [EOL] [EOL] def eip_id_from_file ( fname ) : [EOL] [docstring] [EOL] match = re . fullmatch ( EIP_FILENAME_PATTERN , fname ) [EOL] try : [EOL] return int ( match . group ( [number] ) ) [EOL] except IndexError : [EOL] return - [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] class ConfigurationError ( AssertionError ) : pass [EOL] class EIPParseError ( SyntaxError ) : pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Any , Dict , Tuple [EOL] import typing [EOL] import eips_exposed [EOL] import tornado . web [EOL] from tornado . gen import coroutine , Return [EOL] from graphene_tornado . tornado_graphql_handler import TornadoGraphQLHandler [EOL] [EOL] from eips_exposed . server . schema import schema [EOL] from eips_exposed . common import getLogger [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] ALLOWED_ORIGINS = [ [string] , [string] , ] [EOL] [EOL] [EOL] class GraphQLHandler ( TornadoGraphQLHandler ) : [EOL] [docstring] [EOL] def set_default_headers ( self ) : [EOL] self . set_header ( [string] , [string] ) [EOL] self . set_header ( [string] , [string] ) [EOL] if self . request . headers . get ( [string] ) : [EOL] origin = self . request . headers [ [string] ] [EOL] self . set_header ( [string] , origin ) [EOL] [EOL] def options ( self ) : [EOL] if self . request . headers . get ( [string] ) in ALLOWED_ORIGINS : [EOL] self . set_status ( [number] ) [EOL] self . finish ( ) [EOL] [EOL] [EOL] class EIPSExposedApplication ( tornado . web . Application ) : [EOL] [EOL] def __init__ ( self ) : [EOL] handlers = [ ( [string] , GraphQLHandler , dict ( graphiql = True , schema = schema ) ) , ( [string] , GraphQLHandler , dict ( graphiql = True , schema = schema , batch = True ) ) , ( [string] , GraphQLHandler , dict ( graphiql = True , schema = schema ) ) ] [EOL] tornado . web . Application . __init__ ( self , handlers ) [EOL] [EOL] [EOL] app = EIPSExposedApplication ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[eips_exposed.server.app.GraphQLHandler],typing.Dict[builtins.str,builtins.bool]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Type[eips_exposed.server.app.GraphQLHandler],typing.Dict[builtins.str,builtins.bool]]]$ 0 0 0 0 $eips_exposed.server.app.EIPSExposedApplication$ 0 0 0 0 0
from . app import app [EOL]	0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from tornado . ioloop import IOLoop [EOL] from eips_exposed . common . config import CONFIG [EOL] from eips_exposed . server . app import app [EOL] from eips_exposed . common import getLogger [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] if __name__ == [string] : [EOL] log . info ( [string] . format ( CONFIG [ [string] ] ) ) [EOL] app . listen ( CONFIG [ [string] ] ) [EOL] IOLoop . instance ( ) . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import eips_exposed [EOL] from attrdict import AttrDict [EOL] from graphene import ( Schema , ObjectType , Field , ID , List , String , Int , Enum , Date , Boolean , DateTime , ) [EOL] from eips_exposed . common . db import ( joinedload , yield_session , EIP as DBEIP , Error as DBError , Commit as DBCommit , get_total_eips , get_total_commits , get_total_committers , get_total_errors , get_eip_tags , get_all_tags , get_categories_with_totals , get_statuses_with_totals , ) [EOL] from eips_exposed . processor . objects import EIPType , EIPStatus , EIPCategory , ErrorType [EOL] [EOL] [EOL] EIPCategoryField = Field ( type = Enum . from_enum ( EIPCategory ) ) [EOL] EIPStatusField = Field ( type = Enum . from_enum ( EIPStatus ) ) [EOL] [EOL] [EOL] class EIP ( ObjectType ) : [EOL] eip_id = ID ( ) [EOL] eip_type = Field ( type = Enum . from_enum ( EIPType ) ) [EOL] title = String ( ) [EOL] author = String ( ) [EOL] status = EIPStatusField [EOL] created = Date ( ) [EOL] updated = String ( ) [EOL] discussions_to = String ( ) [EOL] review_period_end = String ( ) [EOL] category = EIPCategoryField [EOL] requires = List ( Int ) [EOL] replaces = List ( Int ) [EOL] superseded_by = List ( Int ) [EOL] resolution = String ( ) [EOL] full_text = String ( ) [EOL] tags = List ( String ) [EOL] [EOL] [EOL] class Stats ( ObjectType ) : [EOL] eips = Int ( ) [EOL] commits = Int ( ) [EOL] contributors = Int ( ) [EOL] errors = Int ( ) [EOL] [EOL] [EOL] class Tag ( ObjectType ) : [EOL] tag_name = String ( ) [EOL] active = Boolean ( ) [EOL] eips_count = Int ( ) [EOL] [EOL] [EOL] class Error ( ObjectType ) : [EOL] eip_id = ID ( ) [EOL] error_type = Field ( type = Enum . from_enum ( ErrorType ) ) [EOL] when = DateTime ( ) [EOL] message = String ( ) [EOL] [EOL] [EOL] class Commit ( ObjectType ) : [EOL] commit_hash = ID ( ) [EOL] author = String ( ) [EOL] committer = String ( ) [EOL] committed_date = DateTime ( ) [EOL] message = String ( ) [EOL] [EOL] [EOL] class Category ( ObjectType ) : [EOL] category = EIPCategoryField [EOL] eip_count = Int ( ) [EOL] [EOL] [EOL] class Status ( ObjectType ) : [EOL] status = EIPStatusField [EOL] eip_count = Int ( ) [EOL] [EOL] [EOL] class Query ( ObjectType ) : [EOL] stats = Field ( Stats ) [EOL] eip = Field ( EIP , eip_id = ID ( required = True ) ) [EOL] eips = List ( EIP , limit = Int ( default_value = [number] ) , offset = Int ( default_value = [number] ) , tag = String ( ) , category = String ( ) , status = String ( ) , search = String ( ) , ) [EOL] commits = List ( Commit , limit = Int ( default_value = [number] ) , offset = Int ( default_value = [number] ) , eip_id = Int ( ) , search = String ( ) , ) [EOL] errors = List ( Error ) [EOL] tags = List ( Tag , eip_id = ID ( ) ) [EOL] categories = List ( Category ) [EOL] statuses = List ( Status ) [EOL] [EOL] def resolve_eip ( _ , info , eip_id ) : [EOL] with yield_session ( ) as sess : [EOL] return sess . query ( DBEIP ) . filter ( DBEIP . eip_id == eip_id ) . options ( joinedload ( [string] ) ) . one_or_none ( ) [EOL] [EOL] def resolve_eips ( _ , info , limit , offset , tag = None , category = None , status = None , search = None ) : [EOL] with yield_session ( ) as sess : [EOL] if tag : [EOL] return sess . query ( DBEIP ) . filter ( DBEIP . tags . any ( tag_name = tag ) ) . order_by ( DBEIP . eip_id ) . limit ( limit ) . offset ( offset ) . options ( joinedload ( [string] ) ) . all ( ) [EOL] elif category : [EOL] return sess . query ( DBEIP ) . filter ( DBEIP . category == category . upper ( ) ) . order_by ( DBEIP . eip_id ) . limit ( limit ) . offset ( offset ) . options ( joinedload ( [string] ) ) . all ( ) [EOL] elif status : [EOL] return sess . query ( DBEIP ) . filter ( DBEIP . status == status . upper ( ) ) . order_by ( DBEIP . eip_id ) . limit ( limit ) . offset ( offset ) . options ( joinedload ( [string] ) ) . all ( ) [EOL] else : [EOL] if search : [EOL] return DBEIP . search ( sess , search ) . order_by ( DBEIP . eip_id ) . limit ( limit ) . offset ( offset ) . options ( joinedload ( [string] ) ) . all ( ) [EOL] else : [EOL] return sess . query ( DBEIP ) . order_by ( DBEIP . eip_id ) . limit ( limit ) . offset ( offset ) . options ( joinedload ( [string] ) ) . all ( ) [EOL] [EOL] def resolve_commits ( _ , info , limit , offset , eip_id = None , search = None ) : [EOL] with yield_session ( ) as sess : [EOL] if eip_id : [EOL] [comment] [EOL] return sess . query ( DBCommit ) . filter ( DBCommit . eips . any ( eip_id = eip_id ) ) . order_by ( DBCommit . committed_date . desc ( ) ) . limit ( limit ) . offset ( offset ) . all ( ) [EOL] else : [EOL] if search : [EOL] return DBCommit . search ( sess , search ) . order_by ( DBCommit . committed_date . desc ( ) ) . limit ( limit ) . offset ( offset ) . all ( ) [EOL] else : [EOL] return sess . query ( DBCommit ) . order_by ( DBCommit . committed_date . desc ( ) ) . limit ( limit ) . offset ( offset ) . all ( ) [EOL] [EOL] def resolve_errors ( _ , info ) : [EOL] with yield_session ( ) as sess : [EOL] return sess . query ( DBError ) . all ( ) [EOL] [EOL] def resolve_stats ( _ , info ) : [EOL] return AttrDict ( { [string] : get_total_eips ( ) , [string] : get_total_commits ( ) , [string] : get_total_committers ( ) , [string] : get_total_errors ( ) , } ) [EOL] [EOL] def resolve_tags ( _ , info , eip_id = None ) : [EOL] if eip_id : [EOL] return get_eip_tags ( eip_id ) [EOL] else : [EOL] return get_all_tags ( ) [EOL] [EOL] def resolve_categories ( _ , info ) : [EOL] return get_categories_with_totals ( ) [EOL] [EOL] def resolve_statuses ( _ , info ) : [EOL] return get_statuses_with_totals ( ) [EOL] [EOL] [EOL] schema = Schema ( query = Query ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 $typing.Any$ 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 $typing.Any$ 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.EIP]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Stats]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Stats]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Stats]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Stats]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Tag]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Tag]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Error]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Error]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Error]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Error]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Commit]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Commit]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Commit]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Commit]$ 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Commit]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Category]$ 0 $typing.Any$ 0 $typing.Type[eips_exposed.server.schema.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Status]$ 0 $typing.Any$ 0 $typing.Type[eips_exposed.server.schema.Status]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 $typing.Type[eips_exposed.server.schema.Query]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Optional , List , Any [EOL] import typing [EOL] import pathlib [EOL] import git [EOL] import builtins [EOL] from typing import Optional , List [EOL] from pathlib import Path [EOL] from git import Repo [EOL] from git . objects . commit import Commit [EOL] from eips_exposed . common import CONFIG , getLogger [EOL] [EOL] eip_git_repo = None [EOL] log = getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_eip_repo ( ) : [EOL] [docstring] [EOL] global eip_git_repo [EOL] [EOL] if eip_git_repo is not None : [EOL] return eip_git_repo [EOL] [EOL] repo_dir = CONFIG . get ( [string] ) [EOL] [EOL] if repo_dir and repo_dir . is_dir ( ) : [EOL] eip_git_repo = Repo ( repo_dir ) [EOL] else : [EOL] eip_git_repo = clone_eip_repo ( repo_dir ) [EOL] [EOL] return eip_git_repo [EOL] [EOL] [EOL] def clone_eip_repo ( repo_dir ) : [EOL] [docstring] [EOL] origin = None [EOL] repo = None [EOL] [EOL] if not repo_dir . is_dir ( ) : [EOL] repo = Repo . clone_from ( CONFIG . get ( [string] ) , repo_dir ) [EOL] [EOL] if not repo : [EOL] repo = get_eip_repo ( ) [EOL] [EOL] if repo . bare : [EOL] origin = repo . create_remote ( [string] , url = CONFIG . get ( [string] ) ) [EOL] assert origin . exists ( ) , [string] [EOL] for fetch_info in origin . fetch ( ) : [EOL] log . info ( [string] % ( fetch_info . ref , fetch_info . commit ) ) [EOL] master = repo . create_head ( [string] , origin . refs . master ) [EOL] repo . head . set_reference ( master ) [EOL] else : [EOL] origin = repo . remote ( ) [EOL] for fetch_info in origin . fetch ( ) : [EOL] log . info ( [string] % ( fetch_info . ref , fetch_info . commit ) ) [EOL] [EOL] return repo [EOL] [EOL] [EOL] def latest_commit_hash ( ) : [EOL] [docstring] [EOL] repo = get_eip_repo ( ) [EOL] return repo . refs . master . commit . hexsha [EOL] [EOL] [EOL] def file_history ( fil ) : [EOL] [docstring] [EOL] repo = get_eip_repo ( ) [EOL] commits = [ ] [EOL] for commit in repo . iter_commits ( [string] , paths = fil ) : [EOL] commits . append ( commit . hexsha ) [EOL] return commits [EOL] [EOL] [EOL] def all_commits ( ) : [EOL] repo = get_eip_repo ( ) [EOL] commits = [ ] [EOL] for commit in repo . iter_commits ( [string] ) : [EOL] commits . append ( commit ) [EOL] return commits [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $git.Repo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[git.objects.commit.Commit]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from eips_exposed . processor . objects import EIP [EOL] [EOL] [EOL] def parse_eip ( eip_text ) : [EOL] [docstring] [EOL] return EIP ( eip_text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from eips_exposed . processor . main import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Set , Dict , Tuple [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] import eips_exposed [EOL] import sys [EOL] import time [EOL] from typing import List , Set [EOL] from pathlib import Path [EOL] [EOL] from eips_exposed . common import CONFIG , getLogger , eip_id_from_file [EOL] from eips_exposed . common . db import ( get_session , get_latest_commit , set_error , EIP as DBEIP , Commit as DBCommit , ) [EOL] from eips_exposed . common . exceptions import EIPParseError [EOL] from eips_exposed . processor import parse_eip [EOL] from eips_exposed . processor . git import latest_commit_hash , get_eip_repo , all_commits , file_history [EOL] from eips_exposed . processor . objects import EIP , ErrorType [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] PROCESS_WAIT = [number] [EOL] IGNORE_FILES = [ [string] ] [EOL] IGNORE_EIP_ATTRS = [ [string] ] [EOL] IGNORE_EIP_ATTR_TYPES = [ [string] , [string] ] [EOL] [EOL] [EOL] def list_eip_files ( ) : [EOL] [docstring] [EOL] if not CONFIG [ [string] ] . is_dir ( ) : [EOL] raise FileNotFoundError ( [string] ) [EOL] return [ f for f in CONFIG [ [string] ] . iterdir ( ) if f . is_file ( ) ] [EOL] [EOL] [EOL] def get_public_attrs ( obj ) : [EOL] public_attrs = set ( ) [EOL] [EOL] for attr in dir ( obj ) : [EOL] [EOL] if not attr . startswith ( [string] ) \ [EOL] and attr not in IGNORE_EIP_ATTRS \ [EOL] and str ( type ( getattr ( obj , attr ) ) ) not in IGNORE_EIP_ATTR_TYPES : [EOL] [EOL] public_attrs . add ( attr ) [EOL] [EOL] return public_attrs [EOL] [EOL] [EOL] def create_eip_model_instance ( eip ) : [EOL] [docstring] [EOL] kwargs = { k : getattr ( eip , k ) for k in get_public_attrs ( eip ) } [EOL] return DBEIP ( ** kwargs ) [EOL] [EOL] [EOL] def process ( ) : [EOL] [docstring] [EOL] [EOL] commit_count = [number] [EOL] eip_count = [number] [EOL] eip_error_count = [number] [EOL] eip_skipped_count = [number] [EOL] repo = get_eip_repo ( ) [EOL] db_session = get_session ( ) [EOL] [EOL] if repo . bare : [EOL] log . error ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] latest_commit = latest_commit_hash ( ) [EOL] latest_db_commit = get_latest_commit ( ) [EOL] [EOL] if latest_db_commit and latest_commit == latest_db_commit . commit_hash : [EOL] log . info ( [string] . format ( latest_commit [ : [number] ] ) ) [EOL] return [EOL] [EOL] commits = all_commits ( ) [EOL] db_commits = { } [EOL] [EOL] for commit in commits : [EOL] [EOL] commit_count += [number] [EOL] [EOL] commit_inst = DBCommit ( commit_hash = commit . hexsha , committer = commit . committer . name , author = commit . author . name , committed_date = commit . committed_datetime , message = commit . message ) [EOL] [EOL] log . debug ( [string] . format ( commit . hexsha ) ) [EOL] [EOL] db_commit = db_session . merge ( commit_inst ) [EOL] db_commits [ db_commit . commit_hash ] = db_commit [EOL] [EOL] eip_files = list_eip_files ( ) [EOL] parse_errors = list ( ) [EOL] [EOL] for fil in eip_files : [EOL] [EOL] if fil . name in IGNORE_FILES : [EOL] eip_skipped_count += [number] [EOL] continue [EOL] [EOL] eip = ... [EOL] [EOL] log . info ( [string] . format ( fil ) ) [EOL] [EOL] try : [EOL] eip = parse_eip ( fil . read_text ( ) ) [EOL] except EIPParseError : [EOL] msg = [string] . format ( fil . name ) [EOL] log . exception ( msg ) [EOL] eip_error_count += [number] [EOL] eip_id = eip_id_from_file ( fil . name ) [EOL] parse_errors . append ( ( eip_id , msg ) ) [EOL] else : [EOL] log . info ( [string] . format ( eip ) ) [EOL] eip_count += [number] [EOL] [EOL] [comment] [EOL] eip_db_obj = create_eip_model_instance ( eip ) [EOL] [EOL] history = file_history ( fil ) [EOL] [EOL] for comm_hash in history : [EOL] eip_db_obj . commits . append ( db_commits [ comm_hash ] ) [EOL] [EOL] db_session . merge ( eip_db_obj ) [EOL] [EOL] log . debug ( [string] ) [EOL] for err in parse_errors : [EOL] set_error ( db_session , err [ [number] ] , ErrorType . EIP_PARSE_ERROR , err [ [number] ] ) [EOL] db_session . commit ( ) [EOL] [EOL] log . debug ( [string] . format ( len ( eip_files ) ) ) [EOL] log . debug ( [string] . format ( eip_skipped_count ) ) [EOL] log . info ( [string] . format ( eip_count ) ) [EOL] log . warning ( [string] . format ( eip_error_count ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] while True : [EOL] process ( ) [EOL] time . sleep ( PROCESS_WAIT ) [EOL] except KeyboardInterrupt : [EOL] log . warning ( [string] ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $eips_exposed.common.db.EIP$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Optional , Match , Dict , Tuple [EOL] import typing [EOL] import builtins [EOL] import re [EOL] from typing import Tuple , Dict [EOL] [EOL] from eips_exposed . common import getLogger [EOL] [EOL] RFC_822_HEADER = [string] [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] [EOL] def pluck_headers ( eip_text ) : [EOL] [docstring] [EOL] [EOL] lines = eip_text . split ( [string] ) [EOL] line_count = [number] [EOL] headers = { } [EOL] found_end = False [EOL] [EOL] assert lines [ [number] ] == [string] , [string] [EOL] [EOL] for ln in lines [ [number] : ] : [EOL] line_count += [number] [EOL] if ln . startswith ( [string] ) : [EOL] found_end = True [EOL] break [EOL] matches = re . fullmatch ( RFC_822_HEADER , ln ) [EOL] if not matches or len ( matches . groups ( ) ) != [number] : [EOL] log . warning ( [string] ) [EOL] log . debug ( [string] . format ( ln ) ) [EOL] else : [EOL] log . debug ( [string] . format ( matches . group ( [number] ) ) ) [EOL] headers [ matches . group ( [number] ) ] = matches . group ( [number] ) [EOL] [EOL] if not found_end : [EOL] raise SyntaxError ( [string] ) [EOL] [EOL] return ( headers , [string] . join ( lines [ line_count + [number] : ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.dict,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0