from typing import Dict , Any , List [EOL] import typing [EOL] import builtins [EOL] from glob import glob [EOL] import shutil [EOL] from typing import Dict , Any [EOL] from doit . task import clean_targets [comment] [EOL] [EOL] DOIT_CONFIG = { [string] : [number] } [EOL] SRC_DIR = [string] [EOL] TEST_DIR = [string] [EOL] [EOL] SRC = glob ( f"{ SRC_DIR } [string] " , recursive = True ) [EOL] TESTS = glob ( f"{ TEST_DIR } [string] " ) [EOL] [EOL] [EOL] def task_flake8 ( ) : [EOL] return { [string] : ( [string] , ) , [string] : SRC + [ [string] ] } [EOL] [EOL] [EOL] def task_pylint ( ) : [EOL] cmd = [string] + [string] . join ( SRC + [ [string] ] ) [EOL] return { [string] : ( cmd , ) , [string] : SRC + [ [string] ] } [EOL] [EOL] [EOL] def task_mypy ( ) : [EOL] cmd = [string] + [string] . join ( SRC + [ [string] ] ) [EOL] return { [string] : ( cmd , ) , [string] : SRC } [EOL] [EOL] [EOL] def task_pytest ( ) : [EOL] cmd = [string] [EOL] return { [string] : ( cmd , ) , [string] : SRC + TESTS } [EOL] [EOL] [EOL] def task_coverage ( ) : [EOL] cmd = f" [string] { SRC_DIR } [string] " [EOL] return { [string] : ( cmd , ) , [string] : SRC + TESTS } [EOL] [EOL] [EOL] def task_coverage_report ( ) : [EOL] coverage_dir = [string] [EOL] cmd = f" [string] { SRC_DIR } [string] { coverage_dir }" [EOL] [EOL] def coverage_clean ( ) : [EOL] shutil . rmtree ( coverage_dir ) [EOL] [EOL] return { [string] : ( cmd , ) , [string] : SRC + TESTS , [string] : [ f"{ coverage_dir } [string] " ] , [string] : [ clean_targets , coverage_clean ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def test_success ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0