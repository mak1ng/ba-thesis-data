from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] from collections import Callable [EOL] [EOL] import os . path [EOL] import numpy as np [EOL] from matplotlib . path import Path [EOL] from shapely . geometry . point import Point [EOL] from shapely . geometry . polygon import Polygon [EOL] from traitlets . traitlets import Float , Instance , Unicode , default , Int [EOL] [EOL] from crowddynamics . core . evacuation import exit_detection [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . core . integrator import velocity_verlet_integrator [EOL] from crowddynamics . core . interactions import agent_agent_block_list , agent_obstacle [EOL] from crowddynamics . core . motion . adjusting import force_adjust_agents , torque_adjust_agents [EOL] from crowddynamics . core . motion . fluctuation import force_fluctuation , torque_fluctuation [EOL] from crowddynamics . core . steering . collective_motion import leader_follower_with_herding_interaction , leader_follower_interaction [EOL] from crowddynamics . core . steering . navigation import getdefault [EOL] from crowddynamics . core . steering . orientation import orient_towards_target_direction [EOL] from crowddynamics . io import save_npy , save_csv , save_geometry_json [EOL] from crowddynamics . simulation . agents import is_model [EOL] from crowddynamics . simulation . base import LogicNodeBase [EOL] [EOL] [EOL] class LogicNode ( LogicNodeBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . simulation = simulation [EOL] [EOL] def update ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Reset ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] agents [ [string] ] = [number] [EOL] if is_model ( agents , [string] ) : [EOL] agents [ [string] ] = [number] [EOL] [EOL] [EOL] class Integrator ( LogicNode ) : [EOL] dt_min = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] dt_max = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] dt = velocity_verlet_integrator ( agents , self . dt_min , self . dt_max , mask ) [EOL] self . simulation . data [ [string] ] = dt [EOL] self . simulation . data [ [string] ] += dt [EOL] [EOL] [EOL] class Fluctuation ( LogicNode ) : [EOL] def update ( self ) : [EOL] [comment] [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] & ~ agents [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] [ mask ] += force_fluctuation ( agents [ [string] ] [ mask ] , agents [ [string] ] [ mask ] ) [EOL] if is_model ( agents , [string] ) : [EOL] agents [ [string] ] [ mask ] += torque_fluctuation ( agents [ [string] ] [ mask ] , agents [ [string] ] [ mask ] ) [EOL] [EOL] [EOL] class Adjusting ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] force_adjust_agents ( agents , mask ) [EOL] if is_model ( agents , [string] ) : [EOL] torque_adjust_agents ( agents , mask ) [EOL] [EOL] [EOL] class AgentAgentInteractions ( LogicNode ) : [EOL] sight_soc = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] max_agent_radius = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] f_soc_max = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] cell_size = Float ( min = [number] , help = [string] ) [EOL] [EOL] @ default ( [string] ) def _default_cell_size ( self ) : [EOL] return self . sight_soc + [number] * self . max_agent_radius [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] agent_agent_block_list ( agents , self . cell_size , mask ) [EOL] [EOL] [EOL] class AgentObstacleInteractions ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] obstacles = geom_to_linear_obstacles ( self . simulation . field . obstacles ) [EOL] agent_obstacle ( agents , obstacles , mask ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] class Navigation ( LogicNode ) : [EOL] step = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] radius = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] strength = Float ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] agent_finlandia_extended = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] agent_finlandia = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] agent_orchestra = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] agent_helsinki = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] agent_piazza_2 = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] agent_piazza_3 = np . empty ( len ( agents [ [string] ] ) , dtype = bool ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( [number] , len ( agents [ [string] ] ) ) : [EOL] agent_point = Point ( agents [ [string] ] [ i ] ) [EOL] agent_finlandia_extended [ i ] = field . finlandiahall_extended . contains ( agent_point ) [EOL] agent_finlandia [ i ] = field . finlandiahall . contains ( agent_point ) [EOL] agent_orchestra [ i ] = field . orchestra_foyer . contains ( agent_point ) [EOL] agent_helsinki [ i ] = field . helsinkihall . contains ( agent_point ) [EOL] agent_piazza_2 [ i ] = field . piazza_2 . contains ( agent_point ) [EOL] agent_piazza_3 [ i ] = field . piazza_3 . contains ( agent_point ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] [ np . nonzero ( ~ agents [ [string] ] ) ] = agent_helsinki [ np . nonzero ( ~ agents [ [string] ] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] = agent_orchestra [EOL] agents [ [string] ] [ np . nonzero ( ~ agents [ [string] ] ) ] = agent_piazza_2 [ np . nonzero ( ~ agents [ [string] ] ) ] [EOL] agents [ [string] ] [ np . nonzero ( ~ agents [ [string] ] ) ] = agent_piazza_3 [ np . nonzero ( ~ agents [ [string] ] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] arrivals = agents [ [string] ] & agents [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] [ np . nonzero ( agents [ [string] ] ) ] = agent_finlandia [ np . nonzero ( agents [ [string] ] ) ] [EOL] agents [ [string] ] [ np . nonzero ( agents [ [string] ] ) ] = agent_finlandia_extended [ np . nonzero ( agents [ [string] ] ) ] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] for target in range ( len ( field . targets ) ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] has_target = np . nonzero ( agents [ [string] ] == target ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if len ( has_target ) != [number] : [EOL] in_finlandia = True [EOL] mgrid_f , distance_map_f , direction_map_f = field . navigation_to_target ( in_finlandia , target , self . step , self . radius , self . strength ) [EOL] [comment] [EOL] indices_f = np . fliplr ( mgrid_f . indicer ( agents [ has_target ] [ [string] ] ) ) [EOL] new_direction_f = getdefault ( indices_f , direction_map_f , agents [ has_target ] [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] [ has_target ] = new_direction_f [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class LeaderFollower ( LogicNode ) : [EOL] sight = Float ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] [comment] [EOL] value = leader_follower_interaction ( agents , obstacles , self . sight ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class LeaderFollowerWithHerding ( LogicNode ) : [EOL] sight_follower = Float ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] size_nearest_other = Int ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] direction_herding = leader_follower_with_herding_interaction ( agents , obstacles , self . sight_follower , self . size_nearest_other ) [EOL] is_follower = agents [ [string] ] [EOL] agents [ [string] ] [ is_follower ] = direction_herding [ is_follower ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class ExitDetection ( LogicNode ) : [EOL] [docstring] [EOL] detection_range = Float ( default_value = [number] , min = [number] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] center_door = np . stack ( [ np . mean ( np . asarray ( target ) , axis = [number] ) for target in field . targets ] ) [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] [EOL] [comment] [EOL] targets , has_detected = exit_detection ( center_door , agents [ [string] ] , agents [ [string] ] , obstacles , self . detection_range ) [EOL] [EOL] [comment] [EOL] np . set_printoptions ( threshold = np . nan ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] mask = agents [ [string] ] & has_detected [EOL] agents [ [string] ] [ mask ] = targets [ mask ] [EOL] agents [ [string] ] [ mask ] = False [EOL] [EOL] [EOL] [EOL] class Orientation ( LogicNode ) : [EOL] def update ( self ) : [EOL] if is_model ( self . simulation . agents . array , [string] ) : [EOL] orient_towards_target_direction ( self . simulation . agents . array ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class SaveSimulationData ( LogicNode ) : [EOL] [docstring] [EOL] save_condition = Instance ( Callable , help = [string] ) [EOL] base_directory = Unicode ( default_value = [string] , help = [string] ) [EOL] save_directory = Unicode ( help = [string] ) [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( simulation , * args , ** kwargs ) [EOL] os . makedirs ( self . full_path , exist_ok = True ) [EOL] [EOL] [comment] [EOL] save_data_csv = save_csv ( self . full_path , [string] ) [EOL] save_data_csv . send ( None ) [EOL] save_data_csv . send ( self . simulation . metadata ) [EOL] save_data_csv . send ( True ) [EOL] [EOL] [comment] [EOL] geometries = { name : getattr ( self . simulation . field , name ) for name in ( [string] , [string] , [string] , [string] ) } [EOL] save_geometry_json ( os . path . join ( self . full_path , [string] ) , geometries ) [EOL] [EOL] [comment] [EOL] self . save_data_csv = save_csv ( self . full_path , [string] ) [EOL] self . save_data_csv . send ( None ) [EOL] [EOL] [comment] [EOL] self . save_agent_npy = save_npy ( self . full_path , [string] ) [EOL] self . save_agent_npy . send ( None ) [EOL] [EOL] @ property def full_path ( self ) : [EOL] return os . path . join ( os . path . abspath ( self . base_directory ) , self . save_directory ) [EOL] [EOL] @ default ( [string] ) def _default_save_directory ( self ) : [EOL] return self . simulation . name_with_timestamp [EOL] [EOL] def add_to_simulation_logic ( self ) : [EOL] self . simulation . logic [ [string] ] . inject_before ( self ) [EOL] [EOL] def update ( self ) : [EOL] save = self . save_condition ( self . simulation ) [EOL] [EOL] self . save_agent_npy . send ( self . simulation . agents . array ) [EOL] self . save_agent_npy . send ( save ) [EOL] [EOL] self . save_data_csv . send ( self . simulation . data ) [EOL] self . save_data_csv . send ( save ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class InsideDomain ( LogicNode ) : [EOL] [docstring] [EOL] def __init__ ( self , simulation ) : [EOL] super ( ) . __init__ ( simulation ) [EOL] self . simulation . data [ [string] ] = [number] [EOL] field = self . simulation . field [EOL] self . domain_path = Path ( np . asarray ( field . domain . exterior ) ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] new_state = self . domain_path . contains_points ( agents [ [string] ] ) [EOL] change = agents [ [string] ] ^ new_state [EOL] agents [ [string] ] = new_state [EOL] [EOL] self . simulation . data [ [string] ] += np . sum ( change ) [EOL] [EOL] [EOL] class TargetReached ( LogicNode ) : [EOL] [docstring] [EOL] prefix = [string] [EOL] epsilon = Float ( [number] , min = [number] , help = [string] ) [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( simulation , * args , ** kwargs ) [EOL] self . names = [ ] [EOL] targets = self . simulation . field . targets [ [number] : [number] ] [comment] [EOL] self . simulation . data [ [string] ] = len ( self . simulation . agents . array ) [comment] [EOL] for index , target in enumerate ( targets ) : [EOL] name = self . prefix . format ( index = index ) [EOL] self . names . append ( name ) [EOL] self . simulation . data [ name ] = [number] [EOL] [EOL] def update ( self ) : [EOL] targets = self . simulation . field . targets [EOL] [comment] [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] & ~ agents [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for i in range ( len ( agents ) ) : [EOL] if not mask [ i ] : [EOL] continue [EOL] x , y = agents [ i ] [ [string] ] [EOL] point = Point ( x , y ) [EOL] targ_count = [number] [EOL] for target , name in zip ( targets , self . names ) : [EOL] if point . distance ( target ) < self . epsilon : [EOL] [comment] [EOL] self . simulation . data [ name ] += [number] [EOL] agents [ [string] ] [ i ] = True [EOL] agents [ [string] ] [ i ] = False [EOL] [comment] [EOL] if agents [ [string] ] [ i ] == True : [EOL] agents [ [string] ] [ i ] = targ_count [EOL] targ_count += [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] from collections import Callable [EOL] [EOL] import os . path [EOL] import numpy as np [EOL] from matplotlib . path import Path [EOL] from shapely . geometry . point import Point [EOL] from shapely . geometry . polygon import Polygon [EOL] from traitlets . traitlets import Float , Instance , Unicode , default , Int [EOL] [EOL] from crowddynamics . core . evacuation import exit_detection [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . core . integrator import velocity_verlet_integrator [EOL] from crowddynamics . core . interactions import agent_agent_block_list , agent_obstacle [EOL] from crowddynamics . core . motion . adjusting import force_adjust_agents , torque_adjust_agents [EOL] from crowddynamics . core . motion . fluctuation import force_fluctuation , torque_fluctuation [EOL] from crowddynamics . core . steering . collective_motion import leader_follower_with_herding_interaction , leader_follower_interaction [EOL] from crowddynamics . core . steering . navigation import getdefault [EOL] from crowddynamics . core . steering . orientation import orient_towards_target_direction [EOL] from crowddynamics . io import save_npy , save_csv , save_geometry_json [EOL] from crowddynamics . simulation . agents import is_model [EOL] from crowddynamics . simulation . base import LogicNodeBase [EOL] [EOL] [EOL] class LogicNode ( LogicNodeBase ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . simulation = simulation [EOL] [EOL] def update ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Reset ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] agents [ [string] ] = [number] [EOL] if is_model ( agents , [string] ) : [EOL] agents [ [string] ] = [number] [EOL] [EOL] [EOL] class Integrator ( LogicNode ) : [EOL] dt_min = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] dt_max = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] dt = velocity_verlet_integrator ( agents , self . dt_min , self . dt_max , mask ) [EOL] self . simulation . data [ [string] ] = dt [EOL] self . simulation . data [ [string] ] += dt [EOL] [EOL] [EOL] class Fluctuation ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] agents [ [string] ] [ mask ] += force_fluctuation ( agents [ [string] ] [ mask ] , agents [ [string] ] [ mask ] ) [EOL] if is_model ( agents , [string] ) : [EOL] agents [ [string] ] [ mask ] += torque_fluctuation ( agents [ [string] ] [ mask ] , agents [ [string] ] [ mask ] ) [EOL] [EOL] [EOL] class Adjusting ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] force_adjust_agents ( agents , mask ) [EOL] if is_model ( agents , [string] ) : [EOL] torque_adjust_agents ( agents , mask ) [EOL] [EOL] [EOL] class AgentAgentInteractions ( LogicNode ) : [EOL] sight_soc = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] max_agent_radius = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] f_soc_max = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] cell_size = Float ( min = [number] , help = [string] ) [EOL] [EOL] @ default ( [string] ) def _default_cell_size ( self ) : [EOL] return self . sight_soc + [number] * self . max_agent_radius [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] agent_agent_block_list ( agents , self . cell_size , mask ) [EOL] [EOL] [EOL] class AgentObstacleInteractions ( LogicNode ) : [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] [EOL] obstacles = geom_to_linear_obstacles ( self . simulation . field . obstacles ) [EOL] agent_obstacle ( agents , obstacles , mask ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] class Navigation ( LogicNode ) : [EOL] step = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] radius = Float ( default_value = [number] , min = [number] , help = [string] ) [EOL] strength = Float ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] for target in range ( len ( field . targets ) ) : [EOL] [EOL] [comment] [EOL] has_target = np . nonzero ( agents [ [string] ] & ( agents [ [string] ] == target ) ) [EOL] [EOL] [comment] [EOL] if len ( has_target ) != [number] : [EOL] mgrid_f , distance_map_f , direction_map_f = field . navigation_to_target ( target , self . step , self . radius , self . strength ) [EOL] [comment] [EOL] indices_f = np . fliplr ( mgrid_f . indicer ( agents [ has_target ] [ [string] ] ) ) [EOL] new_direction_f = getdefault ( indices_f , direction_map_f , agents [ has_target ] [ [string] ] ) [EOL] agents [ [string] ] [ has_target ] = new_direction_f [EOL] [EOL] [comment] [EOL] class LeaderFollower ( LogicNode ) : [EOL] sight = Float ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] [comment] [EOL] value = leader_follower_interaction ( agents , obstacles , self . sight ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class LeaderFollowerWithHerding ( LogicNode ) : [EOL] sight_follower = Float ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] size_nearest_other = Int ( default_value = [number] , min = [number] , help = [string] [string] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] direction_herding = leader_follower_with_herding_interaction ( agents , obstacles , self . sight_follower , self . size_nearest_other ) [EOL] is_follower = agents [ [string] ] [EOL] agents [ [string] ] [ is_follower ] = direction_herding [ is_follower ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] class ExitDetection ( LogicNode ) : [EOL] [docstring] [EOL] detection_range = Float ( default_value = [number] , min = [number] ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] field = self . simulation . field [EOL] [EOL] center_door = np . stack ( [ np . mean ( np . asarray ( target ) , axis = [number] ) for target in field . targets ] ) [EOL] obstacles = geom_to_linear_obstacles ( field . obstacles ) [EOL] [EOL] [comment] [EOL] targets , has_detected = exit_detection ( center_door , agents [ [string] ] , obstacles , self . detection_range ) [EOL] [EOL] mask = agents [ [string] ] & has_detected [EOL] agents [ [string] ] [ mask ] = targets [ mask ] [EOL] agents [ [string] ] [ mask ] = False [EOL] [EOL] [EOL] [EOL] class Orientation ( LogicNode ) : [EOL] def update ( self ) : [EOL] if is_model ( self . simulation . agents . array , [string] ) : [EOL] orient_towards_target_direction ( self . simulation . agents . array ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class SaveSimulationData ( LogicNode ) : [EOL] [docstring] [EOL] save_condition = Instance ( Callable , help = [string] ) [EOL] base_directory = Unicode ( default_value = [string] , help = [string] ) [EOL] save_directory = Unicode ( help = [string] ) [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( simulation , * args , ** kwargs ) [EOL] os . makedirs ( self . full_path , exist_ok = True ) [EOL] [EOL] [comment] [EOL] save_data_csv = save_csv ( self . full_path , [string] ) [EOL] save_data_csv . send ( None ) [EOL] save_data_csv . send ( self . simulation . metadata ) [EOL] save_data_csv . send ( True ) [EOL] [EOL] [comment] [EOL] geometries = { name : getattr ( self . simulation . field , name ) for name in ( [string] , [string] , [string] , [string] ) } [EOL] save_geometry_json ( os . path . join ( self . full_path , [string] ) , geometries ) [EOL] [EOL] [comment] [EOL] self . save_data_csv = save_csv ( self . full_path , [string] ) [EOL] self . save_data_csv . send ( None ) [EOL] [EOL] [comment] [EOL] self . save_agent_npy = save_npy ( self . full_path , [string] ) [EOL] self . save_agent_npy . send ( None ) [EOL] [EOL] @ property def full_path ( self ) : [EOL] return os . path . join ( os . path . abspath ( self . base_directory ) , self . save_directory ) [EOL] [EOL] @ default ( [string] ) def _default_save_directory ( self ) : [EOL] return self . simulation . name_with_timestamp [EOL] [EOL] def add_to_simulation_logic ( self ) : [EOL] self . simulation . logic [ [string] ] . inject_before ( self ) [EOL] [EOL] def update ( self ) : [EOL] save = self . save_condition ( self . simulation ) [EOL] [EOL] self . save_agent_npy . send ( self . simulation . agents . array ) [EOL] self . save_agent_npy . send ( save ) [EOL] [EOL] self . save_data_csv . send ( self . simulation . data ) [EOL] self . save_data_csv . send ( save ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class InsideDomain ( LogicNode ) : [EOL] [docstring] [EOL] def __init__ ( self , simulation ) : [EOL] super ( ) . __init__ ( simulation ) [EOL] self . simulation . data [ [string] ] = [number] [EOL] field = self . simulation . field [EOL] self . domain_path = Path ( np . asarray ( field . domain . exterior ) ) [EOL] [EOL] def update ( self ) : [EOL] agents = self . simulation . agents . array [EOL] new_state = self . domain_path . contains_points ( agents [ [string] ] ) [EOL] change = agents [ [string] ] ^ new_state [EOL] agents [ [string] ] = new_state [EOL] [EOL] self . simulation . data [ [string] ] += np . sum ( change ) [EOL] [EOL] [EOL] class TargetReached ( LogicNode ) : [EOL] [docstring] [EOL] prefix = [string] [EOL] epsilon = Float ( [number] , min = [number] , help = [string] ) [EOL] [EOL] def __init__ ( self , simulation , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( simulation , * args , ** kwargs ) [EOL] self . names = [ ] [EOL] targets = self . simulation . field . targets [ [number] : [number] ] [comment] [EOL] self . simulation . data [ [string] ] = len ( self . simulation . agents . array ) [comment] [EOL] for index , target in enumerate ( targets ) : [EOL] name = self . prefix . format ( index = index ) [EOL] self . names . append ( name ) [EOL] self . simulation . data [ name ] = [number] [EOL] [EOL] def update ( self ) : [EOL] targets = self . simulation . field . targets [EOL] [comment] [EOL] agents = self . simulation . agents . array [EOL] mask = agents [ [string] ] & ~ agents [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for i in range ( len ( agents ) ) : [EOL] if not mask [ i ] : [EOL] continue [EOL] x , y = agents [ i ] [ [string] ] [EOL] point = Point ( x , y ) [EOL] for target , name in zip ( targets , self . names ) : [EOL] if point . distance ( target ) < self . epsilon : [EOL] [comment] [EOL] self . simulation . data [ name ] += [number] [EOL] agents [ [string] ] [ i ] = True [EOL] agents [ [string] ] [ i ] = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any , Tuple , Iterator [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . simulation . agents import Circular , ThreeCircle , NO_TARGET , Agents , AgentGroup [EOL] from crowddynamics . simulation . field import Field [EOL] from crowddynamics . simulation . logic import Reset , InsideDomain , Integrator , Fluctuation , Adjusting , Navigation , ExitDetection , Orientation , AgentAgentInteractions , AgentObstacleInteractions , LeaderFollower , TargetReached [EOL] from crowddynamics . simulation . multiagent import MultiAgentSimulation [EOL] from shapely . geometry import Polygon , Point , LineString , MultiPolygon , MultiLineString , LinearRing [EOL] from traitlets . traitlets import Enum , Int , default [EOL] [EOL] from shapely . ops import polygonize [EOL] from scipy . spatial . qhull import Delaunay [EOL] from crowddynamics . core . sampling import triangle_area_cumsum , random_sample_triangle [EOL] from crowddynamics . core . vector2D import length [EOL] from crowddynamics . core . distance import distance_circle_line , distance_circles [EOL] from crowddynamics . simulation . agents import Agents , AgentGroup , Circular [EOL] [EOL] [EOL] [EOL] class SimpleScenarioFloorField ( Field ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] r = [number] [EOL] exitwidth = [number] [EOL] exit1_x = ( r / [number] - exitwidth / [number] ) * np . sin ( np . deg2rad ( [number] ) ) [EOL] exit1_y = ( r / [number] - exitwidth / [number] ) * np . cos ( np . deg2rad ( [number] ) ) [EOL] exit2_x = ( r / [number] + exitwidth / [number] ) * np . sin ( np . deg2rad ( [number] ) ) [EOL] exit2_y = ( r / [number] + exitwidth / [number] ) * np . cos ( np . deg2rad ( [number] ) ) [EOL] [comment] [EOL] bufferradius = [number] * r * np . tan ( np . deg2rad ( [number] ) ) [EOL] [comment] [EOL] [EOL] def f ( value , scale = [number] ) : [EOL] if value : [EOL] return tuple ( map ( lambda x : scale * x , value ) ) [EOL] else : [EOL] return None [EOL] [EOL] [comment] [EOL] hexagon = list ( map ( f , [ None , ( r , [number] * r ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r , [number] ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + np . sin ( np . deg2rad ( [number] ) ) ) ) , ] ) ) [EOL] [EOL] [comment] [EOL] midpoints = list ( map ( f , [ None , ( r * ( [number] - [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] - [number] / np . cos ( np . deg2rad ( [number] ) ) ) , r ) , ( r * ( [number] - [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + [number] / np . cos ( np . deg2rad ( [number] ) ) ) , r ) , ( r * ( [number] + [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ] ) ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] exitpoints = list ( map ( f , [ None , ( r - exit1_x , [number] * r - exit1_y ) , ( r - exit2_x , [number] * r - exit2_y ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r + exitwidth / [number] ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r - exitwidth / [number] ) , ( r - exit2_x , exit2_y ) , ( r - exit1_x , exit1_y ) , ( r + exit1_x , exit1_y ) , ( r + exit2_x , exit2_y ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r - exitwidth / [number] ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r + exitwidth / [number] ) , ( r + exit2_x , [number] * r - exit2_y ) , ( r + exit1_x , [number] * r - exit1_y ) , ] ) ) [EOL] obstacles = Polygon ( ) [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] [EOL] floorplan = Polygon ( [ hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] exit1 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit2 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit3 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit4 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit5 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit6 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] spawn1 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn2 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn3 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn4 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn5 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn6 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] [EOL] [comment] [EOL] spawns = [ spawn1 , spawn2 , spawn3 , spawn4 , spawn5 , spawn6 ] [EOL] [EOL] targets = [ exit1 , exit2 , exit3 , exit4 , exit5 , exit6 ] [EOL] [EOL] self . obstacles = obstacles [comment] [EOL] self . targets = targets [EOL] self . spawns = spawns [EOL] self . domain = floorplan [EOL] [EOL] [EOL] [EOL] class SimpleScenarioFloor ( MultiAgentSimulation ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] size_spawn1 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_spawn2 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_spawn3 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_spawn4 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_spawn5 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_spawn6 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_leader = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] [EOL] agent_type = Enum ( default_value = Circular , values = ( Circular , ThreeCircle ) ) [EOL] body_type = Enum ( default_value = [string] , values = ( [string] , ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def generate_leader_pos ( self , cell , n_lead ) : [EOL] [EOL] [comment] [EOL] followers = np . load ( [string] ) [EOL] follower_positions = followers [ [string] ] [EOL] follower_radii = followers [ [string] ] [EOL] [EOL] [comment] [EOL] max_r = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] overlaps = [number] [EOL] [EOL] [comment] [EOL] field = SimpleScenarioFloor ( ) . field [EOL] [EOL] [comment] [EOL] width = [number] [EOL] height = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cell_size = [number] [EOL] m = np . round ( width / cell_size ) [EOL] n = np . round ( height / cell_size ) [EOL] m = m . astype ( int ) [EOL] n = n . astype ( int ) [EOL] X = np . linspace ( [number] , width , m + [number] ) [EOL] Y = np . linspace ( [number] , height , n + [number] ) [EOL] hlines = [ ( ( x1 , yi ) , ( x2 , yi ) ) for x1 , x2 in zip ( X [ : - [number] ] , X [ [number] : ] ) for yi in Y ] [EOL] vlines = [ ( ( xi , y1 ) , ( xi , y2 ) ) for y1 , y2 in zip ( Y [ : - [number] ] , Y [ [number] : ] ) for xi in X ] [EOL] grids = list ( polygonize ( MultiLineString ( hlines + vlines ) ) ) [EOL] [EOL] [comment] [EOL] leader_spawns = [ ] [EOL] [EOL] [comment] [EOL] spawn_points = [ ] [EOL] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] [EOL] poly = field . domain . intersection ( grids [ cell [ i ] ] ) [EOL] if not poly . is_empty : [EOL] leader_spawns . append ( poly ) [EOL] [EOL] [comment] [EOL] obstacles = field . obstacles [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] seed = [number] [EOL] [comment] [EOL] n_spawnpoints = len ( spawn_points ) [EOL] geom = leader_spawns [ i ] - obstacles . buffer ( max_r ) [EOL] j = [number] [comment] [EOL] [comment] [EOL] if isinstance ( geom , MultiPolygon ) : [EOL] n_polygons = len ( geom ) [EOL] for j in range ( n_polygons ) : [EOL] vertices = np . asarray ( geom [ j ] . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] if j == [number] : [EOL] meshes = mesh [EOL] else : [EOL] meshes = np . concatenate ( ( mesh , meshes ) , axis = [number] ) [EOL] [comment] [EOL] weights = triangle_area_cumsum ( meshes ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = meshes [ k ] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] [comment] [EOL] [comment] [EOL] if n_spawnpoints != [number] : [comment] [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] [comment] [EOL] else : [EOL] vertices = np . asarray ( geom . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] weights = triangle_area_cumsum ( mesh ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = mesh [ k ] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] [comment] [EOL] if n_spawnpoints != [number] : [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] return spawn_points [EOL] [EOL] def attributes ( self , familiar , has_target = True , is_follower = True ) : [EOL] def wrapper ( ) : [EOL] target = familiar if has_target else NO_TARGET [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = familiar , ) [EOL] return d [EOL] [EOL] return wrapper [EOL] [EOL] def attributes_leader ( self , target_iter , has_target = True , is_follower = False ) : [EOL] def wrapper ( ) : [EOL] target = next ( target_iter ) [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = [number] , ) [EOL] return d [EOL] [EOL] return wrapper [EOL] [EOL] @ default ( [string] ) def _default_logic ( self ) : [EOL] return Reset ( self ) << TargetReached ( self ) << ( Integrator ( self ) << ( Fluctuation ( self ) , Adjusting ( self ) << ( Navigation ( self ) << LeaderFollower ( self ) , Orientation ( self ) ) , AgentAgentInteractions ( self ) , AgentObstacleInteractions ( self ) ) ) [EOL] [EOL] @ default ( [string] ) def _default_field ( self ) : [EOL] return SimpleScenarioFloorField ( ) [EOL] [EOL] @ default ( [string] ) def _default_agents ( self ) : [EOL] agents = Agents ( agent_type = self . agent_type ) [EOL] [EOL] [comment] [EOL] target_exits = [ ] [EOL] cells = [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] n_guides = len ( target_exits ) [EOL] [EOL] [comment] [EOL] group_follower_spawn1 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn1 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_spawn2 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn2 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_spawn3 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn3 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_spawn4 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn4 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_spawn5 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn5 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_spawn6 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_spawn6 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] if n_guides != [number] : [EOL] [EOL] init_pos = self . generate_leader_pos ( cells , n_guides ) [EOL] print ( init_pos ) [EOL] [comment] [EOL] target_exits = iter ( target_exits ) [EOL] init_pos = iter ( init_pos ) [EOL] [EOL] [comment] [EOL] group_leader = AgentGroup ( agent_type = self . agent_type , size = n_guides , attributes = self . attributes_leader ( target_iter = target_exits , has_target = True , is_follower = False ) ) [EOL] [EOL] [comment] [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_leader , position_gen = True , position_iter = init_pos , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [EOL] return agents [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List , Dict , Any , Tuple , Iterator [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . simulation . agents import Circular , ThreeCircle , NO_TARGET , Agents , AgentGroup [EOL] from crowddynamics . simulation . field import Field [EOL] from crowddynamics . simulation . logic import Reset , InsideDomain , Integrator , Fluctuation , Adjusting , Navigation , ExitDetection , Orientation , AgentAgentInteractions , AgentObstacleInteractions , LeaderFollower , TargetReached [EOL] from crowddynamics . simulation . multiagent import MultiAgentSimulation [EOL] from shapely . geometry import Polygon , Point , LineString , MultiPolygon , MultiLineString , LinearRing [EOL] from shapely . ops import cascaded_union [EOL] from traitlets . traitlets import Enum , Int , default [EOL] [EOL] from shapely . ops import polygonize [EOL] from scipy . spatial . qhull import Delaunay [EOL] from crowddynamics . core . sampling import triangle_area_cumsum , random_sample_triangle [EOL] from crowddynamics . core . vector2D import length [EOL] from crowddynamics . core . distance import distance_circle_line , distance_circles [EOL] from crowddynamics . simulation . agents import Agents , AgentGroup , Circular [EOL] [EOL] [EOL] class FinlandiaTalo2ndFloorField ( Field ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def f ( value , scale = [number] / [number] ) : [EOL] if value : [EOL] return tuple ( map ( lambda x : scale * x , value ) ) [EOL] else : [EOL] return None [EOL] [EOL] A = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] B = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] C = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] D = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] E = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] G = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] H = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] I = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] J = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] K = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] O = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] U = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] V = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] W = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] X = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] Y = list ( map ( f , [ ( ) , ( [number] , [number] ) , ] ) ) [EOL] Z = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] [EOL] A [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] A [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [comment] [EOL] [comment] [EOL] E [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] E [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] rest_midpoint = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [comment] [EOL] rest1 = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] rest2 = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [EOL] obstacles = Polygon ( ) [EOL] [EOL] obstacles |= LineString ( A [ [number] : [number] + [number] ] + [ A [ [number] ] ] ) [EOL] obstacles |= LineString ( A [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] + C [ [number] : [number] ] ) [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [comment] [EOL] obstacles |= LineString ( [ D [ [number] ] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] + [ E [ [number] ] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] [comment] [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles |= LineString ( X [ [number] : [number] ] + [ D [ [number] ] ] ) [comment] [EOL] [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles |= LineString ( X [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( [ C [ [number] ] ] + [ E [ [number] ] ] ) [EOL] obstacles |= LineString ( [ E [ [number] ] ] + [ B [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] obstacles_finlandia = Polygon ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] + C [ [number] : [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( [ D [ [number] ] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( X [ [number] : [number] ] + [ D [ [number] ] ] ) [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( X [ [number] : [number] ] ) [comment] [EOL] [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( A [ [number] : [number] + [number] ] + [ A [ [number] ] ] ) [EOL] obstacles_finlandia |= LineString ( A [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles_finlandia |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] + [ E [ [number] ] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( [ D [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] finlandiahall = Polygon ( [ O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] ] ) [EOL] foyer = Polygon ( [ B [ [number] ] , C [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , B [ [number] ] ] ) [EOL] helsinkihall = Polygon ( [ O [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , O [ [number] ] , B [ [number] ] , B [ [number] ] , C [ [number] ] , C [ [number] ] , O [ [number] ] , O [ [number] ] ] ) [EOL] piazza_1 = Polygon ( [ C [ [number] ] , E [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] piazza_2 = Polygon ( [ O [ [number] ] , O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , D [ [number] ] ] ) [EOL] piazza_3 = Polygon ( [ O [ [number] ] , A [ [number] ] , A [ [number] ] , A [ [number] ] , D [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] restaurant = Polygon ( [ A [ [number] ] , A [ [number] ] , A [ [number] ] , E [ [number] ] , E [ [number] ] , rest_midpoint ] ) [EOL] outer_bubblegum_finlandia = Polygon ( [ D [ [number] ] , ( [number] , [number] ) , E [ [number] ] , E [ [number] ] , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] inner_bubblegum_finlandia = Polygon ( [ D [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] orchestra_foyer = Polygon ( [ X [ [number] ] , X [ [number] ] , X [ [number] ] , D [ [number] ] , X [ [number] ] , X [ [number] ] , D [ [number] ] , X [ [number] ] , X [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] finlandia_spawn = Polygon ( [ O [ [number] ] , O [ [number] ] , O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] piazza_3_spawn = Polygon ( [ D [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] piazza_1_spawn = Polygon ( [ D [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , E [ [number] ] ] ) [EOL] restaurant_spawn = Polygon ( [ rest1 , rest2 , E [ [number] ] , E [ [number] ] ] ) [EOL] foyer_spawn = Polygon ( [ E [ [number] ] , C [ [number] ] , C [ [number] ] , B [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] helsinki_spawn = Polygon ( [ C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , B [ [number] ] ] ) [EOL] orchestra_spawn = Polygon ( [ X [ [number] ] , X [ [number] ] , X [ [number] ] , X [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] exit1 = LineString ( [ D [ [number] ] , A [ [number] ] ] ) [EOL] exit2 = LineString ( [ D [ [number] ] , D [ [number] ] ] ) [EOL] exit3 = LineString ( [ E [ [number] ] , O [ [number] ] ] ) [EOL] exit4 = LineString ( [ O [ [number] ] , B [ [number] ] ] ) [EOL] exit5 = LineString ( [ Y [ [number] ] , X [ [number] ] ] ) [EOL] exit6 = LineString ( [ X [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] fex = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] ) [EOL] fex = fex * [number] / [number] [EOL] [EOL] slopes = np . array ( [ ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) ] ) [EOL] [EOL] gradient_vectors = np . array ( [ [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] ] ) [EOL] norms = np . hypot ( [ gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] ] , [ gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] ] ) [EOL] gradient_vectors = np . array ( [ [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , [number] / norms [ [number] ] ] ] ) [EOL] dx = [number] [EOL] [EOL] fex = np . array ( [ [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] , [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] , [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] ] ) [EOL] fex = fex * [number] / [number] [EOL] [EOL] fexit1 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit2 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit3 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit4 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] spawns = [ finlandiahall , foyer , helsinkihall , piazza_1 , piazza_2 , piazza_3 , restaurant , orchestra_foyer , finlandia_spawn , piazza_3_spawn , piazza_1_spawn , restaurant_spawn , foyer_spawn , helsinki_spawn , orchestra_spawn ] [EOL] [EOL] [comment] [EOL] targets = [ exit1 , exit3 , exit4 , exit5 , exit6 ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] self . obstacles = obstacles [comment] [EOL] self . obstacles_finlandia = obstacles_finlandia [comment] [EOL] self . targets = targets [EOL] self . spawns = spawns [EOL] [comment] [EOL] [comment] [EOL] self . domain = self . convex_hull ( ) [EOL] self . finlandiahall_extended = outer_bubblegum_finlandia [comment] [EOL] self . finlandiahall = inner_bubblegum_finlandia [EOL] self . helsinkihall = helsinkihall [EOL] self . orchestra_foyer = orchestra_foyer [EOL] self . piazza_2 = piazza_2 [EOL] self . piazza_3 = piazza_3 [EOL] [EOL] [EOL] class FinlandiaTalo2ndFloor ( MultiAgentSimulation ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] size_finlandiahall = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_foyer = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_helsinkihall = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_piazza_1 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_piazza_2 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_piazza_3 = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_restaurant = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_orchestra = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] size_leader = Int ( default_value = [number] , min = [number] , max = [number] , help = [string] ) [EOL] [EOL] agent_type = Enum ( default_value = Circular , values = ( Circular , ThreeCircle ) ) [EOL] body_type = Enum ( default_value = [string] , values = ( [string] , ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def generate_leader_pos ( self , cell , n_lead ) : [EOL] [EOL] [comment] [EOL] followers = np . load ( [string] ) [EOL] follower_positions = followers [ [string] ] [EOL] follower_radii = followers [ [string] ] [EOL] [EOL] [comment] [EOL] max_r = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] overlaps = [number] [EOL] [EOL] [comment] [EOL] field = FinlandiaTalo2ndFloor ( ) . field [EOL] [EOL] [comment] [EOL] width = [number] [EOL] height = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cell_size = [number] [EOL] m = np . round ( width / cell_size ) [EOL] n = np . round ( height / cell_size ) [EOL] m = m . astype ( int ) [EOL] n = n . astype ( int ) [EOL] X = np . linspace ( [number] , width , m + [number] ) [EOL] Y = np . linspace ( [number] , height , n + [number] ) [EOL] hlines = [ ( ( x1 , yi ) , ( x2 , yi ) ) for x1 , x2 in zip ( X [ : - [number] ] , X [ [number] : ] ) for yi in Y ] [EOL] vlines = [ ( ( xi , y1 ) , ( xi , y2 ) ) for y1 , y2 in zip ( Y [ : - [number] ] , Y [ [number] : ] ) for xi in X ] [EOL] grids = list ( polygonize ( MultiLineString ( hlines + vlines ) ) ) [EOL] [EOL] [comment] [EOL] leader_spawns = [ ] [EOL] [EOL] [comment] [EOL] spawn_points = [ ] [EOL] [EOL] [comment] [EOL] inside_finlandia = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] [EOL] polygons = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for j in range ( [number] ) : [EOL] print ( i ) [EOL] print ( cell [ i ] ) [EOL] poly = field . spawns [ j ] . intersection ( grids [ cell [ i ] ] ) [EOL] if not poly . is_empty : [EOL] polygons . append ( poly ) [EOL] spawn_poly = cascaded_union ( polygons ) [EOL] if not spawn_poly . is_empty : [EOL] leader_spawns . append ( spawn_poly ) [EOL] [EOL] [comment] [EOL] obstacles = field . obstacles [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] seed = [number] [EOL] [comment] [EOL] n_spawnpoints = len ( spawn_points ) [EOL] geom = leader_spawns [ i ] - obstacles . buffer ( max_r ) [EOL] j = [number] [comment] [EOL] [comment] [EOL] if isinstance ( geom , MultiPolygon ) : [EOL] n_polygons = len ( geom ) [EOL] for j in range ( n_polygons ) : [EOL] vertices = np . asarray ( geom [ j ] . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] if j == [number] : [EOL] meshes = mesh [EOL] else : [EOL] meshes = np . concatenate ( ( mesh , meshes ) , axis = [number] ) [EOL] [comment] [EOL] weights = triangle_area_cumsum ( meshes ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = meshes [ k ] [EOL] [comment] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] [comment] [EOL] if n_spawnpoints != [number] : [comment] [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] if field . finlandiahall_extended . contains ( Point ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) ) : [EOL] inside_finlandia . append ( True ) [EOL] else : [EOL] inside_finlandia . append ( False ) [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] [comment] [EOL] else : [EOL] vertices = np . asarray ( geom . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] weights = triangle_area_cumsum ( mesh ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = mesh [ k ] [EOL] [comment] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] if n_spawnpoints != [number] : [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] if field . finlandiahall_extended . contains ( Point ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) ) : [EOL] inside_finlandia . append ( True ) [EOL] else : [EOL] inside_finlandia . append ( False ) [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] return spawn_points , inside_finlandia [EOL] [EOL] def attributes ( self , familiar , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) : [EOL] def wrapper ( ) : [EOL] target = familiar if has_target else NO_TARGET [EOL] [comment] [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = familiar , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] def attributes_leader ( self , fin_ext_iter , fin_iter , target_iter , has_target = True , is_follower = False ) : [EOL] def wrapper ( ) : [EOL] target = next ( target_iter ) [EOL] in_finlandia_extended = next ( fin_ext_iter ) [EOL] in_finlandia = next ( fin_iter ) [EOL] [comment] [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = [number] , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] @ default ( [string] ) def _default_logic ( self ) : [EOL] return Reset ( self ) << TargetReached ( self ) << ( Integrator ( self ) << ( Fluctuation ( self ) , Adjusting ( self ) << ( Navigation ( self ) << ExitDetection ( self ) << LeaderFollower ( self ) , Orientation ( self ) ) , AgentAgentInteractions ( self ) , AgentObstacleInteractions ( self ) ) ) [EOL] [EOL] @ default ( [string] ) def _default_field ( self ) : [EOL] return FinlandiaTalo2ndFloorField ( ) [EOL] [EOL] @ default ( [string] ) def _default_agents ( self ) : [EOL] agents = Agents ( agent_type = self . agent_type ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] target_exits = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] cells = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [comment] [EOL] target_exits = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] cells = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [comment] [EOL] [comment] [EOL] n_guides = len ( target_exits ) [EOL] [EOL] [comment] [EOL] group_follower_finlandiahall = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = True , in_finlandia_extended = True , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_finlandiahall , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_piazza_3 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_piazza_3 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_piazza_1 = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_piazza_1 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_restaurant = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_restaurant , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_foyer = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = True , in_finlandia_extended = True , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_foyer , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_helsinkihall = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_helsinkihall , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_orchestra = AgentGroup ( agent_type = self . agent_type , size = getattr ( self , [string] ) , attributes = self . attributes ( familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] agents . add_non_overlapping_group ( [string] , group_follower_orchestra , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] if n_guides != [number] : [EOL] [EOL] init_pos , inside_ext = self . generate_leader_pos ( cells , n_guides ) [EOL] inside = inside_ext [EOL] [EOL] target_exits = iter ( target_exits ) [EOL] [comment] [EOL] init_pos = [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] [EOL] [comment] [EOL] [comment] [EOL] init_pos = iter ( init_pos ) [EOL] inside_ext = iter ( inside_ext ) [EOL] inside = iter ( inside ) [EOL] [EOL] [comment] [EOL] group_leader = AgentGroup ( agent_type = self . agent_type , size = n_guides , attributes = self . attributes_leader ( fin_ext_iter = inside_ext , fin_iter = inside , target_iter = target_exits , has_target = True , is_follower = False ) ) [EOL] [EOL] [comment] [EOL] [EOL] leader_iter = init_pos [EOL] agents . add_non_overlapping_group ( [string] , group_leader , position_gen = True , position_iter = init_pos , spawn = [number] , obstacles = geom_to_linear_obstacles ( self . field . obstacles ) ) [EOL] [EOL] [EOL] return agents [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 $typing.Tuple[builtins.float,builtins.float]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 $typing.List[typing.Tuple[typing.Tuple[typing.Any,typing.Any],typing.Tuple[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 $typing.Iterator[typing.Any]$ 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Iterator[builtins.int]$ 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 $typing.Iterator[typing.List[builtins.float]]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Iterator[typing.List[builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
import os [EOL] from qtgui . cli import run_gui [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] root = os . path . dirname ( __file__ ) [EOL] [comment] [EOL] run_gui ( os . path . join ( root , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Any , Tuple [EOL] import typing [EOL] from . _version import get_versions [EOL] [EOL] [EOL] __author__ = [string] [EOL] __authors__ = ( [string] , ) [EOL] __email__ = [string] [EOL] __license__ = [string] [EOL] __version__ = get_versions ( ) [ [string] ] [EOL] [EOL] [comment] [EOL] [EOL] del get_versions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import click [EOL] import os [EOL] [EOL] import pytest [EOL] from click . testing import CliRunner [EOL] [EOL] from crowddynamics . cli import list_of_simulations [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , os . path . join ( [string] , [string] ) ] ) def test_startproject ( tmpdir , dirpath ) : [EOL] runner = CliRunner ( ) [EOL] with runner . isolated_filesystem ( ) : [EOL] result2 = runner . invoke ( list_of_simulations , [ ] ) [EOL] assert result2 . exit_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_interactions ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numba [EOL] import numpy as np [EOL] from numba . typing . typeof import typeof [EOL] from shapely . geometry import Polygon [EOL] [EOL] from crowddynamics . core . geom2D import line_intersect [EOL] from crowddynamics . core . sensory_region import is_obstacle_between_points [EOL] from crowddynamics . core . structures import obstacle_type_linear [EOL] from crowddynamics . core . vector2D import length [EOL] from numba import i8 , f8 , optional , boolean [EOL] [EOL] from crowddynamics . simulation . agents import NO_TARGET [EOL] [EOL] [EOL] @ numba . jit ( f8 ( f8 , f8 , optional ( f8 ) , f8 ) , nopython = True , nogil = True , cache = True ) def narrow_exit_capacity ( d_door , d_agent , d_layer = None , coeff = [number] ) : [EOL] [docstring] [EOL] if d_door < d_agent : [EOL] return [number] [EOL] elif d_layer is None : [EOL] return coeff * ( d_door // d_agent ) [EOL] else : [EOL] return coeff * ( ( d_door - ( d_agent - d_layer ) ) // d_layer ) [EOL] [EOL] [EOL] @ numba . jit ( i8 [ : ] ( f8 [ : ] , f8 [ : , : ] ) , nopython = True , nogil = True , cache = True ) def agent_closer_to_exit ( c_door , position ) : [EOL] [docstring] [EOL] distances = length ( c_door - position ) [EOL] d_sorted = np . argsort ( distances ) [EOL] num = np . argsort ( d_sorted ) [EOL] return num [EOL] [EOL] [EOL] @ numba . jit ( ( f8 [ : , : ] , f8 [ : , : ] , boolean [ : ] , typeof ( obstacle_type_linear ) [ : ] , f8 ) , nopython = True , nogil = True , cache = True ) def exit_detection ( center_door , position , in_finlandia , obstacles , detection_range ) : [EOL] [docstring] [EOL] not_detected = - [number] [EOL] n = len ( position ) [EOL] distance = np . full ( shape = n , fill_value = detection_range , dtype = np . float64 ) [EOL] detected_exit = np . full ( shape = n , fill_value = not_detected , dtype = np . int64 ) [EOL] [docstring] [EOL] has_detected = np . zeros ( shape = n , dtype = np . bool_ ) [EOL] [docstring] [EOL] [EOL] [comment] [EOL] for i in range ( n ) : [EOL] [comment] [EOL] if position [ i ] [ [number] ] >= [number] and position [ i ] [ [number] ] >= [number] : [EOL] detected_exit [ i ] = [number] [EOL] has_detected [ i ] = True [EOL] continue [EOL] else : [EOL] n_targets = [number] [EOL] [comment] [EOL] [comment] [EOL] for c in range ( n_targets ) : [EOL] [comment] [EOL] if is_obstacle_between_points ( position [ i ] , center_door [ c ] , obstacles ) : [EOL] continue [EOL] [EOL] d = length ( center_door [ c ] - position [ i ] ) [comment] [EOL] if d < distance [ i ] : [EOL] distance [ i ] = d [EOL] detected_exit [ i ] = c [EOL] [comment] [EOL] [comment] [EOL] has_detected [ i ] = True [EOL] [EOL] return detected_exit , has_detected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import numba [EOL] [EOL] [EOL] @ numba . jit ( [ [string] ] , nopython = True , nogil = True , cache = True ) def polygon_area ( vertices ) : [EOL] [docstring] [EOL] n = len ( vertices ) [EOL] area = [number] [EOL] if n < [number] : [EOL] return area [EOL] x , y = vertices [ : , [number] ] , vertices [ : , [number] ] [EOL] for i in range ( [number] , n - [number] ) : [EOL] area += x [ i ] * ( y [ i + [number] ] - y [ i - [number] ] ) [EOL] [comment] [EOL] area += x [ n - [number] ] * ( y [ [number] ] - y [ n - [number] ] ) [EOL] [comment] [EOL] area += x [ [number] ] * ( y [ [number] ] - y [ n - [number] ] ) [EOL] return [number] * abs ( area ) [EOL] [EOL] [EOL] @ numba . jit ( [ [string] ] , nopython = True , nogil = True , cache = True ) def line_intersect ( x0 , x1 , y0 , y1 ) : [EOL] [docstring] [EOL] [comment] [EOL] u = x1 - x0 [EOL] v = y1 - y0 [EOL] b = y0 - x0 [EOL] d = u [ [number] ] * v [ [number] ] - u [ [number] ] * v [ [number] ] [EOL] if d == [number] : [EOL] return False [EOL] t0 = b [ [number] ] * v [ [number] ] - b [ [number] ] * v [ [number] ] [EOL] t1 = b [ [number] ] * u [ [number] ] - b [ [number] ] * u [ [number] ] [EOL] return [number] <= t0 / d <= [number] and [number] <= t1 / d <= [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import numba [EOL] from numba . types import f8 , boolean [EOL] from numba . typing . typeof import typeof [EOL] [EOL] from crowddynamics . core . geom2D import line_intersect [EOL] from crowddynamics . core . structures import obstacle_type_linear [EOL] [EOL] [EOL] @ numba . jit ( [ boolean ( f8 [ : ] , f8 [ : ] , typeof ( obstacle_type_linear ) [ : ] ) ] , nopython = True , nogil = True , cache = True ) def is_obstacle_between_points ( p0 , p1 , obstacles ) : [EOL] [docstring] [EOL] for obstacle in obstacles : [EOL] if line_intersect ( p0 , p1 , obstacle [ [string] ] , obstacle [ [string] ] ) : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] [EOL] [EOL] [comment] [EOL] obstacle_type_linear = np . dtype ( [ ( [string] , np . float64 , [number] ) , ( [string] , np . float64 , [number] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , List , Any [EOL] import shapely [EOL] import typing [EOL] [docstring] [EOL] from collections import Iterable [EOL] from functools import reduce [EOL] from itertools import chain [EOL] from typing import Callable [EOL] [EOL] import numpy as np [EOL] import shapely . geometry as geometry [EOL] import skimage . draw [EOL] from shapely import speedups [EOL] from shapely . geometry import Polygon , LineString , Point [EOL] from shapely . geometry . base import BaseGeometry , BaseMultipartGeometry [EOL] [EOL] from crowddynamics . core . structures import obstacle_type_linear [EOL] [EOL] if speedups . available : [EOL] speedups . enable ( ) [EOL] [EOL] [EOL] class GeomTypes ( object ) : [EOL] POINT = [number] [EOL] LINESTRING = [number] [EOL] POLYGON_HOLE = [number] [EOL] POLYGON_SHELL = [number] [EOL] [EOL] [EOL] def _geom_to_array ( geom ) : [EOL] if isinstance ( geom , geometry . Point ) : [EOL] yield np . array ( [ ( np . nan , GeomTypes . POINT ) ] ) [EOL] yield np . asarray ( geom . coords ) [EOL] elif isinstance ( geom , geometry . LineString ) : [EOL] yield np . array ( [ ( np . nan , GeomTypes . LINESTRING ) ] ) [EOL] yield np . asarray ( geom . coords ) [EOL] elif isinstance ( geom , geometry . Polygon ) : [EOL] for interior in geom . interiors : [EOL] yield np . array ( [ ( np . nan , GeomTypes . POLYGON_HOLE ) ] ) [EOL] yield np . asarray ( interior ) [EOL] yield np . array ( [ ( np . nan , GeomTypes . POLYGON_SHELL ) ] ) [EOL] yield np . asarray ( geom . exterior ) [EOL] elif isinstance ( geom , BaseMultipartGeometry ) : [EOL] return chain . from_iterable ( map ( geom_to_array , geom ) ) [EOL] else : [EOL] raise TypeError [EOL] [EOL] [EOL] def geom_to_array ( geom ) : [EOL] [docstring] [EOL] return np . concatenate ( list ( _geom_to_array ( geom ) ) ) [EOL] [EOL] [EOL] def geom_to_linesegment ( geom ) : [EOL] [docstring] [EOL] if isinstance ( geom , Point ) : [EOL] return iter ( ( ) ) [EOL] elif isinstance ( geom , LineString ) : [EOL] return zip ( geom . coords [ : - [number] ] , geom . coords [ [number] : ] ) [EOL] elif isinstance ( geom , Polygon ) : [EOL] return zip ( geom . exterior . coords [ : - [number] ] , geom . exterior . coords [ [number] : ] ) [EOL] elif isinstance ( geom , BaseMultipartGeometry ) : [EOL] return chain . from_iterable ( map ( geom_to_linesegment , geom ) ) [EOL] else : [EOL] raise TypeError ( [string] . format ( BaseGeometry ) ) [EOL] [EOL] [EOL] def geom_to_linear_obstacles ( geom ) : [EOL] [docstring] [EOL] segments = [ ] if geom is None else list ( geom_to_linesegment ( geom ) ) [EOL] return np . array ( segments , dtype = obstacle_type_linear ) [EOL] [EOL] [EOL] def draw_geom ( geom , grid , indicer , value ) : [EOL] [docstring] [EOL] if isinstance ( geom , Point ) : [EOL] pass [EOL] elif isinstance ( geom , LineString ) : [EOL] for line in geom_to_linesegment ( geom ) : [EOL] r0 , c0 , r1 , c1 = indicer ( line ) . flatten ( ) [EOL] x , y = skimage . draw . line ( r0 , c0 , r1 , c1 ) [EOL] grid [ y , x ] = value [EOL] elif isinstance ( geom , Polygon ) : [EOL] i = indicer ( geom . exterior ) [EOL] x , y = skimage . draw . polygon ( i [ : , [number] ] , i [ : , [number] ] ) [EOL] grid [ y , x ] = value [EOL] x , y = skimage . draw . polygon_perimeter ( i [ : , [number] ] , i [ : , [number] ] ) [EOL] grid [ y , x ] = value [EOL] for j in map ( indicer , geom . interiors ) : [EOL] x , y = skimage . draw . polygon ( j [ : , [number] ] , j [ : , [number] ] ) [EOL] grid [ y , x ] = [number] [EOL] elif isinstance ( geom , BaseMultipartGeometry ) : [EOL] for geo in geom : [EOL] draw_geom ( geo , grid , indicer , value ) [EOL] else : [EOL] raise TypeError [EOL] [EOL] [EOL] def union ( * geoms ) : [EOL] [docstring] [EOL] return reduce ( lambda x , y : x | y , geoms ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import hypothesis . strategies as st [EOL] import numpy as np [EOL] from hypothesis import given [EOL] [EOL] from crowddynamics . core . distance import distance_circles , distance_three_circles , distance_circle_line , distance_three_circle_line [EOL] from crowddynamics . testing import reals [EOL] [EOL] [EOL] @ given ( x0 = reals ( - [number] , [number] , shape = [number] ) , r0 = reals ( [number] , [number] ) , x1 = reals ( - [number] , [number] , shape = [number] ) , r1 = reals ( [number] , [number] ) ) def test_distance_circle_circle ( x0 , r0 , x1 , r1 ) : [EOL] h , n = distance_circles ( x0 , r0 , x1 , r1 ) [EOL] x = x0 - x1 [EOL] r_tot = r0 + r1 [EOL] [EOL] assert isinstance ( h , float ) [EOL] assert isinstance ( n , np . ndarray ) [EOL] assert n . dtype . type is np . float64 [EOL] [EOL] assert h >= - r_tot [EOL] [EOL] [EOL] @ given ( x0 = st . tuples ( * [number] * [ reals ( - [number] , [number] , shape = [number] ) ] ) , r0 = st . tuples ( * [number] * [ reals ( [number] , [number] ) ] ) , x1 = st . tuples ( * [number] * [ reals ( - [number] , [number] , shape = [number] ) ] ) , r1 = st . tuples ( * [number] * [ reals ( [number] , [number] ) ] ) ) def test_distance_three_circle ( x0 , r0 , x1 , r1 ) : [EOL] h , n , r_moment0 , r_moment1 = distance_three_circles ( x0 , r0 , x1 , r1 ) [EOL] [EOL] assert isinstance ( h , float ) [EOL] assert isinstance ( n , np . ndarray ) [EOL] assert n . dtype . type is np . float64 [EOL] assert isinstance ( r_moment0 , np . ndarray ) [EOL] assert r_moment0 . dtype . type is np . float64 [EOL] assert isinstance ( r_moment1 , np . ndarray ) [EOL] assert r_moment1 . dtype . type is np . float64 [EOL] [EOL] [EOL] @ given ( x = reals ( - [number] , [number] , shape = [number] ) , r = reals ( min_value = [number] , max_value = [number] ) , p0 = reals ( - [number] , [number] , shape = [number] ) , p1 = reals ( - [number] , [number] , shape = [number] ) ) def test_distance_circle_line ( x , r , p0 , p1 ) : [EOL] h , n = distance_circle_line ( x , r , p0 , p1 ) [EOL] assert isinstance ( h , float ) [EOL] assert isinstance ( n , np . ndarray ) [EOL] assert n . dtype . type is np . float64 [EOL] [EOL] [EOL] @ given ( x = st . tuples ( * [number] * [ reals ( - [number] , [number] , shape = [number] ) ] ) , r = st . tuples ( * [number] * [ reals ( min_value = [number] , max_value = [number] ) ] ) , p0 = reals ( - [number] , [number] , shape = [number] ) , p1 = reals ( - [number] , [number] , shape = [number] ) ) def test_distance_three_circle_line ( x , r , p0 , p1 ) : [EOL] h , n , r_moment = distance_three_circle_line ( x , r , p0 , p1 ) [EOL] assert isinstance ( h , float ) [EOL] assert isinstance ( n , np . ndarray ) [EOL] assert n . dtype . type is np . float64 [EOL] assert isinstance ( r_moment , np . ndarray ) [EOL] assert r_moment . dtype . type is np . float64 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from hypothesis import given , assume [EOL] [EOL] from crowddynamics . core . integrator import adaptive_timestep , euler_integrator , velocity_verlet_integrator [EOL] from crowddynamics . testing import reals [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) , dt_max = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) ) def test_adaptive_timestep1 ( agents_circular , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = adaptive_timestep ( agents_circular . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) , dt_max = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) ) def test_adaptive_timestep2 ( agents_three_circle , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = adaptive_timestep ( agents_three_circle . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) , dt_max = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) ) def test_euler_integration1 ( agents_circular , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = euler_integrator ( agents_circular . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) , dt_max = reals ( min_value = [number] , max_value = [number] , exclude_zero = [string] ) ) def test_euler_integration2 ( agents_three_circle , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = euler_integrator ( agents_three_circle . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] ) , dt_max = reals ( min_value = [number] , max_value = [number] ) ) def test_velocity_verlet1 ( agents_circular , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = velocity_verlet_integrator ( agents_circular . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL] [EOL] [EOL] @ given ( dt_min = reals ( min_value = [number] , max_value = [number] ) , dt_max = reals ( min_value = [number] , max_value = [number] ) ) def test_velocity_verlet2 ( agents_three_circle , dt_min , dt_max ) : [EOL] assume ( [number] < dt_min < dt_max ) [EOL] dt = velocity_verlet_integrator ( agents_three_circle . array , dt_min , dt_max ) [EOL] assert [number] < dt_min <= dt <= dt_max [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] from hypothesis import given , assume [EOL] [EOL] from crowddynamics . core . vector2D import cross , wrap_to_pi , truncate , rotate270 , normalize , length , angle , rotate90 , dot , unit_vector [EOL] from crowddynamics . testing import reals [EOL] [EOL] [EOL] @ given ( phi = reals ( ) ) def test_wrap_to_pi ( phi ) : [EOL] ans = wrap_to_pi ( phi ) [EOL] assert isinstance ( ans , float ) [EOL] assert - np . pi <= ans <= np . pi [EOL] if ( phi + np . pi ) % ( [number] * np . pi ) == [number] : [EOL] if phi > [number] : [EOL] assert ans == np . pi [EOL] else : [EOL] assert ans == - np . pi [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) ) def test_rotate90 ( a ) : [EOL] ans = rotate90 ( a ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) ) def test_rotate270 ( a ) : [EOL] ans = rotate270 ( a ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) ) def test_angle ( a ) : [EOL] ans = angle ( a ) [EOL] assert isinstance ( ans , float ) [EOL] assert - np . pi <= ans <= np . pi [EOL] [EOL] [EOL] @ given ( a = reals ( shape = ( [number] , [number] ) ) ) def test_angle_vec ( a ) : [EOL] ans = angle ( a ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] assert np . all ( ( - np . pi <= ans ) & ( ans <= np . pi ) ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) ) def test_length ( a ) : [EOL] ans = length ( a ) [EOL] assert isinstance ( ans , float ) [EOL] assert ans >= [number] [EOL] [EOL] [EOL] @ given ( a = reals ( shape = ( [number] , [number] ) ) ) def test_length_vec ( a ) : [EOL] ans = length ( a ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] assert np . all ( ans >= [number] ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) , b = reals ( shape = [number] ) ) def test_dot ( a , b ) : [EOL] ans = dot ( a , b ) [EOL] assert isinstance ( ans , float ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) , b = reals ( shape = [number] ) ) def test_cross ( a , b ) : [EOL] ans = cross ( a , b ) [EOL] assert isinstance ( ans , float ) [EOL] [EOL] [EOL] @ given ( a = reals ( shape = [number] ) ) def test_normalize ( a ) : [EOL] assume ( not np . allclose ( a , [number] ) or np . all ( a == [number] ) ) [EOL] assume ( not length ( a ) > [number] ** [number] ) [EOL] [EOL] ans = normalize ( a ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] l = length ( ans ) [EOL] if np . all ( a == [number] ) : [EOL] assert np . isclose ( l , [number] ) [EOL] else : [EOL] assert np . isclose ( l , [number] ) [EOL] [EOL] [EOL] @ given ( v = reals ( - [number] , [number] , exclude_zero = [string] , shape = [number] ) , l = reals ( [number] , [number] , exclude_zero = [string] ) ) def test_truncate ( v , l ) : [EOL] vlen = length ( v ) [EOL] [EOL] truncate ( v , l ) [EOL] if vlen > l : [EOL] assert np . isclose ( length ( v ) , l ) [EOL] else : [EOL] assert length ( v ) <= l [EOL] [EOL] [EOL] @ given ( reals ( - [number] , [number] ) ) def test_unit_vector ( orientation ) : [EOL] ans = unit_vector ( orientation ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] assert ans . ndim == [number] [EOL] [EOL] [EOL] @ given ( reals ( - [number] , [number] , shape = [number] ) ) def test_unit_vector_vec ( orientation ) : [EOL] ans = unit_vector ( orientation ) [EOL] assert isinstance ( ans , np . ndarray ) [EOL] assert ans . ndim == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import numpy [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] import pytest [EOL] from hypothesis . control import assume [EOL] from hypothesis . core import given [EOL] from scipy . spatial . qhull import QhullError , Voronoi [EOL] [EOL] from crowddynamics . core . quantities import density_voronoi_1 [EOL] from crowddynamics . testing import reals [EOL] [EOL] [EOL] def all_unique ( data ) : [EOL] [docstring] [EOL] ncols = data . shape [ [number] ] [EOL] dtype = data . dtype . descr * ncols [EOL] struct = data . view ( dtype ) [EOL] return len ( np . unique ( struct ) ) == len ( data ) [EOL] [EOL] [EOL] def does_not_raise_Qhull_error ( points ) : [EOL] [docstring] [EOL] try : [EOL] vor = Voronoi ( points ) [EOL] return True [EOL] except QhullError : [EOL] return False [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) [comment] [EOL] @ given ( points = reals ( [number] , [number] , shape = ( [number] , [number] ) ) ) [comment] [EOL] def test_density_voronoi_1 ( points ) : [EOL] assume ( does_not_raise_Qhull_error ( points ) ) [EOL] assume ( all_unique ( points ) ) [EOL] [EOL] cell_size = [number] [EOL] density = density_voronoi_1 ( points , cell_size = cell_size ) [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import DefaultDict , List , Any , Generator , Tuple [EOL] import typing [EOL] import random [EOL] from collections import defaultdict [EOL] [EOL] import numpy as np [EOL] import pytest [EOL] [EOL] from crowddynamics . core . block_list import MutableBlockList [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [number] , ) ) @ pytest . mark . parametrize ( [string] , ( [number] , [number] , [number] , [number] ) ) def test_defaultdict_setitem ( benchmark , size , cell_size ) : [EOL] def f ( ) : [EOL] keys = ( ( random . uniform ( - [number] , [number] ) // cell_size , random . uniform ( - [number] , [number] ) // cell_size ) for _ in range ( size ) ) [EOL] values = range ( size ) [EOL] d = defaultdict ( list ) [EOL] for key , value in zip ( keys , values ) : [EOL] d [ key ] . append ( value ) [EOL] [EOL] benchmark ( f ) [EOL] assert True [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [number] , ) ) @ pytest . mark . parametrize ( [string] , ( [number] , [number] , [number] , [number] ) ) def test_mutable_blocklist_setitem ( benchmark , size , cell_size ) : [EOL] def f ( ) : [EOL] keys = ( ( random . uniform ( - [number] , [number] ) , random . uniform ( - [number] , [number] ) ) for _ in range ( size ) ) [EOL] values = range ( size ) [EOL] mutable_blocklist = MutableBlockList ( cell_size ) [EOL] for key , value in zip ( keys , values ) : [EOL] mutable_blocklist [ key ] = value [EOL] [EOL] benchmark ( f ) [EOL] assert True [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [number] , ) ) @ pytest . mark . parametrize ( [string] , ( [number] , [number] , [number] ) ) def test_mutable_blocklist_getitem ( benchmark , size , cell_size ) : [EOL] mutable_blocklist = MutableBlockList ( cell_size ) [EOL] [EOL] for value in range ( size ) : [EOL] key = np . random . uniform ( - [number] , [number] , [number] ) [EOL] mutable_blocklist [ key ] = value [EOL] [EOL] key = np . random . uniform ( - [number] , [number] , [number] ) [EOL] benchmark ( mutable_blocklist . __getitem__ , key ) [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import numba [EOL] import numpy as np [EOL] from numba import f8 , void , typeof [EOL] from numba . types import boolean [EOL] [EOL] from crowddynamics . simulation . agents import agent_type_circular , agent_type_three_circle [EOL] from crowddynamics . core . vector2D import wrap_to_pi [EOL] [EOL] [EOL] @ numba . jit ( [ f8 [ : ] ( f8 , f8 , f8 , f8 [ : ] , f8 [ : ] ) ] , nopython = True , nogil = True , cache = True ) def force_adjust ( mass , tau_adj , v0 , e0 , v ) : [EOL] [docstring] [EOL] [comment] [EOL] return ( mass / tau_adj ) * ( v0 * e0 - v ) [EOL] [EOL] [EOL] @ numba . jit ( [ f8 ( f8 , f8 , f8 , f8 , f8 , f8 ) ] , nopython = True , nogil = True , cache = True ) def torque_adjust ( inertia_rot , tau_rot , phi_0 , phi , omega_0 , omega ) : [EOL] [docstring] [EOL] return inertia_rot / tau_rot * ( wrap_to_pi ( phi_0 - phi ) / np . pi * omega_0 - omega ) [EOL] [EOL] [EOL] @ numba . jit ( [ void ( typeof ( agent_type_circular ) [ : ] , boolean [ : ] ) , void ( typeof ( agent_type_three_circle ) [ : ] , boolean [ : ] ) ] , nopython = True , nogil = True , cache = True ) def force_adjust_agents ( agents , mask ) : [EOL] [docstring] [EOL] for agent , m in zip ( agents , mask ) : [EOL] if not m : [EOL] continue [EOL] agent [ [string] ] [ : ] += force_adjust ( agent [ [string] ] , agent [ [string] ] , agent [ [string] ] , agent [ [string] ] , agent [ [string] ] ) [EOL] [EOL] [EOL] @ numba . jit ( void ( typeof ( agent_type_three_circle ) [ : ] , boolean [ : ] ) , nopython = True , nogil = True , cache = True ) def torque_adjust_agents ( agents , mask ) : [EOL] [docstring] [EOL] for agent , m in zip ( agents , mask ) : [EOL] if not m : [EOL] continue [EOL] agent [ [string] ] += torque_adjust ( agent [ [string] ] , agent [ [string] ] , agent [ [string] ] , agent [ [string] ] , agent [ [string] ] , agent [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] [EOL] def attractor_point ( ) : [EOL] [docstring] [EOL] return NotImplementedError [EOL] [EOL] [EOL] def adjusting_force_intra_subgroup ( ) : [EOL] [docstring] [EOL] return NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import numba [EOL] import numpy as np [EOL] from numba import f8 [EOL] [EOL] [EOL] @ numba . jit ( [ f8 [ : ] ( f8 , f8 [ : ] , f8 , f8 ) ] , nopython = True , nogil = True , cache = True ) def force_social_helbing ( h , n , a , b ) : [EOL] [docstring] [EOL] return a * np . exp ( - h / b ) * n [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_interactions ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numba [EOL] import numpy as np [EOL] from cell_lists import add_to_cells , neighboring_cells , iter_nearest_neighbors [EOL] from numba import f8 , i8 [EOL] from numba . typing . typeof import typeof [EOL] [EOL] from crowddynamics . core . sensory_region import is_obstacle_between_points [EOL] from crowddynamics . core . structures import obstacle_type_linear [EOL] from crowddynamics . core . vector2D import length , normalize , weighted_average , dot [EOL] from crowddynamics . simulation . agents import NO_LEADER , NO_TARGET [EOL] [EOL] MISSING_NEIGHBOR = - [number] [EOL] [EOL] [EOL] @ numba . jit ( [ f8 [ : , : ] ( f8 [ : , : ] ) ] , nopython = True , nogil = True , cache = True ) def normalize_nx2 ( v ) : [EOL] out = np . zeros_like ( v ) [EOL] for i in range ( len ( v ) ) : [EOL] out [ i , : ] = normalize ( v [ i , : ] ) [EOL] return out [EOL] [EOL] [EOL] @ numba . jit ( [ ( f8 [ : ] , f8 [ : ] , f8 [ : ] , f8 [ : ] , f8 ) ] , nopython = True , nogil = True , cache = True ) def herding_relationship ( x1 , x2 , v1 , v2 , phi = np . pi / [number] ) : [EOL] [docstring] [EOL] if length ( v1 ) == [number] or length ( v2 ) == [number] : [EOL] return False , False [EOL] [EOL] e_rel = normalize ( x2 - x1 ) [EOL] [EOL] c_i = dot ( e_rel , normalize ( v1 ) ) [EOL] c_j = - dot ( e_rel , normalize ( v2 ) ) [EOL] [EOL] [comment] [EOL] cos_phi = np . cos ( phi ) [EOL] if cos_phi < c_i < [number] : [EOL] if cos_phi < c_j < [number] : [EOL] return False , False [EOL] else : [EOL] return True , False [EOL] else : [EOL] if cos_phi < c_j < [number] : [EOL] return False , True [EOL] else : [EOL] return True , True [EOL] [EOL] [EOL] @ numba . jit ( nopython = True , nogil = True ) def set_neighbor ( i , j , l , neighbors , distances , distances_max ) : [EOL] argmax = np . argmax ( distances [ i , : ] ) [EOL] neighbors [ i , argmax ] = j [EOL] distances [ i , argmax ] = l [EOL] distances_max [ i ] = np . max ( distances [ i , : ] ) [EOL] [EOL] [EOL] @ numba . jit ( [ ( f8 [ : , : ] , f8 , i8 , i8 [ : ] , i8 [ : ] , i8 [ : ] , i8 [ : ] , i8 [ : ] , typeof ( obstacle_type_linear ) [ : ] ) ] , nopython = True , nogil = True , cache = True ) def find_nearest_neighbors ( position , sight , size_nearest_other , cell_indices , neigh_cells , points_indices , cells_count , cells_offset , obstacles ) : [EOL] size = len ( position ) [EOL] [EOL] neighbors = np . full ( ( size , size_nearest_other ) , fill_value = MISSING_NEIGHBOR , dtype = np . int64 ) [EOL] [docstring] [EOL] [EOL] distances = np . full ( ( size , size_nearest_other ) , fill_value = sight , dtype = np . float64 ) [EOL] [docstring] [EOL] [EOL] distances_max = np . full ( size , fill_value = sight , dtype = np . float64 ) [EOL] [docstring] [EOL] [EOL] for i , j in iter_nearest_neighbors ( cell_indices , neigh_cells , points_indices , cells_count , cells_offset ) : [EOL] [comment] [EOL] if is_obstacle_between_points ( position [ i ] , position [ j ] , obstacles ) : [EOL] continue [EOL] [EOL] l = length ( position [ i ] - position [ j ] ) [EOL] [EOL] if l < distances_max [ i ] : [EOL] set_neighbor ( i , j , l , neighbors , distances , distances_max ) [EOL] [EOL] if l < distances_max [ j ] : [EOL] set_neighbor ( j , i , l , neighbors , distances , distances_max ) [EOL] [EOL] return neighbors [EOL] [EOL] [EOL] @ numba . jit ( nopython = True , nogil = True , cache = True ) def herding_interaction ( is_herding , position , velocity , neighbors , weight_position , phi ) : [EOL] [docstring] [EOL] [comment] [EOL] new_direction = np . zeros_like ( position ) [EOL] has_new_direction = np . zeros ( position . shape [ [number] ] , dtype = np . bool_ ) [EOL] [EOL] mean_position = np . zeros ( position . shape [ [number] ] ) [EOL] mean_velocity = np . zeros ( velocity . shape [ [number] ] ) [EOL] [EOL] for i in range ( position . shape [ [number] ] ) : [EOL] if not is_herding [ i ] : [EOL] continue [EOL] [EOL] num_neigh = [number] [EOL] [EOL] for j in neighbors [ i , : ] : [EOL] if j == MISSING_NEIGHBOR : [EOL] continue [EOL] [EOL] is_heading_away , _ = herding_relationship ( position [ i ] , position [ j ] , velocity [ i ] , velocity [ j ] , phi ) [EOL] [EOL] if is_heading_away : [EOL] mean_position [ : ] += position [ j , : ] [EOL] mean_velocity [ : ] += velocity [ j , : ] [EOL] num_neigh += [number] [EOL] [EOL] if num_neigh > [number] : [EOL] new_direction [ i , : ] = normalize ( weighted_average ( normalize ( mean_position [ : ] / num_neigh - position [ i , : ] ) , normalize ( mean_velocity [ : ] ) , weight_position ) ) [EOL] has_new_direction [ i ] = True [EOL] [EOL] mean_position [ : ] = [number] [EOL] mean_velocity [ : ] = [number] [EOL] [EOL] return new_direction , has_new_direction [EOL] [EOL] [EOL] @ numba . jit ( nopython = True , nogil = True , cache = True ) def leader_follower_interaction_brute ( is_follower , is_leader , position , velocity , weight_position , phi , target , index_leader , obstacles , sight ) : [EOL] has_strategy = np . zeros ( len ( position ) , dtype = np . bool_ ) [EOL] new_direction = np . zeros_like ( position ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] indices = np . arange ( len ( position ) ) [EOL] leaders = indices [ is_leader ] [EOL] distances = np . zeros ( leaders . shape , dtype = np . float64 ) [EOL] [EOL] [comment] [EOL] for i in indices [ is_follower ] : [EOL] behind_obstacle = [number] [EOL] heading_away = [number] [EOL] [EOL] [comment] [EOL] for k , j in enumerate ( leaders ) : [EOL] distances [ k ] = length ( position [ i ] - position [ j ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for k in np . argsort ( distances ) : [EOL] if distances [ k ] > sight : [EOL] continue [EOL] [EOL] j = leaders [ k ] [EOL] [EOL] if is_obstacle_between_points ( position [ i ] , position [ j ] , obstacles ) : [EOL] [comment] [EOL] leader = index_leader [ i ] [EOL] [comment] [EOL] if leader != NO_LEADER and leader == j : [EOL] [comment] [EOL] [comment] [EOL] target [ i ] = target [ leader ] [EOL] has_strategy [ i ] = True [EOL] break [EOL] else : [EOL] continue [EOL] [EOL] elif index_leader [ i ] == j : [EOL] leader = index_leader [ i ] [EOL] target [ i ] = target [ leader ] [EOL] has_strategy [ i ] = True [EOL] break [EOL] [EOL] else : [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if not is_obstacle_between_points ( position [ i ] , position [ j ] , obstacles ) and index_leader [ i ] == NO_LEADER : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] index_leader [ i ] = j [EOL] leader = index_leader [ i ] [EOL] [comment] [EOL] [comment] [EOL] target [ i ] = target [ leader ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] has_strategy [ i ] = True [EOL] break [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] return target , has_strategy [EOL] [EOL] [EOL] def leader_follower_interaction ( agents , obstacles , sight , phi = [number] * np . pi , weight_position_leader = [number] ) : [EOL] [comment] [EOL] [comment] [EOL] target , has_strategy = leader_follower_interaction_brute ( agents [ [string] ] , agents [ [string] ] , agents [ [string] ] , agents [ [string] ] , weight_position_leader , phi , agents [ [string] ] , agents [ [string] ] , obstacles , sight ) [EOL] [comment] [EOL] np . set_printoptions ( threshold = np . nan ) [EOL] is_lost = ~ has_strategy & agents [ [string] ] [EOL] has_guide = has_strategy & agents [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] agents [ [string] ] [ has_guide ] = target [ has_guide ] [EOL] agents [ [string] ] [ is_lost ] = agents [ [string] ] [ is_lost ] [EOL] [EOL] [comment] [EOL] return [number] [EOL] [EOL] [EOL] def leader_follower_with_herding_interaction ( agents , obstacles , sight , size_nearest_other , phi = [number] * np . pi , weight_position_herding = [number] , weight_position_leader = [number] , weight_direction_leader = [number] ) : [EOL] position = agents [ [string] ] [EOL] velocity = agents [ [string] ] [EOL] is_leader = agents [ [string] ] [EOL] is_follower = agents [ [string] ] [EOL] sight_leader = [number] [EOL] [EOL] cell_size = sight [EOL] points_indices , cells_count , cells_offset , grid_shape = add_to_cells ( agents [ [string] ] , cell_size ) [EOL] cell_indices = np . arange ( len ( cells_count ) ) [EOL] neigh_cells = neighboring_cells ( grid_shape ) [EOL] [EOL] neighbors = find_nearest_neighbors ( position , sight , size_nearest_other , cell_indices , neigh_cells , points_indices , cells_count , cells_offset , obstacles ) [EOL] [EOL] direction , has_direction = herding_interaction ( is_follower , position , velocity , neighbors , weight_position_herding , phi ) [EOL] [EOL] agents [ [string] ] [ has_direction ] = NO_TARGET [EOL] [EOL] direction_leader , has_strategy = leader_follower_interaction_brute ( is_follower , is_leader , position , velocity , weight_position_leader , phi , agents [ [string] ] , agents [ [string] ] , obstacles , sight_leader ) [EOL] [EOL] [comment] [EOL] is_lost = ~ ( has_direction | has_strategy ) & is_follower [EOL] agents [ [string] ] [ is_lost ] = agents [ [string] ] [ is_lost ] [EOL] [EOL] return normalize_nx2 ( weighted_average ( direction_leader , direction , weight_direction_leader ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import numba [EOL] from numba import void , typeof [EOL] [EOL] from crowddynamics . simulation . agents import agent_type_three_circle [EOL] from crowddynamics . core . vector2D import angle [EOL] [EOL] [EOL] def orientation ( ) : [EOL] return NotImplementedError [EOL] [EOL] [EOL] @ numba . jit ( void ( typeof ( agent_type_three_circle ) [ : ] ) , nopython = True , nogil = True , cache = True ) def orient_towards_target_direction ( agents ) : [EOL] for agent in agents : [EOL] agent [ [string] ] = angle ( agent [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import numba [EOL] import numpy as np [EOL] from loggingtools import log_with [EOL] from numba import f8 , i8 [EOL] [EOL] from crowddynamics . core . steering . quickest_path import distance_map , direction_map [EOL] from crowddynamics . core . vector2D import normalize [EOL] [EOL] [EOL] @ log_with ( arguments = False , timed = True ) @ numba . jit ( ( f8 [ : , : ] , numba . types . Tuple ( ( f8 [ : , : ] , f8 [ : , : ] ) ) , numba . types . Tuple ( ( f8 [ : , : ] , f8 [ : , : ] ) ) , f8 , f8 ) , nopython = True , nogil = True , cache = True ) def obstacle_handling ( dmap_obs , dir_map_obs , dir_map_targets , radius , strength ) : [EOL] [docstring] [EOL] u1 , v1 = dir_map_obs [EOL] u2 , v2 = dir_map_targets [EOL] u_out , v_out = np . copy ( u2 ) , np . copy ( v2 ) [EOL] [EOL] n , m = dmap_obs . shape [EOL] for i in range ( n ) : [EOL] for j in range ( m ) : [EOL] [comment] [EOL] x = - dmap_obs [ i , j ] [EOL] if [number] < x < radius : [EOL] [comment] [EOL] p = strength ** ( x / radius ) [EOL] [comment] [EOL] u_out [ i , j ] = - p * u1 [ i , j ] + ( [number] - p ) * u2 [ i , j ] [EOL] v_out [ i , j ] = - p * v1 [ i , j ] + ( [number] - p ) * v2 [ i , j ] [EOL] [EOL] [comment] [EOL] l = np . hypot ( u_out , v_out ) [EOL] return u_out / l , v_out / l [EOL] [EOL] [EOL] @ numba . jit ( ( f8 [ : , : ] , numba . types . Tuple ( ( f8 [ : , : ] , f8 [ : , : ] ) ) , f8 [ : , : ] , i8 [ : , : ] , f8 , f8 ) , nopython = True , nogil = True , cache = True ) def obstacle_handling_continuous ( dmap_obs , dir_map_obs , direction_target , indices , radius , strength ) : [EOL] n , m = dmap_obs . shape [EOL] u1 , v1 = dir_map_obs [EOL] new_direction = np . copy ( direction_target ) [EOL] [EOL] for k in range ( len ( indices ) ) : [EOL] i , j = indices [ k , [number] ] , indices [ k , [number] ] [EOL] u2 , v2 = direction_target [ k , [number] ] , direction_target [ k , [number] ] [EOL] x = - dmap_obs [ i , j ] [EOL] [EOL] if not ( [number] <= i < n and [number] <= j < m ) : [EOL] continue [EOL] [EOL] if [number] < x < radius : [EOL] [comment] [EOL] p = strength ** ( x / radius ) [EOL] [comment] [EOL] new_direction [ k , [number] ] = - p * u1 [ i , j ] + ( [number] - p ) * u2 [EOL] new_direction [ k , [number] ] = - p * v1 [ i , j ] + ( [number] - p ) * v2 [EOL] new_direction [ k , : ] = normalize ( new_direction [ k , : ] ) [EOL] [EOL] return new_direction [EOL] [EOL] [EOL] @ log_with ( arguments = False , timed = True ) def direction_map_obstacles ( mgrid , obstacles ) : [EOL] [docstring] [EOL] dmap_obs = distance_map ( mgrid , obstacles , None ) [EOL] dir_map_obs = direction_map ( dmap_obs ) [EOL] return dir_map_obs , dmap_obs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import pytest [EOL] from hypothesis . core import given [EOL] [EOL] from crowddynamics . core . steering . collective_motion import leader_follower_with_herding_interaction [EOL] from crowddynamics . core . structures import obstacle_type_linear [EOL] from crowddynamics . testing import reals [EOL] [EOL] [EOL] @ pytest . mark . skip ( [string] ) @ given ( position = reals ( [number] , [number] , shape = ( [number] , [number] ) ) , direction = reals ( [number] , [number] , shape = ( [number] , [number] ) ) ) def test_herding_block_list ( position , direction ) : [EOL] sight = [number] [EOL] neighborhood_size = [number] [EOL] obstacles = np . zeros ( [number] , dtype = obstacle_type_linear ) [EOL] [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from crowddynamics . examples . collective_motion import FourExits [EOL] from crowddynamics . simulation . agents import ThreeCircle , Circular [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] simulation = FourExits ( agent_type = Circular ) [EOL] simulation . update ( ) [EOL] simulation . update ( ) [EOL] simulation . update ( ) [EOL] simulation . update ( ) [EOL] simulation . update ( ) [EOL] simulation . update ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from crowddynamics . exceptions import CrowdDynamicsException [EOL] [EOL] [EOL] class CrowdDynamicsGUIException ( CrowdDynamicsException ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class FeatureNotImplemented ( CrowdDynamicsGUIException , NotImplementedError ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import logging [EOL] import qtgui [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] from collections import OrderedDict , namedtuple [EOL] from multiprocessing import Queue [EOL] [EOL] import numpy as np [EOL] import pyqtgraph as pg [EOL] from PyQt4 import QtGui , QtCore [EOL] from copy import deepcopy [EOL] from crowddynamics . simulation . multiagent import MultiAgentProcess , LogicNode , MultiAgentSimulation [EOL] from crowddynamics . traits import class_own_traits [EOL] from crowddynamics . utils import import_subclasses [EOL] from loggingtools import log_with [EOL] from traitlets . traitlets import Instance [EOL] [EOL] from qtgui . exceptions import CrowdDynamicsGUIException [EOL] from qtgui . graphics import MultiAgentPlot [EOL] from qtgui . traits import trait_to_QWidget [EOL] from qtgui . ui . gui import Ui_MainWindow [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] Message = namedtuple ( [string] , [string] ) [EOL] [EOL] [EOL] class GuiCommunication ( LogicNode ) : [EOL] [docstring] [EOL] queue = Instance ( klass = type ( Queue ( ) ) , allow_none = True ) [EOL] [EOL] def update ( self , * args , ** kwargs ) : [EOL] self . queue . put ( Message ( agents = np . copy ( self . simulation . agents . array ) , data = self . simulation . data ) ) [EOL] [EOL] [EOL] @ log_with ( ) def clear_queue ( queue ) : [EOL] [docstring] [EOL] while not queue . empty ( ) : [EOL] queue . get ( ) [EOL] [EOL] [EOL] @ log_with ( ) def clear_widgets ( layout ) : [EOL] [docstring] [EOL] for i in reversed ( range ( layout . count ( ) ) ) : [EOL] if i in ( [number] , [number] ) : [EOL] continue [EOL] layout . itemAt ( i ) . widget ( ) . setParent ( None ) [EOL] [EOL] [EOL] class MainWindow ( QtGui . QMainWindow , Ui_MainWindow ) : [EOL] [docstring] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] def __init__ ( self ) : [EOL] super ( MainWindow , self ) . __init__ ( ) [EOL] self . setupUi ( self ) [EOL] [EOL] [comment] [EOL] self . configs = OrderedDict ( ) [EOL] self . simulation = None [EOL] self . simulation_cls = None [EOL] self . simulation_kwargs = { } [EOL] self . process = None [EOL] self . queue = Queue ( maxsize = [number] ) [EOL] [EOL] [comment] [EOL] pg . setConfigOptions ( antialias = True ) [EOL] self . timer = QtCore . QTimer ( self ) [EOL] self . plot = MultiAgentPlot ( ) [EOL] self . graphicsLayout . setBackground ( None ) [EOL] self . graphicsLayout . addItem ( self . plot , [number] , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] self . initButton = QtGui . QPushButton ( [string] ) [EOL] [EOL] [comment] [EOL] self . enable_controls ( False ) [comment] [EOL] self . timer . timeout . connect ( self . update_plots ) [EOL] self . startButton . clicked . connect ( self . start ) [EOL] self . stopButton . clicked . connect ( self . stop ) [EOL] self . initButton . clicked . connect ( self . set_simulation ) [EOL] self . simulationsBox . currentIndexChanged [ str ] . connect ( self . set_sidebar ) [EOL] self . actionOpen . triggered . connect ( self . load_simulation_cfg ) [EOL] [EOL] def enable_controls ( self , boolean ) : [EOL] [docstring] [EOL] self . startButton . setEnabled ( boolean ) [EOL] self . stopButton . setEnabled ( boolean ) [EOL] self . saveButton . setEnabled ( boolean ) [EOL] [EOL] def reset_buffers ( self ) : [EOL] [docstring] [EOL] clear_queue ( self . queue ) [EOL] [EOL] @ log_with ( qualname = True , ignore = ( [string] , ) ) def set_simulations ( self , module_path ) : [EOL] self . configs . update ( import_subclasses ( module_path , MultiAgentSimulation ) ) [EOL] self . simulationsBox . addItems ( list ( self . configs . keys ( ) ) ) [EOL] [EOL] @ log_with ( qualname = True , ignore = ( [string] , ) ) def load_simulation_cfg ( self ) : [EOL] [docstring] [EOL] self . simulationsBox . clear ( ) [EOL] module_path = QtGui . QFileDialog ( ) . getOpenFileName ( self , [string] , [string] , [string] ) [EOL] self . set_simulations ( module_path ) [EOL] [EOL] @ log_with ( qualname = True , ignore = ( [string] , ) ) def set_sidebar ( self , simuname ) : [EOL] [docstring] [EOL] self . reset_buffers ( ) [EOL] [EOL] [comment] [EOL] clear_widgets ( self . sidebarLeft ) [EOL] [EOL] [comment] [EOL] simulation_cls = deepcopy ( self . configs [ simuname ] ) [EOL] simulation_kwargs = { name : trait . default_value for name , trait in class_own_traits ( simulation_cls ) } [EOL] [EOL] def gen_callback ( name ) : [EOL] @ log_with ( ) def callback ( value ) : [EOL] simulation_kwargs [ name ] = value [EOL] return callback [EOL] [EOL] for name , trait in class_own_traits ( simulation_cls ) : [EOL] label , widget = trait_to_QWidget ( name , trait , gen_callback ( name ) ) [EOL] self . sidebarLeft . addWidget ( label ) [EOL] self . sidebarLeft . addWidget ( widget ) [EOL] [EOL] self . simulation_cls = simulation_cls [EOL] self . simulation_kwargs = simulation_kwargs [EOL] self . sidebarLeft . addWidget ( self . initButton ) [EOL] [EOL] def set_simulation ( self ) : [EOL] simulation = self . simulation_cls ( ** self . simulation_kwargs ) [EOL] [EOL] communication = GuiCommunication ( simulation ) [EOL] communication . queue = self . queue [EOL] [EOL] node = simulation . logic [ [string] ] [EOL] node . inject_after ( communication ) [EOL] [EOL] self . plot . configure ( simulation . field . domain , simulation . field . obstacles , simulation . field . targets , simulation . agents . array ) [EOL] [EOL] [comment] [EOL] self . simulation = simulation [EOL] self . enable_controls ( True ) [EOL] [EOL] def stop_plotting ( self ) : [EOL] self . timer . stop ( ) [EOL] self . enable_controls ( True ) [EOL] self . process = None [EOL] [EOL] def update_plots ( self ) : [EOL] [docstring] [EOL] message = self . queue . get ( ) [EOL] if message is not MultiAgentProcess . EndProcess : [EOL] try : [EOL] self . plot . update_data ( message ) [EOL] [comment] [EOL] except CrowdDynamicsGUIException as error : [EOL] self . logger . error ( [string] . format ( error ) ) [EOL] self . stop_plotting ( ) [EOL] else : [EOL] self . stop_plotting ( ) [EOL] [EOL] def start ( self ) : [EOL] [docstring] [EOL] if self . simulation : [EOL] [comment] [EOL] [comment] [EOL] self . startButton . setEnabled ( False ) [EOL] self . process = MultiAgentProcess ( self . simulation , self . queue ) [EOL] self . process . start ( ) [EOL] self . timer . start ( [number] ) [EOL] else : [EOL] self . logger . info ( [string] ) [EOL] [EOL] def stop ( self ) : [EOL] [docstring] [EOL] if self . process : [EOL] self . process . stop ( ) [EOL] else : [EOL] self . logger . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $crowddynamics-qtgui.qtgui.main.GuiCommunication$ 0 0 0 0 0 0 $crowddynamics-qtgui.qtgui.main.GuiCommunication$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $crowddynamics-qtgui.qtgui.main.GuiCommunication$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import sys [EOL] [EOL] import click [EOL] from PyQt4 import QtGui , QtCore [EOL] from crowddynamics . logging import setup_logging [EOL] [EOL] from qtgui . main import MainWindow [EOL] [EOL] [EOL] def run_gui ( simulation_cfg = None ) : [EOL] [docstring] [EOL] setup_logging ( ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . info ( [string] ) [EOL] app = QtGui . QApplication ( sys . argv ) [EOL] win = MainWindow ( ) [EOL] if simulation_cfg : [EOL] win . set_simulations ( simulation_cfg ) [EOL] win . show ( ) [EOL] [EOL] [comment] [EOL] if ( sys . flags . interactive != [number] ) or not hasattr ( QtCore , [string] ) : [EOL] app . exec ( ) [EOL] else : [EOL] logger . warning ( [string] ) [EOL] [EOL] logging . info ( [string] ) [EOL] logging . shutdown ( ) [EOL] [EOL] win . close ( ) [EOL] app . exit ( ) [EOL] sys . exit ( ) [EOL] [EOL] [EOL] @ click . group ( ) def main ( ) : [EOL] pass [EOL] [EOL] [EOL] @ main . command ( ) @ click . option ( [string] , type = str , default = None ) def run ( simulation_file ) : [EOL] [docstring] [EOL] run_gui ( simulation_file ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] from . _version import get_versions [EOL] __version__ = get_versions ( ) [ [string] ] [EOL] del get_versions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] [EOL] def test_gui ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from PyQt4 import QtCore , QtGui [EOL] [EOL] try : [EOL] _fromUtf8 = QtCore . QString . fromUtf8 [EOL] except AttributeError : [EOL] def _fromUtf8 ( s ) : [EOL] return s [EOL] [EOL] try : [EOL] _encoding = QtGui . QApplication . UnicodeUTF8 [EOL] def _translate ( context , text , disambig ) : [EOL] return QtGui . QApplication . translate ( context , text , disambig , _encoding ) [EOL] except AttributeError : [EOL] def _translate ( context , text , disambig ) : [EOL] return QtGui . QApplication . translate ( context , text , disambig ) [EOL] [EOL] class Ui_MainWindow ( object ) : [EOL] def setupUi ( self , MainWindow ) : [EOL] MainWindow . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] MainWindow . resize ( [number] , [number] ) [EOL] MainWindow . setStyleSheet ( _fromUtf8 ( [string] ) ) [EOL] self . centralwidget = QtGui . QWidget ( MainWindow ) [EOL] sizePolicy = QtGui . QSizePolicy ( QtGui . QSizePolicy . Preferred , QtGui . QSizePolicy . Preferred ) [EOL] sizePolicy . setHorizontalStretch ( [number] ) [EOL] sizePolicy . setVerticalStretch ( [number] ) [EOL] sizePolicy . setHeightForWidth ( self . centralwidget . sizePolicy ( ) . hasHeightForWidth ( ) ) [EOL] self . centralwidget . setSizePolicy ( sizePolicy ) [EOL] self . centralwidget . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . gridLayout = QtGui . QGridLayout ( self . centralwidget ) [EOL] self . gridLayout . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . sidebarLeft = QtGui . QVBoxLayout ( ) [EOL] self . sidebarLeft . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . simulationsBox = QtGui . QComboBox ( self . centralwidget ) [EOL] self . simulationsBox . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . sidebarLeft . addWidget ( self . simulationsBox ) [EOL] spacerItem = QtGui . QSpacerItem ( [number] , [number] , QtGui . QSizePolicy . Minimum , QtGui . QSizePolicy . Expanding ) [EOL] self . sidebarLeft . addItem ( spacerItem ) [EOL] self . gridLayout . addLayout ( self . sidebarLeft , [number] , [number] , [number] , [number] ) [EOL] self . graphicsLayout = GraphicsLayoutWidget ( self . centralwidget ) [EOL] self . graphicsLayout . setStyleSheet ( _fromUtf8 ( [string] ) ) [EOL] self . graphicsLayout . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . gridLayout . addWidget ( self . graphicsLayout , [number] , [number] , [number] , [number] ) [EOL] self . controlbarDown = QtGui . QWidget ( self . centralwidget ) [EOL] self . controlbarDown . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . controlbar = QtGui . QHBoxLayout ( self . controlbarDown ) [EOL] self . controlbar . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . startButton = QtGui . QPushButton ( self . controlbarDown ) [EOL] self . startButton . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . controlbar . addWidget ( self . startButton ) [EOL] self . stopButton = QtGui . QPushButton ( self . controlbarDown ) [EOL] self . stopButton . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . controlbar . addWidget ( self . stopButton ) [EOL] self . saveButton = QtGui . QPushButton ( self . controlbarDown ) [EOL] self . saveButton . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . controlbar . addWidget ( self . saveButton ) [EOL] self . gridLayout . addWidget ( self . controlbarDown , [number] , [number] , [number] , [number] ) [EOL] MainWindow . setCentralWidget ( self . centralwidget ) [EOL] self . menubar = QtGui . QMenuBar ( MainWindow ) [EOL] self . menubar . setGeometry ( QtCore . QRect ( [number] , [number] , [number] , [number] ) ) [EOL] self . menubar . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . simulationMenu = QtGui . QMenu ( self . menubar ) [EOL] self . simulationMenu . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . visualisationMenu = QtGui . QMenu ( self . menubar ) [EOL] self . visualisationMenu . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] MainWindow . setMenuBar ( self . menubar ) [EOL] self . statusbar = QtGui . QStatusBar ( MainWindow ) [EOL] self . statusbar . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] MainWindow . setStatusBar ( self . statusbar ) [EOL] self . actionSave = QtGui . QAction ( MainWindow ) [EOL] self . actionSave . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . actionOpen = QtGui . QAction ( MainWindow ) [EOL] self . actionOpen . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . actionDensity = QtGui . QAction ( MainWindow ) [EOL] self . actionDensity . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . actionNavigation = QtGui . QAction ( MainWindow ) [EOL] self . actionNavigation . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . actionNew = QtGui . QAction ( MainWindow ) [EOL] self . actionNew . setObjectName ( _fromUtf8 ( [string] ) ) [EOL] self . simulationMenu . addAction ( self . actionOpen ) [EOL] self . simulationMenu . addAction ( self . actionSave ) [EOL] self . visualisationMenu . addAction ( self . actionDensity ) [EOL] self . visualisationMenu . addAction ( self . actionNavigation ) [EOL] self . menubar . addAction ( self . simulationMenu . menuAction ( ) ) [EOL] self . menubar . addAction ( self . visualisationMenu . menuAction ( ) ) [EOL] [EOL] self . retranslateUi ( MainWindow ) [EOL] QtCore . QMetaObject . connectSlotsByName ( MainWindow ) [EOL] [EOL] def retranslateUi ( self , MainWindow ) : [EOL] MainWindow . setWindowTitle ( _translate ( [string] , [string] , None ) ) [EOL] self . startButton . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . stopButton . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . saveButton . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . simulationMenu . setTitle ( _translate ( [string] , [string] , None ) ) [EOL] self . visualisationMenu . setTitle ( _translate ( [string] , [string] , None ) ) [EOL] self . actionSave . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . actionOpen . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . actionDensity . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . actionNavigation . setText ( _translate ( [string] , [string] , None ) ) [EOL] self . actionNew . setText ( _translate ( [string] , [string] , None ) ) [EOL] [EOL] from pyqtgraph import GraphicsLayoutWidget [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] def mutation ( exits , locations , mutpb ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cells = np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] feasible_exits = np . array ( [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] [comment] [EOL] n_guides = len ( locations ) [EOL] [comment] [EOL] n_exits = len ( feasible_exits ) [EOL] [EOL] [comment] [EOL] for i in range ( n_guides ) : [EOL] [EOL] if np . random . rand ( [number] ) [ [number] ] <= mutpb : [EOL] [EOL] [comment] [EOL] switch = [number] [comment] [EOL] random_cell = cells [ np . random . randint ( len ( cells ) ) ] [EOL] if random_cell == locations [ i ] : [EOL] switch = [number] [EOL] else : [EOL] locations [ i ] = random_cell [EOL] [EOL] [comment] [EOL] [comment] [EOL] if switch == [number] : [EOL] delete_element = np . where ( feasible_exits == exits [ i ] ) [EOL] available_exits = np . delete ( feasible_exits , delete_element , None ) [EOL] random_exit = available_exits [ np . random . randint ( len ( available_exits ) ) ] [EOL] [EOL] else : [EOL] random_exit = feasible_exits [ np . random . randint ( len ( feasible_exits ) ) ] [EOL] [EOL] [EOL] [comment] [EOL] exits [ i ] = random_exit [EOL] [EOL] return exits , locations [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Tuple , Dict [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] from shapely . geometry import Polygon , MultiPolygon , LineString , MultiLineString , Point , LinearRing [EOL] from shapely . ops import polygonize , cascaded_union [EOL] from scipy . spatial . qhull import Delaunay [EOL] from crowddynamics . core . distance import distance_circle_line [EOL] [EOL] from crowddynamics . core . sampling import triangle_area_cumsum , random_sample_triangle [EOL] from crowddynamics . core . vector2D import length [EOL] [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . simulation . agents import Circular , ThreeCircle , NO_TARGET , Agents , AgentGroup [EOL] from crowddynamics . simulation . field import Field [EOL] from crowddynamics . simulation . logic import Reset , InsideDomain , Integrator , Fluctuation , Adjusting , Navigation , ExitDetection , Orientation , AgentAgentInteractions , AgentObstacleInteractions , LeaderFollower , TargetReached [EOL] from crowddynamics . simulation . multiagent import MultiAgentSimulation [EOL] from shapely . geometry import Polygon [EOL] from shapely . geometry . linestring import LineString [EOL] from traitlets . traitlets import Enum , Int , default [EOL] [EOL] class FinlandiaTalo2ndFloorField ( Field ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def f ( value , scale = [number] / [number] ) : [EOL] if value : [EOL] return tuple ( map ( lambda x : scale * x , value ) ) [EOL] else : [EOL] return None [EOL] [EOL] A = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] B = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] C = list ( map ( f , [ None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , None , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] D = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] E = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] G = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] H = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] I = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] J = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] K = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] O = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] U = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] V = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] W = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] X = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] Y = list ( map ( f , [ ( ) , ( [number] , [number] ) , ] ) ) [EOL] Z = list ( map ( f , [ ( ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] ) ) [EOL] [EOL] A [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] A [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [comment] [EOL] [comment] [EOL] E [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] E [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] O [ [number] ] = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] rest_midpoint = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [comment] [EOL] rest1 = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] rest2 = ( [number] * [number] / [number] , [number] * [number] / [number] ) [EOL] [EOL] obstacles = Polygon ( ) [EOL] [EOL] obstacles |= LineString ( A [ [number] : [number] + [number] ] + [ A [ [number] ] ] ) [EOL] obstacles |= LineString ( A [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] + C [ [number] : [number] ] ) [comment] [EOL] obstacles |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [comment] [EOL] obstacles |= LineString ( [ D [ [number] ] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] + [ E [ [number] ] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] [comment] [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles |= LineString ( X [ [number] : [number] ] + [ D [ [number] ] ] ) [comment] [EOL] [comment] [EOL] obstacles |= LineString ( D [ [number] : [number] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles |= LineString ( X [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( [ C [ [number] ] ] + [ E [ [number] ] ] ) [EOL] obstacles |= LineString ( [ E [ [number] ] ] + [ B [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] obstacles_finlandia = Polygon ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] + C [ [number] : [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( C [ [number] : [number] ] ) [comment] [EOL] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( [ D [ [number] ] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] + [number] ] ) [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( X [ [number] : [number] ] + [ D [ [number] ] ] ) [comment] [EOL] [comment] [EOL] obstacles_finlandia |= LineString ( D [ [number] : [number] ] + [ X [ [number] ] ] ) [comment] [EOL] obstacles_finlandia |= LineString ( X [ [number] : [number] ] ) [comment] [EOL] [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( A [ [number] : [number] + [number] ] + [ A [ [number] ] ] ) [EOL] obstacles_finlandia |= LineString ( A [ [number] : [number] + [number] ] ) [EOL] [EOL] obstacles_finlandia |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( B [ [number] : [number] + [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] + [ E [ [number] ] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( E [ [number] : [number] + [number] ] ) [EOL] obstacles_finlandia |= LineString ( [ D [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] + [ E [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] finlandiahall = Polygon ( [ O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] , O [ [number] ] ] ) [EOL] foyer = Polygon ( [ B [ [number] ] , C [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , B [ [number] ] ] ) [EOL] helsinkihall = Polygon ( [ O [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , O [ [number] ] , B [ [number] ] , B [ [number] ] , C [ [number] ] , C [ [number] ] , O [ [number] ] , O [ [number] ] ] ) [EOL] piazza_1 = Polygon ( [ C [ [number] ] , E [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] piazza_2 = Polygon ( [ O [ [number] ] , O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , D [ [number] ] ] ) [EOL] piazza_3 = Polygon ( [ O [ [number] ] , A [ [number] ] , A [ [number] ] , A [ [number] ] , D [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] restaurant = Polygon ( [ A [ [number] ] , A [ [number] ] , A [ [number] ] , E [ [number] ] , E [ [number] ] , rest_midpoint ] ) [EOL] outer_bubblegum_finlandia = Polygon ( [ D [ [number] ] , ( [number] , [number] ) , E [ [number] ] , E [ [number] ] , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] inner_bubblegum_finlandia = Polygon ( [ D [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , D [ [number] ] , D [ [number] ] , D [ [number] ] ] ) [EOL] orchestra_foyer = Polygon ( [ X [ [number] ] , X [ [number] ] , X [ [number] ] , D [ [number] ] , X [ [number] ] , X [ [number] ] , D [ [number] ] , X [ [number] ] , X [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] finlandia_spawn = Polygon ( [ O [ [number] ] , O [ [number] ] , O [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] piazza_3_spawn = Polygon ( [ D [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] piazza_1_spawn = Polygon ( [ D [ [number] ] , E [ [number] ] , O [ [number] ] , O [ [number] ] , E [ [number] ] ] ) [EOL] restaurant_spawn = Polygon ( [ rest1 , rest2 , E [ [number] ] , E [ [number] ] ] ) [EOL] foyer_spawn = Polygon ( [ E [ [number] ] , C [ [number] ] , C [ [number] ] , B [ [number] ] , E [ [number] ] , E [ [number] ] ] ) [EOL] helsinki_spawn = Polygon ( [ C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , C [ [number] ] , B [ [number] ] ] ) [EOL] orchestra_spawn = Polygon ( [ X [ [number] ] , X [ [number] ] , X [ [number] ] , X [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] exit1 = LineString ( [ D [ [number] ] , A [ [number] ] ] ) [EOL] exit2 = LineString ( [ D [ [number] ] , D [ [number] ] ] ) [EOL] exit3 = LineString ( [ E [ [number] ] , O [ [number] ] ] ) [EOL] exit4 = LineString ( [ O [ [number] ] , B [ [number] ] ] ) [EOL] exit5 = LineString ( [ Y [ [number] ] , X [ [number] ] ] ) [EOL] exit6 = LineString ( [ X [ [number] ] , X [ [number] ] ] ) [EOL] [EOL] fex = np . array ( [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] ) [EOL] fex = fex * [number] / [number] [EOL] [EOL] slopes = np . array ( [ ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) , ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) / ( fex [ [number] ] [ [number] ] - fex [ [number] ] [ [number] ] ) ] ) [EOL] [EOL] gradient_vectors = np . array ( [ [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] , [ - [number] , - slopes [ [number] ] ] ] ) [EOL] norms = np . hypot ( [ gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] ] , [ gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] , gradient_vectors [ [number] ] [ [number] ] ] ) [EOL] gradient_vectors = np . array ( [ [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , - [number] / norms [ [number] ] ] , [ slopes [ [number] ] / norms [ [number] ] , [number] / norms [ [number] ] ] ] ) [EOL] dx = [number] [EOL] [EOL] fex = np . array ( [ [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] , [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] , [number] + [number] * dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] , [ [number] + dx * gradient_vectors [ [number] ] [ [number] ] , [number] + dx * gradient_vectors [ [number] ] [ [number] ] ] ] ) [EOL] fex = fex * [number] / [number] [EOL] [EOL] fexit1 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit2 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit3 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] fexit4 = LineString ( [ fex [ [number] ] , fex [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] spawns = [ finlandiahall , foyer , helsinkihall , piazza_1 , piazza_2 , piazza_3 , restaurant , orchestra_foyer , finlandia_spawn , piazza_3_spawn , piazza_1_spawn , restaurant_spawn , foyer_spawn , helsinki_spawn , orchestra_spawn ] [EOL] [EOL] [comment] [EOL] targets = [ exit1 , exit3 , exit4 , exit5 , exit6 ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] self . obstacles = obstacles [comment] [EOL] self . obstacles_finlandia = obstacles_finlandia [comment] [EOL] self . targets = targets [EOL] self . spawns = spawns [EOL] [comment] [EOL] [comment] [EOL] self . domain = self . convex_hull ( ) [EOL] self . finlandiahall_extended = outer_bubblegum_finlandia [comment] [EOL] self . finlandiahall = inner_bubblegum_finlandia [EOL] self . helsinkihall = helsinkihall [EOL] self . orchestra_foyer = orchestra_foyer [EOL] self . piazza_2 = piazza_2 [EOL] self . piazza_3 = piazza_3 [EOL] [EOL] [EOL] class FinlandiaTalo2ndFloor ( MultiAgentSimulation ) : [EOL] [EOL] agent_type = Enum ( default_value = Circular , values = ( Circular , ThreeCircle ) ) [EOL] body_type = Enum ( default_value = [string] , values = ( [string] , ) ) [EOL] [EOL] def attributes ( self , familiar , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) : [EOL] def wrapper ( ) : [EOL] target = familiar if has_target else NO_TARGET [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = familiar , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] def attributes_leader ( self , fin_ext_iter , fin_iter , target_iter , has_target = True , is_follower = False ) : [EOL] def wrapper ( ) : [EOL] target = next ( target_iter ) [EOL] in_finlandia_extended = next ( fin_ext_iter ) [EOL] in_finlandia = next ( fin_iter ) [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = [number] , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] @ default ( [string] ) def _default_logic ( self ) : [EOL] return Reset ( self ) << TargetReached ( self ) << ( Integrator ( self ) << ( Adjusting ( self ) << ( Navigation ( self ) << ExitDetection ( self ) << LeaderFollower ( self ) , Orientation ( self ) ) , AgentAgentInteractions ( self ) , AgentObstacleInteractions ( self ) ) ) [EOL] [EOL] @ default ( [string] ) def _default_field ( self ) : [EOL] return FinlandiaTalo2ndFloorField ( ) [EOL] [EOL] @ default ( [string] ) def _default_agents ( self ) : [EOL] agents = Agents ( agent_type = self . agent_type ) [EOL] return agents [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 $typing.Tuple[builtins.float,builtins.float]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import List , Dict , Any , Tuple , Iterator [EOL] import builtins [EOL] import typing [EOL] import io [EOL] import sys [EOL] import os [EOL] import random [EOL] import numpy as np [EOL] [EOL] from shapely . geometry import Polygon , MultiPolygon , LineString , MultiLineString , Point , LinearRing [EOL] from shapely . ops import polygonize , cascaded_union [EOL] [EOL] from scipy . spatial . qhull import Delaunay [EOL] [EOL] from crowddynamics . simulation . agents import Agents , AgentGroup , Circular [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . core . sampling import triangle_area_cumsum , random_sample_triangle [EOL] from crowddynamics . core . vector2D import length [EOL] from crowddynamics . core . distance import distance_circle_line , distance_circles [EOL] [EOL] [comment] [EOL] from finlandia_talo_ga_deterministic import FinlandiaTalo2ndFloor [EOL] [EOL] from solutionbank_deterministic import solutionbank [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def generate_leader_pos ( self , cell , n_lead ) : [EOL] [comment] [EOL] followers = np . load ( [string] ) [EOL] follower_positions = followers [ [string] ] [EOL] follower_radii = followers [ [string] ] [EOL] [EOL] [comment] [EOL] max_r = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] overlaps = [number] [EOL] [EOL] [comment] [EOL] field = FinlandiaTalo2ndFloor ( ) . field [EOL] [EOL] [comment] [EOL] width = [number] [EOL] height = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] cell_size = [number] [EOL] m = np . round ( width / cell_size ) [EOL] n = np . round ( height / cell_size ) [EOL] m = m . astype ( int ) [EOL] n = n . astype ( int ) [EOL] X = np . linspace ( [number] , width , m + [number] ) [EOL] Y = np . linspace ( [number] , height , n + [number] ) [EOL] hlines = [ ( ( x1 , yi ) , ( x2 , yi ) ) for x1 , x2 in zip ( X [ : - [number] ] , X [ [number] : ] ) for yi in Y ] [EOL] vlines = [ ( ( xi , y1 ) , ( xi , y2 ) ) for y1 , y2 in zip ( Y [ : - [number] ] , Y [ [number] : ] ) for xi in X ] [EOL] grids = list ( polygonize ( MultiLineString ( hlines + vlines ) ) ) [EOL] [EOL] [comment] [EOL] leader_spawns = [ ] [EOL] [EOL] [comment] [EOL] spawn_points = [ ] [EOL] [EOL] [comment] [EOL] inside_finlandia = [ ] [EOL] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] [EOL] polygons = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for j in range ( [number] ) : [EOL] poly = field . spawns [ j ] . intersection ( grids [ cell [ i ] ] ) [EOL] if not poly . is_empty : [EOL] polygons . append ( poly ) [EOL] spawn_poly = cascaded_union ( polygons ) [EOL] if not spawn_poly . is_empty : [EOL] leader_spawns . append ( spawn_poly ) [EOL] [EOL] [comment] [EOL] obstacles = field . obstacles [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( n_lead ) : [EOL] seed = [number] [EOL] [comment] [EOL] n_spawnpoints = len ( spawn_points ) [EOL] geom = leader_spawns [ i ] - obstacles . buffer ( max_r ) [EOL] j = [number] [comment] [EOL] [comment] [EOL] if isinstance ( geom , MultiPolygon ) : [EOL] n_polygons = len ( geom ) [EOL] for j in range ( n_polygons ) : [EOL] vertices = np . asarray ( geom [ j ] . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] if j == [number] : [EOL] meshes = mesh [EOL] else : [EOL] meshes = np . concatenate ( ( mesh , meshes ) , axis = [number] ) [EOL] [comment] [EOL] weights = triangle_area_cumsum ( meshes ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = meshes [ k ] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] [comment] [EOL] if n_spawnpoints != [number] : [comment] [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] if field . finlandiahall_extended . contains ( Point ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) ) : [EOL] inside_finlandia . append ( True ) [EOL] else : [EOL] inside_finlandia . append ( False ) [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] [comment] [EOL] else : [EOL] vertices = np . asarray ( geom . convex_hull . exterior ) [EOL] delaunay = Delaunay ( vertices ) [EOL] mesh = vertices [ delaunay . simplices ] [EOL] weights = triangle_area_cumsum ( mesh ) [EOL] weights /= weights [ - [number] ] [EOL] [EOL] while j < overlaps : [EOL] seed += [number] [EOL] distances = [ ] [comment] [EOL] n_overlaps = [number] [comment] [EOL] [comment] [EOL] np . random . seed ( seed ) [EOL] x = np . random . random ( ) [EOL] k = np . searchsorted ( weights , x ) [EOL] a , b , c = mesh [ k ] [EOL] spawn_point = random_sample_triangle ( a , b , c ) [EOL] if n_spawnpoints != [number] : [EOL] for k in range ( [number] , n_spawnpoints ) : [EOL] d = length ( spawn_point - spawn_points [ k ] ) [EOL] h = d - [number] * max_r [EOL] distances . append ( h ) [EOL] distances_array = distances [EOL] distances_array = np . asarray ( distances_array ) [EOL] n_overlaps += len ( np . where ( distances_array < [number] ) [ [number] ] ) [EOL] for obstacle in obstacles : [EOL] obstacle = list ( obstacle . coords ) [EOL] n_obstacle_points = len ( obstacle ) [EOL] for k in range ( [number] , n_obstacle_points ) : [EOL] if k == n_obstacle_points - [number] : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ [number] ] ) ) [EOL] else : [EOL] h , _ = distance_circle_line ( spawn_point , max_r , np . asarray ( obstacle [ k ] ) , np . asarray ( obstacle [ k + [number] ] ) ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] for agent in range ( len ( follower_radii ) ) : [EOL] h , _ = distance_circles ( follower_positions [ agent ] , follower_radii [ agent ] , spawn_point , max_r ) [EOL] if h < [number] : [EOL] n_overlaps += [number] [EOL] [EOL] if n_overlaps == [number] : [EOL] [comment] [EOL] if field . finlandiahall_extended . contains ( Point ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) ) : [EOL] inside_finlandia . append ( True ) [EOL] else : [EOL] inside_finlandia . append ( False ) [EOL] [comment] [EOL] spawn_points . append ( [ spawn_point [ [number] ] , spawn_point [ [number] ] ] ) [EOL] [comment] [EOL] [comment] [EOL] break [EOL] j += [number] [EOL] if j == overlaps : [EOL] raise Exception ( [string] ) [EOL] return spawn_points , inside_finlandia [EOL] [EOL] [EOL] def attributes ( self , familiar , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) : [EOL] def wrapper ( ) : [EOL] target = familiar if has_target else NO_TARGET [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = familiar , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] def attributes_leader ( self , fin_ext_iter , fin_iter , target_iter , has_target = True , is_follower = False ) : [EOL] def wrapper ( ) : [EOL] target = next ( target_iter ) [EOL] in_finlandia_extended = next ( fin_ext_iter ) [EOL] in_finlandia = next ( fin_iter ) [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = [number] , in_finlandia_extended = in_finlandia_extended , in_finlandia = in_finlandia , in_orchestra = False , in_helsinki = False , in_piazza_2 = False , in_piazza_3 = False ) [EOL] return d [EOL] return wrapper [EOL] [EOL] [EOL] [comment] [EOL] def run ( individual , n_leaders ) : [EOL] [EOL] [comment] [EOL] simulation = FinlandiaTalo2ndFloor ( ) [EOL] [EOL] [comment] [EOL] field = simulation . field [EOL] [EOL] [comment] [EOL] target_exits = [ ] [comment] [EOL] cells = [ ] [EOL] [EOL] if n_leaders > [number] : [EOL] for i in range ( n_leaders ) : [EOL] target_exits . append ( individual [ i ] [ [number] ] ) [EOL] cells . append ( individual [ i ] [ [number] ] ) [EOL] [EOL] [comment] [EOL] exits = target_exits [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] size_finlandiahall = [number] [EOL] [comment] [EOL] size_foyer = [number] [EOL] size_helsinkihall = [number] [EOL] [comment] [EOL] size_piazza_1 = [number] [EOL] [comment] [EOL] size_piazza_2 = [number] [EOL] size_piazza_3 = [number] [EOL] [comment] [EOL] size_restaurant = [number] [EOL] [comment] [EOL] size_orchestra = [number] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] group_follower_finlandiahall = AgentGroup ( agent_type = Circular , size = size_finlandiahall , attributes = attributes ( simulation , familiar = [number] , in_finlandia = True , in_finlandia_extended = True , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_finlandiahall , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_piazza_3 = AgentGroup ( agent_type = Circular , size = size_piazza_3 , attributes = attributes ( simulation , familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_piazza_3 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_piazza_1 = AgentGroup ( agent_type = Circular , size = size_piazza_1 , attributes = attributes ( simulation , familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_piazza_1 , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_restaurant = AgentGroup ( agent_type = Circular , size = size_restaurant , attributes = attributes ( simulation , familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_restaurant , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_foyer = AgentGroup ( agent_type = Circular , size = size_foyer , attributes = attributes ( simulation , familiar = [number] , in_finlandia = True , in_finlandia_extended = True , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_foyer , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_helsinkihall = AgentGroup ( agent_type = Circular , size = size_helsinkihall , attributes = attributes ( simulation , familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_helsinkihall , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] group_follower_orchestra = AgentGroup ( agent_type = Circular , size = size_orchestra , attributes = attributes ( simulation , familiar = [number] , in_finlandia = False , in_finlandia_extended = False , has_target = True , is_follower = True ) ) [EOL] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_follower_orchestra , position_gen = False , position_iter = iter ( [ ] ) , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] if n_leaders == [number] : [EOL] [comment] [EOL] bank_evactime = solutionbank ( cells , target_exits , n_leaders ) [EOL] if bank_evactime != [number] : [EOL] print ( bank_evactime ) [EOL] return [EOL] [EOL] if n_leaders > [number] : [EOL] [comment] [EOL] init_pos , inside_ext = generate_leader_pos ( simulation , cells , n_leaders ) [EOL] inside = inside_ext [EOL] print ( init_pos ) [EOL] target_exits = iter ( target_exits ) [EOL] init_pos = iter ( init_pos ) [EOL] inside_ext = iter ( inside_ext ) [EOL] inside = iter ( inside ) [EOL] [EOL] [comment] [EOL] bank_evactime = solutionbank ( cells , target_exits , n_leaders ) [EOL] if bank_evactime != [number] : [EOL] print ( bank_evactime ) [EOL] return [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] group_leader = AgentGroup ( agent_type = Circular , size = n_leaders , attributes = attributes_leader ( simulation , fin_iter = inside , fin_ext_iter = inside_ext , target_iter = target_exits , has_target = True , is_follower = False ) ) [EOL] [EOL] [comment] [EOL] simulation . agents . add_non_overlapping_group ( [string] , group_leader , position_gen = True , position_iter = init_pos , spawn = [number] , obstacles = geom_to_linear_obstacles ( field . obstacles ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] simulation . update ( ) [EOL] simulation . run ( ) [EOL] [EOL] print ( simulation . data [ [string] ] ) [EOL] [EOL] [comment] [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] if n_leaders == [number] : [EOL] banksolution = [string] . format ( simulation . data [ [string] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] , cells [ [number] ] , [string] , exits [ [number] ] , [string] ) [EOL] [EOL] if os . path . isfile ( [string] ) : [EOL] bankfile = open ( [string] , [string] ) [EOL] bankfile . write ( banksolution ) [EOL] bankfile . close ( ) [EOL] else : [EOL] bankfile = open ( [string] , [string] ) [EOL] bankfile . write ( banksolution ) [EOL] bankfile . close ( ) [EOL] [EOL] return [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] arguments = sys . argv [EOL] gene_data = arguments [ [number] : ] [EOL] [EOL] [comment] [EOL] cells_data = gene_data [ [number] : : [number] ] [EOL] cells_data = [ int ( cells_data [ i ] ) for i in range ( len ( cells_data ) ) ] [EOL] [EOL] [comment] [EOL] exits_data = gene_data [ [number] : : [number] ] [EOL] exits_data = [ int ( exits_data [ i ] ) for i in range ( len ( exits_data ) ) ] [EOL] [EOL] [comment] [EOL] tags = gene_data [ [number] : : [number] ] [EOL] tags = [ int ( tags [ i ] ) for i in range ( len ( tags ) ) ] [EOL] [EOL] cells = [ ] [EOL] exits = [ ] [EOL] for i in range ( len ( tags ) ) : [EOL] if tags [ i ] == [number] : [EOL] cells . append ( cells_data [ i ] ) [EOL] exits . append ( exits_data [ i ] ) [EOL] [EOL] [comment] [EOL] n_guides = len ( cells ) [EOL] [EOL] [comment] [EOL] if n_guides == [number] : [EOL] run ( [ [ ] , [ ] ] , [number] ) [EOL] if n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] elif n_guides == [number] : [EOL] run ( [ [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] , [ exits [ [number] ] , cells [ [number] ] ] ] , [number] ) [EOL] [EOL]	typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Dict [EOL] import builtins [EOL] import typing [EOL] import numpy as np [EOL] from crowddynamics . core . geometry import geom_to_linear_obstacles [EOL] from crowddynamics . simulation . agents import Circular , ThreeCircle , NO_TARGET , Agents , AgentGroup [EOL] from crowddynamics . simulation . field import Field [EOL] from crowddynamics . simulation . logic import Reset , InsideDomain , Integrator , Fluctuation , Adjusting , Navigation , ExitDetection , Orientation , AgentAgentInteractions , AgentObstacleInteractions , LeaderFollower , TargetReached [EOL] from crowddynamics . simulation . multiagent import MultiAgentSimulation [EOL] from shapely . geometry import Polygon , Point , LineString , MultiPolygon , MultiLineString , LinearRing [EOL] from traitlets . traitlets import Enum , Int , default [EOL] [EOL] from shapely . ops import polygonize [EOL] from scipy . spatial . qhull import Delaunay [EOL] from crowddynamics . core . sampling import triangle_area_cumsum , random_sample_triangle [EOL] from crowddynamics . core . vector2D import length [EOL] from crowddynamics . core . distance import distance_circle_line , distance_circles [EOL] from crowddynamics . simulation . agents import Agents , AgentGroup , Circular [EOL] [EOL] [EOL] [EOL] class SimpleScenarioFloorField ( Field ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] r = [number] [EOL] exitwidth = [number] [EOL] exit1_x = ( r / [number] - exitwidth / [number] ) * np . sin ( np . deg2rad ( [number] ) ) [EOL] exit1_y = ( r / [number] - exitwidth / [number] ) * np . cos ( np . deg2rad ( [number] ) ) [EOL] exit2_x = ( r / [number] + exitwidth / [number] ) * np . sin ( np . deg2rad ( [number] ) ) [EOL] exit2_y = ( r / [number] + exitwidth / [number] ) * np . cos ( np . deg2rad ( [number] ) ) [EOL] [comment] [EOL] bufferradius = [number] * r * np . tan ( np . deg2rad ( [number] ) ) [EOL] [comment] [EOL] [EOL] def f ( value , scale = [number] ) : [EOL] if value : [EOL] return tuple ( map ( lambda x : scale * x , value ) ) [EOL] else : [EOL] return None [EOL] [EOL] [comment] [EOL] hexagon = list ( map ( f , [ None , ( r , [number] * r ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r , [number] ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - np . sin ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + np . sin ( np . deg2rad ( [number] ) ) ) ) , ] ) ) [EOL] [EOL] [comment] [EOL] midpoints = list ( map ( f , [ None , ( r * ( [number] - [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] - [number] / np . cos ( np . deg2rad ( [number] ) ) ) , r ) , ( r * ( [number] - [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] - [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ( r * ( [number] + [number] / np . cos ( np . deg2rad ( [number] ) ) ) , r ) , ( r * ( [number] + [number] * np . cos ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) , r * ( [number] + [number] * np . sin ( np . deg2rad ( [number] ) ) / np . cos ( np . deg2rad ( [number] ) ) ) ) , ] ) ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] exitpoints = list ( map ( f , [ None , ( r - exit1_x , [number] * r - exit1_y ) , ( r - exit2_x , [number] * r - exit2_y ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r + exitwidth / [number] ) , ( r * ( [number] - np . cos ( np . deg2rad ( [number] ) ) ) , r - exitwidth / [number] ) , ( r - exit2_x , exit2_y ) , ( r - exit1_x , exit1_y ) , ( r + exit1_x , exit1_y ) , ( r + exit2_x , exit2_y ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r - exitwidth / [number] ) , ( r * ( [number] + np . cos ( np . deg2rad ( [number] ) ) ) , r + exitwidth / [number] ) , ( r + exit2_x , [number] * r - exit2_y ) , ( r + exit1_x , [number] * r - exit1_y ) , ] ) ) [EOL] obstacles = Polygon ( ) [EOL] [EOL] [comment] [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] obstacles |= LineString ( [ exitpoints [ [number] ] ] + [ hexagon [ [number] ] ] + [ exitpoints [ [number] ] ] ) [EOL] [EOL] floorplan = Polygon ( [ hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] , hexagon [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] exit1 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit2 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit3 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit4 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit5 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] exit6 = LineString ( [ exitpoints [ [number] ] , exitpoints [ [number] ] ] ) [EOL] [EOL] [comment] [EOL] spawn1 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn2 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn3 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn4 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn5 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] spawn6 = Point ( midpoints [ [number] ] ) . buffer ( bufferradius ) [EOL] [EOL] [comment] [EOL] spawns = [ spawn1 , spawn2 , spawn3 , spawn4 , spawn5 , spawn6 ] [EOL] [EOL] targets = [ exit1 , exit2 , exit3 , exit4 , exit5 , exit6 ] [EOL] [EOL] self . obstacles = obstacles [comment] [EOL] self . targets = targets [EOL] self . spawns = spawns [EOL] self . domain = floorplan [EOL] [EOL] [EOL] [EOL] class SimpleScenarioFloor ( MultiAgentSimulation ) : [EOL] [EOL] agent_type = Enum ( default_value = Circular , values = ( Circular , ThreeCircle ) ) [EOL] body_type = Enum ( default_value = [string] , values = ( [string] , ) ) [EOL] [EOL] def attributes ( self , familiar , has_target = True , is_follower = True ) : [EOL] def wrapper ( ) : [EOL] target = familiar if has_target else NO_TARGET [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = familiar , ) [EOL] return d [EOL] [EOL] return wrapper [EOL] [EOL] def attributes_leader ( self , target_iter , has_target = True , is_follower = False ) : [EOL] def wrapper ( ) : [EOL] target = next ( target_iter ) [EOL] orientation = np . random . uniform ( - np . pi , np . pi ) [EOL] d = dict ( target = target , is_leader = not is_follower , is_follower = is_follower , body_type = self . body_type , orientation = orientation , velocity = np . zeros ( [number] ) , angular_velocity = [number] , target_direction = np . zeros ( [number] ) , target_orientation = orientation , familiar_exit = [number] , ) [EOL] return d [EOL] [EOL] return wrapper [EOL] [EOL] @ default ( [string] ) def _default_logic ( self ) : [EOL] return Reset ( self ) << TargetReached ( self ) << ( Integrator ( self ) << ( Fluctuation ( self ) , Adjusting ( self ) << ( Navigation ( self ) << LeaderFollower ( self ) , Orientation ( self ) ) , AgentAgentInteractions ( self ) , AgentObstacleInteractions ( self ) ) ) [EOL] [EOL] @ default ( [string] ) def _default_field ( self ) : [EOL] return SimpleScenarioFloorField ( ) [EOL] [EOL] @ default ( [string] ) def _default_agents ( self ) : [EOL] agents = Agents ( agent_type = self . agent_type ) [EOL] return agents [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any , List [EOL] import typing [EOL] import io [EOL] import sys [EOL] import os [EOL] import numpy as np [EOL] [EOL] from onepointcrossover import onepointcrossover [EOL] from mutation import mutation [EOL] [EOL] [comment] [EOL] jobida = str ( sys . argv [ [number] ] ) [EOL] jobidb = str ( sys . argv [ [number] ] ) [EOL] jobidc = str ( sys . argv [ [number] ] ) [EOL] jobidd = str ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] generation = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] population = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] samples = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] n_guides = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] n_simulations = population * samples [EOL] [EOL] [comment] [EOL] CXPB = [number] [EOL] [EOL] [comment] [EOL] if generation < [number] : [EOL] MUTPB = [number] [EOL] else : [EOL] MUTPB = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] elitism_pr = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] all_positions = [ ] [EOL] all_output = [ ] [EOL] [EOL] [comment] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobida , [string] , i , [string] ) [EOL] [comment] [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] [comment] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidb , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidc , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidd , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] all_evactimes = [ ] [EOL] for i in range ( [number] , n_simulations ) : [EOL] try : [EOL] all_evactimes . append ( float ( all_output [ i ] ) ) [EOL] except ValueError : [EOL] all_evactimes . append ( [number] ) [EOL] [EOL] [comment] [EOL] sample_evactimes = [ ] [EOL] sample_positions = [ ] [EOL] counter = [number] [EOL] for i in range ( [number] , population ) : [EOL] sample_mean = [number] [EOL] valid_runs = [number] [EOL] first_valid_run = - [number] [EOL] for j in range ( [number] , samples ) : [EOL] counter = i * samples + j [EOL] if first_valid_run == - [number] : [EOL] first_valid_run = counter [EOL] sample_positions . append ( all_positions [ counter ] ) [EOL] if all_evactimes [ counter ] != [number] : [EOL] sample_mean += all_evactimes [ counter ] [EOL] valid_runs += [number] [EOL] if sample_mean == [number] : [EOL] sample_evactimes . append ( [number] ) [EOL] else : [EOL] sample_evactimes . append ( sample_mean / valid_runs ) [EOL] [EOL] [comment] [EOL] sample_maxs = [ ] [EOL] for i in range ( [number] , population ) : [EOL] sample_maxs . append ( np . max ( all_evactimes [ i * samples : ( i + [number] ) * samples ] ) ) [EOL] [EOL] [comment] [EOL] waste = np . argwhere ( np . asarray ( sample_evactimes ) == [number] ) [EOL] nonwaste = np . argwhere ( np . asarray ( sample_evactimes ) != [number] ) [EOL] n_waste = len ( waste ) [EOL] n_nonwaste = len ( nonwaste ) [EOL] [EOL] if n_waste > [number] : [EOL] indxs_replacement = [ ] [EOL] for i in range ( [number] , n_waste ) : [EOL] rand_indx = np . random . randint ( [number] , population - n_waste , [number] ) [ [number] ] [EOL] indxs_replacement . append ( nonwaste [ rand_indx ] [ [number] ] ) [EOL] sample_evactimes [ waste [ i ] [ [number] ] ] = sample_evactimes [ indxs_replacement [ i ] ] [EOL] sample_positions [ waste [ i ] [ [number] ] ] = sample_positions [ indxs_replacement [ i ] ] [EOL] sample_maxs [ waste [ i ] [ [number] ] ] = sample_maxs [ indxs_replacement [ i ] ] [EOL] [EOL] [comment] [EOL] if n_waste > [number] : [EOL] for i in range ( [number] , n_waste ) : [EOL] all_positions [ waste [ i ] [ [number] ] * samples : ( waste [ i ] [ [number] ] + [number] ) * samples ] = all_positions [ indxs_replacement [ i ] * samples : ( indxs_replacement [ i ] + [number] ) * samples ] [EOL] all_evactimes [ waste [ i ] [ [number] ] * samples : ( waste [ i ] [ [number] ] + [number] ) * samples ] = all_evactimes [ indxs_replacement [ i ] * samples : ( indxs_replacement [ i ] + [number] ) * samples ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( all_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( sample_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( sample_maxs ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( n_simulations ) : [EOL] f . write ( [string] . format ( all_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( sample_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] if generation > [number] : [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] parents_results = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_results = parents_results . tolist ( ) [EOL] all_evactimes . extend ( parents_results ) [EOL] [EOL] [comment] [EOL] parents_sample_results = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_sample_results = parents_sample_results . tolist ( ) [EOL] sample_evactimes . extend ( parents_sample_results ) [EOL] [EOL] [comment] [EOL] parents_sample_maximums = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_sample_maximums = parents_sample_maximums . tolist ( ) [EOL] sample_maxs . extend ( parents_sample_maximums ) [EOL] [EOL] [comment] [EOL] with open ( [string] . format ( [string] , generation - [number] , [string] ) ) as infile : [EOL] lines2 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . extend ( lines2 ) [EOL] [EOL] [comment] [EOL] with open ( [string] . format ( [string] , generation - [number] , [string] ) ) as infile : [EOL] lines3 = [ line . rstrip ( [string] ) for line in infile ] [EOL] sample_positions . extend ( lines3 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if generation >= [number] : [EOL] parents_sample_evactimes = sample_evactimes [ population : ] [EOL] sorted_indices_parents = sorted ( range ( population ) , key = lambda k : parents_sample_evactimes [ k ] ) [EOL] sorted_indices_parents = sorted_indices_parents [ [number] : population * int ( elitism_pr [ generation ] * population ) ] [EOL] sorted_indices_parents = [ sorted_indices_parents [ i ] + population for i in range ( len ( sorted_indices_parents ) ) ] [EOL] [EOL] help_indices = [ i for i in range ( population ) ] [EOL] scores = sample_evactimes [ [number] : population ] [EOL] [EOL] if generation >= [number] : [EOL] for i in range ( len ( sorted_indices_parents ) ) : [EOL] help_indices . append ( sorted_indices_parents [ i ] ) [EOL] scores . append ( sample_evactimes [ sorted_indices_parents [ i ] ] ) [EOL] [EOL] sorted_indices = sorted ( range ( len ( scores ) ) , key = lambda k : scores [ k ] ) [EOL] [EOL] selected_ordered = np . empty ( population , dtype = int ) [EOL] for i in range ( population ) : [EOL] selected_ordered [ i ] = help_indices [ sorted_indices [ i ] ] [EOL] [EOL] [comment] [EOL] permuted_order = np . random . permutation ( population ) [EOL] selected = np . empty ( population , dtype = int ) [EOL] for i in range ( population ) : [EOL] selected [ i ] = selected_ordered [ permuted_order [ i ] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if n_waste > [number] : [EOL] for i in range ( [number] , n_waste ) : [EOL] wrongly_chosen = np . argwhere ( selected == waste [ i ] ) [EOL] if len ( wrongly_chosen ) > [number] : [EOL] for j in range ( [number] , len ( wrongly_chosen ) ) : [EOL] selected [ wrongly_chosen [ j ] ] = indxs_replacement [ i ] [EOL] [EOL] [EOL] [comment] [EOL] exits1 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits1 = exits1 [ [number] : : samples ] [EOL] cells1 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells1 = cells1 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits1_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells1_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits1 = np . concatenate ( ( exits1 , exits1_prev ) , axis = None ) [EOL] cells1 = np . concatenate ( ( cells1 , cells1_prev ) , axis = None ) [EOL] [EOL] exits1 . tolist ( ) [EOL] cells1 . tolist ( ) [EOL] selected_exits1 = [ ] [EOL] selected_cells1 = [ ] [EOL] new_exits1 = [ ] [EOL] new_cells1 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] [EOL] exits2 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells2 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits2 = exits2 [ [number] : : samples ] [EOL] cells2 = cells2 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits2_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells2_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits2 = np . concatenate ( ( exits2 , exits2_prev ) , axis = None ) [EOL] cells2 = np . concatenate ( ( cells2 , cells2_prev ) , axis = None ) [EOL] [EOL] exits2 . tolist ( ) [EOL] cells2 . tolist ( ) [EOL] selected_exits2 = [ ] [EOL] selected_cells2 = [ ] [EOL] new_exits2 = [ ] [EOL] new_cells2 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] [EOL] exits3 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells3 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits3 = exits3 [ [number] : : samples ] [EOL] cells3 = cells3 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits3_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells3_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits3 = np . concatenate ( ( exits3 , exits3_prev ) , axis = None ) [EOL] cells3 = np . concatenate ( ( cells3 , cells3_prev ) , axis = None ) [EOL] [EOL] exits3 . tolist ( ) [EOL] cells3 . tolist ( ) [EOL] selected_exits3 = [ ] [EOL] selected_cells3 = [ ] [EOL] new_exits3 = [ ] [EOL] new_cells3 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] [EOL] exits4 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells4 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits4 = exits4 [ [number] : : samples ] [EOL] cells4 = cells4 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits4_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells4_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits4 = np . concatenate ( ( exits4 , exits4_prev ) , axis = None ) [EOL] cells4 = np . concatenate ( ( cells4 , cells4_prev ) , axis = None ) [EOL] [EOL] exits4 . tolist ( ) [EOL] cells4 . tolist ( ) [EOL] selected_exits4 = [ ] [EOL] selected_cells4 = [ ] [EOL] new_exits4 = [ ] [EOL] new_cells4 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] [EOL] exits5 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells5 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits5 = exits5 [ [number] : : samples ] [EOL] cells5 = cells5 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits5_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells5_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits5 = np . concatenate ( ( exits5 , exits5_prev ) , axis = None ) [EOL] cells5 = np . concatenate ( ( cells5 , cells5_prev ) , axis = None ) [EOL] [EOL] exits5 . tolist ( ) [EOL] cells5 . tolist ( ) [EOL] selected_exits5 = [ ] [EOL] selected_cells5 = [ ] [EOL] new_exits5 = [ ] [EOL] new_cells5 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] [EOL] exits6 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells6 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits6 = exits6 [ [number] : : samples ] [EOL] cells6 = cells6 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits6_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells6_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] exits6 = np . concatenate ( ( exits6 , exits6_prev ) , axis = None ) [EOL] cells6 = np . concatenate ( ( cells6 , cells6_prev ) , axis = None ) [EOL] [EOL] exits6 . tolist ( ) [EOL] cells6 . tolist ( ) [EOL] selected_exits6 = [ ] [EOL] selected_cells6 = [ ] [EOL] new_exits6 = [ ] [EOL] new_cells6 = [ ] [EOL] [comment] [EOL] selected_evactimes = [ ] [EOL] selected_sample_evactimes = [ ] [EOL] selected_sample_maxs = [ ] [EOL] selected_positions = [ ] [EOL] selected_sample_positions = [ ] [EOL] for i in range ( population ) : [EOL] selected_sample_evactimes . append ( sample_evactimes [ selected [ i ] ] ) [EOL] selected_sample_maxs . append ( sample_maxs [ selected [ i ] ] ) [EOL] selected_sample_positions . append ( sample_positions [ selected [ i ] ] ) [EOL] [comment] [EOL] selected_exits1 . append ( exits1 [ selected [ i ] ] ) [EOL] selected_cells1 . append ( cells1 [ selected [ i ] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] selected_exits2 . append ( exits2 [ selected [ i ] ] ) [EOL] selected_cells2 . append ( cells2 [ selected [ i ] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] selected_exits3 . append ( exits3 [ selected [ i ] ] ) [EOL] selected_cells3 . append ( cells3 [ selected [ i ] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] selected_exits4 . append ( exits4 [ selected [ i ] ] ) [EOL] selected_cells4 . append ( cells4 [ selected [ i ] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] selected_exits5 . append ( exits5 [ selected [ i ] ] ) [EOL] selected_cells5 . append ( cells5 [ selected [ i ] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] selected_exits6 . append ( exits6 [ selected [ i ] ] ) [EOL] selected_cells6 . append ( cells6 [ selected [ i ] ] ) [EOL] for j in range ( samples ) : [EOL] selected_evactimes . append ( all_evactimes [ selected [ i ] * samples + j ] ) [EOL] selected_positions . append ( all_positions [ selected [ i ] * samples + j ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_sample_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_sample_maxs ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( n_simulations ) : [EOL] f . write ( [string] . format ( selected_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_sample_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] ) ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] ) ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] , selected_exits3 [ i ] , [string] , selected_cells3 [ i ] , [string] ) ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] , selected_exits3 [ i ] , [string] , selected_cells3 [ i ] , [string] , selected_exits4 [ i ] , [string] , selected_cells4 [ i ] , [string] ) ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] , selected_exits3 [ i ] , [string] , selected_cells3 [ i ] , [string] , selected_exits4 [ i ] , [string] , selected_cells4 [ i ] , [string] , selected_exits5 [ i ] , [string] , selected_cells5 [ i ] , [string] ) ) [EOL] [EOL] if n_guides == [number] : [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] , selected_exits3 [ i ] , [string] , selected_cells3 [ i ] , [string] , selected_exits4 [ i ] , [string] , selected_cells4 [ i ] , [string] , selected_exits5 [ i ] , [string] , selected_cells5 [ i ] , [string] , selected_exits6 [ i ] , [string] , selected_cells6 [ i ] , [string] ) ) [EOL] [EOL] f . close ( ) [EOL] [EOL] inds1 = np . arange ( [number] , population , [number] ) [EOL] inds2 = np . arange ( [number] , population , [number] ) [EOL] [comment] [EOL] for ind1 , ind2 in zip ( inds1 , inds2 ) : [EOL] [EOL] ind1_exits = [ ] [EOL] ind1_cells = [ ] [EOL] ind2_exits = [ ] [EOL] ind2_cells = [ ] [EOL] [EOL] [comment] [EOL] ind1_exits . append ( selected_exits1 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells1 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits1 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells1 [ ind2 ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] ind1_exits . append ( selected_exits2 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells2 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits2 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells2 [ ind2 ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] ind1_exits . append ( selected_exits3 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells3 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits3 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells3 [ ind2 ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] ind1_exits . append ( selected_exits4 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells4 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits4 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells4 [ ind2 ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] ind1_exits . append ( selected_exits5 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells5 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits5 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells5 [ ind2 ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] ind1_exits . append ( selected_exits6 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells6 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits6 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells6 [ ind2 ] ) [EOL] [EOL] [comment] [EOL] if ( ( np . random . uniform ( [number] , [number] , [number] ) <= CXPB ) and ( n_guides >= [number] ) ) : [EOL] ind1_newexits , ind1_newcells , ind2_newexits , ind2_newcells = onepointcrossover ( ind1_exits , ind1_cells , ind2_exits , ind2_cells ) [EOL] [EOL] [comment] [EOL] ind1_newexits , ind1_newcells = mutation ( ind1_newexits , ind1_newcells , MUTPB ) [EOL] ind2_newexits , ind2_newcells = mutation ( ind2_newexits , ind2_newcells , MUTPB ) [EOL] [EOL] else : [EOL] [comment] [EOL] ind1_newexits , ind1_newcells = mutation ( ind1_exits , ind1_cells , MUTPB ) [EOL] ind2_newexits , ind2_newcells = mutation ( ind2_exits , ind2_cells , MUTPB ) [EOL] [EOL] [comment] [EOL] new_exits1 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits1 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells1 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells1 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] new_exits2 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits2 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells2 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells2 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] new_exits3 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits3 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells3 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells3 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] new_exits4 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits4 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells4 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells4 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] new_exits5 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits5 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells5 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells5 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] new_exits6 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits6 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells6 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells6 . append ( ind2_newcells [ [number] ] ) [EOL] [EOL] [comment] [EOL] all_new_exits1 = [ ] [EOL] all_new_cells1 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits2 = [ ] [EOL] all_new_cells2 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits3 = [ ] [EOL] all_new_cells3 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits4 = [ ] [EOL] all_new_cells4 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits5 = [ ] [EOL] all_new_cells5 = [ ] [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits6 = [ ] [EOL] all_new_cells6 = [ ] [EOL] [EOL] for i in range ( population ) : [EOL] for j in range ( samples ) : [EOL] all_new_exits1 . append ( new_exits1 [ i ] ) [EOL] all_new_cells1 . append ( new_cells1 [ i ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits2 . append ( new_exits2 [ i ] ) [EOL] all_new_cells2 . append ( new_cells2 [ i ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits3 . append ( new_exits3 [ i ] ) [EOL] all_new_cells3 . append ( new_cells3 [ i ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits4 . append ( new_exits4 [ i ] ) [EOL] all_new_cells4 . append ( new_cells4 [ i ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits5 . append ( new_exits5 [ i ] ) [EOL] all_new_cells5 . append ( new_cells5 [ i ] ) [EOL] [EOL] if n_guides >= [number] : [EOL] all_new_exits6 . append ( new_exits6 [ i ] ) [EOL] all_new_cells6 . append ( new_cells6 [ i ] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] if n_guides >= [number] : [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] if n_guides >= [number] : [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] if n_guides >= [number] : [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] if n_guides >= [number] : [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] if n_guides >= [number] : [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.float]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] [EOL] def onepointcrossover_tags ( tags1 , tags2 ) : [EOL] [EOL] [docstring] [EOL] n_guides = len ( tags1 ) [EOL] crossover_point = np . round ( n_guides / [number] ) [EOL] [EOL] newtags1 = [ ] [EOL] newtags2 = [ ] [EOL] for i in range ( n_guides ) : [EOL] if i < crossover_point : [EOL] newtags1 . append ( tags1 [ i ] ) [EOL] newtags2 . append ( tags2 [ i ] ) [EOL] else : [EOL] newtags1 . append ( tags2 [ i ] ) [EOL] newtags2 . append ( tags1 [ i ] ) [EOL] [EOL] return newtags1 , newtags2 [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import io [EOL] import sys [EOL] import os [EOL] import numpy as np [EOL] [EOL] from onepointcrossover import onepointcrossover [EOL] from onepointcrossover_tags import onepointcrossover_tags [EOL] from mutation import mutation [EOL] from mutation_tags import mutation_tags [EOL] [EOL] [comment] [EOL] jobida = str ( sys . argv [ [number] ] ) [EOL] jobidb = str ( sys . argv [ [number] ] ) [EOL] jobidc = str ( sys . argv [ [number] ] ) [EOL] jobidd = str ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] generation = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] population = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] samples = int ( sys . argv [ [number] ] ) [EOL] [EOL] [comment] [EOL] n_simulations = population * samples [EOL] [EOL] [comment] [EOL] CXPB = [number] [EOL] CXPB_tags = [number] [EOL] [EOL] [comment] [EOL] MUTPB = [number] [EOL] MUTPB_tags = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] elitism_pr = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] all_positions = [ ] [EOL] all_output = [ ] [EOL] [EOL] [comment] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobida , [string] , i , [string] ) [EOL] [comment] [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] [comment] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidb , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidc , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] for i in range ( [number] , int ( n_simulations / [number] ) ) : [EOL] fname = [string] . format ( [string] , jobidd , [string] , i , [string] ) [EOL] with open ( fname ) as infile : [EOL] lines1 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . append ( lines1 [ [number] ] ) [EOL] if len ( lines1 ) > [number] : [EOL] all_output . append ( lines1 [ [number] ] ) [EOL] else : [EOL] all_output . append ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] all_evactimes = [ ] [EOL] for i in range ( [number] , n_simulations ) : [EOL] try : [EOL] all_evactimes . append ( float ( all_output [ i ] ) ) [EOL] except ValueError : [EOL] all_evactimes . append ( [number] ) [EOL] [EOL] [comment] [EOL] sample_evactimes = [ ] [EOL] sample_positions = [ ] [EOL] counter = [number] [EOL] for i in range ( [number] , population ) : [EOL] sample_mean = [number] [EOL] valid_runs = [number] [EOL] first_valid_run = - [number] [EOL] for j in range ( [number] , samples ) : [EOL] counter = i * samples + j [EOL] if first_valid_run == - [number] : [EOL] first_valid_run = counter [EOL] sample_positions . append ( all_positions [ counter ] ) [EOL] if all_evactimes [ counter ] != [number] : [EOL] sample_mean += all_evactimes [ counter ] [EOL] valid_runs += [number] [EOL] if sample_mean == [number] : [EOL] sample_evactimes . append ( [number] ) [EOL] else : [EOL] sample_evactimes . append ( sample_mean / valid_runs ) [EOL] [EOL] [comment] [EOL] sample_maxs = [ ] [EOL] for i in range ( [number] , population ) : [EOL] sample_maxs . append ( np . max ( all_evactimes [ i * samples : ( i + [number] ) * samples ] ) ) [EOL] [EOL] [comment] [EOL] waste = np . argwhere ( np . asarray ( sample_evactimes ) == [number] ) [EOL] nonwaste = np . argwhere ( np . asarray ( sample_evactimes ) != [number] ) [EOL] n_waste = len ( waste ) [EOL] n_nonwaste = len ( nonwaste ) [EOL] [EOL] if n_waste > [number] : [EOL] indxs_replacement = [ ] [EOL] for i in range ( [number] , n_waste ) : [EOL] rand_indx = np . random . randint ( [number] , population - n_waste , [number] ) [ [number] ] [EOL] indxs_replacement . append ( nonwaste [ rand_indx ] [ [number] ] ) [EOL] sample_evactimes [ waste [ i ] [ [number] ] ] = sample_evactimes [ indxs_replacement [ i ] ] [EOL] sample_positions [ waste [ i ] [ [number] ] ] = sample_positions [ indxs_replacement [ i ] ] [EOL] sample_maxs [ waste [ i ] [ [number] ] ] = sample_maxs [ indxs_replacement [ i ] ] [EOL] [EOL] [comment] [EOL] if n_waste > [number] : [EOL] for i in range ( [number] , n_waste ) : [EOL] all_positions [ waste [ i ] [ [number] ] * samples : ( waste [ i ] [ [number] ] + [number] ) * samples ] = all_positions [ indxs_replacement [ i ] * samples : ( indxs_replacement [ i ] + [number] ) * samples ] [EOL] all_evactimes [ waste [ i ] [ [number] ] * samples : ( waste [ i ] [ [number] ] + [number] ) * samples ] = all_evactimes [ indxs_replacement [ i ] * samples : ( indxs_replacement [ i ] + [number] ) * samples ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( all_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( sample_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( sample_maxs ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( n_simulations ) : [EOL] f . write ( [string] . format ( all_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( sample_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] if generation > [number] : [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] parents_results = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_results = parents_results . tolist ( ) [EOL] all_evactimes . extend ( parents_results ) [EOL] [EOL] [comment] [EOL] parents_sample_results = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_sample_results = parents_sample_results . tolist ( ) [EOL] sample_evactimes . extend ( parents_sample_results ) [EOL] [EOL] [comment] [EOL] parents_sample_maximums = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) ) [EOL] parents_sample_maximums = parents_sample_maximums . tolist ( ) [EOL] sample_maxs . extend ( parents_sample_maximums ) [EOL] [EOL] [comment] [EOL] with open ( [string] . format ( [string] , generation - [number] , [string] ) ) as infile : [EOL] lines2 = [ line . rstrip ( [string] ) for line in infile ] [EOL] all_positions . extend ( lines2 ) [EOL] [EOL] [comment] [EOL] with open ( [string] . format ( [string] , generation - [number] , [string] ) ) as infile : [EOL] lines3 = [ line . rstrip ( [string] ) for line in infile ] [EOL] sample_positions . extend ( lines3 ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if generation >= [number] : [EOL] parents_sample_evactimes = sample_evactimes [ population : ] [EOL] sorted_indices_parents = sorted ( range ( population ) , key = lambda k : parents_sample_evactimes [ k ] ) [EOL] if generation >= len ( elitism_pr ) : [EOL] sorted_indices_parents = sorted_indices_parents [ [number] : population ] [EOL] else : [EOL] sorted_indices_parents = sorted_indices_parents [ [number] : population * int ( elitism_pr [ generation ] * population ) ] [EOL] sorted_indices_parents = [ sorted_indices_parents [ i ] + population for i in range ( len ( sorted_indices_parents ) ) ] [EOL] [EOL] help_indices = [ i for i in range ( population ) ] [EOL] scores = sample_evactimes [ [number] : population ] [EOL] [EOL] if generation >= [number] : [EOL] for i in range ( len ( sorted_indices_parents ) ) : [EOL] help_indices . append ( sorted_indices_parents [ i ] ) [EOL] scores . append ( sample_evactimes [ sorted_indices_parents [ i ] ] ) [EOL] [EOL] sorted_indices = sorted ( range ( len ( scores ) ) , key = lambda k : scores [ k ] ) [EOL] [EOL] selected = np . empty ( population , dtype = int ) [EOL] for i in range ( population ) : [EOL] selected [ i ] = help_indices [ sorted_indices [ i ] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if n_waste > [number] : [EOL] for i in range ( [number] , n_waste ) : [EOL] wrongly_chosen = np . argwhere ( selected == waste [ i ] ) [EOL] if len ( wrongly_chosen ) > [number] : [EOL] for j in range ( [number] , len ( wrongly_chosen ) ) : [EOL] selected [ wrongly_chosen [ j ] ] = indxs_replacement [ i ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] exits1 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits1 = exits1 [ [number] : : samples ] [EOL] cells1 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells1 = cells1 [ [number] : : samples ] [EOL] tags1 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags1 = tags1 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits1_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells1_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags1_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags1 = np . concatenate ( ( tags1 , tags1_prev ) , axis = None ) [EOL] exits1 = np . concatenate ( ( exits1 , exits1_prev ) , axis = None ) [EOL] cells1 = np . concatenate ( ( cells1 , cells1_prev ) , axis = None ) [EOL] [EOL] exits1 . tolist ( ) [EOL] cells1 . tolist ( ) [EOL] selected_exits1 = [ ] [EOL] selected_cells1 = [ ] [EOL] new_exits1 = [ ] [EOL] new_cells1 = [ ] [EOL] tags1 . tolist ( ) [EOL] selected_tags1 = [ ] [EOL] new_tags1 = [ ] [EOL] [EOL] exits2 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells2 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits2 = exits2 [ [number] : : samples ] [EOL] cells2 = cells2 [ [number] : : samples ] [EOL] tags2 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags2 = tags2 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits2_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells2_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags2_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags2 = np . concatenate ( ( tags2 , tags2_prev ) , axis = None ) [EOL] exits2 = np . concatenate ( ( exits2 , exits2_prev ) , axis = None ) [EOL] cells2 = np . concatenate ( ( cells2 , cells2_prev ) , axis = None ) [EOL] [EOL] exits2 . tolist ( ) [EOL] cells2 . tolist ( ) [EOL] selected_exits2 = [ ] [EOL] selected_cells2 = [ ] [EOL] new_exits2 = [ ] [EOL] new_cells2 = [ ] [EOL] tags2 . tolist ( ) [EOL] selected_tags2 = [ ] [EOL] new_tags2 = [ ] [EOL] [EOL] exits3 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells3 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits3 = exits3 [ [number] : : samples ] [EOL] cells3 = cells3 [ [number] : : samples ] [EOL] tags3 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags3 = tags3 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits3_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells3_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags3_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags3 = np . concatenate ( ( tags3 , tags3_prev ) , axis = None ) [EOL] exits3 = np . concatenate ( ( exits3 , exits3_prev ) , axis = None ) [EOL] cells3 = np . concatenate ( ( cells3 , cells3_prev ) , axis = None ) [EOL] [EOL] exits3 . tolist ( ) [EOL] cells3 . tolist ( ) [EOL] selected_exits3 = [ ] [EOL] selected_cells3 = [ ] [EOL] new_exits3 = [ ] [EOL] new_cells3 = [ ] [EOL] tags3 . tolist ( ) [EOL] selected_tags3 = [ ] [EOL] new_tags3 = [ ] [EOL] [EOL] exits4 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells4 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits4 = exits4 [ [number] : : samples ] [EOL] cells4 = cells4 [ [number] : : samples ] [EOL] tags4 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags4 = tags4 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits4_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells4_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags4_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags4 = np . concatenate ( ( tags4 , tags4_prev ) , axis = None ) [EOL] exits4 = np . concatenate ( ( exits4 , exits4_prev ) , axis = None ) [EOL] cells4 = np . concatenate ( ( cells4 , cells4_prev ) , axis = None ) [EOL] [EOL] exits4 . tolist ( ) [EOL] cells4 . tolist ( ) [EOL] selected_exits4 = [ ] [EOL] selected_cells4 = [ ] [EOL] new_exits4 = [ ] [EOL] new_cells4 = [ ] [EOL] tags4 . tolist ( ) [EOL] selected_tags4 = [ ] [EOL] new_tags4 = [ ] [EOL] [EOL] exits5 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells5 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits5 = exits5 [ [number] : : samples ] [EOL] cells5 = cells5 [ [number] : : samples ] [EOL] tags5 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags5 = tags5 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits5_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells5_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags5_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags5 = np . concatenate ( ( tags5 , tags5_prev ) , axis = None ) [EOL] exits5 = np . concatenate ( ( exits5 , exits5_prev ) , axis = None ) [EOL] cells5 = np . concatenate ( ( cells5 , cells5_prev ) , axis = None ) [EOL] [EOL] exits5 . tolist ( ) [EOL] cells5 . tolist ( ) [EOL] selected_exits5 = [ ] [EOL] selected_cells5 = [ ] [EOL] new_exits5 = [ ] [EOL] new_cells5 = [ ] [EOL] tags5 . tolist ( ) [EOL] selected_tags5 = [ ] [EOL] new_tags5 = [ ] [EOL] [EOL] exits6 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] cells6 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] exits6 = exits6 [ [number] : : samples ] [EOL] cells6 = cells6 [ [number] : : samples ] [EOL] tags6 = np . loadtxt ( [string] . format ( [string] , generation , [string] ) , dtype = int ) [EOL] tags6 = tags6 [ [number] : : samples ] [EOL] if generation > [number] : [EOL] exits6_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] cells6_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags6_prev = np . loadtxt ( [string] . format ( [string] , generation - [number] , [string] ) , dtype = int ) [EOL] tags6 = np . concatenate ( ( tags6 , tags6_prev ) , axis = None ) [EOL] exits6 = np . concatenate ( ( exits6 , exits6_prev ) , axis = None ) [EOL] cells6 = np . concatenate ( ( cells6 , cells6_prev ) , axis = None ) [EOL] [EOL] exits6 . tolist ( ) [EOL] cells6 . tolist ( ) [EOL] selected_exits6 = [ ] [EOL] selected_cells6 = [ ] [EOL] new_exits6 = [ ] [EOL] new_cells6 = [ ] [EOL] tags6 . tolist ( ) [EOL] selected_tags6 = [ ] [EOL] new_tags6 = [ ] [EOL] [comment] [EOL] selected_evactimes = [ ] [EOL] selected_sample_evactimes = [ ] [EOL] selected_sample_maxs = [ ] [EOL] selected_positions = [ ] [EOL] selected_sample_positions = [ ] [EOL] for i in range ( population ) : [EOL] [comment] [EOL] [comment] [EOL] selected_sample_evactimes . append ( sample_evactimes [ selected [ i ] ] ) [EOL] selected_sample_maxs . append ( sample_maxs [ selected [ i ] ] ) [EOL] selected_sample_positions . append ( sample_positions [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] selected_exits1 . append ( exits1 [ selected [ i ] ] ) [EOL] selected_cells1 . append ( cells1 [ selected [ i ] ] ) [EOL] selected_tags1 . append ( tags1 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] selected_exits2 . append ( exits2 [ selected [ i ] ] ) [EOL] selected_cells2 . append ( cells2 [ selected [ i ] ] ) [EOL] selected_tags2 . append ( tags2 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] selected_exits3 . append ( exits3 [ selected [ i ] ] ) [EOL] selected_cells3 . append ( cells3 [ selected [ i ] ] ) [EOL] selected_tags3 . append ( tags3 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] selected_exits4 . append ( exits4 [ selected [ i ] ] ) [EOL] selected_cells4 . append ( cells4 [ selected [ i ] ] ) [EOL] selected_tags4 . append ( tags4 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] selected_exits5 . append ( exits5 [ selected [ i ] ] ) [EOL] selected_cells5 . append ( cells5 [ selected [ i ] ] ) [EOL] selected_tags5 . append ( tags5 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] selected_exits6 . append ( exits6 [ selected [ i ] ] ) [EOL] selected_cells6 . append ( cells6 [ selected [ i ] ] ) [EOL] selected_tags6 . append ( tags6 [ selected [ i ] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for j in range ( samples ) : [EOL] selected_evactimes . append ( all_evactimes [ selected [ i ] * samples + j ] ) [EOL] selected_positions . append ( all_positions [ selected [ i ] * samples + j ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_sample_evactimes ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_sample_maxs ) , fmt = [string] ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( n_simulations ) : [EOL] f . write ( [string] . format ( selected_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_sample_positions [ i ] , [string] ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] f = open ( [string] . format ( [string] , generation , [string] ) , [string] ) [EOL] for i in range ( population ) : [EOL] f . write ( [string] . format ( selected_tags1 [ i ] , [string] , selected_exits1 [ i ] , [string] , selected_cells1 [ i ] , [string] , selected_tags2 [ i ] , [string] , selected_exits2 [ i ] , [string] , selected_cells2 [ i ] , [string] , selected_tags3 [ i ] , [string] , selected_exits3 [ i ] , [string] , selected_cells3 [ i ] , [string] , selected_tags4 [ i ] , [string] , selected_exits4 [ i ] , [string] , selected_cells4 [ i ] , [string] , selected_tags5 [ i ] , [string] , selected_exits5 [ i ] , [string] , selected_cells5 [ i ] , [string] , selected_tags6 [ i ] , [string] , selected_exits6 [ i ] , [string] , selected_cells6 [ i ] , [string] ) ) [EOL] [EOL] f . close ( ) [EOL] [EOL] inds1 = np . arange ( [number] , population , [number] ) [EOL] inds2 = np . arange ( [number] , population , [number] ) [EOL] [comment] [EOL] for ind1 , ind2 in zip ( inds1 , inds2 ) : [EOL] [EOL] ind1_exits = [ ] [EOL] ind1_cells = [ ] [EOL] ind1_tags = [ ] [EOL] ind2_exits = [ ] [EOL] ind2_cells = [ ] [EOL] ind2_tags = [ ] [EOL] [EOL] [comment] [EOL] ind1_exits . append ( selected_exits1 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells1 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags1 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits1 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells1 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags1 [ ind2 ] ) [EOL] [EOL] ind1_exits . append ( selected_exits2 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells2 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags2 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits2 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells2 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags2 [ ind2 ] ) [EOL] [EOL] ind1_exits . append ( selected_exits3 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells3 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags3 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits3 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells3 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags3 [ ind2 ] ) [EOL] [EOL] ind1_exits . append ( selected_exits4 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells4 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags4 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits4 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells4 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags4 [ ind2 ] ) [EOL] [EOL] ind1_exits . append ( selected_exits5 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells5 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags5 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits5 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells5 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags5 [ ind2 ] ) [EOL] [EOL] ind1_exits . append ( selected_exits6 [ ind1 ] ) [EOL] ind1_cells . append ( selected_cells6 [ ind1 ] ) [EOL] ind1_tags . append ( selected_tags6 [ ind1 ] ) [EOL] ind2_exits . append ( selected_exits6 [ ind2 ] ) [EOL] ind2_cells . append ( selected_cells6 [ ind2 ] ) [EOL] ind2_tags . append ( selected_tags6 [ ind2 ] ) [EOL] [EOL] [comment] [EOL] if np . random . uniform ( [number] , [number] , [number] ) <= CXPB : [EOL] ind1_newexits , ind1_newcells , ind2_newexits , ind2_newcells = onepointcrossover ( ind1_exits , ind1_cells , ind2_exits , ind2_cells ) [EOL] [EOL] [comment] [EOL] ind1_newexits , ind1_newcells = mutation ( ind1_newexits , ind1_newcells , MUTPB ) [EOL] ind2_newexits , ind2_newcells = mutation ( ind2_newexits , ind2_newcells , MUTPB ) [EOL] [EOL] else : [EOL] [comment] [EOL] ind1_newexits , ind1_newcells = mutation ( ind1_exits , ind1_cells , MUTPB ) [EOL] ind2_newexits , ind2_newcells = mutation ( ind2_exits , ind2_cells , MUTPB ) [EOL] [EOL] [comment] [EOL] if np . random . uniform ( [number] , [number] , [number] ) <= CXPB_tags : [EOL] ind1_newtags , ind2_newtags = onepointcrossover_tags ( ind1_tags , ind2_tags ) [EOL] [EOL] [comment] [EOL] ind1_newtags = mutation_tags ( ind1_newtags , MUTPB_tags ) [EOL] ind2_newtags = mutation_tags ( ind2_newtags , MUTPB_tags ) [EOL] [EOL] else : [EOL] [comment] [EOL] ind1_newtags = mutation_tags ( ind1_tags , MUTPB_tags ) [EOL] ind2_newtags = mutation_tags ( ind2_tags , MUTPB_tags ) [EOL] [EOL] [EOL] [comment] [EOL] new_exits1 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits1 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells1 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells1 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags1 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags1 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] new_exits2 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits2 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells2 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells2 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags2 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags2 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] new_exits3 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits3 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells3 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells3 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags3 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags3 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] new_exits4 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits4 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells4 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells4 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags4 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags4 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] new_exits5 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits5 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells5 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells5 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags5 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags5 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] new_exits6 . append ( ind1_newexits [ [number] ] ) [EOL] new_exits6 . append ( ind2_newexits [ [number] ] ) [EOL] new_cells6 . append ( ind1_newcells [ [number] ] ) [EOL] new_cells6 . append ( ind2_newcells [ [number] ] ) [EOL] new_tags6 . append ( ind1_newtags [ [number] ] ) [EOL] new_tags6 . append ( ind2_newtags [ [number] ] ) [EOL] [EOL] [comment] [EOL] all_new_exits1 = [ ] [EOL] all_new_cells1 = [ ] [EOL] all_new_tags1 = [ ] [EOL] [EOL] all_new_exits2 = [ ] [EOL] all_new_cells2 = [ ] [EOL] all_new_tags2 = [ ] [EOL] [EOL] all_new_exits3 = [ ] [EOL] all_new_cells3 = [ ] [EOL] all_new_tags3 = [ ] [EOL] [EOL] all_new_exits4 = [ ] [EOL] all_new_cells4 = [ ] [EOL] all_new_tags4 = [ ] [EOL] [EOL] all_new_exits5 = [ ] [EOL] all_new_cells5 = [ ] [EOL] all_new_tags5 = [ ] [EOL] [EOL] all_new_exits6 = [ ] [EOL] all_new_cells6 = [ ] [EOL] all_new_tags6 = [ ] [EOL] [EOL] for i in range ( population ) : [EOL] for j in range ( samples ) : [EOL] all_new_exits1 . append ( new_exits1 [ i ] ) [EOL] all_new_cells1 . append ( new_cells1 [ i ] ) [EOL] all_new_tags1 . append ( new_tags1 [ i ] ) [EOL] [EOL] all_new_exits2 . append ( new_exits2 [ i ] ) [EOL] all_new_cells2 . append ( new_cells2 [ i ] ) [EOL] all_new_tags2 . append ( new_tags2 [ i ] ) [EOL] [EOL] all_new_exits3 . append ( new_exits3 [ i ] ) [EOL] all_new_cells3 . append ( new_cells3 [ i ] ) [EOL] all_new_tags3 . append ( new_tags3 [ i ] ) [EOL] [EOL] all_new_exits4 . append ( new_exits4 [ i ] ) [EOL] all_new_cells4 . append ( new_cells4 [ i ] ) [EOL] all_new_tags4 . append ( new_tags4 [ i ] ) [EOL] [EOL] all_new_exits5 . append ( new_exits5 [ i ] ) [EOL] all_new_cells5 . append ( new_cells5 [ i ] ) [EOL] all_new_tags5 . append ( new_tags5 [ i ] ) [EOL] [EOL] all_new_exits6 . append ( new_exits6 [ i ] ) [EOL] all_new_cells6 . append ( new_cells6 [ i ] ) [EOL] all_new_tags6 . append ( new_tags6 [ i ] ) [EOL] [EOL] [comment] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags1 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags2 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags3 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags4 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags5 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_exits6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_cells6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation + [number] , [string] ) , np . asarray ( all_new_tags6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_exits6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_cells6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL] np . savetxt ( [string] . format ( [string] , generation , [string] ) , np . asarray ( selected_tags6 , dtype = int ) , fmt = [string] , delimiter = [string] , newline = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.float]$ 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.float]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] def mutation_tags ( tags , mutpb ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] n_guides = len ( tags ) [EOL] [EOL] new_tags = [ ] [EOL] for i in range ( n_guides ) : [EOL] [EOL] rnd = np . random . rand ( [number] ) [ [number] ] [EOL] [EOL] if rnd <= mutpb : [EOL] [EOL] new_tags . append ( [number] - tags [ i ] ) [EOL] else : [EOL] new_tags . append ( tags [ i ] ) [EOL] [EOL] return new_tags [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0