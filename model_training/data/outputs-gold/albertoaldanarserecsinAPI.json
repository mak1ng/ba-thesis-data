from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] class MapsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from . busroutes import * [EOL] from . stops import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import cride [EOL] from django . db import models [EOL] import datetime [EOL] [comment] [EOL] from cride . utils . models import SerecsinModel [EOL] [EOL] class Busroute ( SerecsinModel ) : [EOL] [EOL] company = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE , null = True ) [EOL] [EOL] year = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] bus = models . CharField ( max_length = [number] , unique = False ) [EOL] helper = models . CharField ( max_length = [number] , unique = False ) [EOL] helper_b = models . CharField ( max_length = [number] , unique = False , null = True ) [EOL] gas = models . CharField ( max_length = [number] , unique = False ) [EOL] km = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] mes = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] is_finished = models . BooleanField ( default = False ) [EOL] [EOL] start = models . DateTimeField ( [string] , help_text = [string] ) [EOL] [EOL] finish = models . DateTimeField ( [string] , help_text = [string] , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . bus [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.maps.models.busroutes.Busroute]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . busroutes import Busroute [EOL] from . stops import Stop [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from . busroutes import * [EOL] from . stops import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [comment] [EOL] from rest_framework . permissions import BasePermission [EOL] [EOL] class IsAccountOwner ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [docstring] [EOL] return request . user == obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] from django . urls import path , include [EOL] [comment] [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from . views import users as user_views [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , user_views . UserViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . users import * [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0
from typing import Any , Dict , Type [EOL] import typing [EOL] import cride [EOL] [docstring] [EOL] [comment] [EOL] from rest_framework . views import APIView [EOL] from rest_framework import status , mixins , viewsets [EOL] from rest_framework . response import Response [EOL] from rest_framework . decorators import action [EOL] [comment] [EOL] from rest_framework . permissions import ( AllowAny , IsAuthenticated ) [EOL] [comment] [EOL] from users . serializers . users import ( UserLoginSerializer , UserModelSerializer , UserSignUpSerializer , AccountVerificationSerializer ) [EOL] from cride . users . models import User [EOL] [EOL] class UserViewSet ( mixins . RetrieveModelMixin , mixins . UpdateModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [docstring] [EOL] [EOL] queryset = User . objects . filter ( is_active = True ) [EOL] serializer_class = UserModelSerializer [EOL] lookup_field = [string] [EOL] [EOL] def get_permissions ( self ) : [EOL] [docstring] [EOL] if self . action in [ [string] , [string] , [string] ] : [EOL] permissions = [ AllowAny ] [EOL] elif self . action == [ [string] , [string] , [string] ] : [EOL] permissions = [ IsAuthenticated , IsAccountOwner ] [EOL] else : [EOL] permissions = [ IsAuthenticated ] [EOL] return [ p ( ) for p in permissions ] [EOL] [EOL] @ action ( detail = False , methods = [ [string] ] ) def login ( self , request ) : [EOL] serealizer = UserLoginSerializer ( data = request . data ) [EOL] serealizer . is_valid ( raise_exception = True ) [EOL] user , token = serealizer . save ( ) [EOL] [EOL] data = { [string] : UserModelSerializer ( user ) . data , [string] : token } [EOL] return Response ( data , status = status . HTTP_201_CREATED ) [EOL] [EOL] [EOL] @ action ( detail = False , methods = [ [string] ] ) def signup ( self , request ) : [EOL] serealizer = UserSignUpSerializer ( data = request . data ) [EOL] serealizer . is_valid ( raise_exception = True ) [EOL] user , jwt = serealizer . save ( ) [EOL] data = { [string] : UserModelSerializer ( user ) . data , [string] : jwt } [EOL] [EOL] return Response ( data , status = status . HTTP_201_CREATED ) [EOL] [EOL] [EOL] @ action ( detail = False , methods = [ [string] ] ) def verify ( self , request ) : [EOL] serealizer = AccountVerificationSerializer ( data = request . data ) [EOL] serealizer . is_valid ( raise_exception = True ) [EOL] serealizer . save ( ) [EOL] [EOL] data = { [string] : [string] } [EOL] [EOL] return Response ( data , status = status . HTTP_200_OK ) [EOL] [EOL] def retrieve ( self , request , * args , ** kwargs ) : [EOL] response = super ( UserViewSet , self ) . retrieve ( request , * args , ** kwargs ) [EOL] data = { [string] : response . data , } [EOL] response . data = data [EOL] return response [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.users.views.users.UserViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.users.views.users.UserViewSet]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0
	0
from . users import * [EOL] [EOL]	0 0 0 0 0 0 0
from . users import User [EOL]	0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import cride [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractUser [EOL] [comment] [EOL] from cride . utils . models import SerecsinModel [EOL] from django . core . validators import RegexValidator [EOL] [EOL] class User ( SerecsinModel , AbstractUser ) : [EOL] [EOL] email = models . EmailField ( [string] , unique = True , error_messages = { [string] : [string] } ) [EOL] [EOL] phone_number = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] def get_short_name ( self ) : [EOL] return self . username [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.users.models.users.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.users.models.users.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . urls import path , include [EOL] [comment] [EOL] [comment] [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from cride . registros . views import serecsin_data [EOL] [EOL] router = DefaultRouter ( ) [EOL] [EOL] urlpatterns = [ path ( [string] , serecsin_data ) , path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] class RegistrosAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[EOL] from . registros import *	0 0 0 0 0 0
[EOL] [comment] [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] from cride . utils . models import SerecsinModel [EOL] [EOL] class Ingreso ( SerecsinModel ) : [EOL] [EOL] cliente = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] mes = models . PositiveIntegerField ( default = [number] ) [EOL] año = models . PositiveIntegerField ( default = [number] ) [EOL] importe = models . PositiveIntegerField ( default = [number] ) [EOL] adeudo_mes = models . PositiveIntegerField ( default = [number] ) [EOL] importante = models . BooleanField ( default = False ) [EOL] adeudo_acumulado = models . PositiveIntegerField ( default = [number] ) [EOL] lugar = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . cliente [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . egresos import Egreso [EOL] from . ingresos import Ingreso	0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import cride [EOL] [docstring] [EOL] [comment] [EOL] from rest_framework import serializers [EOL] [comment] [EOL] from cride . registros . models import Ingreso [EOL] [comment] [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class IngresoModelSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] [EOL] model = Ingreso [EOL] [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.registros.serializers.ingresos.IngresoModelSerializer.Meta]$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . egresos import * [EOL] from . ingresos import *	0 0 0 0 0 0 0 0 0 0 0
	0
	0