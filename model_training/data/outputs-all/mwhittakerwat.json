from typing import Tuple , Type , Dict , Set , Any , List , Callable [EOL] import builtins [EOL] import wat [EOL] import typing [EOL] from typing import ( Callable , Dict , List , NamedTuple , FrozenSet , Optional , Set , Tuple , Union ) [EOL] [EOL] from . state_machine import StateMachine [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Timestamp ( NamedTuple ) : [EOL] tick = ... [EOL] step = ... [EOL] [EOL] def increment_tick ( self ) : [EOL] return Timestamp ( self . tick + [number] , [number] ) [EOL] [EOL] def increment_step ( self ) : [EOL] return Timestamp ( self . tick , self . step + [number] ) [EOL] [EOL] Record = Tuple [ str , ... ] [EOL] [EOL] class TimestampedRecord ( NamedTuple ) : [EOL] record = ... [EOL] timestamp = ... [EOL] [EOL] class RecordId ( NamedTuple ) : [EOL] relation_name = ... [EOL] record = ... [EOL] timestamp = ... [EOL] [EOL] RelationName = str [EOL] Relation = Set [ TimestampedRecord ] [EOL] Arity = int [EOL] Schema = Dict [ RelationName , Arity ] [EOL] Database = Dict [ RelationName , Relation ] [EOL] Lineage = Set [ FrozenSet [ RecordId ] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] WbQueryOutput = Set [ Tuple [ Record , FrozenSet [ RecordId ] ] ] [EOL] Coercible = Union [ str , Record , [string] ] [EOL] [EOL] def coerce ( coercible ) : [EOL] if isinstance ( coercible , str ) : [EOL] return WbRelation ( coercible ) [EOL] if isinstance ( coercible , tuple ) : [EOL] return WbRecord ( coercible ) [EOL] elif isinstance ( coercible , WbQuery ) : [EOL] return coercible [EOL] else : [EOL] raise ValueError ( f' [string] { coercible } [string] ' ) [EOL] [EOL] class WbQuery : [EOL] def eval ( self , db ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def __add__ ( self , other ) : [EOL] return WbCup ( self , coerce ( other ) ) [EOL] [EOL] def __radd__ ( self , other ) : [EOL] return WbCup ( coerce ( other ) , self ) [EOL] [EOL] def __sub__ ( self , other ) : [EOL] return WbDiff ( self , coerce ( other ) ) [EOL] [EOL] def __rsub__ ( self , other ) : [EOL] return WbDiff ( coerce ( other ) , self ) [EOL] [EOL] def __mul__ ( self , other ) : [EOL] return WbCross ( self , coerce ( other ) ) [EOL] [EOL] def __rmul__ ( self , other ) : [EOL] return WbCross ( coerce ( other ) , self ) [EOL] [EOL] def select ( self , f ) : [EOL] return WbSelect ( self , f ) [EOL] [EOL] def project ( self , indexes ) : [EOL] return WbProject ( self , indexes ) [EOL] [EOL] class WbRecord ( WbQuery ) : [EOL] def __init__ ( self , record ) : [EOL] self . record = record [EOL] [EOL] def eval ( self , db ) : [EOL] return { ( self . record , frozenset ( ) ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . record }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbRelation ( WbQuery ) : [EOL] def __init__ ( self , R ) : [EOL] self . R = R [EOL] [EOL] def eval ( self , db ) : [EOL] assert self . R in db , ( self . R , db ) [EOL] return { ( r , frozenset ( [ RecordId ( self . R , r , t ) ] ) ) for ( r , t ) in db [ self . R ] } [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . R }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbSelect ( WbQuery ) : [EOL] def __init__ ( self , child , f ) : [EOL] self . child = coerce ( child ) [EOL] self . f = f [EOL] [EOL] def eval ( self , db ) : [EOL] return { ( r , lineage ) for r , lineage in self . child . eval ( db ) if self . f ( r ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . child } [string] { self . f } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbProject ( WbQuery ) : [EOL] def __init__ ( self , child , indexes ) : [EOL] self . child = coerce ( child ) [EOL] self . indexes = indexes [EOL] [EOL] def eval ( self , db ) : [EOL] return { ( tuple ( r [ i ] for i in self . indexes ) , lineage ) for r , lineage in self . child . eval ( db ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . child } [string] { self . indexes } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbCross ( WbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = coerce ( lhs ) [EOL] self . rhs = coerce ( rhs ) [EOL] [EOL] def eval ( self , db ) : [EOL] return { ( lhs_r + rhs_r , lhs_lineage | rhs_lineage ) for ( lhs_r , lhs_lineage ) in self . lhs . eval ( db ) for ( rhs_r , rhs_lineage ) in self . rhs . eval ( db ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbCup ( WbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = coerce ( lhs ) [EOL] self . rhs = coerce ( rhs ) [EOL] [EOL] def eval ( self , db ) : [EOL] return self . lhs . eval ( db ) | self . rhs . eval ( db ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class WbDiff ( WbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = coerce ( lhs ) [EOL] self . rhs = coerce ( rhs ) [EOL] [EOL] def eval ( self , db ) : [EOL] rhs_records = { r for r , _ in self . rhs . eval ( db ) } [EOL] return { ( r , lineage ) for ( r , lineage ) in self . lhs . eval ( db ) if r not in rhs_records } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] [comment] [EOL] class Rule ( NamedTuple ) : [EOL] relation_name = ... [EOL] query = ... [EOL] [EOL] class Input ( NamedTuple ) : [EOL] relation_name = ... [EOL] record = ... [EOL] [EOL] class Output ( NamedTuple ) : [EOL] reply = ... [EOL] [EOL] EnumeratedTrace = List [ Tuple [ int , Input , Output ] ] [EOL] [EOL] class WhiteBox ( StateMachine [ Input , Output ] ) : [EOL] def __init__ ( self ) : [EOL] self . timestamp = Timestamp ( [number] , [number] ) [EOL] self . schema = dict ( ) [EOL] self . db = dict ( ) [EOL] self . rules = dict ( ) [EOL] self . lineage = dict ( ) [EOL] self . inputs = dict ( ) [EOL] self . outputs = dict ( ) [EOL] self . output_lineage = dict ( ) [EOL] [EOL] def create_table ( self , name , arity ) : [EOL] assert name not in self . schema , ( name , self . schema ) [EOL] self . schema [ name ] = arity [EOL] self . db [ name ] = set ( ) [EOL] [EOL] def register_rules ( self , name , rules ) : [EOL] assert name not in self . rules , ( name , self . rules ) [EOL] assert len ( rules ) > [number] , rules [EOL] self . rules [ name ] = rules [EOL] [EOL] def _flatten_lineage ( self , lineage ) : [EOL] output = set ( ) [EOL] for witness in lineage : [EOL] for rid in witness : [EOL] if rid . timestamp . step == [number] : [EOL] output . add ( rid ) [EOL] else : [EOL] output |= self . _flatten_lineage ( self . lineage [ rid ] ) [EOL] return output [EOL] [EOL] def get_output_lineage ( self , j ) : [EOL] assert j in self . output_lineage , ( j , self . output_lineage ) [EOL] [EOL] ans = dict ( ) [EOL] for rid , lineage in self . output_lineage [ j ] . items ( ) : [EOL] rids = self . _flatten_lineage ( lineage ) [EOL] indexes = sorted ( rid . timestamp . tick for rid in rids if rid . timestamp . tick != j ) [EOL] ans [ rid ] = [ ( j , self . inputs [ j ] , self . outputs [ j ] ) for j in indexes ] [EOL] return ans [EOL] [EOL] [comment] [EOL] def reset ( self ) : [EOL] self . timestamp = Timestamp ( [number] , [number] ) [EOL] self . db = { name : set ( ) for name in self . schema } [EOL] self . lineage = dict ( ) [EOL] [EOL] [comment] [EOL] def transition ( self , i ) : [EOL] assert i . relation_name in self . schema , ( i . relation_name , self . schema ) [EOL] assert i . relation_name in self . rules , ( i . relation_name , self . rules ) [EOL] assert len ( i . record ) == self . schema [ i . relation_name ] [EOL] [EOL] [comment] [EOL] self . inputs [ self . timestamp . tick ] = i [EOL] [EOL] [comment] [EOL] tr = TimestampedRecord ( i . record , self . timestamp ) [EOL] self . db [ i . relation_name ] . add ( tr ) [EOL] [EOL] [comment] [EOL] for name , query in self . rules [ i . relation_name ] [ : - [number] ] : [EOL] [comment] [EOL] self . timestamp = self . timestamp . increment_step ( ) [EOL] [EOL] [comment] [EOL] ans = query . eval ( self . db ) [EOL] records = { r for r , lineage in ans } [EOL] [EOL] [comment] [EOL] self . db [ name ] = { tr for tr in self . db [ name ] if tr . record in records } [EOL] [EOL] for r , lineage in ans : [EOL] [comment] [EOL] tr = TimestampedRecord ( r , self . timestamp ) [EOL] self . db [ name ] . add ( tr ) [EOL] [EOL] [comment] [EOL] rid = RecordId ( name , r , self . timestamp ) [EOL] if rid not in self . lineage : [EOL] self . lineage [ rid ] = set ( ) [EOL] self . lineage [ rid ] . add ( lineage ) [EOL] [EOL] [comment] [EOL] name , query = self . rules [ i . relation_name ] [ - [number] ] [EOL] self . timestamp = self . timestamp . increment_step ( ) [EOL] ans = query . eval ( self . db ) [EOL] [EOL] [comment] [EOL] output_lineage = dict ( ) [EOL] for r , lineage in ans : [EOL] rid = RecordId ( name , r , self . timestamp ) [EOL] if rid not in output_lineage : [EOL] output_lineage [ rid ] = set ( ) [EOL] output_lineage [ rid ] . add ( lineage ) [EOL] self . output_lineage [ self . timestamp . tick ] = output_lineage [EOL] [EOL] [comment] [EOL] output = Output ( { r for r , lineage in ans } ) [EOL] self . outputs [ self . timestamp . tick ] = output [EOL] [EOL] [comment] [EOL] self . timestamp = self . timestamp . increment_tick ( ) [EOL] [EOL] [comment] [EOL] self . db [ i . relation_name ] = set ( ) [EOL] [EOL] return output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Record$ 0 0 0 $Timestamp$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $Record$ 0 0 0 $TimestampelationName$ 0 0 0 $WbQuery$ 0 0 0 0 0 0 0 0 0 0 0 $RelationName$ 0 0 0 $Record$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[Record]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Output$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[RecordId,Lineage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.RecordId$ 0 0 $typing.Dict[RecordId,Lineage]$ 0 0 $typing.Dict[RecordId,Lineage]$ 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 $typing.Dict[RecordId,Lineage]$ 0 $wat.white_box.RecordId$ 0 0 0 0 0 0 0 0 0 $typing.Dict[RecordId,Lineage]$ 0 0 0 0 0 0 0 0 $typing.Dict[RecordId,Lineage]$ 0 0 0 0 $wat.white_box.Output$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.Output$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.Output$ 0
from typing import Dict , Any , List [EOL] import builtins [EOL] import wat [EOL] import typing [EOL] from typing import Dict , List , NamedTuple , Optional , Union [EOL] [EOL] from . state_machine import StateMachine [EOL] [EOL] class Expr : [EOL] def eval ( self , env ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] class Top ( Expr ) : [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return True [EOL] [EOL] class Bot ( Expr ) : [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return False [EOL] [EOL] class Var ( Expr ) : [EOL] def __init__ ( self , x ) : [EOL] self . x = x [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return env . get ( self . x , False ) [EOL] [EOL] class And ( Expr ) : [EOL] def __init__ ( self , children ) : [EOL] self . children = children [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . children }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return all ( child . eval ( env ) for child in self . children ) [EOL] [EOL] class Or ( Expr ) : [EOL] def __init__ ( self , children ) : [EOL] self . children = children [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . children }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return any ( child . eval ( env ) for child in self . children ) [EOL] [EOL] class Not ( Expr ) : [EOL] def __init__ ( self , child ) : [EOL] self . child = child [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . child } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] def eval ( self , env ) : [EOL] return not self . child . eval ( env ) [EOL] [EOL] class BexprEvalRequest ( NamedTuple ) : [EOL] e = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . e } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class BexprEvalReply ( NamedTuple ) : [EOL] b = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . b }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class BexprSetRequest ( NamedTuple ) : [EOL] k = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . k } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class BexprSetReply ( NamedTuple ) : [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class BexprUnsetRequest ( NamedTuple ) : [EOL] k = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . k } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class BexprUnsetReply ( NamedTuple ) : [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] Input = Union [ BexprEvalRequest , BexprSetRequest , BexprUnsetRequest ] [EOL] Output = Union [ BexprEvalReply , BexprSetReply , BexprUnsetReply ] [EOL] class Bexpr ( StateMachine [ Input , Output ] ) : [EOL] def __init__ ( self ) : [EOL] self . env = dict ( ) [EOL] [EOL] def eval ( self , e ) : [EOL] return BexprEvalRequest ( e ) [EOL] [EOL] def set ( self , k ) : [EOL] return BexprSetRequest ( k ) [EOL] [EOL] def unset ( self , k ) : [EOL] return BexprUnsetRequest ( k ) [EOL] [EOL] [comment] [EOL] def reset ( self ) : [EOL] self . env = dict ( ) [EOL] [EOL] [comment] [EOL] def transition ( self , i ) : [EOL] if isinstance ( i , BexprEvalRequest ) : [EOL] return BexprEvalReply ( i . e . eval ( self . env ) ) [EOL] elif isinstance ( i , BexprSetRequest ) : [EOL] self . env [ i . k ] = True [EOL] return BexprSetReply ( ) [EOL] elif isinstance ( i , BexprUnsetRequest ) : [EOL] self . env [ i . k ] = False [EOL] return BexprUnsetReply ( ) [EOL] else : [EOL] raise ValueError ( f' [string] { i } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[wat.bexpr.Expr]$ 0 0 0 0 0 $typing.List[wat.bexpr.Expr]$ 0 $typing.List[wat.bexpr.Expr]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[wat.bexpr.Expr]$ 0 0 0 0 0 $typing.List[wat.bexpr.Expr]$ 0 $typing.List[wat.bexpr.Expr]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.bexpr.Expr$ 0 0 0 0 0 $wat.bexpr.Expr$ 0 $wat.bexpr.Expr$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 $Expr$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 $BexprEvalRequest$ 0 0 0 $Expr$ 0 0 0 0 0 0 $Expr$ 0 0 0 0 $BexprSetRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $BexprUnsetRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 $Output$ 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0
from typing import Tuple , List , TypeVar [EOL] import typing [EOL] import wat [EOL] from typing import List , Tuple , TypeVar , Generic [EOL] [EOL] Input = TypeVar ( [string] ) [EOL] Output = TypeVar ( [string] ) [EOL] [EOL] class StateMachine ( Generic [ Input , Output ] ) : [EOL] [docstring] [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] def transition ( self , i ) : [EOL] [docstring] [EOL] raise NotImplementedError ( ) [EOL] [EOL] def run ( self , inputs ) : [EOL] [docstring] [EOL] self . reset ( ) [EOL] trace = [ ] [EOL] for i in inputs : [EOL] o = self . transition ( i ) [EOL] trace . append ( ( i , o ) ) [EOL] return trace [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[Input,Output]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import builtins [EOL] import typing [EOL] from typing import Dict , NamedTuple , Optional , Union [EOL] [EOL] from . state_machine import StateMachine [EOL] [EOL] class KvsGetRequest ( NamedTuple ) : [EOL] k = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . k } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class KvsGetReply ( NamedTuple ) : [EOL] v = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . v }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class KvsSetRequest ( NamedTuple ) : [EOL] k = ... [EOL] v = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . k } [string] { self . v } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class KvsSetReply ( NamedTuple ) : [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class KvsAddRequest ( NamedTuple ) : [EOL] k = ... [EOL] x = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . k } [string] { self . x } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class KvsAddReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] def __str__ ( self ) : [EOL] if self . success : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] Input = Union [ KvsGetRequest , KvsSetRequest ] [EOL] Output = Union [ KvsGetReply , KvsSetReply ] [EOL] class Kvs ( StateMachine [ Input , Output ] ) : [EOL] def __init__ ( self ) : [EOL] self . kvs = dict ( ) [EOL] [EOL] def get ( self , k ) : [EOL] return KvsGetRequest ( k ) [EOL] [EOL] def set ( self , k , v ) : [EOL] return KvsSetRequest ( k , v ) [EOL] [EOL] def add ( self , k , x ) : [EOL] return KvsAddRequest ( k , x ) [EOL] [EOL] [comment] [EOL] def reset ( self ) : [EOL] self . kvs = dict ( ) [EOL] [EOL] [comment] [EOL] def transition ( self , i ) : [EOL] if isinstance ( i , KvsGetRequest ) : [EOL] return KvsGetReply ( self . kvs . get ( i . k , None ) ) [EOL] elif isinstance ( i , KvsSetRequest ) : [EOL] self . kvs [ i . k ] = i . v [EOL] return KvsSetReply ( ) [EOL] elif isinstance ( i , KvsAddRequest ) : [EOL] if i . k in self . kvs : [EOL] self . kvs [ i . k ] += i . x [EOL] return KvsAddReply ( True ) [EOL] else : [EOL] return KvsAddReply ( False ) [EOL] else : [EOL] raise ValueError ( f' [string] { i } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $KvsGetRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $KvsSetRequest$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 $KvsAddRequest$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $Output$ 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0
from . bexpr import * [EOL] from . db import * [EOL] from . kvs import * [EOL] from . lists import * [EOL] from . wat import * [EOL] from . white_box import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , Dict , Set , Any , List , Callable [EOL] import builtins [EOL] import wat [EOL] import typing [EOL] from typing import ( Callable , Dict , List , NamedTuple , Tuple , Optional , Set , Union ) [EOL] [EOL] from . state_machine import StateMachine [EOL] [EOL] Record = Tuple [ str , ... ] [EOL] [EOL] class DbQueryException ( Exception ) : [EOL] pass [EOL] [EOL] class DbQuery : [EOL] def eval ( self , db ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] class DbRelation ( DbQuery ) : [EOL] def __init__ ( self , r ) : [EOL] self . r = r [EOL] [EOL] def eval ( self , db ) : [EOL] if self . r not in db : [EOL] raise DbQueryException ( f'{ self . r } [string] { db } [string] ' ) [EOL] return db [ self . r ] [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . r }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbSelect ( DbQuery ) : [EOL] def __init__ ( self , child , f ) : [EOL] self . child = child [EOL] self . f = f [EOL] [EOL] def eval ( self , db ) : [EOL] return { t for t in self . child . eval ( db ) if self . f ( t ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . child } [string] { self . f } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbProject ( DbQuery ) : [EOL] def __init__ ( self , child , indexes ) : [EOL] self . child = child [EOL] self . indexes = indexes [EOL] [EOL] def eval ( self , db ) : [EOL] return { tuple ( t [ i ] for i in self . indexes ) for t in self . child . eval ( db ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . child } [string] { self . indexes } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbCross ( DbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = lhs [EOL] self . rhs = rhs [EOL] [EOL] def eval ( self , db ) : [EOL] return { lhs + rhs for lhs in self . lhs . eval ( db ) for rhs in self . rhs . eval ( db ) } [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbCup ( DbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = lhs [EOL] self . rhs = rhs [EOL] [EOL] def eval ( self , db ) : [EOL] return self . lhs . eval ( db ) | self . rhs . eval ( db ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbDiff ( DbQuery ) : [EOL] def __init__ ( self , lhs , rhs ) : [EOL] self . lhs = lhs [EOL] self . rhs = rhs [EOL] [EOL] def eval ( self , db ) : [EOL] return self . lhs . eval ( db ) - self . rhs . eval ( db ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . lhs } [string] { self . rhs } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbCreateRequest ( NamedTuple ) : [EOL] r = ... [EOL] arity = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . r } [string] { self . arity } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbCreateReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . success }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbInsertRequest ( NamedTuple ) : [EOL] r = ... [EOL] t = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . r } [string] { tuple ( self . t ) } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbInsertReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . success }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbDeleteRequest ( NamedTuple ) : [EOL] r = ... [EOL] t = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . r } [string] { self . t } [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbDeleteReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . success }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbQueryRequest ( NamedTuple ) : [EOL] q = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] ' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] class DbQueryReply ( NamedTuple ) : [EOL] result = ... [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . result }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return str ( self ) [EOL] [EOL] Input = Union [ DbCreateRequest , DbInsertRequest , DbDeleteRequest , DbQueryRequest ] [EOL] Output = Union [ DbCreateReply , DbInsertReply , DbDeleteReply , DbQueryReply ] [EOL] class Db ( StateMachine [ Input , Output ] ) : [EOL] def __init__ ( self ) : [EOL] self . db = dict ( ) [EOL] [EOL] def create ( self , r , arity ) : [EOL] return DbCreateRequest ( r , arity ) [EOL] [EOL] def insert ( self , r , t ) : [EOL] return DbInsertRequest ( r , t ) [EOL] [EOL] def delete ( self , r , t ) : [EOL] return DbDeleteRequest ( r , t ) [EOL] [EOL] def query ( self , q ) : [EOL] return DbQueryRequest ( q ) [EOL] [EOL] [comment] [EOL] def reset ( self ) : [EOL] self . db = dict ( ) [EOL] [EOL] [comment] [EOL] def transition ( self , i ) : [EOL] if isinstance ( i , DbCreateRequest ) : [EOL] if i . r in self . db : [EOL] return DbCreateReply ( False ) [EOL] else : [EOL] self . db [ i . r ] = set ( ) [EOL] return DbCreateReply ( True ) [EOL] if isinstance ( i , DbInsertRequest ) : [EOL] if i . r not in self . db : [EOL] return DbInsertReply ( False ) [EOL] else : [EOL] self . db [ i . r ] . add ( tuple ( i . t ) ) [EOL] return DbInsertReply ( True ) [EOL] if isinstance ( i , DbDeleteRequest ) : [EOL] if i . r not in self . db : [EOL] return DbDeleteReply ( False ) [EOL] else : [EOL] self . db [ i . r ] . remove ( tuple ( i . t ) ) [EOL] return DbDeleteReply ( True ) [EOL] if isinstance ( i , DbQueryRequest ) : [EOL] try : [EOL] return DbQueryReply ( i . q . eval ( self . db ) ) [EOL] except DbQueryException : [EOL] return DbQueryReply ( None ) [EOL] else : [EOL] raise ValueError ( f' [string] { i } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.db.DbQuery$ 0 $typing.Callable[[typing.Tuple],builtins.bool]$ 0 0 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $typing.Callable[[typing.Tuple],builtins.bool]$ 0 $typing.Callable[[typing.Tuple],builtins.bool]$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.db.DbQuery$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $wat.db.DbQuery$ 0 $wat.db.DbQuery$ 0 0 0 $typing.Set[Record]$ 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DbQuery$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Set[Record]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[Record]]$ 0 0 0 0 0 0 0 $DbCreateRequest$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 $DbInsertRequest$ 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $DbDeleteRequest$ 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $DbQueryRequest$ 0 0 0 $DbQuery$ 0 0 0 0 0 0 $DbQuery$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[typing.Tuple[builtins.str,...]]]$ 0 0 0 0 0 0 0 0 0 $Output$ 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0
from typing import Any , List [EOL] import builtins [EOL] import typing [EOL] from typing import Dict , List , NamedTuple , Optional , Union [EOL] [EOL] from . state_machine import StateMachine [EOL] [EOL] class ListsLpushRequest ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] class ListsLpushReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] class ListsLpopRequest ( NamedTuple ) : [EOL] pass [EOL] [EOL] class ListsLpopReply ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] class ListsRpushRequest ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] class ListsRpushReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] class ListsRpopRequest ( NamedTuple ) : [EOL] pass [EOL] [EOL] class ListsRpopReply ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] class ListsRemoveRequest ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] class ListsRemoveReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] class ListsSetRequest ( NamedTuple ) : [EOL] x = ... [EOL] i = ... [EOL] [EOL] class ListsSetReply ( NamedTuple ) : [EOL] success = ... [EOL] [EOL] class ListsIndexRequest ( NamedTuple ) : [EOL] i = ... [EOL] [EOL] class ListsIndexReply ( NamedTuple ) : [EOL] x = ... [EOL] [EOL] [EOL] Input = Union [ ListsLpushRequest , ListsLpopRequest , ListsRpushRequest , ListsRpopRequest , ListsRemoveRequest , ListsSetRequest , ListsIndexRequest ] [EOL] Output = Union [ ListsLpushReply , ListsLpopReply , ListsRpushReply , ListsRpopReply , ListsRemoveReply , ListsSetReply , ListsSetReply , ListsIndexReply ] [EOL] class Lists ( StateMachine [ Input , Output ] ) : [EOL] def __init__ ( self ) : [EOL] self . xs = [ ] [EOL] [EOL] def lpush ( self , x ) : [EOL] return ListsLpushRequest ( x ) [EOL] [EOL] def lpop ( self ) : [EOL] return ListsLpopRequest ( ) [EOL] [EOL] def rpush ( self , x ) : [EOL] return ListsRpushRequest ( x ) [EOL] [EOL] def rpop ( self ) : [EOL] return ListsRpopRequest ( ) [EOL] [EOL] def remove ( self , x ) : [EOL] return ListsRemoveRequest ( x ) [EOL] [EOL] def set ( self , x , i ) : [EOL] return ListsSetRequest ( x , i ) [EOL] [EOL] def index ( self , i ) : [EOL] return ListsIndexRequest ( i ) [EOL] [EOL] [comment] [EOL] def reset ( self ) : [EOL] self . xs = [ ] [EOL] [EOL] [comment] [EOL] def transition ( self , i ) : [EOL] if isinstance ( i , ListsLpushRequest ) : [EOL] self . xs = [ i . x ] + self . xs [EOL] return ListsLpushReply ( True ) [EOL] elif isinstance ( i , ListsLpopRequest ) : [EOL] if len ( self . xs ) == [number] : [EOL] return ListsLpopReply ( None ) [EOL] else : [EOL] return ListsLpopReply ( self . xs . pop ( [number] ) ) [EOL] elif isinstance ( i , ListsRpushRequest ) : [EOL] self . xs . append ( i . x ) [EOL] return ListsRpushReply ( True ) [EOL] elif isinstance ( i , ListsRpopRequest ) : [EOL] if len ( self . xs ) == [number] : [EOL] return ListsRpopReply ( None ) [EOL] else : [EOL] return ListsRpopReply ( self . xs . pop ( len ( self . xs ) - [number] ) ) [EOL] elif isinstance ( i , ListsRemoveRequest ) : [EOL] if i . x in self . xs : [EOL] self . xs . remove ( i . x ) [EOL] return ListsRemoveReply ( True ) [EOL] elif isinstance ( i , ListsSetRequest ) : [EOL] if [number] <= i . i < len ( self . xs ) : [EOL] del self . xs [ i . i ] [EOL] return ListsSetReply ( True ) [EOL] else : [EOL] return ListsSetReply ( False ) [EOL] elif isinstance ( i , ListsIndexRequest ) : [EOL] if [number] <= i . i < len ( self . xs ) : [EOL] return ListsIndexReply ( self . xs [ i . i ] ) [EOL] else : [EOL] return ListsIndexReply ( None ) [EOL] else : [EOL] raise ValueError ( f' [string] { i } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $ListsLpushRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $ListsLpopRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 $ListsRpushRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $ListsRpopRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 $ListsRemoveRequest$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $ListsSetRequest$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 $ListsIndexRequest$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $Output$ 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $Input$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 $Input$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 $Input$ 0 $Input$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $Input$ 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0 0 0 0 $Input$ 0 $Input$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $Input$ 0 $Input$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Input$ 0 0 0 0 0
import builtins [EOL] from typing import Tuple , List , Union [EOL] import typing [EOL] import wat [EOL] from typing import List [EOL] [EOL] from wat import * [EOL] [EOL] def print_provenance ( trace , provenance ) : [EOL] strings = [ f' [string] { j } [string] { i } [string] { o }' for j , ( i , o ) in enumerate ( trace ) ] [EOL] print ( [string] . join ( strings ) ) [EOL] [EOL] for t in provenance : [EOL] strings = [ f' [string] { j } [string] { i }' for j , i , _ in t ] [EOL] print ( f' [string] { [string] . join ( strings ) }' ) [EOL] print ( ) [EOL] def main ( ) : [EOL] k = Kvs ( ) [EOL] b = Bexpr ( ) [EOL] l = Lists ( ) [EOL] db = Db ( ) [EOL] [EOL] trace = k . run ( [ k . set ( [string] , [number] ) , k . set ( [string] , [number] ) , k . get ( [string] ) ] ) [EOL] print_provenance ( trace , wat ( k , trace , len ( trace ) - [number] ) ) [EOL] [EOL] trace = k . run ( [ k . set ( [string] , [number] ) , k . set ( [string] , [number] ) , k . set ( [string] , [number] ) , k . get ( [string] ) ] ) [EOL] print_provenance ( trace , wat ( k , trace , len ( trace ) - [number] ) ) [EOL] [EOL] trace = k . run ( [ k . set ( [string] , [number] ) , k . set ( [string] , [number] ) , k . get ( [string] ) ] ) [EOL] print_provenance ( trace , wat ( k , trace , len ( trace ) - [number] ) ) [EOL] [EOL] trace = k . run ( [ k . set ( [string] , [number] ) , k . add ( [string] , [number] ) , k . add ( [string] , - [number] ) , k . get ( [string] ) ] ) [EOL] print_provenance ( trace , wat ( k , trace , len ( trace ) - [number] ) ) [EOL] [EOL] av = Var ( [string] ) [EOL] bv = Var ( [string] ) [EOL] cv = Var ( [string] ) [EOL] dv = Var ( [string] ) [EOL] e = Or ( [ And ( [ av , dv ] ) , And ( [ bv , cv ] ) ] ) [EOL] trace = b . run ( [ b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . eval ( e ) ] ) [EOL] print_provenance ( trace , wat ( b , trace , len ( trace ) - [number] ) ) [EOL] [EOL] trace = l . run ( [ l . rpush ( [string] ) , l . rpush ( [string] ) , l . rpush ( [string] ) , l . lpush ( [string] ) , l . remove ( [string] ) , l . rpop ( ) , l . lpop ( ) , l . index ( [number] ) , ] ) [EOL] print_provenance ( trace , wat ( l , trace , len ( trace ) - [number] ) ) [EOL] [EOL] e = Or ( [ And ( [ Not ( bv ) , av , cv ] ) , dv ] ) [EOL] trace = b . run ( [ b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . eval ( e ) ] ) [EOL] print_provenance ( trace , wat ( b , trace , len ( trace ) - [number] ) ) [EOL] [EOL] e = And ( [ av , Or ( [ cv , dv ] ) ] ) [EOL] trace = b . run ( [ b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . set ( [string] ) , b . eval ( e ) ] ) [EOL] print_provenance ( trace , wat ( b , trace , len ( trace ) - [number] ) ) [EOL] [EOL] q = DbDiff ( DbRelation ( [string] ) , DbRelation ( [string] ) ) [EOL] trace = db . run ( [ db . create ( [string] , [number] ) , db . create ( [string] , [number] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . query ( q ) , ] ) [EOL] print_provenance ( trace , wat ( db , trace , len ( trace ) - [number] ) ) [EOL] [EOL] q = DbCup ( DbRelation ( [string] ) , DbDiff ( DbRelation ( [string] ) , DbRelation ( [string] ) ) ) [EOL] trace = db . run ( [ db . create ( [string] , [number] ) , db . create ( [string] , [number] ) , db . create ( [string] , [number] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . query ( q ) , ] ) [EOL] print_provenance ( trace , wat ( db , trace , len ( trace ) - [number] ) ) [EOL] [EOL] def leq3 ( t ) : [EOL] x , = t [EOL] return int ( x ) <= [number] [EOL] q = DbSelect ( DbDiff ( DbRelation ( [string] ) , DbRelation ( [string] ) ) , leq3 ) [EOL] trace = db . run ( [ db . create ( [string] , [number] ) , db . create ( [string] , [number] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . insert ( [string] , [ [string] ] ) , db . query ( q ) , ] ) [EOL] print_provenance ( trace , wat ( db , trace , len ( trace ) - [number] ) ) [EOL] [EOL] [comment] [EOL] def f ( t ) : [EOL] a_name , a_based , a_phone , e_name , e_dest , e_type , e_price = t [EOL] return a_name == e_name and e_type == [string] [EOL] Agencies = DbRelation ( [string] ) [EOL] ExternalTours = DbRelation ( [string] ) [EOL] q = DbProject ( DbSelect ( DbCross ( Agencies , ExternalTours ) , f ) , [ [number] , [number] ] ) [EOL] trace = db . run ( [ db . create ( [string] , [number] ) , db . create ( [string] , [number] ) , db . insert ( [string] , [ [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . insert ( [string] , [ [string] , [string] , [string] , [string] ] ) , db . query ( q ) , ] ) [EOL] print_provenance ( trace , wat ( db , trace , len ( trace ) - [number] ) ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
from typing import Dict , Tuple , List [EOL] import examples [EOL] import builtins [EOL] import typing [EOL] import wat [EOL] from typing import Dict , List [EOL] [EOL] from wat . wat import wat , Trace , EnumeratedTrace [EOL] from wat . white_box import Input , RecordId , Rule , WbRecord , WbRelation , WhiteBox [EOL] [EOL] def underline_print ( s ) : [EOL] print ( s ) [EOL] print ( [string] * len ( s ) ) [EOL] [EOL] def print_provenance ( trace , calculated_provenance , provenance ) : [EOL] strings = [ f' [string] { j } [string] { i } [string] { o }' for j , ( i , o ) in enumerate ( trace ) ] [EOL] underline_print ( [string] ) [EOL] print ( [string] . join ( strings ) ) [EOL] print ( ) [EOL] [EOL] underline_print ( [string] ) [EOL] for rid , t in calculated_provenance . items ( ) : [EOL] strings = [ f' [string] { j } [string] { i }' for j , i , _ in t ] [EOL] print ( f'{ rid . record }' ) [EOL] print ( f' [string] { [string] . join ( strings ) }' ) [EOL] print ( ) [EOL] [EOL] underline_print ( [string] ) [EOL] for t in provenance : [EOL] strings = [ f' [string] { j } [string] { i }' for j , i , _ in t ] [EOL] print ( f' [string] { [string] . join ( strings ) }' ) [EOL] print ( ) [EOL] print ( ) [EOL] [EOL] class Kvs ( WhiteBox ) : [EOL] def __init__ ( self ) : [EOL] WhiteBox . __init__ ( self ) [EOL] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] [EOL] kvs = WbRelation ( [string] ) [EOL] dont_clear = WbRelation ( [string] ) [EOL] get_req = WbRelation ( [string] ) [EOL] set_req = WbRelation ( [string] ) [EOL] clear_req = WbRelation ( [string] ) [EOL] dont_clear_req = WbRelation ( [string] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , ( kvs * get_req ) . select ( lambda r : r [ [number] ] == r [ [number] ] ) . project ( [ [number] ] ) ) ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , kvs - ( kvs * set_req ) . select ( lambda r : r [ [number] ] == r [ [number] ] ) . project ( [ [number] , [number] ] ) ) , Rule ( [string] , kvs + set_req ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , dont_clear_req ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , kvs - ( kvs - ( kvs * dont_clear ) . project ( [ [number] , [number] ] ) ) ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] [EOL] class SelfJoin ( WhiteBox ) : [EOL] def __init__ ( self ) : [EOL] WhiteBox . __init__ ( self ) [EOL] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] self . create_table ( [string] , [number] ) [comment] [EOL] [EOL] R = WbRelation ( [string] ) [EOL] insert_req = WbRelation ( [string] ) [EOL] query_req = WbRelation ( [string] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , R + insert_req ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , ( R * R ) . select ( lambda r : r [ [number] ] == r [ [number] ] ) . project ( [ [number] ] ) ) , ] ) [EOL] [EOL] class Tours ( WhiteBox ) : [EOL] def __init__ ( self ) : [EOL] WhiteBox . __init__ ( self ) [EOL] [EOL] self . create_table ( [string] , [number] ) [EOL] self . create_table ( [string] , [number] ) [EOL] self . create_table ( [string] , [number] ) [EOL] self . create_table ( [string] , [number] ) [EOL] self . create_table ( [string] , [number] ) [EOL] self . create_table ( [string] , [number] ) [EOL] [EOL] Agencies = WbRelation ( [string] ) [EOL] ExternalTours = WbRelation ( [string] ) [EOL] query_req = WbRelation ( [string] ) [EOL] cross_req = WbRelation ( [string] ) [EOL] insert_agencies_req = WbRelation ( [string] ) [EOL] insert_external_tours_req = WbRelation ( [string] ) [EOL] [EOL] def f ( t ) : [EOL] a_name , a_based , a_phone , e_name , e_dest , e_type , e_price = t [EOL] return a_name == e_name and e_type == [string] [EOL] self . register_rules ( [string] , [ Rule ( [string] , ( Agencies * ExternalTours ) . select ( f ) . project ( [ [number] , [number] ] ) ) ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , Agencies * ExternalTours ) ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , Agencies - insert_agencies_req ) , Rule ( [string] , Agencies + insert_agencies_req ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] self . register_rules ( [string] , [ Rule ( [string] , ExternalTours - insert_external_tours_req ) , Rule ( [string] , ExternalTours + insert_external_tours_req ) , Rule ( [string] , WbRecord ( ( [string] , ) ) ) , ] ) [EOL] [EOL] def main ( ) : [EOL] kvs = Kvs ( ) [EOL] trace = kvs . run ( [ Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , ) ) , ] ) [EOL] print_provenance ( trace , kvs . get_output_lineage ( len ( trace ) - [number] ) , wat ( kvs , trace , len ( trace ) - [number] ) ) [EOL] [EOL] [comment] [EOL] trace = kvs . run ( [ Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , ) ) , Input ( [string] , ( [string] , ) ) , Input ( [string] , ( [string] , ) ) , ] ) [EOL] print_provenance ( trace , kvs . get_output_lineage ( len ( trace ) - [number] ) , wat ( kvs , trace , len ( trace ) - [number] ) ) [EOL] [EOL] tours = Tours ( ) [EOL] trace = tours . run ( [ Input ( [string] , ( [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , ) ) , ] ) [EOL] print_provenance ( trace , tours . get_output_lineage ( len ( trace ) - [number] ) , wat ( tours , trace , len ( trace ) - [number] ) ) [EOL] [EOL] [comment] [EOL] tours = Tours ( ) [EOL] trace = tours . run ( [ Input ( [string] , ( [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , [string] , [string] , [string] ) ) , Input ( [string] , ( [string] , ) ) , ] ) [EOL] print_provenance ( trace , tours . get_output_lineage ( len ( trace ) - [number] ) , wat ( tours , trace , len ( trace ) - [number] ) ) [EOL] [EOL] [comment] [EOL] self_join = SelfJoin ( ) [EOL] trace = self_join . run ( [ Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , [string] ) ) , Input ( [string] , ( [string] , ) ) , ] ) [EOL] print_provenance ( trace , self_join . get_output_lineage ( len ( trace ) - [number] ) , wat ( self_join , trace , len ( trace ) - [number] ) ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 $wat.white_box.WbRelation$ 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 $wat.white_box.WbRelation$ 0 $wat.white_box.WbRelation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0