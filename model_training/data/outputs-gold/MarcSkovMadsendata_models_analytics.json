	0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DocsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf import settings [EOL] from django . urls import path , re_path [EOL] from django . views . static import serve [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , serve , { [string] : settings . DOCS_ROOT , [string] : [string] } ) , re_path ( [string] , serve , { [string] : settings . DOCS_ROOT } ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [ [string] ] , [ ( [string] , ) , ( [string] , ) ] ) def test_docs ( client , url ) : [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import List , Dict , Any , Tuple [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] from recommonmark . parser import CommonMarkParser [EOL] source_parsers = { [string] : CommonMarkParser } [EOL] [EOL] [comment] [EOL] source_suffix = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( [string] , [string] , [string] , [string] , [string] , ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( [string] , [string] , [string] , [ [string] ] , [number] , ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = True	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] AUTHOR = [string] [EOL] SITENAME = [string] [EOL] SITEURL = [string] [EOL] PORT = [number] [EOL] [EOL] PATH = [string] [EOL] [EOL] TIMEZONE = [string] [EOL] [EOL] DEFAULT_LANG = [string] [EOL] [EOL] [comment] [EOL] FEED_ALL_ATOM = None [EOL] CATEGORY_FEED_ATOM = None [EOL] TRANSLATION_FEED_ATOM = None [EOL] AUTHOR_FEED_ATOM = None [EOL] AUTHOR_FEED_RSS = None [EOL] [EOL] [comment] [EOL] LINKS = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [comment] [EOL] SOCIAL = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] DEFAULT_PAGINATION = [number] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Union [EOL] import typing [EOL] import os [EOL] import shutil [EOL] import sys [EOL] import datetime [EOL] [EOL] from invoke import task [EOL] from invoke . util import cd [EOL] from pelican . server import ComplexHTTPRequestHandler , RootedHTTPServer [EOL] [EOL] CONFIG = { [string] : [string] , [string] : [number] , } [EOL] [EOL] [EOL] @ task def clean ( c ) : [EOL] [docstring] [EOL] if os . path . isdir ( CONFIG [ [string] ] ) : [EOL] shutil . rmtree ( CONFIG [ [string] ] ) [EOL] os . makedirs ( CONFIG [ [string] ] ) [EOL] [EOL] [EOL] @ task def build ( c ) : [EOL] [docstring] [EOL] c . run ( [string] ) [EOL] [EOL] [EOL] @ task def rebuild ( c ) : [EOL] [docstring] [EOL] c . run ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ task def livereload ( c ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] c . run ( [string] ) [EOL] [EOL] [EOL] @ task def publish ( c ) : [EOL] [docstring] [EOL] c . run ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import urllib [EOL] import typing [EOL] [docstring] [EOL] [EOL] try : [EOL] from urllib . parse import urlparse [EOL] except ImportError : [EOL] from urlparse import urlparse [EOL] [EOL] from livereload import Server , shell [EOL] from pelican import Pelican [EOL] from pelican . settings import read_settings [EOL] [EOL] [EOL] settings = read_settings ( [string] ) [EOL] p = Pelican ( settings ) [EOL] [EOL] def compile ( ) : [EOL] try : [EOL] p . run ( ) [EOL] except SystemExit as e : [EOL] pass [EOL] [EOL] server = Server ( ) [EOL] server . watch ( p . settings [ [string] ] , compile ) [EOL] server . watch ( p . settings [ [string] ] , compile ) [EOL] server . watch ( [string] , compile ) [EOL] [EOL] host_port = p . settings . get ( [string] ) or [string] [EOL] details = urlparse ( host_port ) [EOL] host , port = details [ [number] ] . split ( [string] ) [EOL] [EOL] server . serve ( host = host , port = port , root = settings [ [string] ] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . append ( os . curdir ) [EOL] from pelicanconf import * [EOL] [EOL] [comment] [EOL] SITEURL = [string] [comment] [EOL] RELATIVE_URLS = True [EOL] [EOL] FEED_ALL_ATOM = [string] [EOL] CATEGORY_FEED_ATOM = [string] [EOL] [EOL] DELETE_OUTPUT_DIRECTORY = True [EOL] OUTPUT_PATH = [string] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , url = [string] , author = [string] , author_email = [string] , license = [string] , packages = [ [string] ] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , zip_safe = False , ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
print ( [string] ) [EOL]	0 0 0 0 0
from typing import Dict , Any , List , Optional [EOL] import builtins [EOL] import typing [EOL] import pandas [EOL] import pytz [EOL] import datetime [EOL] [docstring] [EOL] import pathlib [EOL] from typing import Optional , List , Dict [EOL] [EOL] import pandas [EOL] import requests [EOL] from datetime import datetime , date [EOL] import pytz [EOL] [EOL] [EOL] class ETLTable ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , io , schema , timezone , dataframe = None , Model = None ) : [EOL] [docstring] [EOL] self . io = io [EOL] self . schema = schema [EOL] self . timezone = timezone [EOL] self . dataframe = dataframe [EOL] self . Model = Model [EOL] [EOL] [comment] [EOL] [EOL] def to_datetime ( self , value ) : [EOL] [docstring] [EOL] if value is None or pandas . isnull ( value ) : [EOL] return None [EOL] elif isinstance ( value , pandas . Timestamp ) : [EOL] return value . to_pydatetime ( ) . astimezone ( self . timezone ) [EOL] else : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def to_date ( self , value ) : [EOL] [docstring] [EOL] if value is None or pandas . isnull ( value ) : [EOL] return None [EOL] elif isinstance ( value , pandas . Timestamp ) : [EOL] return value . date ( ) [EOL] else : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def to_str ( self , value ) : [EOL] [docstring] [EOL] if value is None or pandas . isnull ( value ) : [EOL] return None [EOL] else : [EOL] return str ( value ) [EOL] [EOL] def to_float ( self , value ) : [EOL] [docstring] [EOL] if value is None or pandas . isnull ( value ) : [EOL] return None [EOL] if isinstance ( value , float ) : [EOL] return value [EOL] else : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def to_dicts ( self ) : [EOL] [docstring] [EOL] [EOL] rows = self . dataframe . to_dict ( orient = [string] ) [EOL] [EOL] return rows [EOL] [EOL] def to_models ( self ) : [EOL] [docstring] [EOL] return [ self . Model ( ** row ) for row in self . to_dicts ( ) ] [EOL] [EOL] def to_dataframe ( self ) : [EOL] [docstring] [EOL] [EOL] return self . dataframe . copy ( deep = True ) [EOL] [EOL] [comment] [EOL] [EOL] def extract ( self ) : [EOL] [docstring] [EOL] self . dataframe = pandas . read_excel ( io = self . io ) [EOL] [EOL] return self [EOL] [EOL] def transform ( self ) : [EOL] [docstring] [EOL] SOURCE_COLUMNS_TO_KEEP = [ column [ [string] ] for column in self . schema if [string] in column ] [EOL] SOURCE_COLUMNS_TO_TARGET_COLUMNS_DICT = { column [ [string] ] : column [ [string] ] for column in self . schema if [string] in column } [EOL] TARGET_DTYPES = { column [ [string] ] : column [ [string] ] for column in self . schema if [string] in column } [EOL] [EOL] self . dataframe = ( self . dataframe [ SOURCE_COLUMNS_TO_KEEP ] . rename ( index = str , columns = SOURCE_COLUMNS_TO_TARGET_COLUMNS_DICT ) . astype ( TARGET_DTYPES ) ) [EOL] [EOL] return self [EOL] [EOL] def load ( self ) : [EOL] [docstring] [EOL] [EOL] raise NotImplementedError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'ETLTable'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'ETLTable'$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pathlib [EOL] import sys [EOL] from pathlib import Path [EOL] [EOL] [comment] [EOL] PACKAGE = [string] [EOL] [EOL] [comment] [EOL] PATH_TO_SRC = Path ( [string] ) . resolve ( ) [EOL] print ( [string] ) [EOL] if not PATH_TO_SRC . exists ( ) : [EOL] PATH_TO_SRC = Path ( [string] ) . resolve ( ) [EOL] if not PATH_TO_SRC . exists ( ) : [EOL] raise ModuleNotFoundError ( [string] ) [EOL] [EOL] [comment] [EOL] PATH_TO_PACKAGE_REQUIREMENTS_FILE = PATH_TO_SRC / PACKAGE / [string] [EOL] if not PATH_TO_PACKAGE_REQUIREMENTS_FILE . exists ( ) : [EOL] raise FileNotFoundError ( [string] ) [EOL] [EOL] [comment] [EOL] sys . path . insert ( [number] , str ( PATH_TO_SRC ) ) [EOL] [EOL] [comment] [EOL] print ( f""" [string] { PACKAGE } [string] { PATH_TO_SRC } [string] { PACKAGE } [string] { PACKAGE } [string] { PATH_TO_SRC } [string] { PATH_TO_PACKAGE_REQUIREMENTS_FILE } [string] { PATH_TO_PACKAGE_REQUIREMENTS_FILE } [string] """ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0
[comment] [EOL] import data_models_analytics_path [EOL] [comment] [EOL] from data_models_analytics import * [EOL] [EOL] [EOL] def run ( ) : [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0