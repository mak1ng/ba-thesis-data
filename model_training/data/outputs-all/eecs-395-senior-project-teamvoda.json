from django . core . management . utils import get_random_secret_key [EOL] [EOL] print ( get_random_secret_key ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] [EOL] [docstring] [EOL] urlpatterns = [ path ( [string] , views . root , name = [string] ) , path ( [string] , views . debug , name = [string] ) , path ( [string] , views . map_endpoint , name = [string] ) , path ( [string] , views . summary , name = [string] ) , path ( [string] , views . contaminants , name = [string] ) , path ( [string] , views . contaminant_info , name = [string] ) , path ( [string] , views . search , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Set , Optional , Union [EOL] import typing [EOL] [docstring] [EOL] [comment] [EOL] from django . http import HttpResponse , HttpResponseBadRequest , JsonResponse [EOL] from . models import Sources , SourceLevels [EOL] import traceback [EOL] [EOL] [EOL] def root ( request ) : [EOL] [docstring] [EOL] return HttpResponse ( [string] ) [EOL] [EOL] [EOL] def map_endpoint ( request ) : [EOL] [docstring] [EOL] largest_source_by_county = Sources . objects . order_by ( [string] , [string] ) . distinct ( [string] ) [EOL] scores = { } [EOL] source_ids = { } [EOL] for q_set in largest_source_by_county : [EOL] scores [ q_set . county . id ] = q_set . rating [EOL] source_ids [ q_set . county . id ] = q_set . source_id [EOL] response = { [string] : scores , [string] : source_ids } [EOL] return JsonResponse ( response ) [EOL] [EOL] [EOL] def summary ( request ) : [EOL] [docstring] [EOL] supply_id = request . GET . get ( [string] ) [EOL] try : [EOL] source = Sources . objects . get ( source_id = supply_id ) [EOL] source_levels = source . sourcelevels_set . all ( ) [EOL] red_set = [ ] [EOL] yellow_set = [ ] [EOL] green_set = [ ] [EOL] for source_level in source_levels : [EOL] if source_level . contaminant_level : [EOL] contaminant = source_level . contaminant [EOL] if contaminant . legal_limit : [EOL] if source_level . contaminant_level > contaminant . legal_limit : [EOL] red_set . append ( contaminant ) [EOL] if contaminant . health_guideline : [EOL] if source_level . contaminant_level > contaminant . health_guideline : [EOL] yellow_set . append ( contaminant ) [EOL] if contaminant . legal_limit and contaminant . health_guideline : [EOL] if source_level . contaminant_level <= contaminant . health_guideline and source_level . contaminant_level <= contaminant . legal_limit : [EOL] green_set . append ( contaminant ) [EOL] legal_limit_concerns = set ( ) [EOL] for contaminant in red_set : [EOL] if contaminant . health_concerns : [EOL] for concern in contaminant . health_concerns . splitlines ( ) : [EOL] formatted_concern = concern . strip ( ) . capitalize ( ) [EOL] if formatted_concern not in legal_limit_concerns and formatted_concern != [string] : [EOL] legal_limit_concerns . add ( formatted_concern ) [EOL] health_guidelines_concerns = set ( ) [EOL] for contaminant in yellow_set : [EOL] if contaminant . health_concerns : [EOL] for concern in contaminant . health_concerns . splitlines ( ) : [EOL] formatted_concern = concern . strip ( ) . capitalize ( ) [EOL] if formatted_concern not in health_guidelines_concerns and formatted_concern != [string] : [EOL] health_guidelines_concerns . add ( formatted_concern ) [EOL] response = { [string] : list ( legal_limit_concerns ) , [string] : list ( health_guidelines_concerns ) , [string] : len ( red_set ) , [string] : len ( yellow_set ) , [string] : len ( green_set ) , } [EOL] return JsonResponse ( response ) [EOL] except Exception as e : [EOL] traceback . print_exc ( ) [EOL] return HttpResponseBadRequest ( [number] ) [EOL] [EOL] [EOL] def contaminants ( request ) : [EOL] supply_id = request . GET . get ( [string] ) [EOL] try : [EOL] source = Sources . objects . get ( source_id = supply_id ) [EOL] source_levels = source . sourcelevels_set . all ( ) [EOL] red_set = [ ] [EOL] yellow_set = [ ] [EOL] green_set = [ ] [EOL] for source_level in source_levels : [EOL] if source_level . contaminant_level : [EOL] contaminant = source_level . contaminant [EOL] if contaminant . legal_limit : [EOL] if source_level . contaminant_level > contaminant . legal_limit : [EOL] red_set . append ( contaminant . contaminant_name ) [EOL] if contaminant . health_guideline : [EOL] if source_level . contaminant_level > contaminant . health_guideline : [EOL] yellow_set . append ( contaminant . contaminant_name ) [EOL] if contaminant . legal_limit and contaminant . health_guideline : [EOL] if source_level . contaminant_level <= contaminant . health_guideline and source_level . contaminant_level <= contaminant . legal_limit : [EOL] green_set . append ( contaminant . contaminant_name ) [EOL] contaminant_list = { [string] : red_set , [string] : yellow_set , [string] : green_set } [EOL] return JsonResponse ( contaminant_list ) [EOL] except Exception : [EOL] traceback . print_exc ( ) [EOL] return HttpResponseBadRequest ( [number] ) [EOL] [EOL] [EOL] def contaminant_info ( request ) : [EOL] supply_id = request . GET . get ( [string] ) [EOL] contaminant_name = request . GET . get ( [string] ) [EOL] try : [EOL] source_level = SourceLevels . objects . filter ( source = supply_id ) . get ( contaminant__contaminant_name = contaminant_name ) [EOL] amount_in_water = round ( float ( source_level . contaminant_level ) , [number] ) if source_level . contaminant_level else None [EOL] health_guideline = round ( float ( source_level . contaminant . health_guideline ) , [number] ) if source_level . contaminant . health_guideline else None [EOL] legal_limit = round ( float ( source_level . contaminant . legal_limit ) , [number] ) if source_level . contaminant . legal_limit else None [EOL] details = source_level . contaminant . summary . strip ( ) if source_level . contaminant . summary else None [EOL] health_risks = source_level . contaminant . long_health_concerns . strip ( ) if source_level . contaminant . long_health_concerns else None [EOL] contaminant_details = { [string] : amount_in_water , [string] : health_guideline , [string] : legal_limit , [string] : details , [string] : health_risks } [EOL] return JsonResponse ( contaminant_details ) [EOL] except Exception as e : [EOL] traceback . print_exc ( ) [EOL] return HttpResponseBadRequest ( [number] ) [EOL] [EOL] [EOL] def search ( request ) : [EOL] query = request . GET . get ( [string] ) [EOL] try : [EOL] split_query = query . split ( [string] ) [EOL] response = { } [EOL] if len ( split_query ) == [number] : [EOL] county , state = split_query [EOL] county = county . strip ( ) . capitalize ( ) [EOL] state = state . strip ( ) . upper ( ) [EOL] source_query = Sources . objects . order_by ( [string] , [string] ) . distinct ( [string] ) . filter ( county__name = county ) . filter ( state = state ) [EOL] if source_query : [EOL] response [ [string] ] = [string] [EOL] response [ [string] ] = { [string] : county , [string] : source_query [ [number] ] . source_id } [EOL] else : [EOL] source_query = Sources . objects . order_by ( [string] , [string] ) . distinct ( [string] ) [EOL] response [ [string] ] = { } [EOL] for q in source_query : [EOL] sourcelevel_query = q . sourcelevels_set . filter ( contaminant__contaminant_name = query ) [EOL] if sourcelevel_query and sourcelevel_query [ [number] ] . contaminant_level : [EOL] response [ [string] ] [ q . county . id ] = round ( float ( sourcelevel_query [ [number] ] . contaminant_level ) , [number] ) [EOL] if response [ [string] ] : [EOL] response [ [string] ] = [string] [EOL] if [string] not in response : [EOL] return HttpResponseBadRequest ( [number] ) [EOL] return JsonResponse ( response ) [EOL] except Exception as e : [EOL] traceback . print_exc ( ) [EOL] return HttpResponseBadRequest ( [number] ) [EOL] [EOL] [EOL] def debug ( request ) : [EOL] [docstring] [EOL] response = { [string] : { [string] : request . get_host ( ) , [string] : request . method , [string] : request . GET , [string] : request . POST , } } [EOL] return JsonResponse ( response ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] [comment] [EOL] class States ( models . Model ) : [EOL] state_id = models . CharField ( max_length = [number] , primary_key = True ) [EOL] [EOL] [EOL] class Counties ( models . Model ) : [EOL] id = models . CharField ( max_length = [number] , primary_key = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] state = models . ForeignKey ( States , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Cities ( models . Model ) : [EOL] id = models . AutoField ( primary_key = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] state = models . ForeignKey ( States , on_delete = models . CASCADE ) [EOL] county = models . ForeignKey ( Counties , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class Sources ( models . Model ) : [EOL] source_id = models . AutoField ( primary_key = True ) [EOL] utility_name = models . CharField ( max_length = [number] ) [EOL] city = models . ForeignKey ( Cities , on_delete = models . CASCADE , null = True , db_column = [string] ) [EOL] state = models . ForeignKey ( States , on_delete = models . CASCADE , null = True , db_column = [string] ) [EOL] county = models . ForeignKey ( Counties , on_delete = models . CASCADE , null = True , db_column = [string] ) [EOL] number_served = models . IntegerField ( ) [EOL] rating = models . FloatField ( null = True ) [EOL] url = models . TextField ( null = True ) [EOL] [EOL] [EOL] class Contaminants ( models . Model ) : [EOL] contaminant_id = models . AutoField ( primary_key = True ) [EOL] contaminant_name = models . CharField ( max_length = [number] ) [EOL] health_guideline = models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) [EOL] legal_limit = models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) [EOL] national_avg = models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) [EOL] summary = models . TextField ( null = True ) [EOL] health_concerns = models . TextField ( null = True ) [EOL] long_health_concerns = models . TextField ( null = True ) [EOL] [EOL] [EOL] class SourceLevels ( models . Model ) : [EOL] source = models . ForeignKey ( Sources , on_delete = models . CASCADE ) [EOL] contaminant = models . ForeignKey ( Contaminants , on_delete = models . CASCADE ) [EOL] contaminant_level = models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) [EOL] [EOL] [EOL] class StateAvgLevels ( models . Model ) : [EOL] state = models . ForeignKey ( States , on_delete = models . CASCADE ) [EOL] contaminant = models . ForeignKey ( Contaminants , on_delete = models . CASCADE ) [EOL] state_avg = models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.States]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Counties]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Counties]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Counties]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Cities]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Cities]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Cities]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Cities]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Sources]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.Contaminants]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.SourceLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.SourceLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.SourceLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.StateAvgLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.StateAvgLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.vodabackend.vodaMainApp.models.StateAvgLevels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class VodaMainAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from vodabackend . vodaMainApp . views import summary [EOL] import pytest [EOL] [EOL] [EOL] requestWithSource = [string] [EOL] requestNoSource = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_summary_status_code_with_soure ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestWithSource ) [EOL] response = summary ( request ) [EOL] assert response . status_code == [number] [EOL] [EOL] @ pytest . mark . django_db def test_summary_content ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestWithSource ) [EOL] response = summary ( request ) [EOL] assert response . content == [string] [EOL] [EOL] [EOL] def test_summary_status_code_no_soure ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestNoSource ) [EOL] response = summary ( request ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from vodabackend . vodaMainApp . views import details [EOL] [EOL] [comment] [EOL] requestWithSource = [string] [EOL] requestNoSource = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_details_status_code_with_soure ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestWithSource ) [EOL] response = details ( request ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_details_content_with_source ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestWithSource ) [EOL] response = details ( request ) [EOL] assert response . content == [string] [EOL] [EOL] [EOL] def test_details_details_code_no_soure ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( requestNoSource ) [EOL] response = details ( request ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from vodabackend . vodaMainApp . views import debug [EOL] [EOL] [EOL] def test_debug ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( [string] ) [EOL] response = debug ( request ) [EOL] expected_response = [string] . join ( [ [string] , [string] ] ) [EOL] print ( expected_response ) [EOL] assert response . content == expected_response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . core . management import call_command [EOL] from django . test import TestCase [EOL] from vodabackend . vodaMainApp . views import map_endpoint [EOL] from vodabackend . vodaMainApp . models import State , Sources , Contaminants , SourceLevels , StateAvgLevels [EOL] import pytest [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] mapRequest = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def request_map ( ) : [EOL] [docstring] [EOL] [comment] [EOL] return requests . get ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def django_db_setup ( django_db_setup , django_db_blocker ) : [EOL] [EOL] with django_db_blocker . unblock ( ) : [EOL] call_command ( [string] , [string] ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . mark . django_db def test_map_status_code ( rf ) : [EOL] [docstring] [EOL] [EOL] request = rf . get ( mapRequest ) [EOL] response = map_endpoint ( request ) [EOL] assert response . status_code == [number] [EOL] [EOL] @ pytest . mark . django_db def test_map_content ( rf ) : [EOL] [docstring] [EOL] [EOL] request = rf . get ( mapRequest ) [EOL] response = map_endpoint ( request ) [EOL] [EOL] assert response . content == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from vodabackend . vodaMainApp . views import root [EOL] [EOL] [EOL] def test_root ( rf ) : [EOL] [docstring] [EOL] request = rf . get ( [string] ) [EOL] response = root ( request ) [EOL] assert response . content == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL]	0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import include , path [EOL] from django . contrib import admin [EOL] from django . views import defaults as default_views [EOL] [EOL] [docstring] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( settings . ADMIN_URL , admin . site . urls ) , ] [EOL] [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . server_error ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from config . settings . base import * [comment] [EOL] from config . settings . base import env [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DEBUG = True [EOL] SECRET_KEY = env ( [string] , default = [string] ) [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] INSTALLED_APPS += [ [string] , [string] ] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from config . settings . base import * [comment] [EOL] from config . settings . base import env [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DEBUG = False [EOL] SECRET_KEY = env ( [string] , default = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Tuple , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import environ [EOL] [EOL] ROOT_DIR = environ . Path ( __file__ ) - [number] [comment] [EOL] APPS_DIR = ROOT_DIR . path ( [string] ) [EOL] [EOL] env = environ . Env ( ) [EOL] [EOL] READ_DOT_ENV_FILE = env . bool ( [string] , default = False ) [EOL] if READ_DOT_ENV_FILE : [EOL] [comment] [EOL] env . read_env ( str ( ROOT_DIR . path ( [string] ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DEBUG = env . bool ( [string] , False ) [EOL] [comment] [EOL] TIME_ZONE = [string] [EOL] [comment] [EOL] LANGUAGE_CODE = [string] [EOL] [comment] [EOL] USE_I18N = True [EOL] [comment] [EOL] USE_L10N = True [EOL] [comment] [EOL] USE_TZ = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DATABASES = { [string] : env . db ( [string] ) , } [EOL] DATABASES [ [string] ] [ [string] ] = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ROOT_URLCONF = [string] [EOL] [comment] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] DJANGO_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] THIRD_PARTY_APPS = [ ] [EOL] LOCAL_APPS = [ [string] ] [EOL] [comment] [EOL] INSTALLED_APPS = LOCAL_APPS + DJANGO_APPS + THIRD_PARTY_APPS [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] STATIC_ROOT = str ( ROOT_DIR ( [string] ) ) [EOL] [comment] [EOL] STATIC_URL = [string] [EOL] [comment] [EOL] STATICFILES_DIRS = [ str ( APPS_DIR . path ( [string] ) ) , ] [EOL] [comment] [EOL] STATICFILES_FINDERS = [ [string] , [string] , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ str ( APPS_DIR . path ( [string] ) ) , ] , [string] : { [string] : DEBUG , [string] : [ [string] , [string] , ] , [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ADMIN_URL = [string] [EOL] [comment] [EOL] ADMINS = [ ( [string] , [string] ) , ] [EOL] [comment] [EOL] MANAGERS = ADMINS [EOL] [EOL] CORS_ORIGIN_WHITELIST = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],typing.List[typing.Any],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from vodadata . getContaminantsScraper import FindContaminants [EOL] from vodadata . contaminantInfoScraper import FindContInfo [EOL] from vodadata . findUtilitiesScraper import FindUtilities [EOL] from vodadata . utilityInfoScraper import FindUtilInfo [EOL] from vodadata . sourceLevelScraper import FindSourceLevels [EOL] from vodadata . calculateSourceRating import CalculateSourceRating [EOL] from twisted . internet import reactor , defer [EOL] from scrapy . crawler import CrawlerRunner [EOL] from vodadata . getLocaleData import GetLocaleData [EOL] from vodadata . leadInfoScraper import LeadInfoScraper [EOL] import psycopg2 [EOL] import os [EOL] import traceback [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] RUNNER = CrawlerRunner ( ) [EOL] [EOL] DBNAME = os . environ [ [string] ] [EOL] USER = os . environ [ [string] ] [EOL] PASSWORD = os . environ [ [string] ] [EOL] HOST = os . environ [ [string] ] [EOL] PORT = os . environ [ [string] ] [EOL] [EOL] CONNECTION = psycopg2 . connect ( dbname = DBNAME , user = USER , password = PASSWORD , host = HOST , port = PORT ) [EOL] CONNECTION . set_session ( autocommit = True ) [EOL] [EOL] print ( [string] + str ( CONNECTION . closed ) ) [comment] [EOL] [EOL] def clearData ( ) : [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] try : [EOL] cursor = CONNECTION . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] @ defer . inlineCallbacks def crawl ( ) : [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] yield RUNNER . crawl ( FindContaminants ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] yield RUNNER . crawl ( FindContInfo , CONNECTION ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] yield RUNNER . crawl ( FindUtilities ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] yield RUNNER . crawl ( FindUtilInfo , CONNECTION ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] yield RUNNER . crawl ( FindSourceLevels , CONNECTION ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] yield RUNNER . crawl ( LeadInfoScraper , CONNECTION ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] reactor . stop ( ) [EOL] [EOL] [comment] [EOL] clearData ( ) [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] get_locale_data = GetLocaleData ( CONNECTION ) [EOL] get_locale_data . main ( ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] crawl ( ) [EOL] reactor . run ( ) [comment] [EOL] [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] calculate_source_rating = CalculateSourceRating ( CONNECTION ) [EOL] calculate_source_rating . main ( ) [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from vodadata . contaminantInfoScraper import FindContInfo [EOL] [EOL] [EOL] def test_try_parse_float_none ( ) : [EOL] float = FindContInfo . try_parse_float ( None ) [EOL] assert float is None [EOL] [EOL] [EOL] def test_try_parse_float_nd ( ) : [EOL] float = FindContInfo . try_parse_float ( [string] ) [EOL] assert float == [number] [EOL] [EOL] [EOL] def test_try_parse_float_commas ( ) : [EOL] float = FindContInfo . try_parse_float ( [string] ) [EOL] assert float == [number] [EOL] [EOL] [EOL] def test_try_parse_float_nominal ( ) : [EOL] float = FindContInfo . try_parse_float ( [number] ) [EOL] assert float == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import requests [EOL] import typing [EOL] import requests [EOL] import os [EOL] import psycopg2 [EOL] from scrapy . http import TextResponse , Request [EOL] from vodadata . getContaminantsScraper import FindContaminants [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def file_len ( file_name ) : [EOL] with open ( file_name ) as f : [EOL] i = - [number] [EOL] for i , l in enumerate ( f ) : [EOL] pass [EOL] return i + [number] [EOL] [EOL] [EOL] def online_response_from_url ( url = None ) : [EOL] [EOL] if not url : [EOL] url = [string] [EOL] [EOL] request = Request ( url = url ) [EOL] original_resp = requests . get ( url ) [EOL] response = TextResponse ( url = url , request = request , body = original_resp . text , encoding = [string] ) [EOL] [EOL] return response [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_get_contaminants_parse ( ) : [EOL] url = [string] [EOL] DBNAME = os . environ [ [string] ] [EOL] USER = os . environ [ [string] ] [EOL] PASSWORD = os . environ [ [string] ] [EOL] HOST = os . environ [ [string] ] [EOL] PORT = os . environ [ [string] ] [EOL] [EOL] CONNECTION = psycopg2 . connect ( dbname = DBNAME , user = USER , password = PASSWORD , host = HOST , port = PORT ) [EOL] CONNECTION . set_session ( autocommit = True ) [EOL] [EOL] spider = FindContaminants ( CONNECTION ) [EOL] spider . parse ( online_response_from_url ( url = url ) ) [EOL] flen = file_len ( [string] ) [EOL] assert flen == [number] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from vodadata . calculateSourceRating import CalculateSourceRating [EOL] import os [EOL] import psycopg2 [EOL] [EOL] [EOL] def test_size_std_dev_dict ( ) : [EOL] func = CalculateSourceRating ( ) [EOL] CalculateSourceRating . collect_contaminants_stdev ( func ) [EOL] assert len ( func . contaminant_std_dev_dict ) == [number] [EOL] [EOL] [EOL] def test_size_nat_avg_dict ( ) : [EOL] func = CalculateSourceRating ( ) [EOL] CalculateSourceRating . collect_contaminant_nat_avgs ( func ) [EOL] assert len ( func . contaminant_nat_avg_dict ) == [number] [EOL] [EOL] [EOL] def test_amount_above_avg ( ) : [EOL] func = CalculateSourceRating ( ) [EOL] CalculateSourceRating . collect_contaminant_nat_avgs ( func ) [EOL] amt_abv_avg = CalculateSourceRating . amount_above_avg ( func , ( [number] , [number] , [number] ) ) [EOL] expected = [number] - [number] [EOL] assert amt_abv_avg == expected [EOL] [EOL] [EOL] def test_amount_to_add ( ) : [EOL] [EOL] DBNAME = os . environ [ [string] ] [EOL] USER = os . environ [ [string] ] [EOL] PASSWORD = os . environ [ [string] ] [EOL] HOST = os . environ [ [string] ] [EOL] PORT = os . environ [ [string] ] [EOL] [EOL] CONNECTION = psycopg2 . connect ( dbname = DBNAME , user = USER , password = PASSWORD , host = HOST , port = PORT ) [EOL] CONNECTION . set_session ( autocommit = True ) [EOL] [EOL] func = CalculateSourceRating ( CONNECTION ) [EOL] CalculateSourceRating . collect_contaminant_nat_avgs ( func ) [EOL] CalculateSourceRating . collect_contaminants_stdev ( func ) [EOL] amt_abv_avg = CalculateSourceRating . amount_above_avg ( func , ( [number] , [number] , [number] ) ) [EOL] amt_to_add = CalculateSourceRating . amount_to_add ( func , ( [number] , [number] , [number] ) , amt_abv_avg ) [EOL] [comment] [EOL] [comment] [EOL] expected = [number] / [number] [EOL] assert amt_to_add == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import scrapy [EOL] [EOL] [EOL] class FindContaminants ( scrapy . Spider ) : [EOL] name = [string] [EOL] [EOL] def start_requests ( self ) : [EOL] open ( [string] , [string] ) . close ( ) [EOL] url = [string] [EOL] yield scrapy . Request ( url = url , callback = self . parse ) [EOL] [EOL] @ staticmethod def parse ( response ) : [EOL] try : [EOL] info = response . xpath ( [string] ) . getall ( ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] for item in info : [EOL] f . write ( [string] . format ( item ) ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import _csv [EOL] import typing [EOL] import scrapy [EOL] import csv [EOL] import traceback [EOL] [EOL] [EOL] class FindUtilities ( scrapy . Spider ) : [EOL] name = [string] [EOL] [EOL] def start_requests ( self ) : [EOL] open ( [string] , [string] ) . close ( ) [EOL] with open ( [string] , encoding = [string] ) as csv_file : [EOL] csv_reader = csv . reader ( csv_file , delimiter = [string] ) [EOL] [EOL] for row in csv_reader : [EOL] url = [string] . format ( row [ [number] ] ) [EOL] yield scrapy . Request ( url = url , callback = self . parse ) [EOL] [EOL] def parse ( self , response ) : [EOL] try : [EOL] info = response . xpath ( [string] ) . getall ( ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] for item in info : [EOL] f . write ( [string] . format ( item ) ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import webscraper [EOL] import typing [EOL] import psycopg2 [EOL] import signal [EOL] import sys [EOL] import traceback [EOL] [EOL] [EOL] class CalculateSourceRating : [EOL] contaminant_std_dev_dict = { } [EOL] contaminant_nat_avg_dict = { } [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def collect_contaminants_stdev ( self ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] for contaminant in cursor : [EOL] sub_cursor = self . connection . cursor ( ) [EOL] sub_cursor . execute ( [string] , ( contaminant [ [number] ] , ) ) [EOL] self . contaminant_std_dev_dict [ contaminant [ [number] ] ] = sub_cursor . fetchone ( ) [EOL] sub_cursor . close ( ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def collect_contaminant_nat_avgs ( self ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] ) [EOL] for contaminant in cursor : [EOL] self . contaminant_nat_avg_dict [ contaminant [ [number] ] ] = contaminant [ [number] ] [EOL] cursor . close ( ) [EOL] [EOL] except Exception as e : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def amount_above_avg ( self , cont ) : [EOL] try : [EOL] if self . contaminant_nat_avg_dict [ cont [ [number] ] ] is None : [EOL] return [number] [EOL] else : [EOL] return cont [ [number] ] - self . contaminant_nat_avg_dict [ cont [ [number] ] ] [EOL] except Exception as e : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def amount_to_add ( self , cont , amt_above_average ) : [EOL] if self . contaminant_std_dev_dict [ cont [ [number] ] ] [ [number] ] is not None : [EOL] if amt_above_average is None : [EOL] return [number] [EOL] if self . contaminant_std_dev_dict . get ( cont [ [number] ] ) [ [number] ] != [number] : [EOL] amount_to_add = amt_above_average / self . contaminant_std_dev_dict . get ( cont [ [number] ] ) [ [number] ] [EOL] else : [EOL] amount_to_add = amt_above_average [EOL] return amount_to_add [EOL] [EOL] def find_scores ( self ) : [EOL] source_cursor = self . connection . cursor ( ) [EOL] source_cursor . execute ( [string] ) [EOL] for source in source_cursor : [EOL] rating = [number] [EOL] cont_cursor = self . connection . cursor ( ) [EOL] cont_cursor . execute ( [string] [string] , ( source [ [number] ] , ) ) [EOL] for cont in cont_cursor : [EOL] [comment] [EOL] [EOL] if cont [ [number] ] is not None : [EOL] [comment] [EOL] amount_above_average = self . amount_above_avg ( cont ) [EOL] amt_to_add = self . amount_to_add ( cont , amount_above_average ) [EOL] [EOL] if amt_to_add is not None : [EOL] rating = rating + amt_to_add [EOL] cont_cursor = self . connection . cursor ( ) [EOL] cont_cursor . execute ( [string] , ( rating , source [ [number] ] ) ) [EOL] cont_cursor . close ( ) [EOL] source_cursor . close ( ) [EOL] [EOL] @ staticmethod def signal_handler ( sig , frame ) : [EOL] sys . exit ( [number] ) [EOL] [EOL] def main ( self ) : [EOL] signal . signal ( signal . SIGINT , self . signal_handler ) [EOL] self . collect_contaminants_stdev ( ) [EOL] self . collect_contaminant_nat_avgs ( ) [EOL] self . find_scores ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import scrapy [EOL] import psycopg2 [EOL] [EOL] [EOL] class FindContInfo ( scrapy . Spider ) : [EOL] name = [string] [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def start_requests ( self ) : [EOL] with open ( [string] ) as f : [EOL] urls = f . read ( ) . splitlines ( ) [EOL] for url in urls : [EOL] yield scrapy . Request ( url = url , callback = self . parse ) [EOL] [EOL] @ staticmethod def try_parse_float ( float_to_be_parsed ) : [EOL] if float_to_be_parsed is None : [EOL] return None [EOL] elif float_to_be_parsed == [string] : [EOL] return [number] [EOL] elif type ( float_to_be_parsed ) == str : [EOL] return float ( float_to_be_parsed . replace ( [string] , [string] ) ) [EOL] else : [EOL] return float ( float_to_be_parsed ) [EOL] [EOL] def second_level_parse ( self , response ) : [EOL] try : [EOL] try_nat_avg = response . xpath ( [string] [string] . format ( response . meta [ [string] ] ) ) . get ( ) [EOL] if try_nat_avg is not None : [EOL] national_avg = try_nat_avg . split ( [string] ) [ [number] ] [EOL] else : [EOL] national_avg = None [EOL] [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( response . meta [ [string] ] , ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] if not result : [EOL] cursor . execute ( [string] [string] [string] [string] , ( response . meta [ [string] ] , self . try_parse_float ( response . meta [ [string] ] ) , self . try_parse_float ( national_avg ) , response . meta [ [string] ] , response . meta [ [string] ] , response . meta [ [string] ] , self . try_parse_float ( response . meta [ [string] ] ) ) ) [EOL] else : [EOL] cursor . execute ( [string] [string] [string] [string] , ( response . meta [ [string] ] , self . try_parse_float ( response . meta [ [string] ] ) , self . try_parse_float ( national_avg ) , response . meta [ [string] ] , response . meta [ [string] ] , response . meta [ [string] ] , self . try_parse_float ( response . meta [ [string] ] ) , result [ [number] ] ) ) [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( e ) [EOL] [EOL] def parse ( self , response ) : [EOL] try : [EOL] health_concerns = [string] [EOL] [EOL] cont_name = response . xpath ( [string] ) . get ( ) [EOL] [EOL] try_legal_limit = response . xpath ( [string] ) . get ( ) [EOL] if try_legal_limit is not None : [EOL] legal_limit = try_legal_limit . split ( [string] ) [ [number] ] [EOL] else : [EOL] legal_limit = None [EOL] [EOL] summary = response . xpath ( [string] ) . get ( ) [EOL] [EOL] health_concerns_arr = response . xpath ( [string] ) . getall ( ) [EOL] for concern in health_concerns_arr : [EOL] health_concerns += ( concern + [string] ) [EOL] [EOL] long_concerns = response . xpath ( [string] ) . get ( ) [EOL] try_health_guideline = response . xpath ( [string] ) . get ( ) [EOL] [EOL] if try_health_guideline is not None : [EOL] health_guideline = try_health_guideline . split ( [string] ) [ [number] ] [EOL] else : [EOL] health_guideline = None [EOL] [EOL] [comment] [EOL] national_avg_source = [string] + response . xpath ( [string] [string] [string] ) . get ( ) [EOL] [EOL] yield scrapy . Request ( url = national_avg_source , callback = self . second_level_parse , dont_filter = True , meta = { [string] : cont_name , [string] : legal_limit , [string] : summary , [string] : health_concerns , [string] : long_concerns , [string] : health_guideline } ) [EOL] [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( e ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import webscraper [EOL] import _csv [EOL] import typing [EOL] import csv [EOL] import psycopg2 [EOL] import traceback [EOL] [EOL] [EOL] class GetLocaleData : [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def get_locale_data ( self ) : [EOL] try : [EOL] with open ( [string] , encoding = [string] ) as csv_file : [EOL] csv_reader = csv . reader ( csv_file , delimiter = [string] ) [EOL] [EOL] next ( csv_reader ) [EOL] for row in csv_reader : [EOL] self . write_state_data ( state_id = row [ [number] ] ) [EOL] self . write_county_data ( county_id = row [ [number] ] , county_name = row [ [number] ] . title ( ) , state_id = row [ [number] ] ) [EOL] self . write_city_data ( city_name = row [ [number] ] . title ( ) , state_id = row [ [number] ] , county_name = row [ [number] ] . title ( ) ) [EOL] [EOL] with open ( [string] , encoding = [string] ) as csv_file : [EOL] csv_reader = csv . reader ( csv_file , delimiter = [string] ) [EOL] for row in csv_reader : [EOL] self . write_state_data ( state_id = row [ [number] ] ) [EOL] self . write_city_data ( city_name = row [ [number] ] . title ( ) , state_id = row [ [number] ] , county_name = row [ [number] ] . title ( ) ) [EOL] [EOL] with open ( [string] , encoding = [string] ) as csv_file : [EOL] csv_reader = csv . reader ( csv_file , delimiter = [string] ) [EOL] [EOL] next ( csv_reader ) [EOL] for row in csv_reader : [EOL] self . write_state_data ( state_id = row [ [number] ] ) [EOL] self . write_city_data ( city_name = row [ [number] ] . title ( ) , state_id = row [ [number] ] , county_name = row [ [number] ] . title ( ) ) [EOL] self . write_city_data ( city_name = row [ [number] ] . title ( ) , state_id = row [ [number] ] , county_name = row [ [number] ] . title ( ) ) [EOL] [EOL] except Exception : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def write_state_data ( self , state_id ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( state_id , ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] if not result and state_id != [string] and state_id != [string] and state_id != [string] : [EOL] cursor . execute ( [string] , ( state_id , ) ) [EOL] [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def write_county_data ( self , county_id , county_name , state_id ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( county_id , ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] if not result and state_id != [string] and state_id != [string] and state_id != [string] : [EOL] cursor . execute ( [string] , ( county_id , county_name , state_id ) ) [EOL] [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def write_city_data ( self , city_name , state_id , county_name ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( city_name , state_id ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] cursor . execute ( [string] , ( county_name , state_id ) ) [EOL] county_id = cursor . fetchone ( ) [EOL] [EOL] if county_id is None and state_id != [string] and state_id != [string] and state_id != [string] : [EOL] pass [EOL] [EOL] [comment] [EOL] elif not result and state_id != [string] and state_id != [string] and state_id != [string] : [EOL] cursor . execute ( [string] [string] , ( city_name , state_id , county_id ) ) [EOL] [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] [EOL] except Exception : [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def main ( self ) : [EOL] self . get_locale_data ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] getLocaleData = GetLocaleData ( ) [EOL] getLocaleData . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $webscraper.vodadata.getLocaleData.GetLocaleData$ 0 0 0 0 0 $webscraper.vodadata.getLocaleData.GetLocaleData$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import scrapy [EOL] import psycopg2 [EOL] [EOL] [EOL] class FindSourceLevels ( scrapy . Spider ) : [EOL] counter = [number] [EOL] counter_2 = [number] [EOL] name = [string] [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def start_requests ( self ) : [EOL] source_cursor = self . connection . cursor ( ) [EOL] source_cursor . execute ( [string] ) [EOL] for source in source_cursor : [EOL] yield scrapy . Request ( url = source [ [number] ] , callback = self . scrape_source_levels , meta = { [string] : source [ [number] ] , [string] : source [ [number] ] } ) [EOL] [EOL] @ staticmethod def try_parse_float ( float_to_be_parsed ) : [EOL] if float_to_be_parsed is None : [EOL] return None [EOL] elif float_to_be_parsed == [string] : [EOL] return [number] [EOL] elif type ( float_to_be_parsed ) == str : [EOL] return float ( float_to_be_parsed . replace ( [string] , [string] ) ) [EOL] else : [EOL] return float ( float_to_be_parsed ) [EOL] [EOL] def write_source_level ( self , cont_name , src_id , this_utility_value ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] , ( cont_name , ) ) [EOL] cont_id = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] [string] , ( src_id , cont_id ) ) [EOL] results = cursor . fetchall ( ) [EOL] [EOL] [comment] [EOL] if not results : [EOL] cursor . execute ( [string] [string] , ( src_id , cont_id , self . try_parse_float ( this_utility_value ) ) ) [EOL] [comment] [EOL] else : [EOL] cursor . execute ( [string] , ( self . try_parse_float ( this_utility_value ) , src_id , cont_id ) ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] self . counter = self . counter + [number] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( self . counter , cont_name ) ) [EOL] print ( [string] . format ( e , src_id , cont_name ) ) [EOL] [EOL] def write_state_avg ( self , state_id , cont_name , state_avg ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] , ( cont_name , ) ) [EOL] cont_id = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] [string] , ( state_id , cont_id ) ) [EOL] results = cursor . fetchall ( ) [EOL] [EOL] [comment] [EOL] if not results : [EOL] cursor . execute ( [string] , ( state_id , cont_id , self . try_parse_float ( state_avg ) ) ) [EOL] [comment] [EOL] else : [EOL] cursor . execute ( [string] , ( self . try_parse_float ( state_avg ) , state_id , cont_id ) ) [EOL] [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( e ) [EOL] [EOL] def scrape_source_levels ( self , response ) : [EOL] try : [EOL] [EOL] if response . url != [string] : [EOL] cont_raw = response . xpath ( [string] ) [EOL] utility_id = response . meta [ [string] ] [EOL] source_state = response . meta [ [string] ] [EOL] [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( utility_id , ) ) [EOL] src_id = cursor . fetchone ( ) [EOL] cursor . close ( ) [EOL] [EOL] if src_id is None : [EOL] self . counter_2 = self . counter_2 + [number] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( self . counter_2 , source_name , source_state , response . url ) ) [EOL] else : [EOL] for cont in cont_raw : [EOL] try : [EOL] [comment] [EOL] if cont . xpath ( [string] ) . get ( ) is not None : [EOL] cont_name = cont . xpath ( [string] ) . get ( ) [EOL] [EOL] this_utility_value = cont . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] [EOL] state_avg = cont . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] [EOL] [EOL] self . write_source_level ( cont_name , src_id , this_utility_value ) [EOL] self . write_state_avg ( source_state , cont_name , state_avg ) [EOL] [EOL] [comment] [EOL] elif cont . xpath ( [string] ) . get ( ) is not None : [EOL] cont_name = cont . xpath ( [string] ) . get ( ) [EOL] [EOL] this_utility_value = None [EOL] state_avg = None [EOL] self . write_source_level ( cont_name , src_id , this_utility_value ) [EOL] self . write_state_avg ( source_state , cont_name , state_avg ) [EOL] [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e , source_name , source_state ) ) [EOL] print ( [string] . format ( e , source_name , source_state ) ) [EOL] self . connection . commit ( ) [EOL] [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e , response . url , response . xpath ( [string] ) . get ( ) ) ) [EOL] print ( [string] . format ( e , response . url , response . xpath ( [string] ) . get ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import scrapy [EOL] import psycopg2 [EOL] [EOL] [EOL] class FindUtilInfo ( scrapy . Spider ) : [EOL] counter = [number] [EOL] name = [string] [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def start_requests ( self ) : [EOL] with open ( [string] ) as f : [EOL] urls = f . read ( ) . splitlines ( ) [EOL] for url in urls : [EOL] yield scrapy . Request ( url = url , callback = self . scrape_source_info ) [EOL] [EOL] @ staticmethod def try_parse_float ( float_to_be_parsed ) : [EOL] if float_to_be_parsed is None : [EOL] return None [EOL] elif float_to_be_parsed == [string] : [EOL] return [number] [EOL] elif type ( float_to_be_parsed ) == str : [EOL] return float ( float_to_be_parsed . replace ( [string] , [string] ) ) [EOL] else : [EOL] return float ( float_to_be_parsed ) [EOL] [EOL] def scrape_city_name ( self , response ) : [EOL] try : [EOL] utility_name = response . meta [ [string] ] [EOL] state_id = response . meta [ [string] ] [EOL] number_people_served = response . meta [ [string] ] [EOL] scraped_city = response . meta [ [string] ] [EOL] util_code = response . meta [ [string] ] [EOL] url = response . meta [ [string] ] [EOL] [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( scraped_city , state_id ) ) [EOL] db_city = cursor . fetchone ( ) [EOL] [EOL] if not db_city : [EOL] new_scraped_city = response . xpath ( [string] . format ( util_code ) ) . get ( ) [EOL] cursor . execute ( [string] , ( new_scraped_city , state_id ) ) [EOL] db_city = cursor . fetchone ( ) [EOL] if db_city is None : [EOL] reduced_scraped_city = None [EOL] if len ( new_scraped_city . split ( [string] ) ) > [number] : [EOL] reduced_scraped_city = [string] . join ( scraped_city . split ( [string] ) [ [number] : len ( scraped_city . split ( [string] ) ) - [number] ] ) [EOL] [EOL] cursor . execute ( [string] , ( reduced_scraped_city , state_id ) ) [EOL] db_city = cursor . fetchone ( ) [EOL] [EOL] if db_city is None : [EOL] self . counter = self . counter + [number] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( self . counter , response . url , utility_name , scraped_city , new_scraped_city , reduced_scraped_city , state_id , util_code , number_people_served ) ) [EOL] [EOL] cursor . execute ( [string] , ( db_city , ) ) [EOL] county = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] , ( utility_name , state_id ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] if db_city is None : [EOL] pass [EOL] [EOL] [comment] [EOL] elif not result : [EOL] cursor . execute ( [string] [string] , ( utility_name , db_city , county , state_id , number_people_served , url ) ) [EOL] [comment] [EOL] else : [EOL] cursor . execute ( [string] [string] [string] , ( utility_name , db_city , county , state_id , number_people_served , url , result [ [number] ] ) ) [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e , response . meta [ [string] ] , response . meta [ [string] ] ) ) [EOL] print ( [string] . format ( e , response . meta [ [string] ] , response . meta [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] def scrape_source_info ( self , response ) : [EOL] try : [EOL] util_code = response . url . split ( [string] ) [ [number] ] [EOL] utility_name = response . xpath ( [string] ) . get ( ) [EOL] scraped_city = response . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] [EOL] url = response . url [EOL] [EOL] if len ( scraped_city . split ( [string] ) ) <= [number] or scraped_city . split ( [string] ) [ len ( scraped_city . split ( [string] ) ) - [number] ] != [string] : [EOL] [EOL] state_id = util_code [ [number] : [number] ] [EOL] number_people_served = int ( response . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] . replace ( [string] , [string] ) ) [EOL] [EOL] processed_utility_name = utility_name [EOL] for i in range ( len ( utility_name ) ) : [EOL] if utility_name [ i ] == [string] : [EOL] processed_utility_name = utility_name [ [number] : i ] [EOL] [EOL] city_name_url = [string] [string] . format ( utility_name , state_id ) [EOL] yield scrapy . Request ( url = city_name_url , callback = self . scrape_city_name , dont_filter = True , meta = { [string] : processed_utility_name , [string] : state_id , [string] : number_people_served , [string] : scraped_city , [string] : util_code , [string] : url } ) [EOL] [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e , response . url . split ( [string] ) [ [number] ] ) ) [EOL] print ( [string] . format ( e , response . url . split ( [string] ) [ [number] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import scrapy [EOL] import psycopg2 [EOL] import traceback [EOL] [EOL] [EOL] class LeadInfoScraper ( scrapy . Spider ) : [EOL] name = [string] [EOL] counter = [number] [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] [EOL] def write_lead_to_contaminants ( self ) : [EOL] long_health_concerns = [string] [string] [string] [string] [string] [string] [EOL] [EOL] summary = [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( [string] , ) ) [EOL] result = cursor . fetchone ( ) [EOL] [EOL] if not result : [EOL] cursor . execute ( [string] [string] [string] [string] , ( [string] , summary , long_health_concerns ) ) [EOL] self . connection . commit ( ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def scrape_source_lead_data ( self , response ) : [EOL] try : [EOL] [EOL] if response . meta [ [string] ] is not None : [EOL] utility_id = response . meta [ [string] ] [EOL] source_state = response . meta [ [string] ] [EOL] [EOL] cursor = self . connection . cursor ( ) [EOL] cursor . execute ( [string] , ( utility_id , ) ) [EOL] src_id = cursor . fetchone ( ) [EOL] cursor . close ( ) [EOL] if src_id is None : [EOL] self . counter = self . counter + [number] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( source_name , source_state , self . counter ) ) [EOL] [EOL] else : [EOL] this_utility_value = [number] [EOL] [comment] [EOL] if response . xpath ( [string] ) . get ( ) is not None : [EOL] this_utility_value = response . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] [EOL] [EOL] [comment] [EOL] elif response . xpath ( [string] ) . get ( ) is not None : [EOL] counter = [number] [EOL] total = [number] [EOL] set = response . xpath ( [string] ) [EOL] for result in set : [EOL] counter = counter + [number] [EOL] if result . xpath ( [string] ) . get ( ) is not None : [EOL] result_num = result . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] [EOL] else : [EOL] result_num = result . xpath ( [string] ) . get ( ) . split ( [string] ) [ [number] ] [EOL] if not result_num and result_num != [string] : [EOL] try : [EOL] total = total + float ( result_num ) [EOL] except Exception as e : [EOL] print ( type ( result_num ) ) [EOL] print ( [string] . format ( result_num , response . url , e ) ) [EOL] this_utility_value = total / counter [EOL] self . write_source_lead_data ( [string] , src_id , this_utility_value ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def write_source_lead_data ( self , cont_name , src_id , this_utility_value ) : [EOL] try : [EOL] cursor = self . connection . cursor ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] , ( cont_name , ) ) [EOL] cont_id = cursor . fetchone ( ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] [string] , ( src_id , cont_id ) ) [EOL] results = cursor . fetchall ( ) [EOL] [EOL] [comment] [EOL] if not results : [EOL] cursor . execute ( [string] [string] , ( src_id , cont_id , this_utility_value ) ) [EOL] [comment] [EOL] else : [EOL] cursor . execute ( [string] , ( this_utility_value , src_id , cont_id ) ) [EOL] cursor . close ( ) [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( e ) ) [EOL] print ( [string] . format ( traceback . format_exc ( ) ) ) [EOL] [EOL] def start_requests ( self ) : [EOL] self . write_lead_to_contaminants ( ) [EOL] source_cursor = self . connection . cursor ( ) [EOL] source_cursor . execute ( [string] ) [EOL] for source in source_cursor : [EOL] url = [string] . format ( source [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] yield scrapy . Request ( url = url , callback = self . scrape_source_lead_data , meta = { [string] : source [ [number] ] , [string] : source [ [number] ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0