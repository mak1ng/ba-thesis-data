from typing import List , Union , Dict , Any [EOL] import logging [EOL] import stix2gui [EOL] import typing [EOL] import builtins [EOL] import json [EOL] import logging [EOL] [EOL] import eel [EOL] import stix2 [EOL] [EOL] _log = logging . getLogger ( __name__ ) [EOL] [EOL] eel . init ( [string] ) [EOL] [EOL] class AppState ( ) : [EOL] def __init__ ( self ) : [EOL] self . stix_data = None [EOL] [EOL] def load_stix ( self , input_string ) : [EOL] try : [EOL] self . stix_data = stix2 . parse ( input_string ) [EOL] except ( json . decoder . JSONDecodeError , stix2 . exceptions . STIXError ) as err : [EOL] _log . exception ( err ) [EOL] eel . set_output_text ( str ( err ) ) [EOL] return False [EOL] eel . set_output_text ( str ( self . stix_data ) ) [EOL] return True [EOL] [EOL] [EOL] _state = AppState ( ) [EOL] [EOL] @ eel . expose def load_stix_string ( input_string ) : [EOL] _log . debug ( [string] , input_string ) [EOL] return _state . load_stix ( input_string ) [EOL] [EOL] def main ( ) : [EOL] options = { [string] : [string] , [string] : [number] , [string] : [ ] , } [EOL] [EOL] _log . info ( [string] ) [EOL] eel . start ( [string] , options = options ) [EOL] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . DEBUG ) [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $stix2gui.AppState$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $stix2gui.AppState$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0