from typing import Any [EOL] import typing [EOL] import logging [EOL] import sys [EOL] import warnings [EOL] [EOL] from flask_shorten import create_app [EOL] [EOL] [comment] [EOL] [comment] [EOL] warnings . filterwarnings ( [string] , category = DeprecationWarning ) [EOL] [EOL] logging . basicConfig ( stream = sys . stdout ) [EOL] app = create_app ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] from __future__ import with_statement [EOL] [EOL] import os [EOL] from logging . config import fileConfig [EOL] [EOL] from sqlalchemy import engine_from_config [EOL] from sqlalchemy import pool [EOL] [EOL] from alembic import context [EOL] [EOL] [comment] [EOL] [comment] [EOL] config = context . config [EOL] [EOL] [comment] [EOL] [comment] [EOL] fileConfig ( config . config_file_name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] target_metadata = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] postgres_password = os . getenv ( [string] ) [EOL] postgres_user = os . getenv ( [string] ) [EOL] postgres_database = os . getenv ( [string] ) [EOL] postgres_service = os . getenv ( [string] ) [EOL] if postgres_password and postgres_password and postgres_service and postgres_user : [EOL] uri = f" [string] { postgres_user } [string] { postgres_password } [string] { postgres_service } [string] { postgres_database }" [EOL] config . set_main_option ( [string] , uri ) [EOL] [EOL] [EOL] def run_migrations_offline ( ) : [EOL] [docstring] [EOL] url = config . get_main_option ( [string] ) [EOL] context . configure ( url = url , target_metadata = target_metadata , literal_binds = True ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] connectable = engine_from_config ( config . get_section ( config . config_ini_section ) , prefix = [string] , poolclass = pool . NullPool , ) [EOL] [EOL] with connectable . connect ( ) as connection : [EOL] context . configure ( connection = connection , target_metadata = target_metadata ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] if context . is_offline_mode ( ) : [EOL] run_migrations_offline ( ) [EOL] else : [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] import pytest [EOL] [EOL] from flask_shorten import create_app [EOL] from flask_shorten . models import db , UrlMapper [EOL] [EOL] [EOL] @ pytest . fixture def app ( monkeypatch ) : [EOL] monkeypatch . setenv ( [string] , [string] ) [EOL] app = create_app ( testing = True ) [EOL] yield app [EOL] [EOL] [EOL] @ pytest . fixture def database ( app ) : [EOL] with app . app_context ( ) : [EOL] db . create_all ( ) [EOL] yield [EOL] db . session . remove ( ) [EOL] db . drop_all ( ) [EOL] [EOL] [EOL] def test_custom_path_creation ( app , database ) : [EOL] client = app . test_client ( ) [EOL] client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] a = client . get ( [string] ) [EOL] assert a . status_code == [number] [EOL] assert a . location == [string] [EOL] [EOL] [EOL] def test_random_path_creation ( database , app , monkeypatch ) : [EOL] client = app . test_client ( ) [EOL] monkeypatch . setattr ( UrlMapper , [string] , lambda : [string] ) [EOL] client . post ( [string] , json = { [string] : [string] } ) [EOL] a = client . get ( [string] ) [EOL] assert a . status_code == [number] [EOL] assert a . location == [string] [EOL] [EOL] [EOL] def test_taken_path ( app , database , monkeypatch ) : [EOL] client = app . test_client ( ) [EOL] client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] a = client . post ( [string] , json = { [string] : [string] , [string] : [string] } ) [EOL] assert a . status_code == [number] [EOL] [EOL] [EOL] def test_no_path ( app , database , monkeypatch ) : [EOL] client = app . test_client ( ) [EOL] a = client . get ( [string] ) [EOL] assert a . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import flask_shorten [EOL] import models [EOL] import builtins [EOL] from flask . views import MethodView [EOL] from flask import redirect , send_from_directory [EOL] from marshmallow import Schema , fields , validate [EOL] from flask_rest_api import Api , Blueprint , abort [EOL] [EOL] from . models import UrlMapper , db [EOL] [EOL] api = Api ( ) [EOL] [EOL] url_bp = Blueprint ( [string] , [string] , url_prefix = [string] , description = [string] ) [EOL] [EOL] [EOL] @ api . definition ( [string] ) class UrlMappingRequest ( Schema ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] strict = True [EOL] [EOL] url = fields . Url ( required = True ) [EOL] custom_path = fields . String ( required = False , validate = [ validate . Length ( min = [number] , max = [number] ) , validate . Regexp ( [string] , error = [string] ) , ] , ) [EOL] [EOL] [EOL] @ api . definition ( [string] ) class UrlMappingResponse ( Schema ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] strict = True [EOL] [EOL] url = fields . Url ( required = True ) [EOL] path = fields . String ( required = False ) [EOL] [EOL] [EOL] @ api . definition ( [string] ) class UrlMappingQuery ( Schema ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] strict = True [EOL] [EOL] path = fields . String ( required = True ) [EOL] [EOL] [EOL] def create_url_mapper ( url , path = None ) : [EOL] [docstring] [EOL] custom = True [EOL] if not path : [EOL] custom = False [EOL] path = UrlMapper . generate_hash_path ( ) [EOL] [EOL] url_mapper = UrlMapper . query . filter_by ( path = path ) . one_or_none ( ) [EOL] if url_mapper is not None : [EOL] abort ( [number] , message = [string] ) [EOL] url_mapper = UrlMapper ( url = url , path = path , custom = custom ) [EOL] db . session . add ( url_mapper ) [EOL] db . session . commit ( ) [EOL] return url_mapper [EOL] [EOL] [EOL] @ url_bp . route ( [string] ) class UrlMapping ( MethodView ) : [EOL] [docstring] [EOL] [EOL] @ url_bp . arguments ( UrlMappingQuery , location = [string] ) @ url_bp . response ( UrlMappingResponse ) def get ( self , args ) : [EOL] path = args . get ( [string] ) [EOL] return UrlMapper . query . filter_by ( path = path ) . one_or_none ( ) [EOL] [EOL] @ url_bp . arguments ( UrlMappingRequest ) @ url_bp . response ( UrlMappingResponse ) def post ( self , args ) : [EOL] url = args . get ( [string] ) [EOL] path = args . get ( [string] ) [EOL] url_mapper = create_url_mapper ( url , path ) [EOL] return url_mapper [EOL] [EOL] [EOL] class Redirection ( MethodView ) : [EOL] [docstring] [EOL] [EOL] def get ( self , path ) : [EOL] result = UrlMapper . query . filter_by ( path = path ) . one_or_none ( ) [EOL] if result is None : [EOL] abort ( [number] , message = [string] % path ) [EOL] return redirect ( result . url ) [EOL] [EOL] [EOL] class HomePage ( MethodView ) : [EOL] [docstring] [EOL] [EOL] def get ( self ) : [EOL] return send_from_directory ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $flask_shorten.models.UrlMapper$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $flask_shorten.models.UrlMapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import flask_shorten [EOL] from datetime import datetime [EOL] [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] from shortuuid import ShortUUID [EOL] [EOL] HASH_LENGTH = [number] [EOL] [EOL] db = SQLAlchemy ( ) [EOL] [EOL] [EOL] class UrlMapper ( db . Model ) : [comment] [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] id = db . Column ( [string] , db . Integer , primary_key = True ) [EOL] url = db . Column ( [string] , db . String , nullable = False ) [EOL] path = db . Column ( [string] , db . String , unique = True ) [EOL] custom = db . Column ( [string] , db . Boolean , nullable = False ) [EOL] created_on = db . Column ( [string] , db . DateTime , nullable = False , default = datetime . utcnow ) [EOL] [EOL] @ staticmethod def generate_hash_path ( ) : [EOL] [docstring] [EOL] return ShortUUID ( ) . random ( HASH_LENGTH ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[flask_shorten.models.UrlMapper]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[flask_shorten.models.UrlMapper]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[flask_shorten.models.UrlMapper]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[flask_shorten.models.UrlMapper]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[flask_shorten.models.UrlMapper]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Union , Optional [EOL] import typing [EOL] import logging [EOL] import flask [EOL] import typing_extensions [EOL] import os [EOL] import logging [EOL] [EOL] from flask import Flask [EOL] from flask_talisman import Talisman [EOL] [EOL] [EOL] from . models import db [EOL] [EOL] import sentry_sdk [EOL] from sentry_sdk . integrations . flask import FlaskIntegration [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def set_config ( app , testing = False ) : [EOL] [docstring] [EOL] postgres_password = os . getenv ( [string] ) [EOL] postgres_user = os . getenv ( [string] ) [EOL] postgres_database = os . getenv ( [string] ) [EOL] postgres_service = os . getenv ( [string] ) [EOL] if ( postgres_password is not None [EOL] and postgres_password is not None [EOL] and postgres_service is not None [EOL] and postgres_user is not None ) : [EOL] uri = ( [string] + postgres_user + [string] + postgres_password + [string] + postgres_service + [string] + postgres_database ) [EOL] else : [EOL] uri = os . getenv ( [string] , [string] ) [EOL] logger . warning ( [string] , uri ) [EOL] [EOL] app . config [ [string] ] = testing [EOL] app . config [ [string] ] = uri [EOL] app . config [ [string] ] = False [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] [EOL] [EOL] def create_app ( testing = False ) : [EOL] [docstring] [EOL] sentry_dsn = os . getenv ( [string] ) [EOL] if sentry_dsn is not None : [EOL] sentry_sdk . init ( dsn = sentry_dsn , integrations = [ FlaskIntegration ( ) ] ) [EOL] logger . info ( [string] ) [EOL] else : [EOL] logger . warning ( [string] ) [EOL] app = Flask ( __name__ ) [EOL] set_config ( app , testing ) [EOL] if not app . config [ [string] ] : [EOL] Talisman ( app , strict_transport_security = False , content_security_policy = False ) [EOL] db . init_app ( app ) [EOL] from . views import Redirection , HomePage , api , url_bp [EOL] [EOL] api . init_app ( app ) [EOL] api . register_blueprint ( url_bp ) [EOL] app . add_url_rule ( [string] , view_func = Redirection . as_view ( [string] ) ) [EOL] app . add_url_rule ( [string] , view_func = HomePage . as_view ( [string] ) ) [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0