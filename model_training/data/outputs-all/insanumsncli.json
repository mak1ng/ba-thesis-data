[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple , Union , Dict , Literal , List [EOL] import subprocess [EOL] import typing_extensions [EOL] import simplenote_cli [EOL] import logging [EOL] import time [EOL] import typing [EOL] import builtins [EOL] import os , sys , getopt , re , signal , time , datetime , shlex , hashlib [EOL] import subprocess , threading , logging [EOL] import copy , json , urwid , datetime [EOL] from . import view_titles , view_note , view_help , view_log , user_input [EOL] from . import utils , temp [EOL] from . config import Config [EOL] from . simplenote import Simplenote [EOL] from . notes_db import NotesDB , ReadError , WriteError [EOL] from logging . handlers import RotatingFileHandler [EOL] [EOL] class sncli : [EOL] [EOL] def __init__ ( self , do_server_sync , verbose = False , config_file = None ) : [EOL] self . config = Config ( config_file ) [EOL] self . do_server_sync = do_server_sync [EOL] self . verbose = verbose [EOL] self . do_gui = False [EOL] force_full_sync = False [EOL] self . current_sort_mode = self . config . get_config ( [string] ) [EOL] [EOL] self . tempdir = self . config . get_config ( [string] ) [EOL] if self . tempdir == [string] : [EOL] self . tempdir = None [EOL] [EOL] if not os . path . exists ( self . config . get_config ( [string] ) ) : [EOL] os . mkdir ( self . config . get_config ( [string] ) ) [EOL] force_full_sync = True [EOL] [EOL] [comment] [EOL] self . logfile = os . path . join ( self . config . get_config ( [string] ) , [string] ) [EOL] self . loghandler = RotatingFileHandler ( self . logfile , maxBytes = [number] , backupCount = [number] ) [EOL] self . loghandler . setLevel ( logging . DEBUG ) [EOL] self . loghandler . setFormatter ( logging . Formatter ( fmt = [string] ) ) [EOL] self . logger = logging . getLogger ( ) [EOL] self . logger . setLevel ( logging . DEBUG ) [EOL] self . logger . addHandler ( self . loghandler ) [EOL] self . config . logfile = self . logfile [EOL] [EOL] logging . debug ( [string] ) [EOL] [EOL] self . logs = [ ] [EOL] [EOL] [comment] [EOL] self . default_markdown = self . config . get_config ( [string] ) == [string] [EOL] [EOL] try : [EOL] self . ndb = NotesDB ( self . config , self . log , self . gui_update_view ) [EOL] except Exception as e : [EOL] self . log ( str ( e ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if force_full_sync : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . verbose = True [EOL] self . log ( [string] ) [EOL] self . sync_notes ( ) [EOL] self . verbose = verbose [EOL] [EOL] def sync_notes ( self ) : [EOL] return self . ndb . sync_now ( self . do_server_sync ) [EOL] [EOL] def get_editor ( self ) : [EOL] editor = self . config . get_config ( [string] ) [EOL] if not editor : [EOL] self . log ( [string] ) [EOL] return None [EOL] return editor [EOL] [EOL] def get_pager ( self ) : [EOL] pager = self . config . get_config ( [string] ) [EOL] if not pager : [EOL] self . log ( [string] ) [EOL] return None [EOL] return pager [EOL] [EOL] def get_diff ( self ) : [EOL] diff = self . config . get_config ( [string] ) [EOL] if not diff : [EOL] self . log ( [string] ) [EOL] return None [EOL] return diff [EOL] [EOL] def exec_cmd_on_note ( self , note , cmd = None , raw = False , delete_tempfile = False ) : [EOL] [EOL] if not cmd : [EOL] cmd = self . get_editor ( ) [EOL] if not cmd : [EOL] return None [EOL] [EOL] tf = temp . tempfile_create ( note if note else None , raw = raw , tempdir = self . tempdir , ext_override = [string] if self . default_markdown else [string] , ) [EOL] fname = temp . tempfile_name ( tf ) [EOL] [EOL] focus_position = [number] [EOL] try : [EOL] focus_position = self . gui_body_get ( ) . focus_position [EOL] except ( IndexError , AttributeError ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] subs = { [string] : fname , [string] : focus_position + [number] , } [EOL] cmd_list = [ c . format ( ** subs ) for c in shlex . split ( cmd ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] not in cmd : [EOL] cmd_list . append ( fname ) [EOL] [EOL] self . log ( [string] . format ( cmd_list ) ) [EOL] [EOL] try : [EOL] subprocess . check_call ( cmd_list ) [EOL] except Exception as e : [EOL] self . log ( [string] + str ( e ) ) [EOL] if delete_tempfile : [EOL] temp . tempfile_delete ( tf ) [EOL] return None [EOL] [EOL] content = None [EOL] if not raw : [EOL] content = temp . tempfile_content ( tf ) [EOL] if not content or content == [string] : [EOL] content = None [EOL] [EOL] if delete_tempfile : [EOL] temp . tempfile_delete ( tf ) [EOL] [EOL] return content [EOL] [EOL] def exec_diff_on_note ( self , note , old_note ) : [EOL] [EOL] diff = self . get_diff ( ) [EOL] if not diff : [EOL] return None [EOL] [EOL] pager = self . get_pager ( ) [EOL] if not pager : [EOL] return None [EOL] [EOL] ltf = temp . tempfile_create ( note , tempdir = self . tempdir ) [EOL] otf = temp . tempfile_create ( old_note , tempdir = self . tempdir ) [EOL] out = temp . tempfile_create ( None , tempdir = self . tempdir ) [EOL] [EOL] try : [EOL] subprocess . call ( diff + [string] + temp . tempfile_name ( ltf ) + [string] + temp . tempfile_name ( otf ) + [string] + temp . tempfile_name ( out ) , shell = True ) [EOL] subprocess . check_call ( pager + [string] + temp . tempfile_name ( out ) , shell = True ) [EOL] except Exception as e : [EOL] self . log ( [string] + str ( e ) ) [EOL] temp . tempfile_delete ( ltf ) [EOL] temp . tempfile_delete ( otf ) [EOL] temp . tempfile_delete ( out ) [EOL] return None [EOL] [EOL] temp . tempfile_delete ( ltf ) [EOL] temp . tempfile_delete ( otf ) [EOL] temp . tempfile_delete ( out ) [EOL] return None [EOL] [EOL] def gui_header_clear ( self ) : [EOL] self . master_frame . contents [ [string] ] = ( None , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_header_set ( self , w ) : [EOL] self . master_frame . contents [ [string] ] = ( w , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_header_get ( self ) : [EOL] return self . master_frame . contents [ [string] ] [ [number] ] [EOL] [EOL] def gui_header_focus ( self ) : [EOL] self . master_frame . focus_position = [string] [EOL] [EOL] def gui_footer_log_clear ( self ) : [EOL] ui = self . gui_footer_input_get ( ) [EOL] self . master_frame . contents [ [string] ] = ( urwid . Pile ( [ urwid . Pile ( [ ] ) , urwid . Pile ( [ ui ] ) ] ) , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_footer_log_set ( self , pl ) : [EOL] ui = self . gui_footer_input_get ( ) [EOL] self . master_frame . contents [ [string] ] = ( urwid . Pile ( [ urwid . Pile ( pl ) , urwid . Pile ( [ ui ] ) ] ) , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_footer_log_get ( self ) : [EOL] return self . master_frame . contents [ [string] ] [ [number] ] . contents [ [number] ] [ [number] ] [EOL] [EOL] def gui_footer_input_clear ( self ) : [EOL] pl = self . gui_footer_log_get ( ) [EOL] self . master_frame . contents [ [string] ] = ( urwid . Pile ( [ urwid . Pile ( [ pl ] ) , urwid . Pile ( [ ] ) ] ) , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_footer_input_set ( self , ui ) : [EOL] pl = self . gui_footer_log_get ( ) [EOL] self . master_frame . contents [ [string] ] = ( urwid . Pile ( [ urwid . Pile ( [ pl ] ) , urwid . Pile ( [ ui ] ) ] ) , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_footer_input_get ( self ) : [EOL] return self . master_frame . contents [ [string] ] [ [number] ] . contents [ [number] ] [ [number] ] [EOL] [EOL] def gui_footer_focus_input ( self ) : [EOL] self . master_frame . focus_position = [string] [EOL] self . master_frame . contents [ [string] ] [ [number] ] . focus_position = [number] [EOL] [EOL] def gui_body_clear ( self ) : [EOL] self . master_frame . contents [ [string] ] = ( None , None ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_body_set ( self , w ) : [EOL] self . master_frame . contents [ [string] ] = ( w , None ) [EOL] self . gui_update_status_bar ( ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_body_get ( self ) : [EOL] return self . master_frame . contents [ [string] ] [ [number] ] [EOL] [EOL] def gui_body_focus ( self ) : [EOL] self . master_frame . focus_position = [string] [EOL] [EOL] def log_timeout ( self , loop , arg ) : [EOL] self . log_lock . acquire ( ) [EOL] [EOL] self . log_alarms -= [number] [EOL] [EOL] if self . log_alarms == [number] : [EOL] self . gui_footer_log_clear ( ) [EOL] self . logs = [ ] [EOL] else : [EOL] [comment] [EOL] if len ( self . logs ) > [number] : [EOL] self . logs . pop ( [number] ) [EOL] [EOL] log_pile = [ ] [EOL] [EOL] for l in self . logs : [EOL] log_pile . append ( urwid . AttrMap ( urwid . Text ( l ) , [string] ) ) [EOL] [EOL] if self . verbose : [EOL] self . gui_footer_log_set ( log_pile ) [EOL] [EOL] self . log_lock . release ( ) [EOL] [EOL] def log ( self , msg ) : [EOL] logging . debug ( msg ) [EOL] [EOL] if not self . do_gui : [EOL] if self . verbose : [EOL] print ( msg ) [EOL] return [EOL] [EOL] self . log_lock . acquire ( ) [EOL] [EOL] self . log_alarms += [number] [EOL] self . logs . append ( msg ) [EOL] [EOL] if len ( self . logs ) > int ( self . config . get_config ( [string] ) ) : [EOL] self . log_alarms -= [number] [EOL] self . logs . pop ( [number] ) [EOL] [EOL] log_pile = [ ] [EOL] for l in self . logs : [EOL] log_pile . append ( urwid . AttrMap ( urwid . Text ( l ) , [string] ) ) [EOL] [EOL] if self . verbose : [EOL] self . gui_footer_log_set ( log_pile ) [EOL] [EOL] self . sncli_loop . set_alarm_in ( int ( self . config . get_config ( [string] ) ) , self . log_timeout , None ) [EOL] [EOL] self . log_lock . release ( ) [EOL] [EOL] def gui_update_view ( self ) : [EOL] if not self . do_gui : [EOL] return [EOL] [EOL] try : [EOL] cur_key = self . view_titles . note_list [ self . view_titles . focus_position ] . note [ [string] ] [EOL] except IndexError as e : [EOL] cur_key = None [EOL] pass [EOL] [EOL] self . view_titles . update_note_list ( self . view_titles . search_string , sort_mode = self . current_sort_mode ) [EOL] self . view_titles . focus_note ( cur_key ) [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_note . ViewNote : [EOL] self . view_note . update_note_view ( ) [EOL] [EOL] self . gui_update_status_bar ( ) [EOL] [EOL] def gui_update_status_bar ( self ) : [EOL] if self . status_bar != [string] : [EOL] self . gui_header_clear ( ) [EOL] else : [EOL] self . gui_header_set ( self . gui_body_get ( ) . get_status_bar ( ) ) [EOL] [EOL] def gui_switch_frame_body ( self , new_view , save_current_view = True ) : [EOL] if new_view == None : [EOL] if len ( self . last_view ) == [number] : [EOL] [comment] [EOL] self . gui_stop ( ) [EOL] else : [EOL] self . gui_body_set ( self . last_view . pop ( ) ) [EOL] else : [EOL] if self . gui_body_get ( ) . __class__ != new_view . __class__ : [EOL] if save_current_view : [EOL] self . last_view . append ( self . gui_body_get ( ) ) [EOL] self . gui_body_set ( new_view ) [EOL] [EOL] def trash_note_callback ( self , key , yes ) : [EOL] if not yes : [EOL] return [EOL] [EOL] [comment] [EOL] note = self . ndb . get_note ( key ) [EOL] self . ndb . set_note_deleted ( key , False if note [ [string] ] else True ) [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] self . view_titles . update_note_title ( ) [EOL] [EOL] self . gui_update_status_bar ( ) [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] def restore_note_callback ( self , key , yes ) : [EOL] if not yes : [EOL] return [EOL] [EOL] [comment] [EOL] self . log ( [string] . format ( self . view_note . old_note [ [string] ] , key ) ) [EOL] self . ndb . set_note_content ( key , self . view_note . old_note [ [string] ] ) [EOL] [EOL] self . view_note . update_note_view ( ) [EOL] self . gui_update_status_bar ( ) [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] def gui_yes_no_input ( self , args , yes_no ) : [EOL] self . gui_footer_input_clear ( ) [EOL] self . gui_body_focus ( ) [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] args [ [number] ] ( args [ [number] ] , True if yes_no in [ [string] , [string] , [string] , [string] , [string] ] [EOL] else False ) [EOL] [EOL] def gui_search_input ( self , args , search_string ) : [EOL] self . gui_footer_input_clear ( ) [EOL] self . gui_body_focus ( ) [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] if search_string : [EOL] if ( self . gui_body_get ( ) == self . view_note ) : [EOL] self . search_direction = args [ [number] ] [EOL] self . view_note . search_note_view_next ( search_string = search_string , search_mode = args [ [number] ] ) [EOL] else : [EOL] self . view_titles . update_note_list ( search_string , args [ [number] ] , sort_mode = self . current_sort_mode ) [EOL] self . gui_body_set ( self . view_titles ) [EOL] [EOL] def gui_version_input ( self , args , version ) : [EOL] self . gui_footer_input_clear ( ) [EOL] self . gui_body_focus ( ) [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] if version : [EOL] try : [EOL] [comment] [EOL] int ( version ) [EOL] except ValueError as e : [EOL] self . log ( [string] ) [EOL] return [EOL] self . view_note . update_note_view ( version = version ) [EOL] self . gui_update_status_bar ( ) [EOL] [EOL] def gui_tags_input ( self , args , tags ) : [EOL] self . gui_footer_input_clear ( ) [EOL] self . gui_body_focus ( ) [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] if tags != None : [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] note = self . view_titles . note_list [ self . view_titles . focus_position ] . note [EOL] else : [comment] [EOL] note = self . view_note . note [EOL] [EOL] self . ndb . set_note_tags ( note [ [string] ] , tags ) [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] self . view_titles . update_note_title ( ) [EOL] else : [comment] [EOL] self . view_note . update_note_view ( ) [EOL] [EOL] self . gui_update_status_bar ( ) [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] def gui_pipe_input ( self , args , cmd ) : [EOL] self . gui_footer_input_clear ( ) [EOL] self . gui_body_focus ( ) [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] if cmd != None : [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] note = self . view_titles . note_list [ self . view_titles . focus_position ] . note [EOL] else : [comment] [EOL] note = self . view_note . old_note if self . view_note . old_note \ [EOL] else self . view_note . note [EOL] args = shlex . split ( cmd ) [EOL] try : [EOL] self . gui_clear ( ) [EOL] pipe = subprocess . Popen ( cmd , stdin = subprocess . PIPE , shell = True ) [EOL] pipe . communicate ( note [ [string] ] . encode ( [string] ) ) [EOL] pipe . stdin . close ( ) [EOL] pipe . wait ( ) [EOL] except OSError as e : [EOL] self . log ( [string] + str ( e ) ) [EOL] finally : [EOL] self . gui_reset ( ) [EOL] [EOL] def gui_frame_keypress ( self , size , key ) : [EOL] [comment] [EOL] if key == [string] : [EOL] key = [string] [EOL] [EOL] lb = self . gui_body_get ( ) [EOL] [EOL] if key == self . config . get_keybind ( [string] ) : [EOL] self . gui_switch_frame_body ( None ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] self . gui_switch_frame_body ( self . view_help ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] self . ndb . last_sync = [number] [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] self . view_log . update_log ( ) [EOL] self . gui_switch_frame_body ( self . view_log ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] last = len ( lb . body . positions ( ) ) [EOL] if lb . focus_position == ( last - [number] ) : [EOL] return None [EOL] lb . focus_position += [number] [EOL] lb . render ( size ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] if lb . focus_position == [number] : [EOL] return None [EOL] lb . focus_position -= [number] [EOL] lb . render ( size ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] last = len ( lb . body . positions ( ) ) [EOL] next_focus = lb . focus_position + size [ [number] ] [EOL] if next_focus >= last : [EOL] next_focus = last - [number] [EOL] lb . change_focus ( size , next_focus , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] if [string] in lb . ends_visible ( size ) : [EOL] last = len ( lb . body . positions ( ) ) [EOL] next_focus = last - size [ [number] ] - size [ [number] ] [EOL] else : [EOL] next_focus = lb . focus_position - size [ [number] ] [EOL] if next_focus < [number] : [EOL] next_focus = [number] [EOL] lb . change_focus ( size , next_focus , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] last = len ( lb . body . positions ( ) ) [EOL] next_focus = lb . focus_position + ( size [ [number] ] // [number] ) [EOL] if next_focus >= last : [EOL] next_focus = last - [number] [EOL] lb . change_focus ( size , next_focus , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] if [string] in lb . ends_visible ( size ) : [EOL] last = len ( lb . body . positions ( ) ) [EOL] next_focus = last - size [ [number] ] - ( size [ [number] ] // [number] ) [EOL] else : [EOL] next_focus = lb . focus_position - ( size [ [number] ] // [number] ) [EOL] if next_focus < [number] : [EOL] next_focus = [number] [EOL] lb . change_focus ( size , next_focus , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] lb . change_focus ( size , ( len ( lb . body . positions ( ) ) - [number] ) , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] lb . change_focus ( size , [number] , offset_inset = [number] , coming_from = [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if len ( self . view_titles . body . positions ( ) ) <= [number] : [EOL] return None [EOL] last = len ( self . view_titles . body . positions ( ) ) [EOL] if self . view_titles . focus_position == ( last - [number] ) : [EOL] return None [EOL] self . view_titles . focus_position += [number] [EOL] lb . update_note_view ( self . view_titles . note_list [ self . view_titles . focus_position ] . note [ [string] ] ) [EOL] self . gui_switch_frame_body ( self . view_note ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if len ( self . view_titles . body . positions ( ) ) <= [number] : [EOL] return None [EOL] if self . view_titles . focus_position == [number] : [EOL] return None [EOL] self . view_titles . focus_position -= [number] [EOL] lb . update_note_view ( self . view_titles . note_list [ self . view_titles . focus_position ] . note [ [string] ] ) [EOL] self . gui_switch_frame_body ( self . view_note ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] diff = - [number] if key == self . config . get_keybind ( [string] ) else [number] [EOL] [EOL] version = diff + ( self . view_note . old_note [ [string] ] [EOL] if self . view_note . old_note else [EOL] self . view_note . note [ [string] ] ) [EOL] [EOL] lb . update_note_view ( version = version ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if not self . view_note . old_note : [EOL] self . log ( [string] . format ( self . view_note . key ) ) [EOL] return None [EOL] [EOL] self . gui_clear ( ) [EOL] self . exec_diff_on_note ( self . view_note . note , self . view_note . old_note ) [EOL] self . gui_reset ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if not self . view_note . old_note : [EOL] self . log ( [string] . format ( self . view_note . key ) ) [EOL] return None [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , [string] . format ( self . view_note . old_note [ [string] ] ) , [string] , self . gui_yes_no_input , [ self . restore_note_callback , self . view_note . key ] ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] lb . update_note_view ( version = None ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , key , [string] , self . gui_version_input , None ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . status_bar == [string] : [EOL] self . status_bar = [string] [EOL] else : [EOL] self . status_bar = self . config . get_config ( [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] self . gui_clear ( ) [EOL] content = self . exec_cmd_on_note ( None ) [EOL] self . gui_reset ( ) [EOL] [EOL] if content : [EOL] self . log ( [string] ) [EOL] self . ndb . create_note ( content , markdown = self . default_markdown ) [EOL] self . gui_update_view ( ) [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] if key == self . config . get_keybind ( [string] ) : [EOL] note = lb . note [EOL] else : [EOL] note = lb . old_note if lb . old_note else lb . note [EOL] [EOL] self . gui_clear ( ) [EOL] if key == self . config . get_keybind ( [string] ) : [EOL] content = self . exec_cmd_on_note ( note ) [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] content = self . exec_cmd_on_note ( note , cmd = self . get_pager ( ) , delete_tempfile = True ) [EOL] else : [comment] [EOL] content = self . exec_cmd_on_note ( note , cmd = self . get_pager ( ) , raw = True , delete_tempfile = True ) [EOL] [EOL] self . gui_reset ( ) [EOL] [EOL] if not content : [EOL] return None [EOL] [EOL] [comment] [EOL] md5_old = hashlib . md5 ( note [ [string] ] . encode ( [string] ) ) . digest ( ) [EOL] md5_new = hashlib . md5 ( content . encode ( [string] ) ) . digest ( ) [EOL] [EOL] if md5_old != md5_new : [EOL] self . log ( [string] ) [EOL] self . ndb . set_note_content ( note [ [string] ] , content ) [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] lb . update_note_title ( ) [EOL] else : [comment] [EOL] lb . update_note_view ( ) [EOL] self . ndb . sync_worker_go ( ) [EOL] else : [EOL] self . log ( [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] self . view_note . update_note_view ( lb . note_list [ lb . focus_position ] . note [ [string] ] ) [EOL] self . gui_switch_frame_body ( self . view_note ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] note = lb . old_note if lb . old_note else lb . note [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , key , [string] , self . gui_pipe_input , None ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] note = lb . note [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , [string] . format ( [string] if note [ [string] ] else [string] ) , [string] , self . gui_yes_no_input , [ self . trash_note_callback , note [ [string] ] ] ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] note = lb . note [EOL] [EOL] pin = [number] [EOL] if [string] in note : [EOL] if [string] in note [ [string] ] : pin = [number] [EOL] else : pin = [number] [EOL] [EOL] self . ndb . set_note_pinned ( note [ [string] ] , pin ) [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] lb . update_note_title ( ) [EOL] [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] note = lb . note [EOL] [EOL] md = [number] [EOL] if [string] in note : [EOL] if [string] in note [ [string] ] : md = [number] [EOL] else : md = [number] [EOL] [EOL] self . ndb . set_note_markdown ( note [ [string] ] , md ) [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] lb . update_note_title ( ) [EOL] [EOL] self . ndb . sync_worker_go ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_titles . ViewTitles : [EOL] if len ( lb . body . positions ( ) ) <= [number] : [EOL] return None [EOL] note = lb . note_list [ lb . focus_position ] . note [EOL] else : [comment] [EOL] note = lb . note [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , [string] , [string] % [string] . join ( note [ [string] ] ) , self . gui_tags_input , None ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles and self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] if self . gui_body_get ( ) . __class__ == view_note . ViewNote : [EOL] if key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) : [EOL] self . view_note . search_direction = [string] [EOL] else : [EOL] self . view_note . search_direction = [string] [EOL] [EOL] options = [ [string] if key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) [EOL] else [string] , [string] if key == self . config . get_keybind ( [string] ) or key == self . config . get_keybind ( [string] ) [EOL] else [string] ] [EOL] [EOL] caption = [string] . format ( [string] if options [ [number] ] == [string] else [string] , [string] if options [ [number] ] == [string] else [string] ) [EOL] [EOL] self . gui_footer_input_set ( urwid . AttrMap ( user_input . UserInput ( self . config , caption , [string] , self . gui_search_input , options ) , [string] ) ) [EOL] self . gui_footer_focus_input ( ) [EOL] self . master_frame . keypress = self . gui_footer_input_get ( ) . keypress [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] self . view_note . search_note_view_next ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] self . view_note . search_note_view_prev ( ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] self . view_titles . update_note_list ( None , sort_mode = self . current_sort_mode ) [EOL] self . gui_body_set ( self . view_titles ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] self . current_sort_mode = [string] [EOL] self . view_titles . sort_note_list ( [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] self . current_sort_mode = [string] [EOL] self . view_titles . sort_note_list ( [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_titles . ViewTitles : [EOL] return key [EOL] [EOL] self . current_sort_mode = [string] [EOL] self . view_titles . sort_note_list ( [string] ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] if self . gui_body_get ( ) . __class__ != view_note . ViewNote : [EOL] return key [EOL] [EOL] self . view_note . copy_note_text ( ) [EOL] [EOL] else : [EOL] return lb . keypress ( size , key ) [EOL] [EOL] self . gui_update_status_bar ( ) [EOL] return None [EOL] [EOL] def gui_init_view ( self , loop , view_note ) : [EOL] self . master_frame . keypress = self . gui_frame_keypress [EOL] self . gui_body_set ( self . view_titles ) [EOL] [EOL] if view_note : [EOL] [comment] [EOL] self . gui_switch_frame_body ( self . view_note ) [EOL] [EOL] self . thread_sync . start ( ) [EOL] [EOL] def gui_clear ( self ) : [EOL] self . sncli_loop . widget = urwid . Filler ( urwid . Text ( [string] ) ) [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_reset ( self ) : [EOL] self . sncli_loop . widget = self . master_frame [EOL] self . sncli_loop . draw_screen ( ) [EOL] [EOL] def gui_stop ( self ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if self . ndb . verify_all_saved ( ) : [EOL] [comment] [EOL] self . gui_clear ( ) [EOL] raise urwid . ExitMainLoop ( ) [EOL] else : [EOL] self . log ( [string] ) [EOL] [EOL] def gui ( self , key ) : [EOL] [EOL] self . do_gui = True [EOL] [EOL] self . last_view = [ ] [EOL] self . status_bar = self . config . get_config ( [string] ) [EOL] [EOL] self . log_alarms = [number] [EOL] self . log_lock = threading . Lock ( ) [EOL] [EOL] self . thread_sync = threading . Thread ( target = self . ndb . sync_worker , args = [ self . do_server_sync ] ) [EOL] self . thread_sync . setDaemon ( True ) [EOL] [EOL] self . view_titles = view_titles . ViewTitles ( self . config , { [string] : self . ndb , [string] : None , [string] : self . log } ) [EOL] self . view_note = view_note . ViewNote ( self . config , { [string] : self . ndb , [string] : key , [string] : self . log } ) [EOL] [EOL] self . view_log = view_log . ViewLog ( self . config ) [EOL] self . view_help = view_help . ViewHelp ( self . config ) [EOL] [EOL] palette = [ ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) , ( [string] , self . config . get_color ( [string] ) , self . config . get_color ( [string] ) ) ] [EOL] [EOL] self . master_frame = urwid . Frame ( body = urwid . Filler ( urwid . Text ( [string] ) ) , header = None , footer = urwid . Pile ( [ urwid . Pile ( [ ] ) , urwid . Pile ( [ ] ) ] ) , focus_part = [string] ) [EOL] [EOL] self . sncli_loop = urwid . MainLoop ( self . master_frame , palette , handle_mouse = False ) [EOL] [EOL] self . sncli_loop . set_alarm_in ( [number] , self . gui_init_view , True if key else False ) [EOL] [EOL] self . sncli_loop . run ( ) [EOL] [EOL] def cli_list_notes ( self , regex , search_string ) : [EOL] [EOL] note_list , match_regex , all_notes_cnt = self . ndb . filter_notes ( search_string , search_mode = [string] if regex else [string] , sort_mode = self . config . get_config ( [string] ) ) [EOL] for n in note_list : [EOL] flags = utils . get_note_flags ( n . note ) [EOL] print ( ( n . key + [string] + flags + [string] + utils . get_note_title ( n . note ) ) ) [EOL] [EOL] def cli_note_dump ( self , key ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] w = [number] [EOL] sep = [string] + [string] * ( w + [number] ) + [string] [EOL] t = time . localtime ( float ( note [ [string] ] ) ) [EOL] mod_time = time . strftime ( [string] , t ) [EOL] title = utils . get_note_title ( note ) [EOL] flags = utils . get_note_flags ( note ) [EOL] tags = utils . get_note_tags ( note ) [EOL] [EOL] print ( sep ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + title ) [ : w ] ) ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + note . get ( [string] , [string] . format ( note . get ( [string] ) ) ) ) [ : w ] ) ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + mod_time ) [ : w ] ) ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + tags ) [ : w ] ) ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + str ( note . get ( [string] , [number] ) ) ) [ : w ] ) ) [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + flags + [string] ) [ : w ] ) ) [EOL] if utils . note_published ( note ) and [string] in note : [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] + note [ [string] ] ) [ : w ] ) ) [EOL] else : [EOL] print ( ( [string] + str ( w ) + [string] ) . format ( ( [string] ) [ : w ] ) ) [EOL] print ( sep ) [EOL] print ( ( note [ [string] ] ) ) [EOL] [EOL] def cli_dump_notes ( self , regex , search_string ) : [EOL] [EOL] note_list , match_regex , all_notes_cnt = self . ndb . filter_notes ( search_string , search_mode = [string] if regex else [string] , sort_mode = self . config . get_config ( [string] ) ) [EOL] for n in note_list : [EOL] self . cli_note_dump ( n . key ) [EOL] [EOL] def cli_note_create ( self , from_stdin , title ) : [EOL] [EOL] if from_stdin : [EOL] content = [string] . join ( sys . stdin ) [EOL] else : [EOL] content = self . exec_cmd_on_note ( None ) [EOL] [EOL] if title : [EOL] content = title + [string] + content if content else [string] [EOL] [EOL] if content : [EOL] self . log ( [string] ) [EOL] self . ndb . create_note ( content , markdown = self . default_markdown ) [EOL] self . sync_notes ( ) [EOL] [EOL] def cli_note_import ( self , from_stdin ) : [EOL] [EOL] if from_stdin : [EOL] raw = [string] . join ( sys . stdin ) [EOL] else : [EOL] raw = self . exec_cmd_on_note ( None ) [EOL] [EOL] if raw : [EOL] try : [EOL] note = json . loads ( raw ) [EOL] self . log ( [string] ) [EOL] self . ndb . import_note ( note ) [EOL] self . sync_notes ( ) [EOL] except json . decoder . JSONDecodeError as e : [EOL] self . log ( [string] . format ( e ) ) [EOL] sys . exit ( [number] ) [EOL] except ValueError as e : [EOL] self . log ( [string] . format ( e ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def cli_note_export ( self , key ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] print ( json . dumps ( note , indent = [number] ) ) [EOL] [EOL] def cli_export_notes ( self , regex , search_string ) : [EOL] [EOL] note_list , match_regex , all_notes_cnt = self . ndb . filter_notes ( search_string , search_mode = [string] if regex else [string] , sort_mode = self . config . get_config ( [string] ) ) [EOL] [EOL] notes_data = [ n . note for n in note_list ] [EOL] print ( json . dumps ( notes_data , indent = [number] ) ) [EOL] [EOL] def cli_note_edit ( self , key ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] content = self . exec_cmd_on_note ( note ) [EOL] if not content : [EOL] return [EOL] [EOL] md5_old = hashlib . md5 ( note [ [string] ] . encode ( [string] ) ) . digest ( ) [EOL] md5_new = hashlib . md5 ( content . encode ( [string] ) ) . digest ( ) [EOL] [EOL] if md5_old != md5_new : [EOL] self . log ( [string] ) [EOL] self . ndb . set_note_content ( note [ [string] ] , content ) [EOL] self . sync_notes ( ) [EOL] else : [EOL] self . log ( [string] ) [EOL] [EOL] def cli_note_trash ( self , key , trash ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] self . ndb . set_note_deleted ( key , trash ) [EOL] self . sync_notes ( ) [EOL] [EOL] def cli_note_pin ( self , key , pin ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] self . ndb . set_note_pinned ( key , pin ) [EOL] self . sync_notes ( ) [EOL] [EOL] def cli_note_markdown ( self , key , markdown ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] self . ndb . set_note_markdown ( key , markdown ) [EOL] self . sync_notes ( ) [EOL] [EOL] def cli_note_tags_get ( self , key ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] tags = utils . get_note_tags ( note ) [EOL] return tags [EOL] [EOL] def cli_note_tags_set ( self , key , tags ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] self . ndb . set_note_tags ( key , tags . lower ( ) ) [EOL] self . sync_notes ( ) [EOL] [EOL] def cli_note_tags_add ( self , key , new_tags ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] old_tags = self . cli_note_tags_get ( key ) [EOL] if old_tags : [EOL] old_tag_list = old_tags . lower ( ) . split ( [string] ) [EOL] new_tag_list = new_tags . lower ( ) . split ( [string] ) [EOL] tag_list = old_tag_list [EOL] for tag in new_tag_list : [EOL] if tag not in tag_list : [EOL] tag_list . append ( tag ) [EOL] tags = [string] . join ( tag_list ) [EOL] else : [EOL] tags = new_tags [EOL] [EOL] self . cli_note_tags_set ( key , tags ) [EOL] [EOL] def cli_note_tags_rm ( self , key , rm_tags ) : [EOL] [EOL] note = self . ndb . get_note ( key ) [EOL] if not note : [EOL] self . log ( [string] ) [EOL] return [EOL] [EOL] old_tags = self . cli_note_tags_get ( key ) [EOL] if old_tags : [EOL] old_tag_list = old_tags . lower ( ) . split ( [string] ) [EOL] rm_tag_list = rm_tags . lower ( ) . split ( [string] ) [EOL] tag_list = old_tag_list [EOL] for tag in rm_tag_list : [EOL] if tag in tag_list : [EOL] tag_list . remove ( tag ) [EOL] tags = [string] . join ( tag_list ) [EOL] self . cli_note_tags_set ( key , tags ) [EOL] [EOL] def SIGINT_handler ( signum , frame ) : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] signal . signal ( signal . SIGINT , SIGINT_handler ) [EOL] [EOL] def usage ( ) : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def main ( argv = sys . argv [ [number] : ] ) : [EOL] verbose = False [EOL] sync = True [EOL] regex = False [EOL] key = None [EOL] title = None [EOL] config = None [EOL] [EOL] try : [EOL] opts , args = getopt . getopt ( argv , [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] except : [EOL] usage ( ) [EOL] [EOL] for opt , arg in opts : [EOL] if opt in [ [string] , [string] ] : [EOL] usage ( ) [EOL] elif opt in [ [string] , [string] ] : [EOL] verbose = True [EOL] elif opt in [ [string] , [string] ] : [EOL] sync = False [EOL] elif opt in [ [string] , [string] ] : [EOL] regex = True [EOL] elif opt in [ [string] , [string] ] : [EOL] key = arg [EOL] elif opt in [ [string] , [string] ] : [EOL] title = arg [EOL] elif opt in [ [string] , [string] ] : [EOL] config = arg [EOL] else : [EOL] print ( [string] ) [EOL] usage ( ) [EOL] [EOL] if not args : [EOL] sncli ( sync , verbose , config ) . gui ( key ) [EOL] return [EOL] [EOL] def sncli_start ( sync = sync , verbose = verbose , config = config ) : [EOL] sn = sncli ( sync , verbose , config ) [EOL] if sync : [EOL] errors = sn . sync_notes ( ) [EOL] if errors > [number] : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] return sn [EOL] [EOL] if args [ [number] ] == [string] : [EOL] sn = sncli_start ( True ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] sn = sncli_start ( ) [EOL] sn . cli_list_notes ( regex , [string] . join ( args [ [number] : ] ) ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] sn = sncli_start ( ) [EOL] if key : [EOL] sn . cli_note_dump ( key ) [EOL] else : [EOL] sn . cli_dump_notes ( regex , [string] . join ( args [ [number] : ] ) ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] if len ( args ) == [number] : [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_create ( False , title ) [EOL] elif len ( args ) == [number] and args [ [number] ] == [string] : [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_create ( True , title ) [EOL] else : [EOL] usage ( ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] if len ( args ) == [number] : [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_import ( False ) [EOL] elif len ( args ) == [number] and args [ [number] ] == [string] : [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_import ( True ) [EOL] else : [EOL] usage ( ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] sn = sncli_start ( ) [EOL] if key : [EOL] sn . cli_note_export ( key ) [EOL] else : [EOL] sn . cli_export_notes ( regex , [string] . join ( args [ [number] : ] ) ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] if not key : [EOL] usage ( ) [EOL] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_edit ( key ) [EOL] [EOL] elif args [ [number] ] == [string] or args [ [number] ] == [string] : [EOL] [EOL] if not key : [EOL] usage ( ) [EOL] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_trash ( key , [number] if args [ [number] ] == [string] else [number] ) [EOL] [EOL] elif args [ [number] ] == [string] or args [ [number] ] == [string] : [EOL] [EOL] if not key : [EOL] usage ( ) [EOL] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_pin ( key , [number] if args [ [number] ] == [string] else [number] ) [EOL] [EOL] elif args [ [number] ] == [string] or args [ [number] ] == [string] : [EOL] [EOL] if not key : [EOL] usage ( ) [EOL] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_markdown ( key , [number] if args [ [number] ] == [string] else [number] ) [EOL] [EOL] [comment] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] if not key : [EOL] usage ( ) [EOL] [EOL] nargs = len ( args ) [EOL] correct_get = ( args [ [number] ] == [string] and nargs == [number] ) [EOL] correct_other = ( args [ [number] ] in [ [string] , [string] , [string] ] and nargs == [number] ) [EOL] if not ( correct_get or correct_other ) : [EOL] usage ( ) [EOL] [EOL] if args [ [number] ] == [string] : [EOL] [EOL] sn = sncli_start ( ) [EOL] tags = sn . cli_note_tags_get ( key ) [EOL] if tags : [EOL] print ( tags ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] tags = args [ [number] ] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_tags_set ( key , tags ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] new_tags = args [ [number] ] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_tags_add ( key , new_tags ) [EOL] [EOL] elif args [ [number] ] == [string] : [EOL] [EOL] rm_tags = args [ [number] ] [EOL] sn = sncli_start ( ) [EOL] sn . cli_note_tags_rm ( key , rm_tags ) [EOL] [EOL] else : [EOL] usage ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Union[typing_extensions.Literal[-1],typing_extensions.Literal]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal[-1],typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $time.struct_time$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import configparser [EOL] import typing [EOL] import os , sys , urwid , collections , configparser , subprocess [EOL] [EOL] class Config : [EOL] [EOL] def __init__ ( self , custom_file = None ) : [EOL] self . home = os . path . abspath ( os . path . expanduser ( [string] ) ) [EOL] defaults = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : os . path . join ( self . home , [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : os . environ [ [string] ] if [string] in os . environ else [string] , [string] : os . environ [ [string] ] if [string] in os . environ else [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] cp = configparser . SafeConfigParser ( defaults ) [EOL] [EOL] if custom_file : [EOL] fname = custom_file [EOL] elif [string] in os . environ : [EOL] fname = os . environ [ [string] ] [EOL] else : [EOL] fname = os . path . join ( self . home , [string] ) [EOL] [EOL] try : [EOL] with open ( fname ) as f : [EOL] cp . read_file ( f , source = fname ) [EOL] except FileNotFoundError as e : [EOL] print ( [string] . format ( fname ) ) [EOL] sys . exit ( [number] ) [EOL] except configparser . Error as e : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( e ) [EOL] sys . exit ( [number] ) [EOL] except OSError as e : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( e ) [EOL] sys . exit ( [number] ) [EOL] [EOL] cfg_sec = [string] [EOL] [EOL] if not cp . has_section ( cfg_sec ) : [EOL] cp . add_section ( cfg_sec ) [EOL] [EOL] [EOL] [comment] [EOL] sn_password = cp . get ( cfg_sec , [string] , raw = True ) [EOL] if not sn_password : [EOL] command = cp . get ( cfg_sec , [string] , raw = True ) [EOL] if command : [EOL] try : [EOL] sn_password = subprocess . check_output ( command , shell = True , universal_newlines = True ) [EOL] [comment] [EOL] sn_password = sn_password . rstrip ( [string] ) [EOL] except subprocess . CalledProcessError as e : [EOL] print ( [string] ) [EOL] print ( e ) [EOL] sys . exit ( [number] ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] [EOL] self . configs = collections . OrderedDict ( ) [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] , raw = True ) , [string] ] [EOL] self . configs [ [string] ] = [ sn_password , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] , raw = True ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] , raw = True ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . configs [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] [EOL] self . keybinds = collections . OrderedDict ( ) [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] , [string] ] , [string] ] [EOL] self . keybinds [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [ [string] ] , [string] ] [EOL] [EOL] self . colors = collections . OrderedDict ( ) [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] self . colors [ [string] ] = [ cp . get ( cfg_sec , [string] ) , [string] ] [EOL] [EOL] def get_config ( self , name ) : [EOL] return self . configs [ name ] [ [number] ] [EOL] [EOL] def get_config_descr ( self , name ) : [EOL] return self . configs [ name ] [ [number] ] [EOL] [EOL] def get_keybind ( self , name ) : [EOL] return self . keybinds [ name ] [ [number] ] [EOL] [EOL] def get_keybind_use ( self , name ) : [EOL] return self . keybinds [ name ] [ [number] ] [EOL] [EOL] def get_keybind_descr ( self , name ) : [EOL] return self . keybinds [ name ] [ [number] ] [EOL] [EOL] def get_color ( self , name ) : [EOL] return self . colors [ name ] [ [number] ] [EOL] [EOL] def get_color_descr ( self , name ) : [EOL] return self . colors [ name ] [ [number] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.SafeConfigParser$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import subprocess [EOL] import os [EOL] from distutils import spawn [EOL] from subprocess import Popen , PIPE [EOL] [EOL] [EOL] class Clipboard ( object ) : [EOL] def __init__ ( self ) : [EOL] self . copy_command = self . get_copy_command ( ) [EOL] [EOL] def get_copy_command ( self ) : [EOL] if ( spawn . find_executable ( [string] ) ) : [EOL] return [ [string] , [string] ] [EOL] if ( spawn . find_executable ( [string] ) ) : [EOL] return [ [string] ] [EOL] return None [EOL] [EOL] def copy ( self , text ) : [EOL] if ( self . copy_command ) : [EOL] proc = Popen ( self . copy_command , stdin = PIPE ) [EOL] proc . communicate ( text . encode ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , Pattern [EOL] import datetime [EOL] import typing [EOL] import datetime , random , re , time [EOL] [EOL] [comment] [EOL] note_title_re = re . compile ( [string] ) [EOL] [EOL] def generate_random_key ( ) : [EOL] [docstring] [EOL] return [string] % ( random . randrange ( [number] ** [number] ) , ) [EOL] [EOL] def get_note_tags ( note ) : [EOL] if [string] in note : [EOL] tags = [string] % [string] . join ( note [ [string] ] ) [EOL] if [string] in note and note [ [string] ] : [EOL] if tags : tags += [string] [EOL] else : tags = [string] [EOL] else : [EOL] tags = [string] [EOL] return tags [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_note_flags ( note ) : [EOL] flags = [string] [EOL] flags += [string] if float ( note [ [string] ] ) > float ( note [ [string] ] ) else [string] [EOL] flags += [string] if [string] in note and note [ [string] ] else [string] [EOL] if [string] in note : [EOL] flags += [string] if [string] in note [ [string] ] else [string] [EOL] flags += [string] if [string] in note [ [string] ] else [string] [EOL] flags += [string] if [string] in note [ [string] ] else [string] [EOL] else : [EOL] flags += [string] [EOL] return flags [EOL] [EOL] def get_note_title ( note ) : [EOL] mo = note_title_re . match ( note . get ( [string] , [string] ) ) [EOL] if mo : [EOL] return mo . groups ( ) [ [number] ] [EOL] else : [EOL] return [string] [EOL] [EOL] def get_note_title_file ( note ) : [EOL] mo = note_title_re . match ( note . get ( [string] , [string] ) ) [EOL] if mo : [EOL] fn = mo . groups ( ) [ [number] ] [EOL] fn = fn . replace ( [string] , [string] ) [EOL] fn = fn . replace ( [string] , [string] ) [EOL] if not fn : [EOL] return [string] [EOL] [EOL] if isinstance ( fn , str ) : [EOL] fn = str ( fn , [string] ) [EOL] else : [EOL] fn = str ( fn ) [EOL] [EOL] if note_markdown ( note ) : [EOL] fn += [string] [EOL] else : [EOL] fn += [string] [EOL] [EOL] return fn [EOL] else : [EOL] return [string] [EOL] [EOL] def human_date ( timestamp ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] dt = datetime . datetime . fromtimestamp ( timestamp ) [EOL] [comment] [EOL] now = datetime . datetime . now ( ) [EOL] [EOL] if dt . date ( ) == now . date ( ) : [EOL] [comment] [EOL] return dt . strftime ( [string] ) [EOL] [EOL] elif dt . year == now . year : [EOL] [comment] [EOL] [comment] [EOL] return dt . strftime ( [string] ) + [string] + str ( dt . day ) [EOL] [EOL] else : [EOL] [comment] [EOL] return [string] % ( dt . strftime ( [string] ) , dt . day , dt . year ) [EOL] [EOL] def note_published ( n ) : [EOL] asystags = n . get ( [string] , [number] ) [EOL] if not asystags : [EOL] return [number] [EOL] return [number] if [string] in asystags else [number] [EOL] [EOL] def note_pinned ( n ) : [EOL] asystags = n . get ( [string] , [number] ) [EOL] if not asystags : [EOL] return [number] [EOL] return [number] if [string] in asystags else [number] [EOL] [EOL] def note_markdown ( n ) : [EOL] asystags = n . get ( [string] , [number] ) [EOL] if not asystags : [EOL] return [number] [EOL] return [number] if [string] in asystags else [number] [EOL] [EOL] tags_illegal_chars = re . compile ( [string] ) [EOL] def sanitise_tags ( tags ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] illegals_removed = tags_illegal_chars . sub ( [string] , tags ) [EOL] if len ( illegals_removed ) == [number] : [EOL] [comment] [EOL] [comment] [EOL] return [ ] [EOL] [EOL] else : [EOL] return illegals_removed . split ( [string] ) [EOL] [EOL] def sort_by_title_pinned ( a ) : [EOL] return ( not note_pinned ( a . note ) , get_note_title ( a . note ) ) [EOL] [EOL] def sort_notes_by_tags ( notes , pinned_ontop = False ) : [EOL] notes . sort ( key = lambda i : ( pinned_ontop and not note_pinned ( i . note ) , i . note . get ( [string] ) , get_note_title ( i . note ) ) ) [EOL] [EOL] def sort_by_modify_date_pinned ( a ) : [EOL] if note_pinned ( a . note ) : [EOL] return [number] * float ( a . note . get ( [string] , [number] ) ) [EOL] else : [EOL] return float ( a . note . get ( [string] , [number] ) ) [EOL] [EOL] class KeyValueObject : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . __dict__ . update ( kwargs ) [EOL] [EOL] [EOL] def build_regex_search ( search_string ) : [EOL] [docstring] [EOL] [EOL] sspat = None [EOL] valid_flags = { [string] : re . IGNORECASE } [EOL] if search_string : [EOL] try : [EOL] search_string , flag_letters = re . match ( [string] , search_string ) . groups ( ) [EOL] flags = [number] [EOL] [comment] [EOL] [comment] [EOL] if flag_letters : [EOL] for letter in flag_letters : [EOL] if letter in valid_flags : [EOL] flags = flags | valid_flags [ letter ] [EOL] sspat = re . compile ( search_string , flags ) [EOL] except re . error : [EOL] sspat = None [EOL] [EOL] return sspat [EOL] [EOL] def sanitise_dates ( note ) : [EOL] [docstring] [EOL] now = time . time ( ) [EOL] max_delta = [number] [comment] [EOL] [EOL] if [string] in note : [EOL] if float ( note [ [string] ] ) - now > max_delta : [EOL] note [ [string] ] = now [EOL] [EOL] if [string] in note : [EOL] if float ( note [ [string] ] ) - now > max_delta : [EOL] note [ [string] ] = now [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.strtyping.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Any [EOL] import typing [EOL] import urwid [EOL] [EOL] class UserInput ( urwid . Edit ) : [EOL] [EOL] def __init__ ( self , config , caption , edit_text , callback_func , args ) : [EOL] self . config = config [EOL] self . callback_func = callback_func [EOL] self . callback_func_args = args [EOL] super ( UserInput , self ) . __init__ ( caption = caption , edit_text = edit_text , wrap = [string] ) [EOL] [EOL] def keypress ( self , size , key ) : [EOL] size = ( size [ [number] ] , ) [comment] [EOL] if key == [string] : [EOL] self . callback_func ( self . callback_func_args , None ) [EOL] elif key == [string] : [EOL] self . callback_func ( self . callback_func_args , self . edit_text ) [EOL] else : [EOL] return super ( UserInput , self ) . keypress ( size , key ) [EOL] return None [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any]$ 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple , Literal , List [EOL] import simplenote_cli [EOL] import typing [EOL] import typing_extensions [EOL] import time [EOL] import time , urwid [EOL] from . import utils [EOL] import re [EOL] from . clipboard import Clipboard [EOL] import logging [EOL] [EOL] class ViewNote ( urwid . ListBox ) : [EOL] [EOL] def __init__ ( self , config , args ) : [EOL] self . config = config [EOL] self . ndb = args [ [string] ] [EOL] self . key = args [ [string] ] [EOL] self . log = args [ [string] ] [EOL] self . search_string = [string] [EOL] self . search_mode = [string] [EOL] self . search_direction = [string] [EOL] self . note = self . ndb . get_note ( self . key ) if self . key else None [EOL] self . old_note = None [EOL] self . tabstop = int ( self . config . get_config ( [string] ) ) [EOL] self . clipboard = Clipboard ( ) [EOL] super ( ViewNote , self ) . __init__ ( urwid . SimpleFocusListWalker ( self . get_note_content_as_list ( ) ) ) [EOL] [EOL] def get_note_content_as_list ( self ) : [EOL] lines = [ ] [EOL] if not self . key : [EOL] return lines [EOL] if self . old_note : [EOL] for l in self . old_note [ [string] ] . split ( [string] ) : [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( l . replace ( [string] , [string] * self . tabstop ) ) , [string] , [string] ) ) [EOL] else : [EOL] for l in self . note [ [string] ] . split ( [string] ) : [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( l . replace ( [string] , [string] * self . tabstop ) ) , [string] , [string] ) ) [EOL] lines . append ( urwid . AttrMap ( urwid . Divider ( [string] ) , [string] ) ) [EOL] return lines [EOL] [EOL] def update_note_view ( self , key = None , version = None ) : [EOL] if key : [comment] [EOL] self . key = key [EOL] self . note = self . ndb . get_note ( self . key ) [EOL] self . old_note = None [EOL] [EOL] if self . key and version : [EOL] [comment] [EOL] if int ( version ) <= [number] or int ( version ) >= self . note [ [string] ] + [number] : [EOL] self . log ( [string] . format ( version , self . key ) ) [EOL] return [EOL] [EOL] if ( not version and self . old_note ) or ( self . key and version and version == self . note [ [string] ] ) : [EOL] self . log ( [string] . format ( self . note [ [string] ] , self . key ) ) [EOL] self . old_note = None [EOL] elif self . key and version : [EOL] [comment] [EOL] self . log ( [string] . format ( version , self . key ) ) [EOL] version_note = self . ndb . get_note_version ( self . key , version ) [EOL] if not version_note : [EOL] self . log ( [string] . format ( version , self . key ) ) [EOL] [comment] [EOL] else : [EOL] self . old_note = version_note [EOL] [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_content_as_list ( ) ) [EOL] if not self . search_string : [EOL] self . focus_position = [number] [EOL] [EOL] def lines_after_current_position ( self ) : [EOL] lines_after_current_position = list ( range ( self . focus_position + [number] , len ( self . body . positions ( ) ) - [number] ) ) [EOL] return lines_after_current_position [EOL] [EOL] def lines_before_current_position ( self ) : [EOL] lines_before_current_position = list ( range ( [number] , self . focus_position ) ) [EOL] lines_before_current_position . reverse ( ) [EOL] return lines_before_current_position [EOL] [EOL] def search_note_view_next ( self , search_string = None , search_mode = None ) : [EOL] if search_string : [EOL] self . search_string = search_string [EOL] if search_mode : [EOL] self . search_mode = search_mode [EOL] note_range = self . lines_after_current_position ( ) if self . search_direction == [string] else self . lines_before_current_position ( ) [EOL] self . search_note_range ( note_range ) [EOL] [EOL] def search_note_view_prev ( self , search_string = None , search_mode = None ) : [EOL] if search_string : [EOL] self . search_string = search_string [EOL] if search_mode : [EOL] self . search_mode = search_mode [EOL] note_range = self . lines_after_current_position ( ) if self . search_direction == [string] else self . lines_before_current_position ( ) [EOL] self . search_note_range ( note_range ) [EOL] [EOL] def search_note_range ( self , note_range ) : [EOL] for line in note_range : [EOL] line_content = self . note [ [string] ] . split ( [string] ) [ line ] [EOL] if ( self . is_match ( self . search_string , line_content ) ) : [EOL] self . focus_position = line [EOL] break [EOL] self . update_note_view ( ) [EOL] [EOL] def is_match ( self , term , full_text ) : [EOL] if self . search_mode == [string] : [EOL] return term in full_text [EOL] else : [EOL] sspat = utils . build_regex_search ( term ) [EOL] return sspat and sspat . search ( full_text ) [EOL] [EOL] def get_status_bar ( self ) : [EOL] if not self . key : [EOL] return urwid . AttrMap ( urwid . Text ( [string] ) , [string] ) [EOL] [EOL] cur = - [number] [EOL] total = [number] [EOL] if len ( self . body . positions ( ) ) > [number] : [EOL] cur = self . focus_position [EOL] total = len ( self . body . positions ( ) ) [EOL] [EOL] if self . old_note : [EOL] t = time . localtime ( float ( self . old_note [ [string] ] ) ) [EOL] title = utils . get_note_title ( self . old_note ) [EOL] version = self . old_note [ [string] ] [EOL] else : [EOL] t = time . localtime ( float ( self . note [ [string] ] ) ) [EOL] title = utils . get_note_title ( self . note ) [EOL] flags = utils . get_note_flags ( self . note ) [EOL] tags = utils . get_note_tags ( self . note ) [EOL] version = self . note . get ( [string] , [number] ) [EOL] [EOL] mod_time = time . strftime ( [string] , t ) [EOL] [EOL] status_title = urwid . AttrMap ( urwid . Text ( [string] + title , wrap = [string] ) , [string] ) [EOL] [EOL] status_key_index = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + self . key + [string] + str ( cur + [number] ) + [string] + str ( total ) ) , [string] ) ) [EOL] [EOL] status_date = urwid . AttrMap ( urwid . Text ( mod_time , wrap = [string] ) , [string] ) [EOL] [EOL] if self . old_note : [EOL] status_tags_flags = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + str ( version ) + [string] ) , [string] ) ) [EOL] else : [EOL] status_tags_flags = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + tags + [string] + str ( version ) + [string] + flags + [string] ) , [string] ) ) [EOL] [EOL] pile_top = urwid . Columns ( [ status_title , status_key_index ] ) [EOL] pile_bottom = urwid . Columns ( [ status_date , status_tags_flags ] ) [EOL] [EOL] if self . old_note or not ( utils . note_published ( self . note ) and [string] in self . note ) : [EOL] return urwid . AttrMap ( urwid . Pile ( [ pile_top , pile_bottom ] ) , [string] ) [EOL] [EOL] pile_publish = urwid . AttrMap ( urwid . Text ( [string] + self . note [ [string] ] ) , [string] ) [EOL] return urwid . AttrMap ( urwid . Pile ( [ pile_top , pile_bottom , pile_publish ] ) , [string] ) [EOL] [EOL] def copy_note_text ( self ) : [EOL] line_content = self . note [ [string] ] . split ( [string] ) [ self . focus_position ] [EOL] self . clipboard . copy ( line_content ) [EOL] [EOL] def keypress ( self , size , key ) : [EOL] if key == self . config . get_keybind ( [string] ) : [EOL] self . tabstop = [number] [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_content_as_list ( ) ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] self . tabstop = [number] [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_content_as_list ( ) ) [EOL] [EOL] elif key == self . config . get_keybind ( [string] ) : [EOL] self . tabstop = [number] [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_content_as_list ( ) ) [EOL] [EOL] else : [EOL] return key [EOL] [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simplenote_cli.clipboard.Clipboard$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import builtins [EOL] import simperium [EOL] [docstring] [EOL] [EOL] import base64 [EOL] import datetime [EOL] import json [EOL] import logging [EOL] import time [EOL] import urllib . parse [EOL] import uuid [EOL] [EOL] import requests [EOL] from requests . exceptions import ConnectionError , RequestException , HTTPError [EOL] [EOL] from simperium . core import Api , Auth [EOL] [EOL] [comment] [EOL] [comment] [EOL] APP_TOKEN = [string] [EOL] [EOL] [comment] [EOL] SIMPLENOTE_APP_ID = [string] [EOL] [EOL] NOTE_FETCH_LENGTH = [number] [EOL] [EOL] class SimplenoteLoginFailed ( Exception ) : [EOL] pass [EOL] [EOL] class Simplenote ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , username , password ) : [EOL] [docstring] [EOL] self . auth = Auth ( SIMPLENOTE_APP_ID , APP_TOKEN ) [EOL] [EOL] self . api = None [EOL] [EOL] self . username = username [EOL] self . password = password [EOL] self . token = None [EOL] self . status = [string] [EOL] [EOL] if not username or not password : [EOL] logging . debug ( [string] ) [EOL] self . status = [string] [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] self . api = self . authenticate ( self . username , self . password ) [EOL] except ConnectionError as e : [EOL] logging . debug ( [string] + str ( e ) ) [EOL] self . status = [string] [EOL] except HTTPError as e : [EOL] logging . debug ( [string] + str ( e ) ) [EOL] self . status = [string] [EOL] except KeyError as e : [EOL] logging . debug ( [string] + str ( e ) ) [EOL] self . status = [string] [EOL] except Exception as e : [EOL] logging . debug ( [string] + str ( e ) ) [EOL] self . status = [string] [EOL] [EOL] def authenticate ( self , user , password ) : [EOL] [docstring] [EOL] [EOL] token = self . auth . authorize ( user , password ) [EOL] api = Api ( SIMPLENOTE_APP_ID , token ) [EOL] self . status = [string] [EOL] return api [EOL] [EOL] def get_note ( self , noteid , version = None ) : [EOL] [docstring] [EOL] [EOL] if self . api is None : [EOL] return None , - [number] [EOL] [EOL] try : [EOL] note = self . api . note . get ( noteid , version = version ) [EOL] if version is not None : [EOL] note [ [string] ] = version [EOL] if note is None : [EOL] return None , - [number] [EOL] note [ [string] ] = noteid [EOL] return note , [number] if note is not None else - [number] [EOL] except Exception as e : [EOL] logging . debug ( e ) [EOL] return None , - [number] [EOL] [EOL] [EOL] def update_note ( self , note ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if self . api is None : [EOL] return None , - [number] [EOL] [EOL] try : [EOL] [comment] [EOL] if [string] not in note : [EOL] [comment] [EOL] note = { [string] : note [ [string] ] , [string] : note [ [string] ] , [string] : note [ [string] ] , [string] : note [ [string] ] , [string] : note [ [string] ] , [string] : note [ [string] ] , [string] : [string] , [string] : [string] , } [EOL] key , note = self . api . note . new ( note , include_response = True ) [EOL] note [ [string] ] = [number] [EOL] else : [EOL] key , note = self . api . note . set ( note [ [string] ] , note , include_response = True ) [EOL] note [ [string] ] = key [EOL] except ConnectionError as e : [EOL] self . status = [string] [EOL] return e , - [number] [EOL] except RequestException as e : [EOL] logging . debug ( [string] + str ( e ) ) [EOL] self . status = [string] [EOL] return e , - [number] [EOL] except ValueError as e : [EOL] return e , - [number] [EOL] return note , [number] [EOL] [EOL] def add_note ( self , note ) : [EOL] [docstring] [EOL] if type ( note ) == str : [EOL] return self . update_note ( { [string] : note } ) [EOL] elif ( type ( note ) == dict ) and [string] in note : [EOL] return self . update_note ( note ) [EOL] else : [EOL] return [string] , - [number] [EOL] [EOL] def _convert_index_to_note ( cls , entry ) : [EOL] [docstring] [EOL] note = entry [ [string] ] [EOL] note [ [string] ] = entry [ [string] ] [EOL] note [ [string] ] = entry [ [string] ] [EOL] return note [EOL] [EOL] def get_note_list ( self , since = None , tags = [ ] ) : [EOL] [docstring] [EOL] [comment] [EOL] status = [number] [EOL] note_list = [ ] [EOL] mark = None [EOL] [EOL] if self . api is None : [EOL] return [ ] , - [number] [EOL] [EOL] while True : [EOL] [EOL] try : [EOL] data = self . api . note . index ( data = True , mark = mark , limit = NOTE_FETCH_LENGTH ) [EOL] [EOL] note_list . extend ( map ( self . _convert_index_to_note , data [ [string] ] ) ) [EOL] [EOL] if [string] not in data : [EOL] break [EOL] mark = data [ [string] ] [EOL] [EOL] except ConnectionError as e : [EOL] self . status = [string] [EOL] status = - [number] [EOL] break [EOL] except RequestException as e : [EOL] [comment] [EOL] status = - [number] [EOL] break [EOL] except ValueError as e : [EOL] [comment] [EOL] status = - [number] [EOL] break [EOL] [EOL] [comment] [EOL] [comment] [EOL] if ( len ( tags ) > [number] ) : [EOL] note_list = [ n for n in note_list if ( len ( set ( n [ [string] ] ) . intersection ( tags ) ) > [number] ) ] [EOL] [EOL] if since is not None : [EOL] note_list = [ n for n in note_list if n [ [string] ] > since ] [EOL] [EOL] return note_list , status [EOL] [EOL] def trash_note ( self , note_id ) : [EOL] [docstring] [EOL] [comment] [EOL] note , status = self . get_note ( note_id ) [EOL] if ( status == - [number] ) : [EOL] return note , status [EOL] [comment] [EOL] note [ [string] ] = True [EOL] [comment] [EOL] return self . update_note ( note ) [EOL] [EOL] def delete_note ( self , note_id ) : [EOL] [docstring] [EOL] [comment] [EOL] note , status = self . trash_note ( note_id ) [EOL] if ( status == - [number] ) : [EOL] return note , status [EOL] [EOL] try : [EOL] [comment] [EOL] self . api . note . delete ( note_id ) [EOL] except ConnectionError as e : [EOL] self . status = [string] [EOL] return e , - [number] [EOL] except RequestException as e : [EOL] return e , - [number] [EOL] return { } , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $simperium.core.Api$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Set , Dict [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import simplenote_cli [EOL] import os , time , re , glob , json , copy , threading [EOL] from . import utils [EOL] from . simplenote import Simplenote [EOL] import logging [EOL] [EOL] class ReadError ( RuntimeError ) : [EOL] pass [EOL] [EOL] class WriteError ( RuntimeError ) : [EOL] pass [EOL] [EOL] class NotesDB ( ) : [EOL] [docstring] [EOL] def __init__ ( self , config , log , update_view ) : [EOL] self . config = config [EOL] self . log = log [EOL] self . update_view = update_view [EOL] [EOL] self . last_sync = [number] [comment] [EOL] self . sync_lock = threading . Lock ( ) [EOL] self . go_cond = threading . Condition ( ) [EOL] [EOL] [comment] [EOL] if not os . path . exists ( self . config . get_config ( [string] ) ) : [EOL] os . mkdir ( self . config . get_config ( [string] ) ) [EOL] [EOL] now = time . time ( ) [EOL] [comment] [EOL] fnlist = glob . glob ( self . helper_key_to_fname ( [string] ) ) [EOL] [EOL] self . notes = { } [EOL] [EOL] for fn in fnlist : [EOL] try : [EOL] n = json . load ( open ( fn , [string] ) ) [EOL] except IOError as e : [EOL] raise ReadError ( [string] . format ( fn , str ( e ) ) ) [EOL] except ValueError as e : [EOL] raise ReadError ( [string] . format ( fn , str ( e ) ) ) [EOL] else : [EOL] [comment] [EOL] localkey = n . get ( [string] , os . path . splitext ( os . path . basename ( fn ) ) [ [number] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] n [ [string] ] = now [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] n [ [string] ] = localkey [EOL] [EOL] utils . sanitise_dates ( n ) [EOL] [EOL] [comment] [EOL] self . notes [ localkey ] = n [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . simplenote = Simplenote ( self . config . get_config ( [string] ) , self . config . get_config ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . threaded_syncing_keys = { } [EOL] [EOL] def filtered_notes_sort ( self , filtered_notes , sort_mode = [string] ) : [EOL] if sort_mode == [string] : [EOL] if self . config . get_config ( [string] ) == [string] : [EOL] filtered_notes . sort ( key = utils . sort_by_modify_date_pinned , reverse = True ) [EOL] else : [EOL] filtered_notes . sort ( key = lambda o : - float ( o . note . get ( [string] , [number] ) ) ) [EOL] elif sort_mode == [string] : [EOL] if self . config . get_config ( [string] ) == [string] : [EOL] filtered_notes . sort ( key = utils . sort_by_title_pinned ) [EOL] else : [EOL] filtered_notes . sort ( key = lambda o : utils . get_note_title ( o . note ) ) [EOL] elif sort_mode == [string] : [EOL] pinned = self . config . get_config ( [string] ) [EOL] utils . sort_notes_by_tags ( filtered_notes , pinned_ontop = pinned ) [EOL] [EOL] def filter_notes ( self , search_string = None , search_mode = [string] , sort_mode = [string] ) : [EOL] [docstring] [EOL] [EOL] if search_mode == [string] : [EOL] filtered_notes , match_regexp , active_notes = self . filter_notes_gstyle ( search_string ) [EOL] else : [EOL] filtered_notes , match_regexp , active_notes = self . filter_notes_regex ( search_string ) [EOL] [EOL] self . filtered_notes_sort ( filtered_notes , sort_mode ) [EOL] [EOL] return filtered_notes , match_regexp , active_notes [EOL] [EOL] def _helper_gstyle_tagmatch ( self , tag_pats , note ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if not tag_pats : [EOL] [comment] [EOL] return [number] [EOL] [EOL] note_tags = note . get ( [string] ) [EOL] [EOL] if not note_tags : [EOL] [comment] [EOL] return [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] tag_pats_matched = [number] [EOL] for tp in tag_pats : [EOL] tp = tp . lower ( ) [EOL] for t in note_tags : [EOL] if tp in t . lower ( ) : [EOL] tag_pats_matched += [number] [EOL] break [EOL] [EOL] if tag_pats_matched == len ( tag_pats ) : [EOL] [comment] [EOL] return [number] [EOL] [EOL] [comment] [EOL] return [number] [EOL] [EOL] def _helper_gstyle_wordmatch ( self , word_pats , content ) : [EOL] if not word_pats : [EOL] return True [EOL] [EOL] word_pats_matched = [number] [EOL] lowercase_content = content . lower ( ) [comment] [EOL] for wp in word_pats : [EOL] wp = wp . lower ( ) [comment] [EOL] if wp in lowercase_content : [EOL] word_pats_matched += [number] [EOL] [EOL] if word_pats_matched == len ( word_pats ) : [EOL] return True ; [EOL] [EOL] return False [EOL] [EOL] def filter_notes_gstyle ( self , search_string = None ) : [EOL] [EOL] filtered_notes = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] active_notes = [number] [EOL] [EOL] if not search_string : [EOL] for k in self . notes : [EOL] n = self . notes [ k ] [EOL] if n . get ( [string] ) : [EOL] continue [EOL] active_notes += [number] [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] ) ) [EOL] [EOL] return filtered_notes , [ ] , active_notes [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] groups = re . findall ( [string] , search_string ) [EOL] all_pats = [ [ ] for _ in range ( [number] ) ] [EOL] [EOL] search_trash = False [EOL] for g in groups : [EOL] if g [ [number] ] == [string] : [EOL] groups . remove ( g ) [EOL] search_trash = True [EOL] [EOL] [comment] [EOL] for g in groups : [EOL] for i in range ( [number] ) : [EOL] if g [ i ] : all_pats [ i ] . append ( g [ i ] ) [EOL] [EOL] for k in self . notes : [EOL] n = self . notes [ k ] [EOL] [EOL] if not search_trash and n . get ( [string] ) : [EOL] continue [EOL] [EOL] active_notes += [number] [EOL] [EOL] if search_trash and len ( groups ) == [number] : [EOL] [comment] [EOL] if n . get ( [string] ) : [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] ) ) [EOL] continue [EOL] [EOL] tagmatch = self . _helper_gstyle_tagmatch ( all_pats [ [number] ] , n ) [EOL] [EOL] word_pats = all_pats [ [number] ] + all_pats [ [number] ] [EOL] [EOL] if tagmatch and self . _helper_gstyle_wordmatch ( word_pats , n . get ( [string] ) ) : [EOL] [comment] [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] if tagmatch == [number] else [number] ) ) [EOL] [EOL] return filtered_notes , [string] . join ( all_pats [ [number] ] + all_pats [ [number] ] ) , active_notes [EOL] [EOL] def filter_notes_regex ( self , search_string = None ) : [EOL] [docstring] [EOL] sspat = utils . build_regex_search ( search_string ) [EOL] [EOL] filtered_notes = [ ] [EOL] active_notes = [number] [comment] [EOL] [EOL] for k in self . notes : [EOL] n = self . notes [ k ] [EOL] [EOL] active_notes += [number] [EOL] [EOL] if not sspat : [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] ) ) [EOL] continue [EOL] [EOL] if self . config . get_config ( [string] ) == [string] : [EOL] tag_matched = False [EOL] for t in n . get ( [string] ) : [EOL] if sspat . search ( t ) : [EOL] tag_matched = True [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] ) ) [EOL] break [EOL] if tag_matched : [EOL] continue [EOL] [EOL] if sspat . search ( n . get ( [string] ) ) : [EOL] filtered_notes . append ( utils . KeyValueObject ( key = k , note = n , tagfound = [number] ) ) [EOL] [EOL] match_regexp = search_string if sspat else [string] [EOL] return filtered_notes , match_regexp , active_notes [EOL] [EOL] def import_note ( self , note ) : [EOL] [comment] [EOL] [comment] [EOL] new_key = note [ [string] ] if note . get ( [string] ) else utils . generate_random_key ( ) [EOL] while new_key in self . notes : [EOL] new_key = utils . generate_random_key ( ) [EOL] [EOL] timestamp = time . time ( ) [EOL] [EOL] try : [EOL] modifydate = float ( note . get ( [string] , timestamp ) ) [EOL] createdate = float ( note . get ( [string] , timestamp ) ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] new_note = { [string] : note . get ( [string] , [string] ) , [string] : note . get ( [string] , False ) , [string] : modifydate , [string] : createdate , [string] : [number] , [string] : [number] , [string] : note . get ( [string] , [ ] ) , [string] : note . get ( [string] , [ ] ) } [EOL] [EOL] [comment] [EOL] if not isinstance ( new_note [ [string] ] , str ) : [EOL] raise ValueError ( [string] ) [EOL] if not new_note [ [string] ] in ( True , False ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] for n in ( new_note [ [string] ] , new_note [ [string] ] ) : [EOL] if not [number] <= n <= timestamp : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if not isinstance ( new_note [ [string] ] , list ) : [EOL] raise ValueError ( [string] ) [EOL] for tag in new_note [ [string] ] : [EOL] if not isinstance ( tag , str ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if not isinstance ( new_note [ [string] ] , list ) : [EOL] raise ValueError ( [string] ) [EOL] for tag in new_note [ [string] ] : [EOL] if not isinstance ( tag , str ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . notes [ new_key ] = new_note [EOL] [EOL] return new_key [EOL] [EOL] def create_note ( self , content , markdown = False ) : [EOL] [comment] [EOL] [comment] [EOL] new_key = utils . generate_random_key ( ) [EOL] while new_key in self . notes : [EOL] new_key = utils . generate_random_key ( ) [EOL] [EOL] timestamp = time . time ( ) [EOL] [EOL] [comment] [EOL] new_note = { [string] : new_key , [string] : content , [string] : False , [string] : timestamp , [string] : timestamp , [string] : [number] , [string] : [number] , [string] : [ ] , [string] : [ ] , } [EOL] [EOL] if markdown : [EOL] new_note [ [string] ] . append ( [string] ) [EOL] [EOL] self . notes [ new_key ] = new_note [EOL] [EOL] return new_key [EOL] [EOL] def get_note ( self , key ) : [EOL] return self . notes [ key ] [EOL] [EOL] def get_note_systemtags ( self , key ) : [EOL] return self . notes [ key ] . get ( [string] ) [EOL] [EOL] def get_note_tags ( self , key ) : [EOL] return self . notes [ key ] . get ( [string] ) [EOL] [EOL] def get_note_content ( self , key ) : [EOL] return self . notes [ key ] . get ( [string] ) [EOL] [EOL] def flag_what_changed ( self , note , what_changed ) : [EOL] if [string] not in note : [EOL] note [ [string] ] = [ ] [EOL] if what_changed not in note [ [string] ] : [EOL] note [ [string] ] . append ( what_changed ) [EOL] [EOL] def set_note_deleted ( self , key , deleted ) : [EOL] n = self . notes [ key ] [EOL] if n [ [string] ] != deleted : [EOL] n [ [string] ] = deleted [EOL] n [ [string] ] = time . time ( ) [EOL] self . flag_what_changed ( n , [string] ) [EOL] self . log ( [string] . format ( [string] if deleted else [string] , key ) ) [EOL] [EOL] def set_note_content ( self , key , content ) : [EOL] n = self . notes [ key ] [EOL] old_content = n . get ( [string] ) [EOL] if content != old_content : [EOL] n [ [string] ] = content [EOL] n [ [string] ] = time . time ( ) [EOL] self . flag_what_changed ( n , [string] ) [EOL] self . log ( [string] . format ( key ) ) [EOL] [EOL] def set_note_tags ( self , key , tags ) : [EOL] n = self . notes [ key ] [EOL] old_tags = n . get ( [string] ) [EOL] tags = utils . sanitise_tags ( tags ) [EOL] if tags != old_tags : [EOL] n [ [string] ] = tags [EOL] n [ [string] ] = time . time ( ) [EOL] self . flag_what_changed ( n , [string] ) [EOL] self . log ( [string] . format ( key ) ) [EOL] [EOL] def set_note_pinned ( self , key , pinned ) : [EOL] n = self . notes [ key ] [EOL] old_pinned = utils . note_pinned ( n ) [EOL] if pinned != old_pinned : [EOL] if [string] not in n : [EOL] n [ [string] ] = [ ] [EOL] systemtags = n [ [string] ] [EOL] if pinned : [EOL] systemtags . append ( [string] ) [EOL] else : [EOL] systemtags . remove ( [string] ) [EOL] n [ [string] ] = time . time ( ) [EOL] self . flag_what_changed ( n , [string] ) [EOL] self . log ( [string] . format ( [string] if pinned else [string] , key ) ) [EOL] [EOL] def set_note_markdown ( self , key , markdown ) : [EOL] n = self . notes [ key ] [EOL] old_markdown = utils . note_markdown ( n ) [EOL] if markdown != old_markdown : [EOL] if [string] not in n : [EOL] n [ [string] ] = [ ] [EOL] systemtags = n [ [string] ] [EOL] if markdown : [EOL] systemtags . append ( [string] ) [EOL] else : [EOL] systemtags . remove ( [string] ) [EOL] n [ [string] ] = time . time ( ) [EOL] self . flag_what_changed ( n , [string] ) [EOL] self . log ( [string] . format ( [string] if markdown else [string] , key ) ) [EOL] [EOL] def helper_key_to_fname ( self , k ) : [EOL] return os . path . join ( self . config . get_config ( [string] ) , k ) + [string] [EOL] [EOL] def helper_save_note ( self , k , note ) : [EOL] [comment] [EOL] fn = self . helper_key_to_fname ( k ) [EOL] json . dump ( note , open ( fn , [string] ) , indent = [number] ) [EOL] [EOL] [comment] [EOL] note [ [string] ] = time . time ( ) [EOL] [EOL] def sync_notes ( self , server_sync = True , full_sync = True ) : [EOL] [docstring] [EOL] [EOL] local_updates = { } [EOL] local_deletes = { } [EOL] server_keys = { } [EOL] now = time . time ( ) [EOL] [EOL] sync_start_time = time . time ( ) [EOL] sync_errors = [number] [EOL] skip_remote_syncing = False [EOL] failed_update_keys = set ( ) [EOL] [EOL] if server_sync and full_sync : [EOL] self . log ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for note_index , local_key in enumerate ( set ( self . notes . keys ( ) ) ) : [EOL] n = self . notes [ local_key ] [EOL] [EOL] [comment] [EOL] if not n . get ( [string] ) or float ( n . get ( [string] ) ) > float ( n . get ( [string] ) ) : [EOL] [EOL] savedate = float ( n . get ( [string] ) ) [EOL] if float ( n . get ( [string] ) ) > savedate or float ( n . get ( [string] ) ) > savedate : [EOL] [comment] [EOL] [comment] [EOL] local_updates [ local_key ] = True [EOL] [EOL] if not server_sync : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [EOL] [comment] [EOL] cn = copy . deepcopy ( n ) [EOL] if [string] in n : [EOL] del n [ [string] ] [EOL] [EOL] if [string] in cn : [EOL] del cn [ [string] ] [EOL] [EOL] if [string] in cn : [EOL] del cn [ [string] ] [EOL] del cn [ [string] ] [EOL] del cn [ [string] ] [EOL] [EOL] if [string] in cn : [EOL] if [string] not in cn [ [string] ] : [EOL] del cn [ [string] ] [EOL] if [string] not in cn [ [string] ] and [string] in cn : [EOL] del cn [ [string] ] [EOL] if [string] not in cn [ [string] ] : [EOL] del cn [ [string] ] [EOL] if [string] not in cn [ [string] ] : [EOL] del cn [ [string] ] [EOL] del cn [ [string] ] [EOL] [EOL] uret = self . simplenote . update_note ( cn ) [EOL] [EOL] if uret [ [number] ] == [number] : [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] del self . notes [ local_key ] [EOL] k = uret [ [number] ] [ [string] ] [EOL] n . update ( uret [ [number] ] ) [EOL] n [ [string] ] = now [EOL] n [ [string] ] = k [EOL] self . notes [ k ] = n [EOL] [EOL] local_updates [ k ] = True [EOL] if local_key != k : [EOL] [comment] [EOL] local_deletes [ local_key ] = True [EOL] if local_key in local_updates : [EOL] del local_updates [ local_key ] [EOL] [EOL] self . log ( [string] . format ( local_key ) ) [EOL] else : [EOL] self . log ( [string] . format ( local_key ) ) [EOL] sync_errors += [number] [EOL] failed_update_keys . add ( local_key ) [EOL] [EOL] [comment] [EOL] if not server_sync : [EOL] nl = [ ] [EOL] else : [EOL] nl = self . simplenote . get_note_list ( ) [EOL] [EOL] if nl [ [number] ] == [number] : [comment] [EOL] nl = nl [ [number] ] [EOL] else : [EOL] self . log ( [string] ) [EOL] sync_errors += [number] [EOL] nl = [ ] [EOL] skip_remote_syncing = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not skip_remote_syncing : [EOL] len_nl = len ( nl ) [EOL] for note_index , n in enumerate ( nl ) : [EOL] [EOL] utils . sanitise_dates ( n ) [EOL] k = n [ [string] ] [EOL] server_keys [ k ] = True [EOL] [comment] [EOL] [comment] [EOL] if k in self . notes : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if n [ [string] ] > self . notes [ k ] . get ( [string] , - [number] ) or ( n [ [string] ] > self . notes [ k ] [ [string] ] and n [ [string] ] == self . notes [ k ] [ [string] ] ) : [EOL] self . notes [ k ] . update ( n ) [EOL] local_updates [ k ] = True [EOL] self . notes [ k ] [ [string] ] = now [EOL] self . notes [ k ] [ [string] ] = k [EOL] self . log ( [string] . format ( k ) ) [EOL] else : [EOL] [comment] [EOL] self . notes [ k ] = n [EOL] local_updates [ k ] = True [EOL] self . notes [ k ] [ [string] ] = now [EOL] self . notes [ k ] [ [string] ] = k [EOL] self . log ( [string] . format ( k ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if server_sync and full_sync and not skip_remote_syncing : [EOL] for local_key in list ( self . notes . keys ( ) ) : [EOL] if local_key not in server_keys and local_key not in failed_update_keys : [EOL] del self . notes [ local_key ] [EOL] local_deletes [ local_key ] = True [EOL] [EOL] [comment] [EOL] [EOL] for k in list ( local_updates . keys ( ) ) : [EOL] try : [EOL] self . helper_save_note ( k , self . notes [ k ] ) [EOL] except WriteError as e : [EOL] raise WriteError ( str ( e ) ) [EOL] self . log ( [string] . format ( k ) ) [EOL] [EOL] for k in list ( local_deletes . keys ( ) ) : [EOL] fn = self . helper_key_to_fname ( k ) [EOL] if os . path . exists ( fn ) : [EOL] os . unlink ( fn ) [EOL] self . log ( [string] . format ( k ) ) [EOL] [EOL] if not sync_errors : [EOL] self . last_sync = sync_start_time [EOL] [EOL] [comment] [EOL] if len ( local_updates ) > [number] or len ( local_deletes ) > [number] : [EOL] self . update_view ( ) [EOL] [EOL] if server_sync and full_sync : [EOL] self . log ( [string] ) [EOL] [EOL] return sync_errors [EOL] [EOL] def get_note_version ( self , key , version ) : [EOL] gret = self . simplenote . get_note ( key , version ) [EOL] return gret [ [number] ] if gret [ [number] ] == [number] else None [EOL] [EOL] def get_note_status ( self , key ) : [EOL] n = self . notes [ key ] [EOL] o = utils . KeyValueObject ( saved = False , synced = False , modified = False ) [EOL] modifydate = float ( n [ [string] ] ) [EOL] savedate = float ( n [ [string] ] ) [EOL] syncdate = float ( n [ [string] ] ) [EOL] [EOL] if savedate > modifydate : [EOL] o . saved = True [EOL] else : [EOL] o . modified = True [EOL] [EOL] if syncdate > modifydate : [EOL] o . synced = True [EOL] [EOL] return o [EOL] [EOL] def verify_all_saved ( self ) : [EOL] all_saved = True [EOL] self . sync_lock . acquire ( ) [EOL] for k in list ( self . notes . keys ( ) ) : [EOL] o = self . get_note_status ( k ) [EOL] if not o . saved : [EOL] all_saved = False [EOL] break [EOL] self . sync_lock . release ( ) [EOL] return all_saved [EOL] [EOL] def sync_now ( self , do_server_sync = True ) : [EOL] self . sync_lock . acquire ( ) [EOL] n_errors = self . sync_notes ( server_sync = do_server_sync , full_sync = True if not self . last_sync else False ) [EOL] self . sync_lock . release ( ) [EOL] return n_errors [EOL] [EOL] [comment] [EOL] def sync_worker ( self , do_server_sync ) : [EOL] time . sleep ( [number] ) [comment] [EOL] self . log ( [string] ) [EOL] self . sync_now ( do_server_sync ) [EOL] while True : [EOL] self . go_cond . acquire ( ) [EOL] self . go_cond . wait ( [number] ) [EOL] self . sync_now ( do_server_sync ) [EOL] self . go_cond . release ( ) [EOL] [EOL] def sync_worker_go ( self ) : [EOL] self . go_cond . acquire ( ) [EOL] self . go_cond . notify ( ) [EOL] self . go_cond . release ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Lock$ 0 0 0 0 0 0 0 0 0 $threading.Condition$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $simplenote_cli.simplenote.Simplenote$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $simplenote_cli.utils.KeyValueObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $simplenote_cli.utils.KeyValueObject$ 0 0 0 0 0 0 0 0 $simplenote_cli.utils.KeyValueObject$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $simplenote_cli.utils.KeyValueObject$ 0 0 0 0 0 0 0 $simplenote_cli.utils.KeyValueObject$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Any , Dict , Literal , List [EOL] import typing [EOL] import typing_extensions [EOL] import re , urwid [EOL] [EOL] class ViewHelp ( urwid . ListBox ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] [EOL] self . descr_width = [number] [EOL] self . config_width = [number] [EOL] [EOL] lines = [ ] [EOL] lines . extend ( self . create_kb_help_lines ( [string] , [string] ) ) [EOL] lines . extend ( self . create_kb_help_lines ( [string] , [string] ) ) [EOL] lines . extend ( self . create_kb_help_lines ( [string] , [string] ) ) [EOL] lines . extend ( self . create_config_help_lines ( ) ) [EOL] lines . extend ( self . create_color_help_lines ( ) ) [EOL] lines . append ( urwid . Text ( ( [string] , [string] ) ) ) [EOL] [EOL] super ( ViewHelp , self ) . __init__ ( urwid . SimpleFocusListWalker ( lines ) ) [EOL] [EOL] def get_status_bar ( self ) : [EOL] cur = - [number] [EOL] total = [number] [EOL] if len ( self . body . positions ( ) ) > [number] : [EOL] cur = self . focus_position [EOL] total = len ( self . body . positions ( ) ) [EOL] [EOL] status_title = urwid . AttrMap ( urwid . Text ( [string] , wrap = [string] ) , [string] ) [EOL] status_index = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + str ( cur + [number] ) + [string] + str ( total ) ) , [string] ) ) [EOL] return urwid . AttrMap ( urwid . Columns ( [ status_title , status_index ] ) , [string] ) [EOL] [EOL] def create_kb_help_lines ( self , header , use ) : [EOL] lines = [ urwid . AttrMap ( urwid . Text ( [string] ) , [string] , [string] ) ] [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( [string] + header ) , [string] , [string] ) ) [EOL] for c in self . config . keybinds : [EOL] if use not in self . config . get_keybind_use ( c ) : [EOL] continue [EOL] lines . append ( urwid . AttrMap ( urwid . AttrMap ( urwid . Text ( [ ( [string] , ( [string] + str ( self . descr_width ) + [string] ) . format ( self . config . get_keybind_descr ( c ) ) ) , ( [string] , ( [string] + str ( self . config_width ) + [string] ) . format ( [string] + c ) ) , ( [string] , [string] + self . config . get_keybind ( c ) + [string] ) ] ) , attr_map = None , focus_map = { [string] : [string] , [string] : [string] , [string] : [string] } ) , [string] , [string] ) ) [EOL] return lines [EOL] [EOL] def create_config_help_lines ( self ) : [EOL] lines = [ urwid . AttrMap ( urwid . Text ( [string] ) , [string] , [string] ) ] [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( [string] ) , [string] , [string] ) ) [EOL] for c in self . config . configs : [EOL] if c in [ [string] , [string] ] : continue [EOL] lines . append ( urwid . AttrMap ( urwid . AttrMap ( urwid . Text ( [ ( [string] , ( [string] + str ( self . descr_width ) + [string] ) . format ( self . config . get_config_descr ( c ) ) ) , ( [string] , ( [string] + str ( self . config_width ) + [string] ) . format ( [string] + c ) ) , ( [string] , [string] + self . config . get_config ( c ) + [string] ) ] ) , attr_map = None , focus_map = { [string] : [string] , [string] : [string] , [string] : [string] } ) , [string] , [string] ) ) [EOL] return lines [EOL] [EOL] def create_color_help_lines ( self ) : [EOL] lines = [ urwid . AttrMap ( urwid . Text ( [string] ) , [string] , [string] ) ] [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( [string] ) , [string] , [string] ) ) [EOL] fmap = { } [EOL] for c in self . config . colors : [EOL] fmap [ re . search ( [string] , c ) . group ( [number] ) ] = [string] [EOL] for c in self . config . colors : [EOL] lines . append ( urwid . AttrMap ( urwid . AttrMap ( urwid . Text ( [ ( [string] , ( [string] + str ( self . descr_width ) + [string] ) . format ( self . config . get_color_descr ( c ) ) ) , ( [string] , ( [string] + str ( self . config_width ) + [string] ) . format ( [string] + c ) ) , ( re . search ( [string] , c ) . group ( [number] ) , [string] + self . config . get_color ( c ) + [string] ) ] ) , attr_map = None , focus_map = fmap ) , [string] , [string] ) ) [EOL] return lines [EOL] [EOL] def keypress ( self , size , key ) : [EOL] return key [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , IO [EOL] import typing [EOL] import os , json , tempfile , time [EOL] [EOL] def tempfile_create ( note , raw = False , tempdir = None , ext_override = None ) : [EOL] if raw : [EOL] [comment] [EOL] tf = tempfile . NamedTemporaryFile ( suffix = [string] , prefix = _get_tempfile_prefix ( ) , delete = False , dir = tempdir ) [EOL] [EOL] contents = json . dumps ( note , indent = [number] ) [EOL] tf . write ( contents . encode ( [string] ) ) [EOL] tf . flush ( ) [EOL] else : [EOL] ext = [string] [EOL] if ext_override : [EOL] ext = ext_override [EOL] elif note and [string] in note and [string] in note [ [string] ] : [EOL] ext = [string] [EOL] tf = tempfile . NamedTemporaryFile ( suffix = ext , prefix = _get_tempfile_prefix ( ) , delete = False , dir = tempdir ) [EOL] if note : [EOL] contents = note [ [string] ] [EOL] tf . write ( contents . encode ( [string] ) ) [EOL] tf . flush ( ) [EOL] return tf [EOL] [EOL] def _get_tempfile_prefix ( ) : [EOL] return [string] . format ( int ( time . time ( ) ) ) [EOL] [EOL] def tempfile_delete ( tf ) : [EOL] if tf : [EOL] tf . close ( ) [EOL] os . unlink ( tf . name ) [EOL] [EOL] def tempfile_name ( tf ) : [EOL] if tf : [EOL] return tf . name [EOL] return [string] [EOL] [EOL] def tempfile_content ( tf ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not tf : [EOL] return None [EOL] [EOL] with open ( tf . name , [string] ) as f : [EOL] updated_tf_contents = f . read ( ) [EOL] return updated_tf_contents . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any , Tuple , Union , Literal , Match , List [EOL] import datetime [EOL] import time [EOL] import typing [EOL] import typing_extensions [EOL] import re , time , datetime , urwid , subprocess [EOL] from . import utils , view_note [EOL] [EOL] class ViewTitles ( urwid . ListBox ) : [EOL] [EOL] def __init__ ( self , config , args ) : [EOL] self . config = config [EOL] self . ndb = args [ [string] ] [EOL] self . search_string = args [ [string] ] [EOL] self . log = args [ [string] ] [EOL] self . note_list , self . match_regex , self . all_notes_cnt = self . ndb . filter_notes ( self . search_string , sort_mode = self . config . get_config ( [string] ) ) [EOL] super ( ViewTitles , self ) . __init__ ( urwid . SimpleFocusListWalker ( self . get_note_titles ( ) ) ) [EOL] [EOL] def update_note_list ( self , search_string , search_mode = [string] , sort_mode = [string] ) : [EOL] self . search_string = search_string [EOL] self . note_list , self . match_regex , self . all_notes_cnt = self . ndb . filter_notes ( self . search_string , search_mode , sort_mode = sort_mode ) [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_titles ( ) ) [EOL] if len ( self . note_list ) == [number] : [EOL] self . log ( [string] ) [EOL] else : [EOL] self . focus_position = [number] [EOL] [EOL] def sort_note_list ( self , sort_mode ) : [EOL] self . ndb . filtered_notes_sort ( self . note_list , sort_mode ) [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( self . get_note_titles ( ) ) [EOL] [EOL] def format_title ( self , note ) : [EOL] [docstring] [EOL] [EOL] t = time . localtime ( float ( note [ [string] ] ) ) [EOL] mod_time = time . strftime ( self . config . get_config ( [string] ) , t ) [EOL] title = utils . get_note_title ( note ) [EOL] flags = utils . get_note_flags ( note ) [EOL] tags = utils . get_note_tags ( note ) [EOL] [EOL] [comment] [EOL] dt = datetime . datetime . fromtimestamp ( time . mktime ( t ) ) [EOL] if dt > datetime . datetime . now ( ) - datetime . timedelta ( days = [number] ) : [EOL] note_age = [string] [comment] [EOL] elif dt > datetime . datetime . now ( ) - datetime . timedelta ( weeks = [number] ) : [EOL] note_age = [string] [comment] [EOL] elif dt > datetime . datetime . now ( ) - datetime . timedelta ( weeks = [number] ) : [EOL] note_age = [string] [comment] [EOL] elif dt > datetime . datetime . now ( ) - datetime . timedelta ( weeks = [number] ) : [EOL] note_age = [string] [comment] [EOL] else : [EOL] note_age = [string] [comment] [EOL] [EOL] def recursive_format ( title_format ) : [EOL] if not title_format : [EOL] return None [EOL] fmt = re . search ( [string] , title_format ) [EOL] if not fmt : [EOL] m = ( [string] , urwid . AttrMap ( urwid . Text ( title_format ) , [string] ) ) [EOL] l_fmt = None [EOL] r_fmt = None [EOL] else : [EOL] l = fmt . group ( [number] ) if fmt . group ( [number] ) else None [EOL] m = None [EOL] r = fmt . group ( [number] ) if fmt . group ( [number] ) else None [EOL] align = [string] if fmt . group ( [number] ) == [string] else [string] [EOL] width = int ( fmt . group ( [number] ) ) if fmt . group ( [number] ) else [string] [EOL] if fmt . group ( [number] ) == [string] : [EOL] m = ( width , urwid . AttrMap ( urwid . Text ( flags , align = align , wrap = [string] ) , [string] ) ) [EOL] elif fmt . group ( [number] ) == [string] : [EOL] m = ( width , urwid . AttrMap ( urwid . Text ( mod_time , align = align , wrap = [string] ) , [string] ) ) [EOL] elif fmt . group ( [number] ) == [string] : [EOL] m = ( width , urwid . AttrMap ( urwid . Text ( tags , align = align , wrap = [string] ) , [string] ) ) [EOL] elif fmt . group ( [number] ) == [string] : [EOL] if note_age == [string] : attr = [string] [EOL] elif note_age == [string] : attr = [string] [EOL] elif note_age == [string] : attr = [string] [EOL] elif note_age == [string] : attr = [string] [EOL] elif note_age == [string] : attr = [string] [EOL] if width != [string] : [EOL] m = ( width , urwid . AttrMap ( urwid . Text ( title , align = align , wrap = [string] ) , attr ) ) [EOL] else : [EOL] m = urwid . AttrMap ( urwid . Text ( title , align = align , wrap = [string] ) , attr ) [EOL] l_fmt = recursive_format ( l ) [EOL] r_fmt = recursive_format ( r ) [EOL] [EOL] tmp = [ ] [EOL] if l_fmt : tmp . extend ( l_fmt ) [EOL] tmp . append ( m ) [EOL] if r_fmt : tmp . extend ( r_fmt ) [EOL] return tmp [EOL] [EOL] [comment] [EOL] title_line = recursive_format ( self . config . get_config ( [string] ) ) [EOL] return urwid . Columns ( title_line ) [EOL] [EOL] def get_note_title ( self , note ) : [EOL] return urwid . AttrMap ( self . format_title ( note ) , [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] def get_note_titles ( self ) : [EOL] lines = [ ] [EOL] for n in self . note_list : [EOL] lines . append ( self . get_note_title ( n . note ) ) [EOL] return lines [EOL] [EOL] def get_status_bar ( self ) : [EOL] cur = - [number] [EOL] total = [number] [EOL] if len ( self . body . positions ( ) ) > [number] : [EOL] cur = self . focus_position [EOL] total = len ( self . body . positions ( ) ) [EOL] [EOL] hdr = [string] [EOL] [EOL] [comment] [EOL] hdr += [string] + self . ndb . simplenote . status + [string] [EOL] [EOL] if self . search_string != None : [EOL] hdr += [string] + self . search_string [EOL] [EOL] status_title = urwid . AttrMap ( urwid . Text ( hdr , wrap = [string] ) , [string] ) [EOL] status_index = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + str ( cur + [number] ) + [string] + str ( total ) ) , [string] ) ) [EOL] return urwid . AttrMap ( urwid . Columns ( [ status_title , status_index ] ) , [string] ) [EOL] [EOL] def update_note_title ( self , key = None ) : [EOL] if not key : [EOL] self . body [ self . focus_position ] = self . get_note_title ( self . note_list [ self . focus_position ] . note ) [EOL] else : [EOL] for i in range ( len ( self . note_list ) ) : [EOL] if self . note_list [ i ] . note [ [string] ] == key : [EOL] self . body [ i ] = self . get_note_title ( self . note_list [ i ] . note ) [EOL] [EOL] def focus_note ( self , key ) : [EOL] for i in range ( len ( self . note_list ) ) : [EOL] if [string] in self . note_list [ i ] . note and self . note_list [ i ] . note [ [string] ] == key : [EOL] self . focus_position = i [EOL] [EOL] def keypress ( self , size , key ) : [EOL] return key [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Union[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple , Literal , List [EOL] import typing [EOL] import io [EOL] import typing_extensions [EOL] import urwid [EOL] [EOL] class ViewLog ( urwid . ListBox ) : [EOL] [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] super ( ViewLog , self ) . __init__ ( urwid . SimpleFocusListWalker ( [ ] ) ) [EOL] [EOL] def update_log ( self ) : [EOL] lines = [ ] [EOL] f = open ( self . config . logfile ) [EOL] for line in f : [EOL] lines . append ( urwid . AttrMap ( urwid . Text ( line . rstrip ( ) ) , [string] , [string] ) ) [EOL] f . close ( ) [EOL] if self . config . get_config ( [string] ) == [string] : [EOL] lines . reverse ( ) [EOL] self . body [ : ] = urwid . SimpleFocusListWalker ( lines ) [EOL] self . focus_position = [number] [EOL] [EOL] def get_status_bar ( self ) : [EOL] cur = - [number] [EOL] total = [number] [EOL] if len ( self . body . positions ( ) ) > [number] : [EOL] cur = self . focus_position [EOL] total = len ( self . body . positions ( ) ) [EOL] [EOL] status_title = urwid . AttrMap ( urwid . Text ( [string] , wrap = [string] ) , [string] ) [EOL] status_index = ( [string] , urwid . AttrMap ( urwid . Text ( [string] + str ( cur + [number] ) + [string] + str ( total ) ) , [string] ) ) [EOL] return urwid . AttrMap ( urwid . Columns ( [ status_title , status_index ] ) , [string] ) [EOL] [EOL] def keypress ( self , size , key ) : [EOL] return key [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[typing_extensions.Literal,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0