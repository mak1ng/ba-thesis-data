from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import API [EOL] from django . db import models [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] user = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] content = models . TextField ( ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] [EOL] class Like ( models . Model ) : [EOL] post = models . ForeignKey ( Post , related_name = [string] , on_delete = models . CASCADE ) [EOL] user = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Post]$ 0 0 0 0 0 0 0 $typing.Type[API.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Dict , Type , Any , Tuple [EOL] import typing [EOL] import API [EOL] from django . contrib . auth . models import User [EOL] from rest_framework import serializers [EOL] [EOL] from pyhunter import PyHunter [EOL] import clearbit [EOL] [EOL] from . models import Post , Like [EOL] [EOL] clearbit . key = [string] [EOL] [EOL] hunter = PyHunter ( [string] ) [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : True , [string] : True } , [string] : { [string] : True } } [EOL] [EOL] def create ( self , validated_data ) : [EOL] try : [EOL] verify = hunter . email_verifier ( validated_data [ [string] ] ) [EOL] except : [EOL] verify = None [EOL] if verify and verify [ [string] ] == [string] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] try : [EOL] found = clearbit . Enrichment . find ( email = validated_data [ [string] ] ) [EOL] except : [EOL] found = None [EOL] if found : [EOL] person = found [ [string] ] [ [string] ] [EOL] validated_data [ [string] ] = validated_data . get ( [string] ) or person [ [string] ] [EOL] validated_data [ [string] ] = validated_data . get ( [string] ) or person [ [string] ] [EOL] password = validated_data . pop ( [string] ) [EOL] user = User . objects . create ( ** validated_data ) [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] [EOL] class PostSerializer ( serializers . ModelSerializer ) : [EOL] user = UserSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Post [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] post = Post . objects . create ( user = self . context [ [string] ] , ** validated_data ) [EOL] return post [EOL] [EOL] [EOL] class LikeSerializer ( serializers . ModelSerializer ) : [EOL] user = UserSerializer ( read_only = True ) [EOL] post = PostSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Like [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] like = Like . objects . create ( user = self . context [ [string] ] , post = Post . objects . get ( pk = self . context [ [string] ] ) ) [EOL] return like [EOL] [EOL] def validate ( self , attrs ) : [EOL] try : [EOL] Like . objects . get ( user = self . context [ [string] ] , post = Post . objects . get ( pk = self . context [ [string] ] ) ) [EOL] except : [EOL] return { } [EOL] else : [EOL] raise serializers . ValidationError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Like]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Like]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $API.serializers.PostSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.models.Like]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class AnonUserPermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return view . basename == [string] [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class AuthUserPermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return False [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return request . user == obj [EOL] elif view . action == [string] : [EOL] return request . user == obj [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class AnonPostPermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class AuthPostPermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return request . user . id == int ( view . kwargs [ [string] ] ) [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return request . user . id == obj . user . id [EOL] elif view . action == [string] : [EOL] return request . user . id == obj . user . id [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class AnonLikePermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class AuthLikePermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if view . action == [string] : [EOL] return True [EOL] elif view . action == [string] : [EOL] return request . user . id == obj . user . id [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import API [EOL] from django . contrib . auth . models import User [EOL] from rest_framework import viewsets , mixins [EOL] from rest_framework . response import Response [EOL] from . serializers import UserSerializer , PostSerializer , LikeSerializer [EOL] from . models import Post , Like [EOL] from . permissions import * [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = User . objects . all ( ) . order_by ( [string] ) [EOL] serializer_class = UserSerializer [EOL] [EOL] def get_permissions ( self ) : [EOL] if self . request . user and self . request . user . is_authenticated : [EOL] self . permission_classes = ( AuthUserPermission , ) [EOL] else : [EOL] self . permission_classes = ( AnonUserPermission , ) [EOL] return super ( ) . get_permissions ( ) [EOL] [EOL] [EOL] class PostViewSet ( viewsets . ModelViewSet ) : [EOL] serializer_class = PostSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] return Post . objects . filter ( user = self . kwargs [ [string] ] ) [EOL] [EOL] def get_permissions ( self ) : [EOL] if self . request . user and self . request . user . is_authenticated : [EOL] self . permission_classes = ( AuthPostPermission , ) [EOL] else : [EOL] self . permission_classes = ( AnonPostPermission , ) [EOL] return super ( ) . get_permissions ( ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] serializer = self . serializer_class ( data = request . data , context = { [string] : request . user } ) [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] class LikeViewSet ( mixins . ListModelMixin , mixins . RetrieveModelMixin , mixins . CreateModelMixin , mixins . DestroyModelMixin , viewsets . GenericViewSet ) : [EOL] serializer_class = LikeSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] return Like . objects . filter ( post = self . kwargs [ [string] ] ) [EOL] [EOL] def get_permissions ( self ) : [EOL] if self . request . user and self . request . user . is_authenticated : [EOL] self . permission_classes = ( AuthLikePermission , ) [EOL] else : [EOL] self . permission_classes = ( AnonLikePermission , ) [EOL] return super ( ) . get_permissions ( ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] serializer = self . serializer_class ( data = request . data , context = { [string] : request . user , [string] : kwargs [ [string] ] } ) [EOL] if serializer . is_valid ( raise_exception = True ) : [EOL] serializer . save ( ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.views.UserViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.serializers.PostSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.PostSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.PostSerializer$ 0 0 0 0 0 0 $API.serializers.PostSerializer$ 0 0 0 0 0 0 0 0 $API.serializers.PostSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[API.serializers.LikeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.LikeSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $API.serializers.LikeSerializer$ 0 0 0 0 0 0 0 0 0 $API.serializers.LikeSerializer$ 0 0 0 0 0 0 0 0 $API.serializers.LikeSerializer$ 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] from rest_framework_nested import routers [EOL] from rest_framework_simplejwt . views import TokenObtainPairView , TokenRefreshView [EOL] [EOL] from API . views import UserViewSet , PostViewSet , LikeViewSet [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , UserViewSet ) [EOL] [EOL] users_router = routers . NestedDefaultRouter ( router , [string] , lookup = [string] ) [EOL] users_router . register ( [string] , PostViewSet , basename = [string] ) [EOL] [EOL] posts_router = routers . NestedDefaultRouter ( users_router , [string] , lookup = [string] ) [EOL] posts_router . register ( [string] , LikeViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , include ( users_router . urls ) ) , path ( [string] , include ( posts_router . urls ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , TokenObtainPairView . as_view ( ) , name = [string] ) , path ( [string] , TokenRefreshView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0