import builtins [EOL] from typing import Tuple , Any [EOL] import typing [EOL] import decimal [EOL] from decimal import Decimal [EOL] from enum import Enum , auto [EOL] from . base import FunctionalTestCase [EOL] from selenium . webdriver . common . action_chains import ActionChains [EOL] from selenium . webdriver . common . by import By [EOL] import random [EOL] import time [EOL] [EOL] [EOL] class ArchiveTrackEntry ( Enum ) : [EOL] STREAM_TRACK = auto ( ) [EOL] PLAYER = auto ( ) [EOL] [EOL] [EOL] class StreamTestCase ( FunctionalTestCase ) : [EOL] fixtures = ( [string] , ) [EOL] [EOL] def setUp ( self ) : [EOL] self . driver . get ( self . url ( [string] ) ) [EOL] self . page = StreamPage ( self . driver ) [EOL] [EOL] def test_playing_tracks ( self ) : [EOL] self . assertGreater ( len ( self . page . tracks ) , [number] ) [EOL] [EOL] first_track = self . page . tracks [ [number] ] [EOL] self . assertEqual ( first_track . listen_count . text , [string] ) [EOL] first_track . play_or_pause_button . click ( ) [EOL] first_audio_source = self . page . audio . source [EOL] self . assertEqual ( first_track . listen_count . text , [string] ) [EOL] [EOL] next_track = self . page . tracks [ [number] ] [EOL] next_track . play_or_pause_button . click ( ) [EOL] second_audio_source = self . page . audio . source [EOL] self . assertNotEqual ( first_audio_source , second_audio_source ) [EOL] [EOL] self . page . player . play_next_button . click ( ) [EOL] third_audio_source = self . page . audio . source [EOL] self . assertNotEqual ( second_audio_source , third_audio_source ) [EOL] [EOL] def test_pausing_tracks ( self ) : [EOL] track = random . choice ( self . page . tracks ) [EOL] [EOL] self . assertFalse ( self . page . audio_is_playing ) [EOL] [EOL] track . play_or_pause_button . click ( ) [EOL] [EOL] self . assertTrue ( self . page . audio . source_is_prefixed_properly ) [EOL] self . assertTrue ( self . page . audio_is_playing ) [EOL] [EOL] track . play_or_pause_button . click ( ) [EOL] [EOL] self . assertFalse ( self . page . audio_is_playing ) [EOL] [EOL] def test_track_progress ( self ) : [EOL] track = random . choice ( self . page . tracks ) [EOL] track . play_or_pause_button . click ( ) [EOL] self . assertEqual ( self . page . audio . current_time , [number] ) [EOL] [EOL] self . assertEqual ( self . page . audio_progress . percentage_complete , [number] ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] total_time = self . page . audio . total_time [EOL] self . assertTrue ( [number] < self . page . audio . current_time < [number] , msg = [string] [string] . format ( self . page . audio . current_time ) ) [EOL] [EOL] self . assertTrue ( self . page . audio_progress . percentage_complete > [number] ) [EOL] [EOL] [comment] [EOL] expected_percent = [number] * ( self . page . audio . current_time / total_time ) [EOL] self . _assert_within_percentage_delta ( self . page . audio_progress . percentage_complete , expected_percent , percentage = [number] ) [EOL] [EOL] def _assert_within_percentage_delta ( self , first , second , percentage = [number] ) : [EOL] msg = [string] [EOL] ratio = Decimal ( percentage / [number] ) [EOL] high_end = first + first * ratio [EOL] low_end = first - first * ratio [EOL] [EOL] is_expected_result = low_end < second < high_end [EOL] [EOL] if not is_expected_result : [EOL] actual_ratio = second / first [EOL] actual_delta = abs ( actual_ratio - [number] ) [EOL] actual_percentage_delta = actual_delta * [number] [EOL] msg = ( [string] [string] . format ( second , percentage , first , actual_percentage_delta ) ) [EOL] [EOL] self . assertTrue ( is_expected_result , msg = msg ) [EOL] [EOL] def test_seeking_track ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_no_tracks_present ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_plays_next_track_automatically ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_plays_next_track_after_archive_if_playing ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_sets_next_track_after_archive_if_paused ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_tracks_sorted_by_date_created_descending ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_archives_tracks_via_player ( self ) : [EOL] self . _test_archives_tracks_via ( ArchiveTrackEntry . PLAYER ) [EOL] [EOL] def test_archives_tracks_via_stream_track ( self ) : [EOL] self . _test_archives_tracks_via ( ArchiveTrackEntry . STREAM_TRACK ) [EOL] [EOL] def test_archiving_track_plays_next_track ( self ) : [EOL] self . skipTest ( [string] ) [EOL] [EOL] def test_track_is_displayed_between_refreshes ( self ) : [EOL] track = self . page . tracks [ [number] ] [EOL] self . assertTrue ( self . page . track_with_id_present ( track . id ) ) [EOL] [EOL] self . driver . refresh ( ) [EOL] self . assertTrue ( self . page . track_with_id_present ( track . id ) ) [EOL] [EOL] def test_filtering_stream_shows_correct_tracks ( self ) : [EOL] archived_track = self . page . tracks [ [number] ] [EOL] unarchived_track = self . page . tracks [ [number] ] [EOL] archived_track . archive_button . click ( ) [EOL] [EOL] self . assertTrue ( self . page . track_with_id_present ( unarchived_track . id ) ) [EOL] self . assertFalse ( self . page . track_with_id_present ( archived_track . id ) ) [EOL] [EOL] self . page . archived_filter . click ( ) [EOL] self . assertFalse ( self . page . track_with_id_present ( unarchived_track . id ) ) [EOL] self . assertTrue ( self . page . track_with_id_present ( archived_track . id ) ) [EOL] [EOL] self . page . unarchived_filter . click ( ) [EOL] self . assertTrue ( self . page . track_with_id_present ( unarchived_track . id ) ) [EOL] self . assertFalse ( self . page . track_with_id_present ( archived_track . id ) ) [EOL] [EOL] def _test_archives_tracks_via ( self , entrypoint ) : [EOL] track = self . page . tracks [ [number] ] [EOL] track . play_or_pause_button . click ( ) [EOL] [EOL] if entrypoint is ArchiveTrackEntry . STREAM_TRACK : [EOL] track . archive_button . click ( ) [EOL] elif entrypoint is ArchiveTrackEntry . PLAYER : [EOL] self . page . player . archive_button . click ( ) [EOL] else : [EOL] raise TypeError ( [string] ) [EOL] [EOL] self . assertFalse ( self . page . track_with_id_present ( track . id ) ) [EOL] [EOL] self . driver . refresh ( ) [EOL] self . assertFalse ( self . page . track_with_id_present ( track . id ) ) [EOL] [EOL] [EOL] class Page : [EOL] def __init__ ( self , driver ) : [EOL] self . driver = driver [EOL] [EOL] [EOL] class StreamPage ( Page ) : [EOL] def track_with_id_present ( self , track_id ) : [EOL] selector = [string] . format ( track_id ) [EOL] matches = self . driver . find_elements_by_css_selector ( selector ) [EOL] return ( len ( matches ) == [number] ) [EOL] [EOL] @ property def tracks ( self ) : [EOL] return [ Track ( t ) for t in self . driver . find_elements_by_class_name ( [string] ) ] [EOL] [EOL] @ property def audio ( self ) : [EOL] return Audio ( self . driver . find_element_by_tag_name ( [string] ) ) [EOL] [EOL] @ property def player ( self ) : [EOL] return Player ( self . driver . find_element_by_class_name ( [string] ) ) [EOL] [EOL] @ property def archived_filter ( self ) : [EOL] return self . driver . find_element_by_link_text ( [string] ) [EOL] [EOL] @ property def unarchived_filter ( self ) : [EOL] return self . driver . find_element_by_link_text ( [string] ) [EOL] [EOL] @ property def audio_is_playing ( self ) : [EOL] if self . driver . find_elements_by_tag_name ( [string] ) : [EOL] return self . audio . is_playing [EOL] [EOL] return False [EOL] [EOL] @ property def audio_progress ( self ) : [EOL] return AudioProgress ( self . driver . find_element_by_class_name ( [string] ) ) [EOL] [EOL] [EOL] class Element : [EOL] def __init__ ( self , element ) : [EOL] self . element = element [EOL] [EOL] [EOL] class Player ( Element ) : [EOL] @ property def play_next_button ( self ) : [EOL] return self . element . find_element_by_tag_name ( [string] ) [EOL] [EOL] @ property def archive_button ( self ) : [EOL] return self . element . find_element_by_css_selector ( [string] ) [EOL] [EOL] [EOL] class Audio ( Element ) : [EOL] URL_PREFIX = [string] [EOL] [EOL] @ property def source ( self ) : [EOL] return self . element . get_attribute ( [string] ) [EOL] [EOL] @ property def source_is_prefixed_properly ( self ) : [EOL] return self . source . startswith ( self . URL_PREFIX ) [EOL] [EOL] @ property def is_playing ( self ) : [EOL] is_paused = self . element . get_attribute ( [string] ) [EOL] return not is_paused [EOL] [EOL] @ property def current_time ( self ) : [EOL] return Decimal ( self . element . get_attribute ( [string] ) ) [EOL] [EOL] @ property def total_time ( self ) : [EOL] return Decimal ( self . element . get_attribute ( [string] ) ) [EOL] [EOL] [EOL] class AudioProgress ( Element ) : [EOL] @ property def progress_el ( self ) : [EOL] return self . element . find_element_by_class_name ( [string] ) [EOL] [EOL] @ property def has_styles ( self ) : [EOL] return element_has_attribute ( self . progress_el , [string] ) [EOL] [EOL] @ property def percentage_complete ( self ) : [EOL] style = self . progress_el . get_attribute ( [string] ) [EOL] [EOL] if style : [EOL] percent = style . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] return Decimal ( percent ) [EOL] [EOL] elif self . progress_el . value_of_css_property ( [string] ) == [string] : [EOL] return [number] [EOL] else : [EOL] raise AssertionError ( [string] [string] ) [EOL] [EOL] [EOL] class element_has_attribute ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , element , attribute ) : [EOL] self . element = element [EOL] self . attribute = attribute [EOL] [EOL] def __call__ ( self , driver ) : [EOL] if self . element . get_attribute ( self . attribute ) : [EOL] return self . element [EOL] else : [EOL] return False [EOL] [EOL] [EOL] class Track ( Element ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . id = self . element . get_attribute ( [string] ) [EOL] [EOL] @ property def play_or_pause_button ( self ) : [EOL] return self . element . find_element_by_class_name ( [string] ) [EOL] [EOL] @ property def archive_button ( self ) : [EOL] return self . element . find_element_by_class_name ( [string] ) [EOL] [EOL] @ property def listen_count ( self ) : [EOL] return self . element . find_element_by_class_name ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $decimal.Decimal$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $decimal.Decimal$ 0 $typing.Any$ 0 0 0 0 0 $decimal.Decimal$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $ArchiveTrackEntry$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $ArchiveTrackEntry$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $ArchiveTrackEntry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Anybuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] from django . core import urlresolvers [EOL] from django . contrib . staticfiles . testing import StaticLiveServerTestCase [EOL] [EOL] from selenium . webdriver . common . desired_capabilities import DesiredCapabilities [EOL] from selenium . webdriver . remote import webdriver [EOL] from selenium . webdriver . support . ui import WebDriverWait [EOL] [EOL] [EOL] class FunctionalTestCase ( StaticLiveServerTestCase ) : [EOL] host = [string] [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] cls . driver = webdriver . WebDriver ( command_executor = [string] , desired_capabilities = DesiredCapabilities . CHROME ) [EOL] cls . driver . implicitly_wait ( [number] ) [EOL] cls . wait = WebDriverWait ( cls . driver , [number] ) [EOL] super ( ) . setUpClass ( ) [EOL] [EOL] @ classmethod def tearDownClass ( cls ) : [EOL] cls . driver . close ( ) [EOL] super ( ) . tearDownClass ( ) [EOL] cls . driver . quit ( ) [EOL] [EOL] @ classmethod def addCleanup ( cls ) : [EOL] [comment] [EOL] cls . driver . quit ( ) [EOL] [EOL] def run ( self , result ) : [EOL] self . result = result . result if hasattr ( result , [string] ) else result [EOL] self . result . stopTest = self . stopTest [EOL] super ( ) . run ( result ) [EOL] [EOL] def stopTest ( self , test ) : [EOL] [docstring] [EOL] if not self . passed : [EOL] self . screen_shot ( ) [EOL] [EOL] @ property def passed ( self ) : [EOL] return not ( self . errored or self . failed ) [EOL] [EOL] @ property def errored ( self ) : [EOL] return self . id ( ) in [ case . id ( ) for case , _ in self . result . errors ] [EOL] [EOL] @ property def failed ( self ) : [EOL] return self . id ( ) in [ case . id ( ) for case , _ in self . result . failures ] [EOL] [EOL] def screen_shot ( self ) : [EOL] date_string = time . strftime ( [string] ) [EOL] file_name = [string] . format ( date_string , self . _testMethodName ) [EOL] self . driver . save_screenshot ( file_name ) [EOL] [EOL] def url ( self , path ) : [EOL] [docstring] [EOL] return self . live_server_url + path [EOL] [EOL] def reverse ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] return self . url ( urlresolvers . reverse ( * args , ** kwargs ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple [EOL] import web [EOL] import typing [EOL] from django . shortcuts import render [EOL] from track . models import Track [EOL] from track . serializers import TrackSerializer [EOL] from rest_framework import generics [EOL] [EOL] [EOL] def stream ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] class TrackList ( generics . ListAPIView ) : [EOL] serializer_class = TrackSerializer [EOL] queryset = Track . objects . all ( ) [EOL] filter_fields = ( [string] , ) [EOL] ordering = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.stream.views.TrackList]$ 0 0 0 $typing.Type[web.stream.views.TrackList]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . views . generic . base import RedirectView [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , RedirectView . as_view ( url = [string] , permanent = False ) , name = [string] ) , url ( [string] , views . stream , name = [string] ) , url ( [string] , views . TrackList . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from stream . gateways . soundcloud import SoundcloudGateway [EOL] from track import models [EOL] [EOL] [EOL] def persist_latest_stream_tracks ( ) : [EOL] gateway = SoundcloudGateway ( ) [EOL] tracks = gateway . get_unpersisted_stream_tracks ( ) [EOL] models . Track . objects . bulk_create ( tracks ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StreamConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class StreamTestCase ( TestCase ) : [EOL] def test_uses_correct_template ( self ) : [EOL] res = self . client . get ( reverse ( [string] ) ) [EOL] self . assertTemplateUsed ( res , [string] ) [EOL] [EOL] [EOL] class HomeTestCase ( TestCase ) : [EOL] def test_redirects_to_stream ( self ) : [EOL] res = self . client . get ( [string] ) [EOL] self . assertRedirects ( res , reverse ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Counter , List , Union , Any [EOL] import unittest [EOL] import typing [EOL] import collections [EOL] from collections import Counter [EOL] from unittest . mock import Mock , patch [EOL] from django . conf import settings [EOL] from django . test import TestCase [EOL] [EOL] from . import factories [EOL] from track . tests . factories import TrackFactory [EOL] from stream . gateways . soundcloud import ( SoundcloudAPI , SoundcloudGateway , soundcloud_client ) [EOL] [EOL] [EOL] @ patch ( [string] ) class SoundcloudClientTests ( TestCase ) : [EOL] def test_calls_soundcloud_client ( self , soundcloud ) : [EOL] client = soundcloud_client ( ) [EOL] self . assertEqual ( client , soundcloud . Client . return_value ) [EOL] [EOL] def test_client_instantiated_correctly ( self , soundcloud ) : [EOL] soundcloud_client ( ) [EOL] soundcloud . Client . assert_called_once_with ( client_id = settings . SOUNDCLOUD_CLIENT_ID , client_secret = settings . SOUNDCLOUD_CLIENT_SECRET , username = settings . SOUNDCLOUD_USERNAME , password = settings . SOUNDCLOUD_PASSWORD , ) [EOL] [EOL] [EOL] @ patch ( [string] ) class SoundcloudAPIRetrieveAffiliatedTracksTests ( TestCase ) : [EOL] expected_path = [string] [EOL] [EOL] def setUp ( self ) : [EOL] self . api = SoundcloudAPI ( ) [EOL] [EOL] def test_retrieve_affiliated_tracks_calls_api_correctly ( self , client ) : [EOL] self . api . retrieve_affiliated_tracks ( ) [EOL] client ( ) . get . assert_called_once_with ( self . expected_path , limit = [number] ) [EOL] [EOL] def test_retrieve_affiliated_tracks_returns_api_call ( self , client ) : [EOL] self . assertEqual ( self . api . retrieve_affiliated_tracks ( ) , client ( ) . get ( ) ) [EOL] [EOL] def test_limit_can_be_passed_to_adjust ( self , client ) : [EOL] self . api . retrieve_affiliated_tracks ( limit = [number] ) [EOL] client ( ) . get . assert_called_once_with ( self . expected_path , limit = [number] ) [EOL] [EOL] [EOL] class SoundcloudGatewayGetStreamTracksTests ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . collection = [ factories . soundcloud_track ( ) for _ in range ( [number] ) ] [EOL] self . gateway = SoundcloudGateway ( ) [EOL] response = Mock ( obj = { [string] : self . collection } ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . API = patcher . start ( ) [EOL] self . API ( ) . retrieve_affiliated_tracks . return_value = response [EOL] self . addCleanup ( patcher . stop ) [EOL] [EOL] def test_get_stream_tracks_calls_api ( self ) : [EOL] self . gateway . get_stream_tracks ( ) [EOL] self . API ( ) . retrieve_affiliated_tracks . assert_called_once_with ( ) [EOL] [EOL] def test_get_stream_tracks_creates_proper_titles ( self ) : [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] titles = [ c [ [string] ] [ [string] ] for c in self . collection ] [EOL] self . assertEqual ( set ( t . title for t in tracks ) , set ( titles ) ) [EOL] [EOL] def test_get_stream_tracks_creates_stream_urls ( self ) : [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] stream_urls = [ c [ [string] ] [ [string] ] for c in self . collection ] [EOL] self . assertEqual ( set ( t . stream_url for t in tracks ) , set ( stream_urls ) ) [EOL] [EOL] def test_get_stream_tracks_creates_artwork_urls ( self ) : [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] stream_urls = [ c [ [string] ] [ [string] ] for c in self . collection ] [EOL] self . assertEqual ( set ( t . artwork_url for t in tracks ) , set ( stream_urls ) ) [EOL] [EOL] def test_get_stream_tracks_passes_empty_string_for_missing_artwork ( self ) : [EOL] self . collection [ [number] ] [ [string] ] [ [string] ] = None [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] empty_stream_urls = [ t for t in tracks if t . artwork_url == [string] ] [EOL] self . assertEqual ( len ( empty_stream_urls ) , [number] ) [EOL] [EOL] def test_get_stream_tracks_creates_username ( self ) : [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] usernames = [ c [ [string] ] [ [string] ] [ [string] ] for c in self . collection ] [EOL] self . assertEqual ( set ( t . username for t in tracks ) , set ( usernames ) ) [EOL] [EOL] def test_get_stream_tracks_creates_gateway_id ( self ) : [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] ids = [ c [ [string] ] [ [string] ] for c in self . collection ] [EOL] self . assertEqual ( set ( t . gateway_id for t in tracks ) , set ( ids ) ) [EOL] [EOL] def test_get_stream_tracks_excludes_playlists ( self ) : [EOL] track , playlist = ( factories . soundcloud_track ( ) , factories . soundcloud_playlist ( ) ) [EOL] response = Mock ( obj = { [string] : [ track , playlist ] } ) [EOL] self . API ( ) . retrieve_affiliated_tracks . return_value = response [EOL] [EOL] tracks = self . gateway . get_stream_tracks ( ) [EOL] self . assertEqual ( len ( tracks ) , [number] ) [EOL] self . assertEqual ( tracks [ [number] ] . title , track [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] class SoundcloudGatewayGetUnpersistedStreamTracksTests ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . gateway = SoundcloudGateway ( ) [EOL] patcher = patch . object ( self . gateway , [string] ) [EOL] self . get_stream_tracks = patcher . start ( ) [EOL] self . addCleanup ( patcher . stop ) [EOL] [EOL] def test_calls_get_stream_tracks_properly ( self ) : [EOL] self . gateway . get_unpersisted_stream_tracks ( ) [EOL] self . get_stream_tracks . assert_called_once_with ( ) [EOL] [EOL] def test_returns_only_tracks_that_do_not_match_existing_gateway_id ( self ) : [EOL] existing_id = TrackFactory ( ) . gateway_id [EOL] already_persisted_track = TrackFactory . build ( gateway_id = existing_id ) [EOL] unpersisted_track = TrackFactory . build ( ) [EOL] self . get_stream_tracks . return_value = [ unpersisted_track , already_persisted_track ] [EOL] [EOL] self . assertEqual ( [ unpersisted_track ] , self . gateway . get_unpersisted_stream_tracks ( ) ) [EOL] [EOL] def test_does_not_return_multiple_entries_for_duplicate_gateway_ids ( self ) : [EOL] repeated_gateway_id = [number] [EOL] repeats = [ TrackFactory . build ( gateway_id = repeated_gateway_id ) for i in range ( [number] ) ] [EOL] unique_track = TrackFactory . build ( ) [EOL] self . get_stream_tracks . return_value = [ * repeats , unique_track ] [EOL] [EOL] tracks = self . gateway . get_unpersisted_stream_tracks ( ) [EOL] [EOL] with self . subTest ( [string] ) : [EOL] self . assertEqual ( len ( tracks ) , len ( self . get_stream_tracks ( ) ) - [number] ) [EOL] [EOL] with self . subTest ( [string] ) : [EOL] track_gateway_ids = [ t . gateway_id for t in tracks ] [EOL] count = Counter ( track_gateway_ids ) [EOL] self . assertEqual ( count [ repeated_gateway_id ] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $collections.Counter[typing.Any]$ 0 0 0 $typing.list$ 0 0 0 0 0 0 $collections.Counter[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0
from typing import Union , Any [EOL] import unittest [EOL] import typing [EOL] from unittest . mock import patch [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from stream import tasks [EOL] [EOL] [EOL] class PersistLatestStreamTracksTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . SoundcloudGateway = patcher . start ( ) [EOL] self . addCleanup ( patcher . stop ) [EOL] [EOL] @ patch ( [string] ) def test_persists_stream_tracks ( self , TrackManager ) : [EOL] tracks = self . SoundcloudGateway ( ) . get_unpersisted_stream_tracks ( ) [EOL] tasks . persist_latest_stream_tracks ( ) [EOL] TrackManager . bulk_create . assert_called_once_with ( tracks ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 $unittest.mock._patch[typing.Union[unittest.mock.AsyncMock,unittest.mock.MagicMock]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] from faker import Factory as FakerFactory [EOL] fake = FakerFactory . create ( ) [EOL] [EOL] [EOL] def soundcloud_track ( ) : [EOL] return { [string] : { [string] : fake . random_int ( ) , [string] : [string] , [string] : fake . sentence ( nb_words = [number] ) , [string] : fake . uri ( ) , [string] : fake . uri ( ) , [string] : { [string] : fake . name ( ) , } , } , } [EOL] [EOL] [EOL] def soundcloud_playlist ( ) : [EOL] return { [string] : { [string] : [string] , [string] : fake . sentence ( nb_words = [number] ) , [string] : { [string] : fake . name ( ) , } , } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Set , Any [EOL] import web [EOL] import typing [EOL] import soundcloud [EOL] [EOL] from django . conf import settings [EOL] [EOL] from track . models import Track [EOL] [EOL] [EOL] def soundcloud_client ( ) : [EOL] return soundcloud . Client ( client_id = settings . SOUNDCLOUD_CLIENT_ID , client_secret = settings . SOUNDCLOUD_CLIENT_SECRET , username = settings . SOUNDCLOUD_USERNAME , password = settings . SOUNDCLOUD_PASSWORD , ) [EOL] [EOL] [EOL] class SoundcloudAPI : [EOL] def retrieve_affiliated_tracks ( self , limit = [number] ) : [EOL] client = soundcloud_client ( ) [EOL] return client . get ( [string] , limit = limit ) [EOL] [EOL] [EOL] class SoundcloudGateway : [EOL] def get_stream_tracks ( self ) : [EOL] api = SoundcloudAPI ( ) [EOL] resource = api . retrieve_affiliated_tracks ( ) [EOL] track_entries = _resource_to_track_entries ( resource ) [EOL] [EOL] return [ Track ( ** _entry_to_track_params ( t ) ) for t in track_entries ] [EOL] [EOL] def get_unpersisted_stream_tracks ( self ) : [EOL] [docstring] [EOL] [EOL] tracks = self . get_stream_tracks ( ) [EOL] tracks = _remove_duplicate_tracks ( tracks ) [EOL] return _remove_already_persisted_tracks ( tracks ) [EOL] [EOL] [EOL] def _remove_duplicate_tracks ( tracks ) : [EOL] existing_gateway_ids = Track . objects . values_list ( [string] , flat = True ) [EOL] return [ t for t in tracks if t . gateway_id not in existing_gateway_ids ] [EOL] [EOL] [EOL] def _remove_already_persisted_tracks ( tracks ) : [EOL] seen_gateway_ids = set ( ) [EOL] filtered_tracks = [ ] [EOL] for track in tracks : [EOL] if track . gateway_id not in seen_gateway_ids : [EOL] seen_gateway_ids . add ( track . gateway_id ) [EOL] filtered_tracks . append ( track ) [EOL] [EOL] return filtered_tracks [EOL] [EOL] [EOL] def _resource_to_track_entries ( resource ) : [EOL] collection = _collection_from_resource ( resource ) [EOL] entries = _entries_from_collection ( collection ) [EOL] return _filter_track_entries ( entries ) [EOL] [EOL] [EOL] def _filter_track_entries ( entries ) : [EOL] return [ e for e in entries if _entry_is_track ( e ) ] [EOL] [EOL] [EOL] def _entry_to_track_params ( entry ) : [EOL] return { [string] : entry [ [string] ] , [string] : entry [ [string] ] , [string] : entry [ [string] ] or [string] , [string] : entry [ [string] ] , [string] : entry [ [string] ] [ [string] ] } [EOL] [EOL] [EOL] def _collection_from_resource ( resource ) : [EOL] return resource . obj [ [string] ] [EOL] [EOL] [EOL] def _entries_from_collection ( collection ) : [EOL] return [ entry [ [string] ] for entry in collection ] [EOL] [EOL] [EOL] def _entry_is_track ( entry ) : [EOL] return entry [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $web.stream.gateways.soundcloud.SoundcloudAPI$ 0 0 0 0 0 $typing.Any$ 0 $web.stream.gateways.soundcloud.SoundcloudAPI$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any
	0
	0
from django . core . management . base import BaseCommand [EOL] from stream import tasks [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] tasks . persist_latest_stream_tracks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TrackConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import web [EOL] import typing [EOL] from rest_framework import serializers [EOL] from . import models [EOL] [EOL] [EOL] class TrackSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Track [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import web [EOL] import typing [EOL] from track . models import Track [EOL] from track . serializers import TrackSerializer [EOL] from rest_framework import generics [EOL] [EOL] [EOL] class TrackUpdate ( generics . UpdateAPIView ) : [EOL] serializer_class = TrackSerializer [EOL] queryset = Track . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.views.TrackUpdate]$ 0 0 0 $typing.Type[web.track.views.TrackUpdate]$ 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import web [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from soundproud . models import Base [EOL] [EOL] [EOL] class Track ( Base ) : [EOL] gateway_id = models . PositiveIntegerField ( null = True , blank = False , unique = True ) [EOL] title = models . CharField ( blank = False , max_length = [number] ) [EOL] stream_url = models . URLField ( blank = False , max_length = [number] ) [EOL] artwork_url = models . URLField ( blank = True , max_length = [number] ) [EOL] username = models . CharField ( blank = False , max_length = [number] ) [EOL] archived = models . BooleanField ( default = False ) [EOL] [EOL] @ property def listen_count ( self ) : [EOL] return self . listen_set . count ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . TrackUpdate . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import web [EOL] import typing [EOL] import factory [EOL] from track import models [EOL] [EOL] [EOL] class TrackFactory ( factory . django . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = models . Track [EOL] [EOL] gateway_id = factory . Faker ( [string] ) [EOL] title = factory . Faker ( [string] , nb_words = [number] ) [EOL] stream_url = factory . Faker ( [string] ) [EOL] artwork_url = factory . Faker ( [string] ) [EOL] username = factory . Faker ( [string] ) [EOL] archived = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory.Meta]$ 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[web.track.tests.factories.TrackFactory]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
import web [EOL] from django . test import TestCase [EOL] [EOL] from listen . tests . factories import ListenFactory [EOL] from . import factories [EOL] [EOL] [EOL] class TrackTestCase ( TestCase ) : [EOL] def _assert_track_listen_count_matches_expected ( self , count ) : [EOL] track = factories . TrackFactory ( ) [EOL] for _ in range ( count ) : [EOL] ListenFactory ( track = track ) [EOL] [EOL] self . assertEqual ( track . listen_count , count ) [EOL] [EOL] def test_listen_count ( self ) : [EOL] for listen_count in [ [number] , [number] , [number] ] : [EOL] with self . subTest ( listen_count = listen_count ) : [EOL] self . _assert_track_listen_count_matches_expected ( listen_count ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $web.track.tests.factories.TrackFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $web.track.tests.factories.TrackFactory$ 0 $web.track.tests.factories.TrackFactory$ 0 0 0 0 0 0 0 $web.track.tests.factories.TrackFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ListenConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple [EOL] import web [EOL] import typing [EOL] from rest_framework import serializers [EOL] from . import models [EOL] [EOL] [EOL] class ListenSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . Listen [EOL] fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.listen.models.Listen]$ 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . ListenCreate . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import web [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from soundproud . models import Base [EOL] from track . models import Track [EOL] [EOL] [EOL] class Listen ( Base ) : [EOL] track = models . ForeignKey ( Track ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.listen.models.Listen]$ 0 0 0 0 0 0 0 0
from typing import Type [EOL] import web [EOL] import typing [EOL] from . models import Listen [EOL] from . serializers import ListenSerializer [EOL] from rest_framework import generics [EOL] [EOL] [EOL] class ListenCreate ( generics . CreateAPIView ) : [EOL] serializer_class = ListenSerializer [EOL] queryset = Listen . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.listen.serializers.ListenSerializer]$ 0 0 0 $typing.Type[web.listen.views.ListenCreate]$ 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import web [EOL] import typing [EOL] import factory [EOL] from track . tests . factories import TrackFactory [EOL] from listen import models [EOL] [EOL] [EOL] class ListenFactory ( factory . django . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = models . Listen [EOL] [EOL] track = factory . SubFactory ( TrackFactory ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.listen.tests.factories.ListenFactory.Meta]$ 0 0 0 0 0 0 $typing.Type[web.listen.tests.factories.ListenFactory]$ 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import web [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Base ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.soundproud.models.Base]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[web.soundproud.models.Base]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import typing [EOL] import multiprocessing [EOL] [EOL] [EOL] def workers_count ( ) : [EOL] return multiprocessing . cpu_count ( ) * [number] + [number] [EOL] [EOL] [EOL] workers = workers_count ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] [EOL] [comment] [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
import logging [EOL] import os [EOL] import logging [EOL] [EOL] [EOL] MISSING_MODULE_NAME_KWARG_ERR = ( [string] [string] ) [EOL] [EOL] [EOL] def log_warning ( message , module_name = None ) : [EOL] if module_name is None : [EOL] raise TypeError ( MISSING_MODULE_NAME_KWARG_ERR ) [EOL] [EOL] logger = logging . getLogger ( module_name ) [EOL] logger . warn ( message ) [EOL] [EOL] [EOL] def env_get_or_warn ( variable ) : [EOL] try : [EOL] return os . environ [ variable ] [EOL] except KeyError : [EOL] log_warning ( [string] . format ( variable ) , module_name = __name__ ) [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Tuple [EOL] import typing [EOL] REST_FRAMEWORK = { [string] : [string] , [string] : ( [string] , ) , [string] : [number] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . django import * [EOL] from . django_additions import * [EOL] from . config import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . import env [EOL] [EOL] CELERY_BROKER_URL = [string] [EOL] SOUNDCLOUD_CLIENT_ID = env . SOUNDCLOUD_CLIENT_ID [EOL] SOUNDCLOUD_CLIENT_SECRET = env . SOUNDCLOUD_CLIENT_SECRET [EOL] SOUNDCLOUD_USERNAME = env . SOUNDCLOUD_USERNAME [EOL] SOUNDCLOUD_PASSWORD = env . SOUNDCLOUD_PASSWORD [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0
from typing import Optional , Any [EOL] import typing [EOL] import os [EOL] from . utility import env_get_or_warn [EOL] [EOL] DATABASE_URL = env_get_or_warn ( [string] ) [EOL] PROD = os . getenv ( [string] ) [EOL] SECRET_KEY = env_get_or_warn ( [string] ) [EOL] SOUNDCLOUD_CLIENT_ID = env_get_or_warn ( [string] ) [EOL] SOUNDCLOUD_CLIENT_SECRET = env_get_or_warn ( [string] ) [EOL] SOUNDCLOUD_USERNAME = env_get_or_warn ( [string] ) [EOL] SOUNDCLOUD_PASSWORD = env_get_or_warn ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] from soundproud . settings import utility [EOL] [EOL] from unittest . mock import ANY , patch [EOL] [EOL] [EOL] class EnvGetOrWarnTestCase ( TestCase ) : [EOL] @ patch ( [string] ) def test_when_environment_variable_set_returns ( self , os ) : [EOL] os . environ = { [string] : [string] } [EOL] self . assertEqual ( utility . env_get_or_warn ( [string] ) , [string] ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) def test_when_environment_variable_not_set_it_logs_warning ( self , log , os ) : [EOL] os . environ = { } [EOL] utility . env_get_or_warn ( [string] ) [EOL] log . assert_called_once_with ( ANY , module_name = utility . __name__ ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) def test_when_environment_variable_not_set_returns_none ( self , log , os ) : [EOL] os . environ = { } [EOL] self . assertIsNone ( utility . env_get_or_warn ( [string] ) ) [EOL] [EOL] [EOL] class LogWarningTestCase ( TestCase ) : [EOL] @ patch ( [string] ) def test_gets_logger_properly ( self , logging_mock ) : [EOL] name = [string] [EOL] utility . log_warning ( [string] , module_name = name ) [EOL] logging_mock . getLogger . assert_called_once_with ( name ) [EOL] [EOL] @ patch ( [string] ) def test_logs_warning_with_logger ( self , logging_mock ) : [EOL] utility . log_warning ( [string] , module_name = [string] ) [EOL] logging_mock . getLogger . return_value . warn . assert_called_once_with ( [string] ) [EOL] [EOL] def test_not_passing_module_name_raises_error ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] utility . log_warning ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] from unittest . mock import patch [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from soundproud import gunicorn_config [EOL] [EOL] [EOL] class WorkersCountTests ( TestCase ) : [EOL] @ patch ( [string] ) def test_sets_workers_according_to_cpu_count ( self , multiprocessing ) : [EOL] scenarios = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] for cpu_count , expected_workers in scenarios : [EOL] with self . subTest ( cpu_count = cpu_count ) : [EOL] multiprocessing . cpu_count . return_value = cpu_count [EOL] self . assertEqual ( gunicorn_config . workers_count ( ) , expected_workers ) [EOL] [EOL] [EOL] class GunicornConfigTests ( TestCase ) : [EOL] def test_sets_workers_according_to_get_workers ( self ) : [EOL] self . assertEqual ( gunicorn_config . workers_count ( ) , gunicorn_config . workers ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0