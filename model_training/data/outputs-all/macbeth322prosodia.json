[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from setuptools import setup , find_packages [EOL] [EOL] test_requirements = [ [string] , [string] ] [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , package_dir = { [string] : [string] } , packages = find_packages ( [string] ) , install_requires = [ [string] ] , setup_requires = [ [string] ] , tests_require = test_requirements , extras_require = { [string] : test_requirements } , package_data = { [string] : [ [string] ] , [string] : [ [string] ] } , zip_safe = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] [EOL] from prosodia . base . augmentedbnf import create_augmentedbnf [EOL] from prosodia . base . augmentedbnf . _text import text [EOL] from prosodia . base . augmentedbnf . _intermediate_parser import ( create_intermediate_augmentedbnf ) [EOL] from prosodia . base . augmentedbnf . _freebies import add_freebie_rules [EOL] [EOL] from . _helpers import validate_recursive_grammar , validate [EOL] [EOL] [EOL] class TestAugmentedBNF ( unittest . TestCase ) : [EOL] def test_augmentedbnf_parser_works ( self ) : [EOL] abnf = create_augmentedbnf ( ) [EOL] validate_recursive_grammar ( self , abnf , text ) [EOL] [EOL] def test_intermediate_augmented_bnf ( self ) : [EOL] inter_abnf = create_intermediate_augmentedbnf ( ) [EOL] validate ( self , inter_abnf . validate ( ) ) [EOL] [EOL] parsed_lang = inter_abnf . apply ( text ) [EOL] add_freebie_rules ( parsed_lang ) [EOL] validate ( self , parsed_lang . validate ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
import unittest [EOL] [EOL] from prosodia . base . bnfrange import create_bnfrange [EOL] from prosodia . base . bnfrange . _text import text [EOL] from prosodia . base . bnfrange . example import create_example_bnfrange [EOL] from prosodia . base . bnfrange . example . _text import example_text [EOL] [EOL] from . _helpers import validate_recursive_grammar [EOL] [EOL] [EOL] class TestBNFRange ( unittest . TestCase ) : [EOL] def test_bnf_range_parser_works ( self ) : [EOL] validate_recursive_grammar ( self , create_bnfrange ( ) , text ) [EOL] [EOL] def test_bnf_range_example_parser_works ( self ) : [EOL] validate_recursive_grammar ( self , create_example_bnfrange ( ) , example_text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from prosodia . core . grammar import Grammar [EOL] [EOL] [EOL] def validate ( test_case , validity ) : [comment] [EOL] for msg in validity . messages : [EOL] print ( msg ) [EOL] test_case . assertTrue ( validity ) [EOL] [EOL] [EOL] def validate_recursive_grammar ( test_case , grammar , text ) : [comment] [EOL] validate ( test_case , grammar . validate ( ) ) [EOL] [EOL] parsed_lang = grammar . apply ( text ) [EOL] parsed_grammar = Grammar ( parsed_lang , grammar . transform , grammar . allow_partial_matches ) [EOL] validate ( test_case , parsed_lang . equals ( grammar . language ) ) [EOL] validate ( test_case , parsed_grammar . validate ( ) ) [EOL] [EOL] parsed_lang2 = parsed_grammar . apply ( text ) [EOL] parsed_grammar2 = Grammar ( parsed_lang2 , grammar . transform , grammar . allow_partial_matches ) [EOL] validate ( test_case , parsed_lang2 . equals ( grammar . language ) ) [EOL] validate ( test_case , parsed_lang2 . equals ( parsed_lang ) ) [EOL] validate ( test_case , parsed_grammar2 . validate ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Sized , Any [EOL] import typing [EOL] import traceback [EOL] from unittest import TestCase , mock [EOL] [EOL] from prosodia . core . grammar import Grammar [EOL] from prosodia . base . bnf import create_bnf [EOL] from prosodia . base . bnf . _text import text [EOL] from prosodia . core . transform import TermGroupTransformation [EOL] [EOL] from . _helpers import validate , validate_recursive_grammar [EOL] [EOL] [EOL] def fake_tgt ( stacks ) : [comment] [EOL] real_transform = TermGroupTransformation . transform [EOL] [EOL] def wrapped ( * args , ** kwargs ) : [comment] [EOL] stacks . append ( traceback . extract_stack ( ) ) [EOL] return real_transform ( * args , ** kwargs ) [EOL] return wrapped [EOL] [EOL] [EOL] class TestBNF ( TestCase ) : [EOL] def test_bnf_parser_works ( self ) : [EOL] validate_recursive_grammar ( self , create_bnf ( ) , text ) [EOL] [EOL] def test_no_arbitrary_recursion ( self ) : [EOL] bnf = create_bnf ( ) [EOL] stack = traceback . extract_stack ( ) [EOL] stacks = [ ] [comment] [EOL] with mock . patch ( [string] , new = fake_tgt ( stacks ) ) : [EOL] parsed_lang = bnf . apply ( text ) [EOL] parsed_grammar = Grammar ( parsed_lang , bnf . transform ) [EOL] parsed_lang2 = parsed_grammar . apply ( text ) [EOL] [EOL] validate ( self , parsed_lang . equals ( bnf . language ) ) [EOL] validate ( self , parsed_lang2 . equals ( bnf . language ) ) [EOL] validate ( self , parsed_lang2 . equals ( parsed_lang ) ) [EOL] [EOL] largest = max ( stacks , key = len ) [EOL] [comment] [EOL] [comment] [EOL] self . assertTrue ( len ( largest ) <= len ( stack ) + [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Sized$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Sized$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0
from typing import Any , Iterator [EOL] import unittest [EOL] import typing [EOL] import unittest [EOL] from unittest import mock [EOL] [EOL] from prosodia . core . transform import LazySequenceTransform [EOL] [EOL] [EOL] class TestLazySequenceTransform ( unittest . TestCase ) : [EOL] def test_lazy_get ( self ) : [EOL] m = mock . Mock ( ) [EOL] mock_lang = mock . Mock ( ) [EOL] lst = LazySequenceTransform . create ( [ m . a , m . b , m . c ] , mock_lang ) [EOL] self . assertEqual ( m . mock_calls , [ ] ) [EOL] [EOL] self . assertEqual ( lst [ [number] ] , m . a . transform . return_value ) [EOL] self . assertEqual ( m . mock_calls , [ mock . call . a . transform ( mock_lang ) ] ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( lst [ [number] ] , m . a . transform . return_value ) [EOL] self . assertEqual ( m . mock_calls , [ mock . call . a . transform ( mock_lang ) ] ) [EOL] [EOL] def test_lazy_iter ( self ) : [EOL] m = mock . Mock ( ) [EOL] mock_lang = mock . Mock ( ) [EOL] lst = LazySequenceTransform . create ( [ m . a , m . b , m . c ] , mock_lang ) [EOL] self . assertEqual ( m . mock_calls , [ ] ) [EOL] [EOL] ilst = iter ( lst ) [EOL] self . assertEqual ( m . mock_calls , [ ] ) [EOL] [EOL] self . assertEqual ( next ( ilst ) , m . a . transform . return_value ) [EOL] self . assertEqual ( m . mock_calls , [ mock . call . a . transform ( mock_lang ) ] ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( lst [ [number] ] , m . a . transform . return_value ) [EOL] self . assertEqual ( m . mock_calls , [ mock . call . a . transform ( mock_lang ) ] ) [EOL] [EOL] self . assertEqual ( list ( ilst ) , [ m . b . transform . return_value , m . c . transform . return_value ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 $unittest.mock.Mock$ 0 0 0 $unittest.mock.Mock$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 $unittest.mock.Mock$ 0 0 0 $unittest.mock.Mock$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0
	0
import pkg_resources [EOL] pkg_resources . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0
import pkg_resources [EOL] pkg_resources . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0
import pkg_resources [EOL] pkg_resources . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Sequence , Any [EOL] import typing [EOL] import builtins [EOL] import typing [EOL] [EOL] [EOL] class Validity ( object ) : [EOL] def __init__ ( self , messages ) : [EOL] self . messages = messages [EOL] [EOL] @ classmethod def valid ( cls ) : [EOL] return cls ( list ( ) ) [EOL] [EOL] @ classmethod def invalid ( cls , msg , * msgs ) : [EOL] return cls ( [ msg ] + list ( msgs ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] if self : [EOL] return [string] [EOL] else : [EOL] return [string] . format ( len ( self . messages ) ) [EOL] [EOL] def __bool__ ( self ) : [EOL] return not bool ( self . messages ) [EOL] [EOL] def __add__ ( self , other ) : [EOL] if not isinstance ( other , type ( self ) ) : [EOL] return NotImplemented [EOL] else : [EOL] return Validity ( list ( self . messages ) + list ( other . messages ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Sequence[builtins.str]$ 0 0 0 0 0 $typing.Sequence[builtins.str]$ 0 $typing.Sequence[builtins.str]$ 0 0 0 0 0 $'Validity'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Validity'$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Validity'$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Callable , Type , Dict , List , Any , Union , Iterable [EOL] import inspect [EOL] import validity [EOL] import typing [EOL] import builtins [EOL] from functools import wraps [EOL] from inspect import signature [EOL] from typing import Iterable , Callable , get_type_hints , Union , Tuple [EOL] [EOL] from . validity import Validity [EOL] [EOL] [EOL] def annotate ( func , ** hints ) : [EOL] try : [EOL] get_type_hints ( func , { } , { } ) [EOL] except NameError : [EOL] pass [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] @ wraps ( func ) def annotated ( * args , ** kwargs ) : [EOL] return func ( * args , ** kwargs ) [EOL] annotated . __annotations__ = get_type_hints ( func , hints , { } ) [EOL] return annotated [EOL] [EOL] [EOL] def get_return_type ( func ) : [EOL] sig = signature ( func , follow_wrapped = False ) [EOL] anno = sig . return_annotation [EOL] if anno is sig . empty : [EOL] raise TypeError ( [string] ) [EOL] return anno [EOL] [EOL] [EOL] def check_composability ( argument_types , target_func ) : [EOL] argument_types = [ Tuple [ tuple ( argument_types ) ] ] [EOL] parameter_hints = get_type_hints ( target_func ) [EOL] parameter_types = [ parameter_hints [ param_name ] for param_name in signature ( target_func ) . parameters . keys ( ) ] [EOL] if argument_types == parameter_types : [EOL] return Validity . valid ( ) [EOL] else : [EOL] return Validity . invalid ( [string] . format ( argument_types , parameter_types ) ) [EOL] [EOL] [EOL] def check_isomorphic ( funcs ) : [EOL] first , * rest = ( get_return_type ( func ) for func in funcs ) [EOL] return all ( first == rtype for rtype in rest ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $validity.Validity$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import group_types [EOL] import abc [EOL] from typing import Generic , TypeVar [EOL] [EOL] from . import group_types as gt [EOL] [EOL] OutputType = TypeVar ( [string] ) [EOL] [EOL] [EOL] class Switch ( Generic [ gt . T0 , OutputType ] , metaclass = abc . ABCMeta ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] ( a , ) = group [EOL] return self . case0 ( a ) [EOL] [EOL] [EOL] class Switch2 ( Generic [ gt . T0 , gt . T1 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch3 ( Generic [ gt . T0 , gt . T1 , gt . T2 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch4 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch5 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch6 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch7 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch8 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch9 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch10 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch11 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch12 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , gt . T11 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case11 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k , l = group [comment] [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] elif not isinstance ( l , gt . NoValue ) : [EOL] return self . case11 ( l ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch13 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , gt . T11 , gt . T12 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case11 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case12 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k , l , m = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] elif not isinstance ( l , gt . NoValue ) : [EOL] return self . case11 ( l ) [EOL] elif not isinstance ( m , gt . NoValue ) : [EOL] return self . case12 ( m ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch14 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , gt . T11 , gt . T12 , gt . T13 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case11 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case12 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case13 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k , l , m , n = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] elif not isinstance ( l , gt . NoValue ) : [EOL] return self . case11 ( l ) [EOL] elif not isinstance ( m , gt . NoValue ) : [EOL] return self . case12 ( m ) [EOL] elif not isinstance ( n , gt . NoValue ) : [EOL] return self . case13 ( n ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch15 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , gt . T11 , gt . T12 , gt . T13 , gt . T14 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case11 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case12 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case13 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case14 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k , l , m , n , o = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] elif not isinstance ( l , gt . NoValue ) : [EOL] return self . case11 ( l ) [EOL] elif not isinstance ( m , gt . NoValue ) : [EOL] return self . case12 ( m ) [EOL] elif not isinstance ( n , gt . NoValue ) : [EOL] return self . case13 ( n ) [EOL] elif not isinstance ( o , gt . NoValue ) : [EOL] return self . case14 ( o ) [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] class Switch16 ( Generic [ gt . T0 , gt . T1 , gt . T2 , gt . T3 , gt . T4 , gt . T5 , gt . T6 , gt . T7 , gt . T8 , gt . T9 , gt . T10 , gt . T11 , gt . T12 , gt . T13 , gt . T14 , gt . T15 , OutputType ] , metaclass = abc . ABCMeta , ) : [EOL] @ abc . abstractmethod def case0 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case1 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case2 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case3 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case4 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case5 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case6 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case7 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case8 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case9 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case10 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case11 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case12 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case13 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case14 ( self , val ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def case15 ( self , val ) : [EOL] pass [EOL] [EOL] def __call__ ( self , group ) : [EOL] a , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p = group [EOL] if not isinstance ( a , gt . NoValue ) : [EOL] return self . case0 ( a ) [EOL] elif not isinstance ( b , gt . NoValue ) : [EOL] return self . case1 ( b ) [EOL] elif not isinstance ( c , gt . NoValue ) : [EOL] return self . case2 ( c ) [EOL] elif not isinstance ( d , gt . NoValue ) : [EOL] return self . case3 ( d ) [EOL] elif not isinstance ( e , gt . NoValue ) : [EOL] return self . case4 ( e ) [EOL] elif not isinstance ( f , gt . NoValue ) : [EOL] return self . case5 ( f ) [EOL] elif not isinstance ( g , gt . NoValue ) : [EOL] return self . case6 ( g ) [EOL] elif not isinstance ( h , gt . NoValue ) : [EOL] return self . case7 ( h ) [EOL] elif not isinstance ( i , gt . NoValue ) : [EOL] return self . case8 ( i ) [EOL] elif not isinstance ( j , gt . NoValue ) : [EOL] return self . case9 ( j ) [EOL] elif not isinstance ( k , gt . NoValue ) : [EOL] return self . case10 ( k ) [EOL] elif not isinstance ( l , gt . NoValue ) : [EOL] return self . case11 ( l ) [EOL] elif not isinstance ( m , gt . NoValue ) : [EOL] return self . case12 ( m ) [EOL] elif not isinstance ( n , gt . NoValue ) : [EOL] return self . case13 ( n ) [EOL] elif not isinstance ( o , gt . NoValue ) : [EOL] return self . case14 ( o ) [EOL] elif not isinstance ( p , gt . NoValue ) : [EOL] return self . case15 ( p ) [EOL] else : [EOL] raise ValueError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group[group_types.T0]$ 0 0 0 0 0 0 0 0 $group_types.Group[group_types.T0]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group2$ 0 0 0 0 0 0 0 $group_types.Group2$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group3$ 0 0 0 0 0 0 0 0 0 $group_types.Group3$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group4$ 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group4$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group5$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group5$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group6$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group6$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group7$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group7$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group8$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group8$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group9$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group9$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group10$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group10$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group11$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group11$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T11$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group12$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group12$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T11$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T12$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group13$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group13$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T11$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T12$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T13$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group14$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group14$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T11$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T12$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T13$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T14$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group15$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group15$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T0$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T1$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T2$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T3$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T4$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T5$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T6$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T7$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T8$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T9$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T10$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T11$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T12$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T13$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T14$ 0 0 0 0 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.T15$ 0 0 0 0 0 0 0 $OutputType$ 0 0 0 $group_types.Group16$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $group_types.Group16$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Tuple , Union , TypeVar [EOL] import src [EOL] import typing [EOL] from enum import Enum [EOL] from typing import TypeVar , Union , Tuple [EOL] [EOL] [EOL] T0 = TypeVar ( [string] ) [EOL] T1 = TypeVar ( [string] ) [EOL] T2 = TypeVar ( [string] ) [EOL] T3 = TypeVar ( [string] ) [EOL] T4 = TypeVar ( [string] ) [EOL] T5 = TypeVar ( [string] ) [EOL] T6 = TypeVar ( [string] ) [EOL] T7 = TypeVar ( [string] ) [EOL] T8 = TypeVar ( [string] ) [EOL] T9 = TypeVar ( [string] ) [EOL] T10 = TypeVar ( [string] ) [EOL] T11 = TypeVar ( [string] ) [EOL] T12 = TypeVar ( [string] ) [EOL] T13 = TypeVar ( [string] ) [EOL] T14 = TypeVar ( [string] ) [EOL] T15 = TypeVar ( [string] ) [EOL] [EOL] [EOL] class NoValue ( Enum ) : [EOL] Sentinel = [number] [EOL] [EOL] [EOL] UNV = Union [ NoValue , T0 ] [EOL] [EOL] Group = Tuple [ T0 ] [EOL] Group2 = Tuple [ UNV [ T0 ] , UNV [ T1 ] ] [EOL] Group3 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] ] [EOL] Group4 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] ] [EOL] Group5 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] ] [EOL] Group6 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] ] [EOL] Group7 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] ] [EOL] Group8 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] ] [EOL] Group9 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] ] [EOL] Group10 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] ] [EOL] Group11 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] ] [EOL] Group12 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] , UNV [ T11 ] ] [EOL] Group13 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] , UNV [ T11 ] , UNV [ T12 ] ] [EOL] Group14 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] , UNV [ T11 ] , UNV [ T12 ] , UNV [ T13 ] ] [EOL] Group15 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] , UNV [ T11 ] , UNV [ T12 ] , UNV [ T13 ] , UNV [ T14 ] ] [EOL] Group16 = Tuple [ UNV [ T0 ] , UNV [ T1 ] , UNV [ T2 ] , UNV [ T3 ] , UNV [ T4 ] , UNV [ T5 ] , UNV [ T6 ] , UNV [ T7 ] , UNV [ T8 ] , UNV [ T9 ] , UNV [ T10 ] , UNV [ T11 ] , UNV [ T12 ] , UNV [ T13 ] , UNV [ T14 ] , UNV [ T15 ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0