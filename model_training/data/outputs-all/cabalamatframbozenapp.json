[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import random [EOL] [EOL] from flask import Flask , request , redirect , session [EOL] [EOL] from bozen . butil import form [EOL] from allpages import jinjaEnv [EOL] [EOL] import config [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] def rowcol ( colSpec ) : [EOL] cs = [string] + colSpec [EOL] s = form ( [string] , cs = cs ) [EOL] return s [EOL] jinjaEnv . globals [ [string] ] = rowcol [EOL] jinjaEnv . globals [ [string] ] = rowcol [EOL] [EOL] def col ( colSpec ) : [EOL] cs = [string] + colSpec [EOL] s = form ( [string] , cs = cs ) [EOL] return s [EOL] jinjaEnv . globals [ [string] ] = col [EOL] [EOL] def endrow ( ) : [EOL] s = [string] [EOL] return s [EOL] jinjaEnv . globals [ [string] ] = endrow [EOL] jinjaEnv . globals [ [string] ] = endrow [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] def formSection ( t ) : [EOL] [docstring] [EOL] r = form ( [string] , t ) [EOL] return r [EOL] jinjaEnv . globals [ [string] ] = formSection [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] jinjaEnv . globals [ [string] ] = config . APP_LOGO [EOL] jinjaEnv . globals [ [string] ] = config . APP_TITLE [EOL] jinjaEnv . globals [ [string] ] = config . APP_NAME [EOL] jinjaEnv . globals [ [string] ] = config . DB_NAME [EOL] jinjaEnv . globals [ [string] ] = config . PORT [EOL] [EOL] [comment] [EOL] [EOL] def helpPage ( ) : [EOL] p = request . path [ [number] : ] [EOL] r = p . split ( [string] ) [ [number] ] [EOL] if r == [string] : r = [string] [EOL] return r [EOL] jinjaEnv . globals [ [string] ] = helpPage [EOL] [EOL] def highlightPageIfCurrent ( testUrl , * moreUrls ) : [EOL] [docstring] [EOL] urls = [ testUrl ] + list ( moreUrls ) [EOL] p = request . path . lstrip ( [string] ) [EOL] for url in urls : [EOL] if p . startswith ( url ) : [EOL] return [string] [EOL] return [string] [EOL] jinjaEnv . globals [ [string] ] = highlightPageIfCurrent [EOL] [EOL] def highlightPageExact ( testUrl , * moreUrls ) : [EOL] [docstring] [EOL] urls = [ testUrl ] + list ( moreUrls ) [EOL] p = request . path . lstrip ( [string] ) [EOL] p1 = p . split ( [string] ) [ [number] ] [EOL] for url in urls : [EOL] if p1 == url : [EOL] return [string] [EOL] return [string] [EOL] jinjaEnv . globals [ [string] ] = highlightPageExact [EOL] [EOL] def completeH ( b , yesText = [string] , noText = [string] ) : [EOL] [docstring] [EOL] tStr = [string] % ( yesText , ) [EOL] fStr = [string] % ( noText , ) [EOL] if b : [EOL] return tStr [EOL] else : [EOL] return fStr [EOL] jinjaEnv . globals [ [string] ] = completeH [EOL] [EOL] def yesNoH ( b , yesText = [string] , noText = [string] ) : [EOL] [docstring] [EOL] return completeH ( b , yesText , noText ) [EOL] jinjaEnv . globals [ [string] ] = yesNoH [EOL] [EOL] def usingHelp ( ) : [EOL] return False [EOL] jinjaEnv . globals [ [string] ] = usingHelp [EOL] [EOL] def generate_csrf_token ( ) : [EOL] if [string] not in session : [EOL] session [ [string] ] = str ( random . randint ( [number] , [number] ) ) [EOL] return session [ [string] ] [EOL] jinjaEnv . globals [ [string] ] = generate_csrf_token [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def currentUserName ( ) : [EOL] return [string] [EOL] jinjaEnv . globals [ [string] ] = currentUserName [EOL] [EOL] def canView ( page ) : [EOL] return True [EOL] jinjaEnv . globals [ [string] ] = canView [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , Iterable , Type [EOL] import typing [EOL] import app [EOL] import builtins [EOL] import bozen [EOL] from bozen . butil import * [EOL] from bozen import FormDoc , MonDoc [EOL] from bozen import ( StrField , ChoiceField , TextAreaField , IntField , FloatField , BoolField , MultiChoiceField , FK , FKeys , DateField , DateTimeField ) [EOL] [EOL] import config [EOL] bozen . setDefaultDatabase ( config . DB_NAME ) [EOL] import allpages [EOL] bozen . notifyFlaskForAutopages ( allpages . app , allpages . jinjaEnv ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class Author ( MonDoc ) : [EOL] name = StrField ( ) [EOL] notes = TextAreaField ( ) [EOL] dateOfBirth = DateField ( ) [EOL] [EOL] @ classmethod def classLogo ( cls ) : [EOL] return [string] [EOL] [EOL] def myBooks ( self ) : [EOL] [docstring] [EOL] return self . getForeignDocs ( [string] ) [EOL] [EOL] def myBooksLinks ( self ) : [EOL] [docstring] [EOL] return [string] . join ( bk . a ( ) for bk in self . myBooks ( ) ) [EOL] [EOL] Author . autopages ( ) [EOL] [EOL] class Book ( MonDoc ) : [EOL] title = StrField ( ) [EOL] yearPublished = IntField ( ) [EOL] authors_ids = FKeys ( Author , title = [string] ) [EOL] [EOL] @ classmethod def classLogo ( cls ) : [EOL] return [string] [EOL] [EOL] Book . autopages ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def createAdminSite ( ) : [EOL] [docstring] [EOL] import foo [EOL] adminSite = bozen . AdminSite ( stub = config . ADMIN_SITE_PREFIX ) [EOL] adminSite . runFlask ( allpages . app , allpages . jinjaEnv ) [EOL] [EOL] if config . CREATE_ADMIN_SITE : [EOL] createAdminSite ( ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.models.Book]$ 0 0 0 0 0 $typing.Type[app.models.Book]$ 0 0 0 0 0 $typing.Type[app.models.Book]$ 0 0 0 0 0 $typing.Type[app.models.Book]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Type [EOL] import typing [EOL] import app [EOL] [docstring] [EOL] [EOL] from flask import request , redirect [EOL] [EOL] from allpages import app , jinjaEnv [EOL] from bozen . butil import pr , prn , dpr , form , htmlEsc [EOL] from bozen import FormDoc , MonDoc , BzDate , BzDateTime [EOL] from bozen import paginate [EOL] from bozen import ( StrField , ChoiceField , TextAreaField , IntField , FloatField , BoolField , MultiChoiceField , ObjectField , FK , DateField , DateTimeField ) [EOL] [EOL] import ht [EOL] import models [EOL] [EOL] [comment] [EOL] [EOL] class FileExample ( MonDoc ) : [EOL] name = StrField ( ) [EOL] description = TextAreaField ( ) [EOL] timestamp = DateTimeField ( desc = [string] , readOnly = True ) [EOL] [EOL] @ classmethod def classLogo ( self ) : [EOL] return [string] [EOL] [EOL] def preSave ( self ) : [EOL] self . timestamp = BzDateTime . now ( ) [EOL] [EOL] FileExample . autopages ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.filex.FileExample]$ 0 0 0 0 0 $typing.Type[app.filex.FileExample]$ 0 0 0 0 0 $typing.Type[app.filex.FileExample]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [EOL] APP_DATE_FORMAT = [string] [EOL] [EOL] [comment] [EOL] PORT = [number] [EOL] [EOL] [comment] [EOL] APP_TITLE = [string] [EOL] APP_LOGO = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] APP_NAME = [string] [EOL] DB_NAME = [string] [EOL] [EOL] [comment] [EOL] CREATE_ADMIN_SITE = True [EOL] [comment] [EOL] ADMIN_SITE_PREFIX = [string] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Type [EOL] import typing [EOL] import app [EOL] [docstring] [EOL] [EOL] import time [EOL] import string [EOL] [EOL] from flask import request , redirect , abort [EOL] from flask_login import login_user , logout_user , current_user [EOL] import pymongo [EOL] [EOL] from bozen . butil import dpr , htmlEsc , form [EOL] import bozen [EOL] from bozen import ( MonDoc , FormDoc , StrField , TextAreaField , PasswordField , ChoiceField , FK , FKeys , MultiChoiceField , DateField , DateTimeField , IntField , FloatField , BoolField ) [EOL] [EOL] import allpages [EOL] from allpages import * [EOL] from permission import * [EOL] import ht [EOL] [EOL] import userdb [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] ENG_ON_LOGIN_PAGE = [string] [EOL] [EOL] class LoginForm ( FormDoc ) : [EOL] userName = StrField ( ) [EOL] password = PasswordField ( ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def login ( ) : [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] doc = LoginForm ( ) [EOL] msg = [string] [EOL] [EOL] if request . method == [string] : [EOL] [EOL] [comment] [EOL] dpr ( [string] , session ) [EOL] token = session . pop ( [string] , None ) [EOL] dpr ( [string] , token ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] doc = doc . populateFromRequest ( request ) [EOL] u = userdb . User . find_one ( { [string] : doc . userName } ) [EOL] [EOL] ok = u and userdb . verifyPassword ( u . hashedPassword , doc . password ) [EOL] dpr ( [string] , doc . password , ok ) [EOL] if ok : [EOL] login_user ( u ) [EOL] return redirect ( [string] , code = [number] ) [EOL] else : [EOL] msg = [string] [EOL] [EOL] h = tem . render ( doc = doc , msg = ht . errorBox ( msg ) , ) [EOL] return h [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def logout ( ) : [EOL] logout_user ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def users ( ) : [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( table = usersTable ( ) , count = userdb . User . count ( ) , ) [EOL] return h [EOL] [EOL] def usersTable ( ) : [EOL] [docstring] [EOL] h = [string] [EOL] for doc in userdb . User . find ( sort = [ ( [string] , pymongo . ASCENDING ) ] ) : [EOL] [EOL] item = form ( [string] , a = doc . a ( ) , userName = doc . asReadableH ( [string] ) , email = doc . asReadableH ( [string] ) , isAdmin = doc . asReadableH ( [string] ) , isActive = doc . asReadableH ( [string] ) , ) [EOL] h += item [EOL] [comment] [EOL] h += [string] [EOL] return h [EOL] [EOL] def yn ( b ) : [EOL] if b : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def orNone ( s ) : [EOL] if s : [EOL] return htmlEsc ( s ) [EOL] else : [EOL] return [string] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def user ( id ) : [EOL] if id == [string] : [EOL] doc = userdb . User ( ) [EOL] dpr ( [string] , doc ) [EOL] else : [EOL] doc = userdb . User . getDoc ( id ) [EOL] dpr ( [string] , doc ) [EOL] msg = [string] [EOL] [EOL] if request . method == [string] : [EOL] doc = doc . populateFromRequest ( request ) [EOL] if doc . isValid ( ) : [EOL] if request . form [ [string] ] == [string] : [EOL] doc . delete ( ) [EOL] msg = [string] [EOL] else : [EOL] doc . save ( ) [EOL] msg = [string] [EOL] [comment] [EOL] [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( doc = doc , id = htmlEsc ( id ) , msg = ht . goodMessageBox ( msg ) , ) [EOL] return h [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.login.LoginForm]$ 0 0 0 0 0 $typing.Type[app.login.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Type , Tuple [EOL] import typing [EOL] import app [EOL] import builtins [EOL] from flask import request , redirect [EOL] [EOL] from allpages import app , jinjaEnv [EOL] from bozen . butil import pr , prn , dpr , form , htmlEsc [EOL] from bozen import FormDoc , BzDate [EOL] from bozen import ( StrField , ChoiceField , TextAreaField , IntField , FloatField , BoolField , MultiChoiceField , DateField ) [EOL] [EOL] [comment] [EOL] [EOL] FRUIT_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] SLOT_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] [EOL] class TheTestForm ( FormDoc ) : [EOL] aaa = StrField ( ) [EOL] aNumber = IntField ( minValue = [number] , maxValue = [number] ) [EOL] cost = FloatField ( title = [string] , formatStr = [string] ) [EOL] tickyBox = BoolField ( ) [EOL] toggleSwitch1 = BoolField ( widget = [string] ) [EOL] toggleSwitch2 = BoolField ( widget = [string] ) [EOL] showBody = BoolField ( widget = [string] ) [EOL] order = BoolField ( widget = [string] , showTitle = False , onText = [string] , offText = [string] ) [EOL] favouriteFruit = ChoiceField ( choices = FRUIT_CHOICES , showNull = True , allowNull = False ) [EOL] slots = MultiChoiceField ( choices = SLOT_CHOICES , required = True ) [EOL] note = TextAreaField ( ) [EOL] dateOfBirth = DateField ( required = True ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def testForm ( ) : [EOL] dpr ( [string] ) [EOL] theTF = TheTestForm ( ) [EOL] theTF . dateOfBirth = BzDate . today ( ) [EOL] dpr ( [string] , theTF ) [EOL] resultTable = [string] [EOL] [EOL] dpr ( [string] , request ) [EOL] if request . method == [string] : [EOL] theTF = theTF . populateFromRequest ( request ) [EOL] theTF . copyOfAaa = theTF . aaa [EOL] if theTF . isValid ( ) : [EOL] resultTable = getResultTable ( theTF ) [EOL] [comment] [EOL] [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( theTF = theTF , resultTable = resultTable , ) [EOL] return h [EOL] [EOL] [EOL] def getResultTable ( th ) : [EOL] [docstring] [EOL] h = [string] [EOL] for fn in th . fieldNames ( ) : [EOL] fi = th . getFieldInfo ( fn ) [EOL] cn = fi . __class__ . __name__ [EOL] v = th [ fn ] [EOL] h += form ( [string] , screenName = fi . title , fn = fn , type = cn , s = th . asReadableH ( fn ) , r = htmlEsc ( repr ( v ) ) , vt = htmlEsc ( v . __class__ . __name__ ) , ) [EOL] [comment] [EOL] h += [string] [EOL] return h [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 $typing.Type[allpages.app.testform.TheTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import List , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] from flask import request , redirect [EOL] [EOL] from allpages import app , jinjaEnv [EOL] from bozen . butil import pr , prn , dpr , form , htmlEsc [EOL] from bozen import FormDoc , BzDate [EOL] from bozen import ( StrField , ChoiceField , TextAreaField , IntField , FloatField , BoolField , MultiChoiceField , DateField ) [EOL] [EOL] import tabs [EOL] [EOL] [comment] [EOL] [EOL] TABEX_TABS = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] def tabexTabLine ( tab ) : [EOL] [docstring] [EOL] h = tabs . makeTabLine ( TABEX_TABS , tab , [string] ) [EOL] return h [EOL] [EOL] @ app . route ( [string] ) def tabex ( tabId ) : [EOL] [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( tabLine = tabexTabLine ( tabId ) , tabId = tabId , ) [EOL] return h [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Type , Any [EOL] import typing [EOL] import app [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import random [EOL] import string [EOL] from typing import * [EOL] [EOL] import pyscrypt [EOL] [EOL] from bozen import butil [EOL] from bozen . butil import printargs , dpr , toBytes [EOL] [EOL] import bozen [EOL] from bozen import ( MonDoc , StrField , TextAreaField , ChoiceField , FK , FKeys , MultiChoiceField , DateField , DateTimeField , IntField , FloatField , BoolField ) [EOL] [EOL] from allpages import jinjaEnv , app [EOL] from permission import loginManager [EOL] [EOL] HIDDEN = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class User ( MonDoc ) : [EOL] userName = StrField ( charsAllowed = string . ascii_letters + string . digits + [string] , minLength = [number] , desc = [string] ) [EOL] hashedPassword = StrField ( ) [EOL] pw = StrField ( desc = [string] ) [EOL] password = StrField ( default = HIDDEN ) [comment] [EOL] email = StrField ( monospaced = True ) [EOL] isAdmin = BoolField ( desc = [string] , title = [string] , default = False ) [EOL] isActive = BoolField ( desc = [string] , title = [string] , default = True ) [EOL] [EOL] @ classmethod def classLogo ( cls ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] s = [string] % ( self . userName , self . pw , self . email ) [EOL] return s [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] def get_id ( self ) : [EOL] return self . userName [EOL] [EOL] @ property def is_authenticated ( self ) : [EOL] return self . isAuthenticated ( ) [EOL] [EOL] @ property def is_anonymous ( self ) : [EOL] return not self . has_key ( [string] ) [EOL] [EOL] @ property def is_active ( self ) : [EOL] return True [EOL] [EOL] def isAuthenticated ( self ) : [EOL] [docstring] [EOL] return self . has_key ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] def getIcon ( self ) : [EOL] return [string] [EOL] [EOL] def preSave ( self ) : [EOL] [docstring] [EOL] if self . password != HIDDEN : [EOL] self . pw = self . password [EOL] self . hashedPassword = hashPassword ( self . password ) [EOL] self . password = HIDDEN [EOL] [EOL] [comment] [EOL] self . _id = self . userName [EOL] [EOL] [EOL] [EOL] @ loginManager . user_loader def load_user ( userId ) : [EOL] user = User . find_one ( { [string] : userId } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] return user [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def randStr ( length ) : [EOL] return [string] . join ( chr ( random . randint ( [number] , [number] ) ) for i in range ( length ) ) [EOL] [EOL] def hashPassword ( password ) : [EOL] encrypted = pyscrypt . hash ( password = toBytes ( password ) , salt = toBytes ( [string] ) , N = [number] , r = [number] , p = [number] , dkLen = [number] ) [EOL] dpr ( [string] , encrypted , type ( encrypted ) ) [EOL] hx = toHex ( encrypted ) [EOL] dpr ( [string] , hx , type ( hx ) ) [EOL] return hx [EOL] [EOL] def verifyPassword ( hashedPassword , guessedPassword ) : [EOL] encrypted = pyscrypt . hash ( password = toBytes ( guessedPassword ) , salt = toBytes ( [string] ) , N = [number] , r = [number] , p = [number] , dkLen = [number] ) [EOL] dpr ( [string] , encrypted , type ( encrypted ) ) [EOL] hx = toHex ( encrypted ) [EOL] dpr ( [string] , hx , type ( hx ) ) [EOL] ok = ( hx == hashedPassword ) [EOL] dpr ( [string] , hashedPassword , ok ) [EOL] return ok [EOL] [EOL] [EOL] def toHex ( s ) : [EOL] [docstring] [EOL] hexDigits = [string] [EOL] r = [string] [EOL] for ch in s : [EOL] if isinstance ( ch , int ) : [EOL] n = ch [EOL] else : [EOL] n = ord ( ch ) [EOL] n1 = int ( n / [number] ) [EOL] n2 = n - n1 * [number] [EOL] r += hexDigits [ n1 ] + hexDigits [ n2 ] [EOL] return r [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[allpages.app.userdb.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from allpages import app , jinjaEnv [EOL] from bozen . butil import pr , prn [EOL] [EOL] import config [EOL] [EOL] prn ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def front ( ) : [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( adminSiteExists = config . CREATE_ADMIN_SITE , adminSitePrefix = config . ADMIN_SITE_PREFIX , ) [EOL] return h [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import functools [EOL] [EOL] from flask import request , redirect [EOL] from flask_login import LoginManager , current_user , logout_user [EOL] [EOL] from bozen . butil import dpr [EOL] [EOL] import ht [EOL] import allpages [EOL] from allpages import jinjaEnv , app [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] loginManager = LoginManager ( ) [EOL] loginManager . init_app ( allpages . app ) [EOL] [EOL] def needUser ( fn ) : [EOL] [docstring] [EOL] import models [EOL] @ functools . wraps ( fn ) def viewWrapper ( * args , ** kwargs ) : [EOL] if not models . goodDMS ( ) : [EOL] return http403 ( [string] ) [EOL] if currentUserName ( ) == [string] : [EOL] return http403 ( ) [EOL] return fn ( * args , ** kwargs ) [EOL] return viewWrapper [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] jinjaEnv . globals [ [string] ] = current_user [EOL] def currentUserName ( ) : [EOL] [comment] [EOL] if ( ( not current_user ) or current_user . is_anonymous ) : [EOL] return [string] [EOL] try : [EOL] return str ( current_user . userName ) [EOL] except : [EOL] return [string] [EOL] jinjaEnv . globals [ [string] ] = currentUserName [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def http403 ( msg = [string] ) : [EOL] [docstring] [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( msg = html . errorBox ( msg ) , ) [EOL] return ( h , [number] ) [EOL] [EOL] @ app . errorhandler ( [number] ) def http404 ( e ) : [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( ) [EOL] return ( h , [number] ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] import jinja2 [EOL] import os . path [EOL] import collections [EOL] import cgi [EOL] [EOL] import config [EOL] [EOL] from flask import Flask , request , session [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] % ( config . PORT , ) [EOL] [EOL] from bozen import butil [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import jinja2 [EOL] from jinja2 import Template [EOL] [EOL] jinjaEnv = jinja2 . Environment ( ) [EOL] thisDir = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] templateDir = butil . join ( thisDir , [string] ) [EOL] jinjaEnv . loader = jinja2 . FileSystemLoader ( templateDir ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Type , Tuple [EOL] import typing [EOL] import app [EOL] import bozen [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from flask import request , redirect [EOL] [EOL] from allpages import app , jinjaEnv [EOL] from bozen . butil import pr , prn , dpr , form , htmlEsc [EOL] from bozen import FormDoc , MonDoc , BzDate , BzDateTime [EOL] from bozen import paginate [EOL] from bozen import ( StrField , ChoiceField , TextAreaField , IntField , FloatField , BoolField , MultiChoiceField , ObjectField , FK , DateField , DateTimeField ) [EOL] [EOL] import ht [EOL] import models [EOL] [EOL] [comment] [EOL] [EOL] DRINK_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] FRUIT_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] class Foo ( MonDoc ) : [EOL] name = StrField ( ) [EOL] description = TextAreaField ( monospaced = True ) [EOL] aNumber = IntField ( minValue = [number] , maxValue = [number] ) [EOL] minSpeed = FloatField ( title = [string] , minValue = [number] ) [EOL] maxSpeed = FloatField ( title = [string] , minValue = [number] ) [EOL] favouriteDrink = ChoiceField ( choices = DRINK_CHOICES , showNull = True , allowNull = True ) [EOL] fruitsLiked = MultiChoiceField ( choices = FRUIT_CHOICES , desc = [string] ) [EOL] tickyBox = BoolField ( ) [EOL] aDate = DateField ( ) [EOL] lastSaved = DateTimeField ( desc = [string] , readOnly = True ) [EOL] aDateTime = DateTimeField ( title = [string] ) [EOL] anything = ObjectField ( desc = [string] , default = [ [string] , [string] ] ) [EOL] favouriteBook = FK ( models . Book , allowNull = True , showNull = True ) [EOL] [EOL] @ classmethod def classLogo ( self ) : [EOL] return [string] [EOL] [EOL] def formWideErrorMessage ( self ) : [EOL] if self . minSpeed > self . maxSpeed : [EOL] return [string] [EOL] return [string] [comment] [EOL] [EOL] def preSave ( self ) : [EOL] self . lastSaved = BzDateTime . now ( ) [EOL] d = self . mongoDict ( ) [EOL] d . pop ( [string] , [string] ) [comment] [EOL] dpr ( [string] , d ) [EOL] self . anything = d [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def foos ( ) : [EOL] count = Foo . count ( ) [EOL] pag = paginate . Paginator ( count ) [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( count = count , pag = pag , table = foosTable ( pag ) , ) [EOL] return h [EOL] [EOL] def foosTable ( pag ) : [EOL] [docstring] [EOL] h = [string] [EOL] fs = Foo . find ( skip = pag . skip , limit = pag . numShow , sort = [string] ) [EOL] for f in fs : [EOL] h += form ( [string] , id = htmlEsc ( f . id ( ) ) , name = f . a ( ) , description = f . asReadableH ( [string] ) , favouriteDrink = f . asReadableH ( [string] ) , fruitsLiked = f . asReadableH ( [string] ) , tickyBox = f . asReadableH ( [string] ) , ) [EOL] [comment] [EOL] h += [string] [EOL] return h [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def foo ( id ) : [EOL] if id == [string] : [EOL] doc = Foo ( ) [EOL] else : [EOL] doc = Foo . getDoc ( id ) [EOL] msg = [string] [EOL] [EOL] if request . method == [string] : [EOL] doc = doc . populateFromRequest ( request ) [EOL] if request . form . get ( [string] , [string] ) == [string] : [EOL] [comment] [EOL] doc . delete ( ) [EOL] return redirect ( [string] , code = [number] ) [EOL] else : [EOL] if doc . isValid ( ) : [EOL] doc . save ( ) [EOL] msg = [string] [EOL] [comment] [EOL] [comment] [EOL] [EOL] tem = jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( doc = doc , id = id , msg = ht . goodMessageBox ( msg ) , ) [EOL] return h [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.foo.Foo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import builtins [EOL] from . butil import * [EOL] from . import fieldinfo [EOL] [EOL] [comment] [EOL] [EOL] class ObjectField ( fieldinfo . FieldInfo ) : [EOL] [docstring] [EOL] [EOL] def defaultDefault ( self ) : [EOL] [docstring] [EOL] return None [EOL] [EOL] def convertToScreen ( self , v ) : [EOL] [docstring] [EOL] s = pretty ( v , [number] ) [EOL] return s [EOL] [EOL] def formField_rw ( self , v , ** kwargs ) : [EOL] return self . formField_ro ( v , ** kwargs ) [EOL] [EOL] def formField_ro ( self , v , ** kwargs ) : [EOL] h2 = form ( [string] , cc = fieldinfo . cssClasses ( [string] ) , h = self . convertToScreenH ( v ) ) [EOL] return h2 [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Type , Any , List , Optional , Tuple [EOL] import app [EOL] import typing [EOL] import paginate [EOL] import mondoc [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from flask import request , redirect [EOL] [EOL] from . butil import * [EOL] from butil import form , htmlEsc , attrEsc [EOL] from . bztypes import * [EOL] from . import paginate [EOL] [EOL] from . import mongo [EOL] from . import mondoc [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] class AdminSite ( object ) : [EOL] [EOL] def __init__ ( self , collections = None , stub = [string] ) : [EOL] if stub [ : [number] ] != [string] : stub = [string] + stub [EOL] self . stub = stub [EOL] [EOL] if collections == None : [EOL] collections = mondoc . monDocSubclassDict . values ( ) [EOL] colKV = [ ( getColName ( cls ) , cls ) for cls in collections if cls is not mondoc . MonDoc ] [EOL] colKV . sort ( key = lambda x : x [ [number] ] ) [EOL] else : [EOL] colKV = [ ( getColName ( cls ) , cls ) for cls in collections ] [EOL] self . colKV = colKV [EOL] self . colDict = dict ( self . colKV ) [EOL] self . colFields = { } [EOL] self . sortSpecs = { } [EOL] [EOL] def showFields ( self , colClass , fieldNames ) : [EOL] [docstring] [EOL] colName = getColName ( colClass ) [EOL] self . colFields [ colName ] = fieldNames [EOL] [EOL] def sortFields ( self , colClass , sortSpec ) : [EOL] [docstring] [EOL] colName = getColName ( colClass ) [EOL] self . sortSpecs [ colName ] = sortSpec [EOL] [EOL] def runFlask ( self , flaskApp , jinjaEnv ) : [EOL] [docstring] [EOL] self . flaskApp = flaskApp [EOL] self . jinjaEnv = jinjaEnv [EOL] [EOL] [comment] [EOL] self . flaskApp . add_url_rule ( self . stub , [string] ) [EOL] self . flaskApp . view_functions [ [string] ] = self . adminEp [EOL] [EOL] self . flaskApp . add_url_rule ( self . stub + [string] , [string] ) [EOL] self . flaskApp . view_functions [ [string] ] = self . adminColEp [EOL] [EOL] self . flaskApp . add_url_rule ( self . stub + [string] , [string] , methods = [ [string] , [string] ] ) [EOL] self . flaskApp . view_functions [ [string] ] = self . adminDocEp [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def adminEp ( self ) : [EOL] [docstring] [EOL] tem = self . jinjaEnv . get_template ( [string] ) [EOL] h = tem . render ( adminStub = self . stub , adminPagesLis = self . adminPagesLisH ( ) , colTable = self . colTableH ( ) , ) [EOL] [comment] [EOL] return h [EOL] [EOL] def colTableH ( self ) : [EOL] [docstring] [EOL] h = [string] [EOL] ix = [number] [EOL] for colName , colClass in self . colKV : [EOL] count = colClass . count ( ) [EOL] h += form ( [string] , ix = ix , logo = colClass . classLogo ( ) , stub = self . stub , colName = htmlEsc ( colName ) , count = count , ) [EOL] ix += [number] [EOL] [comment] [EOL] [EOL] h += [string] [EOL] return h [EOL] [EOL] [comment] [EOL] [EOL] def adminColEp ( self , colName ) : [EOL] [docstring] [EOL] colClass = self . colDict [ colName ] [EOL] tem = self . jinjaEnv . get_template ( [string] ) [EOL] count = colClass . count ( ) [EOL] pag = paginate . Paginator ( count ) [EOL] h = tem . render ( adminStub = self . stub , adminPagesLis = self . adminPagesLisH ( ) , colClass = colClass , colName = colName , docTable = self . docTableH ( colClass , pag ) , count = count , pag = pag , ) [EOL] return h [EOL] [EOL] def docTableH ( self , colClass , pag ) : [EOL] [docstring] [EOL] colName = getColName ( colClass ) [EOL] useFields = self . getUseFields ( colClass ) [EOL] useFnFi = [ ( fn , colClass . getFieldInfo ( fn ) ) for fn in useFields ] [EOL] h = form ( [string] , others = [string] . join ( form ( [string] , fi . title ) for _ , fi in useFnFi ) ) [EOL] for doc in colClass . find ( skip = pag . skip , limit = pag . numShow , sort = self . sortSpecs . get ( colName , useFields [ [number] ] ) ) : [EOL] others = [string] [EOL] for fn , fi in useFnFi : [EOL] others += form ( [string] , doc . asReadableH ( fn ) ) [EOL] [comment] [EOL] docUrl = attrEsc ( form ( [string] , stub = self . stub , colName = colName , id = doc . id ( ) ) ) [EOL] h += form ( [string] , getName = htmlEsc ( doc . getName ( ) ) , id = doc . id ( ) , url = docUrl , others = others ) [EOL] [comment] [EOL] h += [string] [EOL] return h [EOL] [EOL] [comment] [EOL] [EOL] def adminDocEp ( self , colName , id ) : [EOL] [docstring] [EOL] colClass = self . colDict [ colName ] [EOL] tem = self . jinjaEnv . get_template ( [string] ) [EOL] if id == [string] : [EOL] doc = colClass ( ) [EOL] [comment] [EOL] else : [EOL] doc = colClass . getDoc ( id ) [EOL] [comment] [EOL] fwem = [string] [comment] [EOL] [EOL] if request . method == [string] : [EOL] [comment] [EOL] doc = doc . populateFromRequest ( request ) [EOL] [comment] [EOL] [EOL] if request . form [ [string] ] == [string] : [EOL] [comment] [EOL] [comment] [EOL] doc . remove ( ) [EOL] return redirect ( self . colUrl ( colClass ) , code = [number] ) [EOL] elif doc . isValid ( ) : [EOL] [comment] [EOL] [comment] [EOL] doc . save ( ) [EOL] return redirect ( self . colUrl ( colClass ) , code = [number] ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] fwem = doc . formWideErrorMessageH ( ) [EOL] pass [EOL] [comment] [EOL] [EOL] h = tem . render ( adminStub = self . stub , adminPagesLis = self . adminPagesLisH ( ) , colName = colName , id = id , doc = doc , fwem = fwem , readOnly = False , ) [EOL] return h [EOL] [EOL] [comment] [EOL] [EOL] def adminPagesLisH ( self ) : [EOL] h = [string] [EOL] for n , colClass in self . colKV : [EOL] h += form ( [string] , stub = self . stub , logo = colClass . classLogo ( ) , colName = n ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] h += [string] [string] [EOL] [comment] [EOL] return h [EOL] [EOL] def getUseFields ( self , colClass ) : [EOL] [docstring] [EOL] colName = getColName ( colClass ) [EOL] fields = self . colFields . get ( colName , None ) [EOL] if fields != None : return fields [EOL] [EOL] fields = list ( colClass . classInfo . fieldNameTuple [ : [number] ] ) [EOL] self . colFields [ colName ] = fields [EOL] return fields [EOL] [EOL] def colUrl ( self , colClass ) : [EOL] [docstring] [EOL] colName = getColName ( colClass ) [EOL] url = form ( [string] , stub = self . stub , colName = getColName ( colClass ) ) [EOL] return url [EOL] [EOL] [EOL] [EOL] def getColName ( clsName ) : [EOL] [docstring] [EOL] if isinstance ( clsName , type ) : [EOL] clsName = clsName . __name__ [EOL] return clsName [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $HtmlStr$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Set , Dict , Iterable , Any , Iterator , List , Collection , Type , Tuple [EOL] import app [EOL] import typing [EOL] import pymongo [EOL] import bztypes [EOL] import builtins [EOL] from typing import * [EOL] [EOL] import pymongo [EOL] [EOL] from . butil import * [EOL] from . import bozenutil [EOL] from . bztypes import DbId , DisplayValue , DbValue , HtmlStr , SortSpec [EOL] from . import formdoc [EOL] from . import mongo [EOL] from . import autopages [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] monDocSubclassDict = { } [EOL] [EOL] class MonDocMeta ( formdoc . FormDocMeta ) : [EOL] def __init__ ( cls , name , bases , dyct ) : [EOL] super ( ) . __init__ ( name , bases , dyct ) [EOL] [comment] [EOL] [comment] [EOL] initialiseMonDocClass ( cls , dyct ) [EOL] [EOL] def initialiseMonDocClass ( cls , dyct ) : [EOL] [docstring] [EOL] global monDocSubclassDict [EOL] monDocSubclassDict [ cls . __name__ ] = cls [EOL] setCollection ( cls , dyct ) [EOL] [EOL] def setCollection ( cls , dyct ) : [EOL] [docstring] [EOL] if cls . __name__ == [string] : return [EOL] [EOL] useCollectionName = cls . __name__ [EOL] dpr ( [string] , cls . __name__ , useCollectionName ) [EOL] db = mongo . getDefaultDatabase ( ) [EOL] if not db : [EOL] raise Exception ( [string] [string] % ( cls . __name__ , ) ) [EOL] useCollection = db [ useCollectionName ] [EOL] cls . classInfo . useCollection = useCollection [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class MonDoc ( formdoc . FormDoc , metaclass = MonDocMeta ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def allowedFieldNameSet ( self ) : [EOL] [docstring] [EOL] return self . classInfo . fieldNameSet | set ( [ [string] ] ) [EOL] [EOL] def __repr__ ( self ) : [EOL] s = [string] % ( self . __class__ . __name__ , ) [EOL] if [string] in self . __dict__ : [EOL] s += [string] % ( self . id ( ) , ) [EOL] showFields = self . classInfo . fieldNameTuple [ : [number] ] [EOL] for fn in showFields : [EOL] fv = self [ fn ] [EOL] s += [string] % ( fn , fv ) [EOL] [comment] [EOL] s += [string] [EOL] return s [EOL] [EOL] def __str__ ( self ) : [EOL] return self . __repr__ ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def count ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] cursor = cls . col ( ) . find ( * args , ** kwargs ) [EOL] return cursor . count ( ) [EOL] [EOL] [EOL] @ classmethod def find ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] kwargs = cls . fixKwargs ( kwargs ) [EOL] cursor = cls . col ( ) . find ( * args , ** kwargs ) [EOL] for item in cursor : [EOL] ins = cls . transform ( item ) [EOL] yield ins [EOL] [EOL] @ classmethod def find_one ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] kwargs = cls . fixKwargs ( kwargs ) [EOL] doc = cls . col ( ) . find_one ( * args , ** kwargs ) [EOL] if doc == None : return None [EOL] ins = cls . transform ( doc ) [EOL] return ins [EOL] [EOL] @ classmethod def delete_many ( cls , spec = None ) : [EOL] [docstring] [EOL] cls . col ( ) . delete_many ( spec ) [EOL] [EOL] @ classmethod def getDoc ( cls , id ) : [EOL] [docstring] [EOL] id = mongo . normaliseId ( id ) [EOL] result = cls . col ( ) . find_one ( { [string] : id } ) [EOL] if result == None : [EOL] return None [EOL] ins = cls . transform ( result ) [EOL] return ins [EOL] [EOL] @ classmethod def transform ( cls , mongoDoc ) : [EOL] [docstring] [EOL] instance = cls ( ) [EOL] for k , v in mongoDoc . items ( ) : [EOL] try : [EOL] fi = cls . getFieldInfo ( k ) [EOL] except KeyError : [EOL] instance . __dict__ [ k ] = v [EOL] else : [EOL] instance . __dict__ [ k ] = fi . convertFromDatabase ( v ) [EOL] [comment] [EOL] instance . postLoad ( ) [EOL] return instance [EOL] [EOL] @ classmethod def col ( cls ) : [EOL] [docstring] [EOL] return cls . classInfo . useCollection [EOL] [EOL] [comment] [EOL] [EOL] def save ( self ) : [EOL] [docstring] [EOL] if not self . hasId ( ) : [EOL] self . _id = [string] % ( self . __class__ . __name__ , mongo . idInc . getNewIndexB36 ( ) ) [EOL] self . preCreate ( ) [EOL] [EOL] self . preSave ( ) [EOL] self . col ( ) . save ( self . mongoDict ( ) ) [EOL] self . postSave ( ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] if self . hasId ( ) : [EOL] self . col ( ) . delete_one ( { [string] : self . _id } ) [EOL] remove = delete [EOL] [EOL] def preSave ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def postSave ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def preCreate ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def postLoad ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def mongoDict ( self ) : [EOL] [docstring] [EOL] d = { } [EOL] [comment] [EOL] for fn in self . classInfo . fieldNameTuple : [EOL] [comment] [EOL] if not fn in self . __dict__ : continue [EOL] fi = self . getFieldInfo ( fn ) [EOL] d [ fn ] = fi . convertToDatabase ( self [ fn ] ) [EOL] [comment] [EOL] d [ [string] ] = self [ [string] ] [EOL] [comment] [EOL] return d [EOL] [EOL] [comment] [EOL] [EOL] def getForeignIds ( self , foreignCol , fn ) : [EOL] [docstring] [EOL] if not self . hasId ( ) : return [ ] [EOL] foreignCol2 = self . makeMonDoc ( foreignCol ) [EOL] for foreignDoc in foreignCol2 . find ( { fn : self . _id } ) : [EOL] foreignId = foreignDoc . _id [EOL] yield foreignId [EOL] [comment] [EOL] [EOL] def getForeignDocs ( self , foreignCol , fn = [string] ) : [EOL] [docstring] [EOL] if not self . hasId ( ) : return [ ] [EOL] foreignCol2 = self . makeMonDoc ( foreignCol ) [EOL] if not fn : [EOL] ffs = foreignCol2 . getForeignFieldNames ( self . __class__ ) [EOL] fn = ffs [ [number] ] [EOL] q = { fn : self . _id } [EOL] dpr ( [string] , q ) [EOL] bookIter = foreignCol2 . find ( q ) [EOL] return bookIter [EOL] [EOL] @ classmethod def getForeignFieldNames ( cls , foreignClass ) : [EOL] [docstring] [EOL] from . import keychoicefield [EOL] from . import multichoicefield [EOL] fns = [ ] [EOL] for fn in cls . classInfo . fieldNameTuple : [EOL] fi = cls . getFieldInfo ( fn ) [EOL] if isinstance ( fi , ( keychoicefield . FK , multichoicefield . FKeys ) ) : [EOL] if fi . foreignTable == foreignClass : [EOL] fns . append ( fn ) [EOL] [comment] [EOL] return fns [EOL] [EOL] [comment] [EOL] [EOL] def a ( self , urlStub = None , includeLogo = True ) : [EOL] [docstring] [EOL] if urlStub : [EOL] url = urlStub + self . id ( ) [EOL] [comment] [EOL] else : [EOL] url = self . url ( ) [EOL] [comment] [EOL] if includeLogo : [EOL] logo = self . logo ( ) [EOL] else : [EOL] logo = [string] [EOL] h = [string] % ( attrEsc ( url ) , logo , self . getNameH ( ) ) [EOL] return h [EOL] [EOL] [EOL] def url ( self ) : [EOL] [docstring] [EOL] n = self . __class__ . __name__ [EOL] stub = n [ : [number] ] . lower ( ) + n [ [number] : ] [EOL] u = form ( [string] , stub , self . id ( ) ) [EOL] return u [EOL] [EOL] @ classmethod def classLogo ( cls ) : [EOL] [docstring] [EOL] return [string] [EOL] [EOL] def logo ( self ) : [EOL] [docstring] [EOL] return self . classLogo ( ) [EOL] [EOL] def getName ( self ) : [EOL] [docstring] [EOL] if len ( self . classInfo . fieldNameTuple ) == [number] : [EOL] return [string] [EOL] fn0 = self . classInfo . fieldNameTuple [ [number] ] [EOL] if fn0 . endswith ( [string] ) : return self . id ( ) [EOL] return self . asReadable ( fn0 ) [EOL] [EOL] def getNameH ( self ) : [EOL] [docstring] [EOL] return htmlEsc ( self . getName ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] def adminA ( self , adminStub = [string] ) : [EOL] [docstring] [EOL] return [string] % ( attrEsc ( self . adminUrl ( adminStub = adminStub ) ) , self . logo ( ) , htmlEsc ( self . getName ( ) ) ) [EOL] [EOL] def adminUrl ( self , adminStub = [string] ) : [EOL] [docstring] [EOL] collectionName = self . __class__ . __name__ [EOL] u = form ( [string] , adminStub , collectionName , self . id ( ) ) [EOL] return u [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def autopages ( cls , pages = [string] , ** kwargs ) : [EOL] [docstring] [EOL] autopages . addAutopage ( cls , pages , ** kwargs ) [EOL] [EOL] [comment] [EOL] [EOL] def id ( self ) : [EOL] [docstring] [EOL] if self . hasId ( ) : [EOL] return str ( self . _id ) [EOL] else : [EOL] return [string] [EOL] [EOL] def hasId ( self ) : [EOL] [docstring] [EOL] return [string] in self . __dict__ [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def fixKwargs ( kwargs ) : [EOL] [docstring] [EOL] if [string] in kwargs : [EOL] kwargs [ [string] ] = MonDoc . fixSort ( kwargs [ [string] ] ) [EOL] return kwargs [EOL] [EOL] @ staticmethod def fixSort ( sortArg ) : [EOL] [docstring] [EOL] if isinstance ( sortArg , ( str , tuple ) ) : [EOL] sortArg = [ sortArg ] [EOL] newSortArg = [ term if isinstance ( term , tuple ) [EOL] else ( term , [number] ) for term in sortArg ] [EOL] return newSortArg [EOL] [EOL] @ staticmethod def makeMonDoc ( mdos ) : [EOL] [docstring] [EOL] if not isinstance ( mdos , str ) : [EOL] [comment] [EOL] return mdos [EOL] [EOL] isAMonDocSubclass = mdos in monDocSubclassDict [EOL] if isAMonDocSubclass : [EOL] return monDocSubclassDict [ mdos ] [EOL] [EOL] raise KeyError ( [string] % ( mdos , ) ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type['MonDoc']$ 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Type['MonDoc'],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import List , Any , Type , Tuple [EOL] import typing [EOL] from typing import * [EOL] [EOL] import pymongo [EOL] from bson . objectid import ObjectId [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] DbId = Union [ ObjectId , str ] [EOL] [EOL] [docstring] [EOL] DisplayValue = str [EOL] [EOL] [docstring] [EOL] HtmlStr = str [EOL] [EOL] [docstring] [EOL] DbValue = str [EOL] [EOL] [docstring] [EOL] ChoiceList = List [ Tuple [ DbValue , DisplayValue ] ] [EOL] [EOL] [docstring] [EOL] SortSpec1 = Union [ str , Tuple [ str , int ] ] [EOL] SortSpec = Union [ SortSpec1 , List [ SortSpec1 ] ] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [docstring] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from flask import request [EOL] from flask_paginate import Pagination [EOL] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] DEFAULT_PER_PAGE = [number] [EOL] [EOL] [EOL] class Paginator : [EOL] def __init__ ( self , total , perPage = DEFAULT_PER_PAGE , showSinglePage = False ) : [EOL] self . perPage = perPage [EOL] self . total = total [EOL] self . page = int ( request . args . get ( [string] , [number] ) ) [EOL] self . showSinglePage = showSinglePage [EOL] self . calc ( ) [EOL] [EOL] def calc ( self ) : [EOL] [docstring] [EOL] self . maxPage = int ( ( self . total + self . perPage - [number] ) / self . perPage ) [EOL] if self . maxPage < [number] : self . maxPage = [number] [EOL] if self . page < [number] : self . page = [number] [EOL] if self . page > self . maxPage : self . page = self . maxPage [EOL] [EOL] self . skip = ( self . page - [number] ) * self . perPage [EOL] self . fromIx = self . skip + [number] [EOL] self . toIx = self . skip + self . perPage [EOL] if self . toIx > self . total : self . toIx = self . total [EOL] self . numShow = self . toIx - self . fromIx + [number] [EOL] [EOL] self . info = [string] % ( self . fromIx , self . toIx , self . total ) [EOL] [EOL] self . flaskPag = Pagination ( page = self . page , css_framework = [string] , link_size = self . perPage , show_single_page = self . showSinglePage , per_page = self . perPage , total = self . total ) [EOL] self . links = self . flaskPag . links [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int
[comment] [EOL] [EOL] import builtins [EOL] from typing import Type [EOL] import typing [EOL] import app [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] class TermColours : [EOL] BLACK = chr ( [number] ) + [string] [EOL] RED = chr ( [number] ) + [string] [EOL] GREEN = chr ( [number] ) + [string] [EOL] BLUE = chr ( [number] ) + [string] [EOL] MAGENTA = chr ( [number] ) + [string] [EOL] [EOL] RED_ON_GREY = chr ( [number] ) + [string] [EOL] LRED_ON_GREY = chr ( [number] ) + [string] [EOL] BLACK_ON_RED = chr ( [number] ) + [string] [EOL] BLACK_ON_GREY = chr ( [number] ) + [string] [EOL] BLUE_ON_GREY = chr ( [number] ) + [string] [EOL] YELLOW_ON_RED = chr ( [number] ) + [string] [EOL] GREY_ON_WHITE = chr ( [number] ) + [string] [EOL] DGREY_ON_WHITE = chr ( [number] ) + [string] [EOL] LCYAN_ON_BLUE = chr ( [number] ) + [string] [EOL] [EOL] NORMAL = chr ( [number] ) + [string] [EOL] BOLD = chr ( [number] ) + [string] [EOL] FAINT = chr ( [number] ) + [string] [EOL] UNDERLINE = chr ( [number] ) + [string] [EOL] [EOL] [EOL] class NullColours : [EOL] BLACK = [string] [EOL] RED = [string] [EOL] GREEN = [string] [EOL] BLUE = [string] [EOL] MAGENTA = [string] [EOL] RED_ON_GREY = [string] [EOL] LRED_ON_GREY = [string] [EOL] BLACK_ON_RED = [string] [EOL] BLACK_ON_GREY = [string] [EOL] BLUE_ON_GREY = [string] [EOL] YELLOW_ON_RED = [string] [EOL] GREY_ON_WHITE = [string] [EOL] DGREY_ON_WHITE = [string] [EOL] LCYAN_ON_BLUE = [string] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] class FileField : [EOL] pass [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Incrementor : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , before = [number] ) : [EOL] self . i = before [EOL] [EOL] def __call__ ( self ) : [EOL] self . i += [number] [EOL] return self . i [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] import os , sys ; sys . path . append ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . formdoc import FormDoc [EOL] [EOL] from . fieldinfo import FieldInfo , StrField , TextAreaField , PasswordField [EOL] from . keychoicefield import ChoiceField , FK [EOL] from . numberfield import IntField , FloatField , BoolField [EOL] from . multichoicefield import MultiChoiceField , FKeys [EOL] from . timefield import BzDate , DateField , BzDateTime , DateTimeField [EOL] from . objectfield import ObjectField [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . mongo import setDefaultDatabase , getDefaultDatabase [EOL] from . mondoc import MonDoc [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . paginate import Paginator [EOL] from . autopages import notifyFlaskForAutopages [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . admin import AdminSite [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Literal , Any [EOL] import typing [EOL] import builtins [EOL] import typing_extensions [EOL] [docstring] [EOL] [EOL] [EOL] from . butil import * [EOL] [EOL] from . import fieldinfo [EOL] [EOL] [comment] [EOL] [EOL] class IntField ( fieldinfo . FieldInfo ) : [EOL] [docstring] [EOL] [EOL] [EOL] def defaultDefault ( self ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] def convertValue ( self , v ) : [EOL] try : [EOL] i = int ( v ) [EOL] except : [EOL] i = self . defaultValue [EOL] return i [EOL] [EOL] [comment] [EOL] [EOL] class FloatField ( fieldinfo . FieldInfo ) : [EOL] [docstring] [EOL] [EOL] [EOL] def defaultDefault ( self ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] def convertValue ( self , v ) : [EOL] try : [EOL] f = float ( v ) [EOL] except : [EOL] f = self . defaultValue [EOL] return f [EOL] [EOL] [comment] [EOL] [EOL] class BoolField ( fieldinfo . FieldInfo ) : [EOL] [docstring] [EOL] [EOL] [EOL] def readArgs ( self , ** kwargs ) : [EOL] super ( ) . readArgs ( ** kwargs ) [EOL] self . widget = kwargs . get ( [string] , [string] ) [EOL] self . offText = kwargs . get ( [string] , [string] ) [EOL] self . onText = kwargs . get ( [string] , [string] ) [EOL] self . showTitle = kwargs . get ( [string] , True ) [EOL] [EOL] def defaultDefault ( self ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] def convertValue ( self , v ) : [EOL] return bool ( v ) [EOL] [EOL] def convertToScreen ( self , v ) : [EOL] s = [string] if v else [string] [EOL] return s [EOL] [EOL] def formField_rw ( self , v , ** kwargs ) : [EOL] [docstring] [EOL] checked = [string] [EOL] if v : checked = [string] [EOL] if self . widget == [string] : [EOL] h = form ( [string] , fieldName = self . fieldName , checked = checked , ) [EOL] elif self . widget == [string] : [EOL] h = form ( [string] , fieldName = self . fieldName , checked = checked , rightText = self . onText , ) [EOL] else : [EOL] raise ShouldntGetHere [EOL] [comment] [EOL] return h [EOL] [EOL] def setFieldName ( self , fieldName ) : [EOL] [docstring] [EOL] super ( ) . setFieldName ( fieldName ) [EOL] [EOL] [comment] [EOL] if self . widget == [string] : [EOL] if self . showTitle : [EOL] titleAndOff = ( self . title and self . offText ) [EOL] self . title = ( self . title + ( [string] if titleAndOff else [string] ) + self . offText ) [EOL] else : [EOL] self . title = self . offText [EOL] dpr ( [string] , self . title ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0