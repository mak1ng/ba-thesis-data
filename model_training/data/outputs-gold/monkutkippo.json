from typing import Any [EOL] import typing [EOL] import argparse [EOL] [docstring] [EOL] import os [EOL] import json [EOL] import boto3 [EOL] [EOL] [EOL] DEFAULT_AWS_REGION = [string] [EOL] [EOL] [EOL] def find_zappasettings_filepath ( root = os . getcwd ( ) ) : [EOL] filepath = None [EOL] root_directory = os . path . abspath ( root ) [EOL] for p , dirs , files in os . walk ( root_directory ) : [EOL] if [string] in files : [EOL] filepath = os . path . join ( p , [string] ) [EOL] break [EOL] if not filepath : [EOL] raise Exception ( [string] . format ( root_directory ) ) [EOL] return filepath [EOL] [EOL] [EOL] DEFAULT_ZAPPASETTINGS_FILEPATH = find_zappasettings_filepath ( ) [EOL] [EOL] [EOL] def get_vpc_privatesubents_and_sgid ( stackname , region = DEFAULT_AWS_REGION ) : [EOL] [docstring] [EOL] cloudformation = boto3 . client ( [string] , region_name = region ) [EOL] response = cloudformation . describe_stacks ( StackName = stackname ) [EOL] [comment] [EOL] assert len ( response [ [string] ] ) == [number] [EOL] stack_info = response [ [string] ] [ [number] ] [EOL] private_subnet_ids = None [EOL] for output_info in stack_info [ [string] ] : [EOL] if output_info [ [string] ] == [string] : [EOL] private_subnet_ids = output_info [ [string] ] . split ( [string] ) [EOL] break [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] startswith_string = [string] . format ( stackname ) [EOL] [EOL] ec2 = boto3 . client ( [string] , region_name = region ) [EOL] response = ec2 . describe_security_groups ( ) [EOL] securitygroup_group_id = None [EOL] for sg_info in response [ [string] ] : [EOL] if sg_info [ [string] ] . startswith ( startswith_string ) : [EOL] securitygroup_group_id = sg_info [ [string] ] [EOL] break [EOL] return private_subnet_ids , securitygroup_group_id [EOL] [EOL] [EOL] def update_zappa_settings ( stackname , stage , region = DEFAULT_AWS_REGION , filepath = DEFAULT_ZAPPASETTINGS_FILEPATH ) : [EOL] [docstring] [EOL] if not os . path . exists ( filepath ) : [EOL] raise FileNotFoundError ( [string] . format ( filepath ) ) [EOL] private_subnet_ids , securitygroup_group_id = get_vpc_privatesubents_and_sgid ( stackname , region ) [EOL] [EOL] with open ( filepath , [string] , encoding = [string] ) as zappa_in : [EOL] zappa_settings = json . load ( zappa_in ) [EOL] [EOL] assert stage in zappa_settings [EOL] [EOL] [comment] [EOL] zappa_settings [ stage ] [ [string] ] = { [string] : private_subnet_ids , [string] : [ securitygroup_group_id ] } [EOL] [EOL] [comment] [EOL] with open ( filepath , [string] , encoding = [string] ) as zappa_out : [EOL] zappa_out . write ( json . dumps ( zappa_settings , indent = [number] ) ) [EOL] return zappa_settings [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] import argparse [EOL] parser = argparse . ArgumentParser ( description = __doc__ ) [EOL] parser . add_argument ( [string] , [string] , dest = [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , dest = [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] print ( [string] . format ( DEFAULT_ZAPPASETTINGS_FILEPATH ) ) [EOL] result = update_zappa_settings ( args . stackname , args . stage , args . region ) [EOL] print ( [string] . format ( args . stackname ) ) [EOL] print ( json . dumps ( result , indent = [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OctocatConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Tuple , Type [EOL] import kippo [EOL] import typing [EOL] import uuid [EOL] from django . db import models [EOL] from django . contrib . postgres import fields [EOL] from django . conf import settings [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . contrib . postgres . fields import JSONField [EOL] [EOL] from common . models import UserCreatedBaseModel [EOL] from accounts . models import KippoOrganization [EOL] [EOL] [EOL] GITHUB_MILESTONE_CLOSE_STATE = [string] [EOL] GITHUB_REPOSITORY_NAME_MAX_LENGTH = [number] [EOL] [EOL] [EOL] class GithubRepositoryLabelSet ( models . Model ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] organization = models . ForeignKey ( KippoOrganization , on_delete = models . CASCADE , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] name = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] labels = JSONField ( help_text = [string] [string] ) [EOL] created_datetime = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] updated_datetime = models . DateTimeField ( auto_now = True , editable = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . __class__ . __name__ } [string] { self . id } [string] { self . name }' [EOL] [EOL] [EOL] class GithubRepository ( UserCreatedBaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] organization = models . ForeignKey ( KippoOrganization , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = GITHUB_REPOSITORY_NAME_MAX_LENGTH , verbose_name = _ ( [string] ) ) [EOL] label_set = models . ForeignKey ( GithubRepositoryLabelSet , on_delete = models . DO_NOTHING , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] api_url = models . URLField ( help_text = _ ( [string] ) ) [EOL] html_url = models . URLField ( help_text = _ ( [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . __class__ . __name__ } [string] { self . name } [string] { self . html_url }' [EOL] [EOL] class Meta : [EOL] verbose_name_plural = _ ( [string] ) [EOL] unique_together = ( [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class GithubMilestone ( UserCreatedBaseModel ) : [EOL] [docstring] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] milestone = models . ForeignKey ( [string] , verbose_name = _ ( [string] ) , on_delete = models . CASCADE , help_text = _ ( [string] ) ) [EOL] repository = models . ForeignKey ( GithubRepository , null = True , default = None , on_delete = models . CASCADE ) [EOL] number = models . PositiveIntegerField ( _ ( [string] ) , editable = False , help_text = _ ( [string] ) ) [EOL] api_url = models . URLField ( _ ( [string] ) , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] html_url = models . URLField ( _ ( [string] ) , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class GithubAccessToken ( UserCreatedBaseModel ) : [EOL] organization = models . OneToOneField ( [string] , on_delete = models . CASCADE ) [EOL] token = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . __class__ . __name__ } [string] { self . organization . name } [string] { self . organization . github_organization_name } [string] ' [EOL] [EOL] [EOL] def webhook_events_default ( ) : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] class GithubOrganizationalWebhook ( UserCreatedBaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] organization = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] hook_id = models . PositiveSmallIntegerField ( null = True , blank = True ) [EOL] events = fields . ArrayField ( default = webhook_events_default , base_field = models . CharField ( max_length = [number] ) , help_text = _ ( [string] ) ) [EOL] url = models . URLField ( default = settings . WEBHOOK_URL , help_text = _ ( [string] ) ) [EOL] [EOL] [EOL] WEBHOOK_EVENT_STATES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [EOL] class GithubWebhookEvent ( models . Model ) : [EOL] organization = models . ForeignKey ( [string] , on_delete = models . CASCADE , help_text = _ ( [string] ) ) [EOL] created_datetime = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] updated_datetime = models . DateTimeField ( auto_now = True , editable = False ) [EOL] state = models . CharField ( max_length = [number] , default = [string] , choices = WEBHOOK_EVENT_STATES ) [EOL] event_type = models . CharField ( max_length = [number] , null = True , help_text = _ ( [string] ) ) [EOL] event = fields . JSONField ( editable = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . organization . name } [string] { self . event_type } [string] { self . created_datetime } [string] { self . state } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Any [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import hashlib [EOL] import hmac [EOL] import json [EOL] from pathlib import Path [EOL] from typing import Tuple [EOL] [EOL] [EOL] def load_webhookevent ( filepath , secret_encoded , decode = False ) : [EOL] with filepath . open ( [string] ) as content_f : [EOL] content = content_f . read ( ) [EOL] [comment] [EOL] s = hmac . new ( key = secret_encoded , msg = content , digestmod = hashlib . sha1 ) . hexdigest ( ) [EOL] signature = f" [string] { s }" [EOL] if decode : [EOL] content = json . loads ( content ) [EOL] return content , signature [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.bytes,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Type , Any , Dict [EOL] import pathlib [EOL] import kippo [EOL] import typing [EOL] import hashlib [EOL] import hmac [EOL] import os [EOL] from http import HTTPStatus [EOL] from pathlib import Path [EOL] from typing import Tuple [EOL] [EOL] from common . tests import DEFAULT_FIXTURES , setup_basic_project [EOL] from django . conf import settings [EOL] from django . test import Client , TestCase [EOL] [EOL] from . . models import GithubWebhookEvent [EOL] from . utils import load_webhookevent [EOL] [EOL] assert os . getenv ( [string] , False ) [comment] [EOL] TESTDATA_DIRECTORY = Path ( __file__ ) . parent / [string] [EOL] [EOL] [EOL] class OctocatViewsTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] created = setup_basic_project ( ) [EOL] self . organization = created [ [string] ] [EOL] self . secret_encoded = self . organization . webhook_secret . encode ( [string] ) [EOL] GithubWebhookEvent . objects . all ( ) . delete ( ) [EOL] [EOL] def test_application_xwwwformurlencoded ( self ) : [EOL] event_filepath = TESTDATA_DIRECTORY / [string] [EOL] content , signature = load_webhookevent ( event_filepath , secret_encoded = self . secret_encoded ) [EOL] [EOL] headers = { [string] : [string] , [string] : signature } [EOL] [EOL] response = self . client . generic ( [string] , self . organization . webhook_url , content , content_type = [string] , follow = True , ** headers ) [EOL] expected = HTTPStatus . NO_CONTENT [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f" [string] { actual } [string] { expected } [string] " ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( GithubWebhookEvent . objects . count ( ) == [number] ) [EOL] [EOL] def test_application_json ( self ) : [EOL] event_filepath = TESTDATA_DIRECTORY / [string] [EOL] content , signature = load_webhookevent ( event_filepath , secret_encoded = self . secret_encoded ) [EOL] [EOL] headers = { [string] : [string] , [string] : signature } [EOL] response = self . client . generic ( [string] , self . organization . webhook_url , content , content_type = [string] , follow = True , ** headers ) [EOL] expected = HTTPStatus . NO_CONTENT [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f" [string] { actual } [string] { expected } [string] { response . content }" ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( GithubWebhookEvent . objects . count ( ) == [number] ) [EOL] [EOL] def test_invalid_contenttype ( self ) : [EOL] event_filepath = TESTDATA_DIRECTORY / [string] [EOL] content , signature = load_webhookevent ( event_filepath , secret_encoded = self . secret_encoded ) [EOL] [EOL] headers = { [string] : [string] , [string] : signature } [EOL] response = self . client . generic ( [string] , self . organization . webhook_url , content , content_type = [string] , follow = True , ** headers ) [EOL] expected = HTTPStatus . BAD_REQUEST [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f" [string] { actual } [string] { expected } [string] " ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( GithubWebhookEvent . objects . count ( ) == [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] class GithubRepositoryUrlError ( ValueError ) : [EOL] pass [EOL] [EOL] [EOL] class ProjectConfigurationError ( ValueError ) : [EOL] pass [EOL] [EOL] [EOL] class ProjectNotFoundError ( ValueError ) : [EOL] pass [EOL] [EOL] [EOL] class OrganizationKippoTaskStatusError ( ValueError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Generator , Literal , Any , Dict , Optional , List , DefaultDict , KeysView , Union , Tuple [EOL] import kippo [EOL] import django [EOL] import logging [EOL] import models [EOL] import typing [EOL] import datetime [EOL] import accounts [EOL] import ghorgs [EOL] import builtins [EOL] import typing_extensions [EOL] import projects [EOL] import datetime [EOL] import logging [EOL] from collections import defaultdict [EOL] from itertools import islice [EOL] from math import ceil [EOL] from typing import Any , Dict , Generator , List , Optional , Tuple [EOL] [EOL] from accounts . models import Country , KippoOrganization , KippoUser , OrganizationMembership , PublicHoliday [EOL] from django . conf import settings [EOL] from django . utils import timezone [EOL] from ghorgs . wrappers import GithubIssue [EOL] from projects . models import KippoMilestone , KippoProject [EOL] from qlu . core import QluMilestone , QluTask , QluTaskEstimates , QluTaskScheduler [EOL] [EOL] from . charts . functions import prepare_project_schedule_chart_components [EOL] from . exceptions import OrganizationKippoTaskStatusError , ProjectConfigurationError [EOL] from . models import KippoTask , KippoTaskStatus [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] TUESDAY_WEEKDAY = [number] [EOL] WEEKENDS = ( [number] , [number] ) [EOL] DEFAULT_HOURSWORKED_DATERANGE = timezone . timedelta ( days = [number] ) [EOL] DATE_DISPLAY_FORMAT = [string] [EOL] [EOL] [EOL] class GithubIssuePrefixedLabel : [EOL] def __init__ ( self , label , prefix_delim = [string] ) : [EOL] self . label = label [EOL] self . prefix_delim = prefix_delim [EOL] [EOL] [comment] [EOL] label_attributes = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] for attrname in label_attributes : [EOL] attrvalue = getattr ( label , attrname ) [EOL] setattr ( self , attrname , attrvalue ) [EOL] [EOL] @ property def prefix ( self ) : [EOL] return self . name . split ( self . prefix_delim ) [ [number] ] [EOL] [EOL] @ property def value ( self ) : [EOL] return self . name . split ( self . prefix_delim ) [ - [number] ] [EOL] [EOL] [EOL] def get_github_issue_prefixed_labels ( issue , prefix_delim = [string] ) : [EOL] [docstring] [EOL] prefixed_labels = [ ] [EOL] for label in issue . labels : [EOL] prefixed_label = GithubIssuePrefixedLabel ( label , prefix_delim = prefix_delim ) [EOL] prefixed_labels . append ( prefixed_label ) [EOL] return prefixed_labels [EOL] [EOL] [EOL] def build_latest_comment ( issue ) : [EOL] latest_comment = [string] [EOL] if issue . latest_comment_body : [EOL] latest_comment = f"{ issue . latest_comment_created_by } [string] { issue . latest_comment_created_at } [string] " f"{ issue . latest_comment_body }" [EOL] return latest_comment [EOL] [EOL] [EOL] def get_tags_from_prefixedlabels ( prefixed_labels ) : [EOL] tags = [ ] [EOL] for prefixed_label in prefixed_labels : [EOL] [comment] [EOL] tags . append ( { [string] : prefixed_label . prefix , [string] : prefixed_label . value } ) [EOL] return tags [EOL] [EOL] [EOL] def get_github_issue_estimate_label ( issue , prefix = settings . DEFAULT_GITHUB_ISSUE_LABEL_ESTIMATE_PREFIX , day_workhours = settings . DAY_WORKHOURS ) : [EOL] [docstring] [EOL] estimate = None [EOL] valid_label_suffixes = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] for label in issue . labels : [EOL] if label . name . startswith ( prefix ) : [EOL] estimate_str_value = label . name . split ( prefix ) [ - [number] ] [EOL] for suffix in valid_label_suffixes : [EOL] if estimate_str_value . endswith ( suffix ) : [comment] [EOL] estimate_str_value = estimate_str_value . split ( suffix ) [ [number] ] [EOL] [EOL] try : [EOL] candidate_estimate = int ( estimate_str_value ) [EOL] except ValueError : [EOL] logger . error ( f" [string] { estimate_str_value } [string] { label . name }" ) [EOL] [EOL] if candidate_estimate : [EOL] if label . name . endswith ( ( [string] , [string] , [string] ) ) : [EOL] [comment] [EOL] [comment] [EOL] candidate_estimate = int ( ceil ( candidate_estimate / day_workhours ) ) [EOL] [EOL] if estimate and candidate_estimate : [EOL] if candidate_estimate > estimate : [EOL] logger . warning ( f" [string] { issue } [string] { estimate } [string] { candidate_estimate }" ) [EOL] estimate = candidate_estimate [EOL] else : [EOL] estimate = candidate_estimate [EOL] [EOL] return estimate [EOL] [EOL] [EOL] def get_github_issue_category_label ( issue , prefix = settings . DEFAULT_GITHUB_ISSUE_LABEL_CATEGORY_PREFIX ) : [EOL] [docstring] [EOL] category = None [EOL] for label in issue . labels : [EOL] if label . name . startswith ( prefix ) : [EOL] if category : [EOL] raise ValueError ( f" [string] { issue . html_url }" ) [EOL] category = label . name . split ( prefix ) [ - [number] ] . strip ( ) [EOL] return category [EOL] [EOL] [EOL] class ProjectDatesError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class TaskStatusError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def window ( seq , n = [number] ) : [EOL] [docstring] [EOL] it = iter ( seq ) [EOL] result = tuple ( islice ( it , n ) ) [EOL] if len ( result ) == n : [EOL] yield result [EOL] for elem in it : [EOL] result = result [ [number] : ] + ( elem , ) [EOL] yield result [EOL] [EOL] [EOL] def update_kippotaskstatus_hours_worked ( projects , start_date = None , date_delta = DEFAULT_HOURSWORKED_DATERANGE ) : [EOL] [docstring] [EOL] period_start_date = start_date - date_delta [EOL] projects_map = { p . id : p for p in projects } [EOL] [comment] [EOL] statuses = KippoTaskStatus . objects . filter ( task__project__in = projects , effort_date__gte = period_start_date ) . order_by ( [string] , [string] ) [EOL] [EOL] task_taskstatuses = defaultdict ( list ) [EOL] for status in statuses : [EOL] task_taskstatuses [ status . task . id ] . append ( status ) [comment] [EOL] [EOL] updated_statuses = [ ] [EOL] for task_id , task_statuses in task_taskstatuses . items ( ) : [EOL] for earlier_status , later_status in window ( task_statuses , n = [number] ) : [EOL] if earlier_status . estimate_days and later_status . estimate_days : [EOL] if later_status . hours_spent is None : [EOL] [comment] [EOL] change_in_days = earlier_status . estimate_days - later_status . estimate_days [EOL] logger . debug ( f" [string] { change_in_days }" ) [EOL] if change_in_days >= [number] : [comment] [EOL] [comment] [EOL] project = projects_map [ later_status . task . project . id ] [EOL] day_workhours = project . organization . day_workhours [EOL] calculated_work_hours = change_in_days * day_workhours [EOL] later_status . hours_spent = calculated_work_hours [EOL] later_status . save ( ) [EOL] updated_statuses . append ( later_status ) [EOL] logger . info ( f" [string] { later_status . task . title } [string] { later_status . effort_date } [string] " f" [string] { calculated_work_hours }" ) [EOL] else : [EOL] logger . warning ( f" [string] " f"{ earlier_status . estimate_days } [string] { later_status . estimate_days } [string] { change_in_days }" ) [EOL] return updated_statuses [EOL] [EOL] [EOL] def _get_latest_kippotaskstatus_effortdate ( organization ) : [EOL] [docstring] [EOL] logger . debug ( f" [string] { organization }" ) [EOL] try : [EOL] latest_taskstatus_effort_date = KippoTaskStatus . objects . filter ( task__project__organization = organization ) . latest ( [string] ) . effort_date [EOL] except KippoTaskStatus . DoesNotExist as e : [EOL] logger . exception ( e ) [EOL] msg = f" [string] { organization }" [EOL] logger . error ( msg ) [EOL] raise OrganizationKippoTaskStatusError ( msg ) [EOL] return latest_taskstatus_effort_date [EOL] [EOL] [EOL] def get_projects_load ( organization , schedule_start_date = None ) : [EOL] [docstring] [EOL] if not schedule_start_date : [EOL] schedule_start_date = timezone . now ( ) . date ( ) [EOL] elif isinstance ( schedule_start_date , datetime . datetime ) : [EOL] schedule_start_date = schedule_start_date . date ( ) [EOL] [EOL] projects = list ( KippoProject . objects . filter ( organization = organization , start_date__isnull = False , target_date__isnull = False , is_closed = False ) . order_by ( [string] ) ) [EOL] if not projects : [EOL] raise ProjectConfigurationError ( [string] ) [EOL] [EOL] [comment] [EOL] project_active_state_priority = { p . id : { v : k for k , v in p . columnset . get_active_column_names ( with_priority = True ) } for p in projects } [EOL] [EOL] kippo_tasks = { } [EOL] [EOL] [comment] [EOL] latest_taskstatus_effort_date = _get_latest_kippotaskstatus_effortdate ( organization ) [EOL] logger . debug ( f" [string] { organization }" ) [EOL] [EOL] if latest_taskstatus_effort_date < schedule_start_date : [EOL] logger . warning ( f" [string] { latest_taskstatus_effort_date } [string] { schedule_start_date }" ) [EOL] [EOL] [comment] [EOL] qlu_tasks = [ ] [EOL] qlu_milestones = [ ] [EOL] default_minimum = [number] [EOL] default_suggested = [number] [EOL] maximum_multiplier = [number] [EOL] organization_developers = list ( organization . get_github_developer_kippousers ( ) ) [EOL] additional_filters = { [string] : False , [string] : organization_developers } [EOL] for project in projects : [EOL] [comment] [EOL] active_taskstatus , _ = project . get_active_taskstatus ( additional_filters = additional_filters ) [EOL] logger . debug ( f"{ project } [string] { len ( active_taskstatus ) }" ) [EOL] for status in active_taskstatus : [EOL] [comment] [EOL] [comment] [EOL] minimum_estimate = int ( status . minimum_estimate_days ) if status . minimum_estimate_days else default_minimum [EOL] suggested_estimate = int ( status . estimate_days ) if status . estimate_days else default_suggested [EOL] maximum_estimate = status . maximum_estimate_days [EOL] if not maximum_estimate : [EOL] maximum_estimate = int ( round ( suggested_estimate * maximum_multiplier , [number] ) ) [EOL] qestimates = QluTaskEstimates ( minimum_estimate , suggested_estimate , maximum_estimate ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] related_milestone = status . task . milestone [EOL] if related_milestone : [EOL] if not all ( ( related_milestone . start_date , related_milestone . target_date ) ) : [EOL] raise ValueError ( f' [string] { related_milestone . title } [string] ' f" [string] { related_milestone . start_date } [string] { related_milestone . target_date }" ) [EOL] milestone_id = related_milestone . id [EOL] logger . debug ( f" [string] { related_milestone . title } [string] { milestone_id } [string] " f" [string] { related_milestone . start_date } [string] { related_milestone . target_date }" ) [EOL] [EOL] qlu_milestone = QluMilestone ( milestone_id , related_milestone . start_date , related_milestone . target_date ) [EOL] else : [EOL] [comment] [EOL] if not all ( ( project . start_date , project . target_date ) ) : [EOL] raise ValueError ( f' [string] { project . name } [string] ' f" [string] { project . start_date } [string] { project . target_date }" ) [EOL] milestone_id = f" [string] { status . task . project . id }" [comment] [EOL] logger . debug ( f" [string] { project . name } [string] { milestone_id } [string] " f" [string] { project . start_date } [string] { project . target_date }" ) [EOL] [EOL] qlu_milestone = QluMilestone ( milestone_id , status . task . project . start_date , status . task . project . target_date ) [EOL] qlu_milestones . append ( qlu_milestone ) [EOL] [EOL] [comment] [EOL] state_priority_index = project_active_state_priority [ status . task . project . id ] [ status . state ] [EOL] priority_offset = [number] * state_priority_index [EOL] if status . state_priority : [EOL] task_absolute_priority = status . state_priority + priority_offset [comment] [EOL] else : [EOL] task_absolute_priority = len ( active_taskstatus ) + priority_offset [EOL] [EOL] logger . debug ( f" [string] { status . task . id } [string] { status . task . github_issue_html_url }" ) [EOL] kippo_tasks [ status . task . id ] = status . task [EOL] qtask = QluTask ( status . task . id , absolute_priority = task_absolute_priority , estimates = qestimates , assignee = status . task . assignee . github_login , project_id = project . id , milestone_id = milestone_id , ) [EOL] qlu_tasks . append ( qtask ) [EOL] [EOL] project_developer_load = { } [EOL] if not qlu_tasks : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] workdays = { } [EOL] holidays = { } [EOL] for kippo_org_developer in organization_developers : [EOL] organization_membership = OrganizationMembership . objects . get ( user = kippo_org_developer , organization = organization ) [EOL] [EOL] workdays [ kippo_org_developer . github_login ] = organization_membership . get_workday_identifers ( ) [EOL] holidays [ kippo_org_developer . github_login ] = list ( kippo_org_developer . personal_holiday_dates ( ) ) [EOL] holidays [ kippo_org_developer . github_login ] . extend ( list ( kippo_org_developer . public_holiday_dates ( ) ) ) [EOL] [EOL] scheduler = QluTaskScheduler ( milestones = qlu_milestones , holiday_calendar = None , assignee_workdays = workdays , assignee_personal_holidays = holidays , start_date = schedule_start_date , ) [EOL] scheduled_results = scheduler . schedule ( qlu_tasks ) [EOL] assignee_date_keyed_scheduled_projects_ids = defaultdict ( dict ) [EOL] for qlu_task in scheduled_results . tasks ( ) : [EOL] kippo_task_id = qlu_task . id [EOL] kippo_task = kippo_tasks [ kippo_task_id ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] kippo_task . qlu_task = qlu_task [EOL] project_id = kippo_task . project . id [EOL] project_name = kippo_task . project . name [EOL] if project_id not in project_developer_load : [EOL] project_developer_load [ project_id ] = defaultdict ( list ) [EOL] project_developer_load [ project_id ] [ kippo_task . assignee . github_login ] . append ( kippo_task ) [EOL] for task_date in qlu_task . scheduled_dates : [EOL] assignee_date_keyed_scheduled_projects_ids [ kippo_task . assignee . github_login ] [ task_date ] = str ( project_name ) [EOL] return project_developer_load , assignee_date_keyed_scheduled_projects_ids , latest_taskstatus_effort_date [EOL] [EOL] [EOL] def _add_assignee_project_data ( organization , schedule_start_date , assignee_github_login , assignee_tasks , country_holidays , assignee_date_keyed_scheduled_projects_ids , max_days = [number] , ) : [EOL] assignee_data = { [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] assignee_kippouser = KippoUser . objects . get ( github_login = assignee_github_login ) [EOL] organization_membership = assignee_kippouser . get_membership ( organization ) [EOL] logger . info ( f" [string] { organization_membership . committed_weekdays }" ) [EOL] personal_holiday_dates = list ( assignee_kippouser . personal_holiday_dates ( ) ) [EOL] assignee_public_holidays = country_holidays . get ( assignee_kippouser . holiday_country , None ) [EOL] date_keyed_holidays = { } [EOL] if assignee_public_holidays : [EOL] date_keyed_holidays = { h . day : h for h in assignee_public_holidays } [EOL] [EOL] assignee_scheduled_dates = [ ] [EOL] assignee_total_scheduled_days = [number] [EOL] project_populated = False [EOL] project_id = None [EOL] project_name = None [EOL] project_start_date = None [EOL] project_target_date = None [EOL] project_assignee_group = None [EOL] assignee_max_task_date = None [EOL] for task in assignee_tasks : [EOL] latest_kippotaskstatus = task . latest_kippotaskstatus ( ) [EOL] required_calendar_days = task . qlu_task . end_date - task . qlu_task . start_date [EOL] project_id = str ( task . project . id ) [EOL] project_name = task . project . name [EOL] project_start_date = task . project . start_date [EOL] project_target_date = task . project . target_date [EOL] project_assignee_group = ( task . project . name , assignee_kippouser . display_name ) [EOL] if latest_kippotaskstatus and latest_kippotaskstatus . estimate_days : [EOL] assignee_total_scheduled_days += latest_kippotaskstatus . estimate_days [EOL] [EOL] for task_date in task . qlu_task . scheduled_dates : [EOL] if not assignee_max_task_date : [EOL] assignee_max_task_date = task_date [EOL] elif assignee_max_task_date and assignee_max_task_date < task_date : [EOL] assignee_max_task_date = task_date [EOL] logger . debug ( f" [string] { assignee_github_login } [string] { assignee_max_task_date } [string] { project_name } [string] " f" [string] { task . title } [string] { latest_kippotaskstatus . estimate_days } [string] { task . github_issue_html_url }" ) [EOL] assignee_data [ [string] ] . append ( project_id ) [EOL] assignee_data [ [string] ] . append ( project_name ) [EOL] assignee_data [ [string] ] . append ( assignee_github_login ) [EOL] assignee_data [ [string] ] . append ( project_assignee_group ) [EOL] assignee_data [ [string] ] . append ( task_date . strftime ( DATE_DISPLAY_FORMAT ) ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] if task_date . weekday ( ) in WEEKENDS : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( task_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] elif task_date in date_keyed_holidays . keys ( ) : [EOL] holiday_name = date_keyed_holidays [ task_date ] . name [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( holiday_name ) [EOL] assignee_data [ [string] ] . append ( task_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] elif task_date in personal_holiday_dates : [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( task_date ) [EOL] elif task_date . weekday ( ) not in organization_membership . committed_weekdays : [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( task_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] else : [EOL] assignee_data [ [string] ] . append ( task . id ) [EOL] assignee_data [ [string] ] . append ( task . github_issue_html_url ) [EOL] assignee_data [ [string] ] . append ( task . title ) [EOL] assignee_data [ [string] ] . append ( required_calendar_days ) [EOL] assignee_data [ [string] ] . append ( latest_kippotaskstatus . estimate_days ) [EOL] assignee_data [ [string] ] . append ( task_date ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_scheduled_dates . append ( task_date ) [EOL] project_populated = True [EOL] [EOL] [comment] [EOL] current_date = schedule_start_date [EOL] for days in range ( max_days ) : [EOL] current_date += datetime . timedelta ( days = [number] ) [EOL] if current_date not in assignee_scheduled_dates : [EOL] assignee_data [ [string] ] . append ( project_id ) [EOL] assignee_data [ [string] ] . append ( project_name ) [EOL] assignee_data [ [string] ] . append ( assignee_github_login ) [EOL] assignee_data [ [string] ] . append ( project_assignee_group ) [EOL] assignee_data [ [string] ] . append ( current_date . strftime ( DATE_DISPLAY_FORMAT ) ) [EOL] scheduled_project_id = assignee_date_keyed_scheduled_projects_ids [ assignee_github_login ] . get ( current_date , None ) [EOL] if current_date . weekday ( ) in WEEKENDS : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] elif current_date in date_keyed_holidays . keys ( ) : [EOL] [comment] [EOL] holiday_name = date_keyed_holidays [ current_date ] . name [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( holiday_name ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] elif current_date in personal_holiday_dates : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] elif current_date . weekday ( ) not in organization_membership . committed_weekdays : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] elif scheduled_project_id : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( f" [string] { scheduled_project_id }" ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] else : [EOL] [comment] [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( [string] ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( current_date ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] assignee_data [ [string] ] . append ( None ) [EOL] return assignee_data , project_start_date , project_target_date , assignee_total_scheduled_days , assignee_max_task_date , project_populated [EOL] [EOL] [EOL] def prepare_project_engineering_load_plot_data ( organization , assignee_filter = None , schedule_start_date = None ) : [EOL] logger . debug ( f" [string] { organization }" ) [EOL] if not schedule_start_date : [EOL] schedule_start_date = timezone . now ( ) . date ( ) [EOL] logger . info ( f" [string] { schedule_start_date }" ) [EOL] max_days = [number] [EOL] projects_results , assignee_date_keyed_scheduled_projects_ids , latest_effort_date = get_projects_load ( organization , schedule_start_date ) [EOL] if not projects_results : [EOL] raise ValueError ( [string] ) [EOL] [EOL] country_holidays = defaultdict ( list ) [EOL] for public_holiday in PublicHoliday . objects . filter ( day__gte = schedule_start_date ) : [EOL] country_holidays [ public_holiday . country ] . append ( public_holiday ) [EOL] [EOL] project_data = [ ] [EOL] [comment] [EOL] for project_id in projects_results : [EOL] data = { [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , } [EOL] project_assignee_data = defaultdict ( dict ) [EOL] project_populated = False [EOL] project_start_date = None [EOL] project_target_date = None [EOL] project_estimate_date = None [EOL] for assignee , assignee_tasks in projects_results [ project_id ] . items ( ) : [EOL] if assignee_filter and assignee not in assignee_filter : [EOL] logger . debug ( f" [string] { assignee_filter } [string] { assignee }" ) [EOL] continue [EOL] assignee_data , project_start_date , project_target_date , assignee_total_days , assignee_max_task_date , populated = _add_assignee_project_data ( organization , schedule_start_date , assignee , assignee_tasks , country_holidays , assignee_date_keyed_scheduled_projects_ids , max_days = max_days , ) [EOL] if populated : [EOL] project_populated = True [EOL] if not project_estimate_date : [EOL] project_estimate_date = assignee_max_task_date [EOL] elif project_estimate_date and project_estimate_date < assignee_max_task_date : [EOL] project_estimate_date = assignee_max_task_date [EOL] [EOL] for category , values in assignee_data . items ( ) : [EOL] data [ category ] . extend ( values ) [EOL] project_assignee_data [ assignee ] [ [string] ] = assignee_total_days [EOL] project_assignee_data [ assignee ] [ [string] ] = assignee_max_task_date [EOL] [EOL] if project_populated : [comment] [EOL] project_data . append ( ( project_id , project_start_date , project_target_date , project_estimate_date , data , project_assignee_data ) ) [EOL] else : [EOL] logger . warning ( f" [string] { project_id } [string] { assignee_filter }" ) [EOL] [EOL] [comment] [EOL] project_milestones = defaultdict ( list ) [EOL] project_ids = projects_results . keys ( ) [EOL] for milestone in KippoMilestone . objects . filter ( project__id__in = project_ids ) . order_by ( [string] ) : [EOL] milestone_info = { [string] : str ( milestone . project . id ) , [string] : milestone . start_date , [string] : milestone . target_date , [string] : milestone . title , [string] : milestone . description , } [EOL] project_milestones [ milestone . project . id ] . append ( milestone_info ) [EOL] [EOL] logger . debug ( f" [string] { len ( project_data ) }" ) [EOL] logger . debug ( f" [string] { project_milestones }" ) [EOL] [EOL] script , div = prepare_project_schedule_chart_components ( project_data , schedule_start_date , project_milestones , display_days = max_days ) [EOL] return ( script , div ) , latest_effort_date [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.object$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $typing.Any$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , views . view_inprogress_task_status , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Type , Tuple , Any [EOL] import kippo [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import urllib [EOL] import logging [EOL] import urllib . parse [EOL] from typing import Optional [EOL] [EOL] from common . models import UserCreatedBaseModel [EOL] from django . contrib . postgres . fields import JSONField [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class KippoTask ( UserCreatedBaseModel ) : [EOL] title = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] category = models . CharField ( max_length = [number] ) [EOL] is_closed = models . BooleanField ( default = False ) [EOL] project = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] milestone = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , related_name = [string] ) [EOL] assignee = models . ForeignKey ( [string] , on_delete = models . SET_NULL , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] depends_on = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True ) [EOL] github_issue_api_url = models . URLField ( null = True , blank = True ) [EOL] github_issue_html_url = models . URLField ( null = True , blank = True ) [EOL] project_card_id = models . PositiveIntegerField ( null = True , blank = True , editable = False , help_text = _ ( [string] ) ) [EOL] description = models . TextField ( null = True , blank = True ) [EOL] [EOL] @ property def github_repository_html_url ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] github_respository_html_url , * _ = self . github_issue_html_url . rsplit ( [string] , [number] ) [EOL] return github_respository_html_url [EOL] [EOL] def latest_kippotaskstatus ( self ) : [EOL] status = None [EOL] try : [EOL] status = KippoTaskStatus . objects . filter ( task = self ) . latest ( ) [EOL] except KippoTaskStatus . DoesNotExist : [EOL] pass [EOL] return status [EOL] [EOL] def effort_days_remaining ( self ) : [EOL] latest_task_status = KippoTaskStatus . objects . filter ( task = self ) . latest ( ) [EOL] return latest_task_status . estimate_days [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] from accounts . models import get_climanager_user [EOL] from octocat . models import GithubRepository [EOL] [EOL] if self . is_closed and not self . closed_datetime : [EOL] self . closed_datetime = timezone . now ( ) [EOL] [EOL] [comment] [EOL] if self . github_issue_html_url : [EOL] [comment] [EOL] [comment] [EOL] parsed_url = urllib . parse . urlparse ( self . github_issue_html_url ) [EOL] repo_name_index = [number] [EOL] repository_name = parsed_url . path . split ( [string] ) [ repo_name_index ] [EOL] repository_api_url = f" [string] { self . project . organization . github_organization_name } [string] { repository_name }" [EOL] repository_html_url = f" [string] { self . project . organization . github_organization_name } [string] { repository_name }" [EOL] try : [EOL] [comment] [EOL] existing_repository = GithubRepository . objects . get ( name = repository_name , api_url__startswith = repository_api_url , html_url__startswith = repository_html_url ) [EOL] logger . debug ( f" [string] { existing_repository . name }" ) [EOL] except GithubRepository . DoesNotExist : [EOL] logger . info ( f" [string] { repository_name } [string] " ) [EOL] climanager_user = get_climanager_user ( ) [EOL] new_repository = GithubRepository ( organization = self . project . organization , name = repository_name , api_url = repository_api_url , html_url = repository_html_url , label_set = self . project . organization . default_labelset , created_by = climanager_user , updated_by = climanager_user , ) [EOL] new_repository . save ( ) [EOL] logger . info ( f" [string] { repository_name } [string] " ) [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . project } [string] { self . title } [string] " [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] get_latest_by = [string] [EOL] [EOL] [EOL] class KippoTaskStatus ( UserCreatedBaseModel ) : [EOL] task = models . ForeignKey ( KippoTask , on_delete = models . CASCADE ) [EOL] state = models . CharField ( max_length = [number] , db_index = True , null = True , help_text = _ ( [string] ) ) [EOL] state_priority = models . PositiveSmallIntegerField ( null = True , blank = True , default = [number] , help_text = _ ( [string] ) ) [EOL] effort_date = models . DateField ( default = timezone . now , db_index = True , help_text = _ ( [string] ) ) [EOL] hours_spent = models . FloatField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] minimum_estimate_days = models . FloatField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] estimate_days = models . FloatField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] maximum_estimate_days = models . FloatField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] tags = JSONField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] comment = models . TextField ( null = True , blank = True ) [EOL] [EOL] def display_name ( self ) : [EOL] return str ( self ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . task . title } [string] { self . effort_date } [string] " [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] get_latest_by = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TasksConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Counter , List , Any , Dict [EOL] import kippo [EOL] import logging [EOL] import models [EOL] import typing [EOL] import builtins [EOL] import collections [EOL] import logging [EOL] from collections import Counter [EOL] [EOL] from django . conf import settings [EOL] from django . contrib import messages [EOL] from django . contrib . admin . views . decorators import staff_member_required [EOL] from django . db . models import Count [EOL] from django . http import HttpResponseBadRequest [EOL] from django . shortcuts import render [EOL] from django . utils import timezone [EOL] from projects . functions import get_user_session_organization [EOL] from projects . models import KippoProject [EOL] [EOL] from . exceptions import ProjectConfigurationError [EOL] from . functions import prepare_project_engineering_load_plot_data [EOL] from . models import KippoTask , KippoTaskStatus [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] EXCLUDE_TASK_CATEGORIES = [ ] [EOL] DEFAULT_TASK_DISPLAY_STATE = settings . DEFAULT_TASK_DISPLAY_STATE [EOL] [EOL] [EOL] def assignee_project_keyfunc ( task_object ) : [EOL] [docstring] [EOL] username = [string] [EOL] if task_object . assignee : [EOL] username = task_object . assignee . username [EOL] [EOL] project = [string] [EOL] if task_object . project : [EOL] project = task_object . project . name [EOL] [EOL] return username , project [EOL] [EOL] [EOL] @ staff_member_required def view_inprogress_task_status ( request ) : [EOL] github_login = request . GET . get ( [string] , None ) [EOL] [EOL] [comment] [EOL] two_weeks_ago = timezone . timedelta ( days = [number] ) [EOL] active_taskstatus_startdate = ( timezone . now ( ) - two_weeks_ago ) . date ( ) [EOL] [EOL] try : [EOL] selected_organization , user_organizations = get_user_session_organization ( request ) [EOL] except ValueError as e : [EOL] return HttpResponseBadRequest ( str ( e . args ) ) [EOL] active_projects = KippoProject . objects . filter ( is_closed = False , organization = selected_organization ) . order_by ( [string] ) [EOL] [EOL] additional_filters = { } [EOL] if github_login : [EOL] additional_filters [ [string] ] = github_login [EOL] [EOL] active_taskstatus = [ ] [EOL] for project in active_projects : [EOL] project_active_taskstatuses , _ = project . get_active_taskstatus ( additional_filters = additional_filters ) [EOL] active_taskstatus . extend ( project_active_taskstatuses ) [EOL] [EOL] task_state_counts = { r [ [string] ] : r [ [string] ] for r in KippoTaskStatus . objects . filter ( effort_date__gte = active_taskstatus_startdate ) . values ( [string] ) . order_by ( [string] ) . annotate ( Count ( [string] ) ) } [EOL] total_state_count = sum ( task_state_counts . values ( ) ) [EOL] task_state_counts [ [string] ] = total_state_count [EOL] [EOL] [comment] [EOL] script = None [EOL] div = None [EOL] latest_effort_date = None [EOL] if github_login : [EOL] try : [EOL] ( script , div ) , latest_effort_date = prepare_project_engineering_load_plot_data ( selected_organization , assignee_filter = github_login ) [EOL] except ProjectConfigurationError as e : [EOL] logger . error ( f" [string] { e . args } [string] { request . build_absolute_uri ( ) }" ) [EOL] msg = f" [string] { e . args }" [EOL] messages . add_message ( request , messages . ERROR , msg ) [EOL] [EOL] [comment] [EOL] collected_task_ids = [ ] [EOL] unique_tasks = [ ] [EOL] for taskstatus in active_taskstatus : [EOL] if taskstatus . task . id not in collected_task_ids : [EOL] unique_tasks . append ( taskstatus . task ) [EOL] collected_task_ids . append ( taskstatus . task . id ) [EOL] [EOL] [comment] [EOL] user_effort_totals = Counter ( ) [EOL] for task in unique_tasks : [EOL] if task . assignee : [EOL] days_remaining = task . effort_days_remaining ( ) if task . effort_days_remaining ( ) else [number] [EOL] user_effort_totals [ task . assignee . username ] += days_remaining [EOL] [EOL] [comment] [EOL] sorted_tasks = sorted ( unique_tasks , key = assignee_project_keyfunc ) [EOL] context = { [string] : selected_organization , [string] : user_organizations , [string] : sorted_tasks , [string] : active_projects , [string] : dict ( user_effort_totals ) , [string] : task_state_counts , [string] : script , [string] : div , [string] : latest_effort_date , [string] : messages . get_messages ( request ) , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.tuple$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Literal , Tuple , Any [EOL] import kippo [EOL] import typing [EOL] import builtins [EOL] import typing_extensions [EOL] from accounts . models import EmailDomain , KippoOrganization , KippoUser , OrganizationMembership [EOL] from common . tests import DEFAULT_COLUMNSET_PK [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] from projects . models import KippoProject , ProjectColumnSet [EOL] [EOL] from . . functions import ( get_github_issue_category_label , get_github_issue_estimate_label , get_github_issue_prefixed_labels , get_projects_load , prepare_project_engineering_load_plot_data , ) [EOL] from . . models import KippoTask , KippoTaskStatus [EOL] [EOL] [EOL] class LabelMock : [EOL] def __init__ ( self , name , ** kwargs ) : [EOL] self . name = name [EOL] [EOL] [comment] [EOL] self . id = kwargs . get ( [string] , [number] ) [EOL] self . node_id = kwargs . get ( [string] , [string] ) [EOL] self . url = kwargs . get ( [string] , [string] ) [EOL] self . description = kwargs . get ( [string] , [string] ) [EOL] self . color = kwargs . get ( [string] , [string] ) [EOL] self . default = kwargs . get ( [string] , True ) [EOL] [EOL] [EOL] class IssueMock : [EOL] def __init__ ( self , label_names = None ) : [EOL] self . labels = [ ] [EOL] for label_name in label_names : [EOL] label = LabelMock ( name = label_name ) [EOL] self . labels . append ( label ) [EOL] [EOL] [EOL] class TaskGithubLabelFunctionsTestCase ( TestCase ) : [EOL] def test_get_github_issue_prefixed_labels ( self ) : [EOL] category_name = [string] [EOL] category_value = [string] [EOL] [EOL] req_name = [string] [EOL] req_value = [string] [EOL] [EOL] issue = IssueMock ( label_names = [ category_name , req_name ] ) [EOL] prefixed_labels = get_github_issue_prefixed_labels ( issue ) [EOL] expected_values = ( category_value , req_value ) [EOL] for prefixed_label in prefixed_labels : [EOL] assert prefixed_label . value in expected_values [EOL] [EOL] def test_get_github_issue_estimate_label_hours ( self ) : [EOL] prefix = [string] [EOL] for suffix in ( [string] , [string] , [string] ) : [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] def test_get_github_issue_estimate_label_days ( self ) : [EOL] prefix = [string] [EOL] for suffix in ( [string] , [string] , [string] ) : [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] def test_get_github_issue_estimate_label_nosuffix ( self ) : [EOL] [docstring] [EOL] prefix = [string] [EOL] suffix = [string] [EOL] label_name = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name }" ) [EOL] [EOL] def test_get_github_issue_estimate_label_multiestimatelabels ( self ) : [EOL] prefix = [string] [EOL] suffix = [string] [EOL] label_name1 = f"{ prefix } [string] { suffix }" [EOL] label_name2 = f"{ prefix } [string] { suffix }" [EOL] issue = IssueMock ( label_names = [ label_name1 , label_name2 ] ) [EOL] expected_estimate = [number] [comment] [EOL] actual_estimate = get_github_issue_estimate_label ( issue , prefix , day_workhours = [number] ) [EOL] self . assertTrue ( actual_estimate == expected_estimate , f" [string] { actual_estimate } [string] { expected_estimate } [string] { label_name1 } [string] { label_name2 }" ) [EOL] [EOL] def test_get_github_issue_category_label_singlelabel ( self ) : [EOL] prefix = [string] [EOL] [EOL] label_name = f"{ prefix } [string] " [EOL] issue = IssueMock ( label_names = [ label_name ] ) [EOL] expected_category = [string] [EOL] actual_category = get_github_issue_category_label ( issue , prefix ) [EOL] self . assertTrue ( actual_category == expected_category ) [EOL] [EOL] def test_get_github_issue_category_label_multiplelabels ( self ) : [EOL] prefix = [string] [EOL] [EOL] label1_name = f"{ prefix } [string] " [EOL] label2_name = f"{ prefix } [string] " [EOL] issue = IssueMock ( label_names = [ label1_name , label2_name ] ) [EOL] issue . html_url = [string] [EOL] with self . assertRaises ( ValueError ) : [EOL] actual_category = get_github_issue_category_label ( issue , prefix ) [EOL] [EOL] [EOL] class GetKippoProjectLoadTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , [string] ] [EOL] [EOL] def setUp ( self ) : [EOL] self . cli_manager = KippoUser . objects . get ( username = [string] ) [EOL] [EOL] self . organization = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . organization . save ( ) [EOL] self . domain = [string] [EOL] self . emaildomain = EmailDomain ( organization = self . organization , domain = self . domain , is_staff_domain = True , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . emaildomain . save ( ) [EOL] [EOL] self . user1 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . user1 . save ( ) [EOL] self . user1_membership = OrganizationMembership ( user = self . user1 , organization = self . organization , is_developer = True , email = f" [string] { self . domain }" , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . user1_membership . save ( ) [EOL] [EOL] self . user2 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . user2 . save ( ) [EOL] self . user2_membership = OrganizationMembership ( user = self . user2 , organization = self . organization , is_developer = True , wednesday = False , email = f" [string] { self . domain }" , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . user2_membership . save ( ) [EOL] [EOL] columnset = ProjectColumnSet . objects . get ( pk = DEFAULT_COLUMNSET_PK ) [EOL] self . kippoproject = KippoProject ( name = [string] , organization = self . organization , start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , columnset = columnset , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . kippoproject . save ( ) [EOL] active_states = self . kippoproject . columnset . get_active_column_names ( ) [EOL] active_state = active_states [ [number] ] [EOL] [EOL] repo_name = [string] [EOL] task1 = KippoTask ( title = [string] , category = [string] , project = self . kippoproject , assignee = self . user1 , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task1 . save ( ) [EOL] task1status = KippoTaskStatus ( task = task1 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task1status . save ( ) [EOL] [EOL] task2 = KippoTask ( title = [string] , category = [string] , project = self . kippoproject , assignee = self . user1 , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task2 . save ( ) [EOL] task2status = KippoTaskStatus ( task = task2 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task2status . save ( ) [EOL] self . user1effort_total = task1status . estimate_days + task2status . estimate_days [EOL] [EOL] task3 = KippoTask ( title = [string] , category = [string] , project = self . kippoproject , assignee = self . user2 , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task3 . save ( ) [EOL] task3status = KippoTaskStatus ( task = task3 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task3status . save ( ) [EOL] [EOL] task4 = KippoTask ( title = [string] , category = [string] , project = self . kippoproject , assignee = self . user2 , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { repo_name } [string] " , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task4 . save ( ) [EOL] task4status = KippoTaskStatus ( task = task4 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task4status . save ( ) [EOL] self . user2effort_total = task3status . estimate_days + task4status . estimate_days [EOL] [EOL] def test_get_projects_load ( self ) : [EOL] project_developer_load , _ , latest_taskstatus_effort_date = get_projects_load ( organization = self . organization , schedule_start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) ) [EOL] self . assertTrue ( project_developer_load ) [EOL] self . assertTrue ( latest_taskstatus_effort_date ) [EOL] [EOL] expected_tasktitles = ( [string] , [string] ) [EOL] user1tasks = project_developer_load [ self . kippoproject . id ] [ [string] ] [EOL] self . assertTrue ( any ( t . title in expected_tasktitles for t in user1tasks ) ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( all ( hasattr ( t , [string] ) for t in user1tasks ) ) [EOL] self . assertTrue ( all ( t . qlu_task . is_scheduled for t in user1tasks ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] expected_effort_start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] actual_effort_start_date = min ( t . qlu_task . start_date for t in user1tasks ) [EOL] self . assertEqual ( actual_effort_start_date , expected_effort_start_date , f" [string] { actual_effort_start_date } [string] { expected_effort_start_date } [string] " ) [EOL] [EOL] [comment] [EOL] expected_effort_end_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] actual_effort_end_date = max ( t . qlu_task . end_date for t in user1tasks ) [EOL] self . assertEqual ( actual_effort_end_date , expected_effort_end_date , f" [string] { actual_effort_end_date } [string] { expected_effort_end_date } [string] " ) [EOL] [EOL] expected_tasktitles = ( [string] , [string] ) [EOL] user2tasks = project_developer_load [ self . kippoproject . id ] [ [string] ] [EOL] self . assertTrue ( any ( t . title in expected_tasktitles for t in user2tasks ) ) [EOL] [comment] [EOL] self . assertTrue ( all ( hasattr ( t , [string] ) for t in user2tasks ) ) [EOL] self . assertTrue ( all ( t . qlu_task . is_scheduled for t in user2tasks ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] expected_effort_start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] actual_effort_start_date = min ( t . qlu_task . start_date for t in user2tasks ) [EOL] self . assertEqual ( actual_effort_start_date , expected_effort_start_date , f" [string] { actual_effort_start_date } [string] { expected_effort_start_date } [string] " ) [EOL] [EOL] [comment] [EOL] expected_effort_end_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] actual_effort_end_date = max ( t . qlu_task . end_date for t in user2tasks ) [EOL] self . assertEqual ( actual_effort_end_date , expected_effort_end_date , f" [string] { actual_effort_end_date } [string] { expected_effort_end_date } [string] " ) [EOL] [EOL] expected_last_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . assertEqual ( latest_taskstatus_effort_date , expected_last_effort_date , f" [string] { latest_taskstatus_effort_date } [string] { expected_last_effort_date } [string] " , ) [EOL] [EOL] def test_prepare_project_engineering_load_plot_data ( self ) : [EOL] ( script , div ) , lastest_effort_date = prepare_project_engineering_load_plot_data ( organization = self . organization , schedule_start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) ) [EOL] self . assertTrue ( script ) [EOL] self . assertTrue ( div ) [EOL] [EOL] expected_last_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . assertEqual ( lastest_effort_date , expected_last_effort_date ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.LabelMock$ 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.LabelMock$ 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.LabelMock$ 0 0 0 $kippo.tasks.tests.test_task_functions.LabelMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[kippo.tasks.functions.GithubIssuePrefixedLabel]$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[kippo.tasks.functions.GithubIssuePrefixedLabel]$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.tasks.tests.test_task_functions.IssueMock$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 $kippo.tasks.models.KippoTask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTask]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
import builtins [EOL] from typing import List , Type , Any [EOL] import kippo [EOL] import typing [EOL] import datetime [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] [EOL] from common . tests import setup_basic_project , DEFAULT_FIXTURES [EOL] from . . models import KippoTaskStatus [EOL] from . . functions import update_kippotaskstatus_hours_worked [EOL] [EOL] [EOL] class CalculateKippoTaskStatusHoursWorkedTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] created_objects = setup_basic_project ( ) [EOL] user = created_objects [ [string] ] [EOL] [EOL] [comment] [EOL] self . project = created_objects [ [string] ] [EOL] active_state_names = self . project . get_active_column_names ( ) [EOL] [EOL] [comment] [EOL] kippo_task = created_objects [ [string] ] [EOL] [EOL] tz = timezone . get_current_timezone ( ) [EOL] first_effort_date = timezone . make_aware ( datetime . datetime ( [number] , [number] , [number] ) , tz ) . date ( ) [comment] [EOL] self . kippotaskstatus_first = KippoTaskStatus ( task = kippo_task , state = active_state_names [ [number] ] , effort_date = first_effort_date . strftime ( [string] ) , estimate_days = [number] , created_by = user , updated_by = user ) [EOL] self . kippotaskstatus_first . save ( ) [EOL] [EOL] self . second_effort_date = first_effort_date + datetime . timedelta ( days = [number] ) [comment] [EOL] self . kippotaskstatus_second = KippoTaskStatus ( task = kippo_task , state = active_state_names [ [number] ] , effort_date = self . second_effort_date . strftime ( [string] ) , estimate_days = [number] , created_by = user , updated_by = user ) [EOL] self . kippotaskstatus_second . save ( ) [EOL] [EOL] def test_estimate_decrease ( self ) : [EOL] projects = [ self . project ] [EOL] self . kippotaskstatus_first . estimate_days = [number] [EOL] self . kippotaskstatus_first . save ( ) [EOL] self . kippotaskstatus_second . estimate_days = [number] [EOL] self . kippotaskstatus_second . hours_spent = None [EOL] self . kippotaskstatus_second . save ( ) [EOL] [EOL] assert self . kippotaskstatus_first . hours_spent is None [EOL] assert self . kippotaskstatus_second . hours_spent is None [EOL] target_taskstatus_id = self . kippotaskstatus_second . id [EOL] results = update_kippotaskstatus_hours_worked ( projects , self . second_effort_date ) [EOL] self . assertTrue ( len ( results ) == [number] , results ) [EOL] updated_status = results [ [number] ] [EOL] [EOL] self . assertTrue ( target_taskstatus_id == updated_status . id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] expected_hours_spent = [number] [EOL] self . assertTrue ( updated_status . hours_spent == expected_hours_spent ) [EOL] [EOL] [comment] [EOL] self . kippotaskstatus_first . refresh_from_db ( ) [EOL] self . assertTrue ( self . kippotaskstatus_first . hours_spent is None ) [EOL] [EOL] def test_estimate_increase ( self ) : [EOL] projects = [ self . project ] [EOL] self . kippotaskstatus_first . estimate_days = [number] [EOL] self . kippotaskstatus_first . save ( ) [EOL] self . kippotaskstatus_second . estimate_days = [number] [EOL] self . kippotaskstatus_second . save ( ) [EOL] [EOL] assert self . kippotaskstatus_first . hours_spent is None [EOL] assert self . kippotaskstatus_second . hours_spent is None [EOL] results = update_kippotaskstatus_hours_worked ( projects , self . second_effort_date ) [EOL] self . assertTrue ( len ( results ) == [number] , results ) [EOL] [EOL] self . kippotaskstatus_first . refresh_from_db ( ) [EOL] self . kippotaskstatus_second . refresh_from_db ( ) [EOL] self . assertTrue ( self . kippotaskstatus_first . hours_spent is None ) [EOL] self . assertTrue ( self . kippotaskstatus_second . hours_spent is None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $kippo.tasks.models.KippoTaskStatus$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 0 $typing.List[kippo.tasks.models.KippoTaskStatus]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import pathlib [EOL] import kippo [EOL] import typing [EOL] import json [EOL] from pathlib import Path [EOL] [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] [EOL] from ghorgs . wrappers import GithubIssue [EOL] [EOL] from projects . models import KippoProject , ActiveKippoProject , ProjectColumnSet [EOL] from accounts . models import KippoUser , KippoOrganization , OrganizationMembership [EOL] from octocat . models import GithubAccessToken , GithubRepository , GithubRepositoryLabelSet [EOL] from common . tests import DEFAULT_COLUMNSET_PK [EOL] [EOL] from . . periodic . tasks import OrganizationIssueProcessor , get_existing_kippo_project [EOL] from . . models import KippoTask , KippoTaskStatus [EOL] [EOL] [EOL] DEFAULT_GITHUB_PROJECT_URL = [string] [EOL] TESTDATA_DIRECTORY = Path ( __file__ ) . parent / [string] [EOL] [EOL] [EOL] class GithubOrganizationProjectMock : [EOL] def __init__ ( self , html_url = DEFAULT_GITHUB_PROJECT_URL ) : [EOL] self . html_url = html_url [EOL] [EOL] [EOL] def load_json_to_githubissue ( json_filepath ) : [EOL] [docstring] [EOL] with json_filepath . open ( [string] , encoding = [string] ) as json_in : [EOL] issue_json = json_in . read ( ) [EOL] [comment] [EOL] issue = json . loads ( issue_json , object_hook = GithubIssue . from_dict ) [EOL] return issue [EOL] [EOL] [EOL] class PeriodicTaskFunctionsTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , ] [EOL] [EOL] def setUp ( self ) : [EOL] self . target_github_project_html_url = DEFAULT_GITHUB_PROJECT_URL [EOL] self . other_github_project_html_url = [string] [EOL] now = timezone . now ( ) [EOL] start_date = ( now - timezone . timedelta ( days = [number] ) ) . date ( ) [EOL] end_date = ( now + timezone . timedelta ( days = [number] ) ) . date ( ) [EOL] [EOL] github_manager_user = KippoUser . objects . get ( username = [string] ) [EOL] dummy_organization = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = github_manager_user , updated_by = github_manager_user , ) [EOL] dummy_organization . save ( ) [EOL] [EOL] default_columnset = ProjectColumnSet . objects . get ( id = DEFAULT_COLUMNSET_PK ) [EOL] [EOL] [comment] [EOL] self . closed_project = KippoProject ( organization = dummy_organization , name = [string] , created_by = github_manager_user , updated_by = github_manager_user , is_closed = True , github_project_html_url = self . target_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] self . closed_project . save ( ) [EOL] [EOL] [comment] [EOL] self . opened_project = KippoProject ( organization = dummy_organization , name = [string] , created_by = github_manager_user , updated_by = github_manager_user , is_closed = False , github_project_html_url = self . target_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] self . opened_project . save ( ) [EOL] [EOL] [comment] [EOL] self . other_opened_project = KippoProject ( organization = dummy_organization , name = [string] , created_by = github_manager_user , updated_by = github_manager_user , is_closed = False , github_project_html_url = self . other_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] [EOL] def test_get_existing_kippo_project ( self ) : [EOL] github_project = GithubOrganizationProjectMock ( html_url = DEFAULT_GITHUB_PROJECT_URL ) [EOL] [EOL] existing_open_projects = list ( ActiveKippoProject . objects . all ( ) ) [EOL] related_kippo_project = get_existing_kippo_project ( github_project , existing_open_projects ) [EOL] self . assertTrue ( related_kippo_project . pk == self . opened_project . pk ) [EOL] [EOL] [EOL] class OrganizationIssueProcessorTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , [string] , ] [EOL] [EOL] def setUp ( self ) : [EOL] self . target_github_project_html_url = DEFAULT_GITHUB_PROJECT_URL [EOL] self . other_github_project_html_url = [string] [EOL] now = timezone . now ( ) [EOL] start_date = ( now - timezone . timedelta ( days = [number] ) ) . date ( ) [EOL] end_date = ( now + timezone . timedelta ( days = [number] ) ) . date ( ) [EOL] [EOL] self . github_manager_user = KippoUser . objects . get ( username = [string] ) [EOL] self . organization = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] self . organization . save ( ) [EOL] [EOL] self . user1 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True , ) [EOL] self . user1 . save ( ) [EOL] [EOL] orgmembership = OrganizationMembership ( user = self . user1 , organization = self . organization , is_developer = True , created_by = self . user1 , updated_by = self . user1 , ) [EOL] orgmembership . save ( ) [EOL] [EOL] token = GithubAccessToken ( organization = self . organization , token = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] token . save ( ) [EOL] [EOL] default_columnset = ProjectColumnSet . objects . get ( id = DEFAULT_COLUMNSET_PK ) [EOL] [EOL] [comment] [EOL] self . closed_project = KippoProject ( organization = self . organization , name = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , is_closed = True , github_project_html_url = self . target_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] self . closed_project . save ( ) [EOL] [EOL] [comment] [EOL] self . opened_project = KippoProject ( organization = self . organization , name = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , is_closed = False , github_project_html_url = self . target_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] self . opened_project . save ( ) [EOL] [EOL] [comment] [EOL] self . other_opened_project = KippoProject ( organization = self . organization , name = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , is_closed = False , github_project_html_url = self . other_github_project_html_url , start_date = start_date , target_date = end_date , actual_date = end_date , columnset = default_columnset ) [EOL] self . other_opened_project . save ( ) [EOL] [EOL] default_labelset = GithubRepositoryLabelSet . objects . all ( ) [ [number] ] [EOL] GithubRepository . objects . create ( organization = self . organization , name = [string] , label_set = default_labelset , api_url = [string] , html_url = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] KippoTaskStatus . objects . all ( ) . delete ( ) [EOL] KippoTask . objects . all ( ) . delete ( ) [EOL] [EOL] def test_organizationissueprocessor___init__ ( self ) : [EOL] issue_processor = OrganizationIssueProcessor ( organization = self . organization , status_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , github_project_html_urls = [ self . target_github_project_html_url ] ) [EOL] self . assertTrue ( issue_processor ) [EOL] [EOL] def test_process_new_task ( self ) : [EOL] issue_processor = OrganizationIssueProcessor ( organization = self . organization , status_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , github_project_html_urls = [ self . target_github_project_html_url ] ) [EOL] json_filepath = TESTDATA_DIRECTORY / [string] [EOL] github_issue = load_json_to_githubissue ( json_filepath ) [EOL] is_new_task , new_taskstatus_objects , updated_taskstatus_objects = issue_processor . process ( self . opened_project , github_issue ) [EOL] self . assertTrue ( is_new_task ) [EOL] [EOL] taskstatus = KippoTaskStatus . objects . all ( ) [ [number] ] [EOL] expected = [string] [EOL] actual = taskstatus . state [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] [EOL] [comment] [EOL] task = KippoTask . objects . all ( ) [ [number] ] [EOL] expected = [string] [EOL] actual = task . title [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] [EOL] expected = [string] [EOL] actual = task . description [EOL] self . assertTrue ( actual == expected ) [EOL] [EOL] def test_process_existing_task ( self ) : [EOL] [comment] [EOL] task = KippoTask . objects . create ( title = [string] , category = [string] , project = self . opened_project , assignee = self . user1 , github_issue_api_url = [string] , github_issue_html_url = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] taskstatus = KippoTaskStatus . objects . create ( task = task , state = [string] , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] [EOL] issue_processor = OrganizationIssueProcessor ( organization = self . organization , status_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , github_project_html_urls = [ self . target_github_project_html_url ] ) [EOL] json_filepath = TESTDATA_DIRECTORY / [string] [EOL] github_issue = load_json_to_githubissue ( json_filepath ) [EOL] [comment] [EOL] expected = [string] [EOL] github_issue . project_column = expected [EOL] is_new_task , new_taskstatus_objects , updated_taskstatus_objects = issue_processor . process ( self . opened_project , github_issue ) [EOL] self . assertFalse ( is_new_task ) [EOL] [EOL] taskstatus . refresh_from_db ( ) [EOL] actual = taskstatus . state [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] [EOL] [comment] [EOL] task . refresh_from_db ( ) [EOL] expected = [string] [EOL] actual = task . title [EOL] self . assertTrue ( actual == expected ) [EOL] [EOL] expected = [string] [EOL] actual = task . description [EOL] self . assertTrue ( actual == expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.tests.test_periodic_tasks.GithubOrganizationProjectMock$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.tests.test_periodic_tasks.GithubOrganizationProjectMock$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $kippo.tasks.periodic.tasks.OrganizationIssueProcessor$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0
	0
from typing import Type , Any [EOL] import kippo [EOL] import typing [EOL] [docstring] [EOL] from django . utils import timezone [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from accounts . models import KippoOrganization , KippoUser [EOL] from projects . models import CollectIssuesAction [EOL] from . . . periodic . tasks import collect_github_project_issues [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , required = True , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , help = _ ( [string] ) ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [EOL] github_organization_name = options [ [string] ] [EOL] try : [EOL] organization = KippoOrganization . objects . get ( github_organization_name = github_organization_name ) [EOL] except KippoOrganization . DoesNotExist : [EOL] raise CommandError ( f' [string] { github_organization_name }' ) [EOL] [EOL] status_effort_date = timezone . now ( ) . isoformat ( ) [EOL] if options [ [string] ] : [EOL] try : [EOL] status_effort_date = timezone . datetime . strptime ( options [ [string] ] , [string] ) . date ( ) [EOL] except ValueError : [EOL] raise CommandError ( [string] . format ( options [ [string] ] ) ) [EOL] [EOL] self . stdout . write ( f' [string] { options [ [string] ] } [string] { status_effort_date } [string] ' ) [EOL] github_manager = KippoUser . objects . get ( username = settings . GITHUB_MANAGER_USERNAME ) [EOL] action_tracker = CollectIssuesAction ( organization = organization , created_by = github_manager , updated_by = github_manager , ) [EOL] action_tracker . save ( ) [EOL] collect_github_project_issues ( action_tracker_id = action_tracker . id , kippo_organization_id = str ( organization . id ) , status_effort_date_iso8601 = status_effort_date ) [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import DefaultDict , Counter , Type , Any [EOL] import kippo [EOL] import collections [EOL] import typing [EOL] [docstring] [EOL] from collections import defaultdict , Counter [EOL] from django . utils import timezone [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from . . . models import KippoTaskStatus [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , required = True , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , type = str , required = True , help = _ ( [string] ) ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [EOL] github_organization_name = options [ [string] ] [EOL] [EOL] status_effort_date = timezone . now ( ) . date ( ) [EOL] if options [ [string] ] : [EOL] try : [EOL] status_effort_date = timezone . datetime . strptime ( options [ [string] ] , [string] ) . date ( ) [EOL] except ValueError : [EOL] raise CommandError ( [string] . format ( options [ [string] ] ) ) [EOL] [EOL] self . stdout . write ( f' [string] { github_organization_name } [string] { options [ [string] ] } [string] ' ) [EOL] [EOL] statuses = KippoTaskStatus . objects . filter ( task__project__organization__github_organization_name = github_organization_name , effort_date = status_effort_date ) [EOL] tag_values_status_count = defaultdict ( Counter ) [EOL] for status in statuses : [EOL] for tag in status . tags : [EOL] if tag [ [string] ] == options [ [string] ] : [EOL] tag_values_status_count [ tag [ [string] ] ] [ status . state ] += [number] [EOL] for name in sorted ( tag_values_status_count ) : [EOL] self . stdout . write ( f'{ name } [string] { tag_values_status_count [ name ] }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.DefaultDict[typing.Any,collections.Counter[typing.Any]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,collections.Counter[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,collections.Counter[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[typing.Any,collections.Counter[typing.Any]]$ 0 0 0 0 0 0
	0
from typing import Any , Dict , Optional , List , DefaultDict , Set , Tuple [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] import logging [EOL] import datetime [EOL] import logging [EOL] from collections import defaultdict [EOL] from math import pi [EOL] from typing import Any , Dict , List , Tuple [EOL] [EOL] import pandas as pd [EOL] from bokeh . embed import components [EOL] from bokeh . layouts import column , layout [EOL] from bokeh . models import ColumnDataSource , DatetimeTicker , FactorRange , HoverTool , Label , Legend [EOL] from bokeh . models . glyphs import VBar [EOL] from bokeh . palettes import Category20 , Category20c [EOL] from bokeh . plotting import figure [EOL] from bokeh . resources import CDN [EOL] from bokeh . transform import cumsum [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] ONE_DAY = ( [number] * [number] ) - [number] [EOL] [EOL] [EOL] def prepare_project_schedule_chart_components ( project_data , start_date , project_milestones = None , display_days = [number] , ) : [EOL] [docstring] [EOL] if project_milestones is None : [EOL] project_milestones = { } [EOL] [EOL] [comment] [EOL] min_date = start_date - datetime . timedelta ( days = [number] ) [EOL] max_date = min_date + datetime . timedelta ( days = display_days ) [EOL] [EOL] display_tooltips = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] hover = HoverTool ( names = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , tooltips = display_tooltips , ) [EOL] [EOL] schedule_plots = [ ] [EOL] project_effort_plots = [ ] [EOL] chart_minimum_height = [number] [EOL] chart_minimum_width = [number] [EOL] legend_added = False [EOL] for project_id , project_start_date , project_target_date , project_estimated_date , data , assignee_data in project_data : [EOL] legend_items = [ ] [EOL] logger . debug ( f" [string] { project_id }" ) [EOL] source = ColumnDataSource ( data ) [EOL] y_range = set ( data [ [string] ] ) [EOL] calculated_plot_height = ( len ( y_range ) * [number] ) + chart_minimum_height [EOL] calculated_plot_width = ( display_days * [number] ) + chart_minimum_width [EOL] difference = project_estimated_date - project_target_date [EOL] positive_id = [string] [EOL] if difference . days > [number] : [EOL] positive_id = [string] [EOL] p = figure ( title = f" [string] { project_target_date } [string] { project_estimated_date } [string] { positive_id }{ difference } [string] " , y_range = FactorRange ( * sorted ( y_range ) ) , x_range = ( min_date , max_date ) , plot_width = calculated_plot_width , plot_height = calculated_plot_height , toolbar_location = None , tools = [ hover ] , ) [EOL] project_specific_milestones = project_milestones . get ( project_id , None ) [EOL] [comment] [EOL] label_y = - [number] [EOL] label_x_offset = [number] [EOL] if project_specific_milestones : [EOL] milestone_count = len ( project_specific_milestones ) [EOL] color_count = [number] [EOL] if milestone_count > [number] : [EOL] color_count = milestone_count [EOL] color_palette = Category20 [ color_count ] [comment] [EOL] for idx , milestone_info in enumerate ( project_specific_milestones ) : [EOL] milestone_date = milestone_info [ [string] ] [EOL] glyph = VBar ( x = milestone_date , top = calculated_plot_height , bottom = - [number] , width = ONE_DAY , line_color = color_palette [ idx ] , fill_color = None ) [EOL] p . add_glyph ( source , glyph ) [EOL] [EOL] label = Label ( x = milestone_date , x_offset = label_x_offset , y = label_y , y_offset = [number] , text = milestone_info [ [string] ] , text_font_style = [string] , text_font_size = [string] , ) [EOL] p . add_layout ( label ) [EOL] [EOL] if project_start_date : [comment] [EOL] if project_start_date > min_date : [EOL] logger . debug ( f" [string] { project_start_date }" ) [EOL] glyph = VBar ( x = project_start_date , top = calculated_plot_height , bottom = - [number] , width = ONE_DAY , line_color = [string] , fill_color = None ) [EOL] p . add_glyph ( source , glyph ) [EOL] project_start_date_label = Label ( x = project_start_date , x_offset = label_x_offset , y = label_y , y_offset = [number] , text = [string] , text_font_style = [string] , text_font_size = [string] ) [EOL] p . add_layout ( project_start_date_label ) [EOL] if project_target_date : [comment] [EOL] logger . debug ( f" [string] { project_target_date }" ) [EOL] glyph = VBar ( x = project_target_date , top = calculated_plot_height , bottom = - [number] , width = ONE_DAY , line_color = [string] , fill_color = None ) [EOL] p . add_glyph ( source , glyph ) [EOL] project_target_date_label = Label ( x = project_target_date , x_offset = label_x_offset , y = label_y , y_offset = [number] , text = [string] , text_font_style = [string] , text_font_size = [string] ) [EOL] p . add_layout ( project_target_date_label ) [EOL] [EOL] [comment] [EOL] task_dates_entry_name = [string] [EOL] task_dates_entry = p . square ( name = task_dates_entry_name , y = [string] , x = [string] , size = [number] , color = [string] , source = source ) [EOL] legend_items . append ( ( task_dates_entry_name , [ task_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] scheduled_dates_entry_name = [string] [EOL] scheduled_dates_entry = p . square_x ( name = scheduled_dates_entry_name , y = [string] , x = [string] , size = [number] , fill_color = None , color = [string] , alpha = [number] , source = source , ) [EOL] legend_items . append ( ( scheduled_dates_entry_name , [ scheduled_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] unscheduled_dates_entry_name = [string] [EOL] unscheduled_dates_entry = p . square ( name = unscheduled_dates_entry_name , y = [string] , x = [string] , size = [number] , fill_color = None , color = [string] , source = source , ) [EOL] legend_items . append ( ( unscheduled_dates_entry_name , [ unscheduled_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] uncommitted_dates_entry_name = [string] [EOL] uncommitted_dates_entry = p . square_x ( name = uncommitted_dates_entry_name , y = [string] , x = [string] , size = [number] , fill_color = None , color = [string] , alpha = [number] , source = source , ) [EOL] legend_items . append ( ( uncommitted_dates_entry_name , [ uncommitted_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] holiday_dates_entry_name = [string] [EOL] holiday_dates_entry = p . circle ( name = holiday_dates_entry_name , y = [string] , x = [string] , size = [number] , color = [string] , alpha = [number] , source = source ) [EOL] legend_items . append ( ( holiday_dates_entry_name , [ holiday_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] weekend_dates_entry_name = [string] [EOL] weekend_dates_entry = p . circle ( name = weekend_dates_entry_name , y = [string] , x = [string] , size = [number] , color = [string] , source = source ) [EOL] legend_items . append ( ( weekend_dates_entry_name , [ weekend_dates_entry ] ) ) [EOL] [EOL] [comment] [EOL] personal_holiday_dates_entry_name = [string] [EOL] personal_holiday_dates_entry = p . circle ( name = personal_holiday_dates_entry_name , y = [string] , x = [string] , size = [number] , color = [string] , source = source , ) [EOL] legend_items . append ( ( personal_holiday_dates_entry_name , [ personal_holiday_dates_entry ] ) ) [EOL] [EOL] glyph = VBar ( x = project_estimated_date , top = calculated_plot_height , bottom = - [number] , width = ONE_DAY , line_color = [string] , fill_color = None ) [EOL] p . add_glyph ( source , glyph ) [EOL] [EOL] label = Label ( x = project_estimated_date , x_offset = label_x_offset , y = label_y , y_offset = [number] , text = f" [string] { positive_id }{ difference . days } [string] " , text_font_style = [string] , text_font_size = [string] , ) [EOL] p . add_layout ( label ) [EOL] [EOL] if not legend_added : [EOL] legend = Legend ( items = legend_items , location = ( [number] , - [number] ) ) [EOL] p . add_layout ( legend , [string] ) [EOL] legend_added = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] p . title . align = [string] [EOL] p . title . text_font_style = [string] [EOL] p . title . text_font_size = [string] [EOL] p . xaxis . ticker = DatetimeTicker ( desired_num_ticks = display_days ) [EOL] p . yaxis . group_label_orientation = [string] [EOL] p . ygrid . grid_line_color = None [EOL] p . y_range . range_padding = [number] [EOL] p . y_range . range_padding_units = [string] [EOL] p . yaxis . group_label_orientation = [string] [comment] [EOL] p . xaxis . axis_label = [string] [EOL] p . xaxis . major_label_orientation = [string] [EOL] p . outline_line_color = None [EOL] schedule_plots . append ( p ) [EOL] [EOL] [comment] [EOL] processed_data = defaultdict ( list ) [EOL] for assignee , assignee_specific_data in assignee_data . items ( ) : [EOL] processed_data [ [string] ] . append ( assignee ) [EOL] processed_data [ [string] ] . append ( assignee_specific_data [ [string] ] ) [EOL] date_str = [string] [EOL] if assignee_specific_data [ [string] ] : [EOL] date_str = assignee_specific_data [ [string] ] . strftime ( [string] ) [EOL] processed_data [ [string] ] . append ( date_str ) [EOL] [EOL] data = pd . DataFrame ( processed_data ) [EOL] data [ [string] ] = data [ [string] ] / data [ [string] ] . sum ( ) * [number] * pi [EOL] data [ [string] ] = data [ [string] ] / data [ [string] ] . sum ( ) * [number] [EOL] if len ( assignee_data ) < [number] : [EOL] data [ [string] ] = Category20c [ [number] ] [ : len ( assignee_data ) ] [EOL] else : [EOL] data [ [string] ] = Category20c [ len ( assignee_data ) ] [EOL] [EOL] p = figure ( plot_height = calculated_plot_height , plot_width = [number] , toolbar_location = None , tools = [string] , tooltips = [string] , ) [EOL] [EOL] p . wedge ( x = [number] , y = [number] , radius = [number] , start_angle = cumsum ( [string] , include_zero = True ) , end_angle = cumsum ( [string] ) , line_color = [string] , fill_color = [string] , source = data , ) [EOL] [EOL] p . axis . axis_label = None [EOL] p . axis . visible = False [EOL] p . grid . grid_line_color = None [EOL] p . outline_line_color = None [EOL] project_effort_plots . append ( p ) [EOL] [EOL] [comment] [EOL] layouts = layout ( [ [ column ( * schedule_plots ) , column ( * project_effort_plots ) ] ] ) [EOL] script , div = components ( layouts , CDN ) [EOL] return script , div [EOL]	
	0
from typing import Dict [EOL] import typing [EOL] import django [EOL] from typing import Dict [EOL] from django . http . request import HttpRequest [EOL] from django . conf import settings [EOL] [EOL] [EOL] def global_view_additional_context ( request ) : [EOL] [docstring] [EOL] context = { [string] : settings . URL_PREFIX , [string] : settings . STATIC_URL , [string] : settings . DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND , } [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from django . contrib import admin [EOL] from django . views . generic . base import RedirectView [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , RedirectView . as_view ( url = f"{ settings . URL_PREFIX } [string] " ) ) , url ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Dict [EOL] import typing [EOL] from . base import * [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] DEBUG = True [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Union , Dict [EOL] import typing [EOL] from . base import * [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] DEBUG = True [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Optional , List , Union [EOL] import typing [EOL] from . base import * [EOL] [EOL] INSTALLED_APPS . append ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] DEFAULT_FILE_STORAGE = [string] [EOL] STATICFILES_STORAGE = [string] [EOL] STATICFILES_LOCATION = [string] [EOL] STATIC_ROOT = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] AWS_STORAGE_BUCKET_NAME = os . environ . get ( [string] , [string] ) [EOL] AWS_S3_CUSTOM_DOMAIN = [string] . format ( AWS_STORAGE_BUCKET_NAME ) [EOL] STATIC_URL = [string] . format ( AWS_S3_CUSTOM_DOMAIN ) [EOL] [EOL] [comment] [EOL] URL_PREFIX = [string] [EOL] SOCIAL_AUTH_LOGIN_REDIRECT_URL = f'{ URL_PREFIX } [string] ' [EOL] [EOL] [comment] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_DOMAINS_RAW = os . getenv ( [string] , None ) [EOL] if SOCIAL_AUTH_GOOGLE_OAUTH2_DOMAINS_RAW : [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_DOMAINS = [ i . strip ( ) for i in SOCIAL_AUTH_GOOGLE_OAUTH2_DOMAINS_RAW . split ( [string] ) ] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = SOCIAL_AUTH_GOOGLE_OAUTH2_DOMAINS [comment] [EOL] [EOL] ALLOWED_HOSTS . append ( os . getenv ( [string] , [string] ) ) [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . getenv ( [string] , [string] ) , [string] : os . getenv ( [string] ) , [string] : [number] , [string] : os . getenv ( [string] , [string] ) , [string] : os . getenv ( [string] ) , } } [EOL] [EOL] DISPLAY_ADMIN_AUTH_FOR_MODELBACKEND = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[None,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from . base import * [comment] [EOL]	0 0 0 0 0 0 0
[EOL] [EOL] class OrganizationConfigurationError ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List , DefaultDict , Counter , Tuple [EOL] import models [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import collections [EOL] import datetime [EOL] from collections import Counter , defaultdict [EOL] from typing import Dict , List , Tuple [EOL] [EOL] from django . contrib import messages [EOL] from django . http import HttpResponseBadRequest [EOL] from django . shortcuts import render [EOL] from django . utils import timezone [EOL] from projects . functions import get_user_session_organization [EOL] [EOL] from . models import KippoOrganization , OrganizationMembership [EOL] [EOL] [EOL] def _get_organization_monthly_available_workdays ( organization ) : [EOL] [comment] [EOL] organization_memberships = list ( OrganizationMembership . objects . filter ( organization = organization , user__github_login__isnull = False , is_developer = True ) . exclude ( user__github_login__contains = [string] ) . order_by ( [string] ) ) [EOL] member_personal_holiday_dates = { m . user . github_login : tuple ( m . user . personal_holiday_dates ( ) ) for m in organization_memberships } [EOL] member_public_holiday_dates = { m . user . github_login : tuple ( m . user . public_holiday_dates ( ) ) for m in organization_memberships } [EOL] [EOL] current_datetime = timezone . now ( ) [EOL] start_datetime = datetime . datetime ( current_datetime . year , current_datetime . month , [number] , tzinfo = datetime . timezone . utc ) [EOL] two_years = [number] * [number] [EOL] two_years_from_now = start_datetime + datetime . timedelta ( days = two_years ) [EOL] [EOL] [comment] [EOL] end_datetime = two_years_from_now . replace ( month = two_years_from_now . month + [number] , day = [number] ) - datetime . timedelta ( days = [number] ) [EOL] [EOL] current_date = start_datetime . date ( ) [EOL] end_date = end_datetime . date ( ) [EOL] [EOL] monthly_available_workdays = defaultdict ( Counter ) [EOL] while current_date <= end_date : [EOL] month_key = current_date . strftime ( [string] ) [EOL] for membership in organization_memberships : [EOL] if ( current_date not in member_personal_holiday_dates [ membership . user . github_login ] [EOL] and current_date not in member_public_holiday_dates [ membership . user . github_login ] ) : [EOL] if current_date . weekday ( ) in membership . committed_weekdays : [EOL] monthly_available_workdays [ month_key ] [ membership . user ] += [number] [EOL] current_date += datetime . timedelta ( days = [number] ) [EOL] return organization_memberships , monthly_available_workdays [EOL] [EOL] [EOL] def view_organization_members ( request ) : [EOL] try : [EOL] selected_organization , user_organizations = get_user_session_organization ( request ) [EOL] except ValueError as e : [EOL] return HttpResponseBadRequest ( str ( e . args ) ) [EOL] [EOL] organization_memberships , monthly_available_workdays = _get_organization_monthly_available_workdays ( selected_organization ) [EOL] [EOL] [comment] [EOL] monthly_member_data = [ ] [EOL] for month in sorted ( monthly_available_workdays . keys ( ) ) : [EOL] data = ( month , sum ( monthly_available_workdays [ month ] . values ( ) ) , [ monthly_available_workdays [ month ] [ m . user ] for m in organization_memberships ] , ) [EOL] monthly_member_data . append ( data ) [EOL] [EOL] context = { [string] : selected_organization , [string] : user_organizations , [string] : organization_memberships , [string] : monthly_member_data , [string] : messages . get_messages ( request ) , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[models.OrganizationMembership],typing.Dict[builtins.str,collections.Counter]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Literal , Any , List , Tuple , Type [EOL] import kippo [EOL] import django [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import typing_extensions [EOL] import datetime [EOL] import logging [EOL] import random [EOL] import string [EOL] import uuid [EOL] from typing import Generator , List , Tuple [EOL] [EOL] from common . models import UserCreatedBaseModel [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import validate_email [EOL] from django . db import models [EOL] from django . db . models import QuerySet [EOL] from django . db . models . signals import pre_delete [EOL] from django . dispatch import receiver [EOL] from django . utils import timezone [EOL] from django . utils . text import slugify [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def generate_random_secret ( n = [number] ) : [EOL] [docstring] [EOL] return [string] . join ( random . choice ( string . ascii_letters + string . digits ) for _ in range ( n ) ) [EOL] [EOL] [EOL] class KippoOrganization ( UserCreatedBaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] github_organization_name = models . CharField ( max_length = [number] , unique = True ) [EOL] day_workhours = models . PositiveSmallIntegerField ( default = [number] , help_text = _ ( [string] ) ) [EOL] default_task_category = models . CharField ( max_length = [number] , default = settings . DEFAULT_KIPPOTASK_CATEGORY , null = True , blank = True , help_text = _ ( [string] ) , ) [EOL] default_task_display_state = models . CharField ( max_length = [number] , default = [string] , help_text = _ ( [string] ) ) [EOL] default_columnset = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING , null = True , default = None , blank = True , help_text = _ ( [string] ) , ) [EOL] default_labelset = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING , null = True , default = None , blank = True , help_text = _ ( [string] ) , ) [EOL] google_forms_project_survey_url = models . URLField ( null = True , default = None , blank = True , help_text = _ ( [string] ) ) [EOL] google_forms_project_survey_projectid_entryid = models . CharField ( max_length = [number] , null = True , default = None , blank = True , help_text = _ ( [string] ) ) [EOL] webhook_secret = models . CharField ( max_length = [number] , default = generate_random_secret , editable = False , help_text = _ ( [string] ) ) [EOL] slack_api_token = models . CharField ( max_length = [number] , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] slack_bot_name = models . CharField ( max_length = [number] , null = True , blank = True , default = [string] , help_text = _ ( [string] ) ) [EOL] slack_bot_iconurl = models . URLField ( null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] [EOL] @ property def email_domains ( self ) : [EOL] domains = EmailDomain . objects . filter ( organization = self ) [EOL] return domains [EOL] [EOL] @ property def slug ( self ) : [EOL] return slugify ( self . name , allow_unicode = True ) [EOL] [EOL] def get_github_developer_kippousers ( self ) : [EOL] [docstring] [EOL] [EOL] developer_memberships = OrganizationMembership . objects . filter ( user__github_login__isnull = False , organization = self , is_developer = True ) . select_related ( [string] ) [EOL] developer_users = [ m . user for m in developer_memberships ] [EOL] return developer_users [EOL] [EOL] @ property def webhook_url ( self ) : [EOL] return f"{ settings . URL_PREFIX } [string] { self . pk } [string] " [EOL] [EOL] def create_unassigned_kippouser ( self ) : [EOL] [comment] [EOL] cli_manager_user = get_climanager_user ( ) [EOL] unassigned_username = f"{ settings . UNASSIGNED_USER_GITHUB_LOGIN_PREFIX } [string] { self . slug }" [EOL] unassigned_github_login = unassigned_username [EOL] logger . info ( f" [string] { unassigned_github_login } [string] { self . name }" ) [EOL] user = KippoUser ( username = unassigned_username , github_login = unassigned_github_login , is_staff = False , is_superuser = False ) [EOL] user . save ( ) [EOL] [EOL] membership = OrganizationMembership ( user = user , organization = self , is_developer = True , created_by = cli_manager_user , updated_by = cli_manager_user ) [EOL] membership . save ( ) [EOL] [EOL] def get_unassigned_kippouser ( self ) : [EOL] membership = OrganizationMembership . objects . get ( organization = self , user__username__startswith = settings . UNASSIGNED_USER_GITHUB_LOGIN_PREFIX ) [EOL] return membership . user [EOL] [EOL] def clean ( self ) : [EOL] if self . google_forms_project_survey_url : [EOL] if not self . google_forms_project_survey_url . endswith ( [string] ) : [EOL] raise ValidationError ( f' [string] { self . google_forms_project_survey_url }' ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if self . _state . adding : [comment] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] self . create_unassigned_kippouser ( ) [EOL] else : [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . name } [string] { self . github_organization_name } [string] " [EOL] [EOL] [EOL] class EmailDomain ( UserCreatedBaseModel ) : [EOL] organization = models . ForeignKey ( KippoOrganization , on_delete = models . CASCADE ) [EOL] domain = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] is_staff_domain = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] [EOL] def clean ( self ) : [EOL] email_address_with_domain = f" [string] { self . domain }" [EOL] try : [EOL] validate_email ( email_address_with_domain ) [comment] [EOL] except ValidationError : [EOL] raise ValidationError ( f' [string] { self . domain } [string] ' ) [EOL] [EOL] [EOL] class OrganizationMembership ( UserCreatedBaseModel ) : [EOL] user = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING ) [EOL] organization = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING ) [EOL] email = models . EmailField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] is_project_manager = models . BooleanField ( default = False ) [EOL] is_developer = models . BooleanField ( default = True ) [EOL] sunday = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] monday = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] tuesday = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] wednesday = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] thursday = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] friday = models . BooleanField ( default = True , help_text = _ ( [string] ) ) [EOL] saturday = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] [EOL] @ property def committed_days ( self ) : [EOL] weekdays = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] result = sum ( [number] for day in weekdays if getattr ( self , day ) ) [EOL] return result [EOL] [EOL] @ property def committed_weekdays ( self ) : [EOL] [docstring] [EOL] workday_attrs = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] weekdays = [ ] [EOL] for weekday , attr in enumerate ( workday_attrs ) : [comment] [EOL] is_committed = getattr ( self , attr ) [EOL] if is_committed : [EOL] weekdays . append ( weekday ) [EOL] return weekdays [EOL] [EOL] def get_workday_identifers ( self ) : [EOL] [docstring] [EOL] workday_attrs = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] identifiers = [ ] [EOL] for attr in workday_attrs : [EOL] if getattr ( self , attr ) : [EOL] workday_id = attr . capitalize ( ) [ : [number] ] [comment] [EOL] identifiers . append ( workday_id ) [EOL] return tuple ( identifiers ) [EOL] [EOL] @ property def email_domain ( self ) : [EOL] domain = self . email . split ( [string] ) [ - [number] ] [comment] [EOL] return domain [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] super ( ) . clean ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] organization_domains = [ d . domain for d in self . organization . email_domains ] [EOL] if self . email and self . email_domain not in organization_domains : [EOL] raise ValidationError ( f" [string] { self . email } [string] { self . organization } [string] { organization_domains }" ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] logger . info ( f" [string] { self . user } [string] { self . organization } [string] " ) [EOL] [EOL] is_staff = False [EOL] for domain in self . organization . email_domains : [EOL] if domain . is_staff_domain : [EOL] is_staff = True [EOL] break [EOL] [EOL] if is_staff : [EOL] logger . info ( f" [string] { self . user . username } [string] " ) [EOL] self . user . is_staff = True [EOL] self . user . is_active = True [EOL] self . user . save ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . organization } [string] { self . user . username } [string] " [EOL] [EOL] [EOL] class KippoUser ( AbstractUser ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] memberships = models . ManyToManyField ( KippoOrganization , through = [string] , through_fields = ( [string] , [string] ) , blank = True , default = None ) [EOL] github_login = models . CharField ( max_length = [number] , null = True , blank = True , default = None , help_text = [string] ) [EOL] is_github_outside_collaborator = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] holiday_country = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] [EOL] @ property def display_name ( self ) : [EOL] github_login_display = self . github_login [EOL] if self . github_login . startswith ( [string] ) : [EOL] github_login_display = [string] [EOL] return f" [string] { self . first_name } [string] { self . last_name } [string] { github_login_display } [string] " [EOL] [EOL] def personal_holiday_dates ( self ) : [EOL] for holiday in PersonalHoliday . objects . filter ( user = self ) : [EOL] holiday_start_date = holiday . day [EOL] for days in range ( holiday . duration ) : [EOL] date = holiday_start_date + timezone . timedelta ( days = days ) [EOL] yield date [EOL] [EOL] def public_holiday_dates ( self ) : [EOL] return PublicHoliday . objects . filter ( country = self . holiday_country ) . values_list ( [string] , flat = True ) [EOL] [EOL] @ property def organizations ( self ) : [EOL] organization_ids = OrganizationMembership . objects . filter ( user = self ) . values_list ( [string] , flat = True ) . distinct ( ) [EOL] return KippoOrganization . objects . filter ( id__in = organization_ids ) [EOL] [EOL] def get_membership ( self , organization ) : [EOL] return OrganizationMembership . objects . get ( user = self , organization = organization ) [EOL] [EOL] def get_assigned_kippotasks ( self ) : [EOL] from tasks . models import KippoTask [EOL] [EOL] return KippoTask . objects . filter ( is_closed = False , assignee = self ) [EOL] [EOL] def get_estimatedays ( self ) : [EOL] tasks = self . get_assigned_kippotasks ( ) [EOL] total_estimatedays = [number] [EOL] for task in tasks : [EOL] active_columnnames = task . project . get_active_column_names ( ) [EOL] lastest_taskstatus = task . latest_kippotaskstatus ( ) [EOL] if lastest_taskstatus . state in active_columnnames : [EOL] total_estimatedays += lastest_taskstatus . estimate_days if lastest_taskstatus . estimate_days else [number] [EOL] return float ( total_estimatedays ) [EOL] [EOL] [EOL] class PersonalHoliday ( models . Model ) : [EOL] user = models . ForeignKey ( KippoUser , on_delete = models . CASCADE , editable = True ) [EOL] created_datetime = models . DateTimeField ( editable = False , auto_now_add = True ) [EOL] is_half = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] day = models . DateField ( ) [EOL] duration = models . SmallIntegerField ( default = [number] , help_text = _ ( [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . user . username } [string] { self . day } [string] { self . duration } [string] " [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class Country ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] alpha_2 = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] alpha_3 = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] country_code = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] region = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . alpha_3 } [string] { self . name } [string] " [EOL] [EOL] [EOL] class PublicHoliday ( models . Model ) : [EOL] country = models . ForeignKey ( Country , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = [number] , help_text = _ ( [string] ) ) [EOL] day = models . DateField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . day } [string] { self . country . alpha_3 } [string] " [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] def get_climanager_user ( ) : [EOL] user = KippoUser . objects . get ( username = [string] ) [EOL] return user [EOL] [EOL] [EOL] @ receiver ( pre_delete , sender = KippoUser ) def delete_kippouser_organizationmemberships ( sender , instance , ** kwargs ) : [EOL] membership_count = OrganizationMembership . objects . filter ( user = instance ) . count ( ) [EOL] logger . info ( f" [string] { membership_count } [string] { instance . username }" ) [EOL] OrganizationMembership . objects . filter ( user = instance ) . delete ( ) [EOL]	
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . view_organization_members , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
import builtins [EOL] from typing import Type , Any [EOL] import typing [EOL] import kippo [EOL] import datetime [EOL] import datetime [EOL] from http import HTTPStatus [EOL] [EOL] from common . tests import DEFAULT_FIXTURES , setup_basic_project [EOL] from django . test import Client , TestCase [EOL] from django . utils import timezone [EOL] [EOL] from . . models import Country , KippoOrganization , KippoUser , OrganizationMembership , PersonalHoliday , PublicHoliday [EOL] from . . views import _get_organization_monthly_available_workdays [EOL] [EOL] [EOL] class AccountsViewsTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] self . holiday_country = Country ( name = [string] , alpha_2 = [string] , alpha_3 = [string] , country_code = [string] , region = [string] ) [EOL] self . holiday_country . save ( ) [EOL] [EOL] created = setup_basic_project ( ) [EOL] self . organization = created [ [string] ] [EOL] self . user = created [ [string] ] [EOL] self . user . holiday_country = self . holiday_country [EOL] self . user . save ( ) [EOL] [EOL] self . github_manager = KippoUser . objects . get ( username = [string] ) [EOL] self . other_organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = self . user , organization = self . other_organization , created_by = self . github_manager , updated_by = self . github_manager , is_developer = True ) [EOL] membership . save ( ) [EOL] self . nonmember_organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] [EOL] self . no_org_user = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . no_org_user . save ( ) [EOL] [EOL] self . client = Client ( ) [EOL] [EOL] def test___get_organization_monthly_available_workdays ( self ) : [EOL] organization_memberships , monthly_available_workdays = _get_organization_monthly_available_workdays ( self . organization ) [EOL] self . assertEqual ( len ( organization_memberships ) , [number] ) [EOL] two_years_plus_one_month = ( [number] * [number] ) + [number] [EOL] self . assertEqual ( len ( monthly_available_workdays . keys ( ) ) , two_years_plus_one_month ) [EOL] [EOL] def test___get_organization_monthly_available_workdays__publicholidays ( self ) : [EOL] current_datetime = timezone . now ( ) [EOL] start_datetime = datetime . datetime ( current_datetime . year , current_datetime . month , [number] , tzinfo = datetime . timezone . utc ) [EOL] two_years = [number] * [number] [EOL] two_years_from_now = start_datetime + datetime . timedelta ( days = two_years ) [EOL] end_datetime = two_years_from_now . replace ( month = two_years_from_now . month + [number] , day = [number] ) - datetime . timedelta ( days = [number] ) [EOL] [EOL] [comment] [EOL] current_date = start_datetime . date ( ) [EOL] end_date = end_datetime . date ( ) [EOL] while current_date <= end_date : [EOL] holiday = PublicHoliday ( country = self . holiday_country , name = [string] , day = current_date ) [EOL] holiday . save ( ) [EOL] current_date += datetime . timedelta ( days = [number] ) [EOL] [EOL] self . assertTrue ( self . user . public_holiday_dates ( ) ) [EOL] [EOL] [comment] [EOL] organization_memberships , monthly_available_workdays = _get_organization_monthly_available_workdays ( self . organization ) [EOL] for month_key , member_available_workdays in monthly_available_workdays . items ( ) : [EOL] for user , work_days in member_available_workdays . items ( ) : [EOL] self . assertEqual ( work_days , [number] , f"{ month_key } [string] { user . github_login }" ) [EOL] [EOL] def test___get_organization_monthly_available_workdays__persionalholidays ( self ) : [EOL] current_datetime = timezone . now ( ) [EOL] start_datetime = datetime . datetime ( current_datetime . year , current_datetime . month , [number] , tzinfo = datetime . timezone . utc ) [EOL] two_years = [number] * [number] [EOL] two_years_from_now = start_datetime + datetime . timedelta ( days = two_years ) [EOL] end_datetime = two_years_from_now . replace ( month = two_years_from_now . month + [number] , day = [number] ) - datetime . timedelta ( days = [number] ) [EOL] [EOL] [comment] [EOL] current_date = start_datetime . date ( ) [EOL] end_date = end_datetime . date ( ) [EOL] while current_date <= end_date : [EOL] holiday = PersonalHoliday ( user = self . user , day = current_date ) [EOL] holiday . save ( ) [EOL] current_date += datetime . timedelta ( days = [number] ) [EOL] [EOL] self . assertTrue ( self . user . personal_holiday_dates ( ) ) [EOL] [EOL] [comment] [EOL] organization_memberships , monthly_available_workdays = _get_organization_monthly_available_workdays ( self . organization ) [EOL] for month_key , member_available_workdays in monthly_available_workdays . items ( ) : [EOL] for user , work_days in member_available_workdays . items ( ) : [EOL] self . assertEqual ( work_days , [number] , f"{ month_key } [string] { user . github_login }" ) [EOL] [EOL] def test_view_organization_members ( self ) : [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , HTTPStatus . OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $datetime.datetime$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $datetime.datetime$ 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.datetime$ 0 0 0 0 0 $datetime.date$ 0 $datetime.datetime$ 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 $kippo.accounts.models.PublicHoliday$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 $kippo.accounts.models.PublicHoliday$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $datetime.datetime$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $datetime.datetime$ 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.datetime$ 0 0 0 0 0 $datetime.date$ 0 $datetime.datetime$ 0 0 0 0 0 0 $datetime.date$ 0 $datetime.date$ 0 0 $kippo.accounts.models.PersonalHoliday$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 $kippo.accounts.models.PersonalHoliday$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import kippo [EOL] import typing [EOL] from django . test import TestCase [EOL] from . . models import KippoOrganization , KippoUser , OrganizationMembership [EOL] [EOL] [EOL] class KippoOrganizationTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , ] [EOL] [EOL] def setUp ( self ) : [EOL] self . github_manager_user = KippoUser . objects . get ( username = [string] ) [EOL] [EOL] def create_organization_unassigned_kippouser ( self ) : [EOL] org_name = [string] [EOL] dummy_organization = KippoOrganization ( name = org_name , github_organization_name = [string] , created_by = self . github_manager_user , updated_by = self . github_manager_user , ) [EOL] dummy_organization . save ( ) [EOL] [EOL] expected_github_unassigned_username = f' [string] { org_name }' [EOL] actual_candidates = KippoUser . objects . filter ( username = expected_github_unassigned_username ) [EOL] self . assertTrue ( actual_candidates ) [EOL] actual = actual_candidates [ [number] ] [EOL] self . assertTrue ( actual . username == expected_github_unassigned_username ) [EOL] [EOL] [comment] [EOL] candidate_memberships = OrganizationMembership . objects . filter ( organization = dummy_organization , user = actual , ) [EOL] self . assertTrue ( candidate_memberships ) [EOL] self . assertTrue ( len ( candidate_memberships ) == [number] ) [EOL] [EOL] unassigned_user = dummy_organization . get_unassigned_kippouser ( ) [EOL] self . assertTrue ( unassigned_user ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.KippoOrganization$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoOrganization$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoOrganization$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $kippo.accounts.models.KippoOrganization$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Literal , Any , List , Set , Tuple [EOL] import kippo [EOL] import typing [EOL] import typing_extensions [EOL] from django . contrib . auth import authenticate [EOL] from django . core . exceptions import ValidationError [EOL] from django . test import TestCase [EOL] [EOL] from . . models import EmailDomain , KippoOrganization , KippoUser , OrganizationMembership [EOL] [EOL] [EOL] class KippoUserCreationTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , [string] ] [EOL] [EOL] def setUp ( self ) : [EOL] self . user = KippoUser ( username = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . user . save ( ) [EOL] [EOL] self . org = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = self . user , updated_by = self . user ) [EOL] self . org . save ( ) [EOL] self . domain = [string] [EOL] self . emaildomain = EmailDomain ( organization = self . org , domain = self . domain , is_staff_domain = True , created_by = self . user , updated_by = self . user ) [EOL] self . emaildomain . save ( ) [EOL] [EOL] self . nonstaff_org = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = self . user , updated_by = self . user ) [EOL] self . nonstaff_org . save ( ) [EOL] self . nonstaff_org_domain = [string] [EOL] self . emaildomain = EmailDomain ( organization = self . nonstaff_org , domain = self . nonstaff_org_domain , is_staff_domain = False , created_by = self . user , updated_by = self . user ) [EOL] self . emaildomain . save ( ) [EOL] [EOL] def test_create_kippouser ( self ) : [EOL] user1 = KippoUser ( username = [string] , email = [string] ) [EOL] user1 . save ( ) [EOL] [EOL] user2 = KippoUser ( username = [string] , email = f" [string] { self . domain }" ) [EOL] user2 . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user2 , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] self . assertTrue ( user2 . is_staff ) [EOL] [EOL] def test_invalid_emaildomain ( self ) : [EOL] invalid_email_domain = [string] [EOL] domain = EmailDomain ( organization = self . org , domain = invalid_email_domain , created_by = self . user , updated_by = self . user ) [EOL] with self . assertRaises ( ValidationError ) : [EOL] domain . clean ( ) [EOL] [EOL] def test_valid_emaildomain ( self ) : [EOL] valid_email_domain = [string] [EOL] domain = EmailDomain ( organization = self . org , domain = valid_email_domain , created_by = self . user , updated_by = self . user ) [EOL] domain . clean ( ) [EOL] self . assertTrue ( domain ) [EOL] [EOL] def test_valid_login_org_user ( self ) : [EOL] user = KippoUser ( username = [string] , is_active = False , email = f" [string] " ) [EOL] password = [string] [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = f" [string] " , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] authenticated_user = authenticate ( username = user . username , password = password ) [EOL] self . assertTrue ( authenticated_user ) [EOL] [EOL] def test_valid_login_multi_org_user ( self ) : [EOL] user = KippoUser ( username = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] password = [string] [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . nonstaff_org , is_developer = True , email = f" [string] { self . nonstaff_org_domain }" , created_by = self . user , updated_by = self . user , ) [EOL] membership . save ( ) [EOL] [EOL] user . refresh_from_db ( ) [EOL] self . assertFalse ( user . is_staff ) [EOL] self . assertFalse ( user . is_active ) [EOL] authenticated_user = authenticate ( username = user . username , password = password ) [EOL] self . assertFalse ( authenticated_user ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = f" [string] " , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] user . refresh_from_db ( ) [EOL] self . assertTrue ( user . is_staff ) [EOL] self . assertTrue ( user . is_active ) [EOL] authenticated_user = authenticate ( username = user . username , password = password ) [EOL] self . assertTrue ( authenticated_user ) [EOL] [EOL] self . assertTrue ( user . memberships . count ( ) == [number] ) [EOL] [EOL] membership = user . get_membership ( self . org ) [EOL] workdays = membership . committed_weekdays [EOL] [EOL] default_membership_workdays = { [number] , [number] , [number] , [number] , [number] } [EOL] self . assertEqual ( set ( workdays ) , default_membership_workdays ) [EOL] [EOL] def test_invalid_email_for_org_membership ( self ) : [EOL] user = KippoUser ( username = [string] , email = f" [string] " ) [EOL] user . save ( ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = f" [string] " , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] self . assertTrue ( user . is_staff ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] membership . clean ( ) [EOL] [EOL] def test_noemail_for_org_membership ( self ) : [EOL] [docstring] [EOL] user = KippoUser ( username = [string] , email = f" [string] " ) [EOL] user . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = None , created_by = self . user , updated_by = self . user ) [EOL] membership . clean ( ) [EOL] membership . save ( ) [EOL] self . assertTrue ( user . memberships . exists ( ) ) [EOL] [EOL] def test_organization_get_github_developer_kippousers ( self ) : [EOL] user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] password = [string] [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [EOL] another_user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] another_user . save ( ) [EOL] [EOL] third_user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] third_user . save ( ) [EOL] [EOL] fourth_user = KippoUser ( username = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] fourth_user . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . nonstaff_org , is_developer = True , email = f" [string] { self . nonstaff_org_domain }" , created_by = self . user , updated_by = self . user , ) [EOL] membership . save ( ) [EOL] user . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] user . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = another_user , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , created_by = self . user , updated_by = self . user , ) [EOL] membership . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = third_user , organization = self . org , is_developer = False , email = f" [string] { self . domain }" , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] [EOL] [comment] [EOL] membership = OrganizationMembership ( user = fourth_user , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , created_by = self . user , updated_by = self . user ) [EOL] membership . save ( ) [EOL] [EOL] users = self . org . get_github_developer_kippousers ( ) [EOL] self . assertTrue ( len ( users ) == [number] , f" [string] { len ( users ) } [string] " ) [comment] [EOL] [EOL] expected_usernames = ( [string] , [string] , f" [string] { self . org . slug }" ) [EOL] actual_usernames = [ ] [EOL] for u in users : [EOL] actual_usernames . append ( u . username ) [EOL] self . assertTrue ( set ( expected_usernames ) == set ( actual_usernames ) , f" [string] { set ( expected_usernames ) } [string] { set ( actual_usernames ) } [string] " ) [EOL] [EOL] def test_organizationmembership_get_workday_identifers ( self ) : [EOL] user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] password = [string] [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [EOL] another_user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] another_user . save ( ) [EOL] [EOL] third_user = KippoUser ( username = [string] , github_login = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] third_user . save ( ) [EOL] [EOL] fourth_user = KippoUser ( username = [string] , is_staff = False , is_active = False , email = f" [string] " ) [EOL] fourth_user . save ( ) [EOL] [EOL] [comment] [EOL] user_membership1 = OrganizationMembership ( user = user , organization = self . nonstaff_org , is_developer = True , email = f" [string] { self . nonstaff_org_domain }" , created_by = self . user , updated_by = self . user , ) [EOL] user_membership1 . save ( ) [EOL] user . refresh_from_db ( ) [EOL] [EOL] expected_workdays = ( [string] , [string] , [string] , [string] , [string] ) [EOL] actual_workdays = user_membership1 . get_workday_identifers ( ) [EOL] self . assertTrue ( actual_workdays == expected_workdays , f" [string] { actual_workdays } [string] { expected_workdays } [string] " ) [EOL] [EOL] [comment] [EOL] user_membership2 = OrganizationMembership ( user = user , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , sunday = True , created_by = self . user , updated_by = self . user , ) [EOL] user_membership2 . save ( ) [EOL] user . refresh_from_db ( ) [EOL] expected_workdays = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] actual_workdays = user_membership2 . get_workday_identifers ( ) [EOL] self . assertTrue ( actual_workdays == expected_workdays , f" [string] { actual_workdays } [string] { expected_workdays } [string] " ) [EOL] [EOL] [comment] [EOL] another_membership = OrganizationMembership ( user = another_user , organization = self . org , is_developer = True , email = f" [string] { self . domain }" , monday = False , created_by = self . user , updated_by = self . user , ) [EOL] another_membership . save ( ) [EOL] expected_workdays = ( [string] , [string] , [string] , [string] ) [EOL] actual_workdays = another_membership . get_workday_identifers ( ) [EOL] self . assertTrue ( actual_workdays == expected_workdays , f" [string] { actual_workdays } [string] { expected_workdays } [string] " ) [EOL] [EOL] [comment] [EOL] third_membership = OrganizationMembership ( user = third_user , organization = self . org , is_developer = False , email = f" [string] { self . domain }" , monday = False , tuesday = False , saturday = True , created_by = self . user , updated_by = self . user , ) [EOL] third_membership . save ( ) [EOL] expected_workdays = ( [string] , [string] , [string] , [string] ) [EOL] actual_workdays = third_membership . get_workday_identifers ( ) [EOL] self . assertTrue ( actual_workdays == expected_workdays , f" [string] { actual_workdays } [string] { expected_workdays } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.EmailDomain$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.EmailDomain$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.EmailDomain$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.EmailDomain$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.EmailDomain$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.EmailDomain$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.EmailDomain$ 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $typing.Any$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $typing.Any$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $typing.Any$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $builtins.str$ 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 $kippo.accounts.models.KippoUser$ 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 0 0 $kippo.accounts.models.KippoUser$ 0 0 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $kippo.accounts.models.OrganizationMembership$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0
[EOL] [EOL] class ProjectColumnSetError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ProjectDatesError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class TaskStatusError ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProjectsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from . import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . set_user_session_organization , name = [string] , ) , url ( [string] , views . view_inprogress_projects_status , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Any , Dict , Optional , List , Union , Tuple , Type [EOL] import kippo [EOL] import django [EOL] import logging [EOL] import tasks [EOL] import typing [EOL] import datetime [EOL] import accounts [EOL] import builtins [EOL] import typing_extensions [EOL] import datetime [EOL] import logging [EOL] import uuid [EOL] from typing import Any , Dict , List , Optional , Tuple [EOL] from urllib . parse import urlencode [EOL] [EOL] import reversion [EOL] from accounts . models import KippoUser [EOL] from common . models import UserCreatedBaseModel [EOL] from django . conf import settings [EOL] from django . contrib . postgres . fields import ArrayField , JSONField [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import MaxValueValidator , MinValueValidator [EOL] from django . db import models [EOL] from django . db . models import Max , QuerySet , Sum [EOL] from django . db . models . signals import pre_delete [EOL] from django . dispatch import receiver [EOL] from django . utils import timezone [EOL] from django . utils . text import slugify [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from ghorgs . managers import GithubOrganizationManager [EOL] from octocat . models import GITHUB_MILESTONE_CLOSE_STATE , GithubMilestone , GithubRepository [EOL] from tasks . models import KippoTaskStatus [EOL] [EOL] from . exceptions import ProjectColumnSetError [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] UNASSIGNED_USER_GITHUB_LOGIN_PREFIX = settings . UNASSIGNED_USER_GITHUB_LOGIN_PREFIX [EOL] GITHUB_MANAGER_USERNAME = settings . GITHUB_MANAGER_USERNAME [EOL] UNPROCESSABLE_ENTITY_422 = [number] [EOL] [EOL] [EOL] def get_target_date_default ( ) : [EOL] [comment] [EOL] return ( timezone . now ( ) + timezone . timedelta ( days = settings . DEFAULT_KIPPORPOJECT_TARGET_DATE_DAYS ) ) . date ( ) [EOL] [EOL] [EOL] def category_prefixes_default ( ) : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] def estimate_prefixes_default ( ) : [EOL] return [ [string] , [string] ] [EOL] [EOL] [EOL] class ProjectColumnSet ( models . Model ) : [comment] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] organization = models . ForeignKey ( [string] , on_delete = models . CASCADE , null = True , blank = True , editable = False , help_text = _ ( [string] ) , ) [EOL] name = models . CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] default_column_name = models . CharField ( max_length = [number] , default = [string] , verbose_name = _ ( [string] ) ) [EOL] created_datetime = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] updated_datetime = models . DateTimeField ( auto_now = True , editable = False ) [EOL] label_category_prefixes = ArrayField ( models . CharField ( max_length = [number] , blank = True ) , null = True , blank = True , default = category_prefixes_default , help_text = _ ( [string] ) , ) [EOL] label_estimate_prefixes = ArrayField ( models . CharField ( max_length = [number] , blank = True ) , null = True , blank = True , default = estimate_prefixes_default , help_text = _ ( [string] ) , ) [EOL] [EOL] def get_column_names ( self ) : [EOL] column_names = [ c . name for c in ProjectColumn . objects . filter ( columnset = self ) . order_by ( [string] ) ] [EOL] if self . default_column_name not in column_names : [EOL] raise ValueError ( f" [string] { self . default_column_name } [string] { column_names }" ) [EOL] return column_names [EOL] [EOL] def get_active_column_names ( self , with_priority = False ) : [EOL] if with_priority : [EOL] names = [ ( priority , c . name ) for priority , c in enumerate ( ProjectColumn . objects . filter ( columnset = self , is_active = True ) . order_by ( [string] ) ) ] [EOL] else : [EOL] names = [ c . name for c in ProjectColumn . objects . filter ( columnset = self , is_active = True ) . order_by ( [string] ) ] [EOL] if not names : [EOL] raise ProjectColumnSetError ( f"{ self } [string] " ) [EOL] return names [EOL] [EOL] def get_done_column_names ( self ) : [EOL] names = [ c . name for c in ProjectColumn . objects . filter ( columnset = self , is_done = True ) . order_by ( [string] ) ] [EOL] if not names : [EOL] raise ProjectColumnSetError ( f"{ self } [string] " ) [EOL] return names [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . name } [string] " [EOL] [EOL] [EOL] class ProjectColumn ( models . Model ) : [EOL] columnset = models . ForeignKey ( ProjectColumnSet , on_delete = models . CASCADE ) [EOL] index = models . PositiveSmallIntegerField ( _ ( [string] ) , default = None , blank = True , unique = True , help_text = _ ( [string] ) ) [EOL] name = models . CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] github_id = models . PositiveIntegerField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] is_active = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] is_done = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] [EOL] def clean ( self ) : [EOL] if self . is_active and self . is_done : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] if not self . index and ProjectColumn . objects . filter ( columnset = self . columnset ) . exists ( ) : [EOL] [comment] [EOL] max_index = ProjectColumn . objects . filter ( columnset = self . columnset ) . aggregate ( Max ( [string] ) ) [ [string] ] [EOL] self . index = max_index + [number] [EOL] logger . info ( f"{ str ( self ) } [string] { self . index }" ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . columnset . name } [string] { self . name } [string] " [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] [EOL] DEFAULT_PROJECT_PHASE = [string] [EOL] VALID_PROJECT_PHASES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [EOL] @ reversion . register ( ) class KippoProject ( UserCreatedBaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] organization = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] slug = models . CharField ( max_length = [number] , unique = True , editable = False ) [EOL] phase = models . CharField ( max_length = [number] , default = DEFAULT_PROJECT_PHASE , choices = VALID_PROJECT_PHASES , help_text = _ ( [string] ) ) [EOL] confidence = models . PositiveSmallIntegerField ( default = [number] , validators = ( MaxValueValidator ( [number] ) , MinValueValidator ( [number] ) ) , help_text = _ ( [string] ) , ) [EOL] category = models . CharField ( max_length = [number] , default = settings . DEFAULT_KIPPOPROJECT_CATEGORY ) [EOL] slack_channel_name = models . CharField ( max_length = [number] , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] columnset = models . ForeignKey ( ProjectColumnSet , on_delete = models . DO_NOTHING , help_text = _ ( [string] ) , ) [EOL] project_manager = models . ForeignKey ( [string] , on_delete = models . SET_NULL , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] is_closed = models . BooleanField ( _ ( [string] ) , default = False , help_text = _ ( [string] ) ) [EOL] display_as_active = models . BooleanField ( _ ( [string] ) , default = True , help_text = _ ( [string] ) ) [EOL] github_project_html_url = models . URLField ( _ ( [string] ) , null = True , blank = True ) [EOL] github_project_api_url = models . URLField ( _ ( [string] ) , null = True , blank = True ) [EOL] allocated_staff_days = models . PositiveIntegerField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] start_date = models . DateField ( _ ( [string] ) , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] target_date = models . DateField ( _ ( [string] ) , null = True , blank = True , default = get_target_date_default , help_text = _ ( [string] ) , ) [EOL] actual_date = models . DateField ( _ ( [string] ) , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] document_url = models . URLField ( _ ( [string] ) , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] problem_definition = models . TextField ( _ ( [string] ) , null = True , blank = True , help_text = _ ( [string] ) ) [EOL] survey_issued = models . BooleanField ( default = False , help_text = _ ( [string] ) ) [EOL] survey_issued_datetime = models . DateTimeField ( null = True , editable = False , help_text = _ ( [string] ) ) [EOL] column_info = JSONField ( null = True , blank = True , editable = False , help_text = _ ( [string] ) , ) [EOL] [EOL] def get_columnset_id_to_name_mapping ( self ) : [EOL] if not self . column_info : [EOL] raise ValueError ( f" [string] " ) [EOL] mapping = { } [EOL] for column_definition in self . column_info : [EOL] name = column_definition [ [string] ] [EOL] if [string] in column_definition : [comment] [EOL] column_id = column_definition [ [string] ] . split ( [string] ) [ - [number] ] [EOL] elif [string] in column_definition : [comment] [EOL] column_id = column_definition [ [string] ] [EOL] else : [EOL] raise KeyError ( f' [string] { column_definition }' ) [EOL] mapping [ int ( column_id ) ] = name [EOL] return mapping [EOL] [EOL] def get_columnname_from_id ( self , column_id ) : [EOL] mapping = self . get_columnset_id_to_name_mapping ( ) [EOL] return mapping . get ( column_id , None ) [EOL] [EOL] def clean ( self ) : [EOL] if self . actual_date and self . actual_date > timezone . now ( ) . date ( ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] def developers ( self ) : [EOL] from tasks . models import KippoTask [EOL] [EOL] return { t . assignee for t in KippoTask . filter ( project = self , assignee__is_developer = True ) . exclude ( assignee__github_login__startswith = UNASSIGNED_USER_GITHUB_LOGIN_PREFIX ) } [EOL] [EOL] @ property def default_column_name ( self ) : [EOL] return self . columnset . default_column_name [EOL] [EOL] def get_admin_url ( self ) : [EOL] return f"{ settings . URL_PREFIX } [string] { self . id } [string] " [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return f"{ settings . URL_PREFIX } [string] { self . slug }" [EOL] [EOL] def get_column_names ( self ) : [EOL] [docstring] [EOL] if not self . columnset : [EOL] raise ValueError ( _ ( f"{ self } [string] " ) ) [EOL] return self . columnset . get_column_names ( ) [EOL] [EOL] def get_active_column_names ( self ) : [EOL] if not self . columnset : [EOL] raise ValueError ( _ ( f"{ self } [string] " ) ) [EOL] return self . columnset . get_active_column_names ( ) [EOL] [EOL] def get_latest_kippoprojectstatus ( self ) : [EOL] try : [EOL] latest_kippoprojectstatus = KippoProjectStatus . objects . filter ( project = self ) . latest ( [string] ) [EOL] except KippoProjectStatus . DoesNotExist : [EOL] latest_kippoprojectstatus = None [EOL] return latest_kippoprojectstatus [EOL] [EOL] def get_active_taskstatus ( self , max_effort_date = None , additional_filters = None ) : [EOL] [docstring] [EOL] has_estimates = False [EOL] valid_column_states = self . get_active_column_names ( ) + [ [string] ] [EOL] qs = KippoTaskStatus . objects . filter ( task__github_issue_api_url__isnull = False , task__project = self ) [comment] [EOL] if additional_filters : [EOL] logger . debug ( f" [string] { additional_filters }" ) [EOL] qs = qs . filter ( ** additional_filters ) [EOL] [EOL] if max_effort_date : [EOL] qs = qs . filter ( effort_date__lte = max_effort_date ) [EOL] results = qs . order_by ( [string] , [string] ) . distinct ( [string] ) [EOL] [EOL] [comment] [EOL] taskstatus_results = [ r for r in list ( results ) if r . state in valid_column_states ] [EOL] if any ( status . estimate_days for status in taskstatus_results ) : [EOL] has_estimates = True [EOL] return taskstatus_results , has_estimates [EOL] [EOL] def get_latest_taskstatuses ( self , current_date = None , active_only = False ) : [comment] [EOL] [docstring] [EOL] if not current_date : [EOL] current_date = timezone . now ( ) . date ( ) [EOL] [EOL] target_kippotaskstatus_ids = ( KippoTaskStatus . objects . filter ( task__github_issue_api_url__isnull = False , task__project = self , effort_date__lte = current_date ) . order_by ( [string] , [string] ) . distinct ( [string] ) . values_list ( [string] , flat = True ) ) [EOL] [EOL] [comment] [EOL] valid_column_states = self . get_column_names ( ) [EOL] if active_only : [EOL] valid_column_states = self . get_active_column_names ( ) + [ [string] ] [EOL] [EOL] status_entries = KippoTaskStatus . objects . filter ( pk__in = target_kippotaskstatus_ids , state__in = valid_column_states ) [EOL] return status_entries [EOL] [EOL] def get_projectsurvey_url ( self ) : [EOL] [docstring] [EOL] url = [string] [EOL] if self . organization . google_forms_project_survey_url and self . organization . google_forms_project_survey_projectid_entryid : [EOL] params = { [string] : [string] , self . organization . google_forms_project_survey_projectid_entryid : self . id , } [EOL] encoded_params = urlencode ( params ) [EOL] url = f"{ self . organization . google_forms_project_survey_url } [string] { encoded_params }" [EOL] return url [EOL] [EOL] def active_milestones ( self ) : [EOL] today = timezone . now ( ) . date ( ) [EOL] return KippoMilestone . objects . filter ( project = self , target_date__gte = today ) . order_by ( [string] ) [EOL] [EOL] def related_github_repositories ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] from tasks . models import KippoTask [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] repository_html_urls = set ( ) [EOL] for issue_html_url in KippoTask . objects . filter ( project = self ) . values_list ( [string] , flat = True ) : [EOL] logger . debug ( f" [string] { issue_html_url }" ) [EOL] root_repository_url = issue_html_url . rsplit ( [string] , [number] ) [ [number] ] [EOL] [comment] [EOL] repository_html_urls . add ( root_repository_url ) [EOL] [comment] [EOL] repository_html_url = f"{ root_repository_url } [string] " [EOL] repository_html_urls . add ( repository_html_url ) [EOL] return GithubRepository . objects . filter ( html_url__in = tuple ( repository_html_urls ) ) [EOL] [EOL] @ property def github_project_name ( self ) : [EOL] return self . name [EOL] [EOL] @ property def github_project_description ( self ) : [EOL] project_manager_display_name = [string] [EOL] if self . project_manager : [EOL] project_manager_display_name = self . project_manager . display_name [EOL] description = ( f""" [string] { project_manager_display_name } [string] """ f""" [string] { self . start_date } [string] """ f""" [string] { self . target_date } [string] """ ) [EOL] return description [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if self . survey_issued and not self . survey_issued_datetime : [EOL] self . survey_issued_datetime = timezone . now ( ) [EOL] [EOL] if self . is_closed and not self . closed_datetime : [EOL] self . closed_datetime = timezone . now ( ) [EOL] [EOL] if self . _state . adding : [comment] [EOL] [comment] [EOL] self . slug = slugify ( self . name , allow_unicode = True ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . name } [string] " [EOL] [EOL] [EOL] class ActiveKippoProjectManager ( models . Manager ) : [EOL] def get_queryset ( self ) : [EOL] qs = super ( ) . get_queryset ( ) [EOL] [EOL] [comment] [EOL] qs = qs . filter ( is_closed = False , display_as_active = True ) [EOL] return qs [EOL] [EOL] [EOL] class ActiveKippoProject ( KippoProject ) : [EOL] objects = ActiveKippoProjectManager ( ) [EOL] [EOL] class Meta : [EOL] proxy = True [EOL] [EOL] [EOL] class KippoProjectStatus ( UserCreatedBaseModel ) : [EOL] project = models . ForeignKey ( KippoProject , on_delete = models . CASCADE ) [EOL] comment = models . TextField ( help_text = _ ( [string] ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . project . name } [string] { self . created_datetime } [string] " [EOL] [EOL] [EOL] class GithubMilestoneAlreadyExists ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] @ reversion . register ( ) class KippoMilestone ( UserCreatedBaseModel ) : [EOL] [docstring] [EOL] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] project = models . ForeignKey ( KippoProject , on_delete = models . CASCADE , verbose_name = _ ( [string] ) , editable = False ) [EOL] title = models . CharField ( max_length = [number] , verbose_name = _ ( [string] ) ) [EOL] number = models . PositiveSmallIntegerField ( editable = False , help_text = _ ( [string] ) ) [EOL] allocated_staff_days = models . PositiveSmallIntegerField ( null = True , blank = True , help_text = _ ( [string] ) ) [EOL] is_completed = models . BooleanField ( _ ( [string] ) , default = False ) [EOL] start_date = models . DateField ( _ ( [string] ) , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] target_date = models . DateField ( _ ( [string] ) , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] actual_date = models . DateField ( _ ( [string] ) , null = True , blank = True , default = None , help_text = _ ( [string] ) ) [EOL] description = models . TextField ( _ ( [string] ) , blank = True , null = True , help_text = _ ( [string] ) ) [EOL] [EOL] @ property def github_state ( self ) : [EOL] [docstring] [EOL] return [string] if not self . is_completed else [string] [EOL] [EOL] def clean ( self ) : [EOL] if self . actual_date and ( self . actual_date > timezone . now ( ) . date ( ) ) : [EOL] raise ValidationError ( _ ( f" [string] " ) ) [EOL] [EOL] [comment] [EOL] if ( self . start_date and self . target_date ) and self . target_date < self . start_date : [EOL] raise ValidationError ( f" [string] { self . start_date } [string] { self . target_date } [string] " ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return f"{ settings . URL_PREFIX } [string] { self . id } [string] " [EOL] [EOL] @ property def is_delayed ( self ) : [EOL] if not self . is_completed and not self . actual_date and self . target_date and self . target_date < timezone . now ( ) . date ( ) : [EOL] return True [EOL] return False [EOL] [EOL] def update_github_milestones ( self , user = None , close = False ) : [EOL] [docstring] [EOL] github_milestones = [ ] [EOL] if not user : [EOL] logger . warning ( f" [string] { GITHUB_MANAGER_USERNAME }" ) [EOL] user = KippoUser . objects . get ( username = GITHUB_MANAGER_USERNAME ) [EOL] [EOL] [comment] [EOL] existing_github_milestones_by_repo_html_url = { } [EOL] existing_github_repositories_by_html_url = { } [EOL] for github_repository in self . project . related_github_repositories ( ) : [EOL] url = github_repository . html_url [EOL] if url . endswith ( [string] ) : [EOL] [comment] [EOL] url = url [ : - [number] ] [EOL] existing_github_repositories_by_html_url [ url ] = github_repository [EOL] for github_milestone in GithubMilestone . objects . filter ( repository = github_repository , milestone = self ) : [EOL] existing_github_milestones_by_repo_html_url [ url ] = github_milestone [EOL] [EOL] github_organization_name = self . project . organization . github_organization_name [EOL] token = self . project . organization . githubaccesstoken . token [EOL] manager = GithubOrganizationManager ( organization = github_organization_name , token = token ) [EOL] [EOL] [comment] [EOL] related_repository_html_urls = list ( existing_github_repositories_by_html_url . keys ( ) ) [EOL] if not related_repository_html_urls : [EOL] logger . warning ( f" [string] { self . project . name }" ) [EOL] else : [EOL] for repository in manager . repositories ( ) : [EOL] if repository . html_url in related_repository_html_urls : [EOL] logger . info ( f" [string] { repository . name } [string] " ) [EOL] created = False [EOL] github_state = self . github_state [EOL] if close : [EOL] github_state = GITHUB_MILESTONE_CLOSE_STATE [EOL] if repository . html_url in existing_github_milestones_by_repo_html_url : [EOL] github_milestone = existing_github_milestones_by_repo_html_url [ repository . html_url ] [EOL] logger . debug ( f" [string] { self . title } [string] { repository . name } [string] " ) [EOL] repository . update_milestone ( title = self . title , description = self . description , due_on = self . target_date , state = github_state , number = github_milestone . number , ) [EOL] [comment] [EOL] github_milestone . updated_by = user [EOL] github_milestone . save ( ) [EOL] else : [EOL] logger . debug ( f" [string] { repository . name } [string] " ) [EOL] response = repository . create_milestone ( title = self . title , description = self . description , due_on = self . target_date , state = github_state ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] status_code , milestone_content = response [EOL] if status_code == UNPROCESSABLE_ENTITY_422 : [EOL] [comment] [EOL] logger . warning ( f" [string] { repository . name } [string] { milestone_content }" ) [EOL] continue [EOL] [EOL] number = milestone_content [ [string] ] [EOL] api_url = milestone_content [ [string] ] [EOL] html_url = milestone_content [ [string] ] [EOL] github_repository = existing_github_repositories_by_html_url [ repository . html_url ] [EOL] github_milestone = GithubMilestone ( milestone = self , created_by = user , updated_by = user , number = number , repository = github_repository , api_url = api_url , html_url = html_url , ) [EOL] github_milestone . save ( ) [EOL] created = True [EOL] action = [string] if created else [string] [EOL] logger . info ( f" [string] { action } [string] { repository . name } [string] { self . title }" ) [EOL] github_milestones . append ( ( created , github_milestone ) ) [EOL] return github_milestones [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if self . _state . adding : [comment] [EOL] [comment] [EOL] existing_milestone_count = KippoMilestone . objects . filter ( project = self . project ) . count ( ) [EOL] if existing_milestone_count > [number] : [EOL] [comment] [EOL] [comment] [EOL] max_project_number = KippoMilestone . objects . filter ( project = self . project ) . aggregate ( Max ( [string] ) ) [ [string] ] [EOL] self . number = max_project_number + [number] [EOL] else : [EOL] self . number = [number] [EOL] [EOL] [comment] [EOL] if self . actual_date and self . actual_date < timezone . now ( ) . date ( ) : [EOL] self . is_completed = True [EOL] [EOL] [comment] [EOL] if self . is_completed and not self . actual_date : [EOL] self . actual_date = timezone . now ( ) . date ( ) [EOL] elif not self . is_completed and self . actual_date : [EOL] [comment] [EOL] self . actual_date = None [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . __class__ . __name__ } [string] { self . title } [string] " [EOL] [EOL] class Meta : [EOL] unique_together = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ receiver ( pre_delete , sender = KippoMilestone ) def cleanup_github_milestones ( sender , instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . update_github_milestones ( close = True ) [EOL] [EOL] [EOL] class ProjectAssignment ( UserCreatedBaseModel ) : [EOL] project = models . ForeignKey ( KippoProject , on_delete = models . DO_NOTHING , related_name = [string] ) [EOL] user = models . ForeignKey ( [string] , on_delete = models . DO_NOTHING , related_name = [string] ) [EOL] percentage = models . SmallIntegerField ( help_text = _ ( [string] ) ) [EOL] [EOL] [EOL] class CollectIssuesAction ( UserCreatedBaseModel ) : [EOL] start_datetime = models . DateTimeField ( default = timezone . now ) [EOL] end_datetime = models . DateTimeField ( null = True , default = None ) [EOL] organization = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] [EOL] @ property def status ( self ) : [EOL] total_count = CollectIssuesProjectResult . objects . filter ( action = self ) . count ( ) [EOL] completed_count = CollectIssuesProjectResult . objects . filter ( action = self , state = [string] ) . count ( ) [EOL] if total_count : [EOL] percentage = round ( ( completed_count / total_count ) * [number] , [number] ) [EOL] result = f"{ completed_count } [string] { total_count } [string] { percentage } [string] " [EOL] else : [EOL] result = [string] [EOL] return result [EOL] [EOL] @ property def new_task_count ( self ) : [EOL] sum_result = CollectIssuesProjectResult . objects . filter ( action = self ) . aggregate ( Sum ( [string] ) ) [EOL] result = [number] [EOL] if sum_result : [EOL] result = sum_result . get ( [string] , [number] ) [EOL] return result [EOL] [EOL] @ property def new_taskstatus_count ( self ) : [EOL] sum_result = CollectIssuesProjectResult . objects . filter ( action = self ) . aggregate ( Sum ( [string] ) ) [EOL] result = [number] [EOL] if sum_result : [EOL] result = sum_result . get ( [string] , [number] ) [EOL] return result [EOL] [EOL] @ property def updated_taskstatus_count ( self ) : [EOL] sum_result = CollectIssuesProjectResult . objects . filter ( action = self ) . aggregate ( Sum ( [string] ) ) [EOL] result = [number] [EOL] if sum_result : [EOL] result = sum_result . get ( [string] , [number] ) [EOL] return result [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] total_count = CollectIssuesProjectResult . objects . filter ( action = self ) . count ( ) [EOL] completed_count = CollectIssuesProjectResult . objects . filter ( action = self , state = [string] ) . count ( ) [EOL] if total_count and completed_count == total_count : [EOL] self . end_datetime = timezone . now ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] VALID_COLLECTISSUESPROJECTRESULT_STATES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] [EOL] class CollectIssuesProjectResult ( models . Model ) : [EOL] action = models . ForeignKey ( CollectIssuesAction , on_delete = models . CASCADE ) [EOL] project = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] state = models . CharField ( max_length = [number] , choices = VALID_COLLECTISSUESPROJECTRESULT_STATES , default = [string] ) [EOL] new_task_count = models . PositiveSmallIntegerField ( default = [number] ) [EOL] new_taskstatus_count = models . PositiveSmallIntegerField ( default = [number] ) [EOL] updated_taskstatus_count = models . PositiveSmallIntegerField ( default = [number] ) [EOL] unhandled_issues = JSONField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import Type , Tuple , Any , Dict [EOL] import kippo [EOL] import typing [EOL] [docstring] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . utils . translation import ugettext as _ [EOL] from django . conf import settings [EOL] [EOL] import psycopg2 [EOL] import psycopg2 . extras [EOL] [EOL] from accounts . models import KippoOrganization , KippoUser , OrganizationMembership [EOL] from projects . models import KippoProject , KippoProjectStatus , ProjectColumnSet [EOL] from octocat . models import GithubRepository , GithubRepositoryLabelSet [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] [EOL] try : [EOL] CLI_USER = KippoUser . objects . get ( username = settings . CLI_MANAGER_USERNAME ) [EOL] except KippoUser . DoesNotExist : [EOL] raise CommandError ( f' [string] { settings . CLI_MANAGER_USERNAME }' ) [EOL] [EOL] [EOL] ADMIN_USER = KippoUser . objects . get ( username = [string] ) [EOL] GITHUB_USER = KippoUser . objects . get ( username = [string] ) [EOL] DEFAULT_LABELSET = GithubRepositoryLabelSet . objects . all ( ) [ [number] ] [EOL] DEFAULT_COLUMNSET = ProjectColumnSet . objects . all ( ) [ [number] ] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , required = True , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , default = [string] , ) [EOL] parser . add_argument ( [string] , [string] , type = int , default = [number] , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , type = str , default = [string] ) [EOL] parser . add_argument ( [string] , default = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] params = { [string] : options [ [string] ] , [string] : options [ [string] ] , [string] : options [ [string] ] , [string] : options [ [string] ] , [string] : options [ [string] ] } [EOL] with psycopg2 . connect ( ** params ) as conn : [EOL] with conn . cursor ( cursor_factory = psycopg2 . extras . DictCursor ) as cursor : [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name } [string] " ) [EOL] existing_users = { u . username : u for u in KippoUser . objects . all ( ) } [EOL] user_previous_id = { } [EOL] for result in cursor : [EOL] existing_user = existing_users . get ( result [ [string] ] , None ) [EOL] if existing_user : [EOL] self . stdout . write ( f' [string] { existing_user } [string] { result [ [string] ] } [string] ' ) [EOL] user_previous_id [ result [ [string] ] ] = existing_user [EOL] else : [EOL] user = KippoUser ( is_superuser = result [ [string] ] , username = result [ [string] ] , first_name = result [ [string] ] , last_name = result [ [string] ] , is_staff = result [ [string] ] , github_login = result [ [string] ] , holiday_country_id = result [ [string] ] ) [EOL] self . stdout . write ( f' [string] { user } [string] { result [ [string] ] } [string] ' ) [EOL] user . save ( ) [EOL] user_previous_id [ result [ [string] ] ] = user [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] existing_organizations = { o . name : o for o in KippoOrganization . objects . all ( ) } [EOL] organization_previous_id = { } [EOL] for result in cursor : [EOL] existing_organization = existing_organizations . get ( result [ [string] ] , None ) [EOL] if existing_organization : [EOL] self . stdout . write ( f' [string] { existing_organization }' ) [EOL] organization_previous_id [ result [ [string] ] ] = existing_organization [EOL] else : [EOL] new_organization = KippoOrganization ( name = result [ [string] ] , github_organization_name = result [ [string] ] , default_task_category = result [ [string] ] , default_task_display_state = result [ [string] ] , day_workhours = result [ [string] ] , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , created_by = ADMIN_USER , updated_by = ADMIN_USER , ) [EOL] self . stdout . write ( f' [string] { new_organization }' ) [EOL] new_organization . save ( ) [EOL] organization_previous_id [ result [ [string] ] ] = new_organization [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] for result in cursor : [EOL] member = user_previous_id . get ( result [ [string] ] , None ) [EOL] if member : [EOL] result = dict ( result ) [EOL] result . pop ( [string] ) [EOL] [EOL] result [ [string] ] = organization_previous_id [ result [ [string] ] ] [EOL] result . pop ( [string] ) [EOL] result [ [string] ] = user_previous_id [ result [ [string] ] ] [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] membership = OrganizationMembership ( created_by = ADMIN_USER , updated_by = ADMIN_USER , ** result ) [EOL] self . stdout . write ( f' [string] { membership }' ) [EOL] membership . save ( ) [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] previous_project_id = { } [EOL] existing_projects = { p . name : p for p in KippoProject . objects . all ( ) } [EOL] for result in cursor : [EOL] existing_project = existing_projects . get ( result [ [string] ] ) [EOL] if existing_project : [EOL] self . stdout . write ( f' [string] { existing_project }' ) [EOL] previous_project_id [ result [ [string] ] ] = existing_project [EOL] else : [EOL] organization = organization_previous_id [ result [ [string] ] ] [EOL] project = KippoProject ( name = result [ [string] ] , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , organization = organization , columnset = DEFAULT_COLUMNSET , created_by = ADMIN_USER , updated_by = ADMIN_USER , ) [EOL] self . stdout . write ( f' [string] { project }' ) [EOL] project . save ( ) [EOL] previous_project_id [ result [ [string] ] ] = project [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] existing_projectstatuses = { p . comment : p for p in KippoProjectStatus . objects . all ( ) } [EOL] for result in cursor : [EOL] existing_projectstatus = existing_projectstatuses . get ( result [ [string] ] , None ) [EOL] if not existing_projectstatus : [EOL] created_by_user = user_previous_id . get ( result [ [string] ] , ADMIN_USER ) [EOL] updated_by_user = user_previous_id . get ( result [ [string] ] , ADMIN_USER ) [EOL] projectstatus = KippoProjectStatus ( created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , created_by = created_by_user , updated_by = updated_by_user , project = previous_project_id [ result [ [string] ] ] , comment = result [ [string] ] , ) [EOL] self . stdout . write ( f' [string] { projectstatus }' ) [EOL] projectstatus . save ( ) [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] existing_repos = { r . html_url : r for r in GithubRepository . objects . all ( ) } [EOL] for result in cursor : [EOL] existing_repo = existing_repos . get ( result [ [string] ] ) [EOL] if not existing_repo : [EOL] organization = organization_previous_id [ result [ [string] ] ] [EOL] repo = GithubRepository ( name = result [ [string] ] , api_url = result [ [string] ] , html_url = result [ [string] ] , label_set = DEFAULT_LABELSET , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , organization = organization , created_by = GITHUB_USER , updated_by = GITHUB_USER , ) [EOL] self . stdout . write ( f' [string] { repo }' ) [EOL] repo . save ( ) [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] task_previous_id = { } [EOL] existing_tasks = { t . github_issue_html_url : t for t in KippoTask . objects . all ( ) } [EOL] for result in cursor : [EOL] existing_task = existing_tasks . get ( result [ [string] ] ) [EOL] if existing_task : [EOL] self . stdout . write ( f' [string] { existing_task }' ) [EOL] task_previous_id [ result [ [string] ] ] = existing_task [EOL] else : [EOL] result = dict ( result ) [EOL] previous_id = result . pop ( [string] ) [EOL] [EOL] result [ [string] ] = previous_project_id [ result [ [string] ] ] . id [EOL] result [ [string] ] = user_previous_id [ result [ [string] ] ] . id [EOL] [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] task = KippoTask ( created_by = GITHUB_USER , updated_by = GITHUB_USER , ** result ) [EOL] self . stdout . write ( f' [string] { task }' ) [EOL] task . save ( ) [EOL] task_previous_id [ previous_id ] = task [EOL] [EOL] [comment] [EOL] table_name = [string] [EOL] cursor . execute ( f" [string] { table_name }" ) [EOL] exisiting_taskstatuses = { ( t . effort_date , t . task_id ) : t for t in KippoTaskStatus . objects . all ( ) } [EOL] for result in cursor : [EOL] key = ( result [ [string] ] , task_previous_id [ result [ [string] ] ] . id ) [EOL] exisiting_taskstatus = exisiting_taskstatuses . get ( key , None ) [EOL] if not exisiting_taskstatus : [EOL] result = dict ( result ) [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] [EOL] result [ [string] ] = task_previous_id [ result [ [string] ] ] . id [EOL] [EOL] taskstatus = KippoTaskStatus ( created_by = GITHUB_USER , updated_by = GITHUB_USER , ** result ) [EOL] self . stdout . write ( f' [string] { taskstatus }' ) [EOL] taskstatus . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Tuple[unknown,unknown],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Tuple[typing.Any,unknown]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Tuple[unknown,unknown],typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,unknown]$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Generator , Any , Dict , List , Tuple , Type [EOL] import pathlib [EOL] import kippo [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import json [EOL] from gzip import decompress [EOL] from pathlib import Path [EOL] from typing import Generator [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . utils . translation import ugettext as _ [EOL] from django . conf import settings [EOL] [EOL] from accounts . models import KippoOrganization , KippoUser , OrganizationMembership , Country [EOL] from projects . models import KippoProject , KippoProjectStatus , ProjectColumnSet [EOL] from octocat . models import GithubRepository , GithubRepositoryLabelSet [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] [EOL] try : [EOL] CLI_USER = KippoUser . objects . get ( username = settings . CLI_MANAGER_USERNAME ) [EOL] except KippoUser . DoesNotExist : [EOL] raise CommandError ( f' [string] { settings . CLI_MANAGER_USERNAME }' ) [EOL] [EOL] [EOL] ADMIN_USER = KippoUser . objects . get ( username = [string] ) [EOL] GITHUB_USER = KippoUser . objects . get ( username = [string] ) [EOL] DEFAULT_LABELSET = GithubRepositoryLabelSet . objects . all ( ) [ [number] ] [EOL] DEFAULT_COLUMNSET = ProjectColumnSet . objects . all ( ) [ [number] ] [EOL] DEFAULT_ORG = KippoOrganization . objects . get ( github_organization_name = [string] ) [EOL] [EOL] [EOL] class DjangoJsonParser : [EOL] [EOL] def __init__ ( self , jsondump_filepath ) : [EOL] self . jsondump_filepath = jsondump_filepath [EOL] self . _data = None [EOL] self . load ( ) [EOL] [EOL] def load ( self ) : [EOL] with self . jsondump_filepath . open ( [string] ) as jsongz_in : [EOL] json_in = decompress ( jsongz_in . read ( ) ) [EOL] self . _data = json . loads ( json_in . decode ( [string] ) ) [EOL] [EOL] def _reformat_record ( self , record ) : [EOL] new_record = record [ [string] ] [EOL] new_record [ [string] ] = record [ [string] ] [EOL] return new_record [EOL] [EOL] def get_modelrecords ( self , modelname ) : [EOL] for record in self . _data : [EOL] if record [ [string] ] == modelname : [EOL] yield self . _reformat_record ( record ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , required = True , help = _ ( [string] ) ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [comment] [EOL] jsongz_filepath = Path ( options [ [string] ] ) [EOL] if not jsongz_filepath . exists ( ) : [EOL] raise CommandError ( f' [string] { options [ [string] ] }' ) [EOL] [EOL] default_user_country = Country . objects . get ( alpha_3 = options [ [string] ] ) [EOL] jsonparser = DjangoJsonParser ( jsongz_filepath ) [EOL] [EOL] [comment] [EOL] existing_users = { u . github_login : u for u in KippoUser . objects . filter ( github_login__isnull = False ) } [EOL] user_previous_id = { } [EOL] json_users = [ ] [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_user = existing_users . get ( result [ [string] ] , None ) [EOL] if existing_user : [EOL] self . stdout . write ( f' [string] { existing_user } [string] { result [ [string] ] } [string] ' ) [EOL] user_previous_id [ result [ [string] ] ] = existing_user [EOL] json_users . append ( existing_user ) [EOL] elif result [ [string] ] : [EOL] user = KippoUser ( is_superuser = result [ [string] ] , username = result [ [string] ] , first_name = result [ [string] ] , last_name = result [ [string] ] , is_staff = result [ [string] ] , github_login = result [ [string] ] , holiday_country_id = default_user_country . id ) [EOL] self . stdout . write ( f' [string] { user } [string] { result [ [string] ] } [string] ' ) [EOL] user . save ( ) [EOL] user_previous_id [ result [ [string] ] ] = user [EOL] json_users . append ( user ) [EOL] else : [EOL] self . stderr . write ( f' [string] { result [ [string] ] }' ) [EOL] [EOL] [comment] [EOL] existing_organizations = { o . name : o for o in KippoOrganization . objects . all ( ) } [EOL] organization_previous_id = { } [EOL] added_organizations = [ ] [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_organization = existing_organizations . get ( result [ [string] ] , None ) [EOL] if existing_organization : [EOL] self . stdout . write ( f' [string] { existing_organization }' ) [EOL] organization_previous_id [ result [ [string] ] ] = existing_organization [EOL] added_organizations . append ( existing_organization ) [EOL] else : [EOL] new_organization = KippoOrganization ( name = result [ [string] ] , github_organization_name = result [ [string] ] , default_task_category = result [ [string] ] , default_task_display_state = result [ [string] ] , day_workhours = result [ [string] ] , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , created_by = ADMIN_USER , updated_by = ADMIN_USER , ) [EOL] self . stdout . write ( f' [string] { new_organization }' ) [EOL] new_organization . save ( ) [EOL] organization_previous_id [ result [ [string] ] ] = new_organization [EOL] added_organizations . append ( new_organization ) [EOL] [EOL] [comment] [EOL] existing_memberships = { ( o . user . github_login , o . organization . github_organization_name ) : o for o in OrganizationMembership . objects . all ( ) } [EOL] for user in json_users : [EOL] for org in added_organizations : [EOL] key = ( user . github_login , org . github_organization_name ) [EOL] if key in existing_memberships : [EOL] membership = existing_memberships [ key ] [EOL] self . stdout . write ( f' [string] { membership }' ) [EOL] else : [EOL] membership = OrganizationMembership ( user = user , organization = org , created_by = ADMIN_USER , updated_by = ADMIN_USER , is_project_manager = False , is_developer = True , sunday = False , monday = True , tuesday = True , wednesday = True , thursday = True , friday = True , saturday = True ) [EOL] self . stdout . write ( f' [string] { membership }' ) [EOL] membership . save ( ) [EOL] [EOL] [comment] [EOL] previous_project_id = { } [EOL] existing_projects = { p . name : p for p in KippoProject . objects . all ( ) } [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_project = existing_projects . get ( result [ [string] ] ) [EOL] if existing_project : [EOL] self . stdout . write ( f' [string] { existing_project }' ) [EOL] previous_project_id [ result [ [string] ] ] = existing_project [EOL] else : [EOL] organization = organization_previous_id [ result [ [string] ] ] [EOL] project = KippoProject ( name = result [ [string] ] , is_closed = result [ [string] ] , confidence = result [ [string] ] , document_url = result [ [string] ] , phase = result [ [string] ] , start_date = result [ [string] ] , target_date = result [ [string] ] , actual_date = result [ [string] ] , problem_definition = result [ [string] ] , display_as_active = result [ [string] ] , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , closed_datetime = result [ [string] ] , organization = organization , columnset = DEFAULT_COLUMNSET , created_by = ADMIN_USER , updated_by = ADMIN_USER , ) [EOL] self . stdout . write ( f' [string] { project }' ) [EOL] project . save ( ) [EOL] previous_project_id [ result [ [string] ] ] = project [EOL] [EOL] [comment] [EOL] existing_projectstatuses = { p . comment : p for p in KippoProjectStatus . objects . all ( ) } [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_projectstatus = existing_projectstatuses . get ( result [ [string] ] , None ) [EOL] if not existing_projectstatus : [EOL] created_by_user = user_previous_id . get ( result [ [string] ] , ADMIN_USER ) [EOL] updated_by_user = user_previous_id . get ( result [ [string] ] , ADMIN_USER ) [EOL] projectstatus = KippoProjectStatus ( created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , created_by = created_by_user , updated_by = updated_by_user , project = previous_project_id [ result [ [string] ] ] , comment = result [ [string] ] , ) [EOL] self . stdout . write ( f' [string] { projectstatus }' ) [EOL] projectstatus . save ( ) [EOL] [EOL] [comment] [EOL] existing_repos = { r . html_url : r for r in GithubRepository . objects . all ( ) } [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_repo = existing_repos . get ( result [ [string] ] ) [EOL] if not existing_repo : [EOL] organization_id = result . get ( [string] , None ) [EOL] if organization_id : [EOL] organization = organization_previous_id [ organization_id ] [EOL] else : [EOL] organization = DEFAULT_ORG [EOL] repo = GithubRepository ( name = result [ [string] ] , api_url = result [ [string] ] , html_url = result [ [string] ] , label_set = DEFAULT_LABELSET , created_datetime = result [ [string] ] , updated_datetime = result [ [string] ] , organization = organization , created_by = GITHUB_USER , updated_by = GITHUB_USER , ) [EOL] self . stdout . write ( f' [string] { repo }' ) [EOL] repo . save ( ) [EOL] [EOL] [comment] [EOL] task_previous_id = { } [EOL] existing_tasks = { t . github_issue_html_url : t for t in KippoTask . objects . all ( ) } [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] existing_task = existing_tasks . get ( result [ [string] ] ) [EOL] if existing_task : [EOL] self . stdout . write ( f' [string] { existing_task }' ) [EOL] task_previous_id [ result [ [string] ] ] = existing_task [EOL] else : [EOL] result = dict ( result ) [EOL] previous_id = result [ [string] ] [EOL] [EOL] result [ [string] ] = previous_project_id [ result [ [string] ] ] [EOL] result . pop ( [string] ) [EOL] [EOL] result [ [string] ] = user_previous_id [ result [ [string] ] ] [EOL] result . pop ( [string] ) [EOL] [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] task = KippoTask ( created_by = GITHUB_USER , updated_by = GITHUB_USER , ** result ) [EOL] self . stdout . write ( f' [string] { task }' ) [EOL] task . save ( ) [EOL] task_previous_id [ previous_id ] = task [EOL] [EOL] [comment] [EOL] exisiting_taskstatuses = { ( t . effort_date . strftime ( [string] ) , t . task_id ) : t for t in KippoTaskStatus . objects . all ( ) } [EOL] modelname = [string] [EOL] for result in jsonparser . get_modelrecords ( modelname ) : [EOL] key = ( result [ [string] ] , task_previous_id [ result [ [string] ] ] . id ) [EOL] exisiting_taskstatus = exisiting_taskstatuses . get ( key , None ) [EOL] if not exisiting_taskstatus : [EOL] result = dict ( result ) [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] result . pop ( [string] ) [EOL] [EOL] result [ [string] ] = task_previous_id [ result [ [string] ] ] [EOL] [EOL] taskstatus = KippoTaskStatus ( created_by = GITHUB_USER , updated_by = GITHUB_USER , ** result ) [EOL] self . stdout . write ( f' [string] { taskstatus }' ) [EOL] taskstatus . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 $typing.List[typing.Any]$ 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 $typing.List[typing.Any]$ 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Tuple[unknown,unknown],typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing.Any,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,unknown]$ 0 $typing.Dict[typing.Tuple[unknown,unknown],typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Tuple[unknown,unknown],typing.Any]$ 0 $typing.Tuple[typing.Any,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Tuple[typing.Any,unknown],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $kippo.projects.management.commands.load_from_json.DjangoJsonParser$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,unknown]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Tuple[typing.Any,unknown],typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,unknown]$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Type , Any [EOL] import kippo [EOL] import typing [EOL] [docstring] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . utils . translation import ugettext as _ [EOL] from django . conf import settings [EOL] from . . . functions import collect_existing_github_projects [EOL] from accounts . models import KippoOrganization , KippoUser [EOL] [EOL] try : [EOL] CLI_USER = KippoUser . objects . get ( username = settings . CLI_MANAGER_USERNAME ) [EOL] except KippoUser . DoesNotExist : [EOL] raise CommandError ( f' [string] { settings . CLI_MANAGER_USERNAME }' ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , [string] , type = str , default = None , required = True , help = _ ( [string] ) ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] github_organization_name = options [ [string] ] [EOL] try : [EOL] organization = KippoOrganization . objects . get ( github_organization_name = github_organization_name ) [EOL] except KippoOrganization . DoesNotExist : [EOL] raise CommandError ( f' [string] { github_organization_name }' ) [EOL] [EOL] added_projects = collect_existing_github_projects ( organization , as_user = CLI_USER ) [EOL] self . stdout . write ( f' [string] { len ( added_projects ) } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[kippo.projects.models.KippoProject]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kippo.projects.models.KippoProject]$ 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Literal , Tuple , Any [EOL] import kippo [EOL] import io [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] from gzip import compress [EOL] from io import StringIO , BytesIO [EOL] [EOL] import boto3 [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . conf import settings [EOL] from django . utils import timezone [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = __doc__ [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] s3_bucket_name = settings . DUMPDATA_S3_BUCKETNAME [EOL] if not s3_bucket_name : [EOL] raise CommandError ( f' [string] ' ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] string_buffer = StringIO ( ) [EOL] apps = ( [string] , [string] , [string] , [string] , ) [EOL] start = timezone . now ( ) [EOL] call_command ( [string] , * apps , indent = [number] , stdout = string_buffer , traceback = True ) [EOL] string_buffer . seek ( [number] ) [EOL] [EOL] [comment] [EOL] encoded_data = string_buffer . read ( ) . encode ( [string] ) [EOL] compressed_data = compress ( encoded_data ) [EOL] [EOL] datetime_str = timezone . now ( ) . strftime ( [string] ) [EOL] filename = f' [string] { datetime_str } [string] ' [EOL] [EOL] output_buffer = BytesIO ( compressed_data ) [EOL] output_buffer . seek ( [number] ) [EOL] [EOL] s3_key = f' [string] { filename }' [EOL] s3_uri = f' [string] { s3_bucket_name } [string] { s3_key }' [EOL] checkpoint = timezone . now ( ) [EOL] checkpoint_elapsed = checkpoint - start [EOL] self . stdout . write ( f' [string] { checkpoint_elapsed }' ) [EOL] [EOL] self . stdout . write ( f' [string] { s3_uri }' ) [EOL] s3 = boto3 . resource ( [string] ) [EOL] s3 . Bucket ( s3_bucket_name ) . put_object ( Key = s3_key , Body = output_buffer ) [EOL] end = timezone . now ( ) [EOL] total_elapsed = end - start [EOL] self . stdout . write ( f' [string] { total_elapsed } [string] ' ) [EOL] [EOL] self . stdout . write ( f' [string] ' ) [EOL] self . stdout . write ( f' [string] { s3_bucket_name } [string] { s3_key } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 0 $builtins.bytes$ 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import Type , Any [EOL] import kippo [EOL] import typing [EOL] from http import HTTPStatus [EOL] [EOL] from django . test import Client , TestCase [EOL] from django . conf import settings [EOL] from django . utils import timezone [EOL] [EOL] from common . tests import DEFAULT_FIXTURES , setup_basic_project [EOL] from accounts . models import KippoUser , KippoOrganization , OrganizationMembership [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] [EOL] [EOL] class SetOrganizationTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] created = setup_basic_project ( ) [EOL] self . organization = created [ [string] ] [EOL] self . user = created [ [string] ] [EOL] self . github_manager = KippoUser . objects . get ( username = [string] ) [EOL] self . other_organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = self . user , organization = self . other_organization , created_by = self . github_manager , updated_by = self . github_manager , is_developer = True ) [EOL] membership . save ( ) [EOL] self . nonmember_organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] [EOL] self . no_org_user = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True , ) [EOL] self . no_org_user . save ( ) [EOL] [EOL] self . client = Client ( ) [EOL] [EOL] def test_set_organization__valid_user ( self ) : [EOL] url = f'{ settings . URL_PREFIX } [string] { self . organization . id } [string] ' [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( url ) [EOL] expected = HTTPStatus . FOUND [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] self . assertTrue ( self . client . session [ [string] ] == str ( self . organization . id ) ) [EOL] [EOL] def test_set_organization__valid_user_nonmember_org ( self ) : [EOL] url = f'{ settings . URL_PREFIX } [string] { self . nonmember_organization . id } [string] ' [EOL] self . client . force_login ( self . user ) [EOL] response = self . client . get ( url ) [EOL] expected = HTTPStatus . FOUND [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] [EOL] actual = self . client . session [ [string] ] [EOL] self . assertTrue ( actual != str ( self . nonmember_organization . id ) ) [EOL] self . assertTrue ( actual == str ( self . user . organizations [ [number] ] . id ) ) [EOL] [EOL] def test_set_organization__user_no_org ( self ) : [EOL] url = f'{ settings . URL_PREFIX } [string] { self . nonmember_organization . id } [string] ' [EOL] self . client . force_login ( self . no_org_user ) [EOL] response = self . client . get ( url ) [EOL] expected = HTTPStatus . BAD_REQUEST [EOL] actual = response . status_code [EOL] self . assertTrue ( actual == expected , f' [string] { actual } [string] { expected } [string] ' ) [EOL] [EOL] actual = self . client . session . get ( [string] , None ) [EOL] self . assertTrue ( actual is None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Any , Dict [EOL] import kippo [EOL] import typing [EOL] import datetime [EOL] from accounts . models import EmailDomain , KippoOrganization , KippoUser , OrganizationMembership [EOL] from common . tests import DEFAULT_COLUMNSET_PK [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] [EOL] from . . charts . functions import get_project_weekly_effort , prepare_project_plot_data [EOL] from . . models import KippoMilestone , KippoProject , ProjectColumnSet [EOL] [EOL] [EOL] class ProjectsChartFunctionsTestCase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , [string] ] [EOL] [EOL] def setUp ( self ) : [EOL] self . cli_manager = KippoUser . objects . get ( username = [string] ) [EOL] [EOL] self . organization = KippoOrganization ( name = [string] , github_organization_name = [string] , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . organization . save ( ) [EOL] self . domain = [string] [EOL] self . emaildomain = EmailDomain ( organization = self . organization , domain = self . domain , is_staff_domain = True , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . emaildomain . save ( ) [EOL] [EOL] self . user1 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . user1 . save ( ) [EOL] self . user1_membership = OrganizationMembership ( user = self . user1 , organization = self . organization , is_developer = True , email = f" [string] { self . domain }" , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . user1_membership . save ( ) [EOL] [EOL] self . user2 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] self . user2 . save ( ) [EOL] self . user2_membership = OrganizationMembership ( user = self . user2 , organization = self . organization , is_developer = True , email = f" [string] { self . domain }" , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . user2_membership . save ( ) [EOL] [EOL] columnset = ProjectColumnSet . objects . get ( pk = DEFAULT_COLUMNSET_PK ) [EOL] self . project_start_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . project_target_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . kippoproject = KippoProject ( name = [string] , organization = self . organization , start_date = self . project_start_date , target_date = self . project_target_date , columnset = columnset , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] self . kippoproject . save ( ) [EOL] active_states = self . kippoproject . columnset . get_active_column_names ( ) [EOL] active_state = active_states [ [number] ] [EOL] [EOL] task1 = KippoTask ( title = [string] , category = [string] , github_issue_api_url = [string] , project = self . kippoproject , assignee = self . user1 , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task1 . save ( ) [EOL] task1status = KippoTaskStatus ( task = task1 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task1status . save ( ) [EOL] [EOL] task2 = KippoTask ( title = [string] , category = [string] , github_issue_api_url = [string] , project = self . kippoproject , assignee = self . user1 , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task2 . save ( ) [EOL] task2status = KippoTaskStatus ( task = task2 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task2status . save ( ) [EOL] self . user1effort_total = task1status . estimate_days + task2status . estimate_days [EOL] [EOL] task3 = KippoTask ( title = [string] , category = [string] , github_issue_api_url = [string] , project = self . kippoproject , assignee = self . user2 , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task3 . save ( ) [EOL] task3status = KippoTaskStatus ( task = task3 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task3status . save ( ) [EOL] [EOL] task4 = KippoTask ( title = [string] , category = [string] , github_issue_api_url = [string] , project = self . kippoproject , assignee = self . user2 , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task4 . save ( ) [EOL] task4status = KippoTaskStatus ( task = task4 , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , estimate_days = [number] , state = active_state , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] task4status . save ( ) [EOL] self . user2effort_total = task3status . estimate_days + task4status . estimate_days [EOL] [EOL] def test_get_project_weekly_effort ( self ) : [EOL] assert KippoTaskStatus . objects . filter ( task__project = self . kippoproject ) . count ( ) == [number] [EOL] assert KippoTaskStatus . objects . filter ( task__project = self . kippoproject , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) ) . count ( ) == [number] [EOL] [EOL] wednesday_weekday = [number] [EOL] date_keyed_status_entries = get_project_weekly_effort ( project = self . kippoproject , current_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , representative_day = wednesday_weekday ) [EOL] self . assertTrue ( date_keyed_status_entries ) [EOL] user_status = { } [EOL] for period_date , status_entries in date_keyed_status_entries . items ( ) : [EOL] for entry in status_entries : [EOL] user = entry [ [string] ] [EOL] user_status [ user ] = { [string] : entry [ [string] ] , [string] : entry [ [string] ] } [EOL] self . assertTrue ( user_status ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , self . user1effort_total ) [EOL] [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , self . user2effort_total ) [EOL] [EOL] def test_prepare_project_plot_data ( self ) : [EOL] target_current_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] data , assignees , burndown_line = prepare_project_plot_data ( self . kippoproject , current_date = target_current_date ) [EOL] self . assertTrue ( data ) [EOL] effort_date_count = len ( data [ [string] ] ) [EOL] self . assertEqual ( effort_date_count , [number] ) [EOL] for assignee_key , assignee_data in data . items ( ) : [EOL] if assignee_key != [string] : [EOL] self . assertEqual ( len ( assignee_data ) , effort_date_count , data ) [EOL] [EOL] self . assertTrue ( assignees ) [EOL] [EOL] def test_get_project_weekly_effort__with_kippomilestone ( self ) : [EOL] assert KippoMilestone . objects . count ( ) == [number] [EOL] [EOL] milestone_startdate = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] milestone_enddate = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] [EOL] [comment] [EOL] kippo_milestone = KippoMilestone ( project = self . kippoproject , title = [string] , start_date = milestone_startdate , target_date = milestone_enddate ) [EOL] kippo_milestone . save ( ) [EOL] [EOL] assert KippoTaskStatus . objects . filter ( task__project = self . kippoproject ) . count ( ) == [number] [EOL] assert KippoTaskStatus . objects . filter ( task__project = self . kippoproject , effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) ) . count ( ) == [number] [EOL] [EOL] wednesday_weekday = [number] [EOL] date_keyed_status_entries = get_project_weekly_effort ( project = self . kippoproject , current_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) , representative_day = wednesday_weekday ) [EOL] self . assertTrue ( date_keyed_status_entries ) [EOL] user_status = { } [EOL] for period_date , status_entries in date_keyed_status_entries . items ( ) : [EOL] for entry in status_entries : [EOL] user = entry [ [string] ] [EOL] user_status [ user ] = { [string] : entry [ [string] ] , [string] : entry [ [string] ] } [EOL] self . assertTrue ( user_status ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , self . user1effort_total ) [EOL] [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , [number] ) [EOL] self . assertEqual ( user_status [ [string] ] [ [string] ] , self . user2effort_total ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kippo.projects.models.KippoMilestone$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $kippo.projects.models.KippoMilestone$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[datetime.date,typing.List[typing.Dict[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Generator , Literal , Any , List , Tuple , Type [EOL] import kippo [EOL] import typing [EOL] import typing_extensions [EOL] from django . utils import timezone [EOL] from django . test import TestCase [EOL] [EOL] from common . tests import setup_basic_project , DEFAULT_FIXTURES [EOL] from accounts . models import KippoOrganization , KippoUser , EmailDomain , OrganizationMembership [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] from . . functions import get_kippoproject_taskstatus_csv_rows [EOL] [EOL] [EOL] class ProjectsFunctionsTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] self . cli_manager = KippoUser . objects . get ( username = [string] ) [EOL] [EOL] created_objects = setup_basic_project ( ) [EOL] self . user1 = created_objects [ [string] ] [EOL] [EOL] [comment] [EOL] self . project = created_objects [ [string] ] [EOL] active_state_names = self . project . get_active_column_names ( ) [EOL] [EOL] self . organization = created_objects [ [string] ] [EOL] [EOL] [comment] [EOL] self . user2 = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True , ) [EOL] self . user2 . save ( ) [EOL] [EOL] user2_org_membership = OrganizationMembership ( user = self . user2 , organization = self . organization , is_developer = True , created_by = self . cli_manager , updated_by = self . cli_manager , ) [EOL] user2_org_membership . save ( ) [EOL] [EOL] [comment] [EOL] kippo_task1 = created_objects [ [string] ] [EOL] [EOL] tz = timezone . get_current_timezone ( ) [EOL] first_effort_date = timezone . make_aware ( timezone . datetime ( [number] , [number] , [number] ) , tz ) . date ( ) [comment] [EOL] self . kippotaskstatus1 = KippoTaskStatus ( task = kippo_task1 , state = active_state_names [ [number] ] , effort_date = first_effort_date . strftime ( [string] ) , estimate_days = [number] , comment = [string] , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . kippotaskstatus1 . save ( ) [EOL] [EOL] kippo_task2 = KippoTask ( title = [string] , category = [string] , project = self . project , assignee = self . user2 , created_by = self . cli_manager , updated_by = self . cli_manager , github_issue_html_url = [string] , github_issue_api_url = [string] , ) [EOL] kippo_task2 . save ( ) [EOL] [EOL] self . kippotaskstatus2 = KippoTaskStatus ( task = kippo_task2 , state = active_state_names [ [number] ] , effort_date = first_effort_date . strftime ( [string] ) , estimate_days = [number] , comment = [string] , created_by = self . cli_manager , updated_by = self . cli_manager ) [EOL] self . kippotaskstatus2 . save ( ) [EOL] [EOL] def test_get_kippoproject_taskstatus_csv ( self ) : [EOL] expected_headers = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] expected_row_count = [number] [EOL] project_taskstatus_csv_row_generator = get_kippoproject_taskstatus_csv_rows ( self . project , with_headers = True ) [EOL] actual_rows = list ( project_taskstatus_csv_row_generator ) [EOL] print ( f' [string] { actual_rows }' ) [EOL] self . assertTrue ( len ( actual_rows ) == expected_row_count ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( all ( len ( row ) == len ( expected_headers ) for row in actual_rows ) ) [EOL] [EOL] [comment] [EOL] expected_row_count = [number] [EOL] project_taskstatus_csv_row_generator = get_kippoproject_taskstatus_csv_rows ( self . project , with_headers = False ) [EOL] actual_rows = list ( project_taskstatus_csv_row_generator ) [EOL] self . assertTrue ( len ( actual_rows ) == expected_row_count ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( all ( len ( row ) == len ( expected_headers ) for row in actual_rows ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0
import builtins [EOL] from typing import List , Type , Any [EOL] import kippo [EOL] import typing [EOL] import datetime [EOL] [EOL] from accounts . models import KippoUser [EOL] from common . tests import DEFAULT_FIXTURES , setup_basic_project [EOL] from django . test import Client , TestCase [EOL] from django . utils import timezone [EOL] from tasks . models import KippoTask , KippoTaskStatus [EOL] [EOL] [EOL] class KippoProjectMethodsTestCase ( TestCase ) : [EOL] fixtures = DEFAULT_FIXTURES [EOL] [EOL] def setUp ( self ) : [EOL] created = setup_basic_project ( ) [EOL] self . organization = created [ [string] ] [EOL] self . user = created [ [string] ] [EOL] self . project = created [ [string] ] [EOL] self . repository = created [ [string] ] [EOL] self . task1 = created [ [string] ] [EOL] self . github_manager = KippoUser . objects . get ( username = [string] ) [EOL] [EOL] [comment] [EOL] self . planning_column_name = [string] [EOL] self . done_column_name = [string] [EOL] [EOL] [comment] [EOL] self . task2 = KippoTask ( title = [string] , category = [string] , project = self . project , assignee = self . user , created_by = self . github_manager , updated_by = self . github_manager , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { self . repository . name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { self . repository . name } [string] " , ) [EOL] self . task2 . save ( ) [EOL] [EOL] [comment] [EOL] self . task3 = KippoTask ( title = [string] , category = [string] , project = self . project , assignee = self . user , created_by = self . github_manager , updated_by = self . github_manager , github_issue_html_url = f" [string] { self . organization . github_organization_name } [string] { self . repository . name } [string] " , github_issue_api_url = f" [string] { self . organization . github_organization_name } [string] { self . repository . name } [string] " , ) [EOL] self . task3 . save ( ) [EOL] [EOL] self . firstdate = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] [comment] [EOL] [comment] [EOL] self . task1_status1 = KippoTaskStatus ( task = self . task1 , state = self . planning_column_name , effort_date = self . firstdate , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . task1_status1 . save ( ) [EOL] [EOL] self . task1_seconddate = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . task1_status2 = KippoTaskStatus ( task = self . task1 , state = self . planning_column_name , effort_date = self . task1_seconddate , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . task1_status2 . save ( ) [EOL] [EOL] self . task2_status1 = KippoTaskStatus ( task = self . task2 , state = self . planning_column_name , effort_date = self . firstdate , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . task2_status1 . save ( ) [EOL] [EOL] self . task2_seconddate = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] self . task2_status2 = KippoTaskStatus ( task = self . task2 , state = self . planning_column_name , effort_date = self . task2_seconddate , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . task2_status2 . save ( ) [EOL] [EOL] [comment] [EOL] self . task3_status1 = KippoTaskStatus ( task = self . task3 , state = self . done_column_name , effort_date = self . firstdate , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . task3_status1 . save ( ) [EOL] [EOL] def test_get_active_taskstatus__no_max_date ( self ) : [EOL] results , has_estimates = self . project . get_active_taskstatus ( ) [EOL] [EOL] expected = [number] [EOL] actual = len ( results ) [EOL] self . assertTrue ( actual == expected , f" [string] { actual } [string] { expected } [string] { results }" ) [EOL] [EOL] actual_tasks = [ s . task for s in results ] [EOL] self . assertTrue ( self . task3 not in actual_tasks , f" [string] { self . task3 } [string] { results }" ) [EOL] [EOL] expected_tasks = [ self . task1 , self . task2 ] [EOL] self . assertTrue ( all ( t in expected_tasks for t in actual_tasks ) ) [EOL] self . assertTrue ( all ( t in actual_tasks for t in expected_tasks ) ) [EOL] [EOL] task1_tested = False [EOL] task2_tested = False [EOL] for taskstatus in results : [EOL] if taskstatus . task == self . task1 : [EOL] self . assertTrue ( taskstatus . effort_date == self . task1_seconddate ) [EOL] task1_tested = True [EOL] elif taskstatus . task == self . task2 : [EOL] self . assertTrue ( taskstatus . effort_date == self . task2_seconddate ) [EOL] task2_tested = True [EOL] self . assertTrue ( all ( [ task1_tested , task2_tested ] ) ) [EOL] [EOL] def test__get_active_taskstatus_from_projects__with_max_effort_date ( self ) : [EOL] max_effort_date = timezone . datetime ( [number] , [number] , [number] ) . date ( ) [EOL] results , has_estimates = self . project . get_active_taskstatus ( max_effort_date = max_effort_date ) [EOL] self . assertTrue ( len ( results ) == [number] ) [EOL] actual_tasks = [ s . task for s in results ] [EOL] self . assertTrue ( self . task3 not in actual_tasks , f" [string] { self . task3 } [string] { results }" ) [EOL] [EOL] expected_tasks = [ self . task1 , self . task2 ] [EOL] self . assertTrue ( all ( t in expected_tasks for t in actual_tasks ) ) [EOL] self . assertTrue ( all ( t in actual_tasks for t in expected_tasks ) ) [EOL] [EOL] task1_tested = False [EOL] task2_tested = False [EOL] for taskstatus in results : [EOL] if taskstatus . task == self . task1 : [EOL] self . assertTrue ( taskstatus . effort_date == self . firstdate ) [EOL] task1_tested = True [EOL] elif taskstatus . task == self . task2 : [EOL] self . assertTrue ( taskstatus . effort_date == self . firstdate ) [EOL] task2_tested = True [EOL] self . assertTrue ( all ( [ task1_tested , task2_tested ] ) ) [EOL] [EOL] def test__get_active_taskstatus__done__latest_taskstatus ( self ) : [EOL] new_date = timezone . datetime ( [number] , [number] , [number] ) [EOL] for i in range ( [number] ) : [EOL] task2_status = KippoTaskStatus ( task = self . task2 , state = self . done_column_name , effort_date = new_date . date ( ) , estimate_days = [number] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] task2_status . save ( ) [EOL] new_date += datetime . timedelta ( days = [number] ) [EOL] [EOL] [comment] [EOL] results , has_estimates = self . project . get_active_taskstatus ( ) [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] self . assertEqual ( results [ [number] ] , self . task1_status2 ) [EOL] [EOL] def test_related_github_repositories ( self ) : [EOL] assert self . repository [EOL] assert self . task1 . project == self . project [EOL] assert self . task1 . github_issue_html_url [EOL] assert self . repository . html_url [EOL] expected = [ self . repository ] [EOL] actual = list ( self . project . related_github_repositories ( ) ) [EOL] self . assertEqual ( actual , expected ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 $typing.list$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 $typing.list$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.list$ 0 0
	0
from typing import Generator , Any , Dict , List , DefaultDict , Counter , Set [EOL] import logging [EOL] import models [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import collections [EOL] [docstring] [EOL] import datetime [EOL] import logging [EOL] from collections import Counter , defaultdict [EOL] from math import pi [EOL] from typing import Dict , List [EOL] [EOL] from bokeh . embed import components [EOL] from bokeh . models import Legend [EOL] from bokeh . palettes import all_palettes [EOL] from bokeh . plotting import figure [EOL] from bokeh . resources import CDN [EOL] from django . db . models import Count , Sum , Value [EOL] from django . db . models . functions import Coalesce [EOL] from django . utils import timezone [EOL] from tasks . models import KippoTaskStatus [EOL] [EOL] from . . exceptions import ProjectDatesError , TaskStatusError [EOL] from . . models import KippoProject [EOL] [EOL] TUESDAY_WEEKDAY = [number] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def _get_target_search_dates ( project , current_date = None , representative_day = TUESDAY_WEEKDAY ) : [EOL] [docstring] [EOL] assert project . start_date [EOL] [comment] [EOL] search_dates = [ ] [EOL] start_date_calendar_info = project . start_date . isocalendar ( ) [EOL] start_date_year , start_date_week , _ = start_date_calendar_info [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] initial_week_start_date = datetime . datetime . strptime ( f"{ start_date_year } [string] { start_date_week - [number] } [string] { representative_day }" , [string] ) . date ( ) [EOL] current_week_start_date = initial_week_start_date [EOL] logger . debug ( f" [string] { representative_day } [string] { initial_week_start_date }" ) [EOL] assert current_week_start_date <= project . target_date [EOL] while current_week_start_date <= project . target_date : [EOL] search_dates . append ( current_week_start_date ) [EOL] last_week_start_date = current_week_start_date [EOL] current_week_start_date += datetime . timedelta ( days = [number] ) [EOL] if last_week_start_date < current_date < current_week_start_date : [EOL] [comment] [EOL] search_dates . append ( current_date ) [EOL] if project . target_date not in search_dates : [EOL] search_dates . append ( project . target_date ) [EOL] return search_dates [EOL] [EOL] [EOL] def get_project_weekly_effort ( project , current_date = None , representative_day = TUESDAY_WEEKDAY ) : [EOL] [docstring] [EOL] if not current_date : [EOL] current_date = timezone . now ( ) . date ( ) [EOL] elif isinstance ( current_date , datetime . datetime ) : [EOL] current_date = current_date . date ( ) [EOL] [EOL] if not project . start_date or not project . target_date : [EOL] raise ProjectDatesError ( f"{ project . name } [string] { project . start_date } [string] { project . target_date }" ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] search_dates = _get_target_search_dates ( project , current_date , representative_day ) [EOL] active_task_states = project . columnset . get_active_column_names ( ) [EOL] [EOL] all_status_entries = defaultdict ( list ) [EOL] previous_status_entries = [ ] [EOL] for current_week_start_date in search_dates : [EOL] logger . debug ( f" [string] { current_week_start_date } [string] " ) [EOL] if current_week_start_date <= current_date : [EOL] target_kippotaskstatus_ids = ( KippoTaskStatus . objects . filter ( task__github_issue_api_url__isnull = False , task__project = project , effort_date__lte = current_week_start_date , ) . order_by ( [string] , [string] ) . distinct ( [string] ) . values_list ( [string] , flat = True ) ) [EOL] [EOL] [comment] [EOL] previous_status_entries = ( KippoTaskStatus . objects . filter ( pk__in = target_kippotaskstatus_ids , state__in = active_task_states ) . values ( [string] , [string] , [string] ) . annotate ( task_count = Count ( [string] ) , estimate_days_sum = Coalesce ( Sum ( [string] ) , Value ( [number] ) ) ) ) [EOL] all_status_entries [ current_week_start_date ] = list ( previous_status_entries ) [EOL] else : [EOL] all_status_entries [ current_week_start_date ] = [ ] [EOL] logger . debug ( f" [string] { current_week_start_date } [string] { len ( previous_status_entries ) }" ) [EOL] [EOL] if not all_status_entries : [EOL] raise TaskStatusError ( f" [string] { active_task_states } [string] { project . name } [string] " f"{ project . start_date } [string] { project . target_date }" ) [EOL] [EOL] return all_status_entries [EOL] [EOL] [EOL] def prepare_project_plot_data ( project , current_date = None ) : [EOL] [docstring] [EOL] end_date = None [EOL] data = defaultdict ( list ) [EOL] burndown_line = None [EOL] date_str_format = [string] [EOL] if project . start_date and project . target_date and project . allocated_staff_days : [EOL] start_date = project . start_date . strftime ( date_str_format ) [comment] [EOL] data [ [string] ] . append ( start_date ) [EOL] end_date = project . target_date . strftime ( date_str_format ) [comment] [EOL] start_staff_days = project . allocated_staff_days [EOL] burndown_line_x = [ start_date , end_date ] [EOL] burndown_line_y = [ start_staff_days , [number] ] [EOL] burndown_line = [ burndown_line_x , burndown_line_y ] [EOL] [EOL] logger . info ( f" [string] { project . name } [string] { current_date } [string] " ) [EOL] date_keyed_status_entries = get_project_weekly_effort ( project , current_date ) [EOL] all_assignees = set ( ) [EOL] for values in date_keyed_status_entries . values ( ) : [EOL] for entry in values : [EOL] assignee = entry [ [string] ] [EOL] all_assignees . add ( assignee ) [EOL] [EOL] logger . info ( f" [string] { len ( date_keyed_status_entries ) } [string] " ) [EOL] for effort_date_object in sorted ( date_keyed_status_entries . keys ( ) ) : [EOL] status_entries = date_keyed_status_entries [ effort_date_object ] [EOL] effort_date = effort_date_object . strftime ( date_str_format ) [EOL] if effort_date not in data [ [string] ] : [EOL] data [ [string] ] . append ( effort_date ) [EOL] logger . debug ( f" [string] { effort_date }" ) [EOL] period_assignee_estimate_days = Counter ( ) [EOL] for entry in status_entries : [EOL] logger . debug ( f" [string] { entry }" ) [EOL] assignee = entry [ [string] ] [EOL] estimate_days = entry [ [string] ] [EOL] period_assignee_estimate_days [ assignee ] += estimate_days [EOL] [EOL] missing_assignees = all_assignees - set ( period_assignee_estimate_days . keys ( ) ) [EOL] for missing_assignee in missing_assignees : [EOL] period_assignee_estimate_days [ missing_assignee ] = [number] [EOL] [EOL] [comment] [EOL] for assignee , estimate_days in period_assignee_estimate_days . items ( ) : [EOL] data [ assignee ] . append ( estimate_days ) [EOL] [EOL] for k , values in data . items ( ) : [EOL] logger . debug ( f' [string] { k } [string] { len ( values ) }' ) [EOL] [EOL] return data , sorted ( list ( all_assignees ) ) , burndown_line [EOL] [EOL] [EOL] def prepare_burndown_chart_components ( project , current_date = None ) : [EOL] [docstring] [EOL] logger . info ( f" [string] { project . name } [string] { current_date } [string] " ) [EOL] data , assignees , burndown_line = prepare_project_plot_data ( project , current_date ) [EOL] [EOL] minimum_palette_count = [number] [comment] [EOL] required_color_count = len ( assignees ) [EOL] color_count_index = required_color_count [EOL] if required_color_count < minimum_palette_count : [EOL] color_count_index = minimum_palette_count [EOL] [EOL] colors = all_palettes [ [string] ] [ color_count_index ] [ : required_color_count ] [EOL] [EOL] logger . info ( f" [string] { project . name }" ) [EOL] [comment] [EOL] max_effort_days = [number] [EOL] if burndown_line : [EOL] _ , burndown_line_y_values = burndown_line [EOL] burndown_line_y = burndown_line_y_values [ [number] ] [comment] [EOL] if burndown_line_y > max_effort_days : [EOL] max_effort_days = burndown_line_y [EOL] assignee_keys = ( k for k in data . keys ( ) if k != [string] ) [EOL] for assignee_key in assignee_keys : [EOL] assignee_max = max ( data [ assignee_key ] ) [EOL] if assignee_max > max_effort_days : [EOL] max_effort_days = assignee_max [EOL] bufferred_max_effort_days = int ( max_effort_days * [number] ) [EOL] p = figure ( x_range = data [ [string] ] , y_range = ( [number] , bufferred_max_effort_days ) , plot_height = [number] , plot_width = [number] , title = f" [string] { project . name } [string] " , toolbar_location = None , tools = [string] , tooltips = [string] , ) [EOL] if burndown_line : [EOL] p . line ( * burndown_line , line_width = [number] , line_color = [string] , line_dash = [string] ) [EOL] assignee_effort_per_day_stacked = p . vbar_stack ( assignees , x = [string] , width = [number] , color = colors , source = data ) [EOL] legend_items = [ ] [EOL] for idx , assignee_name in enumerate ( assignees ) : [EOL] legend_items . append ( ( assignee_name , [ assignee_effort_per_day_stacked [ idx ] ] ) ) [EOL] legend = Legend ( items = legend_items , location = ( [number] , - [number] ) ) [EOL] p . add_layout ( legend , [string] ) [EOL] [EOL] p . y_range . start = [number] [EOL] p . yaxis . axis_label = [string] [EOL] p . xaxis . axis_label = [string] [EOL] p . xaxis . major_label_orientation = pi / [number] [EOL] p . x_range . range_padding = [number] [EOL] p . xgrid . grid_line_color = None [EOL] p . axis . minor_tick_line_color = None [EOL] p . outline_line_color = None [EOL] [EOL] script , div = components ( p , CDN ) [EOL] return script , div [EOL]	builtins.tuple$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import builtins [EOL] from typing import List , Type , Any [EOL] import kippo [EOL] import typing [EOL] import json [EOL] [EOL] from django . conf import settings [EOL] from django . contrib import admin [EOL] from django . forms import widgets [EOL] [EOL] [EOL] class UserCreatedBaseModelAdmin ( admin . ModelAdmin ) : [EOL] def save_model ( self , request , obj , form , change ) : [EOL] if getattr ( obj , [string] , None ) is None : [EOL] obj . created_by = request . user [EOL] obj . updated_by = request . user [EOL] else : [EOL] obj . updated_by = request . user [EOL] obj . save ( ) [EOL] [EOL] def save_formset ( self , request , form , formset , change ) : [EOL] instances = formset . save ( commit = False ) [EOL] for obj in formset . deleted_objects : [EOL] obj . delete ( ) [EOL] for instance in instances : [EOL] if instance . id is None : [EOL] instance . created_by = request . user [comment] [EOL] [EOL] instance . updated_by = request . user [EOL] instance . save ( ) [EOL] formset . save_m2m ( ) [EOL] [EOL] [EOL] class AllowIsStaffAdminMixin : [EOL] def check_perm ( self , user_obj ) : [EOL] if not user_obj . is_active or user_obj . is_anonymous : [EOL] return False [EOL] if user_obj . is_superuser or user_obj . is_staff : [EOL] return True [EOL] return False [EOL] [EOL] def has_add_permission ( self , request ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_module_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] [EOL] class AllowIsStaffReadonlyMixin : [EOL] def check_perm ( self , user_obj ) : [EOL] if not user_obj . is_active or user_obj . is_anonymous : [EOL] return False [EOL] if user_obj . is_superuser or user_obj . is_staff : [EOL] return True [EOL] return False [EOL] [EOL] def has_add_permission ( self , request ) : [EOL] if not request . user . is_active or request . user . is_anonymous : [EOL] return False [EOL] if request . user . is_superuser : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] if not request . user . is_active or request . user . is_anonymous : [EOL] return False [EOL] if request . user . is_superuser : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] if not request . user . is_active or request . user . is_anonymous : [EOL] return False [EOL] if request . user . is_superuser : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_module_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] [EOL] class AllowIsSuperuserAdminMixin : [EOL] def check_perm ( self , user_obj ) : [EOL] if not user_obj . is_active or user_obj . is_anonymous : [EOL] return False [EOL] if user_obj . is_superuser : [EOL] return True [EOL] return False [EOL] [EOL] def has_add_permission ( self , request ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] def has_module_permission ( self , request , obj = None ) : [EOL] return self . check_perm ( request . user ) [EOL] [EOL] [EOL] class OrganizationTaskQuerysetModelAdminMixin : [EOL] def get_queryset ( self , request ) : [EOL] qs = super ( ) . get_queryset ( request ) [EOL] if request . user . is_superuser : [EOL] return qs [EOL] return qs . filter ( project__organization__in = request . user . organizations ) . order_by ( [string] ) . distinct ( ) [EOL] [EOL] [EOL] class OrganizationQuerysetModelAdminMixin : [EOL] def get_queryset ( self , request ) : [EOL] qs = super ( ) . get_queryset ( request ) [EOL] if request . user . is_superuser : [EOL] return qs [EOL] [comment] [EOL] return ( qs . filter ( organizationmembership__organization__in = request . user . organizations ) . order_by ( [string] ) . distinct ( ) ) [EOL] [EOL] [EOL] class KippoAdminSite ( admin . AdminSite ) : [EOL] [comment] [EOL] site_header = settings . SITE_HEADER [EOL] site_title = settings . SITE_TITLE [EOL] [EOL] [EOL] admin_site = KippoAdminSite ( name = [string] ) [EOL] [EOL] [EOL] class PrettyJSONWidget ( widgets . Textarea ) : [EOL] def format_value ( self , value ) : [EOL] try : [EOL] value = json . dumps ( json . loads ( value ) , indent = [number] , ensure_ascii = False , sort_keys = True ) [EOL] except json . JSONDecodeError : [EOL] return super ( PrettyJSONWidget , self ) . format_value ( value ) [EOL] [comment] [EOL] row_lengths = [ len ( r ) for r in value . split ( [string] ) ] [EOL] self . attrs [ [string] ] = min ( max ( len ( row_lengths ) + [number] , [number] ) , [number] ) [EOL] self . attrs [ [string] ] = min ( max ( max ( row_lengths ) + [number] , [number] ) , [number] ) [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
from django . apps import AppConfig [EOL] from django . contrib . admin . apps import AdminConfig [EOL] [EOL] [EOL] class CommonConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] [EOL] class KippoAdminConfig ( AdminConfig ) : [EOL] default_site = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Optional , List , Any , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import List , Optional [EOL] [EOL] from accounts . models import EmailDomain , KippoOrganization , KippoUser , OrganizationMembership , PersonalHoliday [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] from octocat . models import GithubAccessToken , GithubRepository [EOL] from projects . models import KippoProject , ProjectColumnSet [EOL] from tasks . models import KippoTask [EOL] [EOL] from . admin import KippoAdminSite [EOL] [EOL] DEFAULT_FIXTURES = [ [string] , [string] , [string] ] [EOL] [EOL] DEFAULT_COLUMNSET_PK = [string] [EOL] [EOL] [EOL] def setup_basic_project ( organization = None , repository_name = [string] , github_project_api_id = [string] , column_info = None ) : [EOL] if not column_info : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] column_info = [ { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] [EOL] [EOL] created_objects = { } [EOL] user = KippoUser ( username = [string] , github_login = [string] , password = [string] , email = [string] , is_staff = True ) [EOL] user . save ( ) [EOL] created_objects [ [string] ] = user [EOL] if not organization : [EOL] organization = KippoOrganization ( name = [string] , github_organization_name = [string] , day_workhours = [number] , created_by = user , updated_by = user ) [EOL] organization . save ( ) [EOL] created_objects [ [string] ] = organization [EOL] [EOL] email_domain = EmailDomain ( organization = organization , domain = [string] , is_staff_domain = True , created_by = user , updated_by = user ) [EOL] email_domain . save ( ) [EOL] created_objects [ [string] ] = email_domain [EOL] [EOL] orgmembership = OrganizationMembership ( user = user , organization = organization , is_developer = True , created_by = user , updated_by = user ) [EOL] orgmembership . save ( ) [EOL] [EOL] access_token = GithubAccessToken ( organization = organization , token = [string] , created_by = user , updated_by = user ) [EOL] access_token . save ( ) [EOL] created_objects [ [string] ] = access_token [EOL] [EOL] default_columnset = ProjectColumnSet . objects . get ( pk = DEFAULT_COLUMNSET_PK ) [EOL] [EOL] kippo_project = KippoProject ( organization = organization , name = [string] , github_project_html_url = f" [string] { organization . github_organization_name } [string] " , github_project_api_url = f" [string] { github_project_api_id }" , columnset = default_columnset , column_info = column_info , created_by = user , updated_by = user , ) [EOL] kippo_project . save ( ) [EOL] created_objects [ [string] ] = kippo_project [EOL] [EOL] github_project2_api_id = [string] [EOL] kippo_project2 = KippoProject ( organization = organization , name = [string] , github_project_html_url = f" [string] { organization . github_organization_name } [string] " , github_project_api_url = f" [string] { github_project2_api_id }" , columnset = default_columnset , column_info = column_info , created_by = user , updated_by = user , ) [EOL] kippo_project2 . save ( ) [EOL] created_objects [ [string] ] = kippo_project2 [EOL] [EOL] github_repo = GithubRepository ( organization = organization , name = repository_name , api_url = f" [string] { organization . github_organization_name } [string] { repository_name }" , html_url = f" [string] { organization . github_organization_name } [string] { repository_name }" , created_by = user , updated_by = user , ) [EOL] github_repo . save ( ) [EOL] created_objects [ [string] ] = github_repo [EOL] [EOL] kippo_task = KippoTask ( title = [string] , category = [string] , project = kippo_project , assignee = user , created_by = user , updated_by = user , github_issue_html_url = f" [string] { organization . github_organization_name } [string] { repository_name } [string] " , github_issue_api_url = f" [string] { organization . github_organization_name } [string] { repository_name } [string] " , ) [EOL] kippo_task . save ( ) [EOL] created_objects [ [string] ] = kippo_task [EOL] [EOL] return created_objects [EOL] [EOL] [EOL] class MockRequest : [EOL] pass [EOL] [EOL] [EOL] class IsStaffModelAdminTestCaseBase ( TestCase ) : [EOL] fixtures = [ [string] , [string] , [string] ] [EOL] [EOL] def setUp ( self ) : [EOL] self . github_manager = KippoUser . objects . get ( username = [string] ) [EOL] self . organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] self . other_organization = KippoOrganization . objects . create ( name = [string] , github_organization_name = [string] , created_by = self . github_manager , updated_by = self . github_manager , ) [EOL] [EOL] [comment] [EOL] self . superuser_username = [string] [EOL] self . superuser_no_org = KippoUser . objects . create ( username = self . superuser_username , is_superuser = True , is_staff = True ) [EOL] self . super_user_request = MockRequest ( ) [EOL] self . super_user_request . user = self . superuser_no_org [EOL] [EOL] [comment] [EOL] self . staffuser_username = [string] [EOL] self . staffuser_with_org = KippoUser . objects . create ( username = self . staffuser_username , is_superuser = False , is_staff = True ) [EOL] PersonalHoliday . objects . create ( user = self . staffuser_with_org , day = ( timezone . now ( ) + timezone . timedelta ( days = [number] ) ) . date ( ) ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = self . staffuser_with_org , organization = self . organization , created_by = self . github_manager , updated_by = self . github_manager , is_developer = True , ) [EOL] membership . save ( ) [EOL] [EOL] self . staff_user_request = MockRequest ( ) [EOL] self . staff_user_request . user = self . staffuser_with_org [EOL] [EOL] [comment] [EOL] self . otherstaffuser_username = [string] [EOL] self . otherstaffuser_with_org = KippoUser . objects . create ( username = self . otherstaffuser_username , is_superuser = False , is_staff = True ) [EOL] PersonalHoliday . objects . create ( user = self . otherstaffuser_with_org , day = ( timezone . now ( ) + timezone . timedelta ( days = [number] ) ) . date ( ) ) [EOL] [comment] [EOL] membership = OrganizationMembership ( user = self . otherstaffuser_with_org , organization = self . other_organization , created_by = self . github_manager , updated_by = self . github_manager ) [EOL] membership . save ( ) [EOL] [EOL] self . otherstaff_user_request = MockRequest ( ) [EOL] self . otherstaff_user_request . user = self . otherstaffuser_with_org [EOL] [EOL] self . site = KippoAdminSite ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import kippo [EOL] import typing [EOL] from django . conf import settings [EOL] from django . db import models [EOL] [EOL] [EOL] class UserCreatedBaseModel ( models . Model ) : [EOL] created_by = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , on_delete = models . SET_NULL , editable = False , related_name = [string] ) [EOL] updated_by = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , on_delete = models . SET_NULL , editable = False , related_name = [string] ) [EOL] created_datetime = models . DateTimeField ( auto_now_add = True , editable = False ) [EOL] updated_datetime = models . DateTimeField ( auto_now = True , editable = False ) [EOL] closed_datetime = models . DateTimeField ( editable = False , null = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0