from typing import Any , Type , Tuple , Dict [EOL] import x509_pki [EOL] import api [EOL] import typing [EOL] [docstring] [EOL] [EOL] import uuid [EOL] from django . contrib . auth import password_validation [EOL] from rest_framework import serializers [EOL] [EOL] from x509_pki . models import Certificate , DistinguishedName [EOL] [EOL] [EOL] class DistinguishedNameSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] model = DistinguishedName [EOL] [EOL] [EOL] class CertificateSerializer ( serializers . ModelSerializer ) : [EOL] dn = DistinguishedNameSerializer ( ) [EOL] passphrase_in = serializers . CharField ( max_length = [number] , required = False , allow_null = True , allow_blank = True ) [EOL] passphrase_out = serializers . CharField ( max_length = [number] , required = False , allow_null = True , allow_blank = True ) [EOL] passphrase_out_confirmation = serializers . CharField ( max_length = [number] , required = False , allow_null = True , allow_blank = True ) [EOL] [EOL] class Meta : [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] model = Certificate [EOL] extra_kwargs = { [string] : { [string] : True } , [string] : { [string] : True } , [string] : { [string] : True } } [EOL] [EOL] def validate_passphrase_out ( self , passphrase_out ) : [EOL] if passphrase_out : [EOL] password_validation . validate_password ( passphrase_out , self . instance ) [EOL] return passphrase_out [EOL] return None [EOL] [EOL] def validate_passphrase_in ( self , passphrase_in ) : [EOL] if passphrase_in : [EOL] if not self . initial_data . get ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] parent = Certificate . objects . get ( pk = self . initial_data . get ( [string] ) ) [EOL] parent . passphrase_in = passphrase_in [EOL] if not parent . is_passphrase_valid ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return passphrase_in [EOL] return None [EOL] [EOL] def validate_passphrase_out_confirmation ( self , passphrase_out_confirmation ) : [EOL] if passphrase_out_confirmation : [EOL] passphrase_out = self . initial_data . get ( [string] ) [EOL] if passphrase_out and passphrase_out_confirmation and passphrase_out != passphrase_out_confirmation : [EOL] raise serializers . ValidationError ( [string] ) [EOL] password_validation . validate_password ( passphrase_out_confirmation , self . instance ) [EOL] return passphrase_out_confirmation [EOL] return None [EOL] [EOL] def validate ( self , data ) : [EOL] [EOL] shortname = data . get ( [string] ) [EOL] cert_type = data . get ( [string] ) [EOL] [EOL] if Certificate . objects . filter ( shortname = shortname , type = cert_type , revoked_uuid = [number] ) . count ( ) > [number] : [EOL] raise serializers . ValidationError ( dict ( Certificate . TYPES ) [ cert_type ] + [string] + shortname + [string] ) [EOL] [EOL] return data [EOL] [EOL] def create ( self , validated_data ) : [EOL] dn_data = validated_data . pop ( [string] ) [EOL] [EOL] dn = DistinguishedName . objects . create ( ** dn_data ) [EOL] certificate = Certificate . objects . create ( dn = dn , ** validated_data ) [EOL] return certificate [EOL] [EOL] [EOL] class CertificateRevokeSerializer ( serializers . ModelSerializer ) : [EOL] passphrase_in = serializers . CharField ( max_length = [number] , required = True ) [EOL] [EOL] class Meta : [EOL] fields = ( [string] , ) [EOL] model = Certificate [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] def validate_passphrase_in ( self , passphrase_in ) : [EOL] if passphrase_in : [EOL] self . instance . parent . passphrase_in = passphrase_in [EOL] if not self . instance . parent . is_passphrase_valid ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return passphrase_in [EOL] return None [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] instance . passphrase_in = validated_data [ [string] ] [EOL] instance . delete ( ) [EOL] return instance [EOL] [EOL] [EOL] class CertificateCRLSerializer ( serializers . ModelSerializer ) : [EOL] passphrase_in = serializers . CharField ( max_length = [number] , required = True ) [EOL] [EOL] class Meta : [EOL] fields = ( [string] , ) [EOL] model = Certificate [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] def validate_passphrase_in ( self , passphrase_in ) : [EOL] if passphrase_in : [EOL] self . instance . passphrase_in = passphrase_in [EOL] if not self . instance . is_passphrase_valid ( ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return passphrase_in [EOL] return None [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] instance . passphrase_in = validated_data [ [string] ] [EOL] instance . generate_crl ( ) [EOL] return instance [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[x509_pki.models.Certificate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $api.serializers.DistinguishedNameSerializer$ 0 0 0 0 0 $typing.Type[api.serializers.CertificateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.CertificateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.CertificateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[x509_pki.models.Certificate]$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.CertificateRevokeSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Type[x509_pki.models.Certificate]$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[api.serializers.CertificateCRLSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Type[x509_pki.models.Certificate]$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from django . core . exceptions import ValidationError as DjangoValidationError [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class TrapDjangoValidationErrorCreateMixin ( object ) : [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] try : [EOL] serializer . save ( ) [EOL] except DjangoValidationError as detail : [EOL] raise serializers . ValidationError ( detail . messages ) [EOL] [EOL] [EOL] class TrapDjangoValidationErrorUpdateMixin ( object ) : [EOL] [EOL] def perform_update ( self , serializer ) : [EOL] try : [EOL] serializer . save ( ) [EOL] except DjangoValidationError as detail : [EOL] raise serializers . ValidationError ( detail . messages ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[docstring] [EOL] [EOL] from rest_framework import permissions [EOL] [EOL] [EOL] class BounCAUserPermissions ( permissions . BasePermission ) : [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] if view . action == [string] : [EOL] return request . user . is_admin [EOL] elif view . action == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if view . action == [string] : [EOL] return request . user . is_admin or obj == request . user [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf . urls import include , url [EOL] from rest_auth . registration . urls import urlpatterns as urlpatterns_registration [EOL] from rest_auth . urls import urlpatterns as urlpatterns_rest_auth [EOL] from rest_framework_swagger . views import get_swagger_view [EOL] [EOL] from . views import ( CertificateCRLFileView , CertificateCRLView , CertificateFilesView , CertificateInfoView , CertificateInstanceView , CertificateListView , CertificateRevokeView ) [EOL] [EOL] [EOL] urlpatterns_apiv1 = [ url ( [string] , CertificateFilesView . as_view ( ) , name = [string] ) , url ( [string] , CertificateCRLView . as_view ( ) , name = [string] ) , url ( [string] , CertificateCRLFileView . as_view ( ) , name = [string] ) , url ( [string] , CertificateInstanceView . as_view ( ) , name = [string] ) , url ( [string] , CertificateInfoView . as_view ( ) , name = [string] ) , url ( [string] , CertificateRevokeView . as_view ( ) , name = [string] ) , url ( [string] , CertificateListView . as_view ( ) , name = [string] ) , url ( [string] , include ( urlpatterns_rest_auth ) ) , url ( [string] , include ( urlpatterns_registration ) ) ] [EOL] [EOL] schema_view = get_swagger_view ( title = [string] ) [EOL] [EOL] urlpatterns = [ url ( [string] , include ( urlpatterns_apiv1 ) ) , url ( [string] , schema_view ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import random [EOL] import string [EOL] [EOL] [EOL] def generate_path ( certificate ) : [EOL] prefix_path = [string] [EOL] if certificate . parent and certificate . pk != certificate . parent . pk : [EOL] prefix_path = generate_path ( certificate . parent ) [EOL] return prefix_path + [string] + str ( certificate . shortname ) [EOL] [EOL] [EOL] def random_string_generator ( size = [number] , chars = string . ascii_uppercase + string . digits ) : [EOL] return [string] . join ( random . choice ( chars ) for _ in range ( size ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import subprocess [EOL] from django . template import loader [EOL] from subprocess import CalledProcessError [EOL] [EOL] from certificate_engine . decorators import generate_key_path , write_passphrase_files [EOL] from certificate_engine . types import CertificateTypes [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ generate_key_path def generate_files ( certificate , openssl_cnf_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] os . makedirs ( root_path + [string] , exist_ok = True ) [EOL] if certificate . type == CertificateTypes . INTERMEDIATE : [EOL] os . makedirs ( root_path + [string] , exist_ok = True ) [EOL] os . makedirs ( root_path + [string] , exist_ok = True ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] os . makedirs ( root_path + [string] , exist_ok = True ) [EOL] os . makedirs ( root_path + [string] , exist_ok = True ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] open ( root_path + [string] , [string] ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] c = { [string] : certificate , [string] : key_path , [string] : root_path , } [EOL] openssl_cnf = loader . render_to_string ( openssl_cnf_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( openssl_cnf ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_key ( certificate , generate_key_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] key_name = certificate . shortname [EOL] [EOL] c = { [string] : key_name , [string] : key_path , [string] : [string] , } [EOL] generate_ca_key_script = loader . render_to_string ( generate_key_template_name , c ) [EOL] with open ( root_path + [string] % (key_name) , [string] ) as f : [EOL] f . write ( generate_ca_key_script ) [EOL] os . chmod ( root_path + [string] % (key_name) , [number] ) [EOL] [EOL] returncode = subprocess . check_output ( [ root_path + [string] % (key_name) ] ) [EOL] [EOL] return returncode [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_cert ( certificate , generate_cert_template_name , key_path = [string] , root_path = [string] ) : [EOL] key_name = certificate . shortname [EOL] [EOL] c = { [string] : key_name , [string] : key_path , [string] : [string] , } [EOL] generate_ca_cert_script = loader . render_to_string ( generate_cert_template_name , c ) [EOL] with open ( root_path + [string] % (key_name) , [string] ) as f : [EOL] f . write ( generate_ca_cert_script ) [EOL] os . chmod ( root_path + [string] % (key_name) , [number] ) [EOL] [EOL] subprocess . check_output ( [ root_path + [string] % (key_name) , str ( certificate . days_valid ) , certificate . dn . subj ] ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_csr ( certificate , generate_csr_template_name , key_path = [string] , root_path = [string] ) : [EOL] key_name = certificate . shortname [EOL] [EOL] c = { [string] : key_name , [string] : key_path , [string] : [string] , } [EOL] generate_csr_script = loader . render_to_string ( generate_csr_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_csr_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] [EOL] subprocess . check_output ( [ root_path + [string] , certificate . dn . subj ] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def sign_cert ( certificate , sign_cert_template_name , key_path = [string] , root_path = [string] ) : [EOL] key_name = certificate . shortname [EOL] [EOL] c = { [string] : key_name , [string] : certificate , [string] : key_path , [string] : [string] , } [EOL] sign_certificate_script = loader . render_to_string ( sign_cert_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( sign_certificate_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] [EOL] subprocess . check_output ( [ root_path + [string] , str ( certificate . days_valid ) ] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def generate_server_cert_creation_script ( certificate , generate_signed_cert_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] c = { [string] : certificate , [string] : [string] , [string] : key_path , [string] : [string] , [string] : [string] } [EOL] generate_signed_certificate_script = loader . render_to_string ( generate_signed_cert_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_signed_certificate_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def generate_client_cert_creation_script ( certificate , generate_signed_cert_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] c = { [string] : certificate , [string] : [string] , [string] : key_path , [string] : [string] , [string] : [string] } [EOL] generate_signed_certificate_script = loader . render_to_string ( generate_signed_cert_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_signed_certificate_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def generate_generic_cert_revoke_script ( certificate , generate_cert_revoke_template_name , script_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] c = { [string] : certificate , [string] : key_path , [string] : script_name } [EOL] generate_signed_certificate_script = loader . render_to_string ( generate_cert_revoke_template_name , c ) [EOL] with open ( root_path + [string] % (script_name) , [string] ) as f : [EOL] f . write ( generate_signed_certificate_script ) [EOL] os . chmod ( root_path + [string] % (script_name) , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def generate_generic_crl_file_script ( certificate , generate_crl_file_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] c = { [string] : certificate , [string] : key_path , } [EOL] generate_signed_certificate_script = loader . render_to_string ( generate_crl_file_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_signed_certificate_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] def generate_server_cert_revoke_script ( certificate , generate_cert_revoke_template_name ) : [EOL] return generate_generic_cert_revoke_script ( certificate , generate_cert_revoke_template_name , [string] ) [EOL] [EOL] [EOL] def generate_client_cert_revoke_script ( certificate , generate_cert_revoke_template_name ) : [EOL] return generate_generic_cert_revoke_script ( certificate , generate_cert_revoke_template_name , [string] ) [EOL] [EOL] [EOL] @ generate_key_path def generate_certificate_info_script ( certificate , generate_certificate_info_template_name , key_path = [string] , root_path = [string] ) : [EOL] [EOL] c = { [string] : certificate , [string] : key_path } [EOL] generate_certificate_info_certificate_script = loader . render_to_string ( generate_certificate_info_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_certificate_info_certificate_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def generate_test_passphrase_script ( certificate , generate_test_passphrase_template_name , root_path = [string] , ** kwargs ) : [EOL] [EOL] c = { [string] : certificate } [EOL] generate_test_passphrase_script = loader . render_to_string ( generate_test_passphrase_template_name , c ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( generate_test_passphrase_script ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] return [number] [EOL] [EOL] [EOL] def generate_root_ca ( certificate ) : [EOL] openssl_cnf_template_name = [string] [EOL] generate_key_template_name = [string] [EOL] generate_cert_template_name = [string] [EOL] generate_cert_info_template_name = [string] [EOL] generate_test_passphrase_template_name = [string] [EOL] generate_crl_file_template_name = [string] [EOL] [EOL] logger . info ( [string] ) [EOL] generate_files ( certificate , openssl_cnf_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_key ( certificate , generate_key_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_cert ( certificate , generate_cert_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_certificate_info_script ( certificate , generate_cert_info_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_test_passphrase_script ( certificate , generate_test_passphrase_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_generic_crl_file_script ( certificate , generate_crl_file_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] return [number] [EOL] [EOL] [EOL] def generate_intermediate_ca ( certificate ) : [EOL] openssl_cnf_template_name = [string] [EOL] generate_key_template_name = [string] [EOL] generate_csr_template_name = [string] [EOL] generate_signcert_template_name = [string] [EOL] generate_signed_cert_template_name = [string] [EOL] generate_cert_revoke_template_name = [string] [EOL] generate_cert_info_template_name = [string] [EOL] generate_test_passphrase_template_name = [string] [EOL] generate_crl_file_template_name = [string] [EOL] [EOL] logger . warning ( [string] ) [EOL] returncode = generate_files ( certificate , openssl_cnf_template_name ) [EOL] if returncode != [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_key ( certificate , generate_key_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_csr ( certificate , generate_csr_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] sign_cert ( certificate , generate_signcert_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_server_cert_creation_script ( certificate , generate_signed_cert_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_client_cert_creation_script ( certificate , generate_signed_cert_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_server_cert_revoke_script ( certificate , generate_cert_revoke_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_client_cert_revoke_script ( certificate , generate_cert_revoke_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] generate_generic_crl_file_script ( certificate , generate_crl_file_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_certificate_info_script ( certificate , generate_cert_info_template_name ) [EOL] [EOL] logger . info ( [string] ) [EOL] generate_test_passphrase_script ( certificate , generate_test_passphrase_template_name ) [EOL] [EOL] logger . warning ( [string] ) [EOL] return returncode [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_server_cert ( certificate , key_path = [string] , root_path = [string] ) : [EOL] openssl_cnf_template_name = [string] [EOL] [EOL] c = { [string] : certificate , [string] : key_path , [string] : root_path , } [EOL] openssl_cnf = loader . render_to_string ( openssl_cnf_template_name , c ) [EOL] with open ( root_path + [string] % certificate . shortname , [string] ) as f : [EOL] f . write ( openssl_cnf ) [EOL] [EOL] logger . warning ( [string] ) [EOL] subprocess . check_output ( [ root_path + [string] , certificate . shortname , str ( certificate . days_valid ) , certificate . dn . subj , [string] . join ( certificate . dn . subjectAltNames ) ] ) [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_client_cert ( certificate , key_path = [string] , root_path = [string] ) : [EOL] openssl_cnf_template_name = [string] [EOL] [EOL] c = { [string] : certificate , [string] : key_path , [string] : root_path , } [EOL] openssl_cnf = loader . render_to_string ( openssl_cnf_template_name , c ) [EOL] with open ( root_path + [string] % certificate . shortname , [string] ) as f : [EOL] f . write ( openssl_cnf ) [EOL] [EOL] logger . warning ( [string] ) [EOL] subprocess . check_output ( [ root_path + [string] , certificate . shortname , str ( certificate . days_valid ) , certificate . dn . subj , [string] . join ( certificate . dn . subjectAltNames ) ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def revoke_server_cert ( certificate , root_path = [string] , ** kwargs ) : [EOL] logger . warning ( [string] ) [EOL] subprocess . check_output ( [ root_path + [string] , certificate . shortname , str ( certificate . slug_revoked_at ) ] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def revoke_client_cert ( certificate , root_path = [string] , ** kwargs ) : [EOL] logger . warning ( [string] ) [EOL] subprocess . check_output ( [ root_path + [string] , certificate . shortname , str ( certificate . slug_revoked_at ) ] ) [EOL] return [number] [EOL] [EOL] [EOL] @ generate_key_path def get_certificate_info ( certificate , key_path = [string] , root_path = [string] , ** kwargs ) : [EOL] logger . warning ( [string] ) [EOL] path = certificate . shortname [EOL] if ( certificate . type == CertificateTypes . CLIENT_CERT ) : [EOL] path = [string] + certificate . shortname [EOL] if ( certificate . type == CertificateTypes . SERVER_CERT ) : [EOL] path = [string] + certificate . shortname [EOL] out = subprocess . check_output ( [ root_path + [string] , path ] ) [EOL] return out [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def is_passphrase_in_valid ( certificate , root_path = [string] , ** kwargs ) : [EOL] logger . warning ( [string] ) [EOL] path = certificate . shortname [EOL] if ( certificate . type == CertificateTypes . CLIENT_CERT ) : [EOL] path = [string] + certificate . shortname [EOL] if ( certificate . type == CertificateTypes . SERVER_CERT ) : [EOL] path = [string] + certificate . shortname [EOL] try : [EOL] subprocess . check_output ( [ root_path + [string] , path ] ) [EOL] return True [EOL] except CalledProcessError : [EOL] return False [EOL] [EOL] [EOL] @ generate_key_path @ write_passphrase_files def generate_crl_file ( certificate , key_path = [string] , root_path = [string] ) : [EOL] logger . warning ( [string] ) [EOL] subprocess . check_output ( [ root_path + [string] , certificate . shortname ] ) [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Loggerlogging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class CertificateEngineConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from django . conf import settings [EOL] [EOL] from certificate_engine . types import CertificateTypes [EOL] from certificate_engine . utils import generate_path , random_string_generator [EOL] [EOL] [EOL] class generate_key_path ( object ) : [EOL] [EOL] def __init__ ( self , f ) : [EOL] self . f = f [EOL] [EOL] def __call__ ( self , certificate , * args ) : [EOL] key_path = generate_path ( certificate . parent ) if \ [EOL] ( certificate . type == CertificateTypes . CLIENT_CERT or certificate . type == CertificateTypes . SERVER_CERT ) \ [EOL] else generate_path ( certificate ) [EOL] root_path = settings . CERTIFICATE_REPO_PATH + key_path + [string] [EOL] os . makedirs ( root_path , exist_ok = True ) [EOL] return self . f ( certificate , * args , key_path = key_path , root_path = root_path ) [EOL] [EOL] [EOL] class write_passphrase_files ( object ) : [EOL] [EOL] def __init__ ( self , f ) : [EOL] self . f = f [EOL] [EOL] def __call__ ( self , certificate , * args , key_path = [string] , root_path = [string] ) : [EOL] try : [EOL] if certificate . passphrase_out : [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( certificate . passphrase_out ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] else : [EOL] try : [EOL] os . remove ( root_path + [string] ) [EOL] except FileNotFoundError : [EOL] pass [EOL] [EOL] if certificate . passphrase_in : [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( certificate . passphrase_in ) [EOL] os . chmod ( root_path + [string] , [number] ) [EOL] else : [EOL] try : [EOL] os . remove ( root_path + [string] ) [EOL] except FileNotFoundError : [EOL] pass [EOL] [EOL] result = self . f ( certificate , * args , key_path = key_path , root_path = root_path ) [EOL] [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( random_string_generator ( ) ) [EOL] os . remove ( root_path + [string] ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( random_string_generator ( ) ) [EOL] os . remove ( root_path + [string] ) [EOL] [EOL] return result [EOL] except Exception as e : [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( random_string_generator ( ) ) [EOL] os . remove ( root_path + [string] ) [EOL] with open ( root_path + [string] , [string] ) as f : [EOL] f . write ( random_string_generator ( ) ) [EOL] os . remove ( root_path + [string] ) [EOL] raise e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Type [EOL] import certificate_engine [EOL] import typing [EOL] from cryptography . x509 . oid import NameOID [EOL] [EOL] [EOL] class CertificateTypes ( object ) : [EOL] ROOT = [string] [EOL] INTERMEDIATE = [string] [EOL] SERVER_CERT = [string] [EOL] CLIENT_CERT = [string] [EOL] OCSP = [string] [EOL] [EOL] [EOL] class CertificatePolicy ( object ) : [EOL] policy = { [string] : [ ( [string] , NameOID . COMMON_NAME ) , ] , [string] : [ ] , [string] : [ ( [string] , NameOID . COUNTRY_NAME ) , ( [string] , NameOID . STATE_OR_PROVINCE_NAME ) , ( [string] , NameOID . LOCALITY_NAME ) , ( [string] , NameOID . ORGANIZATION_NAME ) , ( [string] , NameOID . ORGANIZATIONAL_UNIT_NAME ) , ( [string] , NameOID . EMAIL_ADDRESS ) , ] } [EOL] [EOL] [EOL] class CertificateRootPolicy ( CertificatePolicy ) : [EOL] [comment] [EOL] policy = { [string] : [ ( [string] , NameOID . COUNTRY_NAME ) , ( [string] , NameOID . STATE_OR_PROVINCE_NAME ) , ( [string] , NameOID . ORGANIZATION_NAME ) , ( [string] , NameOID . COMMON_NAME ) ] , [string] : [ ] , [string] : [ ( [string] , NameOID . ORGANIZATIONAL_UNIT_NAME ) , ( [string] , NameOID . EMAIL_ADDRESS ) ] } [EOL] [EOL] [EOL] class CertificateIntermediatePolicy ( CertificatePolicy ) : [EOL] [comment] [EOL] policy = { [string] : [ ( [string] , NameOID . COMMON_NAME ) , ] , [string] : [ ( [string] , NameOID . COUNTRY_NAME ) , ( [string] , NameOID . STATE_OR_PROVINCE_NAME ) , ( [string] , NameOID . ORGANIZATION_NAME ) ] , [string] : [ ( [string] , NameOID . ORGANIZATIONAL_UNIT_NAME ) , ( [string] , NameOID . EMAIL_ADDRESS ) ] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] from typing import Union [EOL] import cryptography [EOL] import builtins [EOL] import typing [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives import serialization [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography . hazmat . primitives . asymmetric . rsa import RSAPrivateKey [EOL] [EOL] [EOL] [comment] [EOL] class Key ( object ) : [EOL] _key = None [EOL] [EOL] @ property def key ( self ) : [EOL] return self . _key [EOL] [EOL] def create_key ( self , key_size ) : [EOL] [docstring] [EOL] self . _key = rsa . generate_private_key ( public_exponent = [number] , key_size = key_size , backend = default_backend ( ) ) [EOL] return self [EOL] [EOL] def serialize ( self , passphrase = None , encoding = serialization . Encoding . PEM ) : [EOL] [docstring] [EOL] [EOL] if not self . _key : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] encryption = serialization . BestAvailableEncryption ( passphrase ) if passphrase else serialization . NoEncryption ( ) [EOL] return self . _key . private_bytes ( encoding = encoding , format = serialization . PrivateFormat . TraditionalOpenSSL , encryption_algorithm = encryption , ) [EOL] [EOL] def load ( self , pem , passphrase = None ) : [EOL] [docstring] [EOL] self . _key = serialization . load_pem_private_key ( pem , passphrase , backend = default_backend ( ) ) [EOL] return self [EOL] [EOL] @ staticmethod def check_passphrase ( pem , passphrase = None ) : [EOL] [docstring] [EOL] try : [EOL] serialization . load_pem_private_key ( pem , passphrase , backend = default_backend ( ) ) [EOL] return True [EOL] except ValueError as e : [EOL] if str ( e ) == [string] : [EOL] return False [EOL] raise e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Key'$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 $cryptography.hazmat.primitives.serialization.Encoding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[cryptography.hazmat.primitives.serialization.BestAvailableEncryption,cryptography.hazmat.primitives.serialization.NoEncryption]$ 0 0 0 0 0 $builtins.bytes$ 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.serialization.Encoding$ 0 $cryptography.hazmat.primitives.serialization.Encoding$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[cryptography.hazmat.primitives.serialization.BestAvailableEncryption,cryptography.hazmat.primitives.serialization.NoEncryption]$ 0 0 0 0 0 $'Key'$ 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey$ 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import x509_pki [EOL] import certificate_engine [EOL] import arrow [EOL] [comment] [EOL] from cryptography . x509 . oid import NameOID [EOL] from django . utils import timezone [EOL] [EOL] from certificate_engine . ssl . certificate import Certificate , PassPhraseError , PolicyError [EOL] from certificate_engine . ssl . key import Key [EOL] from certificate_engine . tests . helpers import CertificateTestCase [EOL] from certificate_engine . types import CertificateTypes [EOL] from x509_pki . tests . factories import CertificateFactory , DistinguishedNameFactory [EOL] [EOL] [EOL] class IntermediateCertificateTest ( CertificateTestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . root_key = Key ( ) . create_key ( [number] ) [EOL] subject = DistinguishedNameFactory ( countryName = [string] , stateOrProvinceName = [string] , organizationName = [string] ) [EOL] [EOL] cls . root_certificate = CertificateFactory ( dn = subject , expires_at = arrow . get ( timezone . now ( ) ) . shift ( days = + [number] ) . date ( ) , key = cls . root_key . serialize ( ) ) [EOL] certificate = Certificate ( ) [EOL] certificate . create_certificate ( cls . root_certificate ) [EOL] [EOL] cls . root_certificate . crt = certificate . serialize ( ) [EOL] cls . root_certificate . save ( ) [EOL] cls . key = Key ( ) . create_key ( [number] ) [EOL] [EOL] def test_parent_not_set ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName , localityName = self . root_certificate . dn . localityName ) [EOL] certificate = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = None , dn = subject , key = self . key . serialize ( ) ) [EOL] with self . assertRaises ( RuntimeError ) as context : [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate ) [EOL] self . assertEqual ( [string] , str ( context . exception ) ) [EOL] [EOL] def test_parent_object_not_set ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName , localityName = self . root_certificate . dn . localityName ) [EOL] root_certificate = CertificateFactory ( expires_at = arrow . get ( timezone . now ( ) ) . shift ( days = + [number] ) . date ( ) , shortname = [string] , key = self . root_key . serialize ( ) ) [EOL] certificate = Certificate ( ) [EOL] certificate . create_certificate ( root_certificate ) [EOL] [EOL] key = Key ( ) . create_key ( [number] ) [EOL] certificate = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = root_certificate , dn = subject , key = key . serialize ( ) ) [EOL] with self . assertRaises ( RuntimeError ) as context : [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate ) [EOL] self . assertEqual ( [string] , str ( context . exception ) ) [EOL] [EOL] def root_ca_not_matching_attribute ( self , subject , attribute_name ) : [EOL] with self . assertRaises ( PolicyError ) as context : [EOL] certificate_request = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = self . root_certificate , dn = subject , key = self . key . serialize ( ) ) [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate_request ) [EOL] [EOL] self . assertEqual ( [string] [string] . format ( attribute_name , getattr ( self . root_certificate . dn , attribute_name ) , getattr ( subject , attribute_name ) ) , str ( context . exception ) ) [EOL] [EOL] def test_generate_intermediate_certificate_not_matching_countryName ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = [string] , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName ) [EOL] self . root_ca_not_matching_attribute ( subject , [string] ) [EOL] [EOL] def test_generate_intermediate_certificate_not_matching_stateOrProvinceName ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = [string] , organizationName = self . root_certificate . dn . organizationName ) [EOL] self . root_ca_not_matching_attribute ( subject , [string] ) [EOL] [EOL] def test_generate_intermediate_certificate_not_matching_organizationName ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = [string] ) [EOL] self . root_ca_not_matching_attribute ( subject , [string] ) [EOL] [EOL] def test_generate_intermediate_certificate_duplicate_commonName ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName , commonName = self . root_certificate . dn . commonName ) [EOL] with self . assertRaises ( PolicyError ) as context : [EOL] certificate_request = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = self . root_certificate , dn = subject , key = self . key . serialize ( ) ) [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate_request ) [EOL] [EOL] self . assertEqual ( [string] [string] . format ( self . root_certificate . dn . commonName ) , str ( context . exception ) ) [EOL] [EOL] def test_generate_intermediate_certificate ( self ) : [EOL] subject = DistinguishedNameFactory ( countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName ) [EOL] [EOL] certificate_request = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = self . root_certificate , dn = subject , key = self . key . serialize ( ) ) [EOL] [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate_request ) [EOL] crt = certhandler . certificate [EOL] [EOL] self . assert_basic_information ( crt , certificate_request ) [EOL] [EOL] [comment] [EOL] self . assert_subject ( crt . subject , certificate_request ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] [comment] [EOL] self . assert_subject ( crt . issuer , self . root_certificate ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] [comment] [EOL] self . assert_crl_distribution ( crt , certificate_request ) [EOL] [EOL] self . assert_intermediate_authority ( crt ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . assert_oscp ( crt , certificate_request ) [EOL] [EOL] [comment] [EOL] self . assert_authority_key ( crt , self . root_key , self . root_certificate ) [EOL] [EOL] [comment] [EOL] self . assert_hash ( crt ) [EOL] [EOL] def test_generate_intermediate_certificate_minimal ( self ) : [EOL] key = Key ( ) . create_key ( [number] ) [EOL] [EOL] subject = DistinguishedNameFactory ( organizationalUnitName = None , emailAddress = None , localityName = None , countryName = self . root_certificate . dn . countryName , stateOrProvinceName = self . root_certificate . dn . stateOrProvinceName , organizationName = self . root_certificate . dn . organizationName ) [EOL] [EOL] certificate_request = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = self . root_certificate , dn = subject , key = key . serialize ( ) ) [EOL] [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate_request ) [EOL] crt = certhandler . certificate [EOL] self . assertEqual ( crt . public_key ( ) . public_numbers ( ) , key . key . public_key ( ) . public_numbers ( ) ) [EOL] [EOL] [comment] [EOL] self . assert_subject ( crt . subject , certificate_request ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] [comment] [EOL] self . assert_subject ( crt . issuer , self . root_certificate ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] def test_generate_intermediate_certificate_passphrase ( self ) : [EOL] root_key = Key ( ) . create_key ( [number] ) [EOL] root_certificate = CertificateFactory ( expires_at = arrow . get ( timezone . now ( ) ) . shift ( days = + [number] ) . date ( ) , shortname = [string] , key = root_key . serialize ( passphrase = [string] ) ) [EOL] root_certhandler = Certificate ( ) [EOL] root_certhandler . create_certificate ( root_certificate , passphrase = [string] ) [EOL] root_certificate . crt = root_certhandler . serialize ( ) [EOL] root_certificate . save ( ) [EOL] [EOL] subject = DistinguishedNameFactory ( countryName = root_certificate . dn . countryName , stateOrProvinceName = root_certificate . dn . stateOrProvinceName , organizationName = root_certificate . dn . organizationName , localityName = root_certificate . dn . localityName ) [EOL] [EOL] certificate_request = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = root_certificate , dn = subject , key = self . key . serialize ( passphrase = [string] ) ) [EOL] certhandler = Certificate ( ) [EOL] certhandler . create_certificate ( certificate_request , passphrase = [string] , passphrase_issuer = [string] ) [EOL] [EOL] crt = certhandler . certificate [EOL] [comment] [EOL] self . assert_subject ( crt . subject , certificate_request ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] [comment] [EOL] self . assert_subject ( crt . issuer , root_certificate ) [EOL] self . assertListEqual ( [ ] , crt . subject . get_attributes_for_oid ( NameOID . LOCALITY_NAME ) ) [EOL] [EOL] def test_generate_intermediate_certificate_passphrase_wrong_cert_passphrase ( self ) : [EOL] root_key = Key ( ) . create_key ( [number] ) [EOL] root_certificate = CertificateFactory ( expires_at = arrow . get ( timezone . now ( ) ) . shift ( days = + [number] ) . date ( ) , shortname = [string] , key = root_key . serialize ( passphrase = [string] ) ) [EOL] root_certhandler = Certificate ( ) [EOL] root_certhandler . create_certificate ( root_certificate , passphrase = [string] ) [EOL] [EOL] subject = DistinguishedNameFactory ( countryName = root_certificate . dn . countryName , stateOrProvinceName = root_certificate . dn . stateOrProvinceName , organizationName = root_certificate . dn . organizationName ) [EOL] [EOL] certificate = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = root_certificate , dn = subject , key = self . key . serialize ( passphrase = [string] ) ) [EOL] certhandler = Certificate ( ) [EOL] with self . assertRaisesMessage ( PassPhraseError , [string] ) : [EOL] certhandler . create_certificate ( certificate , passphrase = [string] , passphrase_issuer = [string] ) [EOL] [EOL] def test_generate_intermediate_certificate_passphrase_wrong_issuer_passphrase ( self ) : [EOL] root_key = Key ( ) . create_key ( [number] ) [EOL] root_certificate = CertificateFactory ( expires_at = arrow . get ( timezone . now ( ) ) . shift ( days = + [number] ) . date ( ) , shortname = [string] , key = root_key . serialize ( passphrase = [string] ) ) [EOL] root_certhandler = Certificate ( ) [EOL] root_certhandler . create_certificate ( root_certificate , passphrase = [string] ) [EOL] [EOL] subject = DistinguishedNameFactory ( countryName = root_certificate . dn . countryName , stateOrProvinceName = root_certificate . dn . stateOrProvinceName , organizationName = root_certificate . dn . organizationName ) [EOL] [EOL] certificate = CertificateFactory ( type = CertificateTypes . INTERMEDIATE , shortname = [string] , parent = root_certificate , dn = subject , key = self . key . serialize ( passphrase = [string] ) ) [EOL] certhandler = Certificate ( ) [EOL] with self . assertRaisesMessage ( PassPhraseError , [string] ) : [EOL] certhandler . create_certificate ( certificate , passphrase = [string] , passphrase_issuer = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.certificate.Certificate$ 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 0
import cryptography [EOL] import certificate_engine [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from django . test import TestCase [EOL] [EOL] from certificate_engine . ssl . key import Key [EOL] [EOL] [EOL] class KeyTest ( TestCase ) : [EOL] [EOL] def test_generate_private_key_2048 ( self ) : [EOL] keyhandler = Key ( ) [EOL] keyhandler . create_key ( [number] ) [EOL] self . assertEqual ( keyhandler . key . key_size , [number] ) [EOL] pkey = keyhandler . key . public_key ( ) [EOL] self . assertIsInstance ( pkey . public_numbers ( ) , rsa . RSAPublicNumbers ) [EOL] [EOL] def test_generate_private_key_4096 ( self ) : [EOL] prvkey = Key ( ) . create_key ( [number] ) [EOL] self . assertEqual ( prvkey . key . key_size , [number] ) [EOL] pkey = prvkey . key . public_key ( ) [EOL] self . assertIsInstance ( pkey . public_numbers ( ) , rsa . RSAPublicNumbers ) [EOL] [EOL] def test_serialize_keys_passphrase ( self ) : [EOL] key = Key ( ) [EOL] key . create_key ( [number] ) [EOL] pem = key . serialize ( [string] ) [EOL] prvkey = key . load ( pem , [string] ) [EOL] self . assertIsInstance ( prvkey . key , rsa . RSAPrivateKey ) [EOL] self . assertEqual ( prvkey . key . key_size , [number] ) [EOL] [EOL] def test_store_keys_no_object ( self ) : [EOL] key = Key ( ) [EOL] with self . assertRaisesMessage ( RuntimeError , [string] ) : [EOL] key . serialize ( [string] ) [EOL] [EOL] def test_store_keys_no_passphrase ( self ) : [EOL] key = Key ( ) [EOL] key . create_key ( [number] ) [EOL] pem = key . serialize ( ) [EOL] key = Key ( ) [EOL] prvkey = key . load ( pem ) [EOL] self . assertIsInstance ( prvkey . key , rsa . RSAPrivateKey ) [EOL] self . assertEqual ( prvkey . key . key_size , [number] ) [EOL] [EOL] def test_store_keys_wrong_passphrase ( self ) : [EOL] key = Key ( ) [EOL] key . create_key ( [number] ) [EOL] pem = key . serialize ( [string] ) [EOL] with self . assertRaisesMessage ( ValueError , [string] ) : [EOL] key . load ( pem , [string] ) [EOL] [EOL] def test_check_passphrase_valid ( self ) : [EOL] key = Key ( ) [EOL] key . create_key ( [number] ) [EOL] pem = key . serialize ( [string] ) [EOL] self . assertTrue ( key . check_passphrase ( pem , [string] ) ) [EOL] [EOL] def test_check_passphrase_invalid ( self ) : [EOL] key = Key ( ) [EOL] key . create_key ( [number] ) [EOL] pem = key . serialize ( [string] ) [EOL] self . assertFalse ( key . check_passphrase ( pem , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 $cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $builtins.bytes$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $builtins.bytes$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $builtins.bytes$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $builtins.bytes$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 $builtins.bytes$ 0 $certificate_engine.ssl.key.Key$ 0 0 0 0 0 0 0 0 0 0 $certificate_engine.ssl.key.Key$ 0 0 0 $builtins.bytes$ 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class X509PkiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Type , Tuple [EOL] import x509_pki [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] [EOL] from . forms import CertificateForm , DistinguishedNameForm [EOL] from . models import Certificate , DistinguishedName [EOL] [EOL] [EOL] class X509_pki_DistinguishedNameAdmin ( admin . ModelAdmin ) : [EOL] search_fields = [ [string] , [string] ] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] form = DistinguishedNameForm [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] if obj : [comment] [EOL] return [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] return [ ] [EOL] [EOL] [EOL] admin . site . register ( DistinguishedName , X509_pki_DistinguishedNameAdmin ) [EOL] [EOL] [EOL] class X509_pki_CertificateAdmin ( admin . ModelAdmin ) : [EOL] search_fields = [ [string] , [string] ] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] form = CertificateForm [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] if obj : [comment] [EOL] return [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] else : [EOL] return [ ] [EOL] [EOL] admin . site . register ( Certificate , X509_pki_CertificateAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[x509_pki.forms.DistinguishedNameForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[x509_pki.forms.CertificateForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import django . contrib . postgres . fields [EOL] import django . core . validators [EOL] import django . db . models . deletion [EOL] import django_countries . fields [EOL] import uuid [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] [EOL] import x509_pki . models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , django_countries . fields . CountryField ( help_text = [string] , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . EmailField ( default = [string] , help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , django . contrib . postgres . fields . ArrayField ( base_field = models . CharField ( max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] ) , blank = True , help_text = [string] , null = True , size = None ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , max_length = [number] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] ) ) , ( [string] , models . URLField ( blank = True , help_text = [string] , null = True , verbose_name = [string] ) ) , ( [string] , models . URLField ( blank = True , help_text = [string] , null = True , verbose_name = [string] ) ) , ( [string] , models . DateField ( auto_now_add = True ) ) , ( [string] , models . DateField ( help_text = [string] , validators = [ x509_pki . models . validate_in_future ] ) ) , ( [string] , models . DateField ( blank = True , default = None , editable = False , null = True ) ) , ( [string] , models . UUIDField ( default = [string] ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , options = { [string] : { ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) } , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import django . core . validators [EOL] import django_countries . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . UUIDField ( default = [number] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = django_countries . fields . CountryField ( blank = True , help_text = [string] , max_length = [number] , null = True , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . EmailField ( blank = True , default = [string] , help_text = [string] , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import x509_pki [EOL] from django . test import TestCase [EOL] [EOL] from x509_pki . tests . factories import CertificateFactory , DistinguishedNameFactory , UserFactory [EOL] [EOL] [EOL] class FactoriesTest ( TestCase ) : [EOL] [docstring] [EOL] def test_user_factory ( self ) : [EOL] user = UserFactory ( ) [EOL] self . assertIsNotNone ( user . username ) [EOL] self . assertIsNotNone ( user . password ) [EOL] self . assertIsNotNone ( user . first_name ) [EOL] self . assertIsNotNone ( user . last_name ) [EOL] self . assertFalse ( user . is_superuser ) [EOL] self . assertFalse ( user . is_staff ) [EOL] self . assertTrue ( user . is_active ) [EOL] [EOL] def test_distinguished_name_factory ( self ) : [EOL] dn = DistinguishedNameFactory ( ) [EOL] self . assertIsNotNone ( dn . countryName ) [EOL] self . assertIsNotNone ( dn . stateOrProvinceName ) [EOL] self . assertIsNotNone ( dn . localityName ) [EOL] self . assertIsNotNone ( dn . organizationName ) [EOL] self . assertIsNotNone ( dn . organizationalUnitName ) [EOL] self . assertIsNotNone ( dn . emailAddress ) [EOL] self . assertIsNotNone ( dn . commonName ) [EOL] self . assertIsNotNone ( dn . subjectAltNames ) [EOL] [EOL] def test_certificate_factory ( self ) : [EOL] cert = CertificateFactory ( ) [EOL] self . assertIsNotNone ( cert . type ) [EOL] self . assertIsNotNone ( cert . shortname ) [EOL] self . assertIsNotNone ( cert . name ) [EOL] self . assertIsNotNone ( cert . dn ) [EOL] self . assertIsNone ( cert . parent ) [EOL] self . assertIsNotNone ( cert . crl_distribution_url ) [EOL] self . assertIsNotNone ( cert . ocsp_distribution_host ) [EOL] self . assertIsNotNone ( cert . owner ) [EOL] self . assertIsNotNone ( cert . serial ) [EOL] self . assertIsNotNone ( cert . created_at ) [EOL] self . assertIsNotNone ( cert . expires_at ) [EOL] self . assertIsNone ( cert . revoked_at ) [EOL] self . assertIsNotNone ( cert . revoked_uuid ) [EOL] self . assertIsNotNone ( cert . key ) [EOL] self . assertIsNotNone ( cert . crt ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.DistinguishedNameFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0 0 0 0 0 $x509_pki.tests.factories.CertificateFactory$ 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Tuple , Dict [EOL] import typing [EOL] import os [EOL] import sphinx_rtd_theme [EOL] import sys [EOL] from django . utils . version import get_docs_version , get_version [EOL] [EOL] from bounca import VERSION [EOL] [EOL] [EOL] sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] html_show_sourcelink = False [EOL] html_show_sphinx = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = str ( get_docs_version ( VERSION ) ) [EOL] [comment] [EOL] release = str ( get_version ( VERSION ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] html_theme = [string] [EOL] [EOL] html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] epub_author = author [EOL] epub_publisher = author [EOL] epub_copyright = copyright [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Union , Literal , Any , Tuple , Dict [EOL] import typing_extensions [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import re [EOL] import sys [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from yamlreader import yaml_load [EOL] [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] IS_UNITTEST = [string] in sys . argv or any ( [ [string] in arg for arg in sys . argv ] ) [EOL] IS_COLLECT_STATIC = [string] in sys . argv [EOL] [EOL] [EOL] def get_services_config ( path , filename = [string] ) : [EOL] environment_specific = os . path . join ( os . path . abspath ( path ) , filename ) [EOL] config_files = [ ] [EOL] if os . path . exists ( environment_specific ) : [EOL] config_files . append ( environment_specific ) [EOL] if not config_files : [EOL] raise IOError ( [string] [string] . format ( [string] . join ( [ environment_specific ] ) ) ) [EOL] return yaml_load ( config_files ) [EOL] [EOL] [EOL] SERVICES = get_services_config ( os . path . join ( BASE_DIR , [string] , [string] ) ) [EOL] [EOL] SECRET_KEY = SERVICES [ [string] ] [ [string] ] [EOL] [comment] [EOL] DEBUG = SERVICES [ [string] ] [ [string] ] [EOL] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : SERVICES [ [string] ] [ [string] ] , [string] : SERVICES [ [string] ] [ [string] ] , [string] : SERVICES [ [string] ] [ [string] ] , [string] : SERVICES [ [string] ] [ [string] ] , [string] : SERVICES [ [string] ] . get ( [string] , [string] ) , [string] : [number] , [string] : { [string] : SERVICES [ [string] ] [ [string] ] + [string] + str ( os . getpid ( ) ) , [string] : [string] , } } } [EOL] [EOL] [EOL] [EOL] ADMINS = ( ( [string] , SERVICES [ [string] ] [ [string] ] ) , ) [EOL] [EOL] MANAGERS = ADMINS [EOL] SITE_ID = [number] [EOL] EMAIL_HOST = SERVICES [ [string] ] [ [string] ] [EOL] DEFAULT_FROM_EMAIL = SERVICES [ [string] ] [ [string] ] [EOL] SERVER_EMAIL = SERVICES [ [string] ] [ [string] ] [EOL] [EOL] SITE_NAME = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] LANGUAGE_CODE = [string] [EOL] SITE_ID = [number] [EOL] USE_I18N = True [EOL] USE_L10N = True [EOL] USE_TZ = True [EOL] [EOL] ALLOWED_HOSTS = SERVICES [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , [string] , [string] , ) , [string] : ( [string] , [string] , ) } [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] GRAPPELLI_ADMIN_TITLE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] ACCOUNT_EMAIL_VERIFICATION = None [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] STATIC_URL = [string] [EOL] STATICFILES_DIRS = ( BASE_DIR + [string] , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] CERTIFICATE_REPO_PATH = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] if DEBUG : [EOL] EMAIL_BACKEND = [string] [EOL] else : [EOL] EMAIL_HOST = [string] [EOL] [EOL] [EOL] if IS_UNITTEST : [EOL] EMAIL_BACKEND = [string] [EOL] LANGUAGE_CODE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from django . contrib import admin [EOL] from django . contrib . staticfiles . urls import staticfiles_urlpatterns [EOL] [EOL] from api . urls import urlpatterns as urlpatterns_api [EOL] from webapp . urls import urlpatterns as urlpatterns_webapp [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( urlpatterns_api ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( urlpatterns_webapp ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] urlpatterns += url ( [string] , admin . site . urls ) , [EOL] [EOL] urlpatterns += staticfiles_urlpatterns ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . utils . version import get_version [EOL] [EOL] [EOL] [comment] [EOL] [EOL] VERSION = ( [number] , [number] , [number] , [string] , [number] ) [EOL] [EOL] __version__ = get_version ( VERSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
[docstring] [EOL] [EOL] from django . contrib import admin [EOL] [EOL] [EOL] admin . site . site_header = [string] [EOL] admin . site . site_title = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Type [EOL] import webapp [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic . edit import FormView [EOL] from django_ical . views import ICalFeed [EOL] [EOL] from webapp . forms import ( AddClientCertificateForm , AddIntermediateCAForm , AddRootCAForm , AddServerCertificateForm , CertificateCRLForm , CertificateRevokeForm ) [EOL] from x509_pki . models import Certificate , CertificateTypes [EOL] [EOL] [EOL] class AddRootCAFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = AddRootCAForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class AddIntermediateCAFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = AddIntermediateCAForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_initial ( self ) : [EOL] initial = super ( ) . get_initial ( ) [EOL] [EOL] if [string] not in self . request . GET : [EOL] raise Exception ( [string] ) [EOL] try : [EOL] parent = Certificate . objects . get ( pk = self . request . GET [ [string] ] ) [EOL] except : [EOL] raise ObjectDoesNotExist ( [string] ) [EOL] if parent . type != CertificateTypes . ROOT and parent . type != CertificateTypes . INTERMEDIATE : [EOL] raise Exception ( [string] ) [EOL] initial [ [string] ] = parent . pk [EOL] initial [ [string] ] = { } [EOL] initial [ [string] ] [ [string] ] = [string] [EOL] initial [ [string] ] [ [string] ] = parent . dn . countryName [EOL] initial [ [string] ] [ [string] ] = parent . dn . stateOrProvinceName [EOL] initial [ [string] ] [ [string] ] = parent . dn . localityName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationalUnitName [EOL] initial [ [string] ] [ [string] ] = parent . dn . emailAddress [EOL] initial [ [string] ] = parent . crl_distribution_url [EOL] initial [ [string] ] = parent . ocsp_distribution_host [EOL] return initial [EOL] [EOL] [EOL] class AddServerCertificateFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = AddServerCertificateForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_initial ( self ) : [EOL] initial = super ( ) . get_initial ( ) [EOL] [EOL] if [string] not in self . request . GET : [EOL] raise Exception ( [string] ) [EOL] try : [EOL] parent = Certificate . objects . get ( pk = self . request . GET [ [string] ] ) [EOL] except : [EOL] raise ObjectDoesNotExist ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] initial [ [string] ] = parent . pk [EOL] initial [ [string] ] = { } [EOL] initial [ [string] ] [ [string] ] = [string] [EOL] initial [ [string] ] [ [string] ] = parent . dn . countryName [EOL] initial [ [string] ] [ [string] ] = parent . dn . stateOrProvinceName [EOL] initial [ [string] ] [ [string] ] = parent . dn . localityName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationalUnitName [EOL] initial [ [string] ] [ [string] ] = parent . dn . emailAddress [EOL] [EOL] return initial [EOL] [EOL] [EOL] class AddClientCertificateFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = AddClientCertificateForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_initial ( self ) : [EOL] initial = super ( ) . get_initial ( ) [EOL] [EOL] if [string] not in self . request . GET : [EOL] raise Exception ( [string] ) [EOL] try : [EOL] parent = Certificate . objects . get ( pk = self . request . GET [ [string] ] ) [EOL] except : [EOL] raise ObjectDoesNotExist ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] initial [ [string] ] = parent . pk [EOL] initial [ [string] ] = { } [EOL] initial [ [string] ] [ [string] ] = [string] [EOL] initial [ [string] ] [ [string] ] = parent . dn . countryName [EOL] initial [ [string] ] [ [string] ] = parent . dn . stateOrProvinceName [EOL] initial [ [string] ] [ [string] ] = parent . dn . localityName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationName [EOL] initial [ [string] ] [ [string] ] = parent . dn . organizationalUnitName [EOL] initial [ [string] ] [ [string] ] = parent . dn . emailAddress [EOL] [EOL] return initial [EOL] [EOL] [EOL] class CertificateRevokeFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = CertificateRevokeForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class CertificateCRLFormView ( FormView ) : [EOL] template_name = [string] [EOL] form_class = CertificateCRLForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class CertificateExpireCalendarView ( ICalFeed ) : [EOL] product_id = [string] [EOL] timezone = [string] [EOL] file_name = [string] [EOL] [EOL] def get_object ( self , request ) : [EOL] return request . user [EOL] [EOL] def items ( self , obj ) : [EOL] return Certificate . objects . filter ( owner = obj . id ) . order_by ( [string] ) [EOL] [EOL] def item_title ( self , item ) : [EOL] return [string] + str ( item ) + [string] [EOL] [EOL] def item_description ( self , item ) : [EOL] issued_by = [string] [EOL] if item . parent : [EOL] issued_by = [string] + item . parent . dn . commonName + [string] [EOL] subjectAltNames = [string] [EOL] if item . dn . subjectAltNames : [EOL] subjectAltNames = [string] [EOL] for alt_name in item . dn . subjectAltNames : [EOL] subjectAltNames = subjectAltNames + alt_name + [string] [EOL] return [string] + item . dn . commonName + [string] + subjectAltNames + issued_by + [string] + item . shortname + [string] + [string] [EOL] [EOL] def item_start_datetime ( self , item ) : [EOL] if item . revoked : [EOL] return item . revoked_at [EOL] else : [EOL] return item . expires_at [EOL] [EOL] def item_created ( self , item ) : [EOL] return item . created_at [EOL] [EOL] def item_link ( self , item ) : [EOL] return [string] [EOL] [EOL] def item_guid ( self , item ) : [EOL] return item . id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.AddRootCAForm]$ 0 0 0 $typing.Type[webapp.views.AddRootCAFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.AddIntermediateCAForm]$ 0 0 0 $typing.Type[webapp.views.AddIntermediateCAFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.AddServerCertificateForm]$ 0 0 0 $typing.Type[webapp.views.AddServerCertificateFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.AddClientCertificateForm]$ 0 0 0 $typing.Type[webapp.views.AddClientCertificateFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.CertificateRevokeForm]$ 0 0 0 $typing.Type[webapp.views.CertificateRevokeFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[webapp.forms.CertificateCRLForm]$ 0 0 0 $typing.Type[webapp.views.CertificateCRLFormView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf . urls import url [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . views . generic import TemplateView [EOL] [EOL] from . views import ( AddClientCertificateFormView , AddIntermediateCAFormView , AddRootCAFormView , AddServerCertificateFormView , CertificateCRLFormView , CertificateExpireCalendarView , CertificateRevokeFormView ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , url ( [string] , login_required ( AddRootCAFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( AddIntermediateCAFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( AddClientCertificateFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( AddServerCertificateFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( CertificateRevokeFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( CertificateCRLFormView . as_view ( ) ) , name = [string] ) , url ( [string] , login_required ( CertificateExpireCalendarView ( ) ) , name = [string] ) , url ( [string] , login_required ( TemplateView . as_view ( template_name = [string] ) ) , name = [string] ) , url ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import webapp [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django import forms [EOL] from django . utils import timezone [EOL] from djng . forms import NgFormValidationMixin , NgModelForm , NgModelFormMixin [EOL] from djng . styling . bootstrap3 . forms import Bootstrap3FormMixin [EOL] [EOL] from certificate_engine . types import CertificateTypes [EOL] from x509_pki . forms import DistinguishedNameForm [EOL] [EOL] [EOL] class AddDistinguishedNameRootCAForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm , DistinguishedNameForm ) : [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] [EOL] class AddRootCAForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def clean_type ( self ) : [EOL] return CertificateTypes . ROOT [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields . pop ( [string] ) [EOL] self . initial [ [string] ] = None [EOL] self . initial [ [string] ] = CertificateTypes . ROOT [EOL] self . initial [ [string] ] = timezone . now ( ) + timezone . timedelta ( weeks = [number] ) [EOL] [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs and [string] in kwargs [ [string] ] : [EOL] initial = kwargs . pop ( [string] ) [EOL] kwargs [ [string] ] = initial [ [string] ] [EOL] self . dn = AddDistinguishedNameRootCAForm ( scope_prefix = [string] , ** kwargs ) [EOL] [EOL] def is_valid ( self ) : [EOL] if not self . dn . is_valid ( ) : [EOL] self . errors . update ( self . dn . errors ) [EOL] return super ( ) . is_valid ( ) and self . dn . is_valid ( ) [EOL] [EOL] [EOL] class AddDistinguishedNameIntermediateCAForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm , DistinguishedNameForm ) : [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = [string] [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] [EOL] [EOL] class AddIntermediateCAForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def clean_type ( self ) : [EOL] return CertificateTypes . INTERMEDIATE [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields . pop ( [string] ) [EOL] self . initial [ [string] ] = CertificateTypes . INTERMEDIATE [EOL] self . initial [ [string] ] = timezone . now ( ) + timezone . timedelta ( weeks = [number] ) [EOL] [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs and [string] in kwargs [ [string] ] : [EOL] initial = kwargs . pop ( [string] ) [EOL] kwargs [ [string] ] = initial [ [string] ] [EOL] self . dn = AddDistinguishedNameIntermediateCAForm ( scope_prefix = [string] , ** kwargs ) [EOL] [EOL] def is_valid ( self ) : [EOL] if not self . dn . is_valid ( ) : [EOL] self . errors . update ( self . dn . errors ) [EOL] return super ( ) . is_valid ( ) and self . dn . is_valid ( ) [EOL] [EOL] [EOL] class AddDistinguishedNameServerCertificateForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm , DistinguishedNameForm ) : [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] [EOL] class AddServerCertificateForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def clean_type ( self ) : [EOL] return CertificateTypes . SERVER_CERT [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields . pop ( [string] ) [EOL] self . initial [ [string] ] = CertificateTypes . SERVER_CERT [EOL] self . initial [ [string] ] = timezone . now ( ) + timezone . timedelta ( weeks = [number] ) [EOL] self . initial [ [string] ] = [string] [EOL] self . initial [ [string] ] = [string] [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] [EOL] self . fields [ [string] ] . required = False [EOL] self . fields [ [string] ] . required = False [EOL] [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs and [string] in kwargs [ [string] ] : [EOL] initial = kwargs . pop ( [string] ) [EOL] kwargs [ [string] ] = initial [ [string] ] [EOL] self . dn = AddDistinguishedNameServerCertificateForm ( scope_prefix = [string] , ** kwargs ) [EOL] [EOL] def is_valid ( self ) : [EOL] if not self . dn . is_valid ( ) : [EOL] self . errors . update ( self . dn . errors ) [EOL] return super ( ) . is_valid ( ) and self . dn . is_valid ( ) [EOL] [EOL] [EOL] class AddDistinguishedNameClientCertificateForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm , DistinguishedNameForm ) : [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . help_text = [string] [EOL] [EOL] [EOL] class AddClientCertificateForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def clean_type ( self ) : [EOL] return CertificateTypes . CLIENT_CERT [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields . pop ( [string] ) [EOL] self . initial [ [string] ] = CertificateTypes . CLIENT_CERT [EOL] self . initial [ [string] ] = timezone . now ( ) + timezone . timedelta ( weeks = [number] ) [EOL] self . initial [ [string] ] = [string] [EOL] self . initial [ [string] ] = [string] [EOL] self . fields [ [string] ] . help_text = [string] + [string] [EOL] [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] self . fields [ [string] ] . widget = forms . HiddenInput ( ) [EOL] [EOL] self . fields [ [string] ] . required = False [EOL] self . fields [ [string] ] . required = False [EOL] [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs : [EOL] kwargs . pop ( [string] ) [EOL] if [string] in kwargs and [string] in kwargs [ [string] ] : [EOL] initial = kwargs . pop ( [string] ) [EOL] kwargs [ [string] ] = initial [ [string] ] [EOL] self . dn = AddDistinguishedNameClientCertificateForm ( scope_prefix = [string] , ** kwargs ) [EOL] [EOL] def is_valid ( self ) : [EOL] if not self . dn . is_valid ( ) : [EOL] self . errors . update ( self . dn . errors ) [EOL] return super ( ) . is_valid ( ) and self . dn . is_valid ( ) [EOL] [EOL] [EOL] class CertificateRevokeForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class CertificateCRLForm ( NgModelFormMixin , NgFormValidationMixin , Bootstrap3FormMixin , NgModelForm ) : [EOL] [comment] [EOL] [comment] [EOL] scope_prefix = [string] [EOL] form_name = [string] [EOL] [EOL] def clean_parent ( self ) : [EOL] return None [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs . update ( auto_id = False , scope_prefix = self . scope_prefix ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $webapp.forms.AddDistinguishedNameRootCAForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $webapp.forms.AddDistinguishedNameIntermediateCAForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $webapp.forms.AddDistinguishedNameServerCertificateForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $webapp.forms.AddDistinguishedNameClientCertificateForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django import template [EOL] from django . utils . version import get_version [EOL] [EOL] from bounca import VERSION [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . simple_tag def bounca_version ( ) : [EOL] return str ( get_version ( VERSION ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0