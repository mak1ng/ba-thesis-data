[comment] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from hackathon . solution . solution import run [EOL] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __license__ = [string] [EOL] [EOL] if __name__ == [string] : [EOL] run ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from hackathon . framework . framework import run [EOL] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __license__ = [string] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] run ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import hackathon [EOL] import typing [EOL] [docstring] [EOL] [EOL] from hackathon . utils . control import Control [EOL] from hackathon . utils . utils import ResultsMessage , DataMessage , PVMode , TYPHOON_DIR , config_outs [EOL] from hackathon . framework . http_server import prepare_dot_dir [EOL] [EOL] blackoutsCounter = [number] [EOL] blackoutAdded = False [EOL] [EOL] def worker ( msg ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] ( power_reference , pv_mode ) = ChargingHandler ( msg ) [EOL] ( load_one , load_two , load_three , power_reference ) = BlackoutHandler ( msg , power_reference ) [EOL] [EOL] return ResultsMessage ( data_msg = msg , load_one = load_one , load_two = load_two , load_three = load_three , power_reference = power_reference , pv_mode = pv_mode ) [EOL] [EOL] [EOL] def run ( args ) : [EOL] prepare_dot_dir ( ) [EOL] config_outs ( args , [string] ) [EOL] [EOL] cntrl = Control ( ) [EOL] [EOL] for data in cntrl . get_data ( ) : [EOL] cntrl . push_results ( worker ( data ) ) [EOL] [EOL] [docstring] [EOL] def ChargingHandler ( msg ) : [EOL] global blackoutsCounter [EOL] power_reference = [number] [EOL] pv_mode = PVMode . ON [EOL] [EOL] [comment] [EOL] if msg . buying_price == [number] : [EOL] if msg . bessSOC > [number] : [EOL] power_reference = msg . solar_production - msg . current_load [EOL] if power_reference < [number] : [EOL] power_reference = - (power_reference) [EOL] else : [EOL] power_reference = [number] [EOL] [EOL] [comment] [EOL] if msg . solar_production == [number] and msg . buying_price == [number] : [EOL] if msg . bessSOC < [number] : [EOL] power_reference = - [number] [EOL] [EOL] [comment] [EOL] if msg . solar_production != [number] and msg . solar_production > msg . current_load : [EOL] [comment] [EOL] power_reference = - ( msg . solar_production - msg . current_load ) [EOL] [comment] [EOL] if msg . grid_status : [EOL] if power_reference < - [number] : [EOL] power_reference = - [number] [EOL] else : [EOL] if power_reference < - [number] : [EOL] power_reference = [number] [EOL] pv_mode = PVMode . OFF [EOL] if msg . bessSOC == [number] : [EOL] power_reference = [number] [EOL] pv_mode = PVMode . OFF [EOL] [EOL] if blackoutsCounter == [number] : [EOL] power_reference = msg . solar_production - msg . current_load [EOL] if power_reference < [number] : [EOL] power_reference = - (power_reference) [EOL] if power_reference > [number] : [EOL] power_reference = [number] [EOL] elif power_reference > [number] : [EOL] power_reference = - (power_reference) [EOL] if power_reference > - [number] : [EOL] power_reference = - [number] [EOL] [EOL] return ( power_reference , pv_mode ) [EOL] [EOL] [docstring] [EOL] def BlackoutHandler ( msg , power_reference ) : [EOL] global blackoutAdded [EOL] global blackoutsCounter [EOL] load_one = True [EOL] load_two = True [EOL] load_three = True [EOL] [EOL] [comment] [EOL] if not msg . grid_status : [EOL] [comment] [EOL] power_reference = msg . current_load - msg . solar_production [EOL] [comment] [EOL] if power_reference > [number] : [EOL] power_reference = [number] [EOL] [comment] [EOL] ( load_one , load_two , load_three ) = LoadHandler ( msg ) [EOL] [comment] [EOL] if not blackoutAdded : [EOL] blackoutsCounter += [number] [EOL] blackoutAdded = True [EOL] [comment] [EOL] if msg . grid_status and blackoutAdded : [EOL] blackoutAdded = False [EOL] [EOL] return ( load_one , load_two , load_three , power_reference ) [EOL] [EOL] [docstring] [EOL] def LoadHandler ( msg ) : [EOL] [comment] [EOL] if msg . current_load > msg . solar_production + [number] : [EOL] [comment] [EOL] if msg . current_load * [number] > msg . solar_production + [number] : [EOL] [comment] [EOL] if msg . current_load * [number] > msg . solar_production and msg . bessSOC == [number] : [EOL] [comment] [EOL] return ( False , False , False ) [EOL] [comment] [EOL] return ( True , False , False ) [EOL] [comment] [EOL] return ( True , True , False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $hackathon.utils.utils.ResultsMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0