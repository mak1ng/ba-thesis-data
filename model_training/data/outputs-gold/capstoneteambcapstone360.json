from flask import render_template [EOL] from flask . views import MethodView [EOL] [EOL] [EOL] class Index ( MethodView ) : [EOL] def get ( self ) : [EOL] return render_template ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] [docstring] [EOL] from flask import Flask [EOL] [EOL] from extensions import db , cas [EOL] [EOL] import os [EOL] [EOL] [EOL] def create_app ( debug = False ) : [EOL] app = Flask ( __name__ ) [EOL] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = True [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] app . jinja_env . trim_blocks = True [EOL] app . jinja_env . lstrip_blocks = True [EOL] [EOL] if not debug : [EOL] os . environ [ [string] ] = [string] [EOL] app . config . from_envvar ( [string] ) [EOL] else : [EOL] app . config [ [string] ] = True [EOL] [EOL] app . app_context ( ) . push ( ) [EOL] db . init_app ( app ) [EOL] db . Model . metadata . reflect ( db . engine ) [EOL] [EOL] [comment] [EOL] cas . init_app ( app ) [EOL] [EOL] register_routes ( app ) [EOL] return app [EOL] [EOL] [EOL] def register_routes ( app ) : [EOL] from index import Index [EOL] from form import review [EOL] from prof_dashboard import ProfDashboard [EOL] from prof_dashboard import AddTeam [EOL] from prof_dashboard import AddStudent [EOL] from prof_dashboard import AddTeamCSV [EOL] from prof_dashboard import RemoveTeam [EOL] from prof_dashboard import SetDate [EOL] from prof_dashboard import AddSession [EOL] from prof_dashboard import AssignTeam [EOL] from prof_dashboard import RemoveSession [EOL] from prof_dashboard import SetAvailable [EOL] from student_dashboard import StudentDashboard [EOL] from student_dashboard import EditStudent [EOL] from student_register import StudentRegister [EOL] from report import GeneratedProfessorReportView , GeneratedAnonymousReportView [EOL] from view_student import ViewStudent [EOL] from view_review import ViewReview [EOL] [EOL] app . add_url_rule ( [string] , view_func = Index . as_view ( [string] ) ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = StudentDashboard . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = EditStudent . as_view ( [string] ) , methods = [ [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = review . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = ProfDashboard . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = AddStudent . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = AddTeamCSV . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = AssignTeam . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = AddSession . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = RemoveSession . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = AddTeam . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = RemoveTeam . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = SetDate . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = GeneratedProfessorReportView . as_view ( [string] ) , methods = [ [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = GeneratedAnonymousReportView . as_view ( [string] ) , methods = [ [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = StudentRegister . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = ViewStudent . as_view ( [string] ) , methods = [ [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = ViewReview . as_view ( [string] ) , methods = [ [string] ] ) [EOL] [EOL] app . add_url_rule ( [string] , view_func = SetAvailable . as_view ( [string] ) , methods = [ [string] , [string] ] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app = create_app ( debug = True ) [EOL] app . run ( host = [string] , port = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import gbmodel [EOL] import typing [EOL] from flask import request , render_template [EOL] from flask . views import MethodView [EOL] from flask_cas import login_required [EOL] from catCas import validate_professor [EOL] from common_functions import display_access_control_error [EOL] import gbmodel [EOL] import logging [EOL] [EOL] [EOL] class ViewStudent ( MethodView ) : [EOL] [docstring] [EOL] [EOL] def check_review_done ( self , reviews_table , reviewer_id , reviewee_id , team_id , is_final ) : [EOL] [docstring] [EOL] return reviews_table . get_report ( reviewer_id , reviewee_id , team_id , is_final ) is not None [EOL] [EOL] def display_error ( self , error ) : [EOL] [docstring] [EOL] logging . error ( [string] + str ( error ) ) [EOL] return render_template ( [string] , error = [string] ) [EOL] [EOL] @ login_required def post ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] students = gbmodel . students ( ) [EOL] teams = gbmodel . teams ( ) [EOL] reports = gbmodel . reports ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] student_id = request . form . getlist ( [string] ) [ [number] ] [EOL] session_id = request . form . getlist ( [string] ) [ [number] ] [EOL] student = students . get_student_in_session ( student_id , session_id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if student is not None : [EOL] [comment] [EOL] team = teams . get_team_from_id ( student . tid ) [EOL] if team is None : [EOL] return self . display_error ( ( [string] [string] ) ) [EOL] [EOL] [comment] [EOL] student_details = { [string] : student . name , [string] : student . id , [string] : team . name } [EOL] [EOL] [comment] [EOL] [comment] [EOL] reviews = [ ] [EOL] team_members = students . get_team_members ( student . tid ) [EOL] for team_member in team_members : [EOL] midterm_review_completed = self . check_review_done ( reports , student . id , team_member . id , student . tid , False ) [EOL] final_review_completed = self . check_review_done ( reports , student . id , team_member . id , student . tid , True ) [EOL] reviews . append ( { [string] : team_member . name , [string] : team_member . id , [string] : ( midterm_review_completed , final_review_completed ) } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return render_template ( [string] , student = student_details , review_data = reviews , session_id = session_id ) [EOL] else : [EOL] return self . display_error ( ( [string] [string] ) ) [EOL] [EOL] [comment] [EOL] except Exception as error : [EOL] return self . display_error ( error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import gbmodel [EOL] import typing [EOL] from flask import request , render_template [EOL] from flask . views import MethodView [EOL] from catCas import validate_student [EOL] from flask_cas import login_required [EOL] import gbmodel [EOL] import re [EOL] [EOL] [EOL] class StudentDashboard ( MethodView ) : [EOL] [docstring] [EOL] def valid_email ( self , email ) : [EOL] [docstring] [EOL] if len ( email ) > [number] : [EOL] if re . match ( [string] [string] , email ) is not None : [EOL] return True [EOL] return False [EOL] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if validate_student ( ) is False : [EOL] msg = [string] [EOL] return render_template ( [string] , msg = msg , student_register = True ) [EOL] else : [EOL] student_name = validate_student ( ) . name [EOL] user_name = validate_student ( ) . id [EOL] caps = gbmodel . students ( ) . get_user_sessions ( user_name ) [comment] [EOL] return render_template ( [string] , name = student_name , user_name = user_name , caps = caps ) [EOL] [EOL] def post ( self ) : [EOL] [docstring] [EOL] student = gbmodel . students ( ) [EOL] student_name = validate_student ( ) . name [EOL] user_name = validate_student ( ) . id [EOL] new_name = request . form . get ( [string] ) [EOL] new_email = request . form . get ( [string] ) [EOL] caps = gbmodel . students ( ) . get_user_sessions ( user_name ) [EOL] [comment] [EOL] if new_email != [string] : [EOL] if self . valid_email ( str ( new_email ) ) is False : [EOL] error = [string] [EOL] return render_template ( [string] , error = error , user_name = user_name ) [EOL] student . edit_student ( user_name , new_name , new_email ) [EOL] [comment] [EOL] student_name = validate_student ( ) . name [EOL] return render_template ( [string] , name = student_name , user_name = user_name , caps = caps ) [EOL] [EOL] [EOL] class EditStudent ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] user_name = validate_student ( ) . id [EOL] return render_template ( [string] , error = None , user_name = user_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import render_template [EOL] import logging [EOL] [EOL] [EOL] def display_access_control_error ( ) : [EOL] [docstring] [EOL] logging . warning ( [string] ) [EOL] return render_template ( [string] , msg = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from flask import Flask [EOL] [EOL] [EOL] def create_app ( test_config = None ) : [EOL] [comment] [EOL] app = Flask ( __name__ , instance_relative_config = True ) [EOL] app . config . from_mapping ( SECRET_KEY = [string] , ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import gbmodel [EOL] import typing [EOL] from flask import request , render_template [EOL] from flask . views import MethodView [EOL] from flask_cas import login_required , CAS [EOL] import gbmodel [EOL] import logging [EOL] [EOL] [EOL] class StudentRegister ( MethodView ) : [EOL] [docstring] [EOL] [EOL] def display_error ( self , error_msg ) : [EOL] [docstring] [EOL] return render_template ( [string] , message = error_msg , is_error = True ) [EOL] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] capstone_session = gbmodel . capstone_session ( ) [EOL] professors = gbmodel . professors ( ) [EOL] [EOL] [comment] [EOL] sessions = capstone_session . get_active_sessions ( ) [EOL] if sessions is None : [EOL] [comment] [EOL] [comment] [EOL] logging . warning ( ( [string] [string] ) ) [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] active_sessions = [ ] [EOL] for session in sessions : [EOL] [comment] [EOL] professor = professors . get_professor ( session . professor_id ) [EOL] if professor is None : [EOL] logging . error ( ( [string] [string] ) ) [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] active_sessions . append ( { [string] : session . id , [string] : [string] . format ( session . start_term , str ( session . start_year ) , professor . name ) } ) [EOL] [EOL] [comment] [EOL] return render_template ( [string] , sessions = active_sessions ) [EOL] [EOL] @ login_required def post ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] students = gbmodel . students ( ) [EOL] teams = gbmodel . teams ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] student_id = CAS ( ) . username [EOL] name = request . form . getlist ( [string] ) [ [number] ] [EOL] email_address = request . form . getlist ( [string] ) [ [number] ] [EOL] session_id = request . form . getlist ( [string] ) [ [number] ] [EOL] [EOL] [comment] [EOL] if students . get_student_in_session ( student_id , session_id ) is not None : [EOL] logging . warning ( ( [string] [string] ) ) [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if teams . get_tid_from_name ( [string] , session_id ) is None : [EOL] teams . insert_team ( session_id , [string] ) [EOL] [EOL] [comment] [EOL] students . insert_student ( name , email_address , student_id , session_id , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] logging . info ( [string] ) [EOL] return render_template ( [string] , message = [string] , is_error = False ) [EOL] [EOL] [comment] [EOL] except Exception as error : [EOL] logging . error ( [string] + str ( error ) ) [EOL] return self . display_error ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import psycopg2 [EOL] [EOL] [EOL] def generate_tables ( cursor ) : [EOL] [EOL] try : [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] except ( Exception , psycopg2 . DatabaseError ) as error : [EOL] print ( [string] , error ) [EOL] [EOL] [EOL] def run ( ) : [EOL] [EOL] [comment] [EOL] try : [EOL] db_username = [string] [EOL] db_password = [string] [EOL] db_name = [string] [EOL] with open ( [string] , [string] ) as cfg_file : [EOL] for line in cfg_file : [EOL] if [string] in line : [EOL] db_username = line . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] [EOL] db_password = line . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] [EOL] db_name = line . split ( [string] ) [ [number] ] . split ( [string] ) [ [number] ] [ : - [number] ] [EOL] except Exception as error : [EOL] print ( error ) [EOL] print ( [string] ) [EOL] exit ( ) [EOL] [EOL] [comment] [EOL] connection = psycopg2 . connect ( user = db_username , password = db_password , host = [string] , port = [string] , database = db_name ) [EOL] cursor = connection . cursor ( ) [EOL] generate_tables ( cursor ) [EOL] [EOL] [comment] [EOL] connection . commit ( ) [EOL] [EOL] [comment] [EOL] if (connection) : [EOL] cursor . close ( ) [EOL] connection . close ( ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] if ( __name__ == [string] ) : [EOL] run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import gbmodel [EOL] import io [EOL] import _csv [EOL] import typing [EOL] [docstring] [EOL] from flask import request , render_template [EOL] from flask . views import MethodView [EOL] import gbmodel [EOL] from catCas import validate_professor [EOL] from flask_cas import login_required [EOL] import logging [EOL] from sqlalchemy . exc import SQLAlchemyError [EOL] from common_functions import display_access_control_error [EOL] import csv [EOL] import io [EOL] import re [EOL] [EOL] [EOL] class ProfDashboard ( MethodView ) : [EOL] [docstring] [EOL] def valid_email ( self , email ) : [EOL] [docstring] [EOL] if len ( email ) > [number] : [EOL] if re . match ( [string] [string] , email ) is not None : [EOL] return True [EOL] return False [EOL] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session = gbmodel . capstone_session ( ) [EOL] team = gbmodel . teams ( ) [EOL] session_id = request . args . get ( [string] ) [EOL] if session_id is None : [EOL] user_session = request . args . get ( [string] ) [EOL] [comment] [EOL] if user_session is None : [EOL] session_id = [string] [EOL] else : [EOL] term = str ( user_session [ : user_session . index ( [string] ) ] . strip ( ) ) [EOL] year = int ( user_session [ user_session . index ( [string] ) + [number] : user_session . index ( [string] ) ] . strip ( ) ) [EOL] prof = str ( user_session [ user_session . index ( [string] ) + [number] : user_session . index ( [string] ) ] . strip ( ) ) [EOL] session_id = session . get_session_id ( term , year , prof ) [EOL] [comment] [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] [comment] [EOL] if lists is None : [EOL] return render_template ( [string] , sessions = sessions , session_id = session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [EOL] def post ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session = gbmodel . capstone_session ( ) [EOL] student = gbmodel . students ( ) [EOL] team = gbmodel . teams ( ) [EOL] professor = gbmodel . professors ( ) [EOL] [comment] [EOL] session_id = request . form [ [string] ] [EOL] if [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] team_name = request . form . get ( [string] ) [EOL] if not student . check_dup_student ( request . form [ [string] ] , session_id ) : [EOL] [comment] [EOL] [comment] [EOL] error = [string] + str ( request . form [ [string] ] ) + [string] [EOL] return render_template ( [string] , team_name = team_name , session_id = session_id , error = error ) [EOL] if request . form [ [string] ] != [string] : [EOL] [comment] [EOL] [comment] [EOL] if self . valid_email ( str ( request . form [ [string] ] ) ) is False : [EOL] error = [string] [EOL] return render_template ( [string] , team_name = team_name , session_id = session_id , error = error ) [EOL] [comment] [EOL] student . insert_student ( request . form [ [string] ] , request . form [ [string] ] , request . form [ [string] ] , session_id , team_name ) [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] students = request . form . getlist ( [string] ) [EOL] team_name = request . form . get ( [string] ) [EOL] [comment] [EOL] student . remove_student ( students , team_name , session_id ) [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] team_name = request . form . get ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] team_name = team_name [ [number] : ] [EOL] [comment] [EOL] team . remove_team ( team_name , session_id ) [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] professors = gbmodel . professors ( ) [EOL] prof_list = professors . get_all_professors ( ) [EOL] while not session . check_term_name ( request . form [ [string] ] ) : [EOL] error = [string] [EOL] return render_template ( [string] , error = error , session_id = session_id , prof_list = prof_list ) [EOL] while not session . check_term_year ( request . form [ [string] ] ) : [EOL] error = [string] [EOL] return render_template ( [string] , error = error , session_id = session_id , prof_list = prof_list ) [EOL] while not professor . check_professor ( request . form [ [string] ] ) : [EOL] error = [string] [EOL] return render_template ( [string] , error = error , session_id = session_id , prof_list = prof_list ) [EOL] while not session . check_dup_session ( request . form [ [string] ] , request . form [ [string] ] , request . form [ [string] ] ) : [EOL] error = [string] [EOL] return render_template ( [string] , error = error , session_id = session_id , prof_list = prof_list ) [EOL] start_term = request . form . get ( [string] ) [EOL] start_year = request . form . get ( [string] ) [EOL] start_term = start_term . replace ( [string] , [string] ) [EOL] start_year = start_year . replace ( [string] , [string] ) [EOL] professor_id = request . form . get ( [string] ) [EOL] professor_id = professor_id . replace ( [string] , [string] ) [EOL] session_id = session . insert_session ( start_term , start_year , professor_id ) [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [comment] [EOL] elif [string] in request . form : [EOL] while not session . check_session_id_valid ( request . form [ [string] ] ) : [EOL] error = [string] [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] remove_session = request . form . get ( [string] ) [EOL] remove_session = remove_session . replace ( [string] , [string] ) [EOL] session . remove_session ( session_id ) [EOL] session_id = session . get_max ( ) - [number] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [comment] [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] if not team . check_dup_team ( request . form [ [string] ] , session_id ) : [EOL] [comment] [EOL] [comment] [EOL] error = [string] [EOL] return render_template ( [string] , error = error , session_id = session_id ) [EOL] team_name = request . form . get ( [string] ) [EOL] [comment] [EOL] team . insert_team ( session_id , team_name ) [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [comment] [EOL] elif [string] in request . form : [EOL] size = request . form . get ( [string] ) [EOL] size = int ( size ) [EOL] unassigned_students = student . get_unassigned_students ( session_id ) [EOL] team_names = [ ] [EOL] i = [number] [EOL] while i <= size : [EOL] team_name = ( request . form . get ( [string] + str ( i ) ) ) [EOL] if team . check_dup_team ( team_name , session_id ) is False : [EOL] t_id = team . get_tid_from_name ( team_name , session_id ) [EOL] student . update_team ( unassigned_students [ i - [number] ] . name , session_id , t_id ) [EOL] else : [EOL] team . insert_team ( session_id , team_name ) [EOL] t_id = team . get_tid_from_name ( team_name , session_id ) [EOL] student . update_team ( unassigned_students [ i - [number] ] . name , session_id , t_id ) [EOL] team_names . append ( team_name ) [EOL] i += [number] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [comment] [EOL] elif [string] in request . files : [EOL] session_id = int ( request . form [ [string] ] ) [EOL] teams_table = gbmodel . teams ( ) [comment] [EOL] students_table = gbmodel . students ( ) [comment] [EOL] file = request . files [ [string] ] [EOL] [comment] [EOL] [comment] [EOL] if ( file . filename == [string] ) : [EOL] return render_template ( [string] , session_id = session_id , error = [string] ) [EOL] stream = io . StringIO ( file . stream . read ( ) . decode ( [string] ) , newline = None ) [EOL] csv_reader = csv . reader ( stream , delimiter = [string] ) [EOL] uninserted_students = [ ] [EOL] for row in csv_reader : [EOL] if len ( row ) > [number] : [EOL] return render_template ( [string] , session_id = session_id , error = [string] ) [EOL] try : [EOL] student_name = row [ [number] ] [EOL] student_id = row [ [number] ] [EOL] team_name = row [ [number] ] [EOL] except IndexError : [EOL] logging . warning ( [string] ) [EOL] return render_template ( [string] , session_id = session_id , error = [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] if teams_table . check_dup_team ( team_name , session_id ) is True : [EOL] teams_table . insert_team ( session_id , team_name ) [EOL] except SQLAlchemyError : [EOL] logging . error ( ( [string] [string] ) ) [EOL] return render_template ( [string] , session_id = session_id , error = [string] ) [EOL] try : [EOL] if students_table . check_dup_student ( student_id , session_id ) is True : [EOL] students_table . insert_student ( student_name , [string] , student_id , session_id , team_name ) [EOL] else : [EOL] [comment] [EOL] logging . warning ( [string] [string] ) [EOL] uninserted_students . append ( student_name ) [EOL] except SQLAlchemyError : [EOL] logging . error ( ( [string] [string] ) ) [EOL] return render_template ( [string] , session_id = session_id , error = [string] ) [EOL] [EOL] [comment] [EOL] if len ( uninserted_students ) == [number] : [EOL] logging . info ( [string] ) [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] [comment] [EOL] else : [EOL] error_str = [string] [EOL] error_str = error_str + [string] . join ( uninserted_students ) [EOL] error_str = error_str + [string] [EOL] return render_template ( [string] , session_id = session_id , error = error_str ) [EOL] [EOL] [comment] [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] midterm_start = request . form . get ( [string] ) [EOL] midterm_end = request . form . get ( [string] ) [EOL] final_start = request . form . get ( [string] ) [EOL] final_end = request . form . get ( [string] ) [EOL] params = { [string] : midterm_start , [string] : midterm_end , [string] : final_start , [string] : final_end } [EOL] if session . date_error ( params ) is not None : [EOL] [comment] [EOL] [comment] [EOL] error_msg = session . date_error ( params ) [EOL] return render_template ( [string] , error = error_msg , session_id = session_id ) [EOL] [comment] [EOL] session . insert_dates ( midterm_start , midterm_end , final_start , final_end , session_id ) [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] elif [string] in request . form : [EOL] [comment] [EOL] [comment] [EOL] team_name = request . form . get ( [string] ) [EOL] student_name = request . form . get ( [string] ) [EOL] [comment] [EOL] student . set_lead ( session_id , team_name , student_name ) [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] elif [string] in request . form : [EOL] [comment] [EOL] setting = request . form . get ( [string] ) [EOL] result = student . set_active ( session_id , setting ) [EOL] if result is True : [EOL] [comment] [EOL] lists , sessions = team . dashboard ( session_id ) [EOL] return render_template ( [string] , lists = lists , sessions = sessions , session_id = session_id ) [EOL] else : [EOL] error_msg = [string] [EOL] return render_template ( [string] , error = error_msg , session_id = session_id ) [EOL] [EOL] [EOL] class AddStudent ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] team_name = request . args . get ( [string] ) [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , team_name = str ( team_name ) , session_id = session_id , error = None ) [EOL] [EOL] [EOL] class AddSession ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] [comment] [EOL] old_session_id = request . args . get ( [string] ) [EOL] session = gbmodel . capstone_session ( ) [EOL] [comment] [EOL] session_id = session . get_max ( ) [EOL] professors = gbmodel . professors ( ) [EOL] prof_list = professors . get_all_professors ( ) [EOL] return render_template ( [string] , error = None , session_id = session_id , old_session_id = old_session_id , prof_list = prof_list ) [EOL] [EOL] [EOL] class RemoveSession ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , error = None , session_id = session_id ) [EOL] [EOL] [EOL] class AddTeam ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , error = None , session_id = session_id ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class AddTeamCSV ( MethodView ) : [EOL] @ login_required [comment] [EOL] def get ( self ) : [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , session_id = session_id ) [EOL] [EOL] [EOL] class RemoveTeam ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] team_name = request . args . get ( [string] ) [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , team_name = team_name , session_id = session_id ) [EOL] [EOL] [EOL] class SetDate ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , error = None , session_id = session_id ) [EOL] [EOL] [EOL] class SetAvailable ( MethodView ) : [EOL] [docstring] [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] return render_template ( [string] , error = None , session_id = session_id ) [EOL] [EOL] [EOL] class AssignTeam ( MethodView ) : [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] s_id = request . args . get ( [string] ) [EOL] students_table = gbmodel . students ( ) [EOL] team_table = gbmodel . teams ( ) [EOL] unassigned_students = students_table . get_unassigned_students ( s_id ) [EOL] if unassigned_students is None : [EOL] error = [string] [EOL] return render_template ( [string] , msg = error ) [EOL] sessions = team_table . dashboard ( s_id ) [EOL] return render_template ( [string] , lists = unassigned_students , sessions = sessions , session_id = s_id , error = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 $io.StringIO$ 0 0 0 0 0 $typing.Any$ 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.professors$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] from flask import flash , render_template , request , abort [EOL] from sqlalchemy . exc import SQLAlchemyError [EOL] from flask . views import MethodView [EOL] from datetime import datetime [EOL] import gbmodel [EOL] import logging [EOL] from catCas import validate_student [EOL] from flask_cas import login_required [EOL] [EOL] [EOL] class review ( MethodView ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] human_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] code_fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] @ login_required def display_error ( self , err_str ) : [EOL] [docstring] [EOL] logging . error ( [string] + err_str ) [EOL] abort ( [number] ) [EOL] [EOL] def convert_to_int ( self , to_convert ) : [EOL] [docstring] [EOL] try : [EOL] to_convert = int ( to_convert ) [EOL] except ValueError : [EOL] self . display_error ( [string] ) [EOL] [EOL] return to_convert [EOL] [EOL] def get_self_name ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] student = gbmodel . students ( ) . get_student_in_session ( user_id , capstone_id ) [EOL] [comment] [EOL] name = student . name [EOL] except SQLAlchemyError : [EOL] self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] if name is None : [EOL] self . display_error ( [string] ) [EOL] [EOL] return name [EOL] [EOL] def get_tid ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] [comment] [EOL] tid = [number] [EOL] try : [EOL] student = gbmodel . students ( ) . get_student_in_session ( user_id , capstone_id ) [EOL] [comment] [EOL] tid = student . tid [EOL] except SQLAlchemyError : [EOL] self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] if tid is None : [EOL] self . display_error ( [string] ) [EOL] [EOL] return tid [EOL] [EOL] def get_state ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] state = gbmodel . capstone_session ( ) . check_review_state ( capstone_id , datetime . now ( ) ) [EOL] except SQLAlchemyError : [EOL] logging . error ( [string] ) [EOL] return [string] [EOL] [EOL] [comment] [EOL] return state [EOL] [EOL] def get_done ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] try : [EOL] student = gbmodel . students ( ) . get_student_in_session ( user_id , capstone_id ) [EOL] if student is None : [EOL] return None [EOL] [EOL] [comment] [EOL] state = self . get_state ( user_id , capstone_id ) [EOL] if state == [string] : [EOL] return None [EOL] [EOL] [comment] [EOL] done = [number] [EOL] if state == [string] : [EOL] [comment] [EOL] done = student . midterm_done [EOL] elif state == [string] : [EOL] [comment] [EOL] done = student . final_done [EOL] else : [EOL] return None [EOL] [EOL] return done [EOL] except SQLAlchemyError : [EOL] return None [EOL] [EOL] def check_available ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] student = gbmodel . students ( ) . get_student_in_session ( user_id , capstone_id ) [EOL] if student is None : [EOL] return False [EOL] [EOL] [comment] [EOL] if student . active == [string] : [EOL] return True [EOL] else : [EOL] return False [EOL] except SQLAlchemyError : [EOL] return False [EOL] [EOL] def confirm_user ( self , user_id , capstone_id ) : [EOL] [docstring] [EOL] [comment] [EOL] student = gbmodel . students ( ) . get_student_in_session ( user_id , capstone_id ) [EOL] if student is None : [EOL] return False [EOL] [EOL] [comment] [EOL] available = self . check_available ( user_id , capstone_id ) [EOL] if available is False : [EOL] return False [EOL] [EOL] [comment] [EOL] state = self . get_state ( user_id , capstone_id ) [EOL] if state == [string] : [EOL] return False [EOL] [EOL] [comment] [EOL] done = [number] [EOL] if state == [string] : [EOL] [comment] [EOL] done = student . midterm_done [EOL] elif state == [string] : [EOL] [comment] [EOL] done = student . final_done [EOL] else : [EOL] return False [EOL] [EOL] if done == [number] : [EOL] return True [EOL] [EOL] [comment] [EOL] return True [EOL] [EOL] def get_data ( self , id , capstone_id ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] tid = self . get_tid ( id , capstone_id ) [EOL] state = self . get_state ( id , capstone_id ) [EOL] is_final = False [EOL] if state == [string] : [EOL] is_final = True [EOL] [EOL] itemize = [ ] [comment] [EOL] dat = { } [comment] [EOL] [comment] [EOL] reports = gbmodel . reports ( ) . get_team_reports ( tid , is_final ) [EOL] for report in reports : [EOL] if report . reviewer == id : [EOL] dat [ [string] ] = report . reviewee [EOL] dat [ [string] + report . reviewee ] = report . tech_mastery [EOL] dat [ [string] + report . reviewee ] = report . work_ethic [EOL] dat [ [string] + report . reviewee ] = report . communication [EOL] dat [ [string] + report . reviewee ] = report . cooperation [EOL] dat [ [string] + report . reviewee ] = report . initiative [EOL] dat [ [string] + report . reviewee ] = report . team_focus [EOL] dat [ [string] + report . reviewee ] = report . contribution [EOL] dat [ [string] + report . reviewee ] = report . leadership [EOL] dat [ [string] + report . reviewee ] = report . organization [EOL] dat [ [string] + report . reviewee ] = report . delegation [EOL] dat [ [string] + report . reviewee ] = report . points [EOL] dat [ [string] + report . reviewee ] = report . strengths [EOL] dat [ [string] + report . reviewee ] = report . weaknesses [EOL] dat [ [string] + report . reviewee ] = report . traits_to_work_on [EOL] if report . what_you_learned is not None : [EOL] dat [ [string] ] = report . what_you_learned [EOL] if report . proud_of_accomplishment is not None : [EOL] dat [ [string] ] = report . proud_of_accomplishment [EOL] itemize . append ( dat ) [EOL] [EOL] return itemize [EOL] except SQLAlchemyError : [EOL] return None [EOL] [EOL] def get ( self , capstone_id ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] if validate_student ( ) is False : [EOL] return render_template ( [string] ) [EOL] else : [EOL] user_id = validate_student ( ) . id [EOL] [comment] [EOL] tid = self . get_tid ( user_id , capstone_id ) [EOL] [comment] [EOL] try : [EOL] empty_team = gbmodel . teams ( ) . get_tid_from_name ( [string] , capstone_id ) [EOL] if tid == empty_team : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] except SQLAlchemyError : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] test_user = self . confirm_user ( user_id , capstone_id ) [EOL] if test_user is False : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] [comment] [EOL] user_name = self . get_self_name ( user_id , capstone_id ) [EOL] [EOL] [comment] [EOL] try : [EOL] mems = gbmodel . students ( ) . get_team_members ( tid ) [EOL] except SQLAlchemyError : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] if mems is None : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] [comment] [EOL] state = self . get_state ( user_id , capstone_id ) [EOL] if state == [string] : [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] [comment] [EOL] data = self . get_data ( user_id , capstone_id ) [EOL] done = self . get_done ( user_id , capstone_id ) [EOL] [comment] [EOL] return render_template ( [string] , name = user_name , user_id = user_id , mems = mems , state = state , data = data , is_done = done , human_fields = self . human_fields , code_fields = self . code_fields , input_error = None , fatal_error = None ) [EOL] [EOL] def post ( self , capstone_id ) : [EOL] [docstring] [EOL] [comment] [EOL] user_id = request . form . get ( [string] ) [EOL] test_user = self . confirm_user ( user_id , capstone_id ) [EOL] if test_user is False : [EOL] logging . error ( [string] ) [EOL] return render_template ( [string] , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] [comment] [EOL] tid = self . get_tid ( user_id , capstone_id ) [EOL] [comment] [EOL] state = self . get_state ( user_id , capstone_id ) [EOL] if state == [string] : [EOL] logging . error ( [string] ) [EOL] return render_template ( [string] , name = self . get_self_name ( user_id ) , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [comment] [EOL] try : [EOL] mems = gbmodel . students ( ) . get_team_members ( tid ) [EOL] except SQLAlchemyError : [EOL] logging . error ( [string] ) [EOL] return render_template ( [string] , name = self . get_self_name ( ) , mems = None , state = None , input_error = None , fatal_error = [string] ) [EOL] [EOL] [comment] [EOL] cid = capstone_id [EOL] [EOL] [comment] [EOL] id_list = [ ] [EOL] for mem in mems : [EOL] if mem is not None : [EOL] id_list . append ( mem . id ) [EOL] [EOL] [comment] [EOL] total = [number] [EOL] points_pass = True [EOL] [EOL] [comment] [EOL] for j in id_list : [EOL] logging . info ( [string] ) [EOL] [comment] [EOL] points = request . form [ ( [string] + str ( j ) ) ] [EOL] try : [EOL] try : [EOL] [comment] [EOL] points = int ( points ) [EOL] except ValueError : [EOL] flash ( [string] ) [EOL] points_pass = False [EOL] [EOL] if points < [number] : [EOL] flash ( [string] ) [EOL] points_pass = False [EOL] [EOL] if points_pass is True : [EOL] [comment] [EOL] total = total + points [EOL] [EOL] if j == user_id : [EOL] [comment] [EOL] if points > [number] or points < [number] : [EOL] flash ( [string] ) [EOL] points_pass = False [EOL] except ValueError : [EOL] self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] if total != [number] : [EOL] flash ( [string] ) [EOL] points_pass = False [EOL] [EOL] done = self . get_done ( user_id , capstone_id ) [EOL] [comment] [EOL] if points_pass is True : [EOL] logging . info ( [string] ) [EOL] pass_insert = True [comment] [EOL] for i in id_list : [EOL] [comment] [EOL] tech = request . form [ ( [string] + str ( i ) ) ] [EOL] tech = self . convert_to_int ( tech ) [EOL] [EOL] ethic = request . form [ ( [string] + str ( i ) ) ] [EOL] ethic = self . convert_to_int ( ethic ) [EOL] [EOL] com = request . form [ ( [string] + str ( i ) ) ] [EOL] com = self . convert_to_int ( com ) [EOL] [EOL] coop = request . form [ ( [string] + str ( i ) ) ] [EOL] coop = self . convert_to_int ( coop ) [EOL] [EOL] init = request . form [ ( [string] + str ( i ) ) ] [EOL] init = self . convert_to_int ( init ) [EOL] [EOL] focus = request . form [ ( [string] + str ( i ) ) ] [EOL] focus = self . convert_to_int ( focus ) [EOL] [EOL] cont = request . form [ ( [string] + str ( i ) ) ] [EOL] cont = self . convert_to_int ( cont ) [EOL] [EOL] [comment] [EOL] lead = None [EOL] org = None [EOL] dlg = None [EOL] [EOL] [comment] [EOL] try : [EOL] is_lead = gbmodel . students ( ) . check_team_lead ( i , capstone_id ) [EOL] except SQLAlchemyError : [EOL] self . display_error ( [string] ) [EOL] [EOL] if is_lead is True : [EOL] [comment] [EOL] lead = request . form [ ( [string] + str ( i ) ) ] [EOL] lead = self . convert_to_int ( lead ) [EOL] [EOL] org = request . form [ ( [string] + str ( i ) ) ] [EOL] org = self . convert_to_int ( org ) [EOL] [EOL] dlg = request . form [ ( [string] + str ( i ) ) ] [EOL] dlg = self . convert_to_int ( dlg ) [EOL] [EOL] [comment] [EOL] strn = request . form [ ( [string] + str ( i ) ) ] [EOL] strn = strn . strip ( ) [EOL] wkn = request . form [ ( [string] + str ( i ) ) ] [EOL] wkn = wkn . strip ( ) [EOL] traits = request . form [ ( [string] + str ( i ) ) ] [EOL] traits = traits . strip ( ) [EOL] [EOL] learned = None [EOL] if i == user_id : [EOL] learned = request . form [ ( [string] ) ] [EOL] learned = learned . strip ( ) [EOL] if len ( learned ) > [number] : [EOL] print ( [string] ) [EOL] abort ( [number] ) [EOL] [EOL] proud = None [EOL] [comment] [EOL] if self . get_state ( user_id , capstone_id ) == [string] : [EOL] if i == user_id : [EOL] proud = request . form [ ( [string] ) ] [EOL] proud = proud . strip ( ) [EOL] if len ( proud ) > [number] : [EOL] print ( [string] ) [EOL] abort ( [number] ) [EOL] [EOL] points = request . form [ ( [string] + str ( i ) ) ] [EOL] points = points . strip ( ) [EOL] [EOL] if ( ( len ( strn ) > [number] ) or ( len ( wkn ) > [number] ) or ( len ( traits ) > [number] ) ) : [EOL] print ( [string] ) [EOL] abort ( [number] ) [EOL] [EOL] points = self . convert_to_int ( points ) [EOL] [EOL] [comment] [EOL] late = False [EOL] is_final = False [EOL] try : [EOL] logging . info ( [string] ) [EOL] is_not_late = gbmodel . capstone_session ( ) . check_not_late ( cid , datetime . now ( ) , self . get_state ( user_id , capstone_id ) ) [EOL] [EOL] if is_not_late is False : [EOL] late = True [EOL] except SQLAlchemyError : [EOL] self . display_error ( [string] ) [EOL] [EOL] logging . info ( [string] ) [EOL] [EOL] if self . get_state ( user_id , capstone_id ) == [string] : [EOL] [comment] [EOL] is_final = False [EOL] elif self . get_state ( user_id , capstone_id ) == [string] : [EOL] [comment] [EOL] is_final = True [EOL] [EOL] if done == [number] : [EOL] [comment] [EOL] try : [EOL] logging . info ( [string] ) [EOL] report = gbmodel . reports ( ) . get_report ( user_id , i , tid , is_final ) [EOL] if report is not None : [EOL] report . tech_mastery = tech [EOL] report . work_ethic = ethic [EOL] report . communication = com [EOL] report . cooperation = coop [EOL] report . initiative = init [EOL] report . team_focus = focus [EOL] report . contribution = cont [EOL] report . leadership = lead [EOL] report . organization = org [EOL] report . delegation = dlg [EOL] report . points = points [EOL] report . strengths = strn [EOL] report . weaknesses = wkn [EOL] report . traits_to_work_on = traits [EOL] report . what_you_learned = learned [EOL] report . proud_of_accomplishment = proud [EOL] else : [EOL] test_sub = gbmodel . reports ( ) . insert_report ( cid , datetime . now ( ) , user_id , tid , i , tech , ethic , com , coop , init , focus , cont , lead , org , dlg , points , strn , wkn , traits , learned , proud , is_final , late ) [EOL] if test_sub is False : [EOL] logging . error ( [string] ) [EOL] pass_insert = False [EOL] [EOL] except SQLAlchemyError : [EOL] pass_insert = False [EOL] else : [EOL] logging . info ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] test_sub = gbmodel . reports ( ) . insert_report ( cid , datetime . now ( ) , user_id , tid , i , tech , ethic , com , coop , init , focus , cont , lead , org , dlg , points , strn , wkn , traits , learned , proud , is_final , late ) [EOL] [comment] [EOL] if test_sub is False : [EOL] logging . error ( [string] ) [EOL] pass_insert = False [EOL] [EOL] if done == [number] : [EOL] [comment] [EOL] logging . info ( [string] ) [EOL] test_commit = gbmodel . reports ( ) . commit_updates ( pass_insert ) [EOL] else : [EOL] logging . info ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] test_commit = gbmodel . reports ( ) . commit_reports ( user_id , self . get_state ( user_id , capstone_id ) , capstone_id , pass_insert ) [EOL] if test_commit is True : [EOL] [comment] [EOL] return render_template ( [string] ) [EOL] else : [EOL] self . display_error ( [string] ) [EOL] [EOL] return render_template ( [string] , name = self . get_self_name ( user_id , capstone_id ) , mems = mems , human_fields = self . human_fields , code_fields = self . code_fields , state = self . get_state ( user_id , capstone_id ) , input_error = True , fatal_error = None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import gbmodel [EOL] import typing [EOL] import gbmodel [EOL] from flask_cas import CAS [EOL] [EOL] [EOL] def validate_student ( ) : [EOL] [docstring] [EOL] cas = CAS ( ) [EOL] username = cas . username [EOL] students = gbmodel . students ( ) [EOL] found_student = students . validate ( username ) [EOL] if found_student is False : [EOL] return False [EOL] return found_student [EOL] [EOL] [EOL] def validate_professor ( ) : [EOL] [docstring] [EOL] cas = CAS ( ) [EOL] username = cas . username [EOL] professors = gbmodel . professors ( ) [EOL] found_professors = professors . get_professor ( username ) [EOL] if not found_professors : [EOL] return False [EOL] return found_professors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from flask_cas import CAS [EOL] [EOL] db = SQLAlchemy ( ) [EOL] cas = CAS ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , List , Any [EOL] import gbmodel [EOL] import typing [EOL] from flask import request , render_template [EOL] from flask . views import MethodView [EOL] from flask_cas import login_required [EOL] from catCas import validate_professor [EOL] from common_functions import display_access_control_error [EOL] import logging [EOL] import gbmodel [EOL] [EOL] [EOL] class ViewReview ( MethodView ) : [EOL] [docstring] [EOL] [EOL] def interperate_rating ( self , rating ) : [EOL] [docstring] [EOL] if rating is None : [EOL] return [string] [EOL] else : [EOL] interpretation = [string] [EOL] if rating == [number] : [EOL] interpretation = [string] [EOL] elif rating == [number] : [EOL] interpretation = [string] [EOL] elif rating == [number] : [EOL] interpretation = [string] [EOL] elif rating == [number] : [EOL] interpretation = [string] [EOL] elif rating == [number] : [EOL] interpretation = [string] [EOL] return str ( rating ) + [string] + interpretation [EOL] [EOL] def display_error ( self , error ) : [EOL] [docstring] [EOL] [comment] [EOL] logging . error ( [string] + str ( error ) ) [EOL] return render_template ( [string] , error = [string] ) [EOL] [EOL] @ login_required def post ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] [comment] [EOL] reports = gbmodel . reports ( ) [EOL] teams = gbmodel . teams ( ) [EOL] students = gbmodel . students ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not validate_professor ( ) : [EOL] return self . display_error ( ( [string] [string] ) ) [EOL] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] session_id = request . form . getlist ( [string] ) [ [number] ] [EOL] reviewer_id = request . form . getlist ( [string] ) [ [number] ] [EOL] reviewee_id = request . form . getlist ( [string] ) [ [number] ] [EOL] is_final = request . form . getlist ( [string] ) [ [number] ] [EOL] [EOL] [comment] [EOL] reviewer = students . get_student_in_session ( reviewer_id , session_id ) [EOL] if reviewer is None : [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] reviewee = students . get_student_in_session ( reviewee_id , session_id ) [EOL] if reviewee is None : [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] if reviewer . tid != reviewee . tid : [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] team = teams . get_team_from_id ( reviewer . tid ) [EOL] if team is None : [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] report = reports . get_report ( reviewer_id , reviewee_id , reviewer . tid , is_final ) [EOL] if report is not None : [EOL] [comment] [EOL] review_details = { [string] : report . time , [string] : reviewer . name , [string] : reviewee . name , [string] : team . name , [string] : report . is_late , [string] : is_final } [EOL] [EOL] [comment] [EOL] parsed_review = [ { [string] : [string] , [string] : self . interperate_rating ( report . tech_mastery ) } , { [string] : [string] , [string] : self . interperate_rating ( report . work_ethic ) } , { [string] : [string] , [string] : self . interperate_rating ( report . communication ) } , { [string] : [string] , [string] : self . interperate_rating ( report . cooperation ) } , { [string] : [string] , [string] : self . interperate_rating ( report . initiative ) } , { [string] : [string] , [string] : self . interperate_rating ( report . team_focus ) } , { [string] : [string] , [string] : self . interperate_rating ( report . contribution ) } , { [string] : [string] , [string] : self . interperate_rating ( report . leadership ) } , { [string] : [string] , [string] : self . interperate_rating ( report . organization ) } , { [string] : [string] , [string] : self . interperate_rating ( report . delegation ) } , { [string] : [string] , [string] : report . points } , { [string] : [string] , [string] : report . strengths } , { [string] : [string] , [string] : report . weaknesses } , { [string] : [string] , [string] : report . traits_to_work_on } ] [EOL] [EOL] [comment] [EOL] if reviewer_id == reviewee_id : [EOL] parsed_review . append ( { [string] : [string] , [string] : report . what_you_learned } ) [EOL] [EOL] if report . is_final : [EOL] parsed_review . append ( { [string] : [string] , [string] : report . proud_of_accomplishment } ) [EOL] [EOL] [comment] [EOL] return render_template ( [string] , details = review_details , review_data = parsed_review ) [EOL] else : [EOL] [comment] [EOL] return self . display_error ( [string] ) [EOL] [EOL] [comment] [EOL] except Exception as error : [EOL] return self . display_error ( error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $typing.List[typing.Dict[builtins.str,unknown]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import flask [EOL] import typing [EOL] from flask import request , make_response , render_template [EOL] from flask . views import MethodView [EOL] from flask_cas import login_required [EOL] from common_functions import display_access_control_error [EOL] from catCas import validate_professor [EOL] import gbmodel [EOL] [EOL] [EOL] class MissingStudentException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class MissingTeamException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class GeneratedProfessorReportView ( MethodView ) : [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] student_id = request . args . get ( [string] ) [EOL] session_id = request . args . get ( [string] ) [EOL] is_final = request . args . get ( [string] ) [EOL] [comment] [EOL] if is_final == [string] : [EOL] is_final = False [EOL] else : [EOL] is_final = True [EOL] [EOL] try : [EOL] pdf = _make_student_report_pdf ( student_id , session_id , is_final , is_professor_report = True ) [EOL] response = make_response ( pdf ) [EOL] except MissingStudentException : [EOL] response = make_response ( render_template ( [string] ) , [number] ) [EOL] [EOL] return response [EOL] [EOL] [EOL] class GeneratedAnonymousReportView ( MethodView ) : [EOL] @ login_required def get ( self ) : [EOL] [docstring] [EOL] if not validate_professor ( ) : [EOL] return display_access_control_error ( ) [EOL] [EOL] session_id = request . args . get ( [string] ) [EOL] is_final = request . args . get ( [string] ) [EOL] [comment] [EOL] if is_final == [string] : [EOL] is_final = False [EOL] else : [EOL] is_final = True [EOL] [EOL] try : [EOL] pdf = _make_printable_reports ( session_id , is_final ) [EOL] response = make_response ( pdf ) [EOL] except MissingStudentException : [EOL] response = make_response ( render_template ( [string] ) , [number] ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def _make_printable_reports ( session_id , is_final ) : [EOL] [docstring] [EOL] students = gbmodel . students ( ) . get_students_in_session ( session_id ) [EOL] if students is None or len ( students ) <= [number] : [EOL] raise MissingStudentException ( [string] ) [EOL] [EOL] report = [string] [EOL] [EOL] [comment] [EOL] for s in students : [EOL] report = report + _make_student_report_pdf ( s . id , session_id , is_final ) [EOL] return report [EOL] [EOL] [EOL] def _make_student_report_pdf ( student_id , session_id , is_final , is_professor_report = False ) : [EOL] [docstring] [EOL] [comment] [EOL] reports = gbmodel . reports ( ) . get_reports_for_student ( student_id , session_id , is_final ) [EOL] student = gbmodel . students ( ) . get_student_in_session ( student_id , session_id ) [EOL] [EOL] if student is None : [EOL] raise MissingStudentException ( [string] ) [EOL] [EOL] name = student . name [EOL] team_id = student . tid [EOL] team = gbmodel . teams ( ) . get_team_from_id ( team_id ) [EOL] [EOL] if team is None : [EOL] raise MissingTeamException ( [string] ) [EOL] [EOL] team_name = team . name [EOL] [EOL] [comment] [EOL] scores = { [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ ] } [EOL] [EOL] for _ , value in scores . items ( ) : [EOL] for i in range ( [number] ) : [EOL] value . append ( [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] strengths = [ ] [EOL] weaknesses = [ ] [EOL] traits_to_work_on = [ ] [EOL] [EOL] [comment] [EOL] what_you_learned = None [EOL] proud_of_accomplishment = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] points = [number] [EOL] for r in reports : [EOL] for key , value in scores . items ( ) : [EOL] this_score = getattr ( r , key ) [EOL] [comment] [EOL] if this_score is None : [EOL] this_score = [number] [EOL] [comment] [EOL] [comment] [EOL] scores [ key ] [ this_score - [number] ] = scores [ key ] [ this_score - [number] ] + [number] [EOL] [EOL] [comment] [EOL] if is_professor_report : [EOL] reporter = gbmodel . students ( ) . get_student_in_session ( r . reviewer , session_id ) [EOL] [EOL] if reporter is None : [EOL] raise MissingStudentException ( [string] ) [EOL] [EOL] weaknesses . append ( [string] . format ( reporter . name , r . weaknesses ) ) [EOL] strengths . append ( [string] . format ( reporter . name , r . strengths ) ) [EOL] traits_to_work_on . append ( [string] . format ( reporter . name , r . traits_to_work_on ) ) [EOL] [EOL] [comment] [EOL] if r . reviewer == student_id : [EOL] [comment] [EOL] what_you_learned = r . what_you_learned [EOL] [comment] [EOL] proud_of_accomplishment = r . proud_of_accomplishment [EOL] [EOL] [comment] [EOL] elif r . reviewer == student_id : [EOL] weaknesses . append ( [string] . format ( r . weaknesses ) ) [EOL] strengths . append ( [string] . format ( r . strengths ) ) [EOL] traits_to_work_on . append ( [string] . format ( r . traits_to_work_on ) ) [EOL] [EOL] else : [EOL] weaknesses . append ( r . weaknesses ) [EOL] strengths . append ( r . strengths ) [EOL] traits_to_work_on . append ( r . traits_to_work_on ) [EOL] [EOL] [comment] [EOL] points += r . points [EOL] [EOL] [comment] [EOL] for r in reports : [EOL] if r . reviewer == student_id : [EOL] for key , value in scores . items ( ) : [EOL] this_score = getattr ( r , key ) [EOL] if this_score is not None : [EOL] scores [ key ] [ this_score - [number] ] = [string] . format ( scores [ key ] [ this_score - [number] ] ) [EOL] [EOL] [comment] [EOL] html = render_template ( [string] , name = name , team = team_name , scores = scores , points = points , strengths = strengths , weaknesses = weaknesses , traits_to_work_on = traits_to_work_on , what_you_learned = what_you_learned , proud_of_accomplishment = proud_of_accomplishment ) [EOL] [EOL] return html [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 $flask.wrappers.Response$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.wrappers.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.wrappers.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $flask.wrappers.Response$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.wrappers.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.wrappers.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . model_sqlalchemy import teams , students , capstone_session , removed_students , reports , professors [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Dict , Union , List , Any , Type [EOL] import gbmodel [EOL] import types [EOL] import datetime [EOL] import typing [EOL] import os [EOL] import sys [EOL] import datetime [EOL] import logging [EOL] import traceback [EOL] from extensions import db [EOL] from sqlalchemy import exc , func [EOL] [EOL] sys . path . append ( os . getcwd ( ) ) [EOL] [EOL] [EOL] def handle_exception ( ) : [EOL] [comment] [EOL] exception_details = sys . exc_info ( ) [EOL] [EOL] [comment] [EOL] db . session . rollback ( ) [EOL] [EOL] [comment] [EOL] error = [string] . format ( exception_details [ [number] ] . __name__ , exception_details [ [number] ] ) [EOL] logging . error ( error ) [EOL] traceback . print_tb ( exception_details [ [number] ] ) [EOL] [EOL] [EOL] class professors ( db . Model ) : [EOL] [docstring] [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def get_professor ( self , id ) : [EOL] [docstring] [EOL] try : [EOL] result = professors . query . filter ( professors . id == id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] [EOL] if result is None : [EOL] return False [EOL] return result [EOL] [EOL] def get_all_professors ( self ) : [EOL] [docstring] [EOL] try : [EOL] profs = professors ( ) . query . all ( ) [EOL] lists = [ ] [EOL] for i in profs : [EOL] temp = i [EOL] lists . append ( temp ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] profs = None [EOL] [EOL] if profs is None : [EOL] return False [EOL] return lists [EOL] [EOL] def check_professor ( self , prof_id ) : [EOL] [docstring] [EOL] try : [EOL] prof_id = prof_id . strip ( ) . lower ( ) [EOL] result = professors ( ) . query . filter_by ( id = prof_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] [EOL] if result is not None : [EOL] return True [EOL] return False [EOL] [EOL] def prof_id ( self , name ) : [EOL] [docstring] [EOL] try : [EOL] prof = professors . query . filter_by ( name = name ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] prof = None [EOL] [EOL] if prof is None : [EOL] return - [number] [EOL] return prof . id [EOL] [EOL] [EOL] class teams ( db . Model ) : [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def get_max_team_id ( self ) : [EOL] [docstring] [EOL] try : [EOL] max_id = db . session . query ( func . max ( teams . id ) ) . scalar ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] max_id = None [EOL] [EOL] if max_id is None : [EOL] return [number] [EOL] else : [EOL] return max_id + [number] [EOL] [EOL] def check_dup_team ( self , t_name , session_id ) : [EOL] [docstring] [EOL] try : [EOL] result = teams ( ) . query . filter_by ( name = t_name , session_id = session_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] [EOL] if result is not None : [EOL] return False [EOL] return True [EOL] [EOL] def insert_team ( self , session_id , t_name ) : [EOL] [docstring] [EOL] id = self . get_max_team_id ( ) [EOL] new_team = teams ( id = id , session_id = session_id , name = t_name ) [EOL] db . session . add ( new_team ) [EOL] db . session . commit ( ) [EOL] return id [EOL] [EOL] def get_team_session_id ( self , session_id ) : [EOL] [docstring] [EOL] try : [EOL] if str ( session_id ) == [string] : [EOL] team = teams . query . filter_by ( session_id = session_id ) . all ( ) [EOL] return team [EOL] elif session_id : [EOL] team = teams . query . filter_by ( session_id = session_id ) . all ( ) [EOL] return team [EOL] else : [EOL] return None [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def remove_team_from_session ( self , name , session_id ) : [EOL] [docstring] [EOL] try : [EOL] student = students ( ) [EOL] removed_student = removed_students ( ) [EOL] result = teams . query . filter ( teams . name == name , teams . session_id == session_id ) . first ( ) [EOL] [EOL] [comment] [EOL] tid = result . id [EOL] list_students = student . get_students ( tid ) [EOL] if list_students is not None : [EOL] for i in list_students : [EOL] result = students . query . filter ( students . name == i , students . session_id == session_id ) . first ( ) [EOL] removed_student . add_student ( result ) [EOL] student_list = students . query . filter ( students . tid == tid , students . session_id == session_id ) . all ( ) [EOL] [comment] [EOL] reviews = reports . query . filter ( reports . tid == tid ) . all ( ) [EOL] for review in reviews : [EOL] db . session . delete ( review ) [EOL] [EOL] [comment] [EOL] for i in student_list : [EOL] db . session . delete ( i ) [EOL] db . session . commit ( ) [EOL] team = teams . query . filter ( teams . id == tid , teams . session_id == session_id ) . first ( ) [EOL] db . session . delete ( team ) [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def remove_team ( self , name , session_id ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] teams_obj = teams ( ) [EOL] team = teams_obj . query . filter ( teams . name == name , teams . session_id == session_id ) . first ( ) [EOL] [EOL] [comment] [EOL] student_list = students . query . filter ( students . tid == team . id , students . session_id == session_id ) . all ( ) [EOL] [EOL] [comment] [EOL] if student_list : [EOL] [comment] [EOL] [comment] [EOL] if name == [string] : [EOL] return False [EOL] [EOL] [comment] [EOL] empty_team_id = teams_obj . get_tid_from_name ( [string] , session_id ) [EOL] if empty_team_id is None : [EOL] empty_team_id = teams_obj . insert_team ( session_id , [string] ) [EOL] for student in student_list : [EOL] student . midterm_done = False [EOL] student . final_done = False [EOL] student . tid = empty_team_id [EOL] [EOL] [comment] [EOL] reviews = reports . query . filter ( reports . tid == team . id ) . all ( ) [EOL] for review in reviews : [EOL] db . session . delete ( review ) [EOL] [EOL] [comment] [EOL] db . session . delete ( team ) [EOL] [EOL] [comment] [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] [comment] [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def dashboard ( self , session_id ) : [EOL] [docstring] [EOL] student = students ( ) [EOL] session = capstone_session ( ) [EOL] today = datetime . datetime . now ( ) [EOL] sessions = session . get_sessions ( ) [EOL] if self . get_team_session_id ( session_id ) is None : [EOL] return None , sessions [EOL] tids = [ row . id for row in self . get_team_session_id ( session_id ) ] [EOL] team_names = [ row . name for row in self . get_team_session_id ( session_id ) ] [EOL] lists = [ [ ] for _ in range ( len ( tids ) ) ] [EOL] flag = [number] [EOL] for i in range ( len ( tids ) ) : [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] final_points = db . session . query ( func . max ( reports . points ) . label ( [string] ) , func . min ( reports . points ) . label ( [string] ) , reports . reviewee ) . filter_by ( tid = tids [ i ] , is_final = True ) . filter ( reports . reviewee != reports . reviewer ) . group_by ( reports . reviewee ) [EOL] [comment] [EOL] midterm_points = db . session . query ( func . max ( reports . points ) . label ( [string] ) , func . min ( reports . points ) . label ( [string] ) , reports . reviewee ) . filter_by ( tid = tids [ i ] , is_final = False ) . filter ( reports . reviewee != reports . reviewer ) . group_by ( reports . reviewee ) [EOL] [comment] [EOL] team_members = student . query . filter_by ( tid = tids [ i ] , session_id = session_id ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return [string] [EOL] [EOL] temp = [ team_names [ i ] ] [EOL] for team_member in team_members : [EOL] [comment] [EOL] if session . check_review_state ( session_id , today ) == [string] : [EOL] for m in midterm_points : [EOL] if ( team_member . id == m . reviewee ) : [comment] [EOL] params = { [string] : team_member . name , [string] : team_member . id , [string] : [string] , [string] : m . min_points , [string] : m . max_points , [string] : int ( team_member . is_lead ) } [EOL] temp . append ( params ) [EOL] flag = [number] [EOL] [comment] [EOL] elif session . check_review_state ( session_id , today ) == [string] : [EOL] for f in final_points : [EOL] if ( team_member . id == f . reviewee ) : [comment] [EOL] params = { [string] : team_member . name , [string] : team_member . id , [string] : [string] , [string] : f . min_points , [string] : f . max_points , [string] : int ( team_member . is_lead ) } [EOL] temp . append ( params ) [EOL] flag = [number] [EOL] if flag == [number] : [EOL] params = { [string] : team_member . name , [string] : team_member . id , [string] : [string] , [string] : [string] , [string] : [string] , [string] : int ( team_member . is_lead ) } [EOL] temp . append ( params ) [EOL] flag = [number] [EOL] lists [ i ] = temp [EOL] return lists , sessions [EOL] [EOL] def get_team_from_id ( self , team_id ) : [EOL] [docstring] [EOL] try : [EOL] result = teams . query . filter ( teams . id == team_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] return result [EOL] [EOL] [comment] [EOL] def get_tid_from_name ( self , team_name , ses_id ) : [EOL] [docstring] [EOL] try : [EOL] result = teams . query . filter ( teams . name == team_name , teams . session_id == ses_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] if result is not None : [EOL] return result . id [EOL] else : [EOL] return None [EOL] [EOL] [EOL] class students ( db . Model ) : [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def check_dup_student ( self , id , session_id ) : [EOL] [docstring] [EOL] try : [EOL] result = students . query . filter_by ( id = id , session_id = session_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] if result is not None : [EOL] return False [EOL] return True [EOL] [EOL] def insert_student ( self , name , email_address , id , session_id , t_name ) : [EOL] [docstring] [EOL] try : [EOL] result = teams . query . filter ( teams . name == t_name , teams . session_id == session_id ) . first ( ) [EOL] tid = result . id [EOL] new_student = students ( id = id , tid = tid , session_id = session_id , name = name , email_address = email_address , is_lead = False , midterm_done = False , final_done = False , active = [string] ) [EOL] db . session . add ( new_student ) [EOL] db . session . commit ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] return True [EOL] [EOL] def get_students ( self , tid ) : [EOL] [docstring] [EOL] try : [EOL] result = [ r . name for r in students . query . filter_by ( tid = tid ) ] [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] return result [EOL] [EOL] def get_team_members ( self , tid ) : [EOL] [docstring] [EOL] try : [EOL] mems = students . query . filter_by ( tid = tid ) . distinct ( ) . all ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] return mems [EOL] [EOL] def get_students_in_session ( self , session_id ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] results = students . query . filter ( students . session_id == session_id ) . order_by ( students . tid . asc ( ) ) . all ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] return results [EOL] [EOL] def get_user_sessions ( self , student_id ) : [EOL] [docstring] [EOL] try : [EOL] results = [ ] [comment] [EOL] [EOL] [comment] [EOL] student_records = students . query . filter_by ( id = student_id ) . all ( ) [EOL] if student_records is not None : [EOL] [EOL] [comment] [EOL] for rec in student_records : [EOL] cap = capstone_session ( ) . get_sess_by_id ( rec . session_id ) [EOL] if cap is not None : [EOL] results . append ( cap ) [EOL] [EOL] return results [EOL] [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def get_student_in_session ( self , sid , session_id ) : [EOL] [docstring] [EOL] try : [EOL] result = students . query . filter ( students . id == sid , students . session_id == session_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] return result [EOL] [EOL] def remove_student ( self , sts , t_name , session_id ) : [EOL] [docstring] [EOL] try : [EOL] if t_name is None or sts is None : [EOL] return False [EOL] removed_student = removed_students ( ) [EOL] team = teams . query . filter ( teams . name == t_name , teams . session_id == session_id ) . first ( ) [EOL] for i in sts : [EOL] student = students . query . filter ( students . name == i , students . tid == team . id , students . session_id == session_id ) . first ( ) [EOL] removed_student . add_student ( student ) [EOL] st = students . query . filter ( students . id == student . id , students . session_id == session_id ) . first ( ) [EOL] db . session . delete ( st ) [EOL] db . session . commit ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] return True [EOL] [EOL] def validate ( self , id ) : [EOL] [docstring] [EOL] try : [EOL] result = students . query . filter_by ( id = id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] [EOL] if result is None : [EOL] return False [EOL] else : [EOL] return result [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_student ( self , s_id ) : [EOL] try : [EOL] return students . query . filter_by ( id = s_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def update_team ( self , name , s_id , t_id ) : [EOL] try : [EOL] students . query . filter_by ( name = name , session_id = s_id ) . update ( dict ( tid = t_id ) ) [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def check_team_lead ( self , s_id , sess_id ) : [EOL] [docstring] [EOL] try : [EOL] student = students . query . filter ( students . id == s_id , students . session_id == sess_id ) . first ( ) [EOL] if student . is_lead == [number] : [EOL] return True [EOL] else : [EOL] return False [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def get_unassigned_students ( self , s_id ) : [EOL] [docstring] [EOL] try : [EOL] empty_team = teams . query . filter_by ( name = [string] , session_id = s_id ) . first ( ) [EOL] if empty_team : [EOL] return students . query . filter_by ( session_id = s_id , tid = empty_team . id ) . all ( ) [EOL] else : [EOL] return None [EOL] [comment] [EOL] except ( exc . SQLAlchemyError , AttributeError ) : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def edit_student ( self , id , new_name , new_email ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] student = students . query . filter ( students . id == id ) . all ( ) [EOL] if student is None : [EOL] return False [EOL] [EOL] [comment] [EOL] for i in student : [EOL] if new_name != [string] : [EOL] i . name = new_name [EOL] if new_email != [string] : [EOL] i . email_address = new_email [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def set_lead ( self , session_id , team_name , lead ) : [EOL] [docstring] [EOL] [comment] [EOL] if team_name is None or lead is None : [EOL] return False [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] team = teams . query . filter ( teams . session_id == session_id , teams . name == team_name ) . first ( ) [EOL] if team is None : [EOL] return False [EOL] [EOL] [comment] [EOL] student = students . query . filter ( students . tid == team . id ) . all ( ) [EOL] for i in student : [EOL] if i . name == lead : [EOL] i . is_lead = True [EOL] else : [EOL] i . is_lead = False [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def set_active ( self , session_id , option ) : [EOL] [docstring] [EOL] try : [EOL] student = students . query . filter ( students . session_id == session_id ) . all ( ) [EOL] [comment] [EOL] if option == [string] : [EOL] for i in student : [EOL] i . active = [string] [EOL] db . session . commit ( ) [EOL] elif option == [string] : [EOL] for i in student : [EOL] i . active = [string] [EOL] db . session . commit ( ) [EOL] else : [EOL] [comment] [EOL] return False [EOL] [EOL] [comment] [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] [EOL] class capstone_session ( db . Model ) : [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def get_max ( self ) : [EOL] [docstring] [EOL] try : [EOL] max_id = db . session . query ( func . max ( capstone_session . id ) ) . scalar ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] max_id = None [EOL] [EOL] if max_id is None : [EOL] return [number] [EOL] else : [EOL] return max_id + [number] [EOL] [EOL] def insert_session ( self , term , year , professor_id ) : [EOL] [docstring] [EOL] term = term . strip ( ) . lower ( ) [EOL] year = year . strip ( ) . lower ( ) [EOL] e_term = None [EOL] e_year = [number] [EOL] terms = [ [string] , [string] , [string] , [string] ] [EOL] for i in range ( len ( terms ) ) : [EOL] if terms [ i ] == term : [EOL] e_term = terms [ ( i + [number] ) % [number] ] [EOL] e_term = e_term . capitalize ( ) [EOL] if term == [string] : [EOL] e_year = int ( year ) + [number] [EOL] else : [EOL] e_year = year [EOL] id = self . get_max ( ) [EOL] term = term . capitalize ( ) [EOL] year = year . capitalize ( ) [EOL] prof_id = professor_id . lower ( ) [EOL] new_sess = capstone_session ( id = id , start_term = term , start_year = year , end_term = e_term , end_year = e_year , professor_id = prof_id ) [EOL] db . session . add ( new_sess ) [EOL] db . session . commit ( ) [EOL] return id [EOL] [EOL] def remove_session ( self , session_id ) : [EOL] [docstring] [EOL] try : [EOL] team = teams ( ) [EOL] session_teams = team . query . filter_by ( session_id = session_id ) . all ( ) [EOL] del_session = capstone_session . query . filter ( capstone_session . id == session_id ) . first ( ) [EOL] for t in session_teams : [EOL] team_name = t . name [EOL] team . remove_team_from_session ( team_name , session_id ) [EOL] db . session . delete ( del_session ) [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def get_sess_by_id ( self , id ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] return capstone_session . query . filter_by ( id = id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def check_term_name ( self , s_term ) : [EOL] [docstring] [EOL] s_term = s_term . strip ( ) . lower ( ) [EOL] terms = [ [string] , [string] , [string] , [string] ] [EOL] for i in range ( len ( terms ) ) : [EOL] if terms [ i ] == s_term : [EOL] return True [EOL] return False [EOL] [EOL] def check_term_year ( self , s_year ) : [EOL] [docstring] [EOL] check_year = s_year . isdigit ( ) [EOL] if not check_year : [EOL] return False [EOL] return True [EOL] [EOL] def check_session_id_valid ( self , v_id ) : [EOL] [docstring] [EOL] check_id = v_id . isdigit ( ) [EOL] if check_id < [number] : [EOL] return False [EOL] return True [EOL] [EOL] def check_dup_session ( self , s_term , s_year , p_id ) : [EOL] [docstring] [EOL] try : [EOL] s_term = s_term . strip ( ) . lower ( ) . capitalize ( ) [EOL] s_year = s_year . strip ( ) . lower ( ) . capitalize ( ) [EOL] p_id = p_id . strip ( ) . lower ( ) [EOL] result = capstone_session ( ) . query . filter_by ( start_term = s_term , start_year = s_year , professor_id = p_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] result = None [EOL] [EOL] if result is not None : [EOL] return False [EOL] return True [EOL] [EOL] def get_session_id ( self , term , year , prof ) : [EOL] [docstring] [EOL] prof_id = professors ( ) . prof_id ( prof ) [EOL] try : [EOL] id = capstone_session . query . filter ( capstone_session . start_term == term , capstone_session . start_year == year , capstone_session . professor_id == prof_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] id = None [EOL] [EOL] if id is None : [EOL] prof_id = professors ( ) . prof_id ( prof ) [EOL] return self . insert_session ( term , str ( year ) , prof_id ) [EOL] else : [EOL] return id . id [EOL] [EOL] def get_sessions ( self ) : [EOL] [docstring] [EOL] caps = capstone_session . query . all ( ) [EOL] lists = [ ] [EOL] for i in caps : [EOL] prof = professors . query . filter ( professors . id == i . professor_id ) . first ( ) [EOL] if prof is not None : [EOL] temp = str ( i . start_term ) + [string] + str ( i . start_year ) + [string] + str ( prof . name ) + [string] [EOL] lists . append ( temp ) [EOL] return lists [EOL] [EOL] def get_active_sessions ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] currentDate = datetime . datetime . now ( ) [EOL] month = int ( currentDate . month ) [EOL] if month in range ( [number] , [number] ) : [EOL] [comment] [EOL] start_term_1 = [string] [EOL] start_year_1 = currentDate . year - [number] [EOL] [EOL] [comment] [EOL] start_term_2 = [string] [EOL] start_year_2 = currentDate . year [EOL] else : [EOL] [comment] [EOL] start_year_1 = currentDate . year [EOL] start_year_2 = currentDate . year [EOL] [EOL] [comment] [EOL] if month in range ( [number] , [number] ) : [EOL] start_term_1 = [string] [EOL] start_term_2 = [string] [EOL] [comment] [EOL] elif month in range ( [number] , [number] ) : [EOL] start_term_1 = [string] [EOL] start_term_2 = [string] [EOL] [comment] [EOL] else : [EOL] start_term_1 = [string] [EOL] start_term_2 = [string] [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return capstone_session . query . filter ( ( ( capstone_session . start_year == start_year_1 ) & ( capstone_session . start_term == start_term_1 ) ) | ( ( capstone_session . start_year == start_year_2 ) & ( capstone_session . start_term == start_term_2 ) ) ) . all ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def check_dates ( self , start , end ) : [EOL] [docstring] [EOL] params = { [string] : start , [string] : end } [EOL] if params [ [string] ] and params [ [string] ] : [EOL] if int ( params [ [string] ] ) > int ( params [ [string] ] ) : [EOL] return [number] [EOL] else : [EOL] return [number] [EOL] elif params [ [string] ] is None and params [ [string] ] is None : [EOL] return [number] [EOL] return [number] [EOL] [EOL] def date_error ( self , params ) : [EOL] [docstring] [EOL] error_msg = None [EOL] for i in params : [EOL] if params [ i ] : [EOL] params [ i ] = params [ i ] . replace ( [string] , [string] ) [EOL] else : [EOL] params [ i ] = None [EOL] mid = self . check_dates ( params [ [string] ] , params [ [string] ] ) [EOL] final = self . check_dates ( params [ [string] ] , params [ [string] ] ) [EOL] if mid == [number] : [EOL] error_msg = [string] [EOL] return error_msg [EOL] if final == [number] : [EOL] error_msg = [string] [EOL] return error_msg [EOL] elif mid == [number] or final == [number] : [EOL] error_msg = [string] [EOL] return error_msg [EOL] return error_msg [EOL] [EOL] def split_dates ( self , params ) : [EOL] [docstring] [EOL] for i in params : [EOL] if params [ i ] : [EOL] params [ i ] = params [ i ] . split ( [string] ) [EOL] params [ i ] = datetime . datetime ( int ( params [ i ] [ [number] ] ) , int ( params [ i ] [ [number] ] ) , int ( params [ i ] [ [number] ] ) ) [EOL] else : [EOL] params [ i ] = None [EOL] return params [EOL] [EOL] def insert_dates ( self , midterm_start , midterm_end , final_start , final_end , session_id ) : [EOL] [docstring] [EOL] review_dates = { [string] : midterm_start , [string] : midterm_end , [string] : final_start , [string] : final_end } [EOL] dates = self . split_dates ( review_dates ) [EOL] params = { [string] : dates [ [string] ] , [string] : dates [ [string] ] , [string] : dates [ [string] ] , [string] : dates [ [string] ] , [string] : session_id } [EOL] for i in params : [EOL] if params [ i ] : [EOL] params [ i ] = params [ i ] [EOL] else : [EOL] params [ i ] = None [EOL] session = capstone_session . query . filter ( capstone_session . id == session_id ) . first ( ) [EOL] session . midterm_start = params [ [string] ] [EOL] session . midterm_end = params [ [string] ] [EOL] session . final_start = params [ [string] ] [EOL] session . final_end = params [ [string] ] [EOL] db . session . commit ( ) [EOL] return True [EOL] [EOL] def check_review_state ( self , session_id , date ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] session = capstone_session . query . filter ( capstone_session . id == session_id ) . first ( ) [EOL] [comment] [EOL] if session . final_start is not None : [EOL] [comment] [EOL] if date >= session . final_start : [EOL] return [string] [EOL] elif session . midterm_start is not None : [EOL] [comment] [EOL] if date >= session . midterm_start : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] elif session . midterm_start is not None : [EOL] [comment] [EOL] if date >= session . midterm_start : [EOL] return [string] [EOL] [EOL] else : [EOL] [comment] [EOL] return [string] [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return [string] [EOL] [EOL] def check_not_late ( Self , session_id , date , type ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] session = capstone_session . query . filter ( capstone_session . id == session_id ) . first ( ) [EOL] [EOL] [comment] [EOL] [EOL] if type == [string] : [EOL] [comment] [EOL] if session . midterm_end is not None : [EOL] [comment] [EOL] if date <= session . midterm_end : [EOL] [comment] [EOL] return True [EOL] else : [EOL] [comment] [EOL] return False [EOL] else : [EOL] [comment] [EOL] return False [EOL] elif type == [string] : [EOL] [comment] [EOL] if session . final_end is not None : [EOL] [comment] [EOL] if date <= session . final_end : [EOL] [comment] [EOL] return True [EOL] else : [EOL] [comment] [EOL] return False [EOL] else : [EOL] [comment] [EOL] return False [EOL] else : [EOL] [comment] [EOL] return False [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] [EOL] class reports ( db . Model ) : [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def get_reports_for_student ( self , student_id , session_id , is_final = None ) : [EOL] [docstring] [EOL] try : [EOL] reviews = { } [EOL] if is_final is not None : [EOL] reviews = reports . query . filter ( reports . reviewee == student_id , reports . session_id == session_id , reports . is_final == is_final ) . all ( ) [EOL] else : [EOL] reviews = reports . query . filter ( reports . reviewee == student_id , reports . session_id == session_id ) . all ( ) [EOL] return reviews [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def get_report ( self , reviewer_id , reviewee_id , team_id , is_final ) : [EOL] [docstring] [EOL] try : [EOL] return reports . query . filter ( reports . reviewer == reviewer_id , reports . tid == team_id , reports . is_final == is_final , reports . reviewee == reviewee_id ) . first ( ) [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def get_team_reports ( self , tid , is_final ) : [EOL] [docstring] [EOL] try : [EOL] result = reports . query . filter ( reports . tid == tid , reports . is_final == is_final ) . distinct ( ) . all ( ) [EOL] return result [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] return None [EOL] [EOL] def insert_report ( self , sess_id , time , reviewer , tid , reviewee , tech , ethic , com , coop , init , focus , cont , lead , org , dlg , points , strn , wkn , traits , learned , proud , is_final , late ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] new_report = reports ( session_id = sess_id , time = time , reviewer = reviewer , tid = tid , reviewee = reviewee , tech_mastery = tech , work_ethic = ethic , communication = com , cooperation = coop , initiative = init , team_focus = focus , contribution = cont , leadership = lead , organization = org , delegation = dlg , points = points , strengths = strn , weaknesses = wkn , traits_to_work_on = traits , what_you_learned = learned , proud_of_accomplishment = proud , is_final = is_final , is_late = late ) [EOL] [comment] [EOL] db . session . add ( new_report ) [EOL] print ( [string] ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] [comment] [EOL] handle_exception ( ) [EOL] return False [EOL] [EOL] def commit_reports ( self , id , state , sess_id , success ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] if success is False : [EOL] try : [EOL] print ( [string] ) [EOL] db . session . rollback ( ) [EOL] except exc . SQLAlchemyError : [EOL] return False [EOL] return False [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] student = students . query . filter_by ( id = id , session_id = sess_id ) . first ( ) [EOL] if state == [string] : [EOL] student . midterm_done = [number] [EOL] elif state == [string] : [EOL] student . final_done = [number] [EOL] else : [EOL] return False [EOL] [EOL] print ( [string] ) [EOL] [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] print ( [string] ) [EOL] return False [EOL] [EOL] def commit_updates ( self , success ) : [EOL] [docstring] [EOL] try : [EOL] if success is False : [EOL] print ( [string] ) [EOL] db . session . rollback ( ) [EOL] return False [EOL] else : [EOL] print ( [string] ) [EOL] db . session . commit ( ) [EOL] return True [EOL] except exc . SQLAlchemyError : [EOL] handle_exception ( ) [EOL] print ( [string] ) [EOL] return False [EOL] [EOL] [EOL] class removed_students ( db . Model ) : [EOL] __table__ = db . Model . metadata . tables [ [string] ] [EOL] [EOL] def add_student ( self , s ) : [EOL] [docstring] [EOL] if s is None : [EOL] return False [EOL] current_date = datetime . datetime . now ( ) [EOL] removed_student = removed_students ( id = s . id , tid = s . tid , session_id = s . session_id , name = s . name , is_lead = s . is_lead , midterm_done = s . midterm_done , final_done = s . final_done , removed_date = current_date ) [EOL] db . session . add ( removed_student ) [EOL] db . session . commit ( ) [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.professors]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.teams]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.List[typing.Any]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.students]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.students$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.capstone_session]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.capstone_session$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 $typing.Any$ 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.teams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $datetime.datetime$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $datetime.datetime$ 0 0 0 $builtins.int$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.reports]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.reports$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gbmodel.model_sqlalchemy.removed_students]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $gbmodel.model_sqlalchemy.removed_students$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import sqlite3 [EOL] import typing [EOL] from capstone360 . setup_mockup_db import names , generate_student_data , generate_tables , fill_tables_with_data [EOL] import sqlite3 [EOL] import os [EOL] [EOL] [comment] [EOL] mockup_db_path = [string] [EOL] [EOL] [EOL] def test_generate_student_data ( ) : [EOL] student_data = generate_student_data ( ) [EOL] student_ids = [ ] [EOL] [EOL] for student in student_data : [EOL] [comment] [EOL] assert ( student [ [string] ] in names ) [EOL] [EOL] [comment] [EOL] student_name = student [ [string] ] . split ( [string] ) [EOL] assert ( len ( student_name ) == [number] ) [EOL] assert ( student [ [string] ] == ( student_name [ [number] ] + [string] + student_name [ [number] ] + [string] ) ) [EOL] [EOL] [comment] [EOL] assert ( student [ [string] ] not in student_ids ) [EOL] student_ids . append ( student [ [string] ] ) [EOL] [EOL] [EOL] def test_generate_tables ( ) : [EOL] [comment] [EOL] connection = sqlite3 . connect ( mockup_db_path ) [EOL] cursor = connection . cursor ( ) [EOL] [EOL] [comment] [EOL] generate_tables ( cursor ) [EOL] [EOL] [comment] [EOL] connection . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] cursor . execute ( [string] ) [EOL] assert ( True is False ) [EOL] except sqlite3 . OperationalError : [EOL] assert (True) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] assert ( not cursor . fetchall ( ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] columns = cursor . fetchall ( ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] [comment] [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] assert ( columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [string] [EOL] and columns [ [number] ] [ [number] ] == [number] [EOL] and columns [ [number] ] [ [number] ] is None [EOL] and columns [ [number] ] [ [number] ] == [number] ) [EOL] [EOL] [comment] [EOL] connection . close ( ) [EOL] [EOL] [EOL] def test_fill_tables_with_data ( ) : [EOL] [comment] [EOL] connection = sqlite3 . connect ( mockup_db_path ) [EOL] cursor = connection . cursor ( ) [EOL] [EOL] [comment] [EOL] fill_tables_with_data ( cursor , generate_student_data ( ) , [number] , [number] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] professors = cursor . fetchall ( ) [EOL] professor_ids = [ ] [EOL] for professor in professors : [EOL] [comment] [EOL] assert ( professor [ [number] ] not in professor_ids ) [EOL] professor_ids . append ( professor [ [number] ] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] sessions = cursor . fetchall ( ) [EOL] session_ids = [ ] [EOL] assert ( len ( sessions ) == [number] ) [EOL] for session in sessions : [EOL] [comment] [EOL] [comment] [EOL] assert ( session [ [number] ] not in session_ids ) [EOL] session_ids . append ( session [ [number] ] ) [EOL] [EOL] [comment] [EOL] assert ( session [ [number] ] in professor_ids ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] teams = cursor . fetchall ( ) [EOL] team_ids = [ ] [EOL] for team in teams : [EOL] [comment] [EOL] [comment] [EOL] assert ( team [ [number] ] in session_ids ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( team [ [number] ] not in team_ids ) [EOL] team_ids . append ( team [ [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( team [ [number] ] ) [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] students = cursor . fetchall ( ) [EOL] student_ids = [ ] [EOL] for student in students : [EOL] [comment] [EOL] [comment] [EOL] assert ( student [ [number] ] in names ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( student [ [number] ] not in student_ids ) [EOL] student_ids . append ( student [ [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] cursor . execute ( [string] ) [EOL] reviews = cursor . fetchall ( ) [EOL] for review in reviews : [EOL] [comment] [EOL] [comment] [EOL] assert ( review [ [number] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( review [ [number] ] in session_ids ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( review [ [number] ] in student_ids ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert ( review [ [number] ] in team_ids ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert ( review [ [number] ] in student_ids ) [EOL] [EOL] [comment] [EOL] connection . close ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] os . remove ( mockup_db_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
def test_hello_world ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Tuple , Dict , Union , List , Any [EOL] import sqlite3 [EOL] import typing [EOL] import sqlite3 [EOL] [EOL] [comment] [EOL] names = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] professors = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] [comment] [EOL] example_review = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : ( [string] [string] ) , [string] : ( [string] [string] [string] [string] ) , [string] : ( [string] [string] [string] [string] [string] ) , [string] : [string] } [EOL] [EOL] [EOL] def generate_student_data ( ) : [EOL] id_num = [number] [EOL] student_data = [ ] [EOL] for name in names : [EOL] [comment] [EOL] split_names = name . split ( [string] ) [EOL] email_address = ( split_names [ [number] ] + [string] + split_names [ [number] ] + [string] ) [EOL] [EOL] [comment] [EOL] student_id = id_num [EOL] id_num = id_num + [number] [EOL] [EOL] [comment] [EOL] student_data . append ( { [string] : name , [string] : email_address , [string] : student_id } ) [EOL] [EOL] return student_data [EOL] [EOL] [EOL] def generate_tables ( cursor ) : [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) ) [EOL] [EOL] [EOL] def fill_tables_with_data ( cursor , student_data , num_sessions , num_teams ) : [EOL] [comment] [EOL] start_year = [number] [EOL] end_year = [number] [EOL] start_term_index = [number] [EOL] end_term_index = [number] [EOL] terms = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] for professor in professors : [EOL] cursor . execute ( [string] , professor ) [EOL] [EOL] [comment] [EOL] for session_id in range ( num_sessions ) : [EOL] [comment] [EOL] if ( start_term_index > [number] ) : [EOL] start_term_index = [number] [EOL] start_year = start_year + [number] [EOL] [EOL] if ( end_term_index > [number] ) : [EOL] end_term_index = [number] [EOL] end_year = end_year + [number] [EOL] [EOL] [comment] [EOL] cursor . execute ( ( [string] [string] ) , ( session_id , terms [ start_term_index ] , start_year , terms [ end_term_index ] , end_year , professors [ session_id % [number] ] [ [number] ] ) ) [EOL] [EOL] [comment] [EOL] start_term_index = start_term_index + [number] [EOL] end_term_index = end_term_index + [number] [EOL] [EOL] [comment] [EOL] for team_id in range ( num_teams ) : [EOL] team_number = team_id + ( session_id * num_teams ) [EOL] cursor . execute ( [string] , ( team_number , session_id , [string] + str ( team_number ) ) ) [EOL] [EOL] [comment] [EOL] for student in student_data : [EOL] [comment] [EOL] student_id = student [ [string] ] + ( len ( student_data ) * session_id ) [EOL] team_id = student [ [string] ] % num_teams + ( num_teams * session_id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] is_team_lead = False [EOL] if ( student [ [string] ] < num_teams ) : [EOL] is_team_lead = True [EOL] [EOL] [comment] [EOL] cursor . execute ( [string] , ( str ( student_id ) , team_id , session_id , student [ [string] ] , is_team_lead , False , False , [string] , student [ [string] ] ) ) [EOL] [EOL] [EOL] def run ( ) : [EOL] [comment] [EOL] connection = sqlite3 . connect ( [string] ) [EOL] cursor = connection . cursor ( ) [EOL] generate_tables ( cursor ) [EOL] [EOL] [comment] [EOL] fill_tables_with_data ( cursor , generate_student_data ( ) , [number] , [number] ) [EOL] [EOL] [comment] [EOL] connection . commit ( ) [EOL] connection . close ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if ( __name__ == [string] ) : [EOL] run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0