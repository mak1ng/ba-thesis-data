from typing import Dict , List [EOL] import typing [EOL] import tools [EOL] import builtins [EOL] from typing import Dict , List [EOL] [EOL] class Project ( ) : [EOL] def __init__ ( self , repo , title , languages , featured , description , url ) : [EOL] self . repo = repo [EOL] self . title = title [EOL] self . languages = languages [EOL] self . featured = featured [EOL] self . description = description [EOL] self . url = url [EOL] [EOL] @ staticmethod def deserialize ( data ) : [EOL] return Project ( repo = data . get ( [string] ) , title = data . get ( [string] ) , languages = data . get ( [string] ) , featured = data . get ( [string] , False ) , description = data . get ( [string] ) , url = data . get ( [string] ) , ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . repo , [string] : self . title , [string] : self . languages , [string] : self . featured , [string] : self . description , [string] : self . url , } [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . repo , self . title ) [EOL] [EOL] class Contribution ( ) : [EOL] def __init__ ( self , pull , issue , description ) : [EOL] self . pull = pull [EOL] self . issue = issue [EOL] self . description = description [EOL] [EOL] @ staticmethod def deserialize ( data ) : [EOL] return Contribution ( pull = data . get ( [string] ) , issue = data . get ( [string] ) , description = data . get ( [string] ) ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : self . pull , [string] : self . issue , [string] : self . description , } [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . description ) [EOL] [EOL] class ConfigFile ( ) : [EOL] def __init__ ( self , projects , contributions ) : [EOL] self . projects = projects [EOL] self . contributions = contributions [EOL] [EOL] @ staticmethod def deserialize ( data ) : [EOL] projects = [ Project . deserialize ( o ) for o in data [ [string] ] ] [EOL] contributions = [ Contribution . deserialize ( o ) for o in data [ [string] ] ] [EOL] return ConfigFile ( contributions = contributions , projects = projects ) [EOL] [EOL] def serialize ( self ) : [EOL] return { [string] : [ p . serialize ( ) for p in self . projects ] , [string] : [ c . serialize ( ) for c in self . contributions ] , } [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( len ( self . projects ) , len ( self . contributions ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $'Contribution'$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 0 0 0 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 0 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 0 0 0 0 $'ConfigFile'$ 0 $typing.Dict$ 0 0 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 $typing.List[tools.portfolio_builder.dtos.Contribution]$ 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 $typing.List[tools.portfolio_builder.dtos.Project]$ 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import argparse [EOL] import logging [EOL] import typing [EOL] import io [EOL] import jinja2 [EOL] import argparse [EOL] from dtos import Project , Contribution , ConfigFile [EOL] import json [EOL] from jinja2 import Template [EOL] [EOL] from logging import getLogger [EOL] logger = getLogger ( __name__ ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] data_file = open ( args . data ) [EOL] [EOL] data = ConfigFile . deserialize ( json . load ( data_file ) ) [EOL] [EOL] projects = data . projects [EOL] for project in projects : [EOL] print ( project ) [EOL] [EOL] about_template = Template ( open ( [string] ) . read ( ) ) [EOL] output_file = open ( args . output , [string] ) [EOL] output_file . write ( about_template . render ( projects = projects , contributions = data . contributions ) ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern , Any [EOL] import argparse [EOL] import typing [EOL] import logging [EOL] import io [EOL] import argparse [EOL] from github import Github [EOL] from typing import Dict , List [EOL] import json [EOL] import yaml [EOL] import re [EOL] import os [EOL] from dtos import Project , Contribution , ConfigFile [EOL] [EOL] import logging [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] PULL_URL_RE = re . compile ( [string] ) [EOL] ISSUES_URL_RE = re . compile ( [string] ) [EOL] [EOL] def main ( ) : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] access_token = os . environ [ [string] ] [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] config_file = open ( args . config_file ) [EOL] [EOL] g = Github ( access_token ) [EOL] [EOL] config = ConfigFile . deserialize ( yaml . load ( config_file ) ) [EOL] [EOL] for project in config . projects : [EOL] if project . repo is not None : [EOL] logger . info ( [string] . format ( project . repo ) ) [EOL] try : [EOL] gh_repo = g . get_repo ( project . repo ) [EOL] project . url = gh_repo . html_url [EOL] [comment] [EOL] if project . languages is None : [EOL] if gh_repo . language : [EOL] project . languages = [ gh_repo . language ] [EOL] [EOL] if project . title is None : [EOL] project . title = gh_repo . name [EOL] [EOL] if project . description is None : [EOL] project . description = gh_repo . description [EOL] [EOL] except Exception as e : [EOL] logger . error ( [string] . format ( project . repo , e ) ) [EOL] continue [EOL] [EOL] for contribution in config . contributions : [EOL] if contribution . description is None : [EOL] logger . info ( [string] . format ( contribution ) ) [EOL] if contribution . pull is not None : [EOL] match = PULL_URL_RE . search ( contribution . pull ) [EOL] if match is None : [EOL] logger . error ( [string] . format ( contribution . pull ) ) [EOL] else : [EOL] repo , pull_number = match . group ( [number] ) , int ( match . group ( [number] ) ) [EOL] pull = g . get_repo ( repo ) . get_pull ( pull_number ) [EOL] contribution . description = pull . title [EOL] [EOL] elif contribution . issue is not None : [EOL] match = ISSUES_URL_RE . search ( contribution . issue ) [EOL] if match is None : [EOL] logger . error ( [string] . format ( contribution . issue ) ) [EOL] else : [EOL] repo , issue_number = match . group ( [number] ) , int ( match . group ( [number] ) ) [EOL] issue = g . get_repo ( repo ) . get_issue ( issue_number ) [EOL] contribution . description = issue . title [EOL] [EOL] output_file = open ( args . output , [string] ) [EOL] json . dump ( config . serialize ( ) , output_file ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0