from setuptools import setup , find_packages [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , author = [string] , packages = find_packages ( ) , entry_points = { [string] : [ [string] ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] from dataclasses import dataclass [EOL] [EOL] from python_http_client import HTTPError [EOL] from sendgrid import SendGridAPIClient , Mail [EOL] [EOL] from reports . exceptions import SendGridError [EOL] [EOL] DEFAULT_MAIL_FROM = [string] [EOL] DEFAULT_MAIL_SUBJECT = [string] [EOL] [EOL] [EOL] @ dataclass class MailParams : [EOL] [docstring] [EOL] sendgrid_api_key = ... [EOL] from_email = ... [EOL] to_emails = ... [EOL] cc = ... [EOL] subject = ... [EOL] [EOL] @ property def to_emails_list ( self ) : [EOL] [docstring] [EOL] if not self . to_emails : [EOL] return [ ] [EOL] return self . to_emails . split ( [string] ) [EOL] [EOL] @ property def cc_list ( self ) : [EOL] [docstring] [EOL] if not self . cc : [EOL] return [ ] [EOL] return self . cc . split ( [string] ) [EOL] [EOL] @ staticmethod def from_env ( ) : [EOL] [docstring] [EOL] return MailParams ( sendgrid_api_key = os . environ [ [string] ] , from_email = os . environ . get ( [string] , DEFAULT_MAIL_FROM ) , to_emails = os . environ [ [string] ] , cc = os . environ . get ( [string] ) or [string] , subject = os . environ . get ( [string] , DEFAULT_MAIL_SUBJECT ) ) [EOL] [EOL] [EOL] def send ( html , params ) : [EOL] [docstring] [EOL] message = Mail ( from_email = params . from_email , to_emails = params . to_emails_list , subject = params . subject , html_content = html ) [EOL] if params . cc_list : [EOL] message . cc = params . cc_list [EOL] [EOL] client = SendGridAPIClient ( params . sendgrid_api_key ) [EOL] try : [EOL] client . send ( message ) [EOL] except HTTPError as exc : [EOL] raise SendGridError ( [string] . format ( exc . status_code , exc . body ) ) from exc [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import jinja2 [EOL] import reports [EOL] import datetime [EOL] import builtins [EOL] [docstring] [EOL] import datetime [EOL] [EOL] from jinja2 import Environment , PackageLoader , select_autoescape [EOL] [EOL] from reports import report_collector [EOL] [EOL] [EOL] def to_html ( report , since , until ) : [EOL] [docstring] [EOL] env = Environment ( loader = PackageLoader ( [string] , [string] ) , autoescape = select_autoescape ( [ [string] , [string] ] ) ) [EOL] template = env . get_template ( [string] ) [EOL] return template . render ( report = report , since = since , until = until ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import reports [EOL] import logging [EOL] import datetime [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] import json [EOL] import logging [EOL] [EOL] from reports . exceptions import ReportsError , SendGridError , TogglError [EOL] from reports import formats , mail , report_collector [EOL] [EOL] LOGGER = logging . getLogger ( ) [EOL] [EOL] [EOL] def lambda_handler ( event , context ) : [comment] [EOL] [docstring] [EOL] try : [EOL] LOGGER . setLevel ( logging . INFO ) [EOL] LOGGER . info ( [string] ) [EOL] LOGGER . info ( [string] , event ) [EOL] [EOL] today = datetime . date . today ( ) [EOL] since = today - datetime . timedelta ( days = [number] ) [EOL] until = today - datetime . timedelta ( days = [number] ) [EOL] [EOL] toggl_params = report_collector . TogglParams . from_env ( ) [EOL] mail_params = mail . MailParams . from_env ( ) [EOL] [EOL] report = report_collector . fetch ( since , until , toggl_params ) [EOL] report_html = formats . to_html ( report , since , until ) [EOL] mail . send ( report_html , mail_params ) [EOL] [EOL] LOGGER . info ( [string] ) [EOL] [EOL] return { [string] : [number] , [string] : json . dumps ( { [string] : int ( toggl_params . workspace_id ) , [string] : toggl_params . client_ids_list , [string] : mail_params . to_emails_list , [string] : mail_params . cc_list } ) } [EOL] except SendGridError as error : [EOL] LOGGER . exception ( [string] ) [EOL] return { [string] : [number] , [string] : error . description } [EOL] except TogglError as error : [EOL] LOGGER . exception ( [string] ) [EOL] return { [string] : [number] , [string] : error . description } [EOL] except ReportsError as error : [EOL] LOGGER . exception ( [string] ) [EOL] return { [string] : [number] , [string] : error . description } [EOL] except Exception : [comment] [EOL] LOGGER . exception ( [string] ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] lambda_handler ( { } , { } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] [EOL] [EOL] class ReportsError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , description ) : [EOL] super ( ) . __init__ ( description ) [EOL] self . description = description [EOL] [EOL] [EOL] class TogglError ( ReportsError ) : [EOL] [docstring] [EOL] [EOL] [EOL] class SendGridError ( ReportsError ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0