[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from setuptools import setup [EOL] [EOL] lic = [string] [EOL] classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] + lic , [string] , ] [EOL] [EOL] with open ( [string] ) as f : [EOL] requirements = f . read ( ) . split ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = [string] , url = [string] , license = lic , author = [string] , author_email = [string] , classifiers = classifiers , zip_safe = True , setup_requires = [ [string] ] , install_requires = requirements , tests_require = [ [string] ] , packages = [ [string] ] , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Literal , Any , Callable , List , Union , Coroutine , Tuple , Optional [EOL] import typing_extensions [EOL] import functools [EOL] import shanghai [EOL] import tests [EOL] import typing [EOL] import unittest [EOL] import asyncio [EOL] from unittest import mock [EOL] [EOL] import pytest [EOL] [EOL] from shanghai import event [EOL] from shanghai . logging import Logger , get_logger , LogLevels [EOL] [EOL] [comment] [EOL] debug_logger = get_logger ( [string] , [string] ) [EOL] debug_logger . setLevel ( LogLevels . DDEBUG ) [EOL] [EOL] [EOL] @ pytest . fixture def loop ( ) : [EOL] return asyncio . get_event_loop ( ) [EOL] [EOL] [EOL] @ pytest . fixture def evt ( ) : [EOL] return event . build_event ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] class BasePlugin : [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture def sample_plugin ( ) : [EOL] class TestPlugin ( BasePlugin ) : [EOL] @ event . event def on_test ( self ) : [EOL] pass [EOL] [EOL] return TestPlugin [EOL] [EOL] [EOL] class TestPriority : [EOL] [EOL] def test_type ( self ) : [EOL] assert isinstance ( event . Priority . DEFAULT , int ) [EOL] [EOL] def test_order ( self ) : [EOL] assert ( event . Priority . PRE_CORE > event . Priority . CORE > event . Priority . POST_CORE > event . Priority . PRE_DEFAULT > event . Priority . DEFAULT > event . Priority . POST_DEFAULT ) [EOL] [EOL] def test_lookup ( self ) : [EOL] assert event . Priority . lookup ( event . Priority . CORE ) is event . Priority . CORE [EOL] assert event . Priority . lookup ( event . Priority . CORE . value ) is event . Priority . CORE [EOL] assert event . Priority . lookup ( - [number] ) == - [number] [EOL] [EOL] [EOL] class TestEvent : [EOL] [EOL] def test_build_event ( self ) : [EOL] evt = event . build_event ( [string] , arg1 = [string] , arg2 = None ) [EOL] assert evt . name == [string] [EOL] assert evt . args == { [string] : [string] , [string] : None } [EOL] [EOL] [EOL] class TestPrioritizedSetList : [EOL] [EOL] def test_bool ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] [EOL] assert bool ( prio_set_list ) is False [EOL] [EOL] prio_set_list . add ( [number] , None ) [EOL] assert bool ( prio_set_list ) is True [EOL] [EOL] def test_add ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] objs = [ ( i , ) for i in range ( [number] ) ] [EOL] [EOL] prio_set_list . add ( [number] , objs [ [number] ] ) [EOL] assert prio_set_list . list == [ ( [number] , { objs [ [number] ] } ) ] [EOL] [EOL] prio_set_list . add ( [number] , objs [ [number] ] ) [EOL] assert prio_set_list . list == [ ( [number] , { objs [ [number] ] , objs [ [number] ] } ) ] [EOL] [EOL] prio_set_list . add ( [number] , objs [ [number] ] ) [EOL] assert prio_set_list . list == [ ( [number] , { objs [ [number] ] } ) , ( [number] , { objs [ [number] ] , objs [ [number] ] } ) ] [EOL] [EOL] prio_set_list . add ( - [number] , objs [ [number] ] ) [EOL] assert prio_set_list . list == [ ( [number] , { objs [ [number] ] } ) , ( [number] , { objs [ [number] ] , objs [ [number] ] } ) , ( - [number] , { objs [ [number] ] } ) ] [EOL] prio_set_list . add ( - [number] , objs [ [number] ] ) [EOL] assert prio_set_list . list == [ ( [number] , { objs [ [number] ] } ) , ( [number] , { objs [ [number] ] , objs [ [number] ] } ) , ( - [number] , { objs [ [number] ] } ) , ( - [number] , { objs [ [number] ] } ) ] [EOL] [EOL] def test_add_already_added ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] obj = object ( ) [EOL] prio_set_list . add ( [number] , obj ) [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] prio_set_list . add ( [number] , obj ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] prio_set_list . add ( [number] , obj ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_contains ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] obj = object ( ) [EOL] [EOL] prio_set_list . add ( [number] , obj ) [EOL] assert obj in prio_set_list [EOL] [EOL] def test_iter ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] objs = [ ( i , ) for i in range ( [number] ) ] [EOL] for i , obj in enumerate ( objs ) : [EOL] prio_set_list . add ( - i , obj ) [EOL] [EOL] for i , set_ in enumerate ( prio_set_list ) : [EOL] assert set_ == ( - i , { objs [ i ] } ) [EOL] [EOL] def test_remove ( self ) : [EOL] prio_set_list = event . _PrioritizedSetList ( ) [EOL] obj = ( [number] , ) [EOL] [EOL] prio_set_list . add ( [number] , obj ) [EOL] assert prio_set_list [EOL] prio_set_list . remove ( obj ) [EOL] assert not prio_set_list [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] prio_set_list . remove ( obj ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class TestEventDecorator : [EOL] [EOL] def test_no_param_usage ( self ) : [EOL] @ event . event def func_name ( self ) : [EOL] pass [EOL] [EOL] @ event . event def on_test ( self ) : [EOL] pass [EOL] [EOL] assert hasattr ( on_test , [string] ) [EOL] h_info = on_test . _h_info [EOL] assert h_info . event_name == [string] [EOL] assert func_name . _h_info . event_name == [string] [EOL] assert h_info . handler is on_test [EOL] assert h_info . priority is event . Priority . DEFAULT [EOL] assert h_info . should_enable [EOL] assert not h_info . is_async [EOL] [EOL] def test_param_usage ( self ) : [EOL] @ event . event ( [string] , priority = - [number] , enable = False ) def on_test ( self ) : [EOL] pass [EOL] [EOL] assert hasattr ( on_test , [string] ) [EOL] h_info = on_test . _h_info [EOL] assert h_info . event_name == [string] [EOL] assert h_info . handler is on_test [EOL] assert h_info . priority == - [number] [EOL] assert not h_info . should_enable [EOL] assert not h_info . is_async [EOL] [EOL] def test_async_handler ( self ) : [EOL] @ event . event ( enable = False ) async def on_async_test ( self ) : [EOL] pass [EOL] [EOL] assert hasattr ( on_async_test , [string] ) [EOL] h_info = on_async_test . _h_info [EOL] assert h_info . event_name == [string] [EOL] assert h_info . handler is on_async_test [EOL] assert h_info . priority is event . Priority . DEFAULT [EOL] assert not h_info . should_enable [EOL] assert h_info . is_async [EOL] [EOL] def test_prefix ( self ) : [EOL] import functools [EOL] other_event_deco = functools . partial ( event . event , _prefix = [string] ) [EOL] [EOL] @ other_event_deco def on_test ( self ) : [EOL] pass [EOL] [EOL] assert hasattr ( on_test , [string] ) [EOL] h_info = on_test . _h_info [EOL] assert h_info . event_name == [string] [EOL] [EOL] def test_core_event_deco ( self ) : [EOL] @ event . core_event def on_test ( self ) : [EOL] pass [EOL] [EOL] assert hasattr ( on_test , [string] ) [EOL] h_info = on_test . _h_info [EOL] assert h_info . priority is event . Priority . CORE [EOL] [EOL] def test_non_callable ( self ) : [EOL] with pytest . raises ( TypeError ) as excinfo : [EOL] event . event ( [number] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( TypeError ) as excinfo : [EOL] event . event ( [string] ) ( [ ] ) [EOL] excinfo . match ( [string] [string] ) [EOL] [EOL] [EOL] class TestHandlerInstance : [EOL] [EOL] def test_from_handler ( self ) : [EOL] @ event . event def handler ( ) : [EOL] pass [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( handler ) [EOL] assert h_inst . info is handler . _h_info [EOL] assert h_inst . enabled [EOL] assert h_inst . handler is handler . _h_info . handler [EOL] [EOL] def test_from_not_handler ( self ) : [EOL] def func ( ) : [EOL] pass [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] event . HandlerInstance . from_handler ( func ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_hash ( self ) : [EOL] @ event . event def handler ( ) : [EOL] pass [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( handler ) [EOL] h_inst2 = event . HandlerInstance . from_handler ( handler ) [EOL] assert h_inst is not h_inst2 [EOL] assert hash ( h_inst ) == hash ( h_inst2 ) [EOL] assert h_inst != h_inst2 [EOL] [EOL] [EOL] class TestResultSet : [EOL] [EOL] def test_extend ( self , evt , loop ) : [EOL] async def corofunc ( ) : [EOL] pass [EOL] [EOL] coro = corofunc ( ) [EOL] coro2 = corofunc ( ) [EOL] [comment] [EOL] loop . run_until_complete ( coro ) [EOL] loop . run_until_complete ( coro2 ) [EOL] [EOL] rval = event . ReturnValue ( append_events = [ evt ] ) [EOL] rval2 = event . ReturnValue ( eat = True , schedule = { coro } ) [EOL] rval3 = event . ReturnValue ( append_events = [ evt ] , insert_events = [ evt ] , schedule = { coro , coro2 } ) [EOL] [EOL] rset = event . ResultSet ( ) [EOL] rset2 = event . ResultSet ( ) [EOL] [EOL] rset . extend ( rval ) [EOL] assert not rset . eat [EOL] assert rset . append_events == [ evt ] [EOL] rset . extend ( rval2 ) [EOL] assert rset . eat [EOL] assert rset . schedule == { coro } [EOL] rset2 . extend ( rval3 ) [EOL] rset . extend ( rset2 ) [EOL] rset . extend ( None ) [EOL] assert rset . eat [EOL] assert rset . append_events == [ evt , evt ] [EOL] assert rset . insert_events == [ evt ] [EOL] assert rset . schedule == { coro , coro2 } [EOL] [EOL] def test_iadd ( self , evt ) : [EOL] rval = event . ReturnValue ( append_events = [ evt ] ) [EOL] rval2 = event . ReturnValue ( eat = True , append_events = [ evt ] ) [EOL] rset = event . ResultSet ( ) [EOL] [EOL] rset += rval [EOL] rset += rval2 [EOL] rset += None [EOL] assert rset . eat [EOL] assert rset . append_events == [ evt , evt ] [EOL] [EOL] def test_type ( self ) : [EOL] rset = event . ResultSet ( ) [EOL] with pytest . raises ( NotImplementedError ) : [EOL] rset . extend ( [ ] ) [EOL] with pytest . raises ( NotImplementedError ) : [EOL] rset . extend ( False ) [EOL] [EOL] [EOL] class TestEventDispatcher : [EOL] [EOL] @ pytest . fixture def dispatcher ( self ) : [EOL] return event . EventDispatcher ( ) [EOL] [EOL] def test_register ( self , dispatcher ) : [EOL] name = [string] [EOL] [EOL] @ event . event ( name ) async def corofunc ( * args ) : [EOL] return True [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( corofunc ) [EOL] dispatcher . register ( h_inst ) [EOL] assert h_inst in dispatcher . event_map [ [string] ] [EOL] [EOL] def test_register_plugin ( self , dispatcher ) : [EOL] name = [string] [EOL] [EOL] class AClass : [EOL] @ event . event ( name ) def handler ( self ) : [EOL] pass [EOL] [EOL] @ event . event ( name ) async def hander ( self ) : [EOL] pass [EOL] [EOL] obj = AClass ( ) [EOL] h_insts = dispatcher . register_plugin ( obj ) [EOL] assert len ( dispatcher . event_map ) == [number] [EOL] assert len ( h_insts ) == [number] [EOL] for h_inst in h_insts : [EOL] assert h_inst in dispatcher . event_map [ name ] [EOL] [EOL] def test_dispatch ( self , dispatcher , loop ) : [EOL] name = [string] [EOL] args = dict ( zip ( map ( str , range ( [number] ) ) , range ( [number] , [number] ) ) ) [EOL] called = [number] [EOL] [EOL] @ event . event ( name ) async def corofunc ( ** local_args ) : [EOL] nonlocal called [EOL] assert local_args == args [EOL] called += [number] [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( corofunc ) [EOL] dispatcher . register ( h_inst ) [EOL] evt = event . Event ( name , args ) [EOL] evt2 = evt . _replace ( name = evt . name + [string] ) [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt2 ) ) [EOL] [EOL] assert called == [number] [EOL] [EOL] def test_dispatch_priority ( self , dispatcher , loop , evt ) : [EOL] called = list ( ) [EOL] [EOL] @ event . event ( evt . name , priority = [number] ) async def corofunc ( ) : [EOL] called . append ( corofunc ) [EOL] [EOL] @ event . event ( evt . name , priority = [number] ) def corofunc2 ( ) : [EOL] called . append ( corofunc2 ) [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( corofunc ) [EOL] h_inst2 = event . HandlerInstance . from_handler ( corofunc2 ) [EOL] dispatcher . register ( h_inst ) [EOL] dispatcher . register ( h_inst2 ) [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] [EOL] assert called == [ corofunc2 , corofunc ] [EOL] [EOL] def test_dispatch_disabled ( self , dispatcher , loop , evt ) : [EOL] called = [number] [EOL] [EOL] @ event . event ( evt . name , enable = False ) async def corofunc ( ) : [EOL] nonlocal called [EOL] called += [number] [EOL] [EOL] h_inst = event . HandlerInstance . from_handler ( corofunc ) [EOL] dispatcher . register ( h_inst ) [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] assert called == [number] [EOL] [EOL] [comment] [EOL] [EOL] def test_dispatch_exception ( self , loop , evt ) : [EOL] logger = mock . Mock ( Logger ) [EOL] dispatcher = event . EventDispatcher ( logger = logger ) [EOL] called = [number] [EOL] [EOL] @ event . event ( evt . name ) async def corofunc ( ) : [EOL] nonlocal called [EOL] called += [number] [EOL] raise ValueError ( [string] ) [EOL] [EOL] @ event . event ( evt . name ) def handler ( ) : [EOL] nonlocal called [EOL] called += [number] [EOL] raise ValueError ( [string] ) [EOL] [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc ) ) [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( handler ) ) [EOL] assert not logger . exception . called [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] assert called == [number] [EOL] assert logger . exception . call_count == [number] [EOL] [EOL] def test_dispatch_unknown_return ( self , loop , evt ) : [EOL] logger = mock . Mock ( Logger ) [EOL] dispatcher = event . EventDispatcher ( logger = logger ) [EOL] called = False [EOL] [EOL] @ event . event ( evt . name ) async def corofunc ( ) : [EOL] nonlocal called [EOL] called = True [EOL] return [string] [EOL] [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc ) ) [EOL] assert not logger . warning . called [EOL] loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] assert called [EOL] assert logger . warning . call_count == [number] [EOL] [EOL] def test_dispatch_eat ( self , loop , evt ) : [EOL] dispatcher = event . EventDispatcher ( ) [EOL] called = [ False ] * [number] [EOL] [EOL] @ event . event ( evt . name , priority = [number] ) def corofunc ( ) : [EOL] called [ [number] ] = True [EOL] [EOL] @ event . event ( evt . name , priority = [number] ) async def corofunc2 ( ) : [EOL] called [ [number] ] = True [EOL] return event . ReturnValue ( eat = True ) [EOL] [EOL] @ event . event ( evt . name , priority = - [number] ) async def corofunc3 ( ) : [EOL] called [ [number] ] = True [EOL] [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc ) ) [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc2 ) ) [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc3 ) ) [EOL] result = loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] assert result . eat [EOL] assert called == [ True , True , False ] [EOL] [EOL] def test_dispatch_nested_insert ( self , loop , evt ) : [EOL] dispatcher = event . EventDispatcher ( ) [EOL] called = [ [number] ] * [number] [EOL] evt1 = evt [EOL] evt2 = evt . _replace ( name = evt . name + [string] ) [EOL] evt3 = evt . _replace ( name = evt . name + [string] ) [EOL] [EOL] @ event . event ( evt . name ) def corofunc1 ( ) : [EOL] called [ [number] ] += [number] [EOL] return event . ReturnValue ( insert_events = [ evt2 ] , append_events = [ evt ] ) [EOL] [EOL] @ event . event ( evt2 . name ) def corofunc2 ( ) : [EOL] called [ [number] ] += [number] [EOL] return event . ReturnValue ( insert_events = [ evt3 ] , append_events = [ evt2 ] ) [EOL] [EOL] @ event . event ( evt3 . name ) def corofunc3 ( ) : [EOL] called [ [number] ] += [number] [EOL] [EOL] async def corofunc ( ) : [EOL] pass [EOL] [EOL] return event . ReturnValue ( append_events = [ evt3 ] , schedule = { corofunc ( ) } ) [EOL] [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc1 ) ) [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc2 ) ) [EOL] dispatcher . register ( event . HandlerInstance . from_handler ( corofunc3 ) ) [EOL] result = loop . run_until_complete ( dispatcher . dispatch ( evt ) ) [EOL] assert called == [ [number] , [number] , [number] ] [EOL] assert result . append_events == [ evt1 , evt2 , evt3 ] [EOL] assert len ( result . schedule ) == [number] [EOL] [comment] [EOL] loop . run_until_complete ( next ( iter ( result . schedule ) ) ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.logging.Logger$ 0 0 0 0 0 0 0 0 $shanghai.logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $builtins.object$ 0 0 0 $builtins.object$ 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal]$ 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal]$ 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 $typing.Tuple[typing_extensions.Literal]$ 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event._PrioritizedSetList[typing.Any]$ 0 0 0 $typing.Tuple[typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Union[typing.Callable[...,typing.Coroutine[typing.Any,typing.Any,typing.Optional[shanghai.event.ReturnValue]]],typing.Callable[[typing.Callable],typing.Union[typing.Callable[...,typing.Coroutine[typing.Any,typing.Any,typing.Optional[shanghai.event.ReturnValue]]],typing.Callable[...,typing.Optional[shanghai.event.ReturnValue]]]],typing.Callable[...,typing.Optional[shanghai.event.ReturnValue]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 $shanghai.event.HandlerInstance$ 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 $shanghai.event.ResultSet$ 0 0 0 $shanghai.event.ReturnValue$ 0 0 $shanghai.event.ResultSet$ 0 0 0 $shanghai.event.ResultSet$ 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 $typing.Coroutine[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ReturnValue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 $shanghai.event.ReturnValue$ 0 $shanghai.event.ResultSet$ 0 $shanghai.event.ReturnValue$ 0 $shanghai.event.ResultSet$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.ResultSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_event.TestEventDispatcher.test_register_plugin.AClass$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_event.TestEventDispatcher.test_register_plugin.AClass$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 $shanghai.event.Event$ 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 $shanghai.event.Event$ 0 $shanghai.event.Event$ 0 0 0 $builtins.str$ 0 $shanghai.event.Event$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.Event$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.Event$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.HandlerInstance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 $unittest.mock.Mock$ 0 $unittest.mock.Mock$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 $builtins.int$ 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 $unittest.mock.Mock$ 0 $unittest.mock.Mock$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 $builtins.str$ 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import shanghai [EOL] import pytest [EOL] [EOL] from shanghai . irc import Prefix , Message , ServerReply [EOL] from shanghai . irc . message import CtcpMessage , TextMessage [EOL] [EOL] [EOL] class TestPrefix : [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , ( [string] , [string] , [string] ) ) , ( [string] , ( [string] , None , [string] ) ) , ( [string] , ( [string] , None , None ) ) , ( [string] , ( [string] , None , None ) ) , ( [string] , ( [string] , [string] , [string] ) ) , ( [string] , ( [string] , None , None ) ) , ] ) def test_from_string_and_str ( self , string , expected ) : [EOL] prefix = Prefix . from_string ( string ) [EOL] assert tuple ( prefix ) == expected [EOL] assert str ( prefix ) == string . lstrip ( [string] ) [EOL] [EOL] [EOL] class TestMessage : [EOL] [EOL] def test_privmsg ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] assert m . params == [ [string] , [string] ] [EOL] assert m . command == [string] [EOL] [EOL] def test_prefix ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] assert m . prefix == ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] m = Message . from_line ( [string] ) [EOL] assert m . prefix is None [EOL] assert m . command == [string] [EOL] assert m . params == [ [string] , [string] ] [EOL] [EOL] def test_numeric ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] assert m . command == ServerReply . RPL_WELCOME [EOL] [EOL] m = Message . from_line ( [string] ) [EOL] assert m . command == [string] [EOL] [EOL] def test_tags ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] [comment] [EOL] assert m . command == [string] [EOL] assert m . params == [ [string] , [string] ] [EOL] assert m . prefix == ( [string] , None , None ) [EOL] [EOL] [comment] [EOL] assert m . tags == { [string] : [string] , [string] : [string] , [string] : True } [EOL] [EOL] def test_edge_cases ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] assert m . params == [ ] [EOL] [EOL] def test_escape ( self ) : [EOL] s = Message . escape ( [string] ) [EOL] assert s == [string] [EOL] [EOL] def test_repr ( self ) : [EOL] [comment] [EOL] import re [EOL] m = Message . from_line ( [string] ) [EOL] assert re . match ( [string] , repr ( m ) ) [EOL] [EOL] [EOL] class TestCtcpMessage : [EOL] [EOL] def test_message ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] cm = CtcpMessage . from_message ( m ) [EOL] assert cm . command == [string] [EOL] assert cm . params == [ [string] ] [EOL] assert cm . prefix == m . prefix [EOL] [EOL] def test_not_message ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] assert CtcpMessage . from_message ( m ) is None [EOL] [EOL] m = Message . from_line ( [string] ) [EOL] assert CtcpMessage . from_message ( m ) is None [EOL] [EOL] m = Message . from_line ( [string] ) [comment] [EOL] assert CtcpMessage . from_message ( m ) is None [EOL] [EOL] m = Message . from_line ( [string] ) [EOL] assert CtcpMessage . from_message ( m ) is None [EOL] [EOL] [EOL] class TestTextMessage : [EOL] [EOL] def test_attrs ( self ) : [EOL] m = Message . from_line ( [string] ) [EOL] tm = TextMessage . from_message ( m ) [EOL] assert tm . sender == [string] [EOL] assert tm . target == [string] [EOL] assert tm . line == [string] [EOL] assert tm . words == [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Prefix$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Prefix$ 0 0 0 0 0 0 0 $shanghai.irc.message.Prefix$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $shanghai.irc.message.Message$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] class TestLicense : [EOL] [EOL] def test_pyfiles ( self ) : [EOL] files = [ ] [EOL] for path , dirnames , filenames in os . walk ( [string] ) : [EOL] if path == [string] : [EOL] for ign_dir in ( [string] , [string] , [string] , [string] ) : [EOL] if ign_dir not in dirnames : [EOL] continue [EOL] dirnames . remove ( ign_dir ) [EOL] for filename in filenames : [EOL] if not filename . endswith ( [string] ) : [EOL] continue [EOL] fullpath = os . path . join ( path , filename ) [EOL] files . append ( fullpath ) [EOL] [EOL] for path in files : [EOL] head_comments = [ ] [EOL] with open ( path , [string] , encoding = [string] ) as f : [EOL] for line in f : [EOL] if line . startswith ( [string] ) : [EOL] head_comments . append ( line . strip ( ) ) [EOL] else : [EOL] break [EOL] [EOL] assert len ( head_comments ) > [number] , [string] . format ( path ) [EOL] assert [string] in head_comments , [string] . format ( path ) [EOL] assert any ( line . startswith ( [string] ) for line in head_comments ) , [string] . format ( path ) [EOL] [EOL] @ staticmethod def _clean_license ( docstring ) : [EOL] doclines = [ line for line in docstring . splitlines ( ) if line . strip ( ) [EOL] and not line . lower ( ) . startswith ( [string] ) ] [EOL] return [string] . join ( doclines ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import shanghai [EOL] import os [EOL] import tempfile [EOL] from textwrap import dedent [EOL] [EOL] import pytest [EOL] from ruamel import yaml as ryaml [EOL] [EOL] from shanghai . config import ( Server , Configuration , ConfigurationError , ShanghaiConfiguration , FallbackConfiguration , NetworkConfiguration , ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def load ( ) : [EOL] def _load ( yaml_string ) : [EOL] return ryaml . safe_load ( dedent ( yaml_string ) ) [EOL] return _load [EOL] [EOL] [EOL] class TestServer : [EOL] [EOL] def test_defaults ( self ) : [EOL] server = Server . with_optional_port ( [string] ) [EOL] assert server . host == [string] [EOL] assert server . port == [number] [EOL] assert server . ssl is False [EOL] [EOL] server = Server . with_optional_port ( [string] , ssl = True ) [EOL] assert server . host == [string] [EOL] assert server . port == [number] [EOL] assert server . ssl is True [EOL] [EOL] def test_from_string ( self ) : [EOL] server = Server . from_string ( [string] ) [EOL] assert server . host == [string] [EOL] assert server . port == [number] [EOL] assert server . ssl is False [EOL] [EOL] server = Server . from_string ( [string] ) [EOL] assert server . host == [string] [EOL] assert server . port == [number] [EOL] assert server . ssl is True [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_str ( self , source , expected ) : [EOL] server = Server . from_string ( source ) [EOL] assert str ( server ) == expected [EOL] [EOL] [EOL] class TestConfig : [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def fake_yaml ( self ) : [EOL] return { [string] : [number] , [string] : { [string] : [string] , [string] : None , } , [string] : ... , } [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def c ( self , fake_yaml ) : [EOL] return Configuration ( fake_yaml ) [EOL] [EOL] def test_init ( self ) : [EOL] assert Configuration ( ) [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Configuration ( [ ] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Configuration ( [string] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_get ( self , c , fake_yaml ) : [EOL] assert c . get ( [string] , [number] ) == [number] [EOL] assert c . get ( [string] ) == fake_yaml [ [string] ] [EOL] assert c . get ( [string] ) == [string] [EOL] assert c . get ( [string] , [number] ) is None [EOL] [EOL] assert c . get ( [string] ) is None [EOL] assert c . get ( [string] , [number] ) == [number] [EOL] assert c . get ( [string] , [number] ) == [number] [EOL] assert c . get ( [string] , [number] ) == [number] [EOL] assert c . get ( [string] , [number] ) == [number] [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c . get ( [string] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c . get ( [string] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_getitem ( self , c , fake_yaml ) : [EOL] assert c [ [string] ] == [number] [EOL] assert c [ [string] ] == fake_yaml [ [string] ] [EOL] assert c [ [string] ] == [string] [EOL] assert c [ [string] ] is None [EOL] assert c [ [string] ] is ... [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_contains ( self , c ) : [EOL] assert [string] in c [EOL] assert [string] in c [EOL] assert [string] not in c [EOL] assert [string] not in c [EOL] assert [string] in c [EOL] [EOL] [EOL] class TestFallbackConfig : [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def fake_yaml ( self ) : [EOL] return { [string] : [number] , [string] : ... , } [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def fake_fallback_yaml ( self ) : [EOL] return { [string] : [number] , [string] : { [string] : [string] , [string] : None , } , } [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def fb_c ( self , fake_yaml , fake_fallback_yaml ) : [EOL] return FallbackConfiguration ( fake_yaml , Configuration ( fake_fallback_yaml ) ) [EOL] [EOL] def test_get ( self , fb_c , fake_fallback_yaml ) : [EOL] assert fb_c . get ( [string] ) == [number] [EOL] assert fb_c . get ( [string] ) == fake_fallback_yaml [ [string] ] [EOL] assert fb_c . get ( [string] ) == [string] [EOL] [EOL] assert fb_c . get ( [string] ) is None [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c . get ( [string] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c . get ( [string] ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_getitem ( self , fb_c , fake_fallback_yaml ) : [EOL] assert fb_c [ [string] ] == [number] [EOL] assert fb_c [ [string] ] == fake_fallback_yaml [ [string] ] [EOL] assert fb_c [ [string] ] == [string] [EOL] assert fb_c [ [string] ] is None [EOL] assert fb_c [ [string] ] is ... [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] with pytest . raises ( KeyError ) as excinfo : [EOL] fb_c [ [string] ] [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_contains ( self , fb_c ) : [EOL] assert [string] in fb_c [EOL] assert [string] in fb_c [EOL] assert [string] not in fb_c [EOL] assert [string] not in fb_c [EOL] assert [string] in fb_c [EOL] [EOL] [EOL] class TestNetworkConfig ( ) : [EOL] [EOL] @ pytest . fixture def base_yaml ( self , load ) : [EOL] return load ( [string] ) [EOL] [EOL] def test_init ( self , base_yaml ) : [EOL] nw_c = NetworkConfiguration ( [string] , base_yaml ) [EOL] assert nw_c . name == [string] [EOL] [EOL] def test_require_keys ( self , base_yaml ) : [EOL] test_yaml = base_yaml . copy ( ) [EOL] [EOL] del test_yaml [ [string] ] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] NetworkConfiguration ( [string] , test_yaml ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] del test_yaml [ [string] ] [EOL] del test_yaml [ [string] ] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] NetworkConfiguration ( [string] , test_yaml ) [EOL] excinfo . match ( [string] [string] ) [EOL] [EOL] def test_parse_servers ( self , base_yaml ) : [EOL] nw_c = NetworkConfiguration ( [string] , base_yaml ) [EOL] assert len ( nw_c . servers ) == [number] [EOL] assert isinstance ( nw_c . servers [ [number] ] , Server ) [EOL] assert nw_c . servers [ [number] ] . host == [string] [EOL] assert nw_c . servers [ [number] ] . port == [number] [EOL] assert nw_c . servers [ [number] ] . ssl is True [EOL] [EOL] del base_yaml [ [string] ] [ [number] ] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] NetworkConfiguration ( [string] , base_yaml ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] base_yaml [ [string] ] = [string] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] NetworkConfiguration ( [string] , base_yaml ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] del base_yaml [ [string] ] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] NetworkConfiguration ( [string] , base_yaml ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] @ pytest . mark . skip ( [string] ) def test_fix_channels ( self ) : [EOL] pass [EOL] [EOL] [EOL] class TestShanghaiConfig : [EOL] [EOL] @ pytest . fixture def sample_yaml ( self , load ) : [EOL] return load ( [string] ) [EOL] [EOL] def test_init ( self , sample_yaml ) : [EOL] config = ShanghaiConfiguration ( sample_yaml ) [EOL] assert config [ [string] ] == [string] [EOL] [EOL] def test_parse_networks ( self , sample_yaml ) : [EOL] config = ShanghaiConfiguration ( sample_yaml ) [EOL] networks = config . networks [EOL] assert len ( networks ) == [number] [EOL] assert isinstance ( networks [ [number] ] , NetworkConfiguration ) [EOL] [EOL] netw_map = { netw . name : netw for netw in networks } [EOL] assert netw_map [ [string] ] [ [string] ] == [string] [EOL] assert netw_map [ [string] ] [ [string] ] == [string] [EOL] assert netw_map [ [string] ] [ [string] ] == [string] [EOL] [EOL] assert netw_map [ [string] ] [ [string] ] == [string] [EOL] assert netw_map [ [string] ] [ [string] ] == [string] [EOL] [EOL] del sample_yaml [ [string] ] [EOL] with pytest . raises ( ConfigurationError ) as excinfo : [EOL] ShanghaiConfiguration ( sample_yaml ) [EOL] excinfo . match ( [string] ) [EOL] [EOL] def test_fileloading ( self , sample_yaml ) : [EOL] [comment] [EOL] fd , fname = tempfile . mkstemp ( [string] ) [EOL] try : [EOL] with open ( fd , [string] , encoding = [string] ) as f : [EOL] ryaml . dump ( sample_yaml , f ) [EOL] config = ShanghaiConfiguration . from_filename ( fname ) [EOL] finally : [EOL] os . remove ( fname ) [EOL] [EOL] assert config . mapping == sample_yaml [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Servershanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Set , Dict , Any , Iterable , Type , List , Coroutine , Tuple , Optional [EOL] import shanghai [EOL] import plugin_base [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import asyncio [EOL] import asyncio [EOL] from typing import Coroutine , Dict , Iterable , List , NamedTuple , Optional , Set , Tuple [EOL] [EOL] from . event import EventDispatcher [EOL] from . irc import Prefix [EOL] from . logging import get_logger , Logger [EOL] from . plugin_base import ChannelPlugin [EOL] [EOL] from typing import TYPE_CHECKING [EOL] [EOL] if TYPE_CHECKING : [EOL] from . network import Network [comment] [EOL] [EOL] [EOL] class Member ( NamedTuple ) : [EOL] prefix = ... [EOL] modes = [string] [EOL] [EOL] [EOL] class ChannelModes : [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] class Channel : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __init__ ( self , network , name , nw_join_list , ) : [EOL] self . network = network [EOL] self . name = name [EOL] self . _nw_join_list = nw_join_list [EOL] [EOL] [comment] [EOL] self . config = self . network . config [EOL] self . logger = get_logger ( [string] , f'{ self . name } [string] { self . network . name }' , self . config ) [EOL] self . modes = ChannelModes ( ) [EOL] self . event_queue = asyncio . Queue ( ) [EOL] [EOL] self . _event_dispatcher = EventDispatcher ( logger = self . logger ) [EOL] self . _plugins = set ( ) [EOL] self . _sub_tasks = [ ] [EOL] self . _parted = False [EOL] [EOL] self . load_plugins ( ) [EOL] [EOL] @ property def members ( self ) : [EOL] members = set ( ) [EOL] for lkey in self . _nw_join_list : [EOL] if self . network . options . chan_eq ( lkey [ [number] ] , self . name ) : [EOL] member = Member ( self . network . users [ lkey [ [number] ] ] , ** self . _nw_join_list [ lkey ] ) [EOL] members . add ( member ) [EOL] return members [EOL] [EOL] async def _run ( self ) : [EOL] [comment] [EOL] await self . _worker ( ) [EOL] [EOL] async def _worker ( self ) : [EOL] [docstring] [EOL] while not ( self . _parted and self . event_queue . empty ( ) ) : [EOL] event = await self . event_queue . get ( ) [EOL] self . logger . debug ( f" [string] { event }" ) [EOL] result = await self . _event_dispatcher . dispatch ( event ) [EOL] if result : [EOL] self . _manage_subtasks ( result . schedule ) [EOL] for new_event in result . append_events : [EOL] self . event_queue . put_nowait ( new_event ) [EOL] [EOL] def _manage_subtasks ( self , new_coroutines ) : [EOL] [docstring] [EOL] new_tasks = [ ] [EOL] for task in self . _sub_tasks : [EOL] if task . done ( ) : [EOL] exc = task . exception ( ) [EOL] if exc : [EOL] self . logger . exception ( f" [string] { task }" , exc_info = exc ) [EOL] else : [EOL] new_tasks . append ( task ) [EOL] [EOL] if new_coroutines : [EOL] new_tasks . extend ( self . network . loop . create_task ( coro ) for coro in new_coroutines ) [EOL] [EOL] self . _sub_tasks = new_tasks [EOL] [EOL] def load_plugins ( self ) : [EOL] for manager in self . network . plugin_managers : [EOL] plugin_classes = set ( manager . discover_plugins ( ChannelPlugin ) ) [EOL] [comment] [EOL] [comment] [EOL] new_plugins = { plug ( channel = self ) for plug in plugin_classes } [EOL] self . _plugins |= new_plugins [EOL] [EOL] for plugin in new_plugins : [EOL] self . _event_dispatcher . register_plugin ( plugin ) [EOL] [comment] [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . name !r} [string] { self . network !r} [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $irc.Prefix$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $shanghai.network.Network$ 0 $builtins.str$ 0 $typing.Dict[typing.Tuple[builtins.str,builtins.str],typing.Dict]$ 0 0 0 0 0 0 $shanghai.network.Network$ 0 $shanghai.network.Network$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Tuple[builtins.str,builtins.str],typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Dict[typing.Tuple[builtins.str,builtins.str],typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 $shanghai.network.Network$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $shanghai.network.Network$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $shanghai.channel.ChannelModes$ 0 0 0 0 0 0 0 $asyncio.Queue$ 0 0 0 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 $logging.Logger$ 0 0 0 $logging.Logger$ 0 0 0 0 $typing.Set[plugin_base.ChannelPlugin]$ 0 0 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.channel.Member$ 0 0 0 0 0 $shanghai.channel.Member$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.channel.Member$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.channel.Member$ 0 0 0 $shanghai.channel.Member$ 0 0 0 $shanghai.channel.Member$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 0 $typing.List[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 0 0 0 $typing.List[asyncio.tasks.Task[typing.Any]]$ 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Type[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Type[typing.Any]]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , List , Generator , Any [EOL] import shanghai [EOL] import config [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import asyncio [EOL] from typing import Any , Dict , Generator [EOL] [EOL] from . config import ShanghaiConfiguration [EOL] from . network import Network [EOL] from . plugin_system import PluginManager [EOL] [EOL] __all__ = ( [string] ) [EOL] [EOL] [EOL] class Shanghai : [EOL] [EOL] def __init__ ( self , config , loop ) : [EOL] self . config = config [EOL] self . loop = loop [EOL] self . networks = { } [EOL] [EOL] self . plugin_managers = [ PluginManager ( [string] , is_core = True ) , PluginManager ( [string] ) , ] [EOL] [EOL] for manager in self . plugin_managers : [EOL] manager . load_all_plugins ( ) [EOL] [EOL] def init_networks ( self ) : [EOL] for netconf in self . config . networks : [EOL] network = Network ( netconf , loop = self . loop ) [EOL] for manager in self . plugin_managers : [EOL] network . load_plugins ( manager ) [EOL] [EOL] network_task = self . loop . create_task ( network . run ( ) ) [EOL] self . networks [ netconf . name ] = dict ( task = network_task , network = network , ) [EOL] yield network_task [EOL] [EOL] def stop_networks ( self ) : [EOL] for network in self . networks . values ( ) : [EOL] network [ [string] ] . request_close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $shanghai.config.ShanghaiConfiguration$ 0 $shanghai.config.ShanghaiConfiguration$ 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.List[shanghai.plugin_system.PluginManager]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[shanghai.plugin_system.PluginManager]$ 0 0 0 0 0 0 0 0 0 0 $typing.Generator[asyncio.Task,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.network.Network$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.network.Network$ 0 0 0 0 0 0 0 $asyncio.tasks.Task[None]$ 0 0 0 0 0 0 0 $shanghai.network.Network$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[None]$ 0 $shanghai.network.Network$ 0 $shanghai.network.Network$ 0 0 0 0 $asyncio.tasks.Task[None]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Set , Dict , Optional , Any , Iterable , Type , List , Coroutine , Iterator [EOL] import io [EOL] import shanghai [EOL] import plugin_base [EOL] import config [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import plugin_system [EOL] import asyncio [EOL] import io [EOL] import itertools [EOL] import time [EOL] from typing import Coroutine , Dict , Iterable , Iterator , List , Optional , Set [EOL] [EOL] from . connection import Connection [EOL] from . config import NetworkConfiguration , Server [EOL] from . event import build_event , EventDispatcher [EOL] from . plugin_system import PluginManager [EOL] from . plugin_base import NetworkPlugin , NetworkEventName [EOL] from . irc import Options , Prefix [EOL] from . channel import Channel [EOL] from . logging import get_logger [EOL] [EOL] [EOL] class Network : [EOL] [docstring] [EOL] [EOL] registered = ... [EOL] [comment] [EOL] nickname = ... [EOL] user = ... [EOL] realname = ... [EOL] vhost = ... [EOL] options = ... [EOL] channels = ... [EOL] users = ... [EOL] [EOL] event_queue = ... [EOL] _connection = ... [EOL] _worker_task = ... [EOL] _connection_task = ... [EOL] [EOL] def __init__ ( self , config , loop = None ) : [EOL] self . name = config . name [EOL] self . config = config [EOL] self . loop = loop or asyncio . get_event_loop ( ) [EOL] self . logger = get_logger ( [string] , self . name , config ) [EOL] self . plugin_managers = [ ] [EOL] [EOL] self . _event_dispatcher = EventDispatcher ( logger = self . logger ) [EOL] self . _plugins = set ( ) [EOL] self . _sub_tasks = [ ] [EOL] self . _server_iter = itertools . cycle ( self . config . servers ) [EOL] self . _worker_task_failure_timestamps = [ ] [EOL] self . _reset ( ) [EOL] [EOL] def _reset ( self ) : [EOL] self . registered = False [EOL] self . nickname = [string] [EOL] self . user = [string] [EOL] self . realname = [string] [EOL] self . vhost = [string] [EOL] self . options = Options ( ) [EOL] self . channels = { } [EOL] self . users = { } [EOL] [EOL] self . stopped = False [EOL] self . connected = False [EOL] [EOL] server = next ( self . _server_iter ) [EOL] self . event_queue = asyncio . Queue ( ) [EOL] self . _connection = Connection ( server , self . event_queue , self . loop , logger = self . logger ) [EOL] [EOL] async def run ( self ) : [EOL] for retry in itertools . count ( [number] ) : [EOL] self . _reset ( ) [EOL] self . _connection_task = self . loop . create_task ( self . _connection . run ( ) ) [EOL] self . _worker_task = self . loop . create_task ( self . _worker ( ) ) [EOL] self . _worker_task . add_done_callback ( self . _worker_done ) [EOL] [EOL] try : [EOL] await self . _connection_task [EOL] except Exception : [EOL] self . logger . exception ( [string] ) [EOL] [EOL] [comment] [EOL] await self . _worker_task [EOL] if self . stopped : [EOL] break [EOL] [EOL] [comment] [EOL] seconds = [number] * retry [EOL] self . logger . info ( f" [string] { seconds } [string] " ) [EOL] await asyncio . sleep ( seconds ) [comment] [EOL] [EOL] [comment] [EOL] if self . _sub_tasks : [EOL] for task in self . _sub_tasks : [EOL] task . cancel ( ) [EOL] [EOL] await asyncio . wait ( self . _sub_tasks ) [EOL] [EOL] def _worker_done ( self , task ) : [EOL] assert task is self . _worker_task [EOL] if task . cancelled ( ) : [EOL] self . _connection_task . cancel ( ) [EOL] [EOL] elif task . exception ( ) : [EOL] f = io . StringIO ( ) [EOL] task . print_stack ( file = f ) [EOL] self . logger . error ( f . getvalue ( ) ) [EOL] [EOL] now = time . time ( ) [EOL] self . _worker_task_failure_timestamps . append ( time . time ( ) ) [EOL] if len ( self . _worker_task_failure_timestamps ) == [number] : [EOL] if self . _worker_task_failure_timestamps . pop ( [number] ) >= now - [number] : [EOL] self . logger . error ( [string] ) [EOL] self . _close ( [string] ) [EOL] return [EOL] [EOL] self . logger . warning ( [string] ) [EOL] self . _worker_task = self . loop . create_task ( self . _worker ( ) ) [EOL] self . _worker_task . add_done_callback ( self . _worker_done ) [EOL] [EOL] else : [EOL] self . logger . debug ( [string] ) [EOL] return [EOL] [EOL] async def _worker ( self ) : [EOL] [docstring] [EOL] while not ( self . _connection_task . done ( ) and self . event_queue . empty ( ) ) : [EOL] event = await self . event_queue . get ( ) [EOL] if event . name != NetworkEventName . RAW_LINE : [EOL] [comment] [EOL] self . logger . debug ( f" [string] { event }" ) [EOL] result = await self . _event_dispatcher . dispatch ( event ) [EOL] if result : [EOL] self . _manage_subtasks ( result . schedule ) [EOL] for new_event in result . append_events : [EOL] self . event_queue . put_nowait ( new_event ) [EOL] [EOL] def _manage_subtasks ( self , new_coroutines ) : [EOL] [docstring] [EOL] new_tasks = [ ] [EOL] for task in self . _sub_tasks : [EOL] if task . done ( ) : [EOL] exc = task . exception ( ) [EOL] if exc : [EOL] self . logger . exception ( f" [string] { task }" , exc_info = exc ) [EOL] else : [EOL] new_tasks . append ( task ) [EOL] [EOL] if new_coroutines : [EOL] new_tasks . extend ( self . loop . create_task ( coro ) for coro in new_coroutines ) [EOL] [EOL] self . _sub_tasks = new_tasks [EOL] [EOL] def _close ( self , quitmsg = None ) : [EOL] self . logger . info ( [string] ) [EOL] self . _connection . close ( ) [EOL] self . connected = False [EOL] self . stopped = True [EOL] [EOL] def send_byteline ( self , line ) : [EOL] self . _connection . writeline ( line ) [EOL] [EOL] def request_close ( self , quitmsg = None ) : [EOL] [comment] [EOL] evt = build_event ( NetworkEventName . CLOSE_REQUEST , quitmsg = quitmsg ) [EOL] self . event_queue . put_nowait ( evt ) [EOL] [EOL] def load_plugins ( self , manager ) : [EOL] self . plugin_managers . append ( manager ) [EOL] plugin_classes = set ( manager . discover_plugins ( NetworkPlugin ) ) [EOL] [comment] [EOL] new_plugins = { plug ( network = self , logger = self . logger ) for plug in plugin_classes } [EOL] self . _plugins |= new_plugins [EOL] [EOL] for plugin in new_plugins : [EOL] self . _event_dispatcher . register_plugin ( plugin ) [EOL] [comment] [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . name !r} [string] { self . nickname !r} [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $irc.Options$ 0 0 0 $typing.Dict[builtins.str,channel.Channel]$ 0 0 0 $typing.Dict[builtins.str,irc.Prefix]$ 0 0 0 0 $asyncio.Queue$ 0 0 0 $connection.Connection$ 0 0 0 $asyncio.Task$ 0 0 0 $asyncio.Task$ 0 0 0 0 0 $None$ 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 $typing.List[plugin_system.PluginManager]$ 0 0 0 0 0 0 0 $shanghai.event.EventDispatcher$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[plugin_base.NetworkPlugin]$ 0 0 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 $typing.Iterator[config.Server]$ 0 0 0 0 0 0 0 $shanghai.config.NetworkConfiguration$ 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,shanghai.irc.message.Prefix]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $shanghai.irc.options.Options$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,shanghai.channel.Channel]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,shanghai.irc.message.Prefix]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $shanghai.config.Server$ 0 0 0 0 0 0 0 0 0 0 $asyncio.queues.Queue[typing.Any]$ 0 0 0 0 0 0 0 0 0 $shanghai.connection.Connection$ 0 0 0 $shanghai.config.Server$ 0 0 0 $asyncio.queues.Queue[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $asyncio.Task$ 0 0 0 0 $asyncio.Task$ 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 $asyncio.Task$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.Task$ 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 $asyncio.Task$ 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.tasks.Task[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 $typing.Optional[shanghai.event.ResultSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 0 $typing.List[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 $typing.List[asyncio.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Iterable[typing.Coroutine]]$ 0 0 0 0 0 $typing.List[asyncio.tasks.Task[typing.Any]]$ 0 $typing.List[asyncio.Task]$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $plugin_system.PluginManager$ 0 0 0 0 0 0 0 0 0 $plugin_system.PluginManager$ 0 0 $typing.Set[typing.Type[typing.Any]]$ 0 0 0 $plugin_system.PluginManager$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Type[typing.Any]]$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import shanghai [EOL] import config [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import asyncio [EOL] import asyncio [EOL] [EOL] from . config import Server [EOL] from . event import build_event [EOL] from . plugin_base import NetworkEventName [EOL] from . logging import Logger , get_default_logger [EOL] [EOL] [EOL] class Connection : [EOL] [EOL] writer = ... [EOL] [EOL] def __init__ ( self , server , queue , loop , logger = None , ) : [EOL] self . server = server [EOL] self . queue = queue [EOL] self . loop = loop [EOL] if logger is None : [EOL] logger = get_default_logger ( ) [EOL] self . logger = logger [EOL] [EOL] def writeline ( self , line ) : [EOL] self . logger . info ( [string] , line ) [EOL] self . writer . write ( line ) [EOL] self . writer . write ( [string] ) [EOL] [EOL] def close ( self ) : [EOL] self . writer . close ( ) [EOL] [EOL] async def run ( self ) : [EOL] self . logger . info ( f" [string] { self . server } [string] " ) [EOL] reader , writer = await asyncio . open_connection ( self . server . host , self . server . port , ssl = self . server . ssl , loop = self . loop ) [EOL] self . writer = writer [EOL] [EOL] await self . queue . put ( build_event ( NetworkEventName . CONNECTED ) ) [EOL] [EOL] try : [EOL] while not reader . at_eof ( ) : [EOL] line = await reader . readline ( ) [EOL] line = line . strip ( ) [comment] [EOL] self . logger . debug ( [string] , line ) [EOL] if line : [EOL] event = build_event ( NetworkEventName . RAW_LINE , raw_line = line ) [EOL] await self . queue . put ( event ) [EOL] except asyncio . CancelledError : [EOL] self . logger . info ( [string] ) [EOL] except ConnectionResetError as e : [EOL] self . logger . warning ( f" [string] { e }" ) [EOL] finally : [EOL] self . logger . debug ( [string] ) [EOL] self . close ( ) [EOL] await self . queue . put ( build_event ( NetworkEventName . DISCONNECTED ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.StreamWriter$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.streams.StreamWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.streams.StreamWriter$ 0 $asyncio.streams.StreamWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . main import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Set , Dict , Any , Callable , List , Awaitable , Tuple [EOL] import functools [EOL] import shanghai [EOL] import io [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import asyncio [EOL] from functools import partial [EOL] import io [EOL] from pprint import pprint [EOL] import sys [EOL] from typing import Any , Awaitable , Callable , Dict [EOL] [EOL] import colorama [EOL] [EOL] from . import Shanghai [EOL] from . config import ShanghaiConfiguration [EOL] from . logging import set_default_logger , get_logger , LogLevels [EOL] [EOL] [EOL] def exception_handler ( loop , context ) : [EOL] f = io . StringIO ( ) [EOL] print ( [string] , file = f ) [EOL] print ( [string] , context [ [string] ] , file = f ) [EOL] print ( [string] , file = f ) [EOL] pprint ( context , stream = f ) [EOL] [EOL] print ( [string] , file = f ) [EOL] task = context . get ( [string] , context . get ( [string] ) ) [EOL] if hasattr ( task , [string] ) : [EOL] task . print_stack ( file = f ) [EOL] else : [EOL] print ( [string] , file = f ) [EOL] [EOL] logger = get_logger ( [string] , [string] ) [EOL] logger . error ( f . getvalue ( ) ) [EOL] [EOL] [EOL] async def stdin_reader ( loop , input_handler ) : [EOL] if sys . platform == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import threading [EOL] thread_close_evt = asyncio . Event ( ) [EOL] [EOL] def reader_thread ( ) : [EOL] while True : [EOL] try : [EOL] line = sys . stdin . readline ( ) [EOL] except KeyboardInterrupt : [EOL] break [EOL] if not line : [EOL] break [EOL] loop . call_soon_threadsafe ( lambda : loop . create_task ( input_handler ( line ) ) ) [EOL] [EOL] loop . call_soon_threadsafe ( lambda : thread_close_evt . set ( ) ) [EOL] [EOL] threading . Thread ( target = reader_thread , daemon = True ) . start ( ) [EOL] await thread_close_evt . wait ( ) [EOL] [EOL] else : [EOL] reader = asyncio . StreamReader ( ) [EOL] make_protocol = partial ( asyncio . StreamReaderProtocol , reader ) [EOL] await loop . connect_read_pipe ( make_protocol , sys . stdin ) [EOL] [EOL] while True : [EOL] line_bytes = await reader . readline ( ) [EOL] line = line_bytes . decode ( sys . stdin . encoding ) [EOL] if not line : [EOL] break [EOL] loop . create_task ( input_handler ( line ) ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] colorama . init ( ) [EOL] [EOL] config = ShanghaiConfiguration . from_filename ( [string] ) [EOL] [EOL] default_logger = get_logger ( [string] , [string] , config , open_msg = True ) [EOL] set_default_logger ( default_logger ) [EOL] [EOL] try : [EOL] import uvloop [EOL] except ImportError : [EOL] default_logger . debug ( [string] ) [EOL] else : [EOL] asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ( ) ) [EOL] default_logger . debug ( [string] ) [EOL] [EOL] loop = asyncio . get_event_loop ( ) [EOL] if default_logger . isEnabledFor ( LogLevels . DEBUG ) : [EOL] loop . set_debug ( True ) [EOL] [EOL] bot = Shanghai ( config , loop ) [EOL] network_tasks = list ( bot . init_networks ( ) ) [EOL] loop . set_exception_handler ( exception_handler ) [EOL] [EOL] [comment] [EOL] async def input_handler ( line ) : [EOL] [docstring] [EOL] split = line . split ( None , [number] ) [EOL] if len ( split ) < [number] : [EOL] return [EOL] nw_name , irc_line = split [EOL] if nw_name and irc_line : [EOL] if nw_name not in bot . networks : [EOL] print ( f" [string] { nw_name !r} [string] " ) [EOL] return [EOL] network = bot . networks [ nw_name ] [ [string] ] [EOL] network . send_byteline ( irc_line . encode ( [string] ) ) [EOL] [EOL] print ( [string] , [string] . join ( bot . networks . keys ( ) ) , end = [string] ) [EOL] stdin_reader_task = asyncio . ensure_future ( stdin_reader ( loop , input_handler ) ) [EOL] [EOL] try : [EOL] loop . run_until_complete ( asyncio . wait ( network_tasks , loop = loop ) ) [EOL] except KeyboardInterrupt : [EOL] default_logger . warn ( [string] ) [EOL] [comment] [EOL] bot . stop_networks ( ) [EOL] task = asyncio . wait ( network_tasks , loop = loop , timeout = [number] ) [EOL] done , pending = loop . run_until_complete ( task ) [EOL] if pending : [EOL] default_logger . error ( [string] f" [string] { pending }" ) [EOL] else : [EOL] default_logger . info ( [string] ) [EOL] [EOL] for task in network_tasks : [EOL] if task . done ( ) : [EOL] try : [EOL] task . result ( ) [comment] [EOL] except Exception : [EOL] default_logger . exception ( f" [string] { task !r} [string] " ) [EOL] [EOL] if not stdin_reader_task . done ( ) : [EOL] stdin_reader_task . cancel ( ) [EOL] try : [EOL] loop . run_until_complete ( asyncio . wait_for ( stdin_reader_task , [number] , loop = loop ) ) [EOL] except asyncio . CancelledError : [EOL] pass [EOL] except asyncio . TimeoutError : [EOL] default_logger . error ( [string] ) [EOL] [EOL] loop . close ( ) [EOL] default_logger . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Callable [EOL] import typing [EOL] import builtins [EOL] from typing import Callable [EOL] [EOL] from fullqualname import fullqualname [EOL] [EOL] [EOL] def repr_func ( func ) : [EOL] [docstring] [EOL] return f" [string] { type ( func ) . __name__ } [string] { fullqualname ( func ) } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] from . message import CtcpMessage , Message , Prefix [EOL] from . options import Options [EOL] from . server_reply import ServerReply [EOL] [EOL] __all__ = ( [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Optional , Any , Match , Type , Tuple , Iterator [EOL] import typing [EOL] import builtins [EOL] import shanghai [EOL] import message [EOL] import re [EOL] import string [EOL] from typing import Dict , Iterator , MutableMapping , Optional , Tuple , Union [EOL] [EOL] from . message import Message [EOL] from . server_reply import ServerReply [EOL] [EOL] [EOL] DEFAULT_CASE_MAPPING = [string] [EOL] [EOL] [EOL] def _generate_case_table ( case_mapping ) : [EOL] case_mapping = case_mapping . lower ( ) [EOL] if case_mapping not in ( [string] , [string] , [string] ) : [EOL] [comment] [EOL] case_mapping = DEFAULT_CASE_MAPPING [EOL] [EOL] upper_str = string . ascii_uppercase [EOL] lower_str = string . ascii_lowercase [EOL] [EOL] if case_mapping == [string] : [EOL] upper_str += [string] [EOL] lower_str += [string] [EOL] elif case_mapping == [string] : [EOL] upper_str += [string] [EOL] lower_str += [string] [EOL] [EOL] return str . maketrans ( upper_str , lower_str ) [EOL] [EOL] [EOL] OptionValue = Union [ str , bool ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class Options ( MutableMapping [ str , OptionValue ] ) : [EOL] [EOL] [docstring] [EOL] [EOL] user_modes = [string] [EOL] user_prefixes = [string] [EOL] _case_table = _generate_case_table ( DEFAULT_CASE_MAPPING ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . _options = { k . upper ( ) : v for k , v in kwargs . items ( ) } [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] ukey = key . upper ( ) [EOL] self . _options [ ukey ] = value [EOL] [EOL] if isinstance ( value , str ) : [comment] [EOL] if ukey == [string] : [EOL] self . _parse_prefix ( value ) [EOL] elif ukey == [string] : [EOL] self . _case_table = _generate_case_table ( value ) [EOL] [EOL] def __getitem__ ( self , item ) : [EOL] return self . _options [ item . upper ( ) ] [EOL] [EOL] def __delitem__ ( self , item ) : [EOL] del self . _options [ item . upper ( ) ] [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . _options ) [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _options ) [EOL] [EOL] def __repr__ ( self ) : [EOL] params = [string] . join ( f"{ key } [string] { value !r}" for key , value in sorted ( self . _options . items ( ) ) ) [EOL] return f"{ self . __class__ . __name__ } [string] { params } [string] " [EOL] [EOL] def extend_from_message ( self , message ) : [EOL] assert message . command == ServerReply . RPL_ISUPPORT [EOL] assert message . params [ - [number] ] == [string] [EOL] [EOL] for option in message . params [ [number] : - [number] ] : [EOL] key , is_not_bool , value = option . partition ( [string] ) [EOL] if is_not_bool : [EOL] self [ key ] = value [EOL] else : [EOL] self [ key ] = True [EOL] [EOL] def _parse_prefix ( self , value ) : [EOL] if not value : [EOL] [comment] [EOL] self . user_modes = self . user_prefixes = [string] [EOL] return [EOL] [EOL] match = re . match ( [string] , value ) [EOL] if match is None : [EOL] [comment] [EOL] pass [EOL] elif len ( match . group ( [number] ) ) != len ( match . group ( [number] ) ) : [EOL] [comment] [EOL] pass [EOL] else : [EOL] self . user_modes , self . user_modes = match . groups ( ) [EOL] [EOL] def split_prefixes ( self , prefixed_nick ) : [EOL] nick = prefixed_nick [EOL] prefixes = [string] [EOL] if self . get ( [string] , False ) : [EOL] nick = prefixed_nick . lstrip ( self . user_prefixes ) [EOL] prefixes = prefixed_nick [ : - len ( nick ) ] [EOL] elif nick [ [number] ] in self . user_prefixes : [EOL] prefixes = prefixed_nick [ [number] ] [EOL] nick = prefixed_nick [ [number] : ] [EOL] return prefixes , nick [EOL] [EOL] def prefixes_to_modes ( self , prefixes ) : [EOL] table = str . maketrans ( self . user_prefixes , self . user_modes ) [EOL] return prefixes . translate ( table ) [EOL] [EOL] def modes_to_prefixes ( self , modes ) : [EOL] table = str . maketrans ( self . user_modes , self . user_prefixes ) [EOL] return modes . translate ( table ) [EOL] [EOL] def nick_lower ( self , nick ) : [EOL] return nick . translate ( self . _case_table ) [EOL] [EOL] def chan_lower ( self , chan ) : [EOL] return self . nick_lower ( chan ) [EOL] [EOL] def nick_eq ( self , nick1 , nick2 ) : [EOL] return self . nick_lower ( nick1 ) == self . nick_lower ( nick2 ) [EOL] [EOL] def chan_eq ( self , chan1 , chan2 ) : [EOL] return self . chan_lower ( chan1 ) == self . chan_lower ( chan2 ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $OptionValue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $OptionValue$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $OptionValue$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $OptionValue$ 0 0 0 0 0 $OptionValue$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $OptionValue$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $OptionValue$ 0 0 0 0 $OptionValue$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 $message.Message$ 0 0 0 0 $message.Message$ 0 0 0 0 0 0 0 0 $message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import enum [EOL] [EOL] [EOL] [comment] [EOL] class ServerReply ( str , enum . Enum ) : [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RPL_WELCOME = [string] [EOL] RPL_YOURHOST = [string] [EOL] RPL_CREATED = [string] [EOL] RPL_MYINFO = [string] [EOL] [comment] [EOL] RPL_ISUPPORT = [string] [EOL] RPL_BOUNCE = [string] [comment] [EOL] [EOL] RPL_USERHOST = [string] [EOL] RPL_ISON = [string] [EOL] RPL_AWAY = [string] [EOL] RPL_UNAWAY = [string] [EOL] RPL_NOWAWAY = [string] [EOL] RPL_WHOISUSER = [string] [EOL] RPL_WHOISSERVER = [string] [EOL] RPL_WHOISOPERATOR = [string] [EOL] RPL_WHOISIDLE = [string] [EOL] RPL_ENDOFWHOIS = [string] [EOL] RPL_WHOISCHANNELS = [string] [EOL] RPL_WHOWASUSER = [string] [EOL] RPL_ENDOFWHOWAS = [string] [EOL] RPL_LISTSTART = [string] [EOL] RPL_LIST = [string] [EOL] RPL_LISTEND = [string] [EOL] RPL_UNIQOPIS = [string] [EOL] RPL_CHANNELMODEIS = [string] [EOL] RPL_NOTOPIC = [string] [EOL] RPL_TOPIC = [string] [EOL] RPL_INVITING = [string] [EOL] RPL_SUMMONING = [string] [EOL] RPL_INVITELIST = [string] [EOL] RPL_ENDOFINVITELIST = [string] [EOL] RPL_EXCEPTLIST = [string] [EOL] RPL_ENDOFEXCEPTLIST = [string] [EOL] RPL_VERSION = [string] [EOL] RPL_WHOREPLY = [string] [EOL] RPL_ENDOFWHO = [string] [EOL] RPL_NAMREPLY = [string] [EOL] RPL_ENDOFNAMES = [string] [EOL] RPL_LINKS = [string] [EOL] RPL_ENDOFLINKS = [string] [EOL] RPL_BANLIST = [string] [EOL] RPL_ENDOFBANLIST = [string] [EOL] RPL_INFO = [string] [EOL] RPL_ENDOFINFO = [string] [EOL] RPL_MOTDSTART = [string] [EOL] RPL_MOTD = [string] [EOL] RPL_ENDOFMOTD = [string] [EOL] RPL_YOUREOPER = [string] [EOL] RPL_REHASHING = [string] [EOL] RPL_YOURESERVICE = [string] [EOL] RPL_TIME = [string] [EOL] RPL_USERSSTART = [string] [EOL] RPL_USERS = [string] [EOL] RPL_ENDOFUSERS = [string] [EOL] RPL_NOUSERS = [string] [EOL] [EOL] RPL_TRACELINK = [string] [EOL] RPL_TRACECONNECTING = [string] [EOL] RPL_TRACEHANDSHAKE = [string] [EOL] RPL_TRACEUNKNOWN = [string] [EOL] RPL_TRACEOPERATOR = [string] [EOL] RPL_TRACEUSER = [string] [EOL] RPL_TRACESERVER = [string] [EOL] RPL_TRACESERVICE = [string] [EOL] RPL_TRACENEWTYPE = [string] [EOL] RPL_TRACECLASS = [string] [EOL] RPL_TRACERECONNECT = [string] [EOL] RPL_TRACELOG = [string] [EOL] RPL_TRACEEND = [string] [EOL] RPL_STATSLINKINFO = [string] [EOL] RPL_STATSCOMMANDS = [string] [EOL] RPL_ENDOFSTATS = [string] [EOL] RPL_STATSUPTIME = [string] [EOL] RPL_STATSOLINE = [string] [EOL] RPL_UMODEIS = [string] [EOL] RPL_SERVLIST = [string] [EOL] RPL_SERVLISTEND = [string] [EOL] RPL_LUSERCLIENT = [string] [EOL] RPL_LUSEROP = [string] [EOL] RPL_LUSERUNKNOWN = [string] [EOL] RPL_LUSERCHANNELS = [string] [EOL] RPL_LUSERME = [string] [EOL] RPL_ADMINME = [string] [EOL] RPL_ADMINLOC1 = [string] [EOL] RPL_ADMINLOC2 = [string] [EOL] RPL_ADMINEMAIL = [string] [EOL] RPL_TRYAGAIN = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] ERR_NOSUCHNICK = [string] [EOL] ERR_NOSUCHSERVER = [string] [EOL] ERR_NOSUCHCHANNEL = [string] [EOL] ERR_CANNOTSENDTOCHAN = [string] [EOL] ERR_TOOMANYCHANNELS = [string] [EOL] ERR_WASNOSUCHNICK = [string] [EOL] ERR_TOOMANYTARGETS = [string] [EOL] ERR_NOSUCHSERVICE = [string] [EOL] ERR_NOORIGIN = [string] [EOL] ERR_NORECIPIENT = [string] [EOL] ERR_NOTEXTTOSEND = [string] [EOL] ERR_NOTOPLEVEL = [string] [EOL] ERR_WILDTOPLEVEL = [string] [EOL] ERR_BADMASK = [string] [EOL] ERR_UNKNOWNCOMMAND = [string] [EOL] ERR_NOMOTD = [string] [EOL] ERR_NOADMININFO = [string] [EOL] ERR_FILEERROR = [string] [EOL] ERR_NONICKNAMEGIVEN = [string] [EOL] ERR_ERRONEUSNICKNAME = [string] [EOL] ERR_NICKNAMEINUSE = [string] [EOL] ERR_NICKCOLLISION = [string] [EOL] ERR_UNAVAILRESOURCE = [string] [EOL] ERR_USERNOTINCHANNEL = [string] [EOL] ERR_NOTONCHANNEL = [string] [EOL] ERR_USERONCHANNEL = [string] [EOL] ERR_NOLOGIN = [string] [EOL] ERR_SUMMONDISABLED = [string] [EOL] ERR_USERSDISABLED = [string] [EOL] ERR_NOTREGISTERED = [string] [EOL] ERR_NEEDMOREPARAMS = [string] [EOL] ERR_ALREADYREGISTRED = [string] [EOL] ERR_NOPERMFORHOST = [string] [EOL] ERR_PASSWDMISMATCH = [string] [EOL] ERR_YOUREBANNEDCREEP = [string] [EOL] ERR_YOUWILLBEBANNED = [string] [EOL] ERR_KEYSET = [string] [EOL] ERR_CHANNELISFULL = [string] [EOL] ERR_UNKNOWNMODE = [string] [EOL] ERR_INVITEONLYCHAN = [string] [EOL] ERR_BANNEDFROMCHAN = [string] [EOL] ERR_BADCHANNELKEY = [string] [EOL] ERR_BADCHANMASK = [string] [EOL] ERR_NOCHANMODES = [string] [EOL] ERR_BANLISTFULL = [string] [EOL] ERR_NOPRIVILEGES = [string] [EOL] ERR_CHANOPRIVSNEEDED = [string] [EOL] ERR_CANTKILLSERVER = [string] [EOL] ERR_RESTRICTED = [string] [EOL] ERR_UNIQOPPRIVSNEEDED = [string] [EOL] ERR_NOOPERHOST = [string] [EOL] [EOL] ERR_UMODEUNKNOWNFLAG = [string] [EOL] ERR_USERSDONTMATCH = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RPL_SERVICEINFO = [string] [EOL] RPL_ENDOFSERVICES = [string] [EOL] RPL_SERVICE = [string] [EOL] RPL_NONE = [string] [EOL] RPL_WHOISCHANOP = [string] [EOL] RPL_KILLDONE = [string] [EOL] RPL_CLOSING = [string] [EOL] RPL_CLOSEEND = [string] [EOL] RPL_INFOSTART = [string] [EOL] RPL_MYPORTIS = [string] [EOL] [EOL] RPL_STATSCLINE = [string] [EOL] RPL_STATSNLINE = [string] [EOL] RPL_STATSILINE = [string] [EOL] RPL_STATSKLINE = [string] [EOL] RPL_STATSQLINE = [string] [EOL] RPL_STATSYLINE = [string] [EOL] RPL_STATSVLINE = [string] [EOL] RPL_STATSLLINE = [string] [EOL] RPL_STATSHLINE = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] RPL_STATSSLINE = [string] [EOL] RPL_STATSPING = [string] [EOL] RPL_STATSBLINE = [string] [EOL] RPL_STATSDLINE = [string] [EOL] [EOL] ERR_NOSERVICEHOST = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RPL_LOGGEDIN = [string] [EOL] RPL_LOGGEDOUT = [string] [EOL] ERR_NICKLOCKED = [string] [EOL] RPL_SASLSUCCESS = [string] [EOL] ERR_SASLFAIL = [string] [EOL] ERR_SASLTOOLONG = [string] [EOL] ERR_SASLABORTED = [string] [EOL] ERR_SASLALREADY = [string] [EOL] RPL_SASLMECHS = [string] [EOL] [comment] [EOL] RPL_STARTTLS = [string] [EOL] ERR_STARTTLS = [string] [EOL] [comment] [EOL] RPL_MONONLINE = [string] [EOL] RPL_MONOFFLINE = [string] [EOL] RPL_MONLIST = [string] [EOL] RPL_ENDOFMONLIST = [string] [EOL] ERR_MONLISTFULL = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0