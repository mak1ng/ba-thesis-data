from typing import Any , Literal , Union [EOL] import typing_extensions [EOL] import typing [EOL] from __future__ import with_statement [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] from alembic import context [EOL] from sqlalchemy import engine_from_config , pool [EOL] from logging . config import fileConfig [EOL] [EOL] sys . path . insert ( [number] , os . path . dirname ( os . path . dirname ( __file__ ) ) ) [EOL] [comment] [EOL] [comment] [EOL] config = context . config [EOL] [EOL] [comment] [EOL] [comment] [EOL] fileConfig ( config . config_file_name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from app . db . base import Base [comment] [EOL] [EOL] target_metadata = Base . metadata [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def get_url ( ) : [EOL] user = os . getenv ( [string] , [string] ) [EOL] password = os . getenv ( [string] , [string] ) [EOL] server = os . getenv ( [string] , [string] ) [EOL] db = os . getenv ( [string] , [string] ) [EOL] return f" [string] { user } [string] { password } [string] { server } [string] { db }" [EOL] [EOL] [EOL] def run_migrations_offline ( ) : [EOL] [docstring] [EOL] url = get_url ( ) [EOL] context . configure ( url = url , target_metadata = target_metadata , literal_binds = True , compare_type = True ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] configuration = config . get_section ( config . config_ini_section ) [EOL] configuration [ [string] ] = get_url ( ) [EOL] connectable = engine_from_config ( configuration , prefix = [string] , poolclass = pool . NullPool ) [EOL] [EOL] with connectable . connect ( ) as connection : [EOL] context . configure ( connection = connection , target_metadata = target_metadata , compare_type = True ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] if context . is_offline_mode ( ) : [EOL] run_migrations_offline ( ) [EOL] else : [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] from app . db . base_class import Base [comment] [EOL] from app . db_models . company import Company , CompanyBranch , Department , Employee [comment] [EOL] from app . db_models . location import ( City , Country , District , Province , Subdistrict , ) [EOL] from app . db_models . user import User [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] [EOL] from app . core import config [EOL] [EOL] engine = create_engine ( config . SQLALCHEMY_DATABASE_URI , pool_pre_ping = True ) [EOL] db_session = scoped_session ( sessionmaker ( autocommit = False , autoflush = False , bind = engine ) ) [EOL] Session = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from sqlalchemy . ext . declarative import declarative_base [EOL] [EOL] Base = declarative_base ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] API_V1_STR = [string] [EOL] [EOL] SECRET_KEY = os . getenvb ( [string] ) [EOL] if not SECRET_KEY : [EOL] SECRET_KEY = os . urandom ( [number] ) [EOL] [EOL] ACCESS_TOKEN_EXPIRE_MINUTES = [number] * [number] * [number] [comment] [EOL] [EOL] BACKEND_CORS_ORIGINS = os . getenv ( [string] ) [comment] [EOL] [EOL] SENTRY_DSN = os . getenv ( [string] ) [EOL] [EOL] POSTGRES_SERVER = os . getenv ( [string] ) [EOL] POSTGRES_USER = os . getenv ( [string] ) [EOL] POSTGRES_PASSWORD = os . getenv ( [string] ) [EOL] POSTGRES_DB = os . getenv ( [string] ) [EOL] SQLALCHEMY_DATABASE_URI = ( f" [string] { POSTGRES_USER } [string] { POSTGRES_PASSWORD } [string] { POSTGRES_SERVER } [string] { POSTGRES_DB }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import app [EOL] from sqlalchemy import Column , DateTime , ForeignKey , Integer , String [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from app . db . base_class import Base [EOL] [EOL] [EOL] class Company ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] name = Column ( String , index = True ) [EOL] domain = Column ( String , index = True ) [EOL] date_created = Column ( DateTime ( timezone = True ) ) [EOL] date_updated = Column ( DateTime ( timezone = True ) ) [EOL] [EOL] branches = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] [EOL] class CompanyBranch ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] name = Column ( String , index = True ) [EOL] address = Column ( String , index = True ) [EOL] postal_code = Column ( Integer , index = True ) [EOL] phone_number = Column ( Integer , index = True ) [EOL] [EOL] country_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] province_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] city_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] district_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] subdistrict_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] company_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] country = relationship ( [string] , back_populates = [string] ) [EOL] province = relationship ( [string] , back_populates = [string] ) [EOL] city = relationship ( [string] , back_populates = [string] ) [EOL] district = relationship ( [string] , back_populates = [string] ) [EOL] subdistrict = relationship ( [string] , back_populates = [string] ) [EOL] company = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] [EOL] class Department ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] name = Column ( String , index = True ) [EOL] [EOL] company_branch_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] company_branch = relationship ( [string] , back_populates = [string] ) [EOL] staff = relationship ( [string] , back_populates = [string] ) [EOL] [EOL] [EOL] class Employee ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] [EOL] department_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] department = relationship ( [string] , back_populates = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.CompanyBranch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.db_models.company.Department]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Department]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Department]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Department]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Department]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.db_models.company.Employee]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Employee]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.company.Employee]$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import app [EOL] from sqlalchemy import ( Boolean , Column , Date , DateTime , Enum , ForeignKey , Integer , String , ) [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] from app . db . base_class import Base [EOL] from app . models . user import UserType [EOL] [EOL] [EOL] class User ( Base ) : [EOL] __tablename__ = [string] [EOL] id = Column ( Integer , primary_key = True , index = True ) [EOL] email = Column ( String , unique = True , index = True , nullable = False ) [EOL] hashed_password = Column ( String ) [EOL] nickname = Column ( String , index = True ) [EOL] full_name = Column ( String , index = True ) [EOL] is_active = Column ( Boolean ( ) , default = True ) [EOL] birthdate = Column ( Date ) [EOL] address = Column ( String , index = True ) [EOL] postal_code = Column ( Integer , index = True ) [EOL] phone_number = Column ( Integer , index = True ) [EOL] user_type = Column ( Enum ( UserType ) ) [EOL] date_created = Column ( DateTime ( timezone = True ) ) [EOL] date_updated = Column ( DateTime ( timezone = True ) ) [EOL] [EOL] country_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] province_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] city_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] district_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] subdistrict_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] country = relationship ( [string] , back_populates = [string] ) [EOL] province = relationship ( [string] , back_populates = [string] ) [EOL] city = relationship ( [string] , back_populates = [string] ) [EOL] district = relationship ( [string] , back_populates = [string] ) [EOL] subdistrict = relationship ( [string] , back_populates = [string] ) [EOL] staff = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL] student = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL] tutor = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[app.db_models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from enum import Enum [EOL] [EOL] [EOL] class UserType ( int , Enum ) : [EOL] staff = [number] [EOL] tutor = [number] [EOL] student = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0