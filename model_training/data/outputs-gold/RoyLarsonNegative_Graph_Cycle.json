from typing import List , Any [EOL] import typing [EOL] import negative_cycle [EOL] import negative_cycle as nc [EOL] from random import randrange [EOL] [EOL] [EOL] def test_parse_input ( ) : [EOL] normal = [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( normal ) [EOL] correct_edges = [ ( [number] , [number] , - [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] [EOL] assert num_nodes == [number] [EOL] assert edges == correct_edges [EOL] [EOL] no_edges = [ [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( no_edges ) [EOL] correct_edges = [ ] [EOL] assert num_nodes == [number] [EOL] assert edges == correct_edges [EOL] [EOL] [EOL] def test_node ( ) : [EOL] node_0 = nc . Node ( [number] ) [EOL] assert type ( node_0 ) == nc . Node [EOL] assert node_0 . num == [number] [EOL] [EOL] nodes = [ node_0 ] [EOL] for i in range ( [number] , [number] ) : [EOL] nodes . append ( nc . Node ( i ) ) [EOL] [EOL] edge_weights = [ ] [EOL] for i in range ( [number] ) : [EOL] edge_weights . append ( randrange ( [number] , [number] ) ) [EOL] [EOL] for i in range ( [number] ) : [EOL] nodes [ i ] . add_connection ( nodes [ i + [number] ] , edge_weights [ i ] ) [EOL] [EOL] assert nodes [ [number] ] in nodes [ [number] ] . connections [EOL] assert nodes [ [number] ] not in nodes [ [number] ] . connections [EOL] [EOL] [EOL] def test_build_graph ( ) : [EOL] normal = [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( normal ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] assert len ( nodes ) == [number] [EOL] [EOL] for source_node_ind , end_node_ind , edge_weight in edges : [EOL] source_node = nodes [ source_node_ind - [number] ] [EOL] end_node = nodes [ end_node_ind - [number] ] [EOL] assert end_node in source_node . connections [EOL] assert source_node . connections [ end_node ] == edge_weight [EOL] [EOL] no_edges = [ [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( no_edges ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] [EOL] def test_negative_cycle ( ) : [EOL] positive_test = [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( positive_test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_negative_cycle_2 ( ) : [EOL] negative_test = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( negative_test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert not nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_negative_cycle_3 ( ) : [EOL] negative_test = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] num_nodes , edges = nc . parse_input ( negative_test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert not nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_negative_cycle_unconnected ( ) : [EOL] [docstring] [EOL] test = [ [number] , [number] ] [EOL] num_nodes , edges = nc . parse_input ( test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert not nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_isolated_not_negative_cycle ( ) : [EOL] test = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] num_nodes , edges = nc . parse_input ( test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert not nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_isolated_negative_cycle ( ) : [EOL] test = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] ] [EOL] [EOL] num_nodes , edges = nc . parse_input ( test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] def test_fully_connected_graph_w_negative_cycle ( ) : [EOL] test = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] num_nodes , edges = nc . parse_input ( test ) [EOL] nodes = nc . build_graph ( num_nodes , edges ) [EOL] [EOL] assert nc . negative_cycle ( nodes ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] test_fully_connected_graph_w_negative_cycle ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0