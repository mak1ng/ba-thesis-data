from typing import Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] import io [EOL] import os [EOL] import re [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] def get_version ( ) : [EOL] regex = [string] [EOL] [EOL] path = ( [string] , ) [EOL] [EOL] return re . search ( regex , read ( * path ) ) . group ( [string] ) [EOL] [EOL] [EOL] def read ( * parts ) : [EOL] filename = os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , * parts ) [EOL] [EOL] with io . open ( filename , encoding = [string] , mode = [string] ) as fp : [EOL] return fp . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = get_version ( ) , author = [string] , author_email = [string] , url = [string] , description = [string] , long_description = read ( [string] ) , py_modules = [ [string] ] , include_package_data = True , zip_safe = False , install_requires = [ [string] , [string] ] , python_requires = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , keywords = [ [string] , [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import asyncio [EOL] import typing [EOL] import asyncio [EOL] import gc [EOL] import os [EOL] [EOL] import pytest [EOL] from aiohttp import web [EOL] from aiohttp . test_utils import TestClient , TestServer [EOL] [EOL] from aiohttp_request import middleware_factory [EOL] [EOL] asyncio . set_event_loop ( None ) [comment] [EOL] [EOL] [EOL] @ pytest . fixture def event_loop ( request ) : [EOL] loop = asyncio . new_event_loop ( ) [EOL] loop . set_debug ( bool ( os . environ . get ( [string] ) ) ) [EOL] [EOL] yield loop [EOL] [EOL] loop . run_until_complete ( loop . shutdown_asyncgens ( ) ) [EOL] [EOL] loop . call_soon ( loop . stop ) [EOL] loop . run_forever ( ) [EOL] loop . close ( ) [EOL] [EOL] gc . collect ( ) [EOL] gc . collect ( ) [comment] [EOL] [EOL] [EOL] @ pytest . fixture def loop ( event_loop , request ) : [EOL] asyncio . set_event_loop ( None ) [EOL] request . addfinalizer ( lambda : asyncio . set_event_loop ( None ) ) [comment] [EOL] [EOL] return event_loop [EOL] [EOL] [EOL] @ pytest . fixture def aiohttp_client ( loop ) : [EOL] clients = [ ] [EOL] [EOL] async def go ( app ) : [EOL] server = TestServer ( app , loop = loop ) [EOL] client = TestClient ( server , loop = loop ) [EOL] [EOL] await client . start_server ( ) [EOL] [EOL] clients . append ( client ) [EOL] [EOL] return client [EOL] [EOL] yield go [EOL] [EOL] async def finalize ( ) : [EOL] while clients : [EOL] await clients . pop ( ) . close ( ) [EOL] [EOL] loop . run_until_complete ( finalize ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture def test_case ( aiohttp_client ) : [EOL] [EOL] async def go ( side_effect ) : [EOL] async def hello ( request ) : [EOL] await side_effect ( ) [EOL] [EOL] return web . Response ( text = request [ [string] ] ) [EOL] [EOL] app = web . Application ( middlewares = [ middleware_factory ( ) ] ) [EOL] app . router . add_get ( [string] , hello ) [EOL] [EOL] client = await aiohttp_client ( app ) [EOL] [EOL] response = await client . get ( [string] ) [EOL] [EOL] assert response . status == [number] [EOL] [EOL] text = await response . text ( ) [EOL] [EOL] return text [EOL] [EOL] yield go [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import asyncio [EOL] import time [EOL] [EOL] import pytest [EOL] [EOL] from aiohttp_request import ThreadContext , get_request , grequest [EOL] [EOL] pytestmark = pytest . mark . asyncio [EOL] [EOL] [EOL] async def test_basic ( test_case ) : [EOL] [EOL] async def side_efect ( ) : [EOL] grequest [ [string] ] = [string] [EOL] [EOL] response = await test_case ( side_efect ) [EOL] [EOL] assert response == [string] [EOL] [EOL] [EOL] async def test_task ( test_case ) : [EOL] async def task ( ) : [EOL] grequest [ [string] ] = [string] [EOL] [EOL] async def side_efect ( ) : [EOL] await asyncio . ensure_future ( task ( ) ) [EOL] [EOL] response = await test_case ( side_efect ) [EOL] [EOL] assert response == [string] [EOL] [EOL] [EOL] async def test_task_background ( test_case ) : [EOL] request = None [EOL] [EOL] async def task ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] grequest [ [string] ] = True [EOL] [EOL] async def side_efect ( ) : [EOL] nonlocal request [EOL] [EOL] asyncio . ensure_future ( task ( ) ) [EOL] [EOL] request = get_request ( ) [EOL] [EOL] request [ [string] ] = [string] [EOL] request [ [string] ] = False [EOL] [EOL] response = await test_case ( side_efect ) [EOL] [EOL] assert response == [string] [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert request [ [string] ] [EOL] [EOL] [EOL] async def test_task_thread ( test_case , loop ) : [EOL] def task ( ) : [EOL] grequest [ [string] ] = [string] [EOL] [EOL] async def side_efect ( ) : [EOL] await loop . run_in_executor ( None , ThreadContext ( task ) ) [EOL] [EOL] response = await test_case ( side_efect ) [EOL] [EOL] assert response == [string] [EOL] [EOL] [EOL] async def test_thread_background ( test_case , loop ) : [EOL] request = None [EOL] [EOL] def _task ( ) : [EOL] time . sleep ( [number] ) [EOL] grequest [ [string] ] = True [EOL] [EOL] async def task ( ) : [EOL] await loop . run_in_executor ( None , ThreadContext ( _task ) ) [EOL] [EOL] async def side_efect ( ) : [EOL] nonlocal request [EOL] [EOL] asyncio . ensure_future ( task ( ) ) [EOL] [EOL] request = get_request ( ) [EOL] [EOL] request [ [string] ] = [string] [EOL] request [ [string] ] = False [EOL] [EOL] response = await test_case ( side_efect ) [EOL] [EOL] assert response == [string] [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] assert request [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0